uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xE4007F1EDCD91179 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0xE4007F1EDCD91179 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::CollectMapDataLogic<(md::MapDataType)79>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _WORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _WORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _WORD *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  unint64_t v57;
  __int128 v58;
  __int16 v59;
  _QWORD *i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *j;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _QWORD *k;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  _QWORD *m;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  _QWORD *v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  _QWORD *n;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  _QWORD *v497;
  uint64_t *v498;
  uint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  uint64_t *v509;

  v5 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>(*(_QWORD *)(a1 + 128));
  v6 = v5;
  if (v5[29])
  {
    v7 = (_QWORD *)v5[28];
    if (v7)
    {
      v8 = (_QWORD *)v5[31];
      v9 = (uint64_t *)v5[7];
      v10 = (uint64_t)(v5[8] - (_QWORD)v9) >> 3;
      do
      {
        v505 = v9;
        v506 = v10;
        v500 = v8;
        v11 = v7[6];
        if (!v11)
          goto LABEL_516;
        (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v500, &v505);
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  v12 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>(*(_QWORD *)(a1 + 128));
  v13 = v12;
  if (v12[29])
  {
    v14 = (_QWORD *)v12[28];
    if (v14)
    {
      v15 = (_QWORD *)v12[31];
      v16 = (uint64_t *)v12[7];
      v17 = (uint64_t)(v12[8] - (_QWORD)v16) >> 3;
      do
      {
        v505 = v16;
        v506 = v17;
        v500 = v15;
        v18 = v14[6];
        if (!v18)
          goto LABEL_516;
        (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v18 + 48))(v18, &v500, &v505);
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  v13[8] = v13[7];
  v13[11] = v13[10];
  v498 = *a3;
  v19 = *(_QWORD *)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1)
  {
    v20 = gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
    *(_QWORD *)(a1 + 120) = v20;
    v21 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)79>>(*(_QWORD *)(a1 + 128));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v21, v20);
    v22 = *(_QWORD *)(a1 + 120);
    v23 = *(_QWORD *)(a1 + 128);
    v500 = (_QWORD *)0x83F186BB0B4B5048;
    v24 = *(int8x8_t *)(v23 + 128);
    if (v24)
    {
      v25 = (uint8x8_t)vcnt_s8(v24);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = 0x83F186BB0B4B5048;
        if (*(_QWORD *)&v24 <= 0x83F186BB0B4B5048)
          v26 = 0x83F186BB0B4B5048 % *(_QWORD *)&v24;
      }
      else
      {
        v26 = (*(_QWORD *)&v24 - 1) & 0x83F186BB0B4B5048;
      }
      v27 = *(_QWORD **)(*(_QWORD *)(v23 + 120) + 8 * v26);
      if (v27)
      {
        v28 = (_QWORD *)*v27;
        if (v28)
        {
          if (v25.u32[0] < 2uLL)
          {
            v29 = *(_QWORD *)&v24 - 1;
            while (1)
            {
              v31 = v28[1];
              if (v31 == 0x83F186BB0B4B5048)
              {
                if (v28[2] == 0x83F186BB0B4B5048)
                  goto LABEL_230;
              }
              else if ((v31 & v29) != v26)
              {
                goto LABEL_34;
              }
              v28 = (_QWORD *)*v28;
              if (!v28)
                goto LABEL_34;
            }
          }
          do
          {
            v30 = v28[1];
            if (v30 == 0x83F186BB0B4B5048)
            {
              if (v28[2] == 0x83F186BB0B4B5048)
              {
LABEL_230:
                v32 = v28[3];
                goto LABEL_37;
              }
            }
            else
            {
              if (v30 >= *(_QWORD *)&v24)
                v30 %= *(_QWORD *)&v24;
              if (v30 != v26)
                break;
            }
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_34:
    v32 = operator new();
    *(_QWORD *)(v32 + 16) = "SceneComponents::LayerDataInfo<md::MapDataType::PolarFlyover>]";
    *(_QWORD *)(v32 + 24) = 61;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_OWORD *)(v32 + 64) = 0u;
    *(_OWORD *)(v32 + 80) = 0u;
    *(_OWORD *)(v32 + 96) = 0u;
    *(_OWORD *)(v32 + 112) = 0u;
    *(_OWORD *)(v32 + 128) = 0u;
    *(_DWORD *)(v32 + 144) = 1065353216;
    *(_OWORD *)(v32 + 152) = 0u;
    *(_OWORD *)(v32 + 168) = 0u;
    *(_QWORD *)(v32 + 184) = 0;
    *(_DWORD *)(v32 + 192) = 1065353216;
    *(_OWORD *)(v32 + 200) = 0u;
    *(_OWORD *)(v32 + 216) = 0u;
    *(_QWORD *)(v32 + 232) = 0;
    *(_DWORD *)(v32 + 240) = 1065353216;
    *(_QWORD *)v32 = &off_1E4270818;
    *(_QWORD *)(v32 + 8) = 0x83F186BB0B4B5048;
    *(_QWORD *)(v32 + 248) = v23;
    v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v23 + 120), 0x83F186BB0B4B5048, &v500);
    v34 = v33[3];
    v33[3] = v32;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v505 = (uint64_t *)0x83F186BB0B4B5048;
    v506 = (uint64_t)"SceneComponents::LayerDataInfo<md::MapDataType::PolarFlyover>]";
    v507 = 61;
    gdc::Registry::_registerStorageDataSignals(v23, 0x83F186BB0B4B5048, (uint64_t)&v505, (uint64_t *)(v32 + 104));
LABEL_37:
    v504 = v22;
    v35 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v32 + 32), (uint64_t)&v504);
    if ((v36 & 1) != 0)
    {
      v42 = *(char **)(v32 + 88);
      v41 = *(_QWORD *)(v32 + 96);
      if ((unint64_t)v42 >= v41)
      {
        v44 = *(char **)(v32 + 80);
        v45 = v42 - v44;
        if (v42 - v44 <= -3)
          abort();
        v46 = v45 >> 1;
        v47 = v41 - (_QWORD)v44;
        if (v47 <= (v45 >> 1) + 1)
          v48 = v46 + 1;
        else
          v48 = v47;
        if (v47 >= 0x7FFFFFFFFFFFFFFELL)
          v49 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          if (v49 < 0)
            goto LABEL_521;
          v50 = operator new(2 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[2 * v46];
        v52 = &v50[2 * v49];
        *v51 = 79;
        v43 = v51 + 1;
        if (v42 != v44)
        {
          v53 = v42 - v44 - 2;
          if (v53 < 0x1E)
            goto LABEL_529;
          if (v42 - v50 - (v45 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_529;
          v54 = (v53 >> 1) + 1;
          v55 = &v50[2 * v46 - 16];
          v56 = v42 - 16;
          v57 = v54 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v58 = *(_OWORD *)v56;
            *(v55 - 1) = *((_OWORD *)v56 - 1);
            *v55 = v58;
            v55 -= 2;
            v56 -= 32;
            v57 -= 16;
          }
          while (v57);
          v51 -= v54 & 0xFFFFFFFFFFFFFFF0;
          v42 -= 2 * (v54 & 0xFFFFFFFFFFFFFFF0);
          if (v54 != (v54 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_529:
            do
            {
              v59 = *((_WORD *)v42 - 1);
              v42 -= 2;
              *--v51 = v59;
            }
            while (v42 != v44);
          }
        }
        *(_QWORD *)(v32 + 80) = v51;
        *(_QWORD *)(v32 + 88) = v43;
        *(_QWORD *)(v32 + 96) = v52;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_WORD *)v42 = 79;
        v43 = v42 + 2;
      }
      *(_QWORD *)(v32 + 88) = v43;
      v38 = *(_QWORD **)(v32 + 248);
    }
    else
    {
      v37 = (_WORD *)(*(_QWORD *)(v32 + 80) + (((uint64_t)v35 - *(_QWORD *)(v32 + 56)) >> 2));
      *v37 = 79;
      v38 = *(_QWORD **)(v32 + 248);
      if (v37 != *(_WORD **)(v32 + 88))
      {
        v39 = *(_QWORD **)(v32 + 128);
        if (v39)
        {
          while (1)
          {
            v505 = &v504;
            v506 = 1;
            v500 = v38;
            v40 = v39[6];
            if (!v40)
              break;
            (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v40 + 48))(v40, &v500, &v505);
            v39 = (_QWORD *)*v39;
            if (!v39)
              goto LABEL_69;
          }
LABEL_516:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_517:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        goto LABEL_69;
      }
    }
    for (i = *(_QWORD **)(v32 + 176); i; i = (_QWORD *)*i)
    {
      v505 = &v504;
      v506 = 1;
      v500 = v38;
      v61 = i[6];
      if (!v61)
        goto LABEL_516;
      (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v61 + 48))(v61, &v500, &v505);
    }
LABEL_69:
    v63 = *(_QWORD *)(a1 + 120);
    v62 = *(_QWORD *)(a1 + 128);
    v501 = 0;
    v502 = 0;
    v500 = &v501;
    v64 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)79>>(v62);
    v503 = v63;
    v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v503);
    if ((v66 & 1) != 0)
    {
      v71 = v64[12];
      v72 = (uint64_t *)v64[11];
      if ((unint64_t)v72 >= v71)
      {
        v74 = v64[10];
        v75 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v72 - v74) >> 3);
        if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v74) >> 3);
        v77 = 2 * v76;
        if (2 * v76 <= v75 + 1)
          v77 = v75 + 1;
        if (v76 >= 0x555555555555555)
          v78 = 0xAAAAAAAAAAAAAAALL;
        else
          v78 = v77;
        v509 = v64 + 12;
        if (v78)
        {
          if (v78 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_521;
          v79 = (uint64_t *)operator new(24 * v78);
        }
        else
        {
          v79 = 0;
        }
        v83 = &v79[3 * v75];
        v505 = v79;
        v506 = (uint64_t)v83;
        v507 = (uint64_t)v83;
        v508 = (char *)&v79[3 * v78];
        v83[1] = 0;
        v83[2] = 0;
        *v83 = (uint64_t)(v83 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v83, v500, &v501);
        v84 = v506;
        v73 = (uint64_t *)(v507 + 24);
        v85 = (char *)v64[10];
        v86 = (char *)v64[11];
        if (v86 == v85)
        {
          v64[10] = v506;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
        }
        else
        {
          v87 = 0;
          do
          {
            v88 = v84 + v87;
            *(_QWORD *)(v88 - 24) = *(_QWORD *)&v86[v87 - 24];
            v89 = &v86[v87 - 16];
            v90 = *(_QWORD *)v89;
            *(_QWORD *)(v84 + v87 - 16) = *(_QWORD *)v89;
            v91 = v84 + v87 - 16;
            v92 = *(_QWORD *)&v86[v87 - 8];
            *(_QWORD *)(v88 - 8) = v92;
            if (v92)
            {
              *(_QWORD *)(v90 + 16) = v91;
              *(_QWORD *)&v86[v87 - 24] = v89;
              *(_QWORD *)v89 = 0;
              *(_QWORD *)&v86[v87 - 8] = 0;
            }
            else
            {
              *(_QWORD *)(v88 - 24) = v91;
            }
            v87 -= 24;
          }
          while (&v86[v87] != v85);
          v93 = v84 + v87;
          v86 = (char *)v64[10];
          v94 = (char *)v64[11];
          v64[10] = v93;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
          if (v94 != v86)
          {
            do
            {
              v95 = v94 - 24;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v94 - 2));
              v94 = v95;
            }
            while (v95 != v86);
          }
        }
        if (v86)
          operator delete(v86);
      }
      else
      {
        v72[2] = 0;
        v72[1] = 0;
        *v72 = (uint64_t)(v72 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v72, v500, &v501);
        v73 = v72 + 3;
        v64[11] = (uint64_t)(v72 + 3);
      }
      v64[11] = (uint64_t)v73;
      v80 = v64[31];
    }
    else
    {
      v67 = v64[10] + 24 * (((uint64_t)v65 - v64[7]) >> 3);
      v68 = v67 + 8;
      std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v67 + 8));
      *(_QWORD *)v67 = v500;
      v69 = v501;
      *(_QWORD *)(v67 + 8) = v501;
      v70 = v502;
      *(_QWORD *)(v67 + 16) = v502;
      if (v70)
      {
        v69[2] = v68;
        v500 = &v501;
        v501 = 0;
        v502 = 0;
      }
      else
      {
        *(_QWORD *)v67 = v68;
      }
      v80 = v64[31];
      if (v67 != v64[11])
      {
        for (j = (_QWORD *)v64[16]; j; j = (_QWORD *)*j)
        {
          v505 = &v503;
          v506 = 1;
          v504 = v80;
          v82 = j[6];
          if (!v82)
            goto LABEL_517;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v82 + 48))(v82, &v504, &v505);
        }
LABEL_106:
        std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
        v99 = *(_QWORD *)(a1 + 120);
        v98 = *(_QWORD *)(a1 + 128);
        v501 = 0;
        v502 = 0;
        v500 = &v501;
        v100 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>(v98);
        v503 = v99;
        v101 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v100 + 4, (uint64_t)&v503);
        if ((v102 & 1) != 0)
        {
          v107 = v100[12];
          v108 = (uint64_t *)v100[11];
          if ((unint64_t)v108 >= v107)
          {
            v110 = v100[10];
            v111 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v108 - v110) >> 3);
            if (v111 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v110) >> 3);
            v113 = 2 * v112;
            if (2 * v112 <= v111 + 1)
              v113 = v111 + 1;
            if (v112 >= 0x555555555555555)
              v114 = 0xAAAAAAAAAAAAAAALL;
            else
              v114 = v113;
            v509 = v100 + 12;
            if (v114)
            {
              if (v114 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_521;
              v115 = (uint64_t *)operator new(24 * v114);
            }
            else
            {
              v115 = 0;
            }
            v119 = &v115[3 * v111];
            v505 = v115;
            v506 = (uint64_t)v119;
            v507 = (uint64_t)v119;
            v508 = (char *)&v115[3 * v114];
            v119[1] = 0;
            v119[2] = 0;
            *v119 = (uint64_t)(v119 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v119, v500, &v501);
            v120 = v506;
            v109 = (uint64_t *)(v507 + 24);
            v121 = (char *)v100[10];
            v122 = (char *)v100[11];
            if (v122 == v121)
            {
              v100[10] = v506;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
            }
            else
            {
              v123 = 0;
              do
              {
                v124 = v120 + v123;
                *(_QWORD *)(v124 - 24) = *(_QWORD *)&v122[v123 - 24];
                v125 = &v122[v123 - 16];
                v126 = *(_QWORD *)v125;
                *(_QWORD *)(v120 + v123 - 16) = *(_QWORD *)v125;
                v127 = v120 + v123 - 16;
                v128 = *(_QWORD *)&v122[v123 - 8];
                *(_QWORD *)(v124 - 8) = v128;
                if (v128)
                {
                  *(_QWORD *)(v126 + 16) = v127;
                  *(_QWORD *)&v122[v123 - 24] = v125;
                  *(_QWORD *)v125 = 0;
                  *(_QWORD *)&v122[v123 - 8] = 0;
                }
                else
                {
                  *(_QWORD *)(v124 - 24) = v127;
                }
                v123 -= 24;
              }
              while (&v122[v123] != v121);
              v129 = v120 + v123;
              v122 = (char *)v100[10];
              v130 = (char *)v100[11];
              v100[10] = v129;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
              if (v130 != v122)
              {
                do
                {
                  v131 = v130 - 24;
                  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v130 - 2));
                  v130 = v131;
                }
                while (v131 != v122);
              }
            }
            if (v122)
              operator delete(v122);
          }
          else
          {
            v108[2] = 0;
            v108[1] = 0;
            *v108 = (uint64_t)(v108 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v108, v500, &v501);
            v109 = v108 + 3;
            v100[11] = (uint64_t)(v108 + 3);
          }
          v100[11] = (uint64_t)v109;
          v116 = v100[31];
        }
        else
        {
          v103 = v100[10] + 24 * (((uint64_t)v101 - v100[7]) >> 3);
          v104 = v103 + 8;
          std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v103 + 8));
          *(_QWORD *)v103 = v500;
          v105 = v501;
          *(_QWORD *)(v103 + 8) = v501;
          v106 = v502;
          *(_QWORD *)(v103 + 16) = v502;
          if (v106)
          {
            v105[2] = v104;
            v500 = &v501;
            v501 = 0;
            v502 = 0;
          }
          else
          {
            *(_QWORD *)v103 = v104;
          }
          v116 = v100[31];
          if (v103 != v100[11])
          {
            for (k = (_QWORD *)v100[16]; k; k = (_QWORD *)*k)
            {
              v505 = &v503;
              v506 = 1;
              v504 = v116;
              v118 = k[6];
              if (!v118)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v118 + 48))(v118, &v504, &v505);
            }
LABEL_143:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v135 = *(_QWORD *)(a1 + 120);
            v134 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = &v501;
            v136 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>(v134);
            v503 = v135;
            v137 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v136 + 4, (uint64_t)&v503);
            if ((v138 & 1) != 0)
            {
              v143 = v136[12];
              v144 = (uint64_t *)v136[11];
              if ((unint64_t)v144 >= v143)
              {
                v146 = v136[10];
                v147 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v144 - v146) >> 3);
                if (v147 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - v146) >> 3);
                v149 = 2 * v148;
                if (2 * v148 <= v147 + 1)
                  v149 = v147 + 1;
                if (v148 >= 0x555555555555555)
                  v150 = 0xAAAAAAAAAAAAAAALL;
                else
                  v150 = v149;
                v509 = v136 + 12;
                if (v150)
                {
                  if (v150 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_521;
                  v151 = (uint64_t *)operator new(24 * v150);
                }
                else
                {
                  v151 = 0;
                }
                v155 = &v151[3 * v147];
                v505 = v151;
                v506 = (uint64_t)v155;
                v507 = (uint64_t)v155;
                v508 = (char *)&v151[3 * v150];
                v155[1] = 0;
                v155[2] = 0;
                *v155 = (uint64_t)(v155 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v155, v500, &v501);
                v156 = v506;
                v145 = (uint64_t *)(v507 + 24);
                v157 = (char *)v136[10];
                v158 = (char *)v136[11];
                if (v158 == v157)
                {
                  v136[10] = v506;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                }
                else
                {
                  v159 = 0;
                  do
                  {
                    v160 = v156 + v159;
                    *(_QWORD *)(v160 - 24) = *(_QWORD *)&v158[v159 - 24];
                    v161 = &v158[v159 - 16];
                    v162 = *(_QWORD *)v161;
                    *(_QWORD *)(v156 + v159 - 16) = *(_QWORD *)v161;
                    v163 = v156 + v159 - 16;
                    v164 = *(_QWORD *)&v158[v159 - 8];
                    *(_QWORD *)(v160 - 8) = v164;
                    if (v164)
                    {
                      *(_QWORD *)(v162 + 16) = v163;
                      *(_QWORD *)&v158[v159 - 24] = v161;
                      *(_QWORD *)v161 = 0;
                      *(_QWORD *)&v158[v159 - 8] = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v160 - 24) = v163;
                    }
                    v159 -= 24;
                  }
                  while (&v158[v159] != v157);
                  v165 = v156 + v159;
                  v158 = (char *)v136[10];
                  v166 = (char *)v136[11];
                  v136[10] = v165;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                  if (v166 != v158)
                  {
                    do
                    {
                      v167 = v166 - 24;
                      std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v166 - 2));
                      v166 = v167;
                    }
                    while (v167 != v158);
                  }
                }
                if (v158)
                  operator delete(v158);
              }
              else
              {
                v144[2] = 0;
                v144[1] = 0;
                *v144 = (uint64_t)(v144 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v144, v500, &v501);
                v145 = v144 + 3;
                v136[11] = (uint64_t)(v144 + 3);
              }
              v136[11] = (uint64_t)v145;
              v152 = v136[31];
            }
            else
            {
              v139 = v136[10] + 24 * (((uint64_t)v137 - v136[7]) >> 3);
              v140 = v139 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v139 + 8));
              *(_QWORD *)v139 = v500;
              v141 = v501;
              *(_QWORD *)(v139 + 8) = v501;
              v142 = v502;
              *(_QWORD *)(v139 + 16) = v502;
              if (v142)
              {
                v141[2] = v140;
                v500 = &v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v139 = v140;
              }
              v152 = v136[31];
              if (v139 != v136[11])
              {
                v153 = (_QWORD *)v136[16];
                if (v153)
                {
                  while (1)
                  {
                    v505 = &v503;
                    v506 = 1;
                    v504 = v152;
                    v154 = v153[6];
                    if (!v154)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v154 + 48))(v154, &v504, &v505);
                    v153 = (_QWORD *)*v153;
                    if (!v153)
                      goto LABEL_180;
                  }
                }
                goto LABEL_180;
              }
            }
            for (m = (_QWORD *)v136[22]; m; m = (_QWORD *)*m)
            {
              v505 = &v503;
              v506 = 1;
              v504 = v152;
              v169 = m[6];
              if (!v169)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v169 + 48))(v169, &v504, &v505);
            }
LABEL_180:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v171 = *(_QWORD *)(a1 + 120);
            v170 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = &v501;
            v172 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>(v170);
            v503 = v171;
            v173 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v172 + 4, (uint64_t)&v503);
            if ((v174 & 1) == 0)
            {
              v175 = v172[10] + 24 * (((uint64_t)v173 - v172[7]) >> 3);
              v176 = v175 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v175 + 8));
              *(_QWORD *)v175 = v500;
              v177 = v501;
              *(_QWORD *)(v175 + 8) = v501;
              v178 = v502;
              *(_QWORD *)(v175 + 16) = v502;
              if (v178)
              {
                v177[2] = v176;
                v500 = &v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v175 = v176;
              }
              v188 = v172[31];
              if (v175 != v172[11])
              {
                v189 = (_QWORD *)v172[16];
                if (v189)
                {
                  while (1)
                  {
                    v505 = &v503;
                    v506 = 1;
                    v504 = v188;
                    v190 = v189[6];
                    if (!v190)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v190 + 48))(v190, &v504, &v505);
                    v189 = (_QWORD *)*v189;
                    if (!v189)
                      goto LABEL_217;
                  }
                }
                goto LABEL_217;
              }
LABEL_214:
              for (n = (_QWORD *)v172[22]; n; n = (_QWORD *)*n)
              {
                v505 = &v503;
                v506 = 1;
                v504 = v188;
                v205 = n[6];
                if (!v205)
                  goto LABEL_517;
                (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v205 + 48))(v205, &v504, &v505);
              }
LABEL_217:
              std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
              goto LABEL_218;
            }
            v179 = v172[12];
            v180 = (uint64_t *)v172[11];
            if ((unint64_t)v180 < v179)
            {
              v180[2] = 0;
              v180[1] = 0;
              *v180 = (uint64_t)(v180 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v180, v500, &v501);
              v181 = v180 + 3;
              v172[11] = (uint64_t)(v180 + 3);
LABEL_213:
              v172[11] = (uint64_t)v181;
              v188 = v172[31];
              goto LABEL_214;
            }
            v182 = v172[10];
            v183 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v180 - v182) >> 3);
            if (v183 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - v182) >> 3);
            v185 = 2 * v184;
            if (2 * v184 <= v183 + 1)
              v185 = v183 + 1;
            if (v184 >= 0x555555555555555)
              v186 = 0xAAAAAAAAAAAAAAALL;
            else
              v186 = v185;
            v509 = v172 + 12;
            if (!v186)
            {
              v187 = 0;
              goto LABEL_201;
            }
            if (v186 <= 0xAAAAAAAAAAAAAAALL)
            {
              v187 = (uint64_t *)operator new(24 * v186);
LABEL_201:
              v191 = &v187[3 * v183];
              v505 = v187;
              v506 = (uint64_t)v191;
              v507 = (uint64_t)v191;
              v508 = (char *)&v187[3 * v186];
              v191[1] = 0;
              v191[2] = 0;
              *v191 = (uint64_t)(v191 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v191, v500, &v501);
              v192 = v506;
              v181 = (uint64_t *)(v507 + 24);
              v193 = (char *)v172[10];
              v194 = (char *)v172[11];
              if (v194 == v193)
              {
                v172[10] = v506;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
              }
              else
              {
                v195 = 0;
                do
                {
                  v196 = v192 + v195;
                  *(_QWORD *)(v196 - 24) = *(_QWORD *)&v194[v195 - 24];
                  v197 = &v194[v195 - 16];
                  v198 = *(_QWORD *)v197;
                  *(_QWORD *)(v192 + v195 - 16) = *(_QWORD *)v197;
                  v199 = v192 + v195 - 16;
                  v200 = *(_QWORD *)&v194[v195 - 8];
                  *(_QWORD *)(v196 - 8) = v200;
                  if (v200)
                  {
                    *(_QWORD *)(v198 + 16) = v199;
                    *(_QWORD *)&v194[v195 - 24] = v197;
                    *(_QWORD *)v197 = 0;
                    *(_QWORD *)&v194[v195 - 8] = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v196 - 24) = v199;
                  }
                  v195 -= 24;
                }
                while (&v194[v195] != v193);
                v201 = v192 + v195;
                v194 = (char *)v172[10];
                v202 = (char *)v172[11];
                v172[10] = v201;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
                if (v202 != v194)
                {
                  do
                  {
                    v203 = v202 - 24;
                    std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v202 - 2));
                    v202 = v203;
                  }
                  while (v203 != v194);
                }
              }
              if (v194)
                operator delete(v194);
              goto LABEL_213;
            }
LABEL_521:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
        }
        v132 = (_QWORD *)v100[22];
        if (v132)
        {
          while (1)
          {
            v505 = &v503;
            v506 = 1;
            v504 = v116;
            v133 = v132[6];
            if (!v133)
              goto LABEL_517;
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v133 + 48))(v133, &v504, &v505);
            v132 = (_QWORD *)*v132;
            if (!v132)
              goto LABEL_143;
          }
        }
        goto LABEL_143;
      }
    }
    v96 = (_QWORD *)v64[22];
    if (v96)
    {
      while (1)
      {
        v505 = &v503;
        v506 = 1;
        v504 = v80;
        v97 = v96[6];
        if (!v97)
          goto LABEL_517;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v97 + 48))(v97, &v504, &v505);
        v96 = (_QWORD *)*v96;
        if (!v96)
          goto LABEL_106;
      }
    }
    goto LABEL_106;
  }
LABEL_218:
  v499 = a1;
  v206 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)79>>(v19);
  v207 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)79>>(v19);
  v208 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>(v19);
  v209 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>(v19);
  v210 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>(v19);
  v211 = (_QWORD *)v210;
  v212 = v208 + 4;
  v213 = v209 + 4;
  v214 = v210 + 32;
  v216 = v206[7];
  v215 = v206[8];
  if (v207[8] - v207[7] >= (unint64_t)(v215 - v216))
    v217 = v206 + 4;
  else
    v217 = v207 + 4;
  if (v208[8] - v208[7] < v217[4] - v217[3])
    v217 = v208 + 4;
  if (v209[8] - v209[7] < v217[4] - v217[3])
    v217 = v209 + 4;
  if (*(_QWORD *)(v210 + 64) - *(_QWORD *)(v210 + 56) >= v217[4] - v217[3])
    v218 = v217;
  else
    v218 = (_QWORD *)(v210 + 32);
  if (v206 + 4 == v218)
  {
    v495 = v210 + 32;
    v505 = v498;
    v506 = v499;
    while (v216 != v215)
    {
      v220 = *(unsigned int *)(v216 + 4);
      v221 = v220 >> 7;
      v222 = v207[4];
      v223 = (v207[5] - v222) >> 3;
      if (v220 >> 7 < v223)
      {
        v224 = *(_QWORD *)(v222 + 8 * v221);
        if (v224)
        {
          v225 = v220 & 0x7F;
          v226 = *(unsigned __int16 *)(v224 + 2 * v225);
          v227 = v207[7];
          v228 = v207[8];
          v229 = (v228 - v227) >> 3;
          if (v229 > v226)
          {
            v230 = v227 + 8 * v226;
            if (v230 != v228 && *(_DWORD *)(v230 + 4) == (_DWORD)v220)
            {
              v232 = v208[4];
              v233 = (v208[5] - v232) >> 3;
              if (v221 < v233)
              {
                v234 = *(_QWORD *)(v232 + 8 * v221);
                if (v234)
                {
                  v235 = *(unsigned __int16 *)(v234 + 2 * v225);
                  v237 = v208[7];
                  v236 = v208[8];
                  v238 = (v236 - v237) >> 3;
                  if (v238 > v235)
                  {
                    v239 = v237 + 8 * v235;
                    if (v239 != v236 && *(_DWORD *)(v239 + 4) == (_DWORD)v220)
                    {
                      v241 = v209[4];
                      v242 = (v209[5] - v241) >> 3;
                      if (v221 < v242)
                      {
                        v243 = *(_QWORD *)(v241 + 8 * v221);
                        if (v243)
                        {
                          v244 = *(unsigned __int16 *)(v243 + 2 * v225);
                          v245 = v209[7];
                          v496 = v213;
                          v494 = v209[8];
                          v493 = (v494 - v245) >> 3;
                          if (v493 > v244)
                          {
                            v246 = v245 + 8 * v244;
                            if (v246 != v494 && *(_DWORD *)(v246 + 4) == (_DWORD)v220)
                            {
                              v492 = v211[4];
                              v491 = (v211[5] - v492) >> 3;
                              if (v221 < v491)
                              {
                                v248 = *(_QWORD *)(v492 + 8 * v221);
                                if (v248)
                                {
                                  v249 = *(unsigned __int16 *)(v248 + 2 * v225);
                                  v489 = v211[7];
                                  v490 = v211[8];
                                  if ((v490 - v489) >> 3 > v249)
                                  {
                                    v250 = v489 + 8 * v249;
                                    if (v250 != v490 && *(_DWORD *)(v250 + 4) == (_DWORD)v220)
                                    {
                                      v251 = *(_QWORD *)v216;
                                      v252 = HIDWORD(*(_QWORD *)v216);
                                      v253 = *(_QWORD *)v216 >> 39;
                                      if (v253 < v223
                                        && (v254 = *(_QWORD *)(v222 + 8 * v253)) != 0
                                        && (v255 = *(unsigned __int16 *)(v254 + 2 * (HIDWORD(v251) & 0x7F)), v229 > v255)
                                        && (v256 = v227 + 8 * v255, v256 != v228)
                                        && *(_DWORD *)(v256 + 4) == (_DWORD)v252)
                                      {
                                        v257 = (uint64_t *)(v207[10] + 24 * v255);
                                      }
                                      else
                                      {
                                        v257 = (uint64_t *)v207[11];
                                      }
                                      if (v253 < v233
                                        && (v258 = *(_QWORD *)(v232 + 8 * v253)) != 0
                                        && (v259 = *(unsigned __int16 *)(v258 + 2 * (HIDWORD(v251) & 0x7F)), v238 > v259)
                                        && (v260 = v237 + 8 * v259, v260 != v236)
                                        && *(_DWORD *)(v260 + 4) == (_DWORD)v252)
                                      {
                                        v261 = (uint64_t *)(v208[10] + 24 * v259);
                                      }
                                      else
                                      {
                                        v261 = (uint64_t *)v208[11];
                                      }
                                      v262 = HIDWORD(*(_QWORD *)v216);
                                      if (v253 < v242
                                        && (v263 = *(_QWORD *)(v241 + 8 * v253)) != 0
                                        && (v264 = *(unsigned __int16 *)(v263 + 2 * (HIDWORD(v251) & 0x7F)), v493 > v264)
                                        && (v265 = v245 + 8 * v264, v265 != v494)
                                        && *(_DWORD *)(v265 + 4) == (_DWORD)v262)
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)(v209[10] + 24 * v264);
                                      }
                                      else
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)v209[11];
                                      }
                                      if (v253 < v491
                                        && (v268 = *(_QWORD *)(v492 + 8 * v253)) != 0
                                        && (v269 = *(unsigned __int16 *)(v268 + 2 * (HIDWORD(v251) & 0x7F)), v266 > v269)
                                        && (v270 = v489 + 8 * v269, v270 != v490)
                                        && *(_DWORD *)(v270 + 4) == (_DWORD)v262)
                                      {
                                        v219 = v211[10] + 24 * v269;
                                      }
                                      else
                                      {
                                        v219 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()((uint64_t)&v505, v251, v257, v261, v267, v219);
                                      v213 = v496;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v216 += 8;
    }
    v214 = v495;
  }
  v271 = v498;
  if (v207 + 4 != v218)
  {
    if (v212 != v218)
      goto LABEL_294;
LABEL_351:
    v326 = v213;
    v505 = v271;
    v506 = v499;
    v327 = v208[7];
    v328 = v208[8];
    if (v327 != v328)
    {
      v329 = (uint64_t *)v208[10];
      do
      {
        v331 = *(unsigned int *)(v327 + 4);
        v332 = v331 >> 7;
        v333 = v206[4];
        if (v331 >> 7 < (v206[5] - v333) >> 3)
        {
          v334 = *(_QWORD *)(v333 + 8 * v332);
          if (v334)
          {
            v335 = v331 & 0x7F;
            v336 = *(unsigned __int16 *)(v334 + 2 * v335);
            v338 = v206[7];
            v337 = v206[8];
            if (v336 < (v337 - v338) >> 3)
            {
              v339 = v338 + 8 * v336;
              if (v339 != v337 && *(_DWORD *)(v339 + 4) == (_DWORD)v331)
              {
                v341 = v207[4];
                v342 = (v207[5] - v341) >> 3;
                if (v332 < v342)
                {
                  v343 = *(_QWORD *)(v341 + 8 * v332);
                  if (v343)
                  {
                    v344 = *(unsigned __int16 *)(v343 + 2 * v335);
                    v346 = v207[7];
                    v345 = v207[8];
                    v347 = (v345 - v346) >> 3;
                    if (v347 > v344)
                    {
                      v348 = v346 + 8 * v344;
                      if (v348 != v345 && *(_DWORD *)(v348 + 4) == (_DWORD)v331)
                      {
                        v350 = v209[4];
                        v351 = (v209[5] - v350) >> 3;
                        if (v332 < v351)
                        {
                          v352 = *(_QWORD *)(v350 + 8 * v332);
                          if (v352)
                          {
                            v353 = *(unsigned __int16 *)(v352 + 2 * v335);
                            v355 = v209[7];
                            v354 = v209[8];
                            v356 = (v354 - v355) >> 3;
                            if (v356 > v353)
                            {
                              v357 = v355 + 8 * v353;
                              if (v357 != v354 && *(_DWORD *)(v357 + 4) == (_DWORD)v331)
                              {
                                v359 = v211[4];
                                v360 = (v211[5] - v359) >> 3;
                                if (v332 < v360)
                                {
                                  v361 = *(_QWORD *)(v359 + 8 * v332);
                                  if (v361)
                                  {
                                    v362 = *(unsigned __int16 *)(v361 + 2 * v335);
                                    v364 = v211[7];
                                    v363 = v211[8];
                                    v365 = (v363 - v364) >> 3;
                                    if (v365 > v362)
                                    {
                                      v366 = v364 + 8 * v362;
                                      if (v366 != v363 && *(_DWORD *)(v366 + 4) == (_DWORD)v331)
                                      {
                                        v367 = *(_QWORD *)v327;
                                        v368 = HIDWORD(*(_QWORD *)v327);
                                        v369 = *(_QWORD *)v327 >> 39;
                                        if (v369 < v342
                                          && (v370 = *(_QWORD *)(v341 + 8 * v369)) != 0
                                          && (v371 = *(unsigned __int16 *)(v370 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v347 > v371)
                                          && (v372 = v346 + 8 * v371, v372 != v345)
                                          && *(_DWORD *)(v372 + 4) == (_DWORD)v368)
                                        {
                                          v373 = (uint64_t *)(v207[10] + 24 * v371);
                                        }
                                        else
                                        {
                                          v373 = (uint64_t *)v207[11];
                                        }
                                        if (v369 < v351
                                          && (v374 = *(_QWORD *)(v350 + 8 * v369)) != 0
                                          && (v375 = *(unsigned __int16 *)(v374 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v356 > v375)
                                          && (v376 = v355 + 8 * v375, v376 != v354)
                                          && *(_DWORD *)(v376 + 4) == (_DWORD)v368)
                                        {
                                          v377 = (uint64_t *)(v209[10] + 24 * v375);
                                        }
                                        else
                                        {
                                          v377 = (uint64_t *)v209[11];
                                        }
                                        if (v369 < v360
                                          && (v378 = *(_QWORD *)(v359 + 8 * v369)) != 0
                                          && (v379 = *(unsigned __int16 *)(v378 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v365 > v379)
                                          && (v380 = v364 + 8 * v379, v380 != v363)
                                          && *(_DWORD *)(v380 + 4) == (_DWORD)v368)
                                        {
                                          v330 = v211[10] + 24 * v379;
                                        }
                                        else
                                        {
                                          v330 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()((uint64_t)&v505, v367, v373, v329, v377, v330);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v329 += 3;
        v327 += 8;
      }
      while (v327 != v328);
    }
    if (v326 != v218)
      goto LABEL_460;
    goto LABEL_406;
  }
  v497 = v213;
  v505 = v498;
  v506 = v499;
  v272 = v207[7];
  v273 = v207[8];
  if (v272 != v273)
  {
    v274 = (uint64_t *)v207[10];
    do
    {
      v276 = *(unsigned int *)(v272 + 4);
      v277 = v276 >> 7;
      v278 = v206[4];
      if (v276 >> 7 < (v206[5] - v278) >> 3)
      {
        v279 = *(_QWORD *)(v278 + 8 * v277);
        if (v279)
        {
          v280 = v276 & 0x7F;
          v281 = *(unsigned __int16 *)(v279 + 2 * v280);
          v283 = v206[7];
          v282 = v206[8];
          if (v281 < (v282 - v283) >> 3)
          {
            v284 = v283 + 8 * v281;
            if (v284 != v282 && *(_DWORD *)(v284 + 4) == (_DWORD)v276)
            {
              v286 = v208[4];
              v287 = (v208[5] - v286) >> 3;
              if (v277 < v287)
              {
                v288 = *(_QWORD *)(v286 + 8 * v277);
                if (v288)
                {
                  v289 = *(unsigned __int16 *)(v288 + 2 * v280);
                  v291 = v208[7];
                  v290 = v208[8];
                  v292 = (v290 - v291) >> 3;
                  if (v292 > v289)
                  {
                    v293 = v291 + 8 * v289;
                    if (v293 != v290 && *(_DWORD *)(v293 + 4) == (_DWORD)v276)
                    {
                      v295 = v209[4];
                      v296 = (v209[5] - v295) >> 3;
                      if (v277 < v296)
                      {
                        v297 = *(_QWORD *)(v295 + 8 * v277);
                        if (v297)
                        {
                          v298 = *(unsigned __int16 *)(v297 + 2 * v280);
                          v300 = v209[7];
                          v299 = v209[8];
                          v301 = (v299 - v300) >> 3;
                          if (v301 > v298)
                          {
                            v302 = v300 + 8 * v298;
                            if (v302 != v299 && *(_DWORD *)(v302 + 4) == (_DWORD)v276)
                            {
                              v304 = v211[4];
                              v305 = (v211[5] - v304) >> 3;
                              if (v277 < v305)
                              {
                                v306 = *(_QWORD *)(v304 + 8 * v277);
                                if (v306)
                                {
                                  v307 = *(unsigned __int16 *)(v306 + 2 * v280);
                                  v309 = v211[7];
                                  v308 = v211[8];
                                  v310 = (v308 - v309) >> 3;
                                  if (v310 > v307)
                                  {
                                    v311 = v309 + 8 * v307;
                                    if (v311 != v308 && *(_DWORD *)(v311 + 4) == (_DWORD)v276)
                                    {
                                      v312 = *(_QWORD *)v272;
                                      v313 = HIDWORD(*(_QWORD *)v272);
                                      v314 = *(_QWORD *)v272 >> 39;
                                      if (v314 < v287
                                        && (v315 = *(_QWORD *)(v286 + 8 * v314)) != 0
                                        && (v316 = *(unsigned __int16 *)(v315 + 2 * (HIDWORD(v312) & 0x7F)), v292 > v316)
                                        && (v317 = v291 + 8 * v316, v317 != v290)
                                        && *(_DWORD *)(v317 + 4) == (_DWORD)v313)
                                      {
                                        v318 = (uint64_t *)(v208[10] + 24 * v316);
                                      }
                                      else
                                      {
                                        v318 = (uint64_t *)v208[11];
                                      }
                                      if (v314 < v296
                                        && (v319 = *(_QWORD *)(v295 + 8 * v314)) != 0
                                        && (v320 = *(unsigned __int16 *)(v319 + 2 * (HIDWORD(v312) & 0x7F)), v301 > v320)
                                        && (v321 = v300 + 8 * v320, v321 != v299)
                                        && *(_DWORD *)(v321 + 4) == (_DWORD)v313)
                                      {
                                        v322 = (uint64_t *)(v209[10] + 24 * v320);
                                      }
                                      else
                                      {
                                        v322 = (uint64_t *)v209[11];
                                      }
                                      if (v314 < v305
                                        && (v323 = *(_QWORD *)(v304 + 8 * v314)) != 0
                                        && (v324 = *(unsigned __int16 *)(v323 + 2 * (HIDWORD(v312) & 0x7F)), v310 > v324)
                                        && (v325 = v309 + 8 * v324, v325 != v308)
                                        && *(_DWORD *)(v325 + 4) == (_DWORD)v313)
                                      {
                                        v275 = v211[10] + 24 * v324;
                                      }
                                      else
                                      {
                                        v275 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()((uint64_t)&v505, v312, v274, v318, v322, v275);
                                      v271 = v498;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v274 += 3;
      v272 += 8;
    }
    while (v272 != v273);
  }
  v213 = v497;
  if (v212 == v218)
    goto LABEL_351;
LABEL_294:
  if (v213 == v218)
  {
LABEL_406:
    v505 = v271;
    v506 = v499;
    v381 = v209[7];
    v382 = v209[8];
    if (v381 != v382)
    {
      v383 = (uint64_t *)v209[10];
      do
      {
        v385 = *(unsigned int *)(v381 + 4);
        v386 = v385 >> 7;
        v387 = v206[4];
        if (v385 >> 7 < (v206[5] - v387) >> 3)
        {
          v388 = *(_QWORD *)(v387 + 8 * v386);
          if (v388)
          {
            v389 = v385 & 0x7F;
            v390 = *(unsigned __int16 *)(v388 + 2 * v389);
            v392 = v206[7];
            v391 = v206[8];
            if (v390 < (v391 - v392) >> 3)
            {
              v393 = v392 + 8 * v390;
              if (v393 != v391 && *(_DWORD *)(v393 + 4) == (_DWORD)v385)
              {
                v395 = v207[4];
                v396 = (v207[5] - v395) >> 3;
                if (v386 < v396)
                {
                  v397 = *(_QWORD *)(v395 + 8 * v386);
                  if (v397)
                  {
                    v398 = *(unsigned __int16 *)(v397 + 2 * v389);
                    v400 = v207[7];
                    v399 = v207[8];
                    v401 = (v399 - v400) >> 3;
                    if (v401 > v398)
                    {
                      v402 = v400 + 8 * v398;
                      if (v402 != v399 && *(_DWORD *)(v402 + 4) == (_DWORD)v385)
                      {
                        v404 = v208[4];
                        v405 = (v208[5] - v404) >> 3;
                        if (v386 < v405)
                        {
                          v406 = *(_QWORD *)(v404 + 8 * v386);
                          if (v406)
                          {
                            v407 = *(unsigned __int16 *)(v406 + 2 * v389);
                            v409 = v208[7];
                            v408 = v208[8];
                            v410 = (v408 - v409) >> 3;
                            if (v410 > v407)
                            {
                              v411 = v409 + 8 * v407;
                              if (v411 != v408 && *(_DWORD *)(v411 + 4) == (_DWORD)v385)
                              {
                                v413 = v211[4];
                                v414 = (v211[5] - v413) >> 3;
                                if (v386 < v414)
                                {
                                  v415 = *(_QWORD *)(v413 + 8 * v386);
                                  if (v415)
                                  {
                                    v416 = *(unsigned __int16 *)(v415 + 2 * v389);
                                    v418 = v211[7];
                                    v417 = v211[8];
                                    v419 = (v417 - v418) >> 3;
                                    if (v419 > v416)
                                    {
                                      v420 = v418 + 8 * v416;
                                      if (v420 != v417 && *(_DWORD *)(v420 + 4) == (_DWORD)v385)
                                      {
                                        v421 = *(_QWORD *)v381;
                                        v422 = HIDWORD(*(_QWORD *)v381);
                                        v423 = *(_QWORD *)v381 >> 39;
                                        if (v423 < v396
                                          && (v424 = *(_QWORD *)(v395 + 8 * v423)) != 0
                                          && (v425 = *(unsigned __int16 *)(v424 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v401 > v425)
                                          && (v426 = v400 + 8 * v425, v426 != v399)
                                          && *(_DWORD *)(v426 + 4) == (_DWORD)v422)
                                        {
                                          v427 = (uint64_t *)(v207[10] + 24 * v425);
                                        }
                                        else
                                        {
                                          v427 = (uint64_t *)v207[11];
                                        }
                                        if (v423 < v405
                                          && (v428 = *(_QWORD *)(v404 + 8 * v423)) != 0
                                          && (v429 = *(unsigned __int16 *)(v428 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v410 > v429)
                                          && (v430 = v409 + 8 * v429, v430 != v408)
                                          && *(_DWORD *)(v430 + 4) == (_DWORD)v422)
                                        {
                                          v431 = (uint64_t *)(v208[10] + 24 * v429);
                                        }
                                        else
                                        {
                                          v431 = (uint64_t *)v208[11];
                                        }
                                        if (v423 < v414
                                          && (v432 = *(_QWORD *)(v413 + 8 * v423)) != 0
                                          && (v433 = *(unsigned __int16 *)(v432 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v419 > v433)
                                          && (v434 = v418 + 8 * v433, v434 != v417)
                                          && *(_DWORD *)(v434 + 4) == (_DWORD)v422)
                                        {
                                          v384 = v211[10] + 24 * v433;
                                        }
                                        else
                                        {
                                          v384 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()((uint64_t)&v505, v421, v427, v431, v383, v384);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v383 += 3;
        v381 += 8;
      }
      while (v381 != v382);
    }
  }
LABEL_460:
  if ((_QWORD *)v214 == v218)
  {
    v505 = v271;
    v506 = v499;
    v435 = v211[7];
    v436 = v211[8];
    if (v435 != v436)
    {
      v437 = v211[10];
      do
      {
        v439 = *(unsigned int *)(v435 + 4);
        v440 = v439 >> 7;
        v441 = v206[4];
        if (v439 >> 7 < (v206[5] - v441) >> 3)
        {
          v442 = *(_QWORD *)(v441 + 8 * v440);
          if (v442)
          {
            v443 = v439 & 0x7F;
            v444 = *(unsigned __int16 *)(v442 + 2 * v443);
            v446 = v206[7];
            v445 = v206[8];
            if (v444 < (v445 - v446) >> 3)
            {
              v447 = v446 + 8 * v444;
              if (v447 != v445 && *(_DWORD *)(v447 + 4) == (_DWORD)v439)
              {
                v449 = v207[4];
                v450 = (v207[5] - v449) >> 3;
                if (v440 < v450)
                {
                  v451 = *(_QWORD *)(v449 + 8 * v440);
                  if (v451)
                  {
                    v452 = *(unsigned __int16 *)(v451 + 2 * v443);
                    v454 = v207[7];
                    v453 = v207[8];
                    v455 = (v453 - v454) >> 3;
                    if (v455 > v452)
                    {
                      v456 = v454 + 8 * v452;
                      if (v456 != v453 && *(_DWORD *)(v456 + 4) == (_DWORD)v439)
                      {
                        v458 = v208[4];
                        v459 = (v208[5] - v458) >> 3;
                        if (v440 < v459)
                        {
                          v460 = *(_QWORD *)(v458 + 8 * v440);
                          if (v460)
                          {
                            v461 = *(unsigned __int16 *)(v460 + 2 * v443);
                            v463 = v208[7];
                            v462 = v208[8];
                            v464 = (v462 - v463) >> 3;
                            if (v464 > v461)
                            {
                              v465 = v463 + 8 * v461;
                              if (v465 != v462 && *(_DWORD *)(v465 + 4) == (_DWORD)v439)
                              {
                                v467 = v209[4];
                                v468 = (v209[5] - v467) >> 3;
                                if (v440 < v468)
                                {
                                  v469 = *(_QWORD *)(v467 + 8 * v440);
                                  if (v469)
                                  {
                                    v470 = *(unsigned __int16 *)(v469 + 2 * v443);
                                    v472 = v209[7];
                                    v471 = v209[8];
                                    v473 = (v471 - v472) >> 3;
                                    if (v473 > v470)
                                    {
                                      v474 = v472 + 8 * v470;
                                      if (v474 != v471 && *(_DWORD *)(v474 + 4) == (_DWORD)v439)
                                      {
                                        v475 = *(_QWORD *)v435;
                                        v476 = HIDWORD(*(_QWORD *)v435);
                                        v477 = *(_QWORD *)v435 >> 39;
                                        if (v477 < v450
                                          && (v478 = *(_QWORD *)(v449 + 8 * v477)) != 0
                                          && (v479 = *(unsigned __int16 *)(v478 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v455 > v479)
                                          && (v480 = v454 + 8 * v479, v480 != v453)
                                          && *(_DWORD *)(v480 + 4) == (_DWORD)v476)
                                        {
                                          v481 = (uint64_t *)(v207[10] + 24 * v479);
                                        }
                                        else
                                        {
                                          v481 = (uint64_t *)v207[11];
                                        }
                                        if (v477 < v459
                                          && (v482 = *(_QWORD *)(v458 + 8 * v477)) != 0
                                          && (v483 = *(unsigned __int16 *)(v482 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v464 > v483)
                                          && (v484 = v463 + 8 * v483, v484 != v462)
                                          && *(_DWORD *)(v484 + 4) == (_DWORD)v476)
                                        {
                                          v485 = (uint64_t *)(v208[10] + 24 * v483);
                                        }
                                        else
                                        {
                                          v485 = (uint64_t *)v208[11];
                                        }
                                        if (v477 < v468
                                          && (v486 = *(_QWORD *)(v467 + 8 * v477)) != 0
                                          && (v487 = *(unsigned __int16 *)(v486 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v473 > v487)
                                          && (v488 = v472 + 8 * v487, v488 != v471)
                                          && *(_DWORD *)(v488 + 4) == (_DWORD)v476)
                                        {
                                          v438 = (uint64_t *)(v209[10] + 24 * v487);
                                        }
                                        else
                                        {
                                          v438 = (uint64_t *)v209[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()((uint64_t)&v505, v475, v481, v485, v438, v437);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v437 += 24;
        v435 += 8;
      }
      while (v435 != v436);
    }
  }
}

void sub_19F658F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _QWORD **v17;
  va_list va;

  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDFFF4A13597C83A8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDFFF4A13597C83A8;
      if (*(_QWORD *)&v3 <= 0xDFFF4A13597C83A8)
        v5 = 0xDFFF4A13597C83A8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDFFF4A13597C83A8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDFFF4A13597C83A8)
            {
              if (v7[2] == 0xDFFF4A13597C83A8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDFFF4A13597C83A8)
          {
            if (v7[2] == 0xDFFF4A13597C83A8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidEnterView<md::MapDataType::PolarFlyover>]";
  *(_QWORD *)(v11 + 24) = 69;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270C98;
  *(_QWORD *)(v11 + 8) = 0xDFFF4A13597C83A8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDFFF4A13597C83A8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDFFF4A13597C83A8;
  v15[1] = "SceneComponents::LayerDataDidEnterView<md::MapDataType::PolarFlyover>]";
  v15[2] = 69;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDFFF4A13597C83A8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6592FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x34E30CF3F8B8CD48;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x34E30CF3F8B8CD48;
      if (*(_QWORD *)&v3 <= 0x34E30CF3F8B8CD48uLL)
        v5 = 0x34E30CF3F8B8CD48uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x34E30CF3F8B8CD48;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x34E30CF3F8B8CD48)
            {
              if (v7[2] == 0x34E30CF3F8B8CD48)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x34E30CF3F8B8CD48)
          {
            if (v7[2] == 0x34E30CF3F8B8CD48)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidExitView<md::MapDataType::PolarFlyover>]";
  *(_QWORD *)(v11 + 24) = 68;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270B18;
  *(_QWORD *)(v11 + 8) = 0x34E30CF3F8B8CD48;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x34E30CF3F8B8CD48uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x34E30CF3F8B8CD48;
  v15[1] = "SceneComponents::LayerDataDidExitView<md::MapDataType::PolarFlyover>]";
  v15[2] = 68;
  gdc::Registry::_registerStorageDataSignals(a1, 0x34E30CF3F8B8CD48, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F659524(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x27AB8748450A93BBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x27AB8748450A93BBLL;
      if (*(_QWORD *)&v3 <= 0x27AB8748450A93BBuLL)
        v5 = 0x27AB8748450A93BBuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x27AB8748450A93BBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x27AB8748450A93BBLL)
            {
              if (v7[2] == 0x27AB8748450A93BBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x27AB8748450A93BBLL)
          {
            if (v7[2] == 0x27AB8748450A93BBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataExitingView<md::MapDataType::PolarFlyover>]";
  *(_QWORD *)(v11 + 24) = 68;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270BD8;
  *(_QWORD *)(v11 + 8) = 0x27AB8748450A93BBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x27AB8748450A93BBuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x27AB8748450A93BBLL;
  v15[1] = "SceneComponents::LayerDataExitingView<md::MapDataType::PolarFlyover>]";
  v15[2] = 68;
  gdc::Registry::_registerStorageDataSignals(a1, 0x27AB8748450A93BBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F65974C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3C083CB4ACE2ADF1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3C083CB4ACE2ADF1;
      if (*(_QWORD *)&v3 <= 0x3C083CB4ACE2ADF1uLL)
        v5 = 0x3C083CB4ACE2ADF1uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3C083CB4ACE2ADF1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3C083CB4ACE2ADF1)
            {
              if (v7[2] == 0x3C083CB4ACE2ADF1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3C083CB4ACE2ADF1)
          {
            if (v7[2] == 0x3C083CB4ACE2ADF1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataPreviousInView<md::MapDataType::PolarFlyover>]";
  *(_QWORD *)(v11 + 24) = 71;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270E18;
  *(_QWORD *)(v11 + 8) = 0x3C083CB4ACE2ADF1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3C083CB4ACE2ADF1uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3C083CB4ACE2ADF1;
  v15[1] = "SceneComponents::LayerDataPreviousInView<md::MapDataType::PolarFlyover>]";
  v15[2] = 71;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3C083CB4ACE2ADF1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F659974(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  unint64_t v20;
  unsigned __int8 v21;
  _WORD *v22;
  _WORD *v23;
  uint64_t *v24;
  _WORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  _BOOL4 v33;
  _QWORD *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _BOOL4 v53;
  uint64_t *v54;
  uint64_t *v55;
  _BOOL4 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;

  v8 = a4;
  v9 = (uint64_t)a3;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  v15 = (_QWORD **)(a3 + 1);
  v14 = a3[1];
  v16 = a4 + 1;
  v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2])
    v18 = (uint64_t *)(a3[1] + 16);
  else
    v18 = a3;
  *v18 = (uint64_t)v15;
  v19 = (uint64_t **)(*v16 + 16);
  if (!v17)
    v19 = (uint64_t **)a4;
  *v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(_QWORD *)v9 = v15;
  *(_QWORD *)(v9 + 16) = 0;
  *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a6 + 8));
  *(_QWORD *)a6 = a6 + 8;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v20 = **(_QWORD **)a1;
  if ((v21 & 1) == 0)
  {
LABEL_152:
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
  }
  v22 = *(_WORD **)(v20 + 48);
  v23 = *(_WORD **)(v20 + 56);
  v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v22 != v23)
  {
    v25 = *(_WORD **)(v20 + 48);
    while (*v25 != 79)
    {
      v25 += 16;
      if (v25 == v23)
        goto LABEL_18;
    }
    if (v25 == v23)
    {
      v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v22 != 79)
      {
        v22 += 16;
        if (v22 == v23)
        {
          v22 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      v24 = (uint64_t *)(v22 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (_QWORD *)*v24, v24 + 1);
  v20 = *(_QWORD *)v9;
  v26 = (uint64_t *)*v8;
  v27 = (uint64_t *)*a5;
  *(_QWORD *)&v94 = a5;
  *((_QWORD *)&v94 + 1) = v27;
  while ((_QWORD **)v20 != v15)
  {
    if (v26 == v16)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, v20 + 32);
        v44 = *(_QWORD **)(v20 + 8);
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = *(_QWORD **)(v20 + 16);
            v41 = *v45 == v20;
            v20 = (unint64_t)v45;
          }
          while (!v41);
        }
        v20 = (unint64_t)v45;
      }
      while (v45 != v15);
      break;
    }
    v28 = *(_QWORD *)(v20 + 32);
    v29 = *(unsigned __int8 *)(v20 + 48);
    v30 = (char)v29;
    v31 = *((unsigned __int8 *)v26 + 48);
    v32 = v26[4];
    if (v29 == v31)
      v33 = v28 < v32;
    else
      v33 = (char)v29 < (char)v31;
    if (v33)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, v20 + 32);
      v34 = *(_QWORD **)(v20 + 8);
      if (v34)
      {
        do
        {
          v20 = (unint64_t)v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = v20;
          v20 = *(_QWORD *)(v20 + 16);
        }
        while (*(_QWORD *)v20 != v35);
      }
    }
    else
    {
      v36 = v32 < v28;
      if (v30 != (char)v31)
        v36 = (char)v31 < v30;
      if (v36)
      {
        v37 = (uint64_t *)v26[1];
        if (v37)
        {
          do
          {
            v26 = v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v38);
        }
      }
      else
      {
        v39 = *(_QWORD **)(v20 + 8);
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = *(_QWORD **)(v20 + 16);
            v41 = *v40 == v20;
            v20 = (unint64_t)v40;
          }
          while (!v41);
        }
        v42 = (uint64_t *)v26[1];
        if (v42)
        {
          do
          {
            v26 = v42;
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v43);
        }
        v20 = (unint64_t)v40;
      }
    }
  }
  v8 = (uint64_t *)*v8;
  v46 = *(_QWORD *)v9;
  v47 = *(_QWORD *)a6;
  *(_QWORD *)&v94 = a6;
  *((_QWORD *)&v94 + 1) = v47;
  while (v8 != v16)
  {
    if ((_QWORD **)v46 == v15)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, (uint64_t)(v8 + 4));
        v63 = (uint64_t *)v8[1];
        if (v63)
        {
          do
          {
            v64 = v63;
            v63 = (uint64_t *)*v63;
          }
          while (v63);
        }
        else
        {
          do
          {
            v64 = (uint64_t *)v8[2];
            v41 = *v64 == (_QWORD)v8;
            v8 = v64;
          }
          while (!v41);
        }
        v8 = v64;
      }
      while (v64 != v16);
      break;
    }
    v48 = v8[4];
    v49 = *((unsigned __int8 *)v8 + 48);
    v50 = (char)v49;
    v51 = *(unsigned __int8 *)(v46 + 48);
    v52 = *(_QWORD *)(v46 + 32);
    if (v49 == v51)
      v53 = v48 < v52;
    else
      v53 = (char)v49 < (char)v51;
    if (v53)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, (uint64_t)(v8 + 4));
      v54 = (uint64_t *)v8[1];
      if (v54)
      {
        do
        {
          v8 = v54;
          v54 = (uint64_t *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = v8;
          v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v55);
      }
    }
    else
    {
      v56 = v52 < v48;
      if (v50 != (char)v51)
        v56 = (char)v51 < v50;
      if (v56)
      {
        v57 = *(_QWORD **)(v46 + 8);
        if (v57)
        {
          do
          {
            v46 = (uint64_t)v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v58);
        }
      }
      else
      {
        v59 = (uint64_t *)v8[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (uint64_t *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (uint64_t *)v8[2];
            v41 = *v60 == (_QWORD)v8;
            v8 = v60;
          }
          while (!v41);
        }
        v61 = *(_QWORD **)(v46 + 8);
        if (v61)
        {
          do
          {
            v46 = (uint64_t)v61;
            v61 = (_QWORD *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v62);
        }
        v8 = v60;
      }
    }
  }
  if (!a5[2])
    goto LABEL_122;
  v65 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v66 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v65 + 4, (uint64_t)&v95);
  if ((v67 & 1) != 0)
  {
    v20 = v65[11];
    v69 = v65[12];
    if (v20 >= v69)
    {
      v71 = (char *)v65[10];
      v16 = (uint64_t *)(v20 - (_QWORD)v71);
      v72 = v20 - (_QWORD)v71 + 1;
      if (v72 < 0)
        goto LABEL_154;
      v73 = v69 - (_QWORD)v71;
      if (2 * v73 > v72)
        v72 = 2 * v73;
      if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
        v74 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
        v75 = (char *)operator new(v74);
      else
        v75 = 0;
      v76 = &v75[v74];
      v70 = (uint64_t)v16 + (_QWORD)v75 + 1;
      v77 = &v71[-v20];
      if (v71 == (char *)v20)
        v77 = 0;
      v65[10] = (uint64_t)v16 + (_QWORD)v75 + (unint64_t)v77;
      v65[11] = v70;
      v65[12] = (uint64_t)v76;
      if (v71)
        operator delete(v71);
    }
    else
    {
      v70 = v20 + 1;
    }
    v65[11] = v70;
    v9 = v65[31];
    goto LABEL_118;
  }
  v9 = v65[31];
  if (v65[10] + (((uint64_t)v66 - v65[7]) >> 3) == v65[11])
  {
LABEL_118:
    v8 = &v95;
    a5 = (uint64_t *)v65[22];
    if (a5)
    {
      v20 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = v9;
        v78 = a5[6];
        if (!v78)
          goto LABEL_151;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v78 + 48))(v78, &v94, &v96);
        a5 = (uint64_t *)*a5;
        if (!a5)
          goto LABEL_122;
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v65[16];
  if (a5)
  {
    v8 = &v95;
    v20 = 1;
    do
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = v9;
      v68 = a5[6];
      if (!v68)
        goto LABEL_151;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v68 + 48))(v68, &v94, &v96);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!*(_QWORD *)(a6 + 16))
    return;
  v79 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v80 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v79 + 4, (uint64_t)&v95);
  if ((v81 & 1) != 0)
  {
    v84 = (_BYTE *)v79[11];
    v83 = v79[12];
    if ((unint64_t)v84 < v83)
    {
      v85 = (uint64_t)(v84 + 1);
LABEL_145:
      v79[11] = v85;
      a2 = v79[31];
      goto LABEL_146;
    }
    v86 = (char *)v79[10];
    v8 = (uint64_t *)(v84 - v86);
    v87 = v84 - v86 + 1;
    if (v87 >= 0)
    {
      v88 = v83 - (_QWORD)v86;
      if (2 * v88 > v87)
        v87 = 2 * v88;
      if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
        v89 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
        v90 = (char *)operator new(v89);
      else
        v90 = 0;
      v91 = &v90[v89];
      v85 = (uint64_t)v8 + (_QWORD)v90 + 1;
      v92 = (char *)(v86 - v84);
      if (v86 == v84)
        v92 = 0;
      v79[10] = (uint64_t)v8 + (_QWORD)v90 + (unint64_t)v92;
      v79[11] = v85;
      v79[12] = (uint64_t)v91;
      if (v86)
        operator delete(v86);
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v79[31];
  if (v79[10] + (((uint64_t)v80 - v79[7]) >> 3) != v79[11])
  {
    a6 = v79[16];
    if (a6)
    {
      a5 = &v95;
      v9 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = a2;
        v82 = *(_QWORD *)(a6 + 48);
        if (!v82)
          break;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v82 + 48))(v82, &v94, &v96);
        a6 = *(_QWORD *)a6;
        if (!a6)
          return;
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v95;
  a6 = v79[22];
  if (a6)
  {
    v9 = 1;
    while (1)
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = a2;
      v93 = *(_QWORD *)(a6 + 48);
      if (!v93)
        break;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v93 + 48))(v93, &v94, &v96);
      a6 = *(_QWORD *)a6;
      if (!a6)
        return;
    }
    goto LABEL_151;
  }
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)79>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)79>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)79>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)79>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)79>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E4270648;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)79>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E4270648;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)79>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::mun::MuninMetaLayerDataSource::~MuninMetaLayerDataSource(md::mun::MuninMetaLayerDataSource *this)
{
  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::mun::MuninMetaLayerDataSource::constructRequests(uint64_t a1, char **a2, char **a3)
{
  uint64_t v3;
  uint64_t v4;
  char **v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  char *v17;
  _BYTE v18[2];
  __int16 v19;
  int v20;
  void *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25[32];
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  void *v31;
  char v32;
  int v33;
  uint64_t v34;
  int v35;
  char v36[8];
  uint64_t v37;
  uint64_t v38;

  if (a2 != a3)
  {
    v37 = v3;
    v38 = v4;
    v6 = a2;
    do
    {
      v7 = *v6;
      v28 = **v6;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v29, (uint64_t)(v7 + 8));
      v32 = 0;
      if (v7[96])
      {
        v33 = *((_DWORD *)v7 + 25);
        v32 = 1;
      }
      v34 = *((_QWORD *)v7 + 13);
      v8 = *(_DWORD *)v30;
      v9 = *((_DWORD *)v30 + 1);
      v11 = *((_DWORD *)v30 + 2);
      v10 = *((_DWORD *)v30 + 3);
      v12 = *((_QWORD *)*v6 + 14);
      v18[0] = 0;
      v19 = 22;
      v20 = 2147483646;
      v21 = v25;
      v22 = v25;
      v23 = v25;
      v24 = 32;
      v26 = 0;
      v35 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v21, v25, (char *)&v35, v36);
      v35 = v9;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v21, v22, (char *)&v35, v36);
      v35 = v11;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v21, v22, (char *)&v35, v36);
      v35 = v10;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v21, v22, (char *)&v35, v36);
      v13 = (unsigned __int8 *)v21;
      v14 = v22 - (_BYTE *)v21;
      if (v22 == v21)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        if (v14 <= 1)
          v14 = 1;
        do
        {
          v16 = *v13++;
          v15 ^= (v15 << 6) + (v15 >> 2) - 0x61C8864680B583EBLL + v16;
          --v14;
        }
        while (v14);
      }
      v26 = v15;
      v27 = v12;
      v17 = *v6;
      v6 += 2;
      gdc::LayerDataRequest::request((uint64_t)v17, (uint64_t)v18, 0);
      if (v21 != v23)
        free(v21);
      if (v32)
        v32 = 0;
      if (v30 != v31)
        free(v30);
    }
    while (v6 != a3);
  }
}

void md::mun::MuninMetaLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _BYTE v25[8];
  uint64_t v26;
  void *v27;
  void *v28;
  char v29;
  int v30;
  uint64_t v31;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 22)
    {
      v5 += 48;
      if (v5 == v6)
        goto LABEL_20;
    }
  }
  if (v5 == v6 || *(_QWORD *)(v5 + 32) != 1)
  {
LABEL_20:
    v8 = 0;
LABEL_21:
    if (v8)
      v16 = v8 - 8;
    else
      v16 = 0;
    v24 = 0;
    if (v16)
      goto LABEL_25;
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    v17 = v24;
    if (!v24)
      return;
    goto LABEL_32;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v8 = *(_QWORD *)(v7 + 112);
  v9 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v9)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  if (v8)
    v12 = v8 - 8;
  else
    v12 = 0;
  v23 = v12;
  v24 = v9;
  v13 = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v16 = v23;
    if (v23)
      goto LABEL_25;
    goto LABEL_18;
  }
  v16 = v23;
  if (!v23)
    goto LABEL_18;
LABEL_25:
  v18 = operator new(0x238uLL);
  v19 = (uint64_t *)(v16 + 216);
  v20 = (uint64_t *)(v16 + 152);
  v18[1] = 0;
  v18[2] = 0;
  *v18 = &off_1E42DDCB0;
  v25[0] = *(_BYTE *)a1;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v26, a1 + 8);
  v29 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    v30 = *(_DWORD *)(a1 + 100);
    v29 = 1;
  }
  v31 = *(_QWORD *)(a1 + 104);
  md::mun::MuninMetadata::MuninMetadata((uint64_t)(v18 + 3), (uint64_t)v25, v20, v19);
  if (v29)
    v29 = 0;
  if (v27 != v28)
    free(v27);
  *a3 = v18 + 3;
  a3[1] = v18;
  v17 = v24;
  if (v24)
  {
LABEL_32:
    v21 = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_19F65AD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::mun::MuninMetadata>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDCB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::mun::MuninMetadata>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDCB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::mun::MuninMetadata>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::MeshBatcher::BuildContext::~BuildContext(md::MeshBatcher::BuildContext *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *((_QWORD *)this + 16);
    v4 = (void *)*((_QWORD *)this + 15);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v2;
    operator delete(v4);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v8)
    goto LABEL_16;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v11)
      goto LABEL_22;
  }
  else
  {
LABEL_16:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v11)
      goto LABEL_22;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_22:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v14)
    goto LABEL_26;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v17)
      return;
  }
  else
  {
LABEL_26:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v17)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void std::__shared_ptr_emplace<ggl::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Mesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::HybridMapEngineMode::~HybridMapEngineMode(md::HybridMapEngineMode *this)
{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
}

{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::HybridMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int16 v10;
  uint64_t *p_shared_owners;
  unint64_t v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  md::CartographicMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  v6 = *(_QWORD *)(a3 + 856);
  v7 = *(_QWORD *)(v6 + 40);
  if ((unint64_t)(*(_QWORD *)(v6 + 48) - v7) >= 0x18)
    v8 = *(_QWORD *)(v7 + 16);
  else
    v8 = 0;
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "standardCommandBufferSelector");
  v10 = *(_WORD *)(*(_QWORD *)(v18 + 8) + 244);
  if (v19)
  {
    p_shared_owners = &v19->__shared_owners_;
    do
      v12 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v12 - 1, (unint64_t *)p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  v13 = *(_WORD **)(v8 + 8);
  v14 = *(_WORD **)(v8 + 24);
  if (v14 == v13)
  {
    if (v14)
    {
      *(_QWORD *)(v8 + 16) = v14;
      operator delete(v14);
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
    }
    v13 = operator new(2uLL);
    *(_QWORD *)(v8 + 8) = v13;
    *(_QWORD *)(v8 + 24) = v13 + 1;
  }
  *v13 = v10;
  *(_QWORD *)(v8 + 16) = v13 + 1;
  *(_WORD *)(v8 + 57) = v10;
  LOBYTE(v18) = 23;
  md::MapEngineSettings::set((uint64_t)a4, &v18, 0);
  v15 = *(uint64_t **)(v6 + 40);
  if (*(uint64_t **)(v6 + 48) == v15)
    v16 = 0;
  else
    v16 = *v15;
  v17 = *(unsigned __int8 *)(v16 + 56);
  *(_QWORD *)(v16 + 68) = 0;
  *(_QWORD *)(v16 + 60) = 0;
  if (!v17)
    *(_BYTE *)(v16 + 56) = 1;
}

void sub_19F65B180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::HybridMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int16 v8;
  uint64_t *p_shared_owners;
  unint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 856) + 40);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 856) + 48) - v5) >= 0x18)
    v6 = *(_QWORD *)(v5 + 16);
  else
    v6 = 0;
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "standardCommandBufferSelector");
  v8 = *(_WORD *)(*(_QWORD *)(v13 + 8) + 8);
  if (v14)
  {
    p_shared_owners = &v14->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  v11 = *(_WORD **)(v6 + 8);
  v12 = *(_WORD **)(v6 + 24);
  if (v12 == v11)
  {
    if (v12)
    {
      *(_QWORD *)(v6 + 16) = v12;
      operator delete(v12);
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(v6 + 24) = 0;
    }
    v11 = operator new(2uLL);
    *(_QWORD *)(v6 + 8) = v11;
    *(_QWORD *)(v6 + 24) = v11 + 1;
  }
  *v11 = v8;
  *(_QWORD *)(v6 + 16) = v11 + 1;
  *(_WORD *)(v6 + 57) = v8;
  LOBYTE(v13) = 23;
  md::MapEngineSettings::set(a4, &v13, (_QWORD *)1);
}

void sub_19F65B2A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

md::HybridMapEngineMode *md::HybridMapEngineMode::HybridMapEngineMode(md::HybridMapEngineMode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = md::CartographicMapEngineMode::CartographicMapEngineMode((uint64_t)this, 7);
  *(_QWORD *)v2 = &off_1E42972D8;
  *(_QWORD *)(v2 + 536) = 100;
  *(_BYTE *)(v2 + 49) = 0;
  *(_DWORD *)(v2 + 52) = 18;
  LOWORD(v31) = 4608;
  *((_QWORD *)&v31 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(v2 + 384), (unsigned __int8 *)&v31);
  LOWORD(v31) = 4608;
  *((_QWORD *)&v31 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 54, (unsigned __int8 *)&v31);
  LOWORD(v31) = 4608;
  *((_QWORD *)&v31 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 51, (unsigned __int8 *)&v31);
  *((_WORD *)this + 112) = 0;
  LOBYTE(v31) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0, &v31)+ 17) = 0;
  LOBYTE(v31) = 51;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x33u, &v31)+ 17) = 0;
  LOBYTE(v31) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 2u, &v31)+ 17) = 0;
  LOBYTE(v31) = 22;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x16u, &v31)+ 17) = 0;
  LOBYTE(v31) = 11;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0xBu, &v31)+ 17) = 0;
  LOBYTE(v31) = 3;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 3u, &v31)+ 17) = 0;
  LOBYTE(v31) = 44;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Cu, &v31)+ 17) = 1;
  LOBYTE(v31) = 40;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x28u, &v31)+ 17) = 1;
  LOBYTE(v31) = 18;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x12u, &v31)+ 17) = 1;
  LOBYTE(v31) = 43;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Bu, &v31)+ 17) = 2;
  LOBYTE(v31) = 41;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x29u, &v31)+ 17) = 2;
  LOBYTE(v31) = 42;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Au, &v31)+ 17) = 2;
  LODWORD(v31) = 40;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x28u, &v31)+ 18) = 2;
  v28 = 0x4AC7AB7561675F6;
  v29 = "md::GridLogic]";
  v30 = 13;
  *(_QWORD *)&v25 = 0x336A901A15BB7353;
  *((_QWORD *)&v25 + 1) = "md::GridContext]";
  v26 = 15;
  v27 = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 1;
  v32 = xmmword_1E42F8C28;
  *(_QWORD *)&v33 = 21;
  *(_QWORD *)&v21 = &v22;
  *((_QWORD *)&v21 + 1) = 1;
  v22 = xmmword_1E42F8B38;
  *(_QWORD *)&v23 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  v28 = 0x79FE0BD9535D5C4DLL;
  v29 = "md::AnchorLogic]";
  v30 = 15;
  *(_QWORD *)&v31 = &v32;
  *(_QWORD *)&v25 = 0x63B6FE00C0848868;
  *((_QWORD *)&v25 + 1) = "md::AnchorContext]";
  v26 = 17;
  v27 = 1;
  *((_QWORD *)&v31 + 1) = 2;
  v32 = xmmword_1E42F87F0;
  v33 = unk_1E42F8800;
  v34 = xmmword_1E42F8810;
  *(_QWORD *)&v21 = &v22;
  *((_QWORD *)&v21 + 1) = 1;
  v22 = xmmword_1E42F8E88;
  *(_QWORD *)&v23 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(_QWORD *)&v25 = 0x8E629317B3523E63;
  *((_QWORD *)&v25 + 1) = "md::CameraLogic]";
  v26 = 15;
  *(_QWORD *)&v21 = 0x1AF456233693CD46;
  *((_QWORD *)&v21 + 1) = "md::CameraContext]";
  *(_QWORD *)&v22 = 17;
  BYTE8(v22) = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 1;
  v32 = xmmword_1E42F8820;
  *(_QWORD *)&v33 = 20;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  *(_QWORD *)&v21 = 0xD2443A61CED86C69;
  *((_QWORD *)&v21 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v22 = 17;
  *(_QWORD *)&v31 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v31 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v32 = 19;
  BYTE8(v32) = 1;
  *(_QWORD *)&v25 = &v26;
  *((_QWORD *)&v25 + 1) = 0;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  *(_QWORD *)&v21 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v21 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v22 = 14;
  *(_QWORD *)&v31 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v31 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v32 = 21;
  BYTE8(v32) = 1;
  *(_QWORD *)&v25 = &v26;
  *((_QWORD *)&v25 + 1) = 0;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  *(_QWORD *)&v21 = 0x5CBBA028798243FLL;
  *((_QWORD *)&v21 + 1) = "md::RouteOverlayLogic]";
  *(_QWORD *)&v22 = 21;
  *(_QWORD *)&v31 = 0x13043386C0978CC2;
  *((_QWORD *)&v31 + 1) = "md::RouteOverlayContext]";
  *(_QWORD *)&v32 = 23;
  BYTE8(v32) = 1;
  *(_QWORD *)&v25 = &v26;
  *((_QWORD *)&v25 + 1) = 0;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  v28 = 0x17767EADC5B287BLL;
  v29 = "md::ElevationLogic]";
  *(_QWORD *)&v25 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v25 + 1) = "md::ElevationContext]";
  v26 = 20;
  v27 = 1;
  v30 = 18;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 2;
  v32 = xmmword_1E42F88C8;
  v33 = unk_1E42F88D8;
  v34 = xmmword_1E42F88E8;
  *(_QWORD *)&v21 = &v22;
  *((_QWORD *)&v21 + 1) = 1;
  v22 = xmmword_1E42F88F8;
  *(_QWORD *)&v23 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(_QWORD *)&v21 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v21 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v22 = 18;
  *(_QWORD *)&v31 = 0x7851AF310F49C988;
  *((_QWORD *)&v31 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v32 = 25;
  BYTE8(v32) = 1;
  *(_QWORD *)&v25 = &v26;
  *((_QWORD *)&v25 + 1) = 0;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  *(_QWORD *)&v25 = 0xAF46DE79C836B0D8;
  *((_QWORD *)&v25 + 1) = "md::TileSelectionLogic]";
  v26 = 22;
  *(_QWORD *)&v21 = 0x64780CBD71DF7CF5;
  *((_QWORD *)&v21 + 1) = "md::TileSelectionContext]";
  *(_QWORD *)&v22 = 24;
  BYTE8(v22) = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 3;
  v34 = xmmword_1E42F8B10;
  v35 = unk_1E42F8B20;
  *(_QWORD *)&v36 = 21;
  v32 = xmmword_1E42F8AF0;
  v33 = unk_1E42F8B00;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  v3 = 0xCBF29CE484222325;
  v4 = 0x26u;
  do
    v3 = 0x100000001B3 * (v3 ^ aStdStringViewG_927[v4++]);
  while (v4 != 368);
  v28 = v3;
  v29 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v30 = 330;
  *(_QWORD *)&v25 = 0x8677AD8BA9352C1DLL;
  *((_QWORD *)&v25 + 1) = "md::ResolvedTileSelectionContext]";
  v26 = 32;
  v27 = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 1;
  v32 = xmmword_1E42F8B38;
  *(_QWORD *)&v33 = 24;
  *(_QWORD *)&v21 = &v22;
  *((_QWORD *)&v21 + 1) = 1;
  v22 = xmmword_1E42F8B50;
  *(_QWORD *)&v23 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(_QWORD *)&v25 = 0x87BA2765F9E38E05;
  *((_QWORD *)&v25 + 1) = "md::PendingSceneLogic]";
  v26 = 21;
  *(_QWORD *)&v21 = 0x9F2276D081C2CB20;
  *((_QWORD *)&v21 + 1) = "md::PendingSceneContext]";
  *(_QWORD *)&v22 = 23;
  BYTE8(v22) = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 5;
  v36 = xmmword_1E42F8BA8;
  v37 = *(_OWORD *)&off_1E42F8BB8;
  v38 = xmmword_1E42F8BC8;
  v39 = 25;
  v32 = xmmword_1E42F8B68;
  v33 = unk_1E42F8B78;
  v34 = xmmword_1E42F8B88;
  v35 = unk_1E42F8B98;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  v28 = 0x2B7C4502BD3C99C6;
  v29 = "md::ResolvedSceneLogic]";
  v30 = 22;
  *(_QWORD *)&v25 = 0x99BED48DEFBBD82BLL;
  *((_QWORD *)&v25 + 1) = "md::SceneContext]";
  v26 = 16;
  v27 = 1;
  *(_QWORD *)&v21 = &v22;
  *((_QWORD *)&v21 + 1) = 1;
  v22 = xmmword_1E42F8C10;
  *(_QWORD *)&v23 = 23;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 2;
  v32 = xmmword_1E42F8BE0;
  v33 = unk_1E42F8BF0;
  v34 = xmmword_1E42F8C00;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v21, (uint64_t)&v31);
  *(_QWORD *)&v25 = 0x8B45D3D7944796A2;
  *((_QWORD *)&v25 + 1) = "md::PendingRegistryLogic]";
  v26 = 24;
  *(_QWORD *)&v21 = 0xA8300AA8F44B09FFLL;
  *((_QWORD *)&v21 + 1) = "md::PendingRegistryContext]";
  *(_QWORD *)&v22 = 26;
  BYTE8(v22) = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 1;
  v32 = xmmword_1E42F8C10;
  *(_QWORD *)&v33 = 23;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  v28 = 0xBEC1A12372CEEC00;
  v29 = "md::NavigationLogic]";
  v30 = 19;
  *(_QWORD *)&v31 = &v32;
  *(_QWORD *)&v25 = 0x1B8B241A8D896A1DLL;
  *((_QWORD *)&v25 + 1) = "md::NavigationContext]";
  v26 = 21;
  v27 = 1;
  *((_QWORD *)&v31 + 1) = 3;
  v34 = xmmword_1E42F8858;
  v35 = unk_1E42F8868;
  *(_QWORD *)&v36 = 17;
  v32 = xmmword_1E42F8838;
  v33 = unk_1E42F8848;
  *(_QWORD *)&v21 = &v22;
  *((_QWORD *)&v21 + 1) = 1;
  v22 = xmmword_1E42F8880;
  *(_QWORD *)&v23 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  v28 = 0x7173CF8D2BE8FE53;
  v29 = "md::RouteLineLogic]";
  v30 = 18;
  *(_QWORD *)&v31 = &v32;
  *(_QWORD *)&v25 = 0x8E4587A431F9C696;
  *((_QWORD *)&v25 + 1) = "md::RouteLineContext]";
  v26 = 20;
  v27 = 1;
  *((_QWORD *)&v31 + 1) = 4;
  v34 = xmmword_1E42F8930;
  v35 = unk_1E42F8940;
  v36 = xmmword_1E42F8950;
  v37 = *(_OWORD *)&off_1E42F8960;
  v32 = xmmword_1E42F8910;
  v33 = unk_1E42F8920;
  *(_QWORD *)&v21 = &v22;
  *((_QWORD *)&v21 + 1) = 2;
  v22 = xmmword_1E42F8970;
  v23 = unk_1E42F8980;
  v24 = xmmword_1E42F8990;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(_QWORD *)&v25 = 0xDAD5CEE0DC5FF509;
  *((_QWORD *)&v25 + 1) = "md::SkyLogic]";
  v26 = 12;
  *(_QWORD *)&v21 = 0x7C7EC6C7C111B0D0;
  *((_QWORD *)&v21 + 1) = "md::SkyLogicContext]";
  *(_QWORD *)&v22 = 19;
  BYTE8(v22) = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 2;
  v32 = xmmword_1E42F8898;
  v33 = unk_1E42F88A8;
  v34 = xmmword_1E42F88B8;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  v28 = 0x20A1ED17D78F322BLL;
  v29 = "md::LabelsLogic]";
  v30 = 15;
  *(_QWORD *)&v31 = &v32;
  *(_QWORD *)&v25 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v25 + 1) = "md::LabelsContext]";
  v26 = 17;
  v27 = 1;
  *((_QWORD *)&v31 + 1) = 1;
  v32 = xmmword_1E42F8C28;
  *(_QWORD *)&v33 = 21;
  *(_QWORD *)&v21 = &v22;
  *((_QWORD *)&v21 + 1) = 1;
  v22 = xmmword_1E42F8C40;
  *(_QWORD *)&v23 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(_QWORD *)&v25 = 0x87668FB4D087F775;
  *((_QWORD *)&v25 + 1) = "md::OverlaysLogic]";
  v26 = 17;
  *(_QWORD *)&v21 = 0xADE8F13E6C18D970;
  *((_QWORD *)&v21 + 1) = "md::OverlaysContext]";
  *(_QWORD *)&v22 = 19;
  BYTE8(v22) = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 4;
  v34 = xmmword_1E42F8CA8;
  v35 = unk_1E42F8CB8;
  v36 = xmmword_1E42F8CC8;
  v37 = *(_OWORD *)&off_1E42F8CD8;
  v32 = xmmword_1E42F8C88;
  v33 = unk_1E42F8C98;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  *(_QWORD *)&v21 = 0x701C95861FC50076;
  *((_QWORD *)&v21 + 1) = "md::GeometryLogic]";
  *(_QWORD *)&v22 = 17;
  *(_QWORD *)&v31 = 0x3070CB6B3C7F21D3;
  *((_QWORD *)&v31 + 1) = "md::GeometryContext]";
  *(_QWORD *)&v32 = 19;
  BYTE8(v32) = 1;
  *(_QWORD *)&v25 = &v26;
  *((_QWORD *)&v25 + 1) = 0;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  v28 = 0x653D1F33EF15EF04;
  v29 = "md::LoadingStatusLogic]";
  v30 = 22;
  *(_QWORD *)&v25 = 0x90B6813830DCB581;
  *((_QWORD *)&v25 + 1) = "md::LoadingStatusContext]";
  v26 = 24;
  v27 = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 1;
  v32 = xmmword_1E42F8C58;
  *(_QWORD *)&v33 = 16;
  *(_QWORD *)&v21 = &v22;
  *((_QWORD *)&v21 + 1) = 1;
  v22 = xmmword_1E42F8C70;
  *(_QWORD *)&v23 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(_QWORD *)&v25 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v25 + 1) = "md::MapZoomLevelStyleLogic]";
  v26 = 26;
  *(_QWORD *)&v21 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v21 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v22 = 33;
  BYTE8(v22) = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 2;
  v32 = xmmword_1E42F8898;
  v33 = unk_1E42F88A8;
  v34 = xmmword_1E42F88B8;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  *(_QWORD *)&v21 = 0x3F812BA5755E8568;
  *((_QWORD *)&v21 + 1) = "md::SharedResourcesLogic]";
  *(_QWORD *)&v22 = 24;
  *(_QWORD *)&v31 = 0xA60DDA5A69582425;
  *((_QWORD *)&v31 + 1) = "md::SharedResourcesContext]";
  *(_QWORD *)&v32 = 26;
  BYTE8(v32) = 1;
  *(_QWORD *)&v25 = &v26;
  *((_QWORD *)&v25 + 1) = 0;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  *(_QWORD *)&v21 = 0x41948F4CADE567A1;
  *((_QWORD *)&v21 + 1) = "md::DebugDrawLogic]";
  *(_QWORD *)&v22 = 18;
  *(_QWORD *)&v31 = 0x3619066E3FB5F2CLL;
  *((_QWORD *)&v31 + 1) = "md::DebugDrawContext]";
  *(_QWORD *)&v32 = 20;
  BYTE8(v32) = 1;
  *(_QWORD *)&v25 = &v26;
  *((_QWORD *)&v25 + 1) = 0;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  *(_QWORD *)&v25 = 0xEA624BC935BAF297;
  *((_QWORD *)&v25 + 1) = "md::mun::MuninLogic]";
  v26 = 19;
  *(_QWORD *)&v21 = 0x8EA84A1BD3791AFALL;
  *((_QWORD *)&v21 + 1) = "md::mun::MuninContext]";
  *(_QWORD *)&v22 = 21;
  BYTE8(v22) = 1;
  *(_QWORD *)&v31 = &v32;
  *((_QWORD *)&v31 + 1) = 3;
  v34 = xmmword_1E42F8D08;
  v35 = unk_1E42F8D18;
  *(_QWORD *)&v36 = 20;
  v32 = xmmword_1E42F8CE8;
  v33 = unk_1E42F8CF8;
  v28 = (unint64_t)&v30;
  v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 1, (uint64_t)&v31, (uint64_t)&v28);
  *(_QWORD *)&v31 = 0xA00000002;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 2u, &v31)+ 18) = 0;
  v5 = WORD3(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v31), (_WORD *)&v31 + 2)+ 18) = v5 << 16;
  v31 = xmmword_19FFB3CE0;
  *(_QWORD *)&v32 = 0x3E0000000FLL;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x12u, &v31)+ 18) = 1;
  v6 = WORD3(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v31), (_WORD *)&v31 + 2)+ 18) = (v6 << 16) | 1;
  v7 = WORD5(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD4(v31), (_WORD *)&v31 + 4)+ 18) = (v7 << 16) | 1;
  v8 = HIWORD(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD6(v31), (_WORD *)((unint64_t)&v31 | 0xC))+ 18) = (v8 << 16) | 1;
  v9 = WORD1(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, v32, &v32)+ 18) = (v9 << 16) | 1;
  v10 = WORD3(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v32), (_WORD *)&v32 + 2)+ 18) = (v10 << 16) | 1;
  v31 = xmmword_19FFB3CF0;
  v32 = xmmword_19FFB3D00;
  *(_QWORD *)&v33 = 0x4A00000045;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 3u, &v31)+ 18) = 2;
  v11 = WORD3(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v31), (_WORD *)&v31 + 2)+ 18) = (v11 << 16) | 2;
  v12 = WORD5(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD4(v31), (_WORD *)&v31 + 4)+ 18) = (v12 << 16) | 2;
  v13 = HIWORD(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD6(v31), (_WORD *)((unint64_t)&v31 | 0xC))+ 18) = (v13 << 16) | 2;
  v14 = WORD1(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, v32, &v32)+ 18) = (v14 << 16) | 2;
  v15 = WORD3(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v32), (_WORD *)&v32 + 2)+ 18) = (v15 << 16) | 2;
  v16 = WORD5(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD4(v32), (_WORD *)&v32 + 4)+ 18) = (v16 << 16) | 2;
  v17 = HIWORD(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD6(v32), (_WORD *)&v32 + 6)+ 18) = (v17 << 16) | 2;
  v18 = WORD1(v33);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, v33, &v33)+ 18) = (v18 << 16) | 2;
  v19 = WORD3(v33);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v33), (_WORD *)&v33 + 2)+ 18) = (v19 << 16) | 2;
  return this;
}

void sub_19F65C598(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  *(_QWORD *)v1 = &off_1E42A1BF8;
  if (*((_BYTE *)v1 + 548))
    *((_BYTE *)v1 + 548) = 0;
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::Fog::FogPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Fog::FogPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::Sky::SkyPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E41C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Sky::SkyPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E41C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::SkyRenderResources::~SkyRenderResources(md::SkyRenderResources *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;

  v2 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v5)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v8)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v8)
      goto LABEL_17;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_17:
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v11)
    goto LABEL_21;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v14)
      goto LABEL_27;
  }
  else
  {
LABEL_21:
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v14)
      goto LABEL_27;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_27:
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v17)
    goto LABEL_31;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v20)
      goto LABEL_37;
  }
  else
  {
LABEL_31:
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v20)
      goto LABEL_37;
  }
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_37:
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v23)
    goto LABEL_41;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v26)
      goto LABEL_47;
  }
  else
  {
LABEL_41:
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v26)
      goto LABEL_47;
  }
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_47:
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v29)
    goto LABEL_51;
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v32 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v32)
      goto LABEL_57;
  }
  else
  {
LABEL_51:
    v32 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    if (!v32)
      goto LABEL_57;
  }
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_57:
  v35 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

uint64_t ggl::SpecularBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  int v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  _QWORD *v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  _BYTE v104[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v100 = a2;
    v101 = a3;
    a2 = v100;
    a3 = v101;
    a4 = v89;
    if (v90)
    {
      if ((v91 & 1) == 0
      {
        if ((v95 & 1) == 0
        {
          if ((v99 & 1) == 0
          {
            ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingPointyRoof::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE43CE0 = 1;
        }
        ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)algn_1EE5803B8 = &ggl::SpecularBuildingPointyRoof::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
        qword_1EE5803C0 = 0;
        if ((v96 & 1) == 0
        {
          ggl::SpecularBuildingPointyRoof::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
          unk_1EE5803F0 = ggl::Tile::View::reflection(void)::reflection;
          qword_1EE5803F8 = (uint64_t)ggl::Building::Scale::reflection(void)::reflection;
          unk_1EE580400 = ggl::Building::Style::reflection(void)::reflection;
          qword_1EE580408 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
          unk_1EE580410 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
          qword_1EE580418 = (uint64_t)ggl::Building::Fade::reflection(void)::reflection;
        }
        qword_1EE5803C8 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineDataBuildingPipelineConstantStructs(void)::ref;
        unk_1EE5803D0 = xmmword_19FFB37A0;
      }
      ggl::SpecularBuildingPointyRoof::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::SpecularBuildingPointyRoofShader::typedReflection(void)::ref = (uint64_t)"SpecularBuildingPointyRoofShader";
        if ((v97 & 1) == 0
        {
          qword_1ECE42EA0 = (uint64_t)"SpecularBuildingPointyRoofShader";
          unk_1ECE42EA8 = ggl::specularBuildingPointyRoofShaderVertShaderFunctionAttributes(void)::ref;
          qword_1ECE42EB0 = 1;
          unk_1ECE42EB8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionConstantMapping(void)::ref;
          qword_1ECE42EC0 = 6;
          unk_1ECE42EC8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionBufferMapping(void)::ref;
          qword_1ECE42ED0 = 0;
          unk_1ECE42ED8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionTextureMapping(void)::ref;
          ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref = 1075938269;
          qword_1ECE42EE0 = 0;
          unk_1ECE42EE8 = &ggl::specularBuildingPointyRoofShaderVertShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE42EF8 = 0;
          unk_1ECE42F00 = 0;
          qword_1ECE42EF0 = 0;
        }
        qword_1ECE3BCC0 = (uint64_t)&ggl::specularBuildingPointyRoofShaderVertexFunctionDescriptor(void)::ref;
        dword_1ECE3BCC8 = 1075938269;
        if ((v98 & 1) == 0
        {
          ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref = 0x10062DEDALL;
          qword_1ECE43408 = (uint64_t)"SpecularBuildingPointyRoofShader";
          unk_1ECE43410 = 0;
          qword_1ECE43418 = 0;
          unk_1ECE43420 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionConstantMapping(void)::ref;
          qword_1ECE43428 = 4;
          unk_1ECE43430 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionBufferMapping(void)::ref;
          qword_1ECE43438 = 0;
          unk_1ECE43440 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionTextureMapping(void)::ref;
          qword_1ECE43448 = 0;
          unk_1ECE43450 = &ggl::specularBuildingPointyRoofShaderFragShaderFunctionSamplerMapping(void)::ref;
          qword_1ECE43460 = 0;
          unk_1ECE43468 = 0;
          qword_1ECE43458 = 0;
        }
        qword_1ECE3BCD0 = (uint64_t)&ggl::specularBuildingPointyRoofShaderFragmentFunctionDescriptor(void)::ref;
        dword_1ECE3BCD8 = 6479578;
        qword_1ECE3BCE0 = (uint64_t)ggl::specularBuildingPointyRoofShaderShaderConstants(void)::ref;
        unk_1ECE3BCE8 = 7;
        qword_1ECE3BCF0 = (uint64_t)&ggl::specularBuildingPointyRoofShaderShaderTextures(void)::ref;
        unk_1ECE3BCF8 = 0;
        qword_1ECE3BD00 = (uint64_t)&ggl::specularBuildingPointyRoofShaderShaderSamplers(void)::ref;
        unk_1ECE3BD08 = 0;
      }
      qword_1ECE31DD0 = (uint64_t)&ggl::SpecularBuildingPointyRoofShader::typedReflection(void)::ref;
      if ((v93 & 1) == 0
      {
        ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE580580 = 0;
        qword_1EE580588 = (uint64_t)"";
        dword_1EE580590 = 0;
        qword_1EE580598 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1EE5805A0 = 2;
      }
      qword_1ECE31DD8 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31DE0 = 1;
      qword_1ECE31DE8 = 0;
      unk_1ECE31DF0 = 0;
      qword_1ECE31DF8 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31E00 = 0;
      if ((v94 & 1) == 0
      {
        ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE580430 = 0;
        qword_1EE580438 = (uint64_t)"skyfog";
        dword_1EE580440 = 3;
        qword_1EE580448 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantSkyfogBinding(void)::reflection;
        *(_OWORD *)algn_1EE580450 = xmmword_19FFB3720;
        qword_1EE580460 = 1;
        unk_1EE580468 = "view";
        dword_1EE580470 = 3;
        qword_1EE580478 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1EE580480 = vdupq_n_s64(2uLL);
        qword_1EE580490 = 2;
        unk_1EE580498 = "scale";
        dword_1EE5804A0 = 3;
        qword_1EE5804A8 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        *(_OWORD *)algn_1EE5804B0 = xmmword_19FFB3730;
        qword_1EE5804C0 = 3;
        unk_1EE5804C8 = "style";
        dword_1EE5804D0 = 3;
        qword_1EE5804D8 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantStyleBinding(void)::reflection;
        unk_1EE5804E0 = xmmword_19FFB3740;
        qword_1EE5804F0 = 4;
        unk_1EE5804F8 = "gradient";
        dword_1EE580500 = 3;
        qword_1EE580508 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantGradientBinding(void)::reflection;
        *(_OWORD *)algn_1EE580510 = xmmword_19FFB3670;
        qword_1EE580520 = 5;
        unk_1EE580528 = "lightConfig";
        dword_1EE580530 = 3;
        qword_1EE580538 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantLightConfigBinding(void)::reflection;
        xmmword_1EE580540 = xmmword_19FFB3750;
        qword_1EE580550 = 6;
        unk_1EE580558 = "fade";
        dword_1EE580560 = 3;
        qword_1EE580568 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantFadeBinding(void)::reflection;
        unk_1EE580570 = 2;
      }
      qword_1ECE31E08 = (uint64_t)&ggl::SpecularBuildingPointyRoof::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE31E10 = 7;
      a4 = v89;
      a2 = v100;
      a3 = v101;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v104 = *(_OWORD *)a3;
  *(_OWORD *)&v104[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v102 = *a4;
  v103 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::SpecularBuildingPointyRoof::BuildingPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v102;
  *(_OWORD *)(a1 + 272) = v103;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v104;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v104[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42BB530;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup::constantDataIsEnabled(ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

uint64_t ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup::textureIsEnabled(ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup *this)
{
  return 0;
}

void sub_19F65D57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19F65D5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CachedShouldRequestWGS84Elevations;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19F65D690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F65D738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F65D7D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F65D86C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup::~Pos2DUVPipelineSetup(ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup::constantDataIsEnabled(ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup::textureIsEnabled(ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::OverlayTileData::~OverlayTileData(md::OverlayTileData *this)
{
  md::OverlayTileData::~OverlayTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  geo::read_write_lock *v2;
  const char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  md::OverlayTileData *v8;
  uint64_t v9;
  uint64_t v10;
  md::OverlayTileData *v11;
  md::OverlayTileData *v12;
  uint64_t v13;
  uint64_t v14;
  md::OverlayTileData *v15;
  md::OverlayTileData *v16;
  uint64_t v17;
  uint64_t v18;
  md::OverlayTileData *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  *(_QWORD *)this = &off_1E4290958;
  *((_QWORD *)this + 79) = &unk_1E4290998;
  if (*((_QWORD *)this + 105))
    md::OverlayTileData::clearEntities(this);
  v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 872));
  if ((_DWORD)v2)
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  v4 = (void *)*((_QWORD *)this + 106);
  if (v4)
  {
    *((_QWORD *)this + 107) = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 104);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (*((_QWORD *)this + 102))
  {
    v8 = (md::OverlayTileData *)*((_QWORD *)this + 101);
    v9 = *((_QWORD *)this + 100);
    v10 = *(_QWORD *)v8;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v10;
    *((_QWORD *)this + 102) = 0;
    if (v8 != (md::OverlayTileData *)((char *)this + 800))
    {
      do
      {
        v11 = (md::OverlayTileData *)*((_QWORD *)v8 + 1);
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData *)((char *)v8 + 16));
        operator delete(v8);
        v8 = v11;
      }
      while (v11 != (md::OverlayTileData *)((char *)this + 800));
    }
  }
  if (*((_QWORD *)this + 99))
  {
    v12 = (md::OverlayTileData *)*((_QWORD *)this + 98);
    v13 = *((_QWORD *)this + 97);
    v14 = *(_QWORD *)v12;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    *((_QWORD *)this + 99) = 0;
    if (v12 != (md::OverlayTileData *)((char *)this + 776))
    {
      do
      {
        v15 = (md::OverlayTileData *)*((_QWORD *)v12 + 1);
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData *)((char *)v12 + 16));
        operator delete(v12);
        v12 = v15;
      }
      while (v15 != (md::OverlayTileData *)((char *)this + 776));
    }
  }
  if (*((_QWORD *)this + 96))
  {
    v16 = (md::OverlayTileData *)*((_QWORD *)this + 95);
    v17 = *((_QWORD *)this + 94);
    v18 = *(_QWORD *)v16;
    *(_QWORD *)(v18 + 8) = *(_QWORD *)(v17 + 8);
    **(_QWORD **)(v17 + 8) = v18;
    *((_QWORD *)this + 96) = 0;
    if (v16 != (md::OverlayTileData *)((char *)this + 752))
    {
      do
      {
        v19 = (md::OverlayTileData *)*((_QWORD *)v16 + 1);
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData *)((char *)v16 + 16));
        operator delete(v16);
        v16 = v19;
      }
      while (v19 != (md::OverlayTileData *)((char *)this + 752));
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  md::MapTileData::~MapTileData(this);
}

uint64_t md::OverlayTileData::estimatedCost(md::OverlayTileData *this)
{
  char *v1;
  char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v1 = (char *)this + 752;
  v2 = (char *)*((_QWORD *)this + 95);
  for (result = 1072; v2 != v1; v2 = (char *)*((_QWORD *)v2 + 1))
  {
    v5 = *((_QWORD *)v2 + 2);
    if (v5)
    {
      v4 = (4 * *(_DWORD *)(*(_QWORD *)(v5 + 24) + 80) * *(_DWORD *)(*(_QWORD *)(v5 + 24) + 84));
    }
    else
    {
      v6 = *((_QWORD *)v2 + 3);
      if (v6)
      {
        v7 = *(uint64_t **)(v6 + 32);
        v8 = *(uint64_t **)(v6 + 40);
        if (v7 != v8)
        {
          v4 = 0;
          do
          {
            v9 = *v7++;
            v4 = *(_QWORD *)(**(_QWORD **)(v9 + 64) + 48)
               + v4
               + *(_QWORD *)(*(_QWORD *)(v9 + 96) + 48)
               - (*(_QWORD *)(**(_QWORD **)(v9 + 64) + 40)
                + *(_QWORD *)(*(_QWORD *)(v9 + 96) + 40));
          }
          while (v7 != v8);
          goto LABEL_4;
        }
        goto LABEL_45;
      }
      v10 = *((_QWORD *)v2 + 4);
      if (v10)
      {
        v11 = *(uint64_t **)(v10 + 32);
        v12 = *(uint64_t **)(v10 + 40);
        if (v11 != v12)
        {
          v4 = 0;
          do
          {
            v13 = *v11++;
            v4 = *(_QWORD *)(**(_QWORD **)(v13 + 64) + 48)
               + v4
               + *(_QWORD *)(*(_QWORD *)(v13 + 96) + 48)
               - (*(_QWORD *)(**(_QWORD **)(v13 + 64) + 40)
                + *(_QWORD *)(*(_QWORD *)(v13 + 96) + 40));
          }
          while (v11 != v12);
          goto LABEL_4;
        }
LABEL_45:
        v4 = 0;
        goto LABEL_4;
      }
      if (*((_QWORD *)v2 + 5))
      {
        v4 = 24;
      }
      else
      {
        v14 = *((_QWORD *)v2 + 6);
        v15 = *((_QWORD *)v2 + 7);
        if (v14 != v15)
        {
          v4 = 0;
          do
          {
            v19 = *(_QWORD **)v14;
            v18 = *(_QWORD *)(*(_QWORD *)v14 + 24);
            if (v18)
              v18 = *(_QWORD *)(**(_QWORD **)(v18 + 64) + 48)
                  + *(_QWORD *)(*(_QWORD *)(v18 + 96) + 48)
                  - (*(_QWORD *)(**(_QWORD **)(v18 + 64) + 40)
                   + *(_QWORD *)(*(_QWORD *)(v18 + 96) + 40));
            v20 = v19[4];
            if (v20)
              v18 = *(_QWORD *)(**(_QWORD **)(v20 + 64) + 48)
                  + v18
                  + *(_QWORD *)(*(_QWORD *)(v20 + 96) + 48)
                  - (*(_QWORD *)(**(_QWORD **)(v20 + 64) + 40)
                   + *(_QWORD *)(*(_QWORD *)(v20 + 96) + 40));
            v21 = v19[5];
            if (v21)
            {
              v22 = *(uint64_t **)(v21 + 32);
              for (i = *(uint64_t **)(v21 + 40);
                    v22 != i;
                    v18 = *(_QWORD *)(**(_QWORD **)(v24 + 64) + 48)
                        + v18
                        + *(_QWORD *)(*(_QWORD *)(v24 + 96) + 48)
                        - (*(_QWORD *)(**(_QWORD **)(v24 + 64) + 40)
                         + *(_QWORD *)(*(_QWORD *)(v24 + 96) + 40)))
              {
                v24 = *v22++;
              }
            }
            v25 = (_QWORD *)v19[38];
            if (v25)
            {
              v17 = v25[14];
              if (v17)
              {
                v26 = v25[15];
                if (v26)
                  v16 = (v25[19] + v25[18]) * v25[20];
                else
                  v16 = 0;
                if (v26)
                  v17 = v16 + 10;
                else
                  v17 = v16;
              }
              v18 += v17;
            }
            v4 += v18;
            v14 += 8;
          }
          while (v14 != v15);
          goto LABEL_4;
        }
        v27 = (uint64_t *)*((_QWORD *)v2 + 13);
        if (v27)
        {
          v28 = *v27;
          v29 = v27[1];
          if (*v27 == v29)
            goto LABEL_45;
          v30 = v29 - v28 - 136;
          if (v30 >= 0x88)
          {
            v35 = 0;
            v36 = 0;
            v37 = v30 / 0x88 + 1;
            v38 = v28 + 152;
            v39 = v37 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              v35 += (4
                                  * *(_DWORD *)(*(_QWORD *)(v38 - 136) + 80)
                                  * *(_DWORD *)(*(_QWORD *)(v38 - 136) + 84));
              v36 += (4 * *(_DWORD *)(*(_QWORD *)v38 + 80) * *(_DWORD *)(*(_QWORD *)v38 + 84));
              v38 += 272;
              v39 -= 2;
            }
            while (v39);
            v4 = v36 + v35;
            if (v37 == (v37 & 0x3FFFFFFFFFFFFFELL))
              goto LABEL_4;
            v28 += 136 * (v37 & 0x3FFFFFFFFFFFFFELL);
          }
          else
          {
            v4 = 0;
          }
          do
          {
            v4 += (4
                               * *(_DWORD *)(*(_QWORD *)(v28 + 16) + 80)
                               * *(_DWORD *)(*(_QWORD *)(v28 + 16) + 84));
            v28 += 136;
          }
          while (v28 != v29);
        }
        else
        {
          v31 = (uint64_t *)*((_QWORD *)v2 + 14);
          if (!v31)
          {
            v4 = 1;
            goto LABEL_4;
          }
          v32 = *v31;
          v33 = v31[1];
          if (*v31 == v33)
            goto LABEL_45;
          v34 = v33 - v32 - 136;
          if (v34 >= 0x88)
          {
            v40 = 0;
            v41 = 0;
            v42 = v34 / 0x88 + 1;
            v43 = (_QWORD *)(v32 + 264);
            v44 = v42 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              v40 += *(v43 - 17);
              v41 += *v43;
              v43 += 34;
              v44 -= 2;
            }
            while (v44);
            v4 = v41 + v40;
            if (v42 == (v42 & 0x3FFFFFFFFFFFFFELL))
              goto LABEL_4;
            v32 += 136 * (v42 & 0x3FFFFFFFFFFFFFELL);
          }
          else
          {
            v4 = 0;
          }
          do
          {
            v4 += *(_QWORD *)(v32 + 128);
            v32 += 136;
          }
          while (v32 != v33);
        }
      }
    }
LABEL_4:
    result += v4;
  }
  return result;
}

void sub_19F65DFB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  geo::read_write_lock::~read_write_lock((pthread_rwlock_t *)(v1 + 872));
  v3 = *(void **)(v1 + 848);
  if (v3)
  {
    *(_QWORD *)(v1 + 856) = v3;
    operator delete(v3);
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 824);
  std::list<md::OverlayTileData::OverlayTileResource>::~list((uint64_t *)(v1 + 800));
  std::list<md::OverlayTileData::OverlayTileResource>::~list((uint64_t *)(v1 + 776));
  std::list<md::OverlayTileData::OverlayTileResource>::~list((uint64_t *)(v1 + 752));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 736);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 720);
  md::MapTileData::~MapTileData((md::MapTileData *)v1);
  _Unwind_Resume(a1);
}

void md::OverlayTileData::clearEntities(md::OverlayTileData *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v2 = (uint64_t *)*((_QWORD *)this + 106);
  v3 = (uint64_t *)*((_QWORD *)this + 107);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 105);
    do
    {
      v5 = *v2;
      v6 = (uint64_t *)gdc::Registry::storage<md::components::QueuedForDestruction<>>(v4);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v6, v5);
      v7 = *v2++;
      v8 = (uint64_t *)gdc::Registry::storage<md::components::QueuedForDestruction<md::DrapingLogic>>(v4);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v8, v7);
    }
    while (v2 != v3);
    v2 = (uint64_t *)*((_QWORD *)this + 106);
    v9 = (uint64_t *)*((_QWORD *)this + 107);
    if (v2 != v9)
    {
      v10 = *((_QWORD *)this + 105);
      do
      {
        v11 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::VectorOverlay>(v10);
        v12 = *v2++;
        gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::remove(v11, v12);
      }
      while (v2 != v9);
      v2 = (uint64_t *)*((_QWORD *)this + 106);
      v13 = (uint64_t *)*((_QWORD *)this + 107);
      if (v2 != v13)
      {
        v14 = *((_QWORD *)this + 105);
        do
        {
          v15 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>(v14);
          v16 = *v2++;
          gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>::remove(v15, v16);
        }
        while (v2 != v13);
        v2 = (uint64_t *)*((_QWORD *)this + 106);
        v17 = (uint64_t *)*((_QWORD *)this + 107);
        if (v2 != v17)
        {
          v18 = *((_QWORD *)this + 105);
          do
          {
            v19 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>(v18);
            v20 = *v2++;
            gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>::remove(v19, v20);
          }
          while (v2 != v17);
          v2 = (uint64_t *)*((_QWORD *)this + 106);
        }
      }
    }
  }
  *((_QWORD *)this + 107) = v2;
}

uint64_t *std::list<md::OverlayTileData::OverlayTileResource>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void md::OverlayTileData::OverlayTileResource::~OverlayTileResource(md::OverlayTileData::OverlayTileResource *this)
{
  void *v2;
  void **v3;
  char *v4;
  char *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void **v11;
  char *v12;
  char *v13;
  void *v14;
  void **v15;
  char *v16;
  char *v17;
  void *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  md::PolygonOverlayRenderable *v35;
  md::PolygonOverlayRenderable *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void **)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    v4 = (char *)*v3;
    if (*v3)
    {
      v5 = (char *)v3[1];
      v6 = *v3;
      if (v5 != v4)
      {
        do
        {
          v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v10 = *((_QWORD *)v5 - 3);
          *((_QWORD *)v5 - 3) = 0;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          v5 -= 48;
        }
        while (v5 != v4);
        v6 = *v3;
      }
      v3[1] = v4;
      operator delete(v6);
    }
    MEMORY[0x1A1AF4E00](v3, 0x20C40960023A9);
  }
  v11 = (void **)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v11)
  {
    v12 = (char *)*v11;
    if (*v11)
    {
      v13 = (char *)v11[1];
      v14 = *v11;
      if (v13 != v12)
      {
        do
          md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile((md::OverlayTileData::OverlayTileResource::CustomTile *)(v13 - 136));
        while (v13 != v12);
        v14 = *v11;
      }
      v11[1] = v12;
      operator delete(v14);
    }
    MEMORY[0x1A1AF4E00](v11, 0x20C40960023A9);
  }
  v15 = (void **)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v15)
  {
    v16 = (char *)*v15;
    if (*v15)
    {
      v17 = (char *)v15[1];
      v18 = *v15;
      if (v17 != v16)
      {
        do
          md::OverlayTileData::OverlayTileResource::RasterTile::~RasterTile((md::OverlayTileData::OverlayTileResource::RasterTile *)(v17 - 136));
        while (v17 != v16);
        v18 = *v15;
      }
      v15[1] = v16;
      operator delete(v18);
    }
    MEMORY[0x1A1AF4E00](v15, 0x20C40960023A9);
  }
  v19 = (uint64_t *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v19)
  {
    v20 = (std::__shared_weak_count *)v19[2];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *v19;
    *v19 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    MEMORY[0x1A1AF4E00](v19, 0x20C40960023A9);
  }
  v24 = (uint64_t *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v24)
  {
    v25 = (std::__shared_weak_count *)v24[2];
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = *v24;
    *v24 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    MEMORY[0x1A1AF4E00](v24, 0x20C40960023A9);
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v29)
    goto LABEL_54;
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v32 = (_QWORD *)*((_QWORD *)this + 4);
    if (!v32)
      goto LABEL_62;
  }
  else
  {
LABEL_54:
    v32 = (_QWORD *)*((_QWORD *)this + 4);
    if (!v32)
      goto LABEL_62;
  }
  v33 = (_QWORD *)*((_QWORD *)this + 5);
  v34 = v32;
  if (v33 != v32)
  {
    do
    {
      v36 = (md::PolygonOverlayRenderable *)*--v33;
      v35 = v36;
      *v33 = 0;
      if (v36)
      {
        md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v35);
        MEMORY[0x1A1AF4E00]();
      }
    }
    while (v33 != v32);
    v34 = (void *)*((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 5) = v32;
  operator delete(v34);
LABEL_62:
  v37 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v37)
  {
    v38 = *(std::__shared_weak_count **)(v37 + 8);
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    MEMORY[0x1A1AF4E00](v37, 0x1020C40A95220FALL);
  }
  v41 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v43)
    std::default_delete<md::OverlayTileData::OverlayTileResource::Texture>::operator()[abi:nn180100](v43);
}

void md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile(md::OverlayTileData::OverlayTileResource::CustomTile *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  *((_QWORD *)this + 4) = &off_1E42B4A70;

}

void md::OverlayTileData::OverlayTileResource::RasterTile::~RasterTile(md::OverlayTileData::OverlayTileResource::RasterTile *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v17)
      return;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v17)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void md::PolygonOverlayRenderable::~PolygonOverlayRenderable(md::PolygonOverlayRenderable *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)*((_QWORD *)this + 35);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
LABEL_5:
    v5 = (char *)*((_QWORD *)this + 35);
    if (!v5)
      goto LABEL_13;
  }
  v6 = (char *)*((_QWORD *)this + 36);
  v7 = v5;
  if (v6 != v5)
  {
    v8 = (char *)*((_QWORD *)this + 36);
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 3);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v6 - 2) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v5);
    v7 = (char *)*((_QWORD *)this + 35);
  }
  *((_QWORD *)this + 36) = v5;
  operator delete(v7);
LABEL_13:
  v11 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v12)
  {
    v13 = *(std::__shared_weak_count **)(v12 + 72);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *(std::__shared_weak_count **)(v12 + 8);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    MEMORY[0x1A1AF4E00](v12, 0x1020C408635837CLL);
  }
  v19 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v33)
    goto LABEL_59;
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    v36 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v36)
      goto LABEL_67;
  }
  else
  {
LABEL_59:
    v36 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v36)
      goto LABEL_67;
  }
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
LABEL_67:
  v39 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v39)
    goto LABEL_71;
  v40 = (unint64_t *)&v39->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    v42 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v42)
      goto LABEL_77;
  }
  else
  {
LABEL_71:
    v42 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v42)
      goto LABEL_77;
  }
  v43 = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
LABEL_77:
  v45 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
}

void std::default_delete<md::OverlayTileData::OverlayTileResource::Texture>::operator()[abi:nn180100](_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t geo::_retain_ptr<objc_object * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4A70;

  return a1;
}

void geo::_retain_ptr<objc_object * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4A70;

  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::Registry::storage<md::components::QueuedForDestruction<md::DrapingLogic>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB02BC19BABA3EE9ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB02BC19BABA3EE9ELL;
      if (*(_QWORD *)&v3 <= 0xB02BC19BABA3EE9ELL)
        v5 = 0xB02BC19BABA3EE9ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB02BC19BABA3EE9ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB02BC19BABA3EE9ELL)
            {
              if (v7[2] == 0xB02BC19BABA3EE9ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB02BC19BABA3EE9ELL)
          {
            if (v7[2] == 0xB02BC19BABA3EE9ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::QueuedForDestruction<md::DrapingLogic>]";
  *(_QWORD *)(v11 + 24) = 54;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3288;
  *(_QWORD *)(v11 + 8) = 0xB02BC19BABA3EE9ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB02BC19BABA3EE9ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB02BC19BABA3EE9ELL;
  v15[1] = "md::components::QueuedForDestruction<md::DrapingLogic>]";
  v15[2] = 54;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB02BC19BABA3EE9ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F65EF64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::OverlayTileData::resetNonTileOverlays(md::OverlayTileData *this, uint64_t a2)
{
  geo::read_write_lock *v4;
  const char *v5;
  _QWORD *v6;
  _QWORD *v7;
  geo::read_write_lock *v8;
  const char *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD v18[9];
  uint64_t v19;
  pthread_rwlock_t *v20;

  *(_QWORD *)this = this;
  *((_QWORD *)this + 1) = this;
  *((_QWORD *)this + 2) = 0;
  v20 = (pthread_rwlock_t *)(a2 + 872);
  v4 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a2 + 872));
  if ((_DWORD)v4)
    geo::read_write_lock::logFailure(v4, (uint64_t)"write lock", v5);
  v6 = (_QWORD *)(a2 + 752);
  v7 = *(_QWORD **)(a2 + 760);
  if (v7 != (_QWORD *)(a2 + 752))
  {
    do
    {
      while (1)
      {
        v10 = atomic_load((unsigned __int8 *)v7 + 153);
        if ((v10 & 1) != 0)
          break;
        v7 = (_QWORD *)v7[1];
        if (v7 == v6)
          goto LABEL_4;
      }
      v11 = v7 + 2;
      v19 = 0;
      memset(v18, 0, 138);
      if (v7[13] || v7[14])
      {
        md::OverlayTileData::OverlayTileResource::moveNonTileVectorResources((uint64_t)v18, (uint64_t)(v7 + 2));
        v12 = *v11;
        *v11 = 0;
        v13 = *(_QWORD **)&v18[0];
        *(_QWORD *)&v18[0] = v12;
        if (v13)
          std::default_delete<md::OverlayTileData::OverlayTileResource::Texture>::operator()[abi:nn180100](v13);
        atomic_store(0, (unsigned __int8 *)v7 + 153);
        v7 = (_QWORD *)v7[1];
      }
      else
      {
        md::OverlayTileData::OverlayTileResource::operator=((uint64_t)v18, (uint64_t)(v7 + 2));
        v16 = *v7;
        v17 = (_QWORD *)v7[1];
        *(_QWORD *)(v16 + 8) = v17;
        *(_QWORD *)v7[1] = v16;
        --*(_QWORD *)(a2 + 768);
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v7 + 2));
        operator delete(v7);
        v7 = v17;
      }
      v14 = operator new(0xA8uLL);
      v14[1] = 0u;
      *((_QWORD *)v14 + 20) = 0;
      *v14 = 0u;
      v14[2] = 0u;
      v14[3] = 0u;
      v14[4] = 0u;
      v14[5] = 0u;
      v14[6] = 0u;
      v14[7] = 0u;
      v14[8] = 0u;
      *(_OWORD *)((char *)v14 + 138) = 0u;
      md::OverlayTileData::OverlayTileResource::operator=((uint64_t)(v14 + 1), (uint64_t)v18);
      v15 = *(_QWORD *)this;
      *(_QWORD *)v14 = *(_QWORD *)this;
      *((_QWORD *)v14 + 1) = this;
      *(_QWORD *)(v15 + 8) = v14;
      *(_QWORD *)this = v14;
      ++*((_QWORD *)this + 2);
      md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)v18);
    }
    while (v7 != v6);
  }
LABEL_4:
  if (*(_QWORD *)(a2 + 792))
    md::OverlayTileData::updateNonTileOverlays(a2, (_QWORD *)(a2 + 776));
  if (*(_QWORD *)(a2 + 816))
    md::OverlayTileData::updateNonTileOverlays(a2, (_QWORD *)(a2 + 800));
  v8 = (geo::read_write_lock *)pthread_rwlock_unlock(v20);
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"unlock", v9);
}

void sub_19F65F164(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::list<md::OverlayTileData::OverlayTileResource>::~list(v1);
  _Unwind_Resume(a1);
}

uint64_t md::OverlayTileData::OverlayTileResource::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void **v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void **v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;

  v4 = (_QWORD **)md::OverlayTileData::OverlayTileResource::moveNonTileVectorResources(a1, a2);
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v6 = *v4;
  *(_QWORD *)a1 = v5;
  if (v6)
    std::default_delete<md::OverlayTileData::OverlayTileResource::Texture>::operator()[abi:nn180100](v6);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v8 = *(void ***)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v7;
  if (v8)
  {
    v9 = (char *)*v8;
    if (*v8)
    {
      v10 = (char *)v8[1];
      v11 = *v8;
      if (v10 != v9)
      {
        do
          md::OverlayTileData::OverlayTileResource::RasterTile::~RasterTile((md::OverlayTileData::OverlayTileResource::RasterTile *)(v10 - 136));
        while (v10 != v9);
        v11 = *v8;
      }
      v8[1] = v9;
      operator delete(v11);
    }
    MEMORY[0x1A1AF4E00](v8, 0x20C40960023A9);
  }
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v13 = *(void ***)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v12;
  if (v13)
  {
    v14 = (char *)*v13;
    if (*v13)
    {
      v15 = (char *)v13[1];
      v16 = *v13;
      if (v15 != v14)
      {
        do
          md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile((md::OverlayTileData::OverlayTileResource::CustomTile *)(v15 - 136));
        while (v15 != v14);
        v16 = *v13;
      }
      v13[1] = v14;
      operator delete(v16);
    }
    MEMORY[0x1A1AF4E00](v13, 0x20C40960023A9);
  }
  v17 = *(void **)(a1 + 112);
  if (v17)
  {
    *(_QWORD *)(a1 + 120) = v17;
    operator delete(v17);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v18 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v19 = *(void ***)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v18;
  if (v19)
  {
    v20 = (char *)*v19;
    if (*v19)
    {
      v21 = (char *)v19[1];
      v22 = *v19;
      if (v21 != v20)
      {
        do
        {
          v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(p_shared_owners);
            while (__stlxr(v25 - 1, p_shared_owners));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v26 = *((_QWORD *)v21 - 3);
          *((_QWORD *)v21 - 3) = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v21 -= 48;
        }
        while (v21 != v20);
        v22 = *v19;
      }
      v19[1] = v20;
      operator delete(v22);
    }
    MEMORY[0x1A1AF4E00](v19, 0x20C40960023A9);
  }
  atomic_store(*(_BYTE *)(a2 + 137) & 1, (unsigned __int8 *)(a1 + 137));
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t md::OverlayTileData::OverlayTileResource::moveNonTileVectorResources(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  md::PolygonOverlayRenderable *v10;
  md::PolygonOverlayRenderable *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (void **)(a1 + 32);
  v7 = *(_QWORD **)(a1 + 32);
  if (v7)
  {
    v8 = *(_QWORD **)(a1 + 40);
    v9 = *(void **)(a1 + 32);
    if (v8 != v7)
    {
      do
      {
        v11 = (md::PolygonOverlayRenderable *)*--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
        {
          md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v10);
          MEMORY[0x1A1AF4E00]();
        }
      }
      while (v8 != v7);
      v9 = *v6;
    }
    *(_QWORD *)(a1 + 40) = v7;
    operator delete(v9);
    *v6 = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  if (v15)
  {
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    MEMORY[0x1A1AF4E00](v15, 0x1020C40A95220FALL);
  }
  v19 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v20 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v24 = *(uint64_t **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v23;
  if (v24)
  {
    v25 = (std::__shared_weak_count *)v24[2];
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = *v24;
    *v24 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    MEMORY[0x1A1AF4E00](v24, 0x20C40960023A9);
  }
  v29 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v30 = *(uint64_t **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v29;
  if (v30)
  {
    v31 = (std::__shared_weak_count *)v30[2];
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = *v30;
    *v30 = 0;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    MEMORY[0x1A1AF4E00](v30, 0x20C40960023A9);
  }
  return a1;
}

void md::OverlayTileData::updateNonTileOverlays(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v22 = (uint64_t)&v22;
  v23 = &v22;
  v2 = a2[2];
  if (!v2)
    return;
  v4 = *a2;
  v3 = (uint64_t *)a2[1];
  v5 = *v3;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(*a2 + 8);
  **(_QWORD **)(v4 + 8) = v5;
  v6 = v22;
  *(_QWORD *)(v22 + 8) = v3;
  *v3 = v6;
  *(_QWORD *)(v4 + 8) = &v22;
  v22 = v4;
  v24 = v2;
  a2[2] = 0;
  v7 = v23;
  if (v23 == &v22)
  {
    *(_QWORD *)(v4 + 8) = &v22;
    return;
  }
  v9 = (uint64_t *)(a1 + 752);
  do
  {
    if (v7[2])
    {
      v10 = (char *)operator new(0xA8uLL);
      v11 = v7[2];
      v7[2] = 0;
      *((_QWORD *)v10 + 2) = v11;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *((_QWORD *)v10 + 15) = 0;
      *((_OWORD *)v10 + 8) = *((_OWORD *)v7 + 8);
      *((_QWORD *)v10 + 18) = v7[18];
      v7[16] = 0;
      v7[17] = 0;
      v7[18] = 0;
      *((_WORD *)v10 + 76) = 1;
      goto LABEL_13;
    }
    if (v7[3])
    {
      v10 = (char *)operator new(0xA8uLL);
      v12 = v7[3];
      v7[3] = 0;
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 3) = v12;
      v13 = 0uLL;
      *((_OWORD *)v10 + 2) = 0u;
      goto LABEL_8;
    }
    if (v7[4])
    {
      v10 = (char *)operator new(0xA8uLL);
      v14 = v7[4];
      v7[4] = 0;
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 3) = 0;
      *((_QWORD *)v10 + 4) = v14;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *((_QWORD *)v10 + 15) = 0;
      goto LABEL_12;
    }
    if (v7[5])
    {
      v10 = (char *)operator new(0xA8uLL);
      v16 = v7[5];
      v7[5] = 0;
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 3) = 0;
      *((_QWORD *)v10 + 4) = 0;
      *((_QWORD *)v10 + 5) = v16;
      v13 = 0uLL;
LABEL_8:
      *((_OWORD *)v10 + 3) = v13;
      *((_OWORD *)v10 + 4) = v13;
      *((_OWORD *)v10 + 5) = v13;
LABEL_9:
      *((_OWORD *)v10 + 6) = v13;
      *((_OWORD *)v10 + 7) = v13;
      goto LABEL_12;
    }
    if (v7[6] != v7[7])
    {
      v10 = (char *)operator new(0xA8uLL);
      *((_OWORD *)v10 + 1) = 0u;
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = *((_OWORD *)v7 + 3);
      *((_QWORD *)v10 + 8) = v7[8];
      v7[6] = 0;
      v7[7] = 0;
      v7[8] = 0;
      *((_QWORD *)v10 + 15) = 0;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      goto LABEL_12;
    }
    if (v7[11])
    {
      v10 = (char *)operator new(0xA8uLL);
      v17 = v7[11];
      v7[11] = 0;
      v13 = 0uLL;
      *((_OWORD *)v10 + 3) = 0u;
      *((_OWORD *)v10 + 4) = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *((_OWORD *)v10 + 2) = 0u;
      *((_QWORD *)v10 + 10) = 0;
      *((_QWORD *)v10 + 11) = v17;
      goto LABEL_9;
    }
    if (v7[12])
    {
      v10 = (char *)operator new(0xA8uLL);
      v18 = v7[12];
      v7[12] = 0;
      *((_OWORD *)v10 + 4) = 0u;
      *((_OWORD *)v10 + 5) = 0u;
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *((_QWORD *)v10 + 12) = v18;
      *((_QWORD *)v10 + 13) = 0;
      *((_QWORD *)v10 + 14) = 0;
      *((_QWORD *)v10 + 15) = 0;
LABEL_12:
      *((_OWORD *)v10 + 8) = *((_OWORD *)v7 + 8);
      *((_QWORD *)v10 + 18) = v7[18];
      v7[16] = 0;
      v7[17] = 0;
      v7[18] = 0;
      *((_WORD *)v10 + 76) = 2;
LABEL_13:
      *((_QWORD *)v10 + 20) = 0;
      v15 = *v9;
      *(_QWORD *)v10 = *v9;
      *((_QWORD *)v10 + 1) = v9;
      *(_QWORD *)(v15 + 8) = v10;
      *(_QWORD *)(a1 + 752) = v10;
      ++*(_QWORD *)(a1 + 768);
    }
    v7 = (uint64_t *)v7[1];
  }
  while (v7 != &v22);
  v19 = v23;
  v20 = *v23;
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v4 + 8);
  **(_QWORD **)(v4 + 8) = v20;
  v24 = 0;
  if (v19 != &v22)
  {
    do
    {
      v21 = (uint64_t *)v19[1];
      md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v19 + 2));
      operator delete(v19);
      v19 = v21;
    }
    while (v21 != &v22);
  }
}

void sub_19F65F9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::list<md::OverlayTileData::OverlayTileResource>::~list((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<md::PolylineOverlayRenderable>>::~unique_ptr[abi:nn180100](void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (char *)*v2;
    if (*v2)
    {
      v4 = (char *)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v9 = *((_QWORD *)v4 - 3);
          *((_QWORD *)v4 - 3) = 0;
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          v4 -= 48;
        }
        while (v4 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);
  }
  return a1;
}

void ***std::unique_ptr<std::vector<md::OverlayTileData::OverlayTileResource::CustomTile>>::~unique_ptr[abi:nn180100](void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (char *)*v2;
    if (*v2)
    {
      v4 = (char *)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        do
          md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile((md::OverlayTileData::OverlayTileResource::CustomTile *)(v4 - 136));
        while (v4 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);
  }
  return a1;
}

void ***std::unique_ptr<std::vector<md::OverlayTileData::OverlayTileResource::RasterTile>>::~unique_ptr[abi:nn180100](void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (char *)*v2;
    if (*v2)
    {
      v4 = (char *)v2[1];
      v5 = *v2;
      if (v4 != v3)
      {
        do
          md::OverlayTileData::OverlayTileResource::RasterTile::~RasterTile((md::OverlayTileData::OverlayTileResource::RasterTile *)(v4 - 136));
        while (v4 != v3);
        v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t **std::unique_ptr<md::OverlayTileData::OverlayTileResource::ElevatedGradientRibbonLayer>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *v2;
    *v2 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    MEMORY[0x1A1AF4E00](v2, 0x20C40960023A9);
  }
  return a1;
}

_QWORD *std::vector<std::unique_ptr<md::PolygonOverlayRenderable>>::~vector[abi:nn180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  md::PolygonOverlayRenderable *v5;
  md::PolygonOverlayRenderable *v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (md::PolygonOverlayRenderable *)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v5);
          MEMORY[0x1A1AF4E00]();
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::unique_ptr<md::OverlayTileData::OverlayTileResource::CircleResource>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40A95220FALL);
  }
  return a1;
}

uint64_t md::OverlayTileData::hasTileData(md::OverlayTileData *this)
{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  _QWORD *i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  geo::read_write_lock *v9;
  const char *v10;

  v2 = (pthread_rwlock_t *)((char *)this + 872);
  v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 872));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  for (i = (_QWORD *)*((_QWORD *)this + 95); i != (_QWORD *)((char *)this + 752); i = (_QWORD *)i[1])
  {
    v6 = (_QWORD *)i[13];
    if (!v6 || *v6 == v6[1])
    {
      v7 = (_QWORD *)i[14];
      if (!v7 || *v7 == v7[1])
        continue;
    }
    v8 = 1;
    goto LABEL_12;
  }
  v8 = 0;
LABEL_12:
  v9 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if ((_DWORD)v9)
    geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
  return v8;
}

void md::OverlayTileData::OverlayTileResource::RasterTile::updateWithContext(md::OverlayTileData::OverlayTileResource::RasterTile *this, int8x8_t *a2, int a3)
{
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  _QWORD *v26;
  unint64_t v27;
  float32x2_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  __int128 v43;
  float64x2_t v44[8];

  v4 = a2[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = 1 << *((_BYTE *)this + 33);
  v15 = 1.0 / (double)v14;
  v16 = v15 * (double)(v14 + ~*((_DWORD *)this + 9));
  v17 = (double)a3;
  if (!a3)
    v17 = -0.0;
  v18 = v17 + v15 * (double)*((int *)this + 10);
  v38 = 0;
  v40 = 0;
  v37 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 1.0 / (double)v14;
  v36 = *(unint64_t *)&v15;
  v39 = v33;
  v41 = v18;
  v42 = v16;
  v43 = xmmword_19FFB33A0;
  gm::operator*<double,4,4,4>(v44[0].f64, (double *)(v13 + 808), &v33);
  v19 = vcvt_f32_f64(v44[1]);
  v20 = vcvt_f32_f64(v44[2]);
  v21 = vcvt_f32_f64(v44[3]);
  v22 = vcvt_f32_f64(v44[4]);
  v23 = vcvt_f32_f64(v44[5]);
  v24 = vcvt_f32_f64(v44[6]);
  v25 = vcvt_f32_f64(v44[7]);
  v26 = (_QWORD *)*((_QWORD *)this + 8);
  v27 = v26[1];
  v28 = (float32x2_t *)v26[9];
  *v28 = vcvt_f32_f64(v44[0]);
  v28[1] = v19;
  v28[2] = v20;
  v28[3] = v21;
  v28[4] = v22;
  v28[5] = v23;
  v28[6] = v24;
  v28[7] = v25;
  if (v26[8] > v27)
    v27 = v26[8];
  v26[7] = 0;
  v26[8] = v27;
  v29 = (_QWORD *)*((_QWORD *)this + 14);
  v30 = v29[1];
  v31 = v29[9];
  v32 = *((_QWORD *)this + 12);
  *(float *)v31 = *((float *)this + 32) * *(float *)v32;
  *(_DWORD *)(v31 + 4) = *(_DWORD *)(v32 + 4);
  if (v29[8] > v30)
    v30 = v29[8];
  v29[7] = 0;
  v29[8] = v30;
}

__n128 ggl::Tile::Transform::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1->n128_u32[0] = a2->n128_u32[0];
  a1->n128_u32[1] = a2->n128_u32[1];
  a1->n128_u32[2] = a2->n128_u32[2];
  a1->n128_u32[3] = a2->n128_u32[3];
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  a1[1].n128_u32[1] = a2[1].n128_u32[1];
  a1[1].n128_u32[2] = a2[1].n128_u32[2];
  a1[2].n128_u32[0] = a2[2].n128_u32[0];
  a1[2].n128_u32[1] = a2[2].n128_u32[1];
  a1[2].n128_u32[2] = a2[2].n128_u32[2];
  a1[2].n128_u32[3] = a2[2].n128_u32[3];
  a1[3].n128_u32[0] = a2[3].n128_u32[0];
  a1[3].n128_u32[1] = a2[3].n128_u32[1];
  a1[3].n128_u32[2] = a2[3].n128_u32[2];
  a1[3].n128_u32[3] = a2[3].n128_u32[3];
  a1[4].n128_u32[0] = a2[4].n128_u32[0];
  a1[4].n128_u32[1] = a2[4].n128_u32[1];
  a1[4].n128_u32[2] = a2[4].n128_u32[2];
  a1[4].n128_u32[3] = a2[4].n128_u32[3];
  a1[5].n128_u32[0] = a2[5].n128_u32[0];
  a1[5].n128_u32[1] = a2[5].n128_u32[1];
  a1[5].n128_u32[2] = a2[5].n128_u32[2];
  a1[5].n128_u32[3] = a2[5].n128_u32[3];
  a1[6].n128_u32[0] = a2[6].n128_u32[0];
  a1[6].n128_u32[1] = a2[6].n128_u32[1];
  a1[6].n128_u32[2] = a2[6].n128_u32[2];
  a1[6].n128_u32[3] = a2[6].n128_u32[3];
  a1[7].n128_u32[0] = a2[7].n128_u32[0];
  a1[7].n128_u32[1] = a2[7].n128_u32[1];
  a1[7].n128_u32[2] = a2[7].n128_u32[2];
  a1[7].n128_u32[3] = a2[7].n128_u32[3];
  a1[8].n128_u32[0] = a2[8].n128_u32[0];
  a1[8].n128_u32[1] = a2[8].n128_u32[1];
  a1[8].n128_u32[2] = a2[8].n128_u32[2];
  a1[8].n128_u32[3] = a2[8].n128_u32[3];
  a1[9].n128_u32[0] = a2[9].n128_u32[0];
  a1[9].n128_u32[1] = a2[9].n128_u32[1];
  a1[9].n128_u32[2] = a2[9].n128_u32[2];
  a1[9].n128_u32[3] = a2[9].n128_u32[3];
  a1[10].n128_u32[0] = a2[10].n128_u32[0];
  a1[10].n128_u32[1] = a2[10].n128_u32[1];
  a1[10].n128_u32[2] = a2[10].n128_u32[2];
  a1[10].n128_u32[3] = a2[10].n128_u32[3];
  a1[11].n128_u32[0] = a2[11].n128_u32[0];
  a1[11].n128_u32[1] = a2[11].n128_u32[1];
  a1[11].n128_u32[2] = a2[11].n128_u32[2];
  a1[11].n128_u32[3] = a2[11].n128_u32[3];
  a1[12].n128_u32[0] = a2[12].n128_u32[0];
  a1[12].n128_u32[1] = a2[12].n128_u32[1];
  a1[12].n128_u32[2] = a2[12].n128_u32[2];
  a1[12].n128_u32[3] = a2[12].n128_u32[3];
  a1[13].n128_u32[0] = a2[13].n128_u32[0];
  a1[13].n128_u32[1] = a2[13].n128_u32[1];
  a1[13].n128_u32[2] = a2[13].n128_u32[2];
  a1[13].n128_u32[3] = a2[13].n128_u32[3];
  a1[14].n128_u32[0] = a2[14].n128_u32[0];
  a1[14].n128_u32[1] = a2[14].n128_u32[1];
  a1[14].n128_u32[2] = a2[14].n128_u32[2];
  a1[14].n128_u32[3] = a2[14].n128_u32[3];
  a1[15].n128_u32[0] = a2[15].n128_u32[0];
  a1[15].n128_u32[1] = a2[15].n128_u32[1];
  a1[15].n128_u32[2] = a2[15].n128_u32[2];
  a1[15].n128_u32[3] = a2[15].n128_u32[3];
  a1[16].n128_u32[0] = a2[16].n128_u32[0];
  a1[16].n128_u32[1] = a2[16].n128_u32[1];
  a1[16].n128_u32[2] = a2[16].n128_u32[2];
  a1[16].n128_u32[3] = a2[16].n128_u32[3];
  a1[17].n128_u32[0] = a2[17].n128_u32[0];
  a1[17].n128_u32[1] = a2[17].n128_u32[1];
  a1[17].n128_u32[2] = a2[17].n128_u32[2];
  a1[17].n128_u32[3] = a2[17].n128_u32[3];
  a1[18].n128_u32[0] = a2[18].n128_u32[0];
  a1[18].n128_u32[1] = a2[18].n128_u32[1];
  a1[18].n128_u32[2] = a2[18].n128_u32[2];
  a1[18].n128_u32[3] = a2[18].n128_u32[3];
  a1[19].n128_u32[0] = a2[19].n128_u32[0];
  a1[19].n128_u32[1] = a2[19].n128_u32[1];
  a1[19].n128_u32[2] = a2[19].n128_u32[2];
  a1[20].n128_u32[0] = a2[20].n128_u32[0];
  a1[20].n128_u32[1] = a2[20].n128_u32[1];
  a1[20].n128_u32[2] = a2[20].n128_u32[2];
  result = a2[21];
  a1[21] = result;
  return result;
}

float computeRouteZOffset(int8x8_t *a1)
{
  int8x8_t v1;
  uint8x8_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;

  v1 = a1[1];
  if (!*(_QWORD *)&v1)
    goto LABEL_24;
  v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    v3 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v1 <= 0x8BD499FBD96FBB9ELL)
      v3 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v1;
  }
  else
  {
    v3 = (*(_QWORD *)&v1 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  v4 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v4)
    goto LABEL_24;
  v5 = (_QWORD *)*v4;
  if (!v5)
    goto LABEL_24;
  if (v2.u32[0] < 2uLL)
  {
    v6 = *(_QWORD *)&v1 - 1;
    while (1)
    {
      v8 = v5[1];
      if (v8 == 0x8BD499FBD96FBB9ELL)
      {
        if (v5[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_22;
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_24;
      }
      v5 = (_QWORD *)*v5;
      if (!v5)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v7 = v5[1];
    if (v7 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v7 >= *(_QWORD *)&v1)
      v7 %= *(_QWORD *)&v1;
    if (v7 != v3)
      goto LABEL_24;
LABEL_11:
    v5 = (_QWORD *)*v5;
    if (!v5)
      goto LABEL_24;
  }
  if (v5[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_11;
LABEL_22:
  v9 = v5[5];
  if (*(_QWORD *)(v9 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v10 = *(_QWORD *)(v9 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v10 = 0;
LABEL_25:
  v11 = 1.0;
  if (*(_BYTE *)(v10 + 4))
    v11 = *(float *)(v10 + 20);
  md::LayoutContext::zoomAtCentrePoint(a1);
  v13 = fmaxf((float)(v12 * -0.28571) + 4.8571, 0.0);
  v14 = 1.0811 - v13;
  v15 = v13 <= 1.0;
  v16 = 0.081081;
  if (v15)
    v16 = v14;
  return (float)(fminf(*(float *)(v10 + 16), 1.0) * (float)(1.6216 * v11)) / v16;
}

uint64_t md::OverlayTileData::OverlayTileResource::RasterTile::setAlphaMultiplier(uint64_t this, float a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  *(float *)(this + 128) = a2;
  v2 = *(_QWORD *)(this + 112);
  v3 = *(_QWORD *)(v2 + 64);
  **(float **)(v2 + 72) = **(float **)(this + 96) * a2;
  v4 = *(_QWORD *)(v2 + 8);
  if (v3 > v4)
    v4 = v3;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = v4;
  return this;
}

void md::mun::MuninViewLayerDataSource::~MuninViewLayerDataSource(md::mun::MuninViewLayerDataSource *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E42ABE78;
  *((_QWORD *)this + 75) = &off_1E42B4D50;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 74);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  gdc::LayerDataSource::~LayerDataSource(this);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E42ABE78;
  *((_QWORD *)this + 75) = &off_1E42B4D50;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 74);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::mun::MuninViewLayerDataSource::addFallbackData(const gdc::LayerDataRequestKey **this, const gdc::SelectionContext *a2)
{
  unint64_t *v2;
  __n128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int16 *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  __int16 *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 *v65;
  __int16 *v66;
  __int16 *v67;
  __int16 *v68;
  char v69;
  unsigned __int16 *v70;
  unsigned __int16 *v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int16 *v87;
  __int16 *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  _QWORD *v101;
  unsigned __int8 v102;
  __int16 *v103;
  _QWORD *v104;
  char v106[8];
  std::__shared_weak_count *v107;
  char v108[8];
  void *v109;
  void *v110;
  void *v111;
  char v112[8];
  void *v113;
  void *v114;
  uint64_t v115;
  char v116;
  unint64_t v117;
  __n128 v118;
  unsigned __int16 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int16 v123;
  uint64_t v124;
  uint64_t v125;
  __int16 *v126;
  __int16 *v127;
  unint64_t v128;
  __n128 v129;
  char *v130;
  uint64_t v131;
  char v132[32];
  unint64_t v133;

  v2 = (unint64_t *)*((_QWORD *)a2 + 1);
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v95 = (uint64_t)v2;
  v3 = gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v119, v2, *((unsigned __int16 *)this + 16));
  v4 = v119;
  v5 = v120;
  v6 = v122;
  v99 = v119;
  v100 = v123;
  v96 = v124;
  v97 = v122;
  v93 = v125;
  v98 = v121;
LABEL_3:
  while (v4 != v100 || v5 != v96 || v6 != v93)
  {
    gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)&v111, (_QWORD *)v5);
    v7 = (void *)*(unsigned __int16 *)v111;
    v8 = (void *)*((_QWORD *)v111 + 1);
    v9 = *((_QWORD *)v111 + 2);
    v10 = (void *)*((unsigned __int8 *)v111 + 24);
    if (v111 != v113)
      free(v111);
    v118 = 0uLL;
    v11 = v9 & 0xFFFFFFFF00FF0000;
    v102 = v9;
    while (1)
    {
      LOBYTE(v9) = v9 + 1;
      v129.n128_u64[0] = (unint64_t)v132;
      v129.n128_u64[1] = (unint64_t)v132;
      v130 = v132;
      v131 = 32;
      v133 = 0;
      v111 = v7;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, v132, (char *)&v111, v112);
      v111 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, (char *)v129.n128_u64[1], (char *)&v111, v112);
      v111 = (void *)(v11 | v9);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, (char *)v129.n128_u64[1], (char *)&v111, v112);
      v111 = v10;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, (char *)v129.n128_u64[1], (char *)&v111, v112);
      v12 = (unsigned __int8 *)v129.n128_u64[0];
      v13 = v129.n128_u64[1] - v129.n128_u64[0];
      if (v129.n128_u64[1] == v129.n128_u64[0])
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        if (v13 <= 1)
          v13 = 1;
        do
        {
          v15 = *v12++;
          v14 ^= (v14 << 6) - 0x61C8864680B583EBLL + (v14 >> 2) + v15;
          --v13;
        }
        while (v13);
      }
      v133 = v14;
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v111, 0, 0x24u, (uint64_t)&v129, 2147483646);
      if ((char *)v129.n128_u64[0] != v130)
        free((void *)v129.n128_u64[0]);
      gdc::LayerDataStore::get((gdc::LayerDataStore *)&v129, this[2], (unsigned __int8 *)&v111);
      v16 = v129;
      v129 = 0uLL;
      v17 = (std::__shared_weak_count *)v118.n128_u64[1];
      v118 = v16;
      if (!v17)
        goto LABEL_21;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        v20 = (std::__shared_weak_count *)v129.n128_u64[1];
        if (!v129.n128_u64[1])
          goto LABEL_27;
      }
      else
      {
LABEL_21:
        v20 = (std::__shared_weak_count *)v129.n128_u64[1];
        if (!v129.n128_u64[1])
          goto LABEL_27;
      }
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
LABEL_27:
      if (v116)
        v116 = 0;
      if (v113 != v114)
        free(v113);
      v23 = v118.n128_u64[0];
      if (v9 > 6u)
        break;
      if (v118.n128_u64[0])
      {
LABEL_62:
        v35 = v127;
        if ((unint64_t)v127 < v128)
        {
          *v127 = 255;
          *((_DWORD *)v35 + 1) = 0;
          *((_DWORD *)v35 + 2) = 0;
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v35 + 12), v23 + 24);
          v36 = v118.n128_u64[1];
          *((_QWORD *)v35 + 14) = v23;
          *((_QWORD *)v35 + 15) = v36;
          if (v36)
          {
            v37 = (unint64_t *)(v36 + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          v39 = v35 + 64;
          goto LABEL_96;
        }
        v40 = ((char *)v127 - (char *)v126) >> 7;
        if ((unint64_t)(v40 + 1) >> 57)
          abort();
        v41 = (uint64_t)(v128 - (_QWORD)v126) >> 6;
        if (v41 <= v40 + 1)
          v41 = v40 + 1;
        if (v128 - (unint64_t)v126 >= 0x7FFFFFFFFFFFFF80)
          v42 = 0x1FFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          if (v42 >> 57)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v43 = (char *)operator new(v42 << 7);
        }
        else
        {
          v43 = 0;
        }
        v44 = &v43[128 * v40];
        *(_WORD *)v44 = 255;
        *((_DWORD *)v44 + 1) = 0;
        *((_DWORD *)v44 + 2) = 0;
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v44 + 24), v23 + 24);
        v45 = v118.n128_u64[1];
        *((_QWORD *)v44 + 14) = v118.n128_u64[0];
        *((_QWORD *)v44 + 15) = v45;
        if (v45)
        {
          v46 = (unint64_t *)(v45 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = &v43[128 * v42];
        v39 = (__int16 *)(v44 + 128);
        v50 = (char *)v126;
        v49 = (char *)v127;
        if (v127 == v126)
        {
          v126 = (__int16 *)v44;
          v127 = (__int16 *)(v44 + 128);
          v128 = (unint64_t)v48;
          if (v49)
            goto LABEL_95;
        }
        else
        {
          v94 = v48;
          v103 = (__int16 *)(v44 + 128);
          v51 = 0;
          do
          {
            v52 = &v44[v51];
            v53 = &v49[v51];
            *((_WORD *)v52 - 64) = *(_WORD *)&v49[v51 - 128];
            *(_QWORD *)(v52 - 124) = *(_QWORD *)&v49[v51 - 124];
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v44[v51 - 104], (uint64_t)&v49[v51 - 104]);
            v3 = *(__n128 *)&v49[v51 - 16];
            *((__n128 *)v52 - 1) = v3;
            *((_QWORD *)v53 - 2) = 0;
            *((_QWORD *)v53 - 1) = 0;
            v51 -= 128;
          }
          while (&v49[v51] != v50);
          v54 = &v44[v51];
          v55 = (char *)v126;
          v49 = (char *)v127;
          v39 = v103;
          v126 = (__int16 *)v54;
          v127 = v103;
          v128 = (unint64_t)v94;
          if (v49 != v55)
          {
            do
            {
              v56 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              v59 = (void *)*((_QWORD *)v49 - 12);
              if (v59 != *((void **)v49 - 10))
                free(v59);
              v49 -= 128;
            }
            while (v49 != v55);
            v49 = v55;
          }
          if (!v49)
            goto LABEL_96;
LABEL_95:
          operator delete(v49);
        }
LABEL_96:
        v127 = v39;
        goto LABEL_97;
      }
    }
    if (v118.n128_u64[0])
      goto LABEL_62;
    v24 = v102;
    while (2)
    {
      --v24;
      v129.n128_u64[0] = (unint64_t)v132;
      v129.n128_u64[1] = (unint64_t)v132;
      v130 = v132;
      v131 = 32;
      v133 = 0;
      v111 = v7;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, v132, (char *)&v111, v112);
      v111 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, (char *)v129.n128_u64[1], (char *)&v111, v112);
      v111 = (void *)(v11 | v24);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, (char *)v129.n128_u64[1], (char *)&v111, v112);
      v111 = v10;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, (char *)v129.n128_u64[1], (char *)&v111, v112);
      v25 = (unsigned __int8 *)v129.n128_u64[0];
      v26 = v129.n128_u64[1] - v129.n128_u64[0];
      if (v129.n128_u64[1] == v129.n128_u64[0])
      {
        v27 = 0;
      }
      else
      {
        v27 = 0;
        if (v26 <= 1)
          v26 = 1;
        do
        {
          v28 = *v25++;
          v27 ^= (v27 << 6) - 0x61C8864680B583EBLL + (v27 >> 2) + v28;
          --v26;
        }
        while (v26);
      }
      v133 = v27;
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v111, 0, 0x24u, (uint64_t)&v129, 2147483646);
      if ((char *)v129.n128_u64[0] != v130)
        free((void *)v129.n128_u64[0]);
      gdc::LayerDataStore::get((gdc::LayerDataStore *)&v129, this[2], (unsigned __int8 *)&v111);
      v3 = v129;
      v129 = 0uLL;
      v29 = (std::__shared_weak_count *)v118.n128_u64[1];
      v118 = v3;
      if (!v29)
        goto LABEL_48;
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        v32 = (std::__shared_weak_count *)v129.n128_u64[1];
        if (v129.n128_u64[1])
        {
LABEL_49:
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      else
      {
LABEL_48:
        v32 = (std::__shared_weak_count *)v129.n128_u64[1];
        if (v129.n128_u64[1])
          goto LABEL_49;
      }
      if (v116)
        v116 = 0;
      if (v113 != v114)
        free(v113);
      v23 = v118.n128_u64[0];
      if (v24)
      {
        if (v118.n128_u64[0])
          goto LABEL_62;
        continue;
      }
      break;
    }
    if (v118.n128_u64[0])
      goto LABEL_62;
LABEL_97:
    v60 = (std::__shared_weak_count *)v118.n128_u64[1];
    v6 = v97;
    if (v118.n128_u64[1])
    {
      v61 = (unint64_t *)(v118.n128_u64[1] + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = v5 + 144;
    v5 = v98;
    v4 = v99;
    if (v63 != v98)
    {
      v5 = v63;
      while (1)
      {
        if (*(unsigned __int16 *)(v5 + 8) == v99)
        {
          v64 = *(_QWORD *)(v5 + 136);
          if (!*(_QWORD *)(v97 + 144 * v64 + 112) || *(_BYTE *)(v97 + 144 * v64 + 136))
            break;
        }
        v5 += 144;
        if (v5 == v98)
        {
          v5 = v98;
          goto LABEL_3;
        }
      }
    }
  }
  v66 = v126;
  v65 = v127;
  if (v126 != v127)
  {
    v67 = v126 + 56;
    do
    {
      v69 = *(_BYTE *)(*(_QWORD *)v67 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v108, (uint64_t)(v67 - 44));
      LOBYTE(v111) = v69;
      gdc::LayerDataKey::LayerDataKey((uint64_t)v112, (uint64_t)v108);
      v116 = 0;
      v117 = (v115
            - 0x61C8864680B583EBLL
            + ((v111 - 0x61C8864680B583EBLL) << 6)
            + (((unint64_t)v111 - 0x61C8864680B583EBLL) >> 2)) ^ (v111
                                                                                        - 0x61C8864680B583EBLL);
      gdc::LayerDataCollector::addFallbackData(v95, (uint64_t)&v111, v67 - 56, v67);
      if (v116)
        v116 = 0;
      if (v113 != v114)
        free(v113);
      if (v109 != v110)
        free(v109);
      v68 = v67 + 8;
      v67 += 64;
    }
    while (v68 != v65);
  }
  v70 = *(unsigned __int16 **)(v95 + 24);
  v71 = *(unsigned __int16 **)(v95 + 32);
  if (v70 != v71)
  {
    while (*v70 != *((unsigned __int16 *)this + 16))
    {
      v70 += 16;
      if (v70 == v71)
        goto LABEL_152;
    }
  }
  if (v70 != v71)
  {
    v72 = (_QWORD *)*((_QWORD *)v70 + 1);
    v101 = (_QWORD *)*((_QWORD *)v70 + 2);
    if (v72 != v101)
    {
LABEL_128:
      v104 = v72;
      gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)&v111, v72);
      v73 = (void *)*(unsigned __int16 *)v111;
      v75 = (void *)*((_QWORD *)v111 + 1);
      v74 = *((_QWORD *)v111 + 2);
      v76 = (void *)*((unsigned __int8 *)v111 + 24);
      if (v111 != v113)
        free(v111);
      v77 = 0;
      v78 = v74 & 0xFFFFFFFF00FF0000;
      v79 = v74;
      while (v77 == v79)
      {
LABEL_131:
        if (++v77 == 8)
        {
          v72 = v104 + 18;
          if (v104 + 18 != v101)
            goto LABEL_128;
          v66 = v126;
          goto LABEL_152;
        }
      }
      v129.n128_u64[0] = (unint64_t)v132;
      v129.n128_u64[1] = (unint64_t)v132;
      v130 = v132;
      v131 = 32;
      v133 = 0;
      v111 = v73;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, v132, (char *)&v111, v112);
      v111 = v75;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, (char *)v129.n128_u64[1], (char *)&v111, v112);
      v111 = (void *)(v78 | v77);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, (char *)v129.n128_u64[1], (char *)&v111, v112);
      v111 = v76;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v129, (char *)v129.n128_u64[1], (char *)&v111, v112);
      v80 = (unsigned __int8 *)v129.n128_u64[0];
      v81 = v129.n128_u64[1] - v129.n128_u64[0];
      if (v129.n128_u64[1] == v129.n128_u64[0])
      {
        v82 = 0;
      }
      else
      {
        v82 = 0;
        if (v81 <= 1)
          v81 = 1;
        do
        {
          v83 = *v80++;
          v82 ^= (v82 << 6) - 0x61C8864680B583EBLL + (v82 >> 2) + v83;
          --v81;
        }
        while (v81);
      }
      v133 = v82;
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v111, 0, 0x24u, (uint64_t)&v129, 2147483646);
      if ((char *)v129.n128_u64[0] != v130)
        free((void *)v129.n128_u64[0]);
      gdc::LayerDataStore::get((gdc::LayerDataStore *)v106, this[2], (unsigned __int8 *)&v111);
      v84 = v107;
      if (!v107)
        goto LABEL_145;
      v85 = (unint64_t *)&v107->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
        if (!v116)
        {
LABEL_147:
          if (v113 != v114)
            free(v113);
          goto LABEL_131;
        }
      }
      else
      {
LABEL_145:
        if (!v116)
          goto LABEL_147;
      }
      v116 = 0;
      goto LABEL_147;
    }
  }
LABEL_152:
  if (v66)
  {
    v87 = v127;
    v88 = v66;
    if (v127 != v66)
    {
      do
      {
        v89 = (std::__shared_weak_count *)*((_QWORD *)v87 - 1);
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v3);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v92 = (void *)*((_QWORD *)v87 - 12);
        if (v92 != *((void **)v87 - 10))
          free(v92);
        v87 -= 64;
      }
      while (v87 != v66);
      v88 = v126;
    }
    v127 = v66;
    operator delete(v88);
  }
}

void sub_19F66102C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)(v47 - 200));
  _Unwind_Resume(a1);
}

void md::mun::MuninViewLayerDataSource::constructRequests(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  int v17;
  uint64_t v18;
  void *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  unsigned __int8 *i;
  uint64_t v35;
  void *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t *v44;
  unint64_t v45;
  char v46;
  int v47;
  void *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char v52[32];
  unint64_t v53;
  void *v54;
  void *v55;
  char *v56;
  uint64_t v57;
  char v58[32];
  unint64_t v59;
  void *v60;
  void *v61;
  char *v62;
  uint64_t v63;
  char v64[32];
  unint64_t v65;
  void *v66[9];
  unint64_t v67;
  std::__shared_weak_count *v68;
  void *v69;
  _QWORD v70[11];
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = *(std::__shared_weak_count **)(a1 + 592);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v68 = v7;
    if (v7)
    {
      v43 = v7;
      v67 = *(_QWORD *)(a1 + 584);
      v45 = v67;
      if (v67 && a2 != a3)
      {
        v44 = a3;
        do
        {
          v9 = *a2;
          if (*(_BYTE *)(*a2 + 96))
            v10 = *(_DWORD *)(v9 + 100);
          else
            v10 = 2147483646;
          v47 = v10;
          gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)&v69, (_QWORD *)v9);
          v11 = (void *)*(unsigned __int16 *)v69;
          v12 = (void *)*((_QWORD *)v69 + 1);
          v13 = *((_QWORD *)v69 + 2);
          v14 = *((unsigned __int8 *)v69 + 24);
          if (v69 != (void *)v70[1])
            free(v69);
          if (v14)
          {
            md::mun::MuninMetadataContainer::activePoint((md::mun::MuninMetadataContainer *)&v69, v45, (unint64_t)v12);
            if (!(_BYTE)v69)
              goto LABEL_8;
            gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)v66, (_QWORD *)*a2);
            v15 = v74 < 0 || v13 == 7;
            v16 = v15;
            v46 = v16;
            if (v15)
              v17 = 7;
            else
              v17 = 0;
            v54 = v58;
            v55 = v58;
            v56 = v58;
            v57 = 32;
            v59 = 0;
            if (v15)
              v18 = 7;
            else
              v18 = 0;
            v19 = (void *)(v13 & 0xFFFFFFFF00000000 | v18);
            v60 = v11;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v54, v58, (char *)&v60, (char *)&v61);
            v60 = v12;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v54, (char *)v55, (char *)&v60, (char *)&v61);
            v60 = v19;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v54, (char *)v55, (char *)&v60, (char *)&v61);
            v60 = (void *)1;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v54, (char *)v55, (char *)&v60, (char *)&v61);
            v20 = (unsigned __int8 *)v54;
            v21 = (_BYTE *)v55 - (_BYTE *)v54;
            if (v55 == v54)
            {
              v22 = 0;
            }
            else
            {
              v22 = 0;
              if (v21 <= 1)
                v21 = 1;
              do
              {
                v23 = *v20++;
                v22 ^= (v22 << 6) - 0x61C8864680B583EBLL + (v22 >> 2) + v23;
                --v21;
              }
              while (v21);
            }
            v59 = v22;
            gdc::ResourceKey::ResourceKey((uint64_t)&v60, 0, 33, (uint64_t)&v54, *(_QWORD *)(*a2 + 112), v47);
            if (v54 != v56)
              free(v54);
            gdc::LayerDataRequest::request(*a2, (uint64_t)&v60, 0);
            v28 = v46;
            if (v17 != v13)
              v28 = 0;
            if ((v28 & 1) == 0)
            {
              v32 = v71;
              if (v71 != v72)
              {
                while (*((unsigned __int8 *)v32 + 240) != BYTE2(v13))
                {
                  v32 += 36;
                  if (v32 == v72)
                    goto LABEL_44;
                }
                v33 = (unsigned __int8 *)v32[31];
                for (i = (unsigned __int8 *)v32[32]; v33 != i; ++v33)
                {
                  v35 = *v33;
                  v48 = v52;
                  v49 = v52;
                  v50 = v52;
                  v51 = 32;
                  v53 = 0;
                  v54 = v11;
                  v36 = (void *)(v13 | (unint64_t)(v35 << 16) | v13 & 0xFFFFFFFF00000000);
                  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v48, v52, (char *)&v54, (char *)&v55);
                  v54 = v12;
                  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v48, v49, (char *)&v54, (char *)&v55);
                  v54 = v36;
                  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v48, v49, (char *)&v54, (char *)&v55);
                  v54 = (void *)2;
                  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v48, v49, (char *)&v54, (char *)&v55);
                  v37 = (unsigned __int8 *)v48;
                  v38 = v49 - (_BYTE *)v48;
                  if (v49 == v48)
                  {
                    v39 = 0;
                  }
                  else
                  {
                    v39 = 0;
                    if (v38 <= 1)
                      v38 = 1;
                    do
                    {
                      v40 = *v37++;
                      v39 ^= (v39 << 6) - 0x61C8864680B583EBLL + (v39 >> 2) + v40;
                      --v38;
                    }
                    while (v38);
                  }
                  v53 = v39;
                  gdc::ResourceKey::ResourceKey((uint64_t)&v54, 0, 34, (uint64_t)&v48, *(_QWORD *)(*a2 + 112), v47);
                  if (v48 != v50)
                    free(v48);
                  gdc::LayerDataRequest::request(*a2, (uint64_t)&v54, 0);
                  if (v55 != (void *)v57)
                    free(v55);
                }
              }
            }
LABEL_44:
            if (v61 != (void *)v63)
              free(v61);
            a3 = v44;
            if (v66[0] != v66[2])
              free(v66[0]);
            if (!(_BYTE)v69)
              goto LABEL_8;
            v29 = v71;
            v30 = v72;
            if (v71 != v72)
            {
              do
              {
                v31 = (void *)v29[31];
                if (v31 != (void *)v29[33])
                  free(v31);
                v29 += 36;
              }
              while (v29 != v30);
              v29 = v71;
            }
            if (v29 == v73)
              goto LABEL_8;
            v8 = v29;
          }
          else
          {
            v60 = v64;
            v61 = v64;
            v62 = v64;
            v63 = 32;
            v65 = 0;
            v69 = v11;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v60, v64, (char *)&v69, (char *)v70);
            v69 = v12;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v60, (char *)v61, (char *)&v69, (char *)v70);
            v69 = (void *)(v13 & 0xFFFFFFFF00FF00FFLL);
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v60, (char *)v61, (char *)&v69, (char *)v70);
            v69 = 0;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v60, (char *)v61, (char *)&v69, (char *)v70);
            v24 = (unsigned __int8 *)v60;
            v25 = (_BYTE *)v61 - (_BYTE *)v60;
            if (v61 == v60)
            {
              v26 = 0;
            }
            else
            {
              v26 = 0;
              if (v25 <= 1)
                v25 = 1;
              do
              {
                v27 = *v24++;
                v26 ^= (v26 << 6) - 0x61C8864680B583EBLL + (v26 >> 2) + v27;
                --v25;
              }
              while (v25);
            }
            v65 = v26;
            gdc::ResourceKey::ResourceKey((uint64_t)&v69, 0, 23, (uint64_t)&v60, *(_QWORD *)(*a2 + 112), v47);
            if (v60 != v62)
              free(v60);
            gdc::LayerDataRequest::request(*a2, (uint64_t)&v69, 0);
            v8 = (void *)v70[0];
            if (v70[0] == v70[2])
              goto LABEL_8;
          }
          free(v8);
LABEL_8:
          a2 += 2;
        }
        while (a2 != a3);
      }
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
}

void sub_19F661628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void md::mun::MuninViewLayerDataSource::createLayerData(uint64_t a1@<X0>, char *a2@<X1>, int8x8_t **a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  id v20;
  int8x8_t *v21;
  int8x8_t *v22;
  int8x8_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  int8x8_t *v35;
  int8x8_t *v36;
  int8x8_t *v37;
  int8x8_t *v38;
  int8x8_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD ***v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  __int128 v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD ***v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  __int128 v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  __n128 *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __n128 *v81;
  char v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  void *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  __int128 *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unsigned __int8 *v117;
  unint64_t v118;
  unint64_t v119;
  unsigned int v120;
  int8x8_t v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  uint8x8_t v127;
  uint64_t v128;
  uint64_t ***v129;
  uint64_t **v130;
  const void *v131;
  size_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t *v135;
  int v136;
  uint64_t *v137;
  uint64_t *v138;
  int v139;
  uint64_t *v140;
  unint64_t *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  __int128 v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  void *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  char *v174;
  char *v175;
  void *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  __int128 *v183;
  __int128 *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  void *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  _QWORD *v196;
  void *v197;
  unint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  _QWORD *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  size_t v214;
  size_t v215;
  const void *v216;
  const void *v217;
  unsigned __int8 v218;
  unsigned int v219;
  unint64_t v220;
  uint64_t v221;
  unsigned __int8 *v222;
  unint64_t v223;
  char *v224;
  uint64_t v225;
  void *v226[2];
  char *v227;
  uint64_t v228;
  char v229[32];
  unint64_t v230;
  void *__p[2];
  void *v232[2];
  int v233;
  __int128 v234;
  uint64_t v235;
  __n128 v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  uint64_t v239;
  unsigned __int8 v240;
  unint64_t v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  __int128 v244;
  uint64_t v245;
  __int128 *v246;
  uint64_t *v247;
  void *v248[2];
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int8 *v252;
  void *v253;
  unsigned __int8 *v254;
  uint64_t v255;

  v255 = *MEMORY[0x1E0C80C00];
  v242 = 0;
  v243 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 592);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_19;
  }
  v9 = std::__shared_weak_count::lock(v6);
  v243 = v9;
  if (!v9 || (v10 = *(_QWORD *)(a1 + 584), (v242 = v10) == 0))
  {
LABEL_19:
    *a4 = 0;
    a4[1] = 0;
    if (!v9)
      return;
    goto LABEL_319;
  }
  gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)v248, a2);
  v11 = *(unsigned __int16 *)v248[0];
  v12 = *((_QWORD *)v248[0] + 1);
  v13 = *((_QWORD *)v248[0] + 2);
  v241 = v12;
  v240 = v13;
  v14 = *((unsigned __int8 *)v248[0] + 24);
  if (v248[0] != (void *)v249)
    free(v248[0]);
  md::mun::MuninMetadataContainer::activePoint((md::mun::MuninMetadataContainer *)v248, v10, v12);
  if (!LOBYTE(v248[0]))
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_318;
  }
  v224 = a2;
  v15 = v252;
  v16 = (unsigned __int8 *)v253;
  if (v252 == v253)
    goto LABEL_21;
  v17 = 0;
  v18 = v13 & 0xFFFFFFFF00000000;
  v19 = v252;
  do
  {
    if (v19[240] == BYTE2(v13))
      v17 = (uint64_t)v19;
    v19 += 288;
  }
  while (v19 != v253);
  if (!v17)
  {
LABEL_21:
    *a4 = 0;
    a4[1] = 0;
    if (v15 == v16)
      goto LABEL_316;
    goto LABEL_307;
  }
  v20 = *(id *)(a1 + 608);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)objc_msgSend(v20, "gglDevice") + 24))(&v239);

  if (v14)
  {
    v21 = *a3;
    v22 = a3[1];
    if (*a3 != v22)
    {
      while (v21->i16[0] != 33)
      {
        v21 += 6;
        if (v21 == v22)
          goto LABEL_37;
      }
    }
    if (v21 == v22 || *(_QWORD *)&v21[4] != 1)
    {
LABEL_37:
      v24 = 0;
    }
    else
    {
      v23 = v21[3];
      v24 = *(_QWORD *)(*(_QWORD *)&v23 + 112);
      v25 = *(std::__shared_weak_count **)(*(_QWORD *)&v23 + 120);
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
        if (v24)
          v28 = v24 - 8;
        else
          v28 = 0;
        v237 = v28;
        v238 = v25;
        v29 = (unint64_t *)&v25->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
LABEL_42:
        gdc::ResourceKey::keyData((gdc::ResourceKey *)&v244, (_QWORD *)(v237 + 8));
        v33 = *(unsigned __int8 *)(v244 + 16);
        if ((_QWORD)v244 != v245)
          free((void *)v244);
        v236.n128_u64[0] = *(_QWORD *)(v237 + 152);
        if (!v236.n128_u64[0])
        {
          *a4 = 0;
          a4[1] = 0;
          goto LABEL_293;
        }
        v218 = BYTE2(v13);
        *(_OWORD *)__p = 0u;
        *(_OWORD *)v232 = 0u;
        v233 = 1065353216;
        if (v33)
          v34 = v240 == v33;
        else
          v34 = 0;
        if (v34)
        {
          v85 = *(unsigned __int8 **)(v17 + 248);
          v86 = *(unsigned __int8 **)(v17 + 256);
          while (1)
          {
            if (v85 == v86)
              goto LABEL_226;
            v87 = *v85;
            v88 = *(_QWORD *)(v237 + 920);
            if (v87 >= (*(_QWORD *)(v237 + 928) - v88) >> 4)
              break;
            v89 = *(_QWORD *)(v88 + 16 * v87);
            if (!v89)
              break;
            v90 = *(_QWORD *)(v88 + 16 * v87 + 8);
            if (v90)
            {
              v91 = (unint64_t *)(v90 + 8);
              do
                v92 = __ldxr(v91);
              while (__stxr(v92 + 1, v91));
            }
            *(_QWORD *)&v244 = v89;
            *((_QWORD *)&v244 + 1) = v90;
            v94 = *(void **)(v89 + 144);
            v93 = *(unint64_t **)(v89 + 152);
            v226[0] = v94;
            v226[1] = v93;
            if (v93)
            {
              v95 = v93 + 1;
              do
                v96 = __ldxr(v95);
              while (__stxr(v96 + 1, v95));
            }
            LODWORD(v234) = v87;
            v97 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)__p, v87, &v234);
            v98 = *(_OWORD *)v226;
            v226[0] = 0;
            v226[1] = 0;
            v99 = (std::__shared_weak_count *)v97[4];
            *(_OWORD *)(v97 + 3) = v98;
            if (v99)
            {
              v100 = (unint64_t *)&v99->__shared_owners_;
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
            if (v226[1])
            {
              v102 = (unint64_t *)((char *)v226[1] + 8);
              do
                v103 = __ldaxr(v102);
              while (__stlxr(v103 - 1, v102));
              if (!v103)
              {
                (*(void (**)(void *))(*(_QWORD *)v226[1] + 16))(v226[1]);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v226[1]);
              }
            }
            v104 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
            if (*((_QWORD *)&v244 + 1))
            {
              v105 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            ++v85;
          }
        }
        else
        {
          v36 = *a3;
          v35 = a3[1];
          if (*a3 != v35)
          {
            while (v36->i16[0] != 34)
            {
              v36 += 6;
              if (v36 == v35)
                goto LABEL_231;
            }
          }
          if (v36 != v35)
          {
            v113 = *(unsigned __int8 **)(v17 + 248);
            v222 = *(unsigned __int8 **)(v17 + 256);
            if (v113 == v222)
              goto LABEL_226;
            v220 = v18;
            v221 = v11;
            while (1)
            {
              v114 = *v113;
              v115 = v241;
              v226[0] = v229;
              v226[1] = v229;
              v227 = v229;
              v228 = 32;
              v230 = 0;
              v219 = v114;
              v116 = v18 | (v114 << 16) | v240;
              *(_QWORD *)&v234 = v11;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(v226, v229, (char *)&v234, (char *)&v234 + 8);
              *(_QWORD *)&v234 = v115;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(v226, (char *)v226[1], (char *)&v234, (char *)&v234 + 8);
              *(_QWORD *)&v234 = v116;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(v226, (char *)v226[1], (char *)&v234, (char *)&v234 + 8);
              *(_QWORD *)&v234 = 2;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(v226, (char *)v226[1], (char *)&v234, (char *)&v234 + 8);
              v117 = (unsigned __int8 *)v226[0];
              v118 = (char *)v226[1] - (char *)v226[0];
              if (v226[1] == v226[0])
              {
                v119 = 0;
              }
              else
              {
                v119 = 0;
                if (v118 <= 1)
                  v118 = 1;
                do
                {
                  v120 = *v117++;
                  v119 ^= (v119 << 6) - 0x61C8864680B583EBLL + (v119 >> 2) + v120;
                  --v118;
                }
                while (v118);
              }
              v230 = v119;
              gdc::ResourceKey::ResourceKey((uint64_t)&v244, 0, 34, (uint64_t)v226, 0, 2147483646);
              if (v226[0] != v227)
                free(v226[0]);
              v121 = v36[2];
              if (!*(_QWORD *)&v121)
                goto LABEL_221;
              v122 = v244;
              v123 = WORD1(v244);
              v124 = (WORD1(v244)
                    - 0x61C8864680B583EBLL
                    + ((v244 - 0x61C8864680B583EBLL) << 6)
                    + (((unint64_t)v244 - 0x61C8864680B583EBLL) >> 2)) ^ (v244
                                                                                                - 0x61C8864680B583EBLL);
              v125 = v247;
              v126 = ((unint64_t)&v247[8 * v124 - 0xC3910C8D016B07DLL] + (v124 >> 2) - 3) ^ v124;
              v127 = (uint8x8_t)vcnt_s8(v121);
              v127.i16[0] = vaddlv_u8(v127);
              if (v127.u32[0] > 1uLL)
              {
                v128 = ((unint64_t)&v247[8 * v124 - 0xC3910C8D016B07DLL] + (v124 >> 2) - 3) ^ v124;
                if (v126 >= *(_QWORD *)&v121)
                  v128 = v126 % *(_QWORD *)&v121;
              }
              else
              {
                v128 = v126 & (*(_QWORD *)&v121 - 1);
              }
              v129 = *(uint64_t ****)(*(_QWORD *)&v36[1] + 8 * v128);
              if (!v129 || (v130 = *v129) == 0)
              {
LABEL_221:
                *a4 = 0;
                a4[1] = 0;
                v159 = 1;
                v18 = v220;
                v11 = v221;
                goto LABEL_222;
              }
              v131 = (const void *)*((_QWORD *)&v244 + 1);
              v132 = v245 - *((_QWORD *)&v244 + 1);
              if (v127.u32[0] < 2uLL)
              {
                v133 = *(_QWORD *)&v121 - 1;
                while (1)
                {
                  v137 = v130[1];
                  if ((uint64_t *)v126 == v137)
                  {
                    if (*((unsigned __int8 *)v130 + 16) == v122
                      && *((unsigned __int16 *)v130 + 9) == (_DWORD)v123
                      && v130[11] == v125)
                    {
                      v138 = v130[3];
                      if ((char *)v130[4] - (char *)v138 == v132)
                      {
                        v215 = v132;
                        v217 = v131;
                        v211 = v125;
                        v213 = v123;
                        v139 = memcmp(v138, v131, v132);
                        v132 = v215;
                        v131 = v217;
                        v125 = v211;
                        v123 = v213;
                        if (!v139)
                          goto LABEL_199;
                      }
                    }
                  }
                  else if (((unint64_t)v137 & v133) != v128)
                  {
                    goto LABEL_221;
                  }
                  v130 = (uint64_t **)*v130;
                  if (!v130)
                    goto LABEL_221;
                }
              }
              while (1)
              {
                v134 = (unint64_t)v130[1];
                if (v126 == v134)
                  break;
                if (v134 >= *(_QWORD *)&v121)
                  v134 %= *(_QWORD *)&v121;
                if (v134 != v128)
                  goto LABEL_221;
LABEL_181:
                v130 = (uint64_t **)*v130;
                if (!v130)
                  goto LABEL_221;
              }
              if (*((unsigned __int8 *)v130 + 16) != v122)
                goto LABEL_181;
              if (*((unsigned __int16 *)v130 + 9) != (_DWORD)v123)
                goto LABEL_181;
              if (v130[11] != v125)
                goto LABEL_181;
              v135 = v130[3];
              if ((char *)v130[4] - (char *)v135 != v132)
                goto LABEL_181;
              v214 = v132;
              v216 = v131;
              v210 = v125;
              v212 = v123;
              v136 = memcmp(v135, v131, v132);
              v132 = v214;
              v131 = v216;
              v125 = v210;
              v123 = v212;
              if (v136)
                goto LABEL_181;
LABEL_199:
              v140 = v130[14];
              v141 = (unint64_t *)v130[15];
              v226[0] = v140;
              v226[1] = v141;
              v18 = v220;
              if (v141)
              {
                v142 = v141 + 1;
                do
                  v143 = __ldxr(v142);
                while (__stxr(v143 + 1, v142));
              }
              v145 = v140[18];
              v144 = v140[19];
              *(_QWORD *)&v234 = v145;
              *((_QWORD *)&v234 + 1) = v144;
              if (v144)
              {
                v146 = (unint64_t *)(v144 + 8);
                do
                  v147 = __ldxr(v146);
                while (__stxr(v147 + 1, v146));
              }
              LODWORD(v225) = v219;
              v148 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)__p, v219, &v225);
              v11 = v221;
              v149 = v234;
              v234 = 0uLL;
              v150 = (std::__shared_weak_count *)v148[4];
              *(_OWORD *)(v148 + 3) = v149;
              if (v150)
              {
                v151 = (unint64_t *)&v150->__shared_owners_;
                do
                  v152 = __ldaxr(v151);
                while (__stlxr(v152 - 1, v151));
                if (!v152)
                {
                  ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                  std::__shared_weak_count::__release_weak(v150);
                }
              }
              v153 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
              if (*((_QWORD *)&v234 + 1))
              {
                v154 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
                do
                  v155 = __ldaxr(v154);
                while (__stlxr(v155 - 1, v154));
                if (!v155)
                {
                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                  std::__shared_weak_count::__release_weak(v153);
                }
              }
              v156 = (std::__shared_weak_count *)v226[1];
              if (v226[1])
              {
                v157 = (unint64_t *)((char *)v226[1] + 8);
                do
                  v158 = __ldaxr(v157);
                while (__stlxr(v158 - 1, v157));
                if (!v158)
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                }
              }
              v159 = 0;
LABEL_222:
              if (*((__int128 **)&v244 + 1) != v246)
                free(*((void **)&v244 + 1));
              if ((v159 & 1) != 0)
                goto LABEL_290;
              if (++v113 == v222)
              {
LABEL_226:
                v226[1] = 0;
                v227 = 0;
                v226[0] = 0;
                v160 = *(_QWORD *)(v236.n128_u64[0] + 8);
                if (v160)
                {
                  v161 = 0;
                  v162 = *(uint64_t **)v236.n128_u64[0];
                  while (1)
                  {
                    v163 = *v162;
                    v162 += 24;
                    if (v163 == v218)
                      break;
                    if (v160 == ++v161)
                      goto LABEL_270;
                  }
                  v225 = 0;
                  v225 = *(_QWORD *)v236.n128_u64[0] + 192 * v161;
                  v183 = (__int128 *)operator new(0x28uLL);
                  *(_QWORD *)v183 = &off_1E42D93B0;
                  *((_QWORD *)v183 + 1) = &v236;
                  *((_QWORD *)v183 + 2) = &v225;
                  *((_QWORD *)v183 + 3) = __p;
                  *((_QWORD *)v183 + 4) = v226;
                  v246 = v183;
                  v234 = 0uLL;
                  (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v239 + 16))(v239, &v244, &v234);
                  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v234);
                  v184 = v246;
                  if (v246 == &v244)
                  {
                    v185 = 4;
                    v184 = &v244;
LABEL_269:
                    (*(void (**)(void))(*(_QWORD *)v184 + 8 * v185))();
                  }
                  else if (v246)
                  {
                    v185 = 5;
                    goto LABEL_269;
                  }
                }
LABEL_270:
                v244 = 0uLL;
                v245 = 0;
                if (*(_BYTE *)(v237 + 160))
                  std::vector<float>::__insert_with_size[abi:nn180100]<float const*,float const*>((unint64_t *)&v244, 0, (char *)(v237 + 200), (char *)(v237 + 920), 180);
                v234 = v249;
                v235 = v250;
                v186 = (char *)operator new(0x240uLL);
                std::__shared_ptr_emplace<md::mun::MuninViewData>::__shared_ptr_emplace[abi:nn180100]<gdc::LayerDataRequestKey const&,std::vector<md::mun::MuninViewMesh>,geo::Geocentric<double>,unsigned long long &,unsigned char &,md::mun::PhotoInfo const&,std::vector<float>,unsigned long long &,std::allocator<md::mun::MuninViewData>,0>((uint64_t)v186, v224, (uint64_t)v226, (uint64_t)&v234, (uint64_t *)&v241, (char *)&v240, v17, (uint64_t)&v244, &v251);
                *a4 = v186 + 24;
                a4[1] = v186;
                if ((_QWORD)v244)
                  operator delete((void *)v244);
                v187 = (char *)v226[0];
                if (v226[0])
                {
                  v188 = (char *)v226[1];
                  v189 = v226[0];
                  if (v226[1] != v226[0])
                  {
                    do
                    {
                      v190 = (std::__shared_weak_count *)*((_QWORD *)v188 - 8);
                      if (v190)
                      {
                        v191 = (unint64_t *)&v190->__shared_owners_;
                        do
                          v192 = __ldaxr(v191);
                        while (__stlxr(v192 - 1, v191));
                        if (!v192)
                        {
                          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                          std::__shared_weak_count::__release_weak(v190);
                        }
                      }
                      v193 = (std::__shared_weak_count *)*((_QWORD *)v188 - 10);
                      if (v193)
                      {
                        v194 = (unint64_t *)&v193->__shared_owners_;
                        do
                          v195 = __ldaxr(v194);
                        while (__stlxr(v195 - 1, v194));
                        if (!v195)
                        {
                          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                          std::__shared_weak_count::__release_weak(v193);
                        }
                      }
                      v188 -= 88;
                    }
                    while (v188 != v187);
                    v189 = v226[0];
                  }
                  v226[1] = v187;
                  operator delete(v189);
                }
LABEL_290:
                v196 = v232[0];
                if (v232[0])
                {
                  do
                  {
                    v204 = v196;
                    v196 = (_QWORD *)*v196;
                    v205 = (std::__shared_weak_count *)v204[4];
                    if (v205)
                    {
                      v206 = (unint64_t *)&v205->__shared_owners_;
                      do
                        v207 = __ldaxr(v206);
                      while (__stlxr(v207 - 1, v206));
                      if (!v207)
                      {
                        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                        std::__shared_weak_count::__release_weak(v205);
                      }
                    }
                    operator delete(v204);
                  }
                  while (v196);
                }
                v197 = __p[0];
                __p[0] = 0;
                if (v197)
                  operator delete(v197);
LABEL_293:
                v180 = v238;
                if (v238)
                {
                  v198 = (unint64_t *)&v238->__shared_owners_;
                  do
                    v182 = __ldaxr(v198);
                  while (__stlxr(v182 - 1, v198));
LABEL_296:
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                }
                goto LABEL_298;
              }
            }
          }
        }
LABEL_231:
        *a4 = 0;
        a4[1] = 0;
        goto LABEL_290;
      }
    }
    if (v24)
      v32 = v24 - 8;
    else
      v32 = 0;
    v237 = v32;
    v238 = 0;
    goto LABEL_42;
  }
  v37 = *a3;
  v38 = a3[1];
  if (*a3 != v38)
  {
    while (v37->i16[0] != 23)
    {
      v37 += 6;
      if (v37 == v38)
        goto LABEL_71;
    }
  }
  if (v37 == v38 || *(_QWORD *)&v37[4] != 1)
  {
LABEL_71:
    v40 = 0;
    goto LABEL_72;
  }
  v39 = v37[3];
  v40 = *(_QWORD *)(*(_QWORD *)&v39 + 112);
  v41 = *(std::__shared_weak_count **)(*(_QWORD *)&v39 + 120);
  if (!v41)
  {
LABEL_72:
    if (v40)
      v48 = v40 - 8;
    else
      v48 = 0;
    v237 = v48;
    v238 = 0;
    goto LABEL_76;
  }
  v42 = (unint64_t *)&v41->__shared_owners_;
  do
    v43 = __ldxr(v42);
  while (__stxr(v43 + 1, v42));
  if (v40)
    v44 = v40 - 8;
  else
    v44 = 0;
  v237 = v44;
  v238 = v41;
  v45 = (unint64_t *)&v41->__shared_owners_;
  do
    v46 = __ldxr(v45);
  while (__stxr(v46 + 1, v45));
  do
    v47 = __ldaxr(v45);
  while (__stlxr(v47 - 1, v45));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  v48 = v237;
LABEL_76:
  if (!v48)
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_261;
  }
  v226[0] = 0;
  v226[1] = 0;
  v227 = 0;
  v51 = v48 + 472;
  v49 = *(_QWORD *)(v48 + 472);
  v50 = *(_QWORD *)(v51 + 8);
  if (v50 != v49)
  {
    v52 = 0;
    do
    {
      if (0x4EC4EC4EC4EC4EC5 * ((v50 - v49) >> 3) <= v52)
      {
LABEL_111:
        v78 = 0;
        v236 = 0uLL;
        goto LABEL_112;
      }
      if (*(_BYTE *)(v49 + 104 * v52))
      {
        if (*(_BYTE *)(v49 + 104 * v52) != 12)
          goto LABEL_111;
        v53 = v49 + 104 * v52;
        v54 = *(_QWORD *)(v53 + 8);
        v55 = *(_QWORD *)(v53 + 16);
        v56 = (_QWORD ***)(v53 + 8);
        if (v55 - v54 != 64)
          goto LABEL_111;
        v57 = (std::__shared_weak_count *)operator new(0x58uLL);
        v57->__shared_owners_ = 0;
        v58 = (unint64_t *)&v57->__shared_owners_;
        v57->__shared_weak_owners_ = 0;
        v57->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
        v57[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
        v57[1].__shared_weak_owners_ = 0;
        v57[2].__vftable = 0;
        v57[1].__shared_owners_ = 0;
        LODWORD(v57[2].__shared_owners_) = 0;
        *(_QWORD *)&v59 = 0x100000001;
        *((_QWORD *)&v59 + 1) = 0x100000001;
        *(_OWORD *)((char *)&v57[2].__shared_owners_ + 4) = v59;
        *(std::__shared_weak_count_vtbl **)((char *)&v57[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
        HIDWORD(v57[3].__shared_owners_) = 0;
        *(_QWORD *)&v244 = v57 + 1;
        *((_QWORD *)&v244 + 1) = v57;
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", ***v56, (**v56)[1] - ***v56, 0);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        __p[0] = &v57[1];
        __p[1] = v57;
        do
          v61 = __ldxr(v58);
        while (__stxr(v61 + 1, v58));
        textureWithData(&v236, v60, __p, 0);
        do
          v62 = __ldaxr(v58);
        while (__stlxr(v62 - 1, v58));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }

        v63 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
        if (*((_QWORD *)&v244 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          goto LABEL_103;
        }
      }
      else
      {
        v66 = v49 + 104 * v52;
        v67 = *(_QWORD *)(v66 + 8);
        v68 = *(_QWORD *)(v66 + 16);
        v69 = (_QWORD ***)(v66 + 8);
        if (v68 - v67 != 32)
          goto LABEL_111;
        v70 = (std::__shared_weak_count *)operator new(0x58uLL);
        v70->__shared_owners_ = 0;
        v71 = (unint64_t *)&v70->__shared_owners_;
        v70->__shared_weak_owners_ = 0;
        v70->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
        v70[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
        v70[1].__shared_weak_owners_ = 0;
        v70[2].__vftable = 0;
        v70[1].__shared_owners_ = 0;
        LODWORD(v70[2].__shared_owners_) = 0;
        *(_QWORD *)&v72 = 0x100000001;
        *((_QWORD *)&v72 + 1) = 0x100000001;
        *(_OWORD *)((char *)&v70[2].__shared_owners_ + 4) = v72;
        *(std::__shared_weak_count_vtbl **)((char *)&v70[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
        HIDWORD(v70[3].__shared_owners_) = 0;
        *(_QWORD *)&v244 = v70 + 1;
        *((_QWORD *)&v244 + 1) = v70;
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", ***v69, (**v69)[1] - ***v69, 0);
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v234 = v70 + 1;
        *((_QWORD *)&v234 + 1) = v70;
        do
          v74 = __ldxr(v71);
        while (__stxr(v74 + 1, v71));
        textureWithData(&v236, v73, &v234, 0);
        do
          v75 = __ldaxr(v71);
        while (__stlxr(v75 - 1, v71));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }

        v63 = (std::__shared_weak_count *)*((_QWORD *)&v244 + 1);
        if (*((_QWORD *)&v244 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v244 + 1) + 8);
          do
            v65 = __ldaxr(v76);
          while (__stlxr(v65 - 1, v76));
LABEL_103:
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
      }
      if (v236.n128_u64[0])
      {
        v77 = (__n128 *)v226[1];
        if (v226[1] >= v227)
        {
          v223 = v236.n128_u64[1];
          v81 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v226, v236);
          v78 = (std::__shared_weak_count *)v223;
        }
        else
        {
          *(_QWORD *)v226[1] = v236.n128_u64[0];
          v78 = (std::__shared_weak_count *)v236.n128_u64[1];
          v77->n128_u64[1] = v236.n128_u64[1];
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          v81 = v77 + 1;
        }
        v82 = 0;
        v226[1] = v81;
        if (!v78)
          goto LABEL_117;
LABEL_113:
        v83 = (unint64_t *)&v78->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
        goto LABEL_117;
      }
      v78 = (std::__shared_weak_count *)v236.n128_u64[1];
LABEL_112:
      *a4 = 0;
      a4[1] = 0;
      v82 = 1;
      if (v78)
        goto LABEL_113;
LABEL_117:
      if ((v82 & 1) != 0)
        goto LABEL_250;
      ++v52;
      v49 = *(_QWORD *)(v237 + 472);
      v50 = *(_QWORD *)(v237 + 480);
    }
    while (v52 < 0x4EC4EC4EC4EC4EC5 * ((v50 - v49) >> 3));
  }
  __p[0] = 0;
  __p[1] = 0;
  v232[0] = 0;
  v107 = (__int128 *)operator new(0x20uLL);
  *(_QWORD *)v107 = &off_1E42D9368;
  *((_QWORD *)v107 + 1) = &v237;
  *((_QWORD *)v107 + 2) = v226;
  *((_QWORD *)v107 + 3) = __p;
  v246 = v107;
  v234 = 0uLL;
  (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v239 + 16))(v239, &v244, &v234);
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v246;
  if (v246 == &v244)
  {
    v112 = 4;
    v111 = &v244;
    goto LABEL_233;
  }
  if (v246)
  {
    v112 = 5;
LABEL_233:
    (*(void (**)(void))(*(_QWORD *)v111 + 8 * v112))();
  }
  v244 = v249;
  v245 = v250;
  v234 = 0uLL;
  v235 = 0;
  v164 = (char *)operator new(0x240uLL);
  std::__shared_ptr_emplace<md::mun::MuninViewData>::__shared_ptr_emplace[abi:nn180100]<gdc::LayerDataRequestKey const&,std::vector<md::mun::MuninViewMesh>,geo::Geocentric<double>,unsigned long long &,unsigned char &,md::mun::PhotoInfo const&,std::vector<float>,unsigned long long &,std::allocator<md::mun::MuninViewData>,0>((uint64_t)v164, v224, (uint64_t)__p, (uint64_t)&v244, (uint64_t *)&v241, (char *)&v240, v17, (uint64_t)&v234, &v251);
  *a4 = v164 + 24;
  a4[1] = v164;
  v165 = (char *)__p[0];
  if (__p[0])
  {
    v166 = (char *)__p[1];
    v167 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v168 = (std::__shared_weak_count *)*((_QWORD *)v166 - 8);
        if (v168)
        {
          v169 = (unint64_t *)&v168->__shared_owners_;
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
        }
        v171 = (std::__shared_weak_count *)*((_QWORD *)v166 - 10);
        if (v171)
        {
          v172 = (unint64_t *)&v171->__shared_owners_;
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        v166 -= 88;
      }
      while (v166 != v165);
      v167 = __p[0];
    }
    __p[1] = v165;
    operator delete(v167);
  }
LABEL_250:
  v174 = (char *)v226[0];
  if (v226[0])
  {
    v175 = (char *)v226[1];
    v176 = v226[0];
    if (v226[1] != v226[0])
    {
      do
      {
        v177 = (std::__shared_weak_count *)*((_QWORD *)v175 - 1);
        if (v177)
        {
          v178 = (unint64_t *)&v177->__shared_owners_;
          do
            v179 = __ldaxr(v178);
          while (__stlxr(v179 - 1, v178));
          if (!v179)
          {
            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
            std::__shared_weak_count::__release_weak(v177);
          }
        }
        v175 -= 16;
      }
      while (v175 != v174);
      v176 = v226[0];
    }
    v226[1] = v174;
    operator delete(v176);
  }
LABEL_261:
  v180 = v238;
  if (v238)
  {
    v181 = (unint64_t *)&v238->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    goto LABEL_296;
  }
LABEL_298:
  if (v239)
  {
    v199 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239);
    v200 = v239;
    v239 = 0;
    *(_QWORD *)&v244 = v200;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v199 + 48))(v199, &v244);
    v201 = v244;
    *(_QWORD *)&v244 = 0;
    if (v201)
      (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
    v202 = v239;
    v239 = 0;
    if (v202)
      (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
  }
  if (LOBYTE(v248[0]))
  {
    v15 = v252;
    v16 = (unsigned __int8 *)v253;
    if (v252 == v253)
    {
LABEL_316:
      if (v16 != v254)
        free(v16);
      goto LABEL_318;
    }
    do
    {
LABEL_307:
      v203 = (void *)*((_QWORD *)v15 + 31);
      if (v203 != *((void **)v15 + 33))
        free(v203);
      v15 += 288;
    }
    while (v15 != v16);
    v16 = v252;
    goto LABEL_316;
  }
LABEL_318:
  v9 = v243;
  if (!v243)
    return;
LABEL_319:
  v208 = (unint64_t *)&v9->__shared_owners_;
  do
    v209 = __ldaxr(v208);
  while (__stlxr(v209 - 1, v208));
  if (!v209)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_19F6628A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,void *__p,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a56 != (void *)a58)
    free(a56);
  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100]((uint64_t)&a35);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  ggl::Loader::~Loader((ggl::Loader *)&a50);
  geo::optional<md::mun::CollectionPoint>::~optional((uint64_t)&a68);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::mun::MuninViewData>::__shared_ptr_emplace[abi:nn180100]<gdc::LayerDataRequestKey const&,std::vector<md::mun::MuninViewMesh>,geo::Geocentric<double>,unsigned long long &,unsigned char &,md::mun::PhotoInfo const&,std::vector<float>,unsigned long long &,std::allocator<md::mun::MuninViewData>,0>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  __int128 *v44;
  _OWORD *v45;
  unint64_t v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char *v55;
  __int128 *v56;
  _OWORD *v57;
  unint64_t v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  char v65;
  const void *v66;
  int64_t v67;
  char *v68;
  char *v69;
  char v71;
  uint64_t v72;
  void *v73;
  void *v74;
  char v75;
  int v76;
  uint64_t v77;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E42DDCE8;
  v71 = *a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v72, (uint64_t)(a2 + 8));
  v75 = 0;
  if (a2[96])
  {
    v76 = *((_DWORD *)a2 + 25);
    v75 = 1;
  }
  v77 = *((_QWORD *)a2 + 13);
  v17 = *a5;
  v18 = *a6;
  v19 = *a9;
  *(_QWORD *)(a1 + 24) = &off_1E42B4768;
  do
  {
    v20 = __ldaxr(gdc::LayerData::nextId(void)::idGenerator);
    v21 = v20 + 1;
  }
  while (__stlxr(v21, gdc::LayerData::nextId(void)::idGenerator));
  *(_DWORD *)(a1 + 32) = v21;
  *(_BYTE *)(a1 + 40) = v71;
  gdc::LayerDataKey::LayerDataKey(a1 + 48, (uint64_t)&v72);
  *(_BYTE *)(a1 + 136) = 0;
  if (v75)
  {
    *(_DWORD *)(a1 + 140) = v76;
    *(_BYTE *)(a1 + 136) = 1;
  }
  v22 = v77;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 184) = 1;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E42ABAE8;
  *(_QWORD *)(a1 + 192) = v19;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v23 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a4;
  *(_QWORD *)(a1 + 240) = v23;
  *(_QWORD *)(a1 + 248) = v17;
  v24 = *(_QWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)a7;
  *(_QWORD *)(a1 + 272) = v24;
  LODWORD(v24) = *(_DWORD *)(a7 + 32);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a7 + 24);
  *(_DWORD *)(a1 + 288) = v24;
  *(_QWORD *)(a1 + 292) = *(_QWORD *)(a7 + 36);
  v25 = *(_OWORD *)(a7 + 44);
  v26 = *(_OWORD *)(a7 + 60);
  v27 = *(_OWORD *)(a7 + 92);
  *(_OWORD *)(a1 + 332) = *(_OWORD *)(a7 + 76);
  *(_OWORD *)(a1 + 348) = v27;
  *(_OWORD *)(a1 + 316) = v26;
  *(_OWORD *)(a1 + 300) = v25;
  v28 = *(_OWORD *)(a7 + 108);
  v29 = *(_OWORD *)(a7 + 124);
  v30 = *(_OWORD *)(a7 + 156);
  *(_OWORD *)(a1 + 396) = *(_OWORD *)(a7 + 140);
  *(_OWORD *)(a1 + 412) = v30;
  *(_OWORD *)(a1 + 364) = v28;
  *(_OWORD *)(a1 + 380) = v29;
  v31 = *(_OWORD *)(a7 + 172);
  v32 = *(_OWORD *)(a7 + 188);
  v33 = *(_OWORD *)(a7 + 220);
  *(_OWORD *)(a1 + 460) = *(_OWORD *)(a7 + 204);
  *(_OWORD *)(a1 + 476) = v33;
  *(_OWORD *)(a1 + 428) = v31;
  *(_OWORD *)(a1 + 444) = v32;
  *(_DWORD *)(a1 + 492) = *(_DWORD *)(a7 + 236);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a7 + 240);
  v34 = (char *)(a1 + 536);
  *(_QWORD *)(a1 + 504) = a1 + 536;
  *(_QWORD *)(a1 + 512) = a1 + 536;
  *(_QWORD *)(a1 + 520) = a1 + 536;
  *(_QWORD *)(a1 + 528) = 2;
  v35 = *(char **)(a7 + 248);
  v36 = *(char **)(a7 + 256);
  v37 = v36 - v35;
  if ((unint64_t)(v36 - v35) >= 3)
  {
    if (v37 <= 4)
      v38 = 4;
    else
      v38 = v36 - v35;
    v34 = (char *)malloc_type_malloc(v38, 0x100004077774924uLL);
    v39 = *(char **)(a1 + 504);
    v40 = *(char **)(a1 + 512);
    if (v39 == v40)
      goto LABEL_27;
    v41 = v40 - v39;
    if ((unint64_t)(v40 - v39) < 8)
    {
      v42 = v34;
      goto LABEL_26;
    }
    v42 = v34;
    if ((unint64_t)(v34 - v39) < 0x20)
      goto LABEL_26;
    if (v41 >= 0x20)
    {
      v43 = v41 & 0xFFFFFFFFFFFFFFE0;
      v44 = (__int128 *)(v39 + 16);
      v45 = v34 + 16;
      v46 = v41 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v47 = *v44;
        *(v45 - 1) = *(v44 - 1);
        *v45 = v47;
        v44 += 2;
        v45 += 2;
        v46 -= 32;
      }
      while (v46);
      if (v41 == v43)
        goto LABEL_27;
      if ((v41 & 0x18) == 0)
      {
        v39 += v43;
        v42 = &v34[v43];
        goto LABEL_26;
      }
    }
    else
    {
      v43 = 0;
    }
    v48 = v41 & 0xFFFFFFFFFFFFFFF8;
    v42 = &v34[v41 & 0xFFFFFFFFFFFFFFF8];
    v49 = v43 - (v41 & 0xFFFFFFFFFFFFFFF8);
    v50 = (uint64_t *)&v39[v43];
    v51 = &v34[v43];
    do
    {
      v52 = *v50++;
      *(_QWORD *)v51 = v52;
      v51 += 8;
      v49 += 8;
    }
    while (v49);
    if (v41 == v48)
      goto LABEL_27;
    v39 += v48;
    do
    {
LABEL_26:
      v53 = *v39++;
      *v42++ = v53;
    }
    while (v39 != v40);
LABEL_27:
    *(_QWORD *)(a1 + 504) = v34;
    *(_QWORD *)(a1 + 512) = v34;
    *(_QWORD *)(a1 + 528) = v38;
  }
  if (v35 == v36)
    goto LABEL_46;
  if (v37 < 8)
  {
    v55 = v34;
    goto LABEL_44;
  }
  if ((unint64_t)(v34 - v35) < 0x20)
  {
    v55 = v34;
    goto LABEL_44;
  }
  if (v37 >= 0x20)
  {
    v54 = v37 & 0xFFFFFFFFFFFFFFE0;
    v56 = (__int128 *)(v35 + 16);
    v57 = v34 + 16;
    v58 = v37 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v59 = *v56;
      *(v57 - 1) = *(v56 - 1);
      *v57 = v59;
      v56 += 2;
      v57 += 2;
      v58 -= 32;
    }
    while (v58);
    if (v37 == v54)
      goto LABEL_45;
    if ((v37 & 0x18) == 0)
    {
      v35 += v54;
      v55 = &v34[v54];
      goto LABEL_44;
    }
  }
  else
  {
    v54 = 0;
  }
  v60 = v37 & 0xFFFFFFFFFFFFFFF8;
  v55 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
  v61 = v54 - (v37 & 0xFFFFFFFFFFFFFFF8);
  v62 = (uint64_t *)&v35[v54];
  v63 = &v34[v54];
  do
  {
    v64 = *v62++;
    *(_QWORD *)v63 = v64;
    v63 += 8;
    v61 += 8;
  }
  while (v61);
  if (v37 == v60)
    goto LABEL_45;
  v35 += v60;
  do
  {
LABEL_44:
    v65 = *v35++;
    *v55++ = v65;
  }
  while (v35 != v36);
LABEL_45:
  v34 = *(char **)(a1 + 512);
LABEL_46:
  *(_QWORD *)(a1 + 512) = &v34[v37];
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  v66 = *(const void **)a8;
  v67 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v67)
  {
    if (v67 < 0)
      abort();
    v68 = (char *)operator new(v67);
    *(_QWORD *)(a1 + 544) = v68;
    *(_QWORD *)(a1 + 552) = v68;
    v69 = &v68[4 * (v67 >> 2)];
    *(_QWORD *)(a1 + 560) = v69;
    memcpy(v68, v66, v67);
    *(_QWORD *)(a1 + 552) = v69;
  }
  *(_BYTE *)(a1 + 568) = v18;
  if (v75)
    v75 = 0;
  if (v73 != v74)
    free(v73);
  return a1;
}

void sub_19F662E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;
  void **v22;
  uint64_t v23;
  char *v25;
  char *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;

  v25 = (char *)*v22;
  if (*v22)
  {
    v26 = *(char **)(v21 + 208);
    v27 = *v22;
    if (v26 != v25)
    {
      do
      {
        v28 = (std::__shared_weak_count *)*((_QWORD *)v26 - 8);
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)v26 - 10);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v26 -= 88;
      }
      while (v26 != v25);
      v27 = *v22;
    }
    *(_QWORD *)(v21 + 208) = v25;
    operator delete(v27);
  }
  *(_QWORD *)(v21 + 24) = v23;
  if (*(_BYTE *)(v21 + 136))
    *(_BYTE *)(v21 + 136) = 0;
  v34 = *(void **)(v21 + 56);
  if (v34 != *(void **)(v21 + 72))
    free(v34);
  if (a11 != a13)
    free(a11);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v21);
  _Unwind_Resume(a1);
}

void **std::vector<md::mun::MuninViewMesh>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 8);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 10);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 10);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 88;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_59;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_64:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v6);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v6) = v13;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19F663498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<float>::__insert_with_size[abi:nn180100]<float const*,float const*>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  size_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  size_t v55;
  uint64_t v56;
  char *__srca;

  if (a5 < 1)
    return;
  v10 = *a1;
  v9 = (char *)a1[1];
  v11 = (uint64_t)a2 - *a1;
  v12 = v11 >> 2;
  v13 = (_BYTE *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFFCLL));
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - (_QWORD)v9) >> 2)
  {
    __srca = (char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFFCLL));
    v15 = a5 + ((uint64_t)&v9[-v10] >> 2);
    if (v15 >> 62)
      abort();
    v16 = v14 - v10;
    if (v16 >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v18 = operator new(4 * v17);
    }
    else
    {
      v18 = 0;
    }
    v41 = 4 * a5;
    v56 = v11 >> 2;
    v42 = &v18[4 * v12];
    memcpy(v42, __src, v41);
    if ((void *)v10 == a2)
    {
      v43 = v42;
    }
    else
    {
      v44 = v11 - 4;
      if ((unint64_t)(v11 - 4) >= 0x3C)
      {
        v46 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + v10 - (_QWORD)&v18[v11 & 0xFFFFFFFFFFFFFFFCLL];
        v45 = __srca;
        v43 = v42;
        if (v46 >= 0x20)
        {
          v47 = (v44 >> 2) + 1;
          v45 = &__srca[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
          v48 = 4 * v56 - 16;
          v49 = (__int128 *)(v10 + v48);
          v50 = &v18[v48];
          v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *v49;
            *(v50 - 1) = *(v49 - 1);
            *v50 = v52;
            v49 -= 2;
            v50 -= 2;
            v51 -= 8;
          }
          while (v51);
          v43 = &v42[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_44;
        }
      }
      else
      {
        v45 = __srca;
        v43 = v42;
      }
      do
      {
        v53 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *((_DWORD *)v43 - 1) = v53;
        v43 -= 4;
      }
      while (v45 != (char *)v10);
    }
LABEL_44:
    v54 = &v18[4 * v17];
    v55 = v9 - __srca;
    if (v55)
      memmove(&v42[v41], __srca, v55);
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v42[v41 + v55];
    a1[2] = (unint64_t)v54;
    if (v10)
      operator delete((void *)v10);
    return;
  }
  v19 = (v9 - v13) >> 2;
  if (v19 >= a5)
  {
    v20 = &__src[4 * a5];
    v22 = (char *)a1[1];
    goto LABEL_18;
  }
  v20 = &__src[4 * v19];
  v21 = a4 - v20;
  if (a4 != v20)
    memmove(v9, &__src[4 * v19], a4 - v20);
  v22 = &v9[v21];
  a1[1] = (unint64_t)&v9[v21];
  if (v9 - v13 >= 1)
  {
    v12 = v11 >> 2;
LABEL_18:
    v23 = &v13[4 * a5];
    v24 = v22 - v23;
    v25 = (v22 - v23) >> 2;
    v26 = &v22[-4 * a5];
    v27 = v22;
    if (v26 < v9)
    {
      v28 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + v24;
      v29 = (char *)(v28 + v10);
      v30 = v28 + v10 + 4;
      if ((unint64_t)v9 > v30)
        v30 = (unint64_t)v9;
      v31 = v30 + ~v10 - v28;
      v32 = v22 - v29;
      v33 = v31 >= 0x2C && v32 > 0x1F;
      v27 = v22;
      if (!v33)
        goto LABEL_53;
      v34 = (v31 >> 2) + 1;
      v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
      v26 += v35;
      v36 = v22 + 16;
      v37 = (__int128 *)(4 * v25 + 4 * v12 + v10 + 16);
      v38 = v34 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v39 = *v37;
        *(v36 - 1) = *(v37 - 1);
        *v36 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 8;
      }
      while (v38);
      v27 = &v22[v35];
      if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_53:
        do
        {
          v40 = *(_DWORD *)v26;
          v26 += 4;
          *(_DWORD *)v27 = v40;
          v27 += 4;
        }
        while (v26 < v9);
      }
    }
    a1[1] = (unint64_t)v27;
    if (v22 != v23)
      memmove(&v22[-4 * v25], v13, v24);
    if (v20 != __src)
      memmove(v13, __src, v20 - __src);
  }
}

uint64_t geo::optional<md::mun::CollectionPoint>::~optional(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD **)(a1 + 96);
    v3 = *(_QWORD **)(a1 + 104);
    if (v2 != v3)
    {
      do
      {
        v4 = (void *)v2[31];
        if (v4 != (void *)v2[33])
          free(v4);
        v2 += 36;
      }
      while (v2 != v3);
      v2 = *(_QWORD **)(a1 + 96);
    }
    if (v2 != *(_QWORD **)(a1 + 112))
      free(v2);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E42D93B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D93B0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  int v18;
  int64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t i;
  unint64_t v26;
  uint8x8_t v27;
  _QWORD **v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD **v40;
  size_t v41;
  size_t v42;
  size_t v43;
  _QWORD *j;
  size_t v45;
  uint64_t v46;
  unint64_t v47;
  uint8x8_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  size_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  void *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  _QWORD **v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  float v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  size_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __int128 *v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  unsigned int v90;
  char *v91;
  char *v92;
  _DWORD *v93;
  unint64_t v94;
  char *v95;
  _DWORD *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  _DWORD *v104;
  unint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  int v111;
  char *v112;
  char *v113;
  _DWORD *v114;
  unint64_t v115;
  char *v116;
  _DWORD *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  _BYTE *v124;
  _DWORD *v125;
  unint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  char *v133;
  char *v134;
  _DWORD *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _BYTE *v144;
  _DWORD *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  _OWORD *v149;
  char *v150;
  uint64_t v151;
  __int128 v152;
  int v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int16x8_t *v160;
  int16x8_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int16x8_t *v165;
  int16x8_t *v166;
  uint64_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  __int32 v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  uint64_t v178;
  double v179;
  double v180;
  double v181;
  uint64_t v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  BOOL v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  float v208;
  float v209;
  float v210;
  float v211;
  std::__shared_weak_count *v212;
  unint64_t *p_shared_owners;
  uint64_t v214;
  unsigned int *v215;
  uint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint8x8_t v220;
  unint64_t v221;
  uint64_t **v222;
  uint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  char *v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  _QWORD *v257;
  void *v258;
  _QWORD *v259;
  _QWORD *v260;
  void *v261;
  unint64_t v262;
  unint64_t v263;
  _QWORD *v264;
  int v265;
  int v266;
  unint64_t v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  _QWORD *v274;
  int v275;
  int v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  _QWORD *v280;
  void *v281;
  uint64_t v282;
  __int128 v283;
  uint64_t *v284;
  std::__shared_weak_count *v285;
  __int128 v286;
  unint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  float v292;
  float v293;
  float v294;
  float v295;
  void *v296[2];
  void *v297[2];
  float v298;
  void *__p[2];
  void *v300[2];
  float v301;
  __int128 v302;
  unint64_t v303;
  uint64_t v304;
  __int16 v305;
  uint64_t v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  __int128 v309;
  unint64_t v310;
  uint64_t v311;
  __int16 v312;
  uint64_t v313;
  _QWORD *v314;
  char *v315;
  uint64_t v316;
  char *v317;
  _QWORD *v318;

  v2 = **(_QWORD **)(a1 + 16);
  if (!*(_QWORD *)(v2 + 152))
    return;
  v3 = *a2;
  v4 = **(_QWORD **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 32);
  v288 = *(_QWORD **)(a1 + 24);
  v289 = **(_QWORD **)(a1 + 16);
  v6 = *(unsigned int *)(v2 + 136);
  v7 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v7 + 1) = 0;
  v8 = (unint64_t *)(v7 + 8);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_1E42E07C8;
  v9 = ggl::BufferData::BufferData((uint64_t)(v7 + 24), 32, 0, 0, 6, v6);
  *((_QWORD *)v7 + 29) = "";
  *((_QWORD *)v7 + 30) = &ggl::VSCommon::vertexReflection;
  *((_QWORD *)v7 + 3) = &off_1E42B8520;
  *((_QWORD *)v7 + 28) = &unk_1E42B8540;
  v309 = 0uLL;
  v285 = (std::__shared_weak_count *)v7;
  v10 = *((_QWORD *)v7 + 4) * v6;
  *(_QWORD *)&v11 = v3;
  v282 = v9;
  *((_QWORD *)&v11 + 1) = v9;
  if (v10)
  {
    if (!v3 || v7[41] == 2)
    {
      v12 = *((_QWORD *)v7 + 12);
    }
    else
    {
      v283 = v11;
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, v9, 0, v10, 1, 1);
      v11 = v283;
    }
  }
  else
  {
    v12 = 0;
  }
  v309 = v11;
  v310 = 0;
  v311 = v10;
  v313 = v12;
  v312 = 257;
  if ((_DWORD)v6)
  {
    v13 = *(uint64_t **)(v289 + 144);
    v14 = (float *)(v12 + 20);
    v15 = (float *)(*(_QWORD *)(v289 + 152) + 4);
    do
    {
      v16 = *v13;
      *(v14 - 3) = *((float *)v13 + 2);
      *(_QWORD *)(v14 - 5) = v16;
      v17 = 1.0 - *v15;
      *(v14 - 1) = *(v15 - 1);
      *v14 = v17;
      v14 += 8;
      v15 += 3;
      v13 = (uint64_t *)((char *)v13 + 12);
      --v6;
    }
    while (v6);
  }
  v284 = v5;
  v18 = *(_DWORD *)(v289 + 160);
  v19 = (int64_t)operator new(0xF8uLL);
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)v19 = &off_1E42DF1E8;
  ggl::BufferData::BufferData(v19 + 24, 2, 1, 0, 6, (3 * v18));
  *(_DWORD *)(v19 + 240) = 0;
  *(_QWORD *)(v19 + 24) = &off_1E42B6B88;
  *(_QWORD *)(v19 + 32) = 2;
  *(_QWORD *)(v19 + 224) = &unk_1E42B6BA8;
  *(_QWORD *)(v19 + 232) = "";
  v307 = v19 + 24;
  v308 = (std::__shared_weak_count *)v19;
  v302 = 0uLL;
  *(_QWORD *)&v20 = v3;
  *((_QWORD *)&v20 + 1) = v19 + 24;
  if (v18)
  {
    if (!v3 || *(_BYTE *)(v19 + 41) == 2)
    {
      v21 = *(_QWORD *)(v19 + 96);
    }
    else
    {
      v286 = v20;
      v21 = (*(uint64_t (**)(uint64_t, int64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, v19 + 24, 0, 2 * (3 * v18), 1, 1);
      v20 = v286;
    }
  }
  else
  {
    v21 = 0;
  }
  v22 = v289;
  v302 = v20;
  v303 = 0;
  v304 = 2 * (3 * v18);
  v306 = v21;
  v305 = 257;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v300 = 0u;
  v301 = 1.0;
  v23 = *(unsigned int *)(v289 + 160);
  v287 = v4;
  if (!(_DWORD)v23)
  {
    *(_OWORD *)v296 = 0uLL;
    *(_OWORD *)v297 = 0uLL;
    v298 = 1.0;
    goto LABEL_240;
  }
  v24 = 0;
  for (i = 0; i < v23; ++i)
  {
    v26 = *(unsigned int *)(*(_QWORD *)(v289 + 168) + 16 * i + 12);
    if ((v26 & 0x80000000) != 0)
      continue;
    if (v24)
    {
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        v19 = *(unsigned int *)(*(_QWORD *)(v289 + 168) + 16 * i + 12);
        if (v24 <= v26)
          v19 = v26 % v24;
      }
      else
      {
        v19 = ((_DWORD)v24 - 1) & v26;
      }
      v28 = (_QWORD **)*((_QWORD *)__p[0] + v19);
      if (v28)
      {
        v29 = *v28;
        if (*v28)
        {
          if (v27.u32[0] < 2uLL)
          {
            while (1)
            {
              v31 = v29[1];
              if (v31 == v26)
              {
                if (*((_DWORD *)v29 + 4) == (_DWORD)v26)
                  goto LABEL_22;
              }
              else if ((v31 & (v24 - 1)) != v19)
              {
                goto LABEL_45;
              }
              v29 = (_QWORD *)*v29;
              if (!v29)
                goto LABEL_45;
            }
          }
          do
          {
            v30 = v29[1];
            if (v30 == v26)
            {
              if (*((_DWORD *)v29 + 4) == (_DWORD)v26)
                goto LABEL_22;
            }
            else
            {
              if (v30 >= v24)
                v30 %= v24;
              if (v30 != v19)
                break;
            }
            v29 = (_QWORD *)*v29;
          }
          while (v29);
        }
      }
    }
LABEL_45:
    v29 = operator new(0x20uLL);
    *v29 = 0;
    v29[1] = v26;
    *((_DWORD *)v29 + 4) = v26;
    v29[3] = 0;
    v32 = (float)((unint64_t)v300[1] + 1);
    if (!v24 || (float)(v301 * (float)v24) < v32)
    {
      v33 = (v24 & (v24 - 1)) != 0;
      if (v24 < 3)
        v33 = 1;
      v34 = v33 | (2 * v24);
      v35 = vcvtps_u32_f32(v32 / v301);
      if (v34 <= v35)
        prime = v35;
      else
        prime = v34;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v24 = (unint64_t)__p[1];
      }
      if (prime <= v24)
      {
        if (prime >= v24)
          goto LABEL_82;
        v47 = vcvtps_u32_f32((float)(unint64_t)v300[1] / v301);
        if (v24 < 3 || (v48 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v48.i16[0] = vaddlv_u8(v48), v48.u32[0] > 1uLL))
        {
          v47 = std::__next_prime(v47);
        }
        else
        {
          v49 = 1 << -(char)__clz(v47 - 1);
          if (v47 >= 2)
            v47 = v49;
        }
        if (prime <= v47)
          prime = v47;
        if (prime >= v24)
        {
          v24 = (unint64_t)__p[1];
LABEL_82:
          if ((v24 & (v24 - 1)) != 0)
          {
            if (v24 <= v26)
              v19 = v26 % v24;
            else
              v19 = v26;
          }
          else
          {
            v19 = ((_DWORD)v24 - 1) & v26;
          }
          goto LABEL_95;
        }
        if (!prime)
        {
          v56 = __p[0];
          __p[0] = 0;
          if (v56)
            operator delete(v56);
          v24 = 0;
          __p[1] = 0;
          goto LABEL_82;
        }
      }
      if (prime >> 61)
        goto LABEL_380;
      v37 = operator new(8 * prime);
      v38 = __p[0];
      __p[0] = v37;
      if (v38)
        operator delete(v38);
      v39 = 0;
      __p[1] = (void *)prime;
      do
        *((_QWORD *)__p[0] + v39++) = 0;
      while (prime != v39);
      v40 = (_QWORD **)v300[0];
      if (!v300[0])
      {
LABEL_81:
        v24 = prime;
        goto LABEL_82;
      }
      v41 = *((_QWORD *)v300[0] + 1);
      v42 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v43 = v41 & v42;
        *((_QWORD *)__p[0] + v43) = v300;
        for (j = *v40; *v40; j = *v40)
        {
          v45 = j[1] & v42;
          if (v45 == v43)
          {
            v40 = (_QWORD **)j;
          }
          else if (*((_QWORD *)__p[0] + v45))
          {
            *v40 = (_QWORD *)*j;
            v46 = 8 * v45;
            *j = **(_QWORD **)((char *)__p[0] + v46);
            **(_QWORD **)((char *)__p[0] + v46) = j;
          }
          else
          {
            *((_QWORD *)__p[0] + v45) = v40;
            v40 = (_QWORD **)j;
            v43 = v45;
          }
        }
        goto LABEL_81;
      }
      if (v41 >= prime)
        v41 %= prime;
      *((_QWORD *)__p[0] + v41) = v300;
      v50 = *v40;
      if (!*v40)
        goto LABEL_81;
      while (1)
      {
        v52 = v50[1];
        if (v52 >= prime)
          v52 %= prime;
        if (v52 != v41)
        {
          if (!*((_QWORD *)__p[0] + v52))
          {
            *((_QWORD *)__p[0] + v52) = v40;
            goto LABEL_86;
          }
          *v40 = (_QWORD *)*v50;
          v51 = 8 * v52;
          *v50 = **(_QWORD **)((char *)__p[0] + v51);
          **(_QWORD **)((char *)__p[0] + v51) = v50;
          v50 = v40;
        }
        v52 = v41;
LABEL_86:
        v40 = (_QWORD **)v50;
        v50 = (_QWORD *)*v50;
        v41 = v52;
        if (!v50)
          goto LABEL_81;
      }
    }
LABEL_95:
    v53 = __p[0];
    v54 = (_QWORD *)*((_QWORD *)__p[0] + v19);
    if (v54)
    {
      *v29 = *v54;
LABEL_20:
      *v54 = v29;
      goto LABEL_21;
    }
    *v29 = v300[0];
    v300[0] = v29;
    v53[v19] = v300;
    if (*v29)
    {
      v55 = *(_QWORD *)(*v29 + 8);
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v55 >= v24)
          v55 %= v24;
      }
      else
      {
        v55 &= v24 - 1;
      }
      v54 = (char *)__p[0] + 8 * v55;
      goto LABEL_20;
    }
LABEL_21:
    ++v300[1];
    v23 = *(unsigned int *)(v289 + 160);
LABEL_22:
    v29[3] += 3;
  }
  v57 = v300[0];
  *(_OWORD *)v296 = 0u;
  *(_OWORD *)v297 = 0u;
  v298 = 1.0;
  if (!v300[0])
    goto LABEL_169;
  do
  {
    v58 = *((unsigned int *)v57 + 4);
    v59 = (unint64_t)v296[1];
    if (v296[1])
    {
      v60 = (uint8x8_t)vcnt_s8((int8x8_t)v296[1]);
      v60.i16[0] = vaddlv_u8(v60);
      if (v60.u32[0] > 1uLL)
      {
        v4 = *((unsigned int *)v57 + 4);
        if (v296[1] <= (void *)v58)
          v4 = v58 % (unint64_t)v296[1];
      }
      else
      {
        v4 = (LODWORD(v296[1]) - 1) & v58;
      }
      v61 = (_QWORD **)*((_QWORD *)v296[0] + v4);
      if (v61)
      {
        v62 = *v61;
        if (*v61)
        {
          if (v60.u32[0] < 2uLL)
          {
            while (1)
            {
              v64 = v62[1];
              if (v64 == v58)
              {
                if (*((_DWORD *)v62 + 4) == (_DWORD)v58)
                  goto LABEL_156;
              }
              else if ((v64 & ((unint64_t)v296[1] - 1)) != v4)
              {
                goto LABEL_134;
              }
              v62 = (_QWORD *)*v62;
              if (!v62)
                goto LABEL_134;
            }
          }
          do
          {
            v63 = v62[1];
            if (v63 == v58)
            {
              if (*((_DWORD *)v62 + 4) == (_DWORD)v58)
                goto LABEL_156;
            }
            else
            {
              if ((void *)v63 >= v296[1])
                v63 %= (unint64_t)v296[1];
              if (v63 != v4)
                break;
            }
            v62 = (_QWORD *)*v62;
          }
          while (v62);
        }
      }
    }
LABEL_134:
    v62 = operator new(0x40uLL);
    *v62 = 0;
    v62[1] = v58;
    *((_DWORD *)v62 + 4) = v58;
    *(_OWORD *)(v62 + 3) = 0u;
    *(_OWORD *)(v62 + 5) = 0u;
    v62[7] = 0;
    v65 = (float)((unint64_t)v297[1] + 1);
    if (!v59 || (float)(v298 * (float)v59) < v65)
    {
      v66 = (v59 & (v59 - 1)) != 0;
      if (v59 < 3)
        v66 = 1;
      v67 = v66 | (2 * v59);
      v68 = vcvtps_u32_f32(v65 / v298);
      if (v67 <= v68)
        v69 = v68;
      else
        v69 = v67;
      v59 = (unint64_t)v296[1];
      if (((unint64_t)v296[1] & ((unint64_t)v296[1] - 1)) != 0)
      {
        if (v296[1] <= (void *)v58)
          v4 = v58 % (unint64_t)v296[1];
        else
          v4 = v58;
      }
      else
      {
        v4 = (LODWORD(v296[1]) - 1) & v58;
      }
    }
    v70 = v296[0];
    v71 = (_QWORD *)*((_QWORD *)v296[0] + v4);
    if (v71)
    {
      *v62 = *v71;
LABEL_154:
      *v71 = v62;
      goto LABEL_155;
    }
    *v62 = v297[0];
    v297[0] = v62;
    v70[v4] = v297;
    if (*v62)
    {
      v72 = *(_QWORD *)(*v62 + 8);
      if ((v59 & (v59 - 1)) != 0)
      {
        if (v72 >= v59)
          v72 %= v59;
      }
      else
      {
        v72 &= v59 - 1;
      }
      v71 = (char *)v296[0] + 8 * v72;
      goto LABEL_154;
    }
LABEL_155:
    ++v297[1];
LABEL_156:
    v73 = v57[3];
    v74 = (void *)v62[3];
    if (v73 > (uint64_t)(v62[5] - (_QWORD)v74) >> 2)
    {
      if (v73 >> 62)
        abort();
      v4 = v62[4];
      v75 = (char *)operator new(4 * v73);
      v76 = v4 - (_QWORD)v74;
      v77 = &v75[(v4 - (_QWORD)v74) & 0xFFFFFFFFFFFFFFFCLL];
      v78 = v77;
      if ((void *)v4 != v74)
      {
        v79 = v4 - 4 - (_QWORD)v74;
        if (v79 < 0x2C)
        {
          v78 = &v75[(v4 - (_QWORD)v74) & 0xFFFFFFFFFFFFFFFCLL];
          goto LABEL_165;
        }
        v78 = &v75[(v4 - (_QWORD)v74) & 0xFFFFFFFFFFFFFFFCLL];
        if (v4 - (unint64_t)&v75[v76 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
          goto LABEL_388;
        v80 = v76 >> 2;
        v81 = (v79 >> 2) + 1;
        v82 = &v75[4 * v80 - 16];
        v83 = (__int128 *)(v4 - 16);
        v84 = v81 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v85 = *v83;
          *((_OWORD *)v82 - 1) = *(v83 - 1);
          *(_OWORD *)v82 = v85;
          v82 -= 32;
          v83 -= 2;
          v84 -= 8;
        }
        while (v84);
        v78 = &v77[-4 * (v81 & 0x7FFFFFFFFFFFFFF8)];
        v4 -= 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
        if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_388:
          do
          {
LABEL_165:
            v86 = *(_DWORD *)(v4 - 4);
            v4 -= 4;
            *((_DWORD *)v78 - 1) = v86;
            v78 -= 4;
          }
          while ((void *)v4 != v74);
        }
      }
      v62[3] = v78;
      v62[4] = v77;
      v62[5] = &v75[4 * v73];
      if (v74)
        operator delete(v74);
    }
    v57 = (_QWORD *)*v57;
  }
  while (v57);
  v23 = *(unsigned int *)(v289 + 160);
  v4 = v287;
LABEL_169:
  if (v23)
  {
    v87 = 0;
    while (2)
    {
      v89 = *(_QWORD *)(v22 + 168) + 16 * v87;
      v90 = *(_DWORD *)(v89 + 12);
      if ((v90 & 0x80000000) != 0)
        goto LABEL_173;
      v92 = v91;
      v93 = (_DWORD *)(*(_QWORD *)(v289 + 168) + 16 * v87);
      v95 = (char *)*((_QWORD *)v91 + 1);
      v94 = *((_QWORD *)v91 + 2);
      if ((unint64_t)v95 >= v94)
      {
        v97 = *(char **)v91;
        v98 = (uint64_t)&v95[-*(_QWORD *)v91];
        v99 = v98 >> 2;
        v100 = (v98 >> 2) + 1;
        if (v100 >> 62)
          abort();
        v101 = v94 - (_QWORD)v97;
        if (v101 >> 1 > v100)
          v100 = v101 >> 1;
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
          v102 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v102 = v100;
        if (v102)
        {
          if (v102 >> 62)
            goto LABEL_380;
          v103 = operator new(4 * v102);
        }
        else
        {
          v103 = 0;
        }
        v104 = &v103[4 * v99];
        *v104 = *v93;
        v96 = v104 + 1;
        if (v95 != v97)
        {
          v105 = v95 - 4 - v97;
          if (v105 < 0x2C)
            goto LABEL_389;
          if ((unint64_t)(v95 - &v103[v98]) < 0x20)
            goto LABEL_389;
          v106 = (v105 >> 2) + 1;
          v107 = &v103[4 * v99 - 16];
          v108 = v95 - 16;
          v109 = v106 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v110 = *(_OWORD *)v108;
            *(v107 - 1) = *((_OWORD *)v108 - 1);
            *v107 = v110;
            v107 -= 2;
            v108 -= 32;
            v109 -= 8;
          }
          while (v109);
          v104 -= v106 & 0x7FFFFFFFFFFFFFF8;
          v95 -= 4 * (v106 & 0x7FFFFFFFFFFFFFF8);
          if (v106 != (v106 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_389:
            do
            {
              v111 = *((_DWORD *)v95 - 1);
              v95 -= 4;
              *--v104 = v111;
            }
            while (v95 != v97);
          }
        }
        *(_QWORD *)v92 = v104;
        *((_QWORD *)v92 + 1) = v96;
        *((_QWORD *)v92 + 2) = &v103[4 * v102];
        if (v97)
          operator delete(v97);
      }
      else
      {
        *(_DWORD *)v95 = *v93;
        v96 = v95 + 4;
      }
      *((_QWORD *)v92 + 1) = v96;
      v113 = v112;
      v114 = (_DWORD *)(*(_QWORD *)(v289 + 168) + 16 * v87 + 4);
      v116 = (char *)*((_QWORD *)v112 + 1);
      v115 = *((_QWORD *)v112 + 2);
      if ((unint64_t)v116 >= v115)
      {
        v118 = *(char **)v112;
        v119 = (uint64_t)&v116[-*(_QWORD *)v112];
        v120 = v119 >> 2;
        v121 = (v119 >> 2) + 1;
        if (v121 >> 62)
          abort();
        v122 = v115 - (_QWORD)v118;
        if (v122 >> 1 > v121)
          v121 = v122 >> 1;
        if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
          v123 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v123 = v121;
        if (v123)
        {
          if (v123 >> 62)
            goto LABEL_380;
          v124 = operator new(4 * v123);
        }
        else
        {
          v124 = 0;
        }
        v125 = &v124[4 * v120];
        *v125 = *v114;
        v117 = v125 + 1;
        if (v116 != v118)
        {
          v126 = v116 - 4 - v118;
          if (v126 < 0x2C)
            goto LABEL_390;
          if ((unint64_t)(v116 - &v124[v119]) < 0x20)
            goto LABEL_390;
          v127 = (v126 >> 2) + 1;
          v128 = &v124[4 * v120 - 16];
          v129 = v116 - 16;
          v130 = v127 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v131 = *(_OWORD *)v129;
            *(v128 - 1) = *((_OWORD *)v129 - 1);
            *v128 = v131;
            v128 -= 2;
            v129 -= 32;
            v130 -= 8;
          }
          while (v130);
          v125 -= v127 & 0x7FFFFFFFFFFFFFF8;
          v116 -= 4 * (v127 & 0x7FFFFFFFFFFFFFF8);
          if (v127 != (v127 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_390:
            do
            {
              v132 = *((_DWORD *)v116 - 1);
              v116 -= 4;
              *--v125 = v132;
            }
            while (v116 != v118);
          }
        }
        *(_QWORD *)v113 = v125;
        *((_QWORD *)v113 + 1) = v117;
        *((_QWORD *)v113 + 2) = &v124[4 * v123];
        if (v118)
          operator delete(v118);
      }
      else
      {
        *(_DWORD *)v116 = *v114;
        v117 = v116 + 4;
      }
      v4 = v287;
      *((_QWORD *)v113 + 1) = v117;
      v134 = v133;
      v22 = v289;
      v135 = (_DWORD *)(*(_QWORD *)(v289 + 168) + 16 * v87 + 8);
      v137 = (char *)*((_QWORD *)v133 + 1);
      v136 = *((_QWORD *)v133 + 2);
      if ((unint64_t)v137 < v136)
      {
        *(_DWORD *)v137 = *v135;
        v88 = v137 + 4;
      }
      else
      {
        v138 = *(char **)v133;
        v139 = (uint64_t)&v137[-*(_QWORD *)v133];
        v140 = v139 >> 2;
        v141 = (v139 >> 2) + 1;
        if (v141 >> 62)
          abort();
        v142 = v136 - (_QWORD)v138;
        if (v142 >> 1 > v141)
          v141 = v142 >> 1;
        if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL)
          v143 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v143 = v141;
        if (v143)
        {
          if (v143 >> 62)
            goto LABEL_380;
          v144 = operator new(4 * v143);
        }
        else
        {
          v144 = 0;
        }
        v145 = &v144[4 * v140];
        *v145 = *v135;
        v88 = v145 + 1;
        if (v137 == v138)
        {
          v22 = v289;
        }
        else
        {
          v146 = v137 - 4 - v138;
          if (v146 < 0x2C)
          {
            v22 = v289;
            goto LABEL_236;
          }
          v147 = v137 - &v144[v139];
          v22 = v289;
          if (v147 < 0x20)
            goto LABEL_391;
          v148 = (v146 >> 2) + 1;
          v149 = &v144[4 * v140 - 16];
          v150 = v137 - 16;
          v151 = v148 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v152 = *(_OWORD *)v150;
            *(v149 - 1) = *((_OWORD *)v150 - 1);
            *v149 = v152;
            v149 -= 2;
            v150 -= 32;
            v151 -= 8;
          }
          while (v151);
          v145 -= v148 & 0x7FFFFFFFFFFFFFF8;
          v137 -= 4 * (v148 & 0x7FFFFFFFFFFFFFF8);
          if (v148 != (v148 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_391:
            do
            {
LABEL_236:
              v153 = *((_DWORD *)v137 - 1);
              v137 -= 4;
              *--v145 = v153;
            }
            while (v137 != v138);
          }
        }
        *(_QWORD *)v134 = v145;
        *((_QWORD *)v134 + 1) = v88;
        *((_QWORD *)v134 + 2) = &v144[4 * v143];
        if (v138)
          operator delete(v138);
      }
      *((_QWORD *)v134 + 1) = v88;
      v23 = *(unsigned int *)(v22 + 160);
LABEL_173:
      if (++v87 >= v23)
        break;
      continue;
    }
  }
LABEL_240:
  v154 = v297[0];
  v155 = v284;
  if (v297[0])
  {
    v156 = 0;
    v157 = v306;
    v158 = v306 + 16;
    v159 = 0;
    do
    {
      v160 = (int16x8_t *)v154[3];
      v161 = (int16x8_t *)v154[4];
      if (v160 != v161)
      {
        v162 = (char *)v161 - (char *)v160 - 4;
        v159 = v156;
        if (v162 >= 0x3C)
        {
          v163 = (v162 >> 2) + 1;
          v164 = v163 & 0x7FFFFFFFFFFFFFF0;
          v165 = (int16x8_t *)(v158 + 2 * v156);
          v166 = v160 + 2;
          v167 = v163 & 0x7FFFFFFFFFFFFFF0;
          do
          {
            v169 = v166[-2];
            v168 = v166[-1];
            v171 = *v166;
            v170 = v166[1];
            v166 += 4;
            v165[-1] = vuzp1q_s16(v169, v168);
            *v165 = vuzp1q_s16(v171, v170);
            v165 += 2;
            v167 -= 16;
          }
          while (v167);
          v159 = v156 + v164;
          if (v163 == v164)
            goto LABEL_242;
          v160 = (int16x8_t *)((char *)v160 + 4 * (v163 & 0x7FFFFFFFFFFFFFF0));
        }
        do
        {
          v172 = v160->i32[0];
          v160 = (int16x8_t *)((char *)v160 + 4);
          *(_WORD *)(v157 + 2 * v159++) = v172;
        }
        while (v160 != v161);
      }
LABEL_242:
      v154[6] = v156;
      v154[7] = v159;
      v156 = v159;
      v154 = (_QWORD *)*v154;
    }
    while (v154);
  }
  v174 = *(double *)(v22 + 8);
  v173 = *(double *)(v22 + 16);
  v175 = *(double *)(v22 + 24);
  v176 = *(double *)(v22 + 40);
  v177 = *(double *)(v22 + 48);
  v179 = *(double *)(v22 + 56);
  v178 = *(_QWORD *)(v22 + 64);
  v180 = *(double *)(v22 + 72);
  v181 = *(double *)(v22 + 80);
  v183 = *(double *)(v22 + 88);
  v182 = *(_QWORD *)(v22 + 96);
  v184 = v183 + v177 + v174;
  if (v184 <= 0.0)
  {
    if (v174 <= v177 || v174 <= v183)
    {
      v194 = v177 <= v183;
      v195 = sqrt(1.0 - (v177 + v174) + v183);
      v196 = 1.0 / (v195 + v195);
      v197 = (v180 + v175) * v196;
      v198 = v181 + v179;
      v199 = v198 * v196;
      v200 = v195 * 0.5;
      v201 = (v176 - v173) * v196;
      v202 = sqrt(v177 + 1.0 - (v174 + v183));
      v203 = v176 + v173;
      v204 = 1.0 / (v202 + v202);
      v205 = v203 * v204;
      v187 = v202 * 0.5;
      v206 = v198 * v204;
      v207 = (v175 - v180) * v204;
      if (v194)
        v186 = v197;
      else
        v186 = v205;
      if (v194)
      {
        v187 = v199;
        v188 = v200;
      }
      else
      {
        v188 = v206;
      }
      if (v194)
        v189 = v201;
      else
        v189 = v207;
    }
    else
    {
      v190 = sqrt(v174 + 1.0 - (v177 + v183));
      v191 = v190 + v190;
      v186 = v190 * 0.5;
      v192 = v176 + v173;
      v193 = 1.0 / v191;
      v187 = v192 * (1.0 / v191);
      v188 = (v180 + v175) * v193;
      v189 = (v181 - v179) * v193;
    }
  }
  else
  {
    v185 = 0.5 / sqrt(v184 + 1.0);
    v186 = v185 * (v181 - v179);
    v187 = v185 * (v175 - v180);
    v188 = v185 * (v176 - v173);
    v189 = 0.25 / v185;
  }
  v208 = v186;
  v209 = v187;
  v210 = v188;
  *(_QWORD *)&v290 = *(_QWORD *)(v22 + 32);
  *((_QWORD *)&v290 + 1) = v178;
  v211 = v189;
  v291 = v182;
  v292 = v208;
  v293 = v209;
  v294 = v210;
  v295 = v211;
  v212 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v212->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v212->__shared_owners_;
  v212->__shared_weak_owners_ = 0;
  v212->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5110;
  v214 = (uint64_t)&v212[1];
  std::construct_at[abi:nn180100]<ggl::VSCommon::Mesh,char const(&)[26],std::shared_ptr<ggl::VertexDataTyped<ggl::VSCommon::Vertex>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::VSCommon::Mesh*>((uint64_t)&v212[1], v282, v285, &v307);
  v215 = (unsigned int *)v297[0];
  if (!v297[0])
    goto LABEL_326;
  while (2)
  {
    v217 = v215[4];
    if (*(_QWORD *)(v4 + 40) <= v217)
      goto LABEL_269;
    v218 = v288[1];
    if (!v218)
      goto LABEL_269;
    v219 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 24 * v217);
    v220 = (uint8x8_t)vcnt_s8((int8x8_t)v218);
    v220.i16[0] = vaddlv_u8(v220);
    if (v220.u32[0] > 1uLL)
    {
      v221 = v219;
      if (v218 <= v219)
        v221 = v219 % v218;
    }
    else
    {
      v221 = ((_DWORD)v218 - 1) & v219;
    }
    v222 = *(uint64_t ***)(*v288 + 8 * v221);
    if (!v222)
      goto LABEL_269;
    v223 = *v222;
    if (!v223)
      goto LABEL_269;
    if (v220.u32[0] < 2uLL)
    {
      v224 = v218 - 1;
      while (1)
      {
        v226 = v223[1];
        if (v226 == v219)
        {
          if (*((_DWORD *)v223 + 4) == (_DWORD)v219)
            goto LABEL_292;
        }
        else if ((v226 & v224) != v221)
        {
          goto LABEL_269;
        }
        v223 = (uint64_t *)*v223;
        if (!v223)
          goto LABEL_269;
      }
    }
    while (2)
    {
      v225 = v223[1];
      if (v225 != v219)
      {
        if (v225 >= v218)
          v225 %= v218;
        if (v225 != v221)
          goto LABEL_269;
        goto LABEL_281;
      }
      if (*((_DWORD *)v223 + 4) != (_DWORD)v219)
      {
LABEL_281:
        v223 = (uint64_t *)*v223;
        if (!v223)
          goto LABEL_269;
        continue;
      }
      break;
    }
LABEL_292:
    v227 = v223 + 3;
    v228 = v155;
    v229 = v155[1];
    v230 = v228[2];
    if (v229 < v230)
    {
      std::construct_at[abi:nn180100]<md::mun::MuninViewMesh,std::shared_ptr<ggl::VSCommon::Mesh> &,gm::Range<unsigned long> const&,std::shared_ptr<ggl::Texture2D> const&,geo::RigidTransform<double,float> &,md::mun::MuninViewMesh*>(v229, v214, v212, (_OWORD *)v215 + 3, v223 + 3, &v290);
      v231 = v229 + 88;
      v216 = v284;
      v284[1] = v231;
      goto LABEL_268;
    }
    v232 = *v228;
    v233 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v229 - *v228) >> 3);
    v234 = v233 + 1;
    if ((unint64_t)(v233 + 1) > 0x2E8BA2E8BA2E8BALL)
      abort();
    v235 = v214;
    v236 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v230 - v232) >> 3);
    if (2 * v236 > v234)
      v234 = 2 * v236;
    if (v236 >= 0x1745D1745D1745DLL)
      v237 = 0x2E8BA2E8BA2E8BALL;
    else
      v237 = v234;
    v318 = v284 + 2;
    if (!v237)
    {
      v238 = 0;
      goto LABEL_304;
    }
    if (v237 > 0x2E8BA2E8BA2E8BALL)
LABEL_380:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v238 = (char *)operator new(88 * v237);
LABEL_304:
    v314 = v238;
    v315 = &v238[88 * v233];
    v316 = (uint64_t)v315;
    v317 = &v238[88 * v237];
    v214 = v235;
    std::construct_at[abi:nn180100]<md::mun::MuninViewMesh,std::shared_ptr<ggl::VSCommon::Mesh> &,gm::Range<unsigned long> const&,std::shared_ptr<ggl::Texture2D> const&,geo::RigidTransform<double,float> &,md::mun::MuninViewMesh*>((uint64_t)v315, v235, v212, (_OWORD *)v215 + 3, v227, &v290);
    v239 = (_QWORD *)*v284;
    v240 = (_QWORD *)v284[1];
    v241 = (uint64_t)v315;
    v242 = v316;
    if (v240 == (_QWORD *)*v284)
    {
      v248 = v284[1];
    }
    else
    {
      v243 = 0;
      do
      {
        v244 = v241 + v243 * 8;
        v245 = (char *)&v240[v243];
        *(_OWORD *)(v244 - 88) = *(_OWORD *)&v240[v243 - 11];
        *((_QWORD *)v245 - 11) = 0;
        *((_QWORD *)v245 - 10) = 0;
        *(_OWORD *)(v244 - 72) = *(_OWORD *)&v240[v243 - 9];
        *((_QWORD *)v245 - 9) = 0;
        *((_QWORD *)v245 - 8) = 0;
        *(_OWORD *)(v244 - 56) = *(_OWORD *)&v240[v243 - 7];
        v246 = *(_OWORD *)&v240[v243 - 5];
        *(_QWORD *)(v244 - 24) = v240[v243 - 3];
        *(_OWORD *)(v244 - 40) = v246;
        v247 = v240[v243 - 2];
        *(_DWORD *)(v244 - 8) = v240[v243 - 1];
        *(_QWORD *)(v244 - 16) = v247;
        *(_DWORD *)(v244 - 4) = HIDWORD(v240[v243 - 1]);
        v243 -= 11;
      }
      while (&v240[v243] != v239);
      v241 += v243 * 8;
      v248 = *v284;
      v240 = (_QWORD *)v284[1];
    }
    v231 = v242 + 88;
    *v284 = v241;
    v314 = (_QWORD *)v248;
    v315 = (char *)v248;
    v284[1] = v242 + 88;
    v249 = (char *)v284[2];
    v284[2] = (uint64_t)v317;
    v317 = v249;
    if (v240 == (_QWORD *)v248)
    {
      v4 = v287;
      if (v240)
        goto LABEL_325;
      goto LABEL_267;
    }
    while (2)
    {
      v316 = (uint64_t)(v240 - 11);
      v250 = (std::__shared_weak_count *)*(v240 - 8);
      if (!v250)
        goto LABEL_317;
      v251 = (unint64_t *)&v250->__shared_owners_;
      do
        v252 = __ldaxr(v251);
      while (__stlxr(v252 - 1, v251));
      if (!v252)
      {
        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
        std::__shared_weak_count::__release_weak(v250);
        v253 = (std::__shared_weak_count *)*(v240 - 10);
        if (v253)
        {
LABEL_318:
          v254 = (unint64_t *)&v253->__shared_owners_;
          do
            v255 = __ldaxr(v254);
          while (__stlxr(v255 - 1, v254));
          if (!v255)
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
        }
      }
      else
      {
LABEL_317:
        v253 = (std::__shared_weak_count *)*(v240 - 10);
        if (v253)
          goto LABEL_318;
      }
      v240 = (_QWORD *)v316;
      if (v316 != v248)
        continue;
      break;
    }
    v240 = v314;
    v4 = v287;
    if (v314)
LABEL_325:
      operator delete(v240);
LABEL_267:
    v216 = v284;
LABEL_268:
    v216[1] = v231;
    v155 = v216;
LABEL_269:
    v215 = *(unsigned int **)v215;
    if (v215)
      continue;
    break;
  }
  do
LABEL_326:
    v256 = __ldaxr(p_shared_owners);
  while (__stlxr(v256 - 1, p_shared_owners));
  if (!v256)
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
  }
  v257 = v297[0];
  if (v297[0])
  {
    do
    {
      v280 = (_QWORD *)*v257;
      v281 = (void *)v257[3];
      if (v281)
      {
        v257[4] = v281;
        operator delete(v281);
      }
      operator delete(v257);
      v257 = v280;
    }
    while (v280);
  }
  v258 = v296[0];
  v296[0] = 0;
  if (v258)
    operator delete(v258);
  v259 = v300[0];
  if (v300[0])
  {
    do
    {
      v260 = (_QWORD *)*v259;
      operator delete(v259);
      v259 = v260;
    }
    while (v260);
  }
  v261 = __p[0];
  __p[0] = 0;
  if (v261)
    operator delete(v261);
  if (v306)
  {
    v263 = v303;
    v262 = v304;
    if (v304 != v303)
    {
      v264 = (_QWORD *)*((_QWORD *)&v302 + 1);
      v265 = v305;
      v266 = HIBYTE(v305);
      if ((_QWORD)v302 && *(_BYTE *)(*((_QWORD *)&v302 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v302 + 64))();
      if (v265 && !v266)
      {
        v268 = v264[7];
        v267 = v264[8];
        if (v267 == v268)
          v268 = v264[10] - v264[9];
        if (v263 < v268)
          v268 = v263;
        if (v267 <= v262)
          v267 = v262;
        if (v267 == v268)
          v267 = v268 + v264[10] - v264[9];
        v264[7] = v268;
        v264[8] = v267;
      }
    }
  }
  v269 = v308;
  if (v308)
  {
    v270 = (unint64_t *)&v308->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  if (v313)
  {
    v273 = v310;
    v272 = v311;
    if (v311 != v310)
    {
      v274 = (_QWORD *)*((_QWORD *)&v309 + 1);
      v275 = v312;
      v276 = HIBYTE(v312);
      if ((_QWORD)v309 && *(_BYTE *)(*((_QWORD *)&v309 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v309 + 64))();
      if (v275 && !v276)
      {
        v278 = v274[7];
        v277 = v274[8];
        if (v277 == v278)
          v278 = v274[10] - v274[9];
        if (v273 < v278)
          v278 = v273;
        if (v277 <= v272)
          v277 = v272;
        if (v277 == v278)
          v277 = v278 + v274[10] - v274[9];
        v274[7] = v278;
        v274[8] = v277;
      }
    }
  }
  do
    v279 = __ldaxr(v8);
  while (__stlxr(v279 - 1, v8));
  if (!v279)
  {
    ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
    std::__shared_weak_count::__release_weak(v285);
  }
}

void sub_19F664F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,_QWORD *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  unint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  void *v51;

  do
    v42 = __ldaxr(v37);
  while (__stlxr(v42 - 1, v37));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  v43 = a27;
  if (a27)
  {
    do
    {
      v50 = (_QWORD *)*v43;
      v51 = (void *)v43[3];
      if (v51)
      {
        v43[4] = v51;
        operator delete(v51);
      }
      operator delete(v43);
      v43 = v50;
    }
    while (v50);
  }
  if (__p)
    operator delete(__p);
  v44 = a33;
  if (a33)
  {
    do
    {
      v45 = (_QWORD *)*v44;
      operator delete(v44);
      v44 = v45;
    }
    while (v45);
  }
  if (a31)
    operator delete(a31);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a37);
  v46 = *(std::__shared_weak_count **)(v40 - 200);
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v40 - 192));
  do
    v49 = __ldaxr(v39);
  while (__stlxr(v49 - 1, v39));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,`anonymous namespace'::SubMesh>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,`anonymous namespace'::SubMesh>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,`anonymous namespace'::SubMesh>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,`anonymous namespace'::SubMesh>>>::__rehash_unique[abi:nn180100](uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  size_t v21;
  void *v22;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v17 = (uint8x8_t)vcnt_s8(v4), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
    {
      v16 = std::__next_prime(v16);
    }
    else
    {
      v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2)
        v16 = v18;
    }
    if (prime <= v16)
      prime = v16;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v22 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v22)
        operator delete(v22);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v9 = a1 + 16;
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v10 = v8[1];
    v11 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v12 = v10 & v11;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v9;
      while (1)
      {
        v13 = (_QWORD *)*v8;
        if (!*v8)
          break;
        v14 = v13[1] & v11;
        if (v14 == v12)
        {
          v8 = (_QWORD *)*v8;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v14))
        {
          *v8 = *v13;
          v15 = 8 * v14;
          *v13 = **(_QWORD **)(*(_QWORD *)a1 + v15);
          **(_QWORD **)(*(_QWORD *)a1 + v15) = v13;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = v8;
          v8 = v13;
          v12 = v14;
        }
      }
      return;
    }
    if (v10 >= prime)
      v10 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v9;
    v19 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v21 = v19[1];
        if (v21 >= prime)
          v21 %= prime;
        if (v21 != v10)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v8;
            goto LABEL_32;
          }
          *v8 = *v19;
          v20 = 8 * v21;
          *v19 = **(_QWORD **)(*(_QWORD *)a1 + v20);
          **(_QWORD **)(*(_QWORD *)a1 + v20) = v19;
          v19 = v8;
        }
        v21 = v10;
LABEL_32:
        v8 = v19;
        v19 = (_QWORD *)*v19;
        v10 = v21;
      }
      while (v19);
    }
  }
}

char *std::unordered_map<unsigned int,`anonymous namespace'::SubMesh>::operator[](uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  void **v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v2 = a2;
      if (v6 <= a2)
        v2 = a2 % v6;
    }
    else
    {
      v2 = ((_DWORD)v6 - 1) & a2;
    }
    v8 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v8)
    {
      v9 = (char *)*v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = *((_QWORD *)v9 + 1);
            if (v11 == a2)
            {
              if (*((_DWORD *)v9 + 4) == a2)
                return v9 + 24;
            }
            else if ((v11 & (v6 - 1)) != v2)
            {
              goto LABEL_22;
            }
            v9 = *(char **)v9;
            if (!v9)
              goto LABEL_22;
          }
        }
        do
        {
          v10 = *((_QWORD *)v9 + 1);
          if (v10 == a2)
          {
            if (*((_DWORD *)v9 + 4) == a2)
              return v9 + 24;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v2)
              break;
          }
          v9 = *(char **)v9;
        }
        while (v9);
      }
    }
  }
LABEL_22:
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = v5;
  *((_DWORD *)v9 + 4) = a2;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *((_QWORD *)v9 + 7) = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v2 = v5 % v6;
      else
        v2 = v5;
    }
    else
    {
      v2 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v19)
  {
    *(_QWORD *)v9 = *v19;
LABEL_42:
    *v19 = v9;
    goto LABEL_43;
  }
  *(_QWORD *)v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v18 + 8 * v2) = a1 + 16;
  if (*(_QWORD *)v9)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v9 + 24;
}

void sub_19F66557C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:nn180100]<ggl::VSCommon::Mesh,char const(&)[26],std::shared_ptr<ggl::VertexDataTyped<ggl::VSCommon::Vertex>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::VSCommon::Mesh*>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15[2];
  uint64_t v16;
  std::__shared_weak_count *v17;

  v16 = a2;
  v17 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a4[1];
  v15[0] = *a4;
  v15[1] = (uint64_t)v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    ggl::VSCommon::Mesh::Mesh(a1, (uint64_t)"Munin View Synthesis Mesh", &v16, v15);
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 - 1, v8));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    ggl::VSCommon::Mesh::Mesh(a1, (uint64_t)"Munin View Synthesis Mesh", &v16, v15);
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

uint64_t std::construct_at[abi:nn180100]<md::mun::MuninViewMesh,std::shared_ptr<ggl::VSCommon::Mesh> &,gm::Range<unsigned long> const&,std::shared_ptr<ggl::Texture2D> const&,geo::RigidTransform<double,float> &,md::mun::MuninViewMesh*>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, _OWORD *a4, uint64_t *a5, __int128 *a6)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a5;
  v11 = (std::__shared_weak_count *)a5[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (a3)
  {
    v14 = (unint64_t *)&a3->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  if (v11)
  {
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_OWORD *)(a1 + 32) = *a4;
  v18 = *a6;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(a1 + 48) = v18;
  v19 = *((_QWORD *)a6 + 3);
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a6 + 8);
  *(_QWORD *)(a1 + 72) = v19;
  *(_DWORD *)(a1 + 84) = *((_DWORD *)a6 + 9);
  if (!v11)
    goto LABEL_17;
  v20 = (unint64_t *)&v11->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!a3)
      return a1;
  }
  else
  {
LABEL_17:
    if (!a3)
      return a1;
  }
  v22 = (unint64_t *)&a3->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
  return a1;
}

uint64_t std::__split_buffer<md::mun::MuninViewMesh>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    v4 = *(std::__shared_weak_count **)(i - 64);
    if (!v4)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(std::__shared_weak_count **)(i - 80);
      if (!v7)
        continue;
    }
    else
    {
LABEL_8:
      v7 = *(std::__shared_weak_count **)(i - 80);
      if (!v7)
        continue;
    }
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<ggl::VSCommon::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VSCommon::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VSCommon::Mesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VSCommon::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E07C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VSCommon::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E07C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VSCommon::Vertex>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::mun::MuninViewData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDCE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::mun::MuninViewData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDCE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::mun::MuninViewData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D9368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D9368;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  __float2 v23;
  __float2 v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  __int16 *v47;
  __int16 v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  int8x16_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  std::__shared_weak_count **v78;
  char *v79;
  unint64_t v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  std::__shared_weak_count **v97;
  char *v98;
  __int128 v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count **v101;
  char *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  __int128 v126;
  int8x16_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  uint64_t *v130;
  __int128 v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  __int128 v136;
  unint64_t v137;
  unint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v2 = **(_QWORD **)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 256);
  v129 = v2;
  if (*(_QWORD *)(v2 + 264) != v3)
  {
    v4 = 0;
    v121 = *a2;
    v123 = *a2;
    v5 = *(void ***)(a1 + 24);
    v125 = *(uint64_t **)(a1 + 16);
    do
    {
      v6 = v3 + 184 * v4;
      v9 = *(_QWORD *)(v6 + 80);
      v7 = (uint64_t *)(v6 + 80);
      v8 = v9;
      v130 = (uint64_t *)(v3 + 184 * v4);
      v10 = v130[11];
      v11 = (v10 - v9) / 12;
      v12 = operator new(0xF8uLL);
      v12[1] = 0;
      v13 = v12 + 1;
      v12[2] = 0;
      *v12 = &off_1E42E07C8;
      v14 = (uint64_t)(v12 + 3);
      ggl::BufferData::BufferData((uint64_t)(v12 + 3), 32, 0, 0, 6, v11);
      v12[3] = &off_1E42B8520;
      v12[29] = "";
      v12[30] = &ggl::VSCommon::vertexReflection;
      v12[28] = &unk_1E42B8540;
      v136 = 0uLL;
      v124 = v12;
      v15 = v12[4] * v11;
      if (v15)
      {
        if (!v121 || *((_BYTE *)v124 + 41) == 2)
          v16 = v124[12];
        else
          v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v121 + 56))(v121, v14, 0, v15, 1, 1);
      }
      else
      {
        v16 = 0;
      }
      *(_QWORD *)&v17 = v123;
      *((_QWORD *)&v17 + 1) = v14;
      v136 = v17;
      v137 = 0;
      v138 = v15;
      v140 = v16;
      v139 = 257;
      if (v10 != v8)
      {
        v18 = *v7;
        if (v11 <= 1)
          v19 = 1;
        else
          v19 = v11;
        v20 = (float *)(v18 + 8);
        v21 = (float *)(v16 + 16);
        v22 = (float *)(*(_QWORD *)(v3 + 184 * v4 + 104) + 4);
        do
        {
          v23 = __sincosf_stret(*(v20 - 2));
          v24 = __sincosf_stret(*(v20 - 1));
          v25 = *v20;
          v20 += 3;
          v26 = (float)(1.0 / v25) * v24.__cosval;
          *(v21 - 4) = v26 * v23.__cosval;
          *(v21 - 3) = v26 * v23.__sinval;
          *(v21 - 2) = -(float)(v24.__sinval * (float)(1.0 / v25));
          v27 = 1.0 - *v22;
          *v21 = *(v22 - 1);
          v21[1] = v27;
          v21 += 8;
          v22 += 2;
          --v19;
        }
        while (v19);
      }
      v122 = v4;
      v28 = v3 + 184 * v4;
      v31 = *(_QWORD *)(v28 + 128);
      v30 = *(_QWORD *)(v28 + 136);
      v29 = (uint64_t *)(v28 + 128);
      v32 = operator new(0xF8uLL);
      v32[1] = 0;
      v32[2] = 0;
      *v32 = &off_1E42DF1E8;
      ggl::BufferData::BufferData((uint64_t)(v32 + 3), 2, 1, 0, 6, (v30 - v31) >> 1);
      *((_DWORD *)v32 + 60) = 0;
      v32[4] = 2;
      v32[3] = &off_1E42B6B88;
      v32[28] = &unk_1E42B6BA8;
      v32[29] = "";
      v134 = v32 + 3;
      v135 = (std::__shared_weak_count *)v32;
      if (((v30 - v31) & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        if (!v121 || *((_BYTE *)v32 + 41) == 2)
          v33 = v32[12];
        else
          v33 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v121 + 56))(v121, v32 + 3, 0, (v30 - v31) & 0xFFFFFFFFFFFFFFFELL, 1, 1);
      }
      else
      {
        v33 = 0;
      }
      *(_QWORD *)&v34 = v123;
      *((_QWORD *)&v34 + 1) = v32 + 3;
      v131 = v34;
      v132 = (v30 - v31) & 0xFFFFFFFFFFFFFFFELL;
      v133 = v33;
      v35 = v125;
      if (v30 == v31)
        goto LABEL_36;
      v36 = *v29;
      if ((unint64_t)((v30 - v31) >> 1) <= 1)
        v37 = 1;
      else
        v37 = (v30 - v31) >> 1;
      if (v37 >= 0x10 && (unint64_t)(v33 - v36) > 0x1F)
      {
        v39 = v37 & 0xFFFFFFFFFFFFFFF0;
        v40 = (_OWORD *)(v33 + 16);
        v41 = (__int128 *)(v36 + 16);
        v42 = v37 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v43 = *v41;
          *(v40 - 1) = *(v41 - 1);
          *v40 = v43;
          v40 += 2;
          v41 += 2;
          v42 -= 16;
        }
        while (v42);
        if (v37 == v39)
          goto LABEL_36;
      }
      else
      {
        v39 = 0;
      }
      v44 = v37 - v39;
      v45 = 2 * v39;
      v46 = (_WORD *)(v33 + 2 * v39);
      v47 = (__int16 *)(v36 + v45);
      do
      {
        v48 = *v47++;
        *v46++ = v48;
        --v44;
      }
      while (v44);
LABEL_36:
      v49 = (std::__shared_weak_count *)operator new(0xA8uLL);
      v49->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      v49->__shared_weak_owners_ = 0;
      v49->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5110;
      v128 = v49 + 1;
      std::construct_at[abi:nn180100]<ggl::VSCommon::Mesh,char const(&)[26],std::shared_ptr<ggl::VertexDataTyped<ggl::VSCommon::Vertex>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::VSCommon::Mesh*>((uint64_t)&v49[1], v14, (std::__shared_weak_count *)v124, (uint64_t *)&v134);
      v51 = *v130;
      v52 = v130[1];
      if (v52 == *v130)
        goto LABEL_112;
      v53 = 0;
      while (2)
      {
        v55 = *(unsigned int *)(v51 + 24 * v53 + 16);
        v56 = *v35;
        if (v55 >= (v35[1] - *v35) >> 4)
          goto LABEL_40;
        v57 = *(_OWORD *)(v51 + 24 * v53);
        v141 = *(_OWORD *)(v129 + 152);
        v142 = *(_QWORD *)(v129 + 168);
        v58 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v129 + 176)), *(float64x2_t *)(v129 + 192));
        v60 = (char *)v5[1];
        v59 = (char *)v5[2];
        if (v60 < v59)
        {
          do
            v61 = __ldxr(p_shared_owners);
          while (__stxr(v61 + 1, p_shared_owners));
          v62 = *(_OWORD *)(v56 + 16 * v55);
          v63 = *(std::__shared_weak_count **)(v56 + 16 * v55 + 8);
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
            *(_QWORD *)v60 = v128;
            *((_QWORD *)v60 + 1) = v49;
            do
              v66 = __ldxr(p_shared_owners);
            while (__stxr(v66 + 1, p_shared_owners));
            *((_OWORD *)v60 + 1) = v62;
            v67 = (unint64_t *)&v63->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
            v69 = v141;
            *((_OWORD *)v60 + 2) = v57;
            *((_OWORD *)v60 + 3) = v69;
            *((_QWORD *)v60 + 8) = v142;
            v58.i64[1] = vextq_s8(v58, v58, 8uLL).u64[0];
            *(int8x16_t *)(v60 + 72) = v58;
            do
              v70 = __ldaxr(v67);
            while (__stlxr(v70 - 1, v67));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          else
          {
            *(_QWORD *)v60 = v128;
            *((_QWORD *)v60 + 1) = v49;
            do
              v76 = __ldxr(p_shared_owners);
            while (__stxr(v76 + 1, p_shared_owners));
            *((_OWORD *)v60 + 1) = v62;
            *((_OWORD *)v60 + 2) = v57;
            *((_OWORD *)v60 + 3) = v141;
            *((_QWORD *)v60 + 8) = v142;
            v58.i64[1] = vextq_s8(v58, v58, 8uLL).u64[0];
            *(int8x16_t *)(v60 + 72) = v58;
          }
          do
            v77 = __ldaxr(p_shared_owners);
          while (__stlxr(v77 - 1, p_shared_owners));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
          v54 = v60 + 88;
          v5[1] = v54;
          goto LABEL_39;
        }
        v71 = 0x2E8BA2E8BA2E8BA3 * ((v60 - (_BYTE *)*v5) >> 3);
        v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) > 0x2E8BA2E8BA2E8BALL)
          abort();
        v73 = 0x2E8BA2E8BA2E8BA3 * ((v59 - (_BYTE *)*v5) >> 3);
        if (2 * v73 > v72)
          v72 = 2 * v73;
        if (v73 >= 0x1745D1745D1745DLL)
          v74 = 0x2E8BA2E8BA2E8BALL;
        else
          v74 = v72;
        if (v74)
        {
          v126 = v57;
          v127 = v58;
          if (v74 > 0x2E8BA2E8BA2E8BALL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v75 = (char *)operator new(88 * v74);
          v57 = v126;
          v58 = v127;
        }
        else
        {
          v75 = 0;
        }
        v78 = (std::__shared_weak_count **)&v75[88 * v71];
        v79 = &v75[88 * v74];
        do
          v80 = __ldxr(p_shared_owners);
        while (__stxr(v80 + 1, p_shared_owners));
        v81 = *(_OWORD *)(v56 + 16 * v55);
        v82 = *(std::__shared_weak_count **)(v56 + 16 * v55 + 8);
        v83 = vextq_s8(v58, v58, 8uLL).u64[0];
        if (v82)
        {
          v84 = (unint64_t *)&v82->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
          *v78 = v128;
          v78[1] = v49;
          do
            v86 = __ldxr(p_shared_owners);
          while (__stxr(v86 + 1, p_shared_owners));
          *(_OWORD *)&v75[88 * v71 + 16] = v81;
          do
            v87 = __ldxr(v84);
          while (__stxr(v87 + 1, v84));
          v88 = &v75[88 * v71];
          v89 = v141;
          *((_OWORD *)v88 + 2) = v57;
          *((_OWORD *)v88 + 3) = v89;
          *((_QWORD *)v88 + 8) = v142;
          v58.i64[1] = v83;
          *(int8x16_t *)(v88 + 72) = v58;
          do
            v90 = __ldaxr(v84);
          while (__stlxr(v90 - 1, v84));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        else
        {
          *v78 = v128;
          v78[1] = v49;
          do
            v91 = __ldxr(p_shared_owners);
          while (__stxr(v91 + 1, p_shared_owners));
          v92 = &v75[88 * v71];
          *((_OWORD *)v92 + 1) = v81;
          *((_OWORD *)v92 + 2) = v57;
          *((_OWORD *)v92 + 3) = v141;
          *((_QWORD *)v92 + 8) = v142;
          v58.i64[1] = v83;
          *(int8x16_t *)(v92 + 72) = v58;
        }
        do
          v93 = __ldaxr(p_shared_owners);
        while (__stlxr(v93 - 1, p_shared_owners));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        v54 = v78 + 11;
        v94 = (char *)*v5;
        v95 = (char *)v5[1];
        if (v95 == *v5)
        {
          *v5 = v78;
          v5[1] = v54;
          v5[2] = v79;
          goto LABEL_109;
        }
        v96 = 0;
        do
        {
          v97 = &v78[v96 / 8];
          v98 = &v95[v96];
          *(_OWORD *)(v97 - 11) = *(_OWORD *)&v95[v96 - 88];
          *((_QWORD *)v98 - 11) = 0;
          *((_QWORD *)v98 - 10) = 0;
          *(_OWORD *)(v97 - 9) = *(_OWORD *)&v95[v96 - 72];
          *((_QWORD *)v98 - 9) = 0;
          *((_QWORD *)v98 - 8) = 0;
          *(_OWORD *)(v97 - 7) = *(_OWORD *)&v95[v96 - 56];
          v99 = *(_OWORD *)&v95[v96 - 40];
          *(v97 - 3) = *(std::__shared_weak_count **)&v95[v96 - 24];
          *(_OWORD *)(v97 - 5) = v99;
          v100 = *(std::__shared_weak_count **)&v95[v96 - 16];
          *((_DWORD *)v97 - 2) = *(_DWORD *)&v95[v96 - 8];
          *(v97 - 2) = v100;
          *((_DWORD *)v97 - 1) = *(_DWORD *)&v95[v96 - 4];
          v96 -= 88;
        }
        while (&v95[v96] != v94);
        v101 = &v78[v96 / 8];
        v102 = (char *)*v5;
        v95 = (char *)v5[1];
        *v5 = v101;
        v5[1] = v54;
        v5[2] = v79;
        if (v95 == v102)
          goto LABEL_109;
        do
        {
          v103 = (std::__shared_weak_count *)*((_QWORD *)v95 - 8);
          if (!v103)
            goto LABEL_100;
          v104 = (unint64_t *)&v103->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
            v106 = (std::__shared_weak_count *)*((_QWORD *)v95 - 10);
            if (!v106)
              goto LABEL_95;
          }
          else
          {
LABEL_100:
            v106 = (std::__shared_weak_count *)*((_QWORD *)v95 - 10);
            if (!v106)
              goto LABEL_95;
          }
          v107 = (unint64_t *)&v106->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
LABEL_95:
          v95 -= 88;
        }
        while (v95 != v102);
        v95 = v102;
LABEL_109:
        v35 = v125;
        if (v95)
          operator delete(v95);
LABEL_39:
        v5[1] = v54;
        v51 = *v130;
        v52 = v130[1];
LABEL_40:
        if (++v53 < 0xAAAAAAAAAAAAAAABLL * ((v52 - v51) >> 3))
          continue;
        break;
      }
      do
LABEL_112:
        v109 = __ldaxr(p_shared_owners);
      while (__stlxr(v109 - 1, p_shared_owners));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      if (v133 && v132 && (_QWORD)v131 && *(_BYTE *)(*((_QWORD *)&v131 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v131 + 64))();
      v110 = v135;
      if (!v135)
        goto LABEL_124;
      v111 = (unint64_t *)&v135->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
        if (v140)
          goto LABEL_125;
      }
      else
      {
LABEL_124:
        if (v140)
        {
LABEL_125:
          v114 = v137;
          v113 = v138;
          if (v138 != v137)
          {
            v115 = (_QWORD *)*((_QWORD *)&v136 + 1);
            v116 = v139;
            v117 = HIBYTE(v139);
            if ((_QWORD)v136 && *(_BYTE *)(*((_QWORD *)&v136 + 1) + 17) != 2)
              (*(void (**)(void))(*(_QWORD *)v136 + 64))();
            if (v116 && !v117)
            {
              v118 = v115[7];
              v119 = v115[8];
              if (v119 == v118)
                v118 = v115[10] - v115[9];
              if (v114 < v118)
                v118 = v114;
              if (v119 <= v113)
                v119 = v113;
              if (v119 == v118)
                v119 = v118 + v115[10] - v115[9];
              v115[7] = v118;
              v115[8] = v119;
            }
          }
        }
      }
      do
        v120 = __ldaxr(v13);
      while (__stlxr(v120 - 1, v13));
      if (!v120)
      {
        (*(void (**)(_QWORD *))(*v124 + 16))(v124);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v124);
      }
      v4 = v122 + 1;
      v3 = *(_QWORD *)(v129 + 256);
    }
    while (v122 + 1 < 0xD37A6F4DE9BD37A7 * ((*(_QWORD *)(v129 + 264) - v3) >> 3));
  }
}

void sub_19F666510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  unint64_t *v31;
  unint64_t v33;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a31);
  do
    v33 = __ldaxr(v31);
  while (__stlxr(v33 - 1, v31));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::RenderableMaterialData const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::RenderableMaterialData const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E427C6A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::RenderableMaterialData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427C6A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::RenderableMaterialData const&)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  int8x8_t *v12;
  uint64_t v13;
  uint64_t v16;
  _QWORD *v17;
  float *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  _QWORD *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  uint8x8_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  float v88;
  float v89;
  _BOOL8 v90;
  unint64_t v91;
  unint64_t v92;
  size_t prime;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint8x8_t v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v111;
  uint64_t v113;
  float v114;
  float v115;
  _BOOL8 v116;
  unint64_t v117;
  unint64_t v118;
  size_t v119;
  void *v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  size_t v125;
  size_t v126;
  size_t v127;
  _QWORD *v128;
  size_t v129;
  uint64_t v130;
  unint64_t v131;
  uint8x8_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  size_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint8x8_t v142;
  void **v143;
  float *v144;
  unint64_t v145;
  uint64_t v146;
  float v147;
  float v148;
  _BOOL8 v149;
  unint64_t v150;
  unint64_t v151;
  size_t v152;
  void *v153;
  void *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  size_t v158;
  size_t v159;
  size_t v160;
  _QWORD *v161;
  size_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint8x8_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  size_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  float **v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  uint8x8_t v183;
  _QWORD **v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  float v189;
  float v190;
  _BOOL8 v191;
  unint64_t v192;
  unint64_t v193;
  size_t v194;
  void *v195;
  void *v196;
  uint64_t v197;
  _QWORD *v198;
  size_t v199;
  size_t v200;
  size_t v201;
  _QWORD *v202;
  size_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint8x8_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  size_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  _WORD *v220;
  uint64_t v226;
  _QWORD *v227;
  uint64_t (***v228)();
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  _QWORD **v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  char v238;
  uint64_t (**v239)();
  __int128 v240;
  uint64_t (***v241)();
  _BYTE v242[24];
  _BYTE *v243;
  int v244;
  uint64_t v245;

  v245 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = *(_QWORD ***)(a1 + 32);
  v6 = **(_QWORD **)(a1 + 8);
  v239 = (uint64_t (**)())v4;
  v7 = *(_QWORD *)(v6 + 120);
  if (v4 >= (unint64_t)((*(_QWORD *)(v6 + 128) - v7) >> 3))
    goto LABEL_9;
  v8 = *(_QWORD *)(v7 + 8 * v4);
  if (!v8)
    goto LABEL_10;
  if (HIDWORD(v4) != HIDWORD(v8)
    || ((v9 = *(_QWORD *)(v6 + 144),
         v10 = (unint64_t *)(v9 + 8 * v8),
         v10 != *(unint64_t **)(v6 + 152))
      ? (_ZF = v9 == 0)
      : (_ZF = 1),
        _ZF))
  {
LABEL_9:
    v8 = 0;
  }
  else
  {
    v26 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v6 + 56, v4, &v239);
    ++v26[3];
    v8 = *v10;
  }
LABEL_10:
  v12 = *(int8x8_t **)v6;
  *(_OWORD *)v242 = v8;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v236, v12, (uint64_t *)v242, 0);
  v13 = v236;
  if (!v236)
    goto LABEL_444;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, float))(*(_QWORD *)v236 + 456))(&v235, v236, **(float **)(a1 + 16));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, float))(*(_QWORD *)v13 + 504))(&v234, v13, **(float **)(a1 + 16));
  if ((_BYTE)v235)
    _S8 = *((float *)&v235 + 1);
  else
    _S8 = 0.0;
  if ((_BYTE)v234)
    _S9 = *((float *)&v234 + 1);
  else
    _S9 = 1.0;
  v16 = **(_QWORD **)(a1 + 24);
  v17 = (_QWORD *)(v16 + 7848);
  v18 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((_QWORD *)(v16 + 7848), _S8, _S9);
  if (!v18 || (v19 = *((_QWORD *)v18 + 3)) == 0)
  {
    memset(v242, 0, sizeof(v242));
    v20 = *(_QWORD *)(v16 + 7720);
    v233 = v5;
    if (*(_QWORD *)(v16 + 7712) == v20)
    {
      v22 = (-1431655765 * ((*(_QWORD *)(v16 + 7768) - *(_QWORD *)(v16 + 7760)) >> 3)) | 0x100000000;
      v23 = *(uint64_t **)(v16 + 7744);
      v24 = *(_QWORD *)(v16 + 7752);
      if ((unint64_t)v23 >= v24)
      {
        v27 = *(char **)(v16 + 7736);
        v28 = ((char *)v23 - v27) >> 3;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          goto LABEL_451;
        v30 = v24 - (_QWORD)v27;
        if (v30 >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 61)
            goto LABEL_450;
          v32 = (char *)operator new(8 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = (uint64_t *)&v32[8 * v28];
        v34 = &v32[8 * v31];
        *v33 = v22;
        v25 = v33 + 1;
        if (v23 != (uint64_t *)v27)
        {
          v35 = (char *)v23 - v27 - 8;
          if (v35 < 0x58)
            goto LABEL_454;
          if ((unint64_t)(v27 - v32) < 0x20)
            goto LABEL_454;
          v36 = (v35 >> 3) + 1;
          v37 = &v32[8 * v28 - 16];
          v38 = v23 - 2;
          v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v40 = *(_OWORD *)v38;
            *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
            *(_OWORD *)v37 = v40;
            v37 -= 32;
            v38 -= 4;
            v39 -= 4;
          }
          while (v39);
          v33 -= v36 & 0x3FFFFFFFFFFFFFFCLL;
          v23 -= v36 & 0x3FFFFFFFFFFFFFFCLL;
          if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_454:
            do
            {
              v41 = *--v23;
              *--v33 = v41;
            }
            while (v23 != (uint64_t *)v27);
          }
          v23 = *(uint64_t **)(v16 + 7736);
        }
        *(_QWORD *)(v16 + 7736) = v33;
        *(_QWORD *)(v16 + 7744) = v25;
        *(_QWORD *)(v16 + 7752) = v34;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v23 = v22;
        v25 = v23 + 1;
      }
      *(_QWORD *)(v16 + 7744) = v25;
      v19 = *(v25 - 1);
    }
    else
    {
      v21 = *(_QWORD *)(v20 - 8);
      *(_QWORD *)(v16 + 7720) = v20 - 8;
      *(_DWORD *)(*(_QWORD *)(v16 + 7736) + 8 * v21) = -1431655765
                                                     * ((*(_QWORD *)(v16 + 7768) - *(_QWORD *)(v16 + 7760)) >> 3);
      *(_DWORD *)(*(_QWORD *)(v16 + 7736) + 8 * v21 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v16 + 7736)
                                                                                               + 8 * v21
                                                                                               + 4) << 32)
                                                          + 0x100000000) >> 32;
      v19 = v21 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v16 + 7736) + 8 * v21 + 4) << 32);
    }
    v42 = *(char **)(v16 + 7768);
    v43 = *(_QWORD *)(v16 + 7776);
    if ((unint64_t)v42 >= v43)
    {
      v48 = *(char **)(v16 + 7760);
      v49 = 0xAAAAAAAAAAAAAAABLL * ((v42 - v48) >> 3) + 1;
      if (v49 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_451;
      v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)v48) >> 3);
      if (2 * v50 > v49)
        v49 = 2 * v50;
      if (v50 >= 0x555555555555555)
        v51 = 0xAAAAAAAAAAAAAAALL;
      else
        v51 = v49;
      if (v51 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_450;
      v52 = (char *)operator new(24 * v51);
      v53 = &v52[8 * ((v42 - v48) >> 3)];
      *(_OWORD *)v53 = *(_OWORD *)v242;
      v54 = *(_QWORD *)&v242[16];
      *((_QWORD *)v53 + 2) = *(_QWORD *)&v242[16];
      if (v54)
      {
        v55 = (unint64_t *)(v54 + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
        v42 = *(char **)(v16 + 7768);
        v48 = *(char **)(v16 + 7760);
      }
      v57 = &v52[24 * v51];
      v47 = v53 + 24;
      if (v42 == v48)
      {
        *(_QWORD *)(v16 + 7760) = v53;
        *(_QWORD *)(v16 + 7768) = v47;
        *(_QWORD *)(v16 + 7776) = v57;
      }
      else
      {
        do
        {
          v58 = *(_OWORD *)(v42 - 24);
          v42 -= 24;
          *(_OWORD *)(v53 - 24) = v58;
          v53 -= 24;
          *((_QWORD *)v53 + 2) = *((_QWORD *)v42 + 2);
          *((_QWORD *)v42 + 1) = 0;
          *((_QWORD *)v42 + 2) = 0;
        }
        while (v42 != v48);
        v48 = *(char **)(v16 + 7760);
        v59 = *(char **)(v16 + 7768);
        *(_QWORD *)(v16 + 7760) = v53;
        *(_QWORD *)(v16 + 7768) = v47;
        *(_QWORD *)(v16 + 7776) = v57;
        while (v59 != v48)
        {
          v60 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
          if (v60)
          {
            p_shared_owners = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldaxr(p_shared_owners);
            while (__stlxr(v62 - 1, p_shared_owners));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v59 -= 24;
        }
      }
      if (v48)
        operator delete(v48);
    }
    else
    {
      *(_OWORD *)v42 = *(_OWORD *)v242;
      v44 = *(_QWORD *)&v242[16];
      *((_QWORD *)v42 + 2) = *(_QWORD *)&v242[16];
      if (v44)
      {
        v45 = (unint64_t *)(v44 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = v42 + 24;
    }
    *(_QWORD *)(v16 + 7768) = v47;
    v63 = *(_QWORD *)(v16 + 7792);
    v64 = *(_QWORD *)(v16 + 7800);
    if (v63 < v64)
    {
      *(_QWORD *)v63 = v19;
      v63 += 8;
      v65 = v63;
      goto LABEL_94;
    }
    v66 = *(_BYTE **)(v16 + 7784);
    v67 = (uint64_t)(v63 - (_QWORD)v66) >> 3;
    v68 = v67 + 1;
    if (!((unint64_t)(v67 + 1) >> 61))
    {
      v69 = v64 - (_QWORD)v66;
      if (v69 >> 2 > v68)
        v68 = v69 >> 2;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        if (v70 >> 61)
          goto LABEL_450;
        v71 = operator new(8 * v70);
      }
      else
      {
        v71 = 0;
      }
      v72 = &v71[8 * v67];
      v73 = &v71[8 * v70];
      *v72 = v19;
      v65 = (unint64_t)(v72 + 1);
      if ((_BYTE *)v63 != v66)
      {
        v74 = v63 - (_QWORD)v66 - 8;
        if (v74 < 0x58)
          goto LABEL_455;
        if ((unint64_t)(v66 - v71) < 0x20)
          goto LABEL_455;
        v75 = (v74 >> 3) + 1;
        v76 = &v71[8 * v67 - 16];
        v77 = (__int128 *)(v63 - 16);
        v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v79 = *v77;
          *(v76 - 1) = *(v77 - 1);
          *v76 = v79;
          v76 -= 2;
          v77 -= 2;
          v78 -= 4;
        }
        while (v78);
        v72 -= v75 & 0x3FFFFFFFFFFFFFFCLL;
        v63 -= 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_455:
          do
          {
            v80 = *(_QWORD *)(v63 - 8);
            v63 -= 8;
            *--v72 = v80;
          }
          while ((_BYTE *)v63 != v66);
        }
      }
      *(_QWORD *)(v16 + 7784) = v72;
      *(_QWORD *)(v16 + 7792) = v65;
      *(_QWORD *)(v16 + 7800) = v73;
      if (v66)
        operator delete(v66);
LABEL_94:
      v81 = (uint64_t *)(v16 + 7632);
      *(_QWORD *)(v16 + 7792) = v65;
      v82 = *(_QWORD *)(v16 + 7640);
      if (v82)
      {
        v83 = (uint8x8_t)vcnt_s8((int8x8_t)v82);
        v83.i16[0] = vaddlv_u8(v83);
        if (v83.u32[0] > 1uLL)
        {
          v65 = v19;
          if (v19 >= v82)
            v65 = v19 % v82;
        }
        else
        {
          v65 = (v82 - 1) & v19;
        }
        v84 = *(_QWORD **)(*v81 + 8 * v65);
        if (v84)
        {
          v85 = (_QWORD *)*v84;
          if (v85)
          {
            if (v83.u32[0] < 2uLL)
            {
              while (1)
              {
                v87 = v85[1];
                if (v87 == v19)
                {
                  if (v85[2] == v19)
                    goto LABEL_153;
                }
                else if ((v87 & (v82 - 1)) != v65)
                {
                  goto LABEL_115;
                }
                v85 = (_QWORD *)*v85;
                if (!v85)
                  goto LABEL_115;
              }
            }
            do
            {
              v86 = v85[1];
              if (v86 == v19)
              {
                if (v85[2] == v19)
                  goto LABEL_153;
              }
              else
              {
                if (v86 >= v82)
                  v86 %= v82;
                if (v86 != v65)
                  break;
              }
              v85 = (_QWORD *)*v85;
            }
            while (v85);
          }
        }
      }
LABEL_115:
      v63 = (unint64_t)operator new(0x30uLL);
      *(_QWORD *)v63 = 0;
      *(_QWORD *)(v63 + 8) = v19;
      *(_QWORD *)(v63 + 16) = v19;
      *(_OWORD *)(v63 + 24) = xmmword_19FFB3350;
      *(_BYTE *)(v63 + 40) = 0;
      v88 = (float)(unint64_t)(*(_QWORD *)(v16 + 7656) + 1);
      v89 = *(float *)(v16 + 7664);
      if (!v82 || (float)(v89 * (float)v82) < v88)
      {
        v90 = 1;
        if (v82 >= 3)
          v90 = (v82 & (v82 - 1)) != 0;
        v91 = v90 | (2 * v82);
        v92 = vcvtps_u32_f32(v88 / v89);
        if (v91 <= v92)
          prime = v92;
        else
          prime = v91;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v82 = *(_QWORD *)(v16 + 7640);
        }
        if (prime > v82)
          goto LABEL_127;
        if (prime < v82)
        {
          v94 = vcvtps_u32_f32((float)*(unint64_t *)(v16 + 7656) / *(float *)(v16 + 7664));
          if (v82 < 3 || (v95 = (uint8x8_t)vcnt_s8((int8x8_t)v82), v95.i16[0] = vaddlv_u8(v95), v95.u32[0] > 1uLL))
          {
            v94 = std::__next_prime(v94);
          }
          else
          {
            v96 = 1 << -(char)__clz(v94 - 1);
            if (v94 >= 2)
              v94 = v96;
          }
          if (prime <= v94)
            prime = v94;
          if (prime < v82)
LABEL_127:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v16 + 7632, prime);
        }
        v82 = *(_QWORD *)(v16 + 7640);
        if ((v82 & (v82 - 1)) != 0)
        {
          if (v19 >= v82)
            v65 = v19 % v82;
          else
            v65 = v19;
        }
        else
        {
          v65 = (v82 - 1) & v19;
        }
      }
      v97 = *v81;
      v98 = *(unint64_t **)(*v81 + 8 * v65);
      if (v98)
      {
        *(_QWORD *)v63 = *v98;
      }
      else
      {
        *(_QWORD *)v63 = *(_QWORD *)(v16 + 7648);
        *(_QWORD *)(v16 + 7648) = v63;
        *(_QWORD *)(v97 + 8 * v65) = v16 + 7648;
        if (!*(_QWORD *)v63)
        {
LABEL_152:
          ++*(_QWORD *)(v16 + 7656);
LABEL_153:
          v100 = *(std::__shared_weak_count **)&v242[16];
          if (*(_QWORD *)&v242[16])
          {
            v101 = (unint64_t *)(*(_QWORD *)&v242[16] + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          v103 = LODWORD(_S8);
          if (_S8 == 0.0)
            v103 = 0;
          v104 = LODWORD(_S9) - 0x61C8864680B583EBLL;
          if (_S9 == 0.0)
            v104 = 0x9E3779B97F4A7C15;
          v105 = ((v103 >> 2) + (v103 << 6) + v104) ^ v103;
          v106 = *(_QWORD *)(v16 + 7856);
          if (v106)
          {
            v107 = (uint8x8_t)vcnt_s8((int8x8_t)v106);
            v107.i16[0] = vaddlv_u8(v107);
            if (v107.u32[0] > 1uLL)
            {
              v63 = ((v103 >> 2) + (v103 << 6) + v104) ^ v103;
              if (v105 >= v106)
                v63 = v105 % v106;
            }
            else
            {
              v63 = v105 & (v106 - 1);
            }
            v108 = *(uint64_t **)(*v17 + 8 * v63);
            if (v108)
            {
              v109 = *v108;
              if (*v108)
              {
                if (v107.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v113 = *(_QWORD *)(v109 + 8);
                    if (v113 == v105)
                    {
                      if (*(float *)(v109 + 16) == _S8 && *(float *)(v109 + 20) == _S9)
                        goto LABEL_256;
                    }
                    else if ((v113 & (v106 - 1)) != v63)
                    {
                      goto LABEL_189;
                    }
                    v109 = *(_QWORD *)v109;
                    if (!v109)
                      goto LABEL_189;
                  }
                }
                do
                {
                  v111 = *(_QWORD *)(v109 + 8);
                  if (v111 == v105)
                  {
                    if (*(float *)(v109 + 16) == _S8 && *(float *)(v109 + 20) == _S9)
                      goto LABEL_256;
                  }
                  else
                  {
                    if (v111 >= v106)
                      v111 %= v106;
                    if (v111 != v63)
                      break;
                  }
                  v109 = *(_QWORD *)v109;
                }
                while (v109);
              }
            }
          }
LABEL_189:
          v109 = (uint64_t)operator new(0x20uLL);
          *(_QWORD *)v109 = 0;
          *(_QWORD *)(v109 + 8) = v105;
          *(float *)(v109 + 16) = _S8;
          *(float *)(v109 + 20) = _S9;
          *(_QWORD *)(v109 + 24) = 0;
          v114 = (float)(unint64_t)(*(_QWORD *)(v16 + 7872) + 1);
          v115 = *(float *)(v16 + 7880);
          if (v106 && (float)(v115 * (float)v106) >= v114)
          {
LABEL_246:
            v138 = (_QWORD *)*v17;
            v139 = *(uint64_t **)(*v17 + 8 * v63);
            if (v139)
            {
              *(_QWORD *)v109 = *v139;
            }
            else
            {
              *(_QWORD *)v109 = *(_QWORD *)(v16 + 7864);
              *(_QWORD *)(v16 + 7864) = v109;
              v138[v63] = v16 + 7864;
              if (!*(_QWORD *)v109)
              {
LABEL_255:
                ++*(_QWORD *)(v16 + 7872);
LABEL_256:
                *(_QWORD *)(v109 + 24) = v19;
                v141 = *(_QWORD *)(v16 + 7896);
                if (v141)
                {
                  v142 = (uint8x8_t)vcnt_s8((int8x8_t)v141);
                  v142.i16[0] = vaddlv_u8(v142);
                  if (v142.u32[0] > 1uLL)
                  {
                    v109 = v19;
                    if (v19 >= v141)
                      v109 = v19 % v141;
                  }
                  else
                  {
                    v109 = (v141 - 1) & v19;
                  }
                  v143 = *(void ***)(*(_QWORD *)(v16 + 7888) + 8 * v109);
                  if (v143)
                  {
                    v144 = (float *)*v143;
                    if (*v143)
                    {
                      if (v142.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v146 = *((_QWORD *)v144 + 1);
                          if (v146 == v19)
                          {
                            if (*((_QWORD *)v144 + 2) == v19)
                              goto LABEL_344;
                          }
                          else if ((v146 & (v141 - 1)) != v109)
                          {
                            goto LABEL_277;
                          }
                          v144 = *(float **)v144;
                          if (!v144)
                            goto LABEL_277;
                        }
                      }
                      do
                      {
                        v145 = *((_QWORD *)v144 + 1);
                        if (v145 == v19)
                        {
                          if (*((_QWORD *)v144 + 2) == v19)
                            goto LABEL_344;
                        }
                        else
                        {
                          if (v145 >= v141)
                            v145 %= v141;
                          if (v145 != v109)
                            break;
                        }
                        v144 = *(float **)v144;
                      }
                      while (v144);
                    }
                  }
                }
LABEL_277:
                v144 = (float *)operator new(0x20uLL);
                *(_QWORD *)v144 = 0;
                *((_QWORD *)v144 + 1) = v19;
                *((_QWORD *)v144 + 2) = v19;
                *((_QWORD *)v144 + 3) = 0;
                v147 = (float)(unint64_t)(*(_QWORD *)(v16 + 7912) + 1);
                v148 = *(float *)(v16 + 7920);
                if (v141 && (float)(v148 * (float)v141) >= v147)
                {
LABEL_334:
                  v173 = *(_QWORD *)(v16 + 7888);
                  v174 = *(float ***)(v173 + 8 * v109);
                  if (v174)
                  {
                    *(_QWORD *)v144 = *v174;
                  }
                  else
                  {
                    *(_QWORD *)v144 = *(_QWORD *)(v16 + 7904);
                    *(_QWORD *)(v16 + 7904) = v144;
                    *(_QWORD *)(v173 + 8 * v109) = v16 + 7904;
                    if (!*(_QWORD *)v144)
                      goto LABEL_343;
                    v175 = *(_QWORD *)(*(_QWORD *)v144 + 8);
                    if ((v141 & (v141 - 1)) != 0)
                    {
                      if (v175 >= v141)
                        v175 %= v141;
                    }
                    else
                    {
                      v175 &= v141 - 1;
                    }
                    v174 = (float **)(*(_QWORD *)(v16 + 7888) + 8 * v175);
                  }
                  *v174 = v144;
LABEL_343:
                  ++*(_QWORD *)(v16 + 7912);
LABEL_344:
                  v144[6] = _S8;
                  v144[7] = _S9;
                  v176 = **(_QWORD **)(a1 + 24);
                  v177 = *(_QWORD *)(v176 + 7736);
                  *(_QWORD *)v242 = v19;
                  v178 = *(_DWORD *)(v177 + 8 * v19);
                  v179 = *(_QWORD *)(v176 + 7760);
                  v180 = (_QWORD *)operator new();
                  v181 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v180, qword_1EE54A3C8, 2, 0, 6, 1);
                  v181[25] = ggl::DaVinci::MaterialStyle::reflection(void)::reflection;
                  *v181 = &off_1E42B9B70;
                  v182 = *(_QWORD *)(v176 + 7816);
                  if (v182)
                  {
                    v183 = (uint8x8_t)vcnt_s8((int8x8_t)v182);
                    v183.i16[0] = vaddlv_u8(v183);
                    if (v183.u32[0] > 1uLL)
                    {
                      v109 = v19;
                      if (v19 >= v182)
                        v109 = v19 % v182;
                    }
                    else
                    {
                      v109 = (v182 - 1) & v19;
                    }
                    v184 = *(_QWORD ***)(*(_QWORD *)(v176 + 7808) + 8 * v109);
                    if (v184)
                    {
                      v185 = *v184;
                      if (*v184)
                      {
                        if (v183.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v187 = v185[1];
                            if (v187 == v19)
                            {
                              if (v185[2] == v19)
                                goto LABEL_432;
                            }
                            else if ((v187 & (v182 - 1)) != v109)
                            {
                              goto LABEL_365;
                            }
                            v185 = (_QWORD *)*v185;
                            if (!v185)
                              goto LABEL_365;
                          }
                        }
                        do
                        {
                          v186 = v185[1];
                          if (v186 == v19)
                          {
                            if (v185[2] == v19)
                              goto LABEL_432;
                          }
                          else
                          {
                            if (v186 >= v182)
                              v186 %= v182;
                            if (v186 != v109)
                              break;
                          }
                          v185 = (_QWORD *)*v185;
                        }
                        while (v185);
                      }
                    }
                  }
LABEL_365:
                  v185 = operator new(0x20uLL);
                  v188 = (_QWORD *)(v176 + 7824);
                  *v185 = 0;
                  v185[1] = v19;
                  v185[2] = v19;
                  v185[3] = 0;
                  v189 = (float)(unint64_t)(*(_QWORD *)(v176 + 7832) + 1);
                  v190 = *(float *)(v176 + 7840);
                  if (v182 && (float)(v190 * (float)v182) >= v189)
                  {
LABEL_422:
                    v214 = *(_QWORD *)(v176 + 7808);
                    v215 = *(_QWORD **)(v214 + 8 * v109);
                    if (v215)
                    {
                      *v185 = *v215;
                    }
                    else
                    {
                      *v185 = *v188;
                      *v188 = v185;
                      *(_QWORD *)(v214 + 8 * v109) = v188;
                      if (!*v185)
                        goto LABEL_431;
                      v216 = *(_QWORD *)(*v185 + 8);
                      if ((v182 & (v182 - 1)) != 0)
                      {
                        if (v216 >= v182)
                          v216 %= v182;
                      }
                      else
                      {
                        v216 &= v182 - 1;
                      }
                      v215 = (_QWORD *)(*(_QWORD *)(v176 + 7808) + 8 * v216);
                    }
                    *v215 = v185;
LABEL_431:
                    ++*(_QWORD *)(v176 + 7832);
LABEL_432:
                    v217 = v185[3];
                    v185[3] = v180;
                    if (v217)
                      (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
                    v218 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>> const&>,std::tuple<>>(v176 + 7632, *(unint64_t *)v242, v242);
                    ++v218[3];
                    *(_QWORD *)(v179 + 24 * v178) = v180;
                    v219 = v180[1];
                    v220 = (_WORD *)v180[9];
                    __asm
                    {
                      FCVT            H0, S8
                      FCVT            H1, S9
                    }
                    *v220 = _H0;
                    v220[1] = _H1;
                    if (v180[8] > v219)
                      v219 = v180[8];
                    v180[7] = 0;
                    v180[8] = v219;
                    v5 = v233;
                    goto LABEL_437;
                  }
                  v191 = 1;
                  if (v182 >= 3)
                    v191 = (v182 & (v182 - 1)) != 0;
                  v192 = v191 | (2 * v182);
                  v193 = vcvtps_u32_f32(v189 / v190);
                  if (v192 <= v193)
                    v194 = v193;
                  else
                    v194 = v192;
                  if (v194 == 1)
                  {
                    v194 = 2;
                  }
                  else if ((v194 & (v194 - 1)) != 0)
                  {
                    v194 = std::__next_prime(v194);
                    v182 = *(_QWORD *)(v176 + 7816);
                  }
                  if (v194 <= v182)
                  {
                    if (v194 >= v182)
                      goto LABEL_417;
                    v206 = vcvtps_u32_f32((float)*(unint64_t *)(v176 + 7832) / *(float *)(v176 + 7840));
                    if (v182 < 3
                      || (v207 = (uint8x8_t)vcnt_s8((int8x8_t)v182), v207.i16[0] = vaddlv_u8(v207), v207.u32[0] > 1uLL))
                    {
                      v206 = std::__next_prime(v206);
                    }
                    else
                    {
                      v208 = 1 << -(char)__clz(v206 - 1);
                      if (v206 >= 2)
                        v206 = v208;
                    }
                    if (v194 <= v206)
                      v194 = v206;
                    if (v194 >= v182)
                      goto LABEL_417;
                    if (!v194)
                    {
                      v213 = *(void **)(v176 + 7808);
                      *(_QWORD *)(v176 + 7808) = 0;
                      if (v213)
                        operator delete(v213);
                      *(_QWORD *)(v176 + 7816) = 0;
                      goto LABEL_417;
                    }
                  }
                  if (!(v194 >> 61))
                  {
                    v195 = operator new(8 * v194);
                    v196 = *(void **)(v176 + 7808);
                    *(_QWORD *)(v176 + 7808) = v195;
                    if (v196)
                      operator delete(v196);
                    v197 = 0;
                    *(_QWORD *)(v176 + 7816) = v194;
                    do
                      *(_QWORD *)(*(_QWORD *)(v176 + 7808) + 8 * v197++) = 0;
                    while (v194 != v197);
                    v198 = (_QWORD *)*v188;
                    if (!*v188)
                      goto LABEL_417;
                    v199 = v198[1];
                    v200 = v194 - 1;
                    if ((v194 & (v194 - 1)) == 0)
                    {
                      v201 = v199 & v200;
                      *(_QWORD *)(*(_QWORD *)(v176 + 7808) + 8 * v201) = v188;
                      while (1)
                      {
                        v202 = (_QWORD *)*v198;
                        if (!*v198)
                          break;
                        v203 = v202[1] & v200;
                        if (v203 == v201)
                        {
                          v198 = (_QWORD *)*v198;
                        }
                        else
                        {
                          v204 = *(_QWORD *)(v176 + 7808);
                          if (*(_QWORD *)(v204 + 8 * v203))
                          {
                            *v198 = *v202;
                            v205 = 8 * v203;
                            *v202 = **(_QWORD **)(*(_QWORD *)(v176 + 7808) + v205);
                            **(_QWORD **)(*(_QWORD *)(v176 + 7808) + v205) = v202;
                          }
                          else
                          {
                            *(_QWORD *)(v204 + 8 * v203) = v198;
                            v198 = v202;
                            v201 = v203;
                          }
                        }
                      }
LABEL_417:
                      v182 = *(_QWORD *)(v176 + 7816);
                      if ((v182 & (v182 - 1)) != 0)
                      {
                        if (v19 >= v182)
                          v109 = v19 % v182;
                        else
                          v109 = v19;
                      }
                      else
                      {
                        v109 = (v182 - 1) & v19;
                      }
                      goto LABEL_422;
                    }
                    if (v199 >= v194)
                      v199 %= v194;
                    *(_QWORD *)(*(_QWORD *)(v176 + 7808) + 8 * v199) = v188;
                    v209 = (_QWORD *)*v198;
                    if (!*v198)
                      goto LABEL_417;
                    while (1)
                    {
                      v211 = v209[1];
                      if (v211 >= v194)
                        v211 %= v194;
                      if (v211 != v199)
                      {
                        v212 = *(_QWORD *)(v176 + 7808);
                        if (!*(_QWORD *)(v212 + 8 * v211))
                        {
                          *(_QWORD *)(v212 + 8 * v211) = v198;
                          goto LABEL_403;
                        }
                        *v198 = *v209;
                        v210 = 8 * v211;
                        *v209 = **(_QWORD **)(*(_QWORD *)(v176 + 7808) + v210);
                        **(_QWORD **)(*(_QWORD *)(v176 + 7808) + v210) = v209;
                        v209 = v198;
                      }
                      v211 = v199;
LABEL_403:
                      v198 = v209;
                      v209 = (_QWORD *)*v209;
                      v199 = v211;
                      if (!v209)
                        goto LABEL_417;
                    }
                  }
LABEL_450:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                v149 = 1;
                if (v141 >= 3)
                  v149 = (v141 & (v141 - 1)) != 0;
                v150 = v149 | (2 * v141);
                v151 = vcvtps_u32_f32(v147 / v148);
                if (v150 <= v151)
                  v152 = v151;
                else
                  v152 = v150;
                if (v152 == 1)
                {
                  v152 = 2;
                }
                else if ((v152 & (v152 - 1)) != 0)
                {
                  v152 = std::__next_prime(v152);
                  v141 = *(_QWORD *)(v16 + 7896);
                }
                if (v152 <= v141)
                {
                  if (v152 >= v141)
                    goto LABEL_329;
                  v165 = vcvtps_u32_f32((float)*(unint64_t *)(v16 + 7912) / *(float *)(v16 + 7920));
                  if (v141 < 3
                    || (v166 = (uint8x8_t)vcnt_s8((int8x8_t)v141), v166.i16[0] = vaddlv_u8(v166), v166.u32[0] > 1uLL))
                  {
                    v165 = std::__next_prime(v165);
                  }
                  else
                  {
                    v167 = 1 << -(char)__clz(v165 - 1);
                    if (v165 >= 2)
                      v165 = v167;
                  }
                  if (v152 <= v165)
                    v152 = v165;
                  if (v152 >= v141)
                    goto LABEL_329;
                  if (!v152)
                  {
                    v172 = *(void **)(v16 + 7888);
                    *(_QWORD *)(v16 + 7888) = 0;
                    if (v172)
                      operator delete(v172);
                    *(_QWORD *)(v16 + 7896) = 0;
                    goto LABEL_329;
                  }
                }
                if (v152 >> 61)
                  goto LABEL_450;
                v153 = operator new(8 * v152);
                v154 = *(void **)(v16 + 7888);
                *(_QWORD *)(v16 + 7888) = v153;
                if (v154)
                  operator delete(v154);
                v155 = 0;
                *(_QWORD *)(v16 + 7896) = v152;
                do
                  *(_QWORD *)(*(_QWORD *)(v16 + 7888) + 8 * v155++) = 0;
                while (v152 != v155);
                v156 = *(_QWORD **)(v16 + 7904);
                if (!v156)
                  goto LABEL_329;
                v157 = v16 + 7904;
                v158 = v156[1];
                v159 = v152 - 1;
                if ((v152 & (v152 - 1)) == 0)
                {
                  v160 = v158 & v159;
                  *(_QWORD *)(*(_QWORD *)(v16 + 7888) + 8 * v160) = v157;
                  while (1)
                  {
                    v161 = (_QWORD *)*v156;
                    if (!*v156)
                      break;
                    v162 = v161[1] & v159;
                    if (v162 == v160)
                    {
                      v156 = (_QWORD *)*v156;
                    }
                    else
                    {
                      v163 = *(_QWORD *)(v16 + 7888);
                      if (*(_QWORD *)(v163 + 8 * v162))
                      {
                        *v156 = *v161;
                        v164 = 8 * v162;
                        *v161 = **(_QWORD **)(*(_QWORD *)(v16 + 7888) + v164);
                        **(_QWORD **)(*(_QWORD *)(v16 + 7888) + v164) = v161;
                      }
                      else
                      {
                        *(_QWORD *)(v163 + 8 * v162) = v156;
                        v156 = v161;
                        v160 = v162;
                      }
                    }
                  }
LABEL_329:
                  v141 = *(_QWORD *)(v16 + 7896);
                  if ((v141 & (v141 - 1)) != 0)
                  {
                    if (v19 >= v141)
                      v109 = v19 % v141;
                    else
                      v109 = v19;
                  }
                  else
                  {
                    v109 = (v141 - 1) & v19;
                  }
                  goto LABEL_334;
                }
                if (v158 >= v152)
                  v158 %= v152;
                *(_QWORD *)(*(_QWORD *)(v16 + 7888) + 8 * v158) = v157;
                v168 = (_QWORD *)*v156;
                if (!*v156)
                  goto LABEL_329;
                while (1)
                {
                  v170 = v168[1];
                  if (v170 >= v152)
                    v170 %= v152;
                  if (v170 != v158)
                  {
                    v171 = *(_QWORD *)(v16 + 7888);
                    if (!*(_QWORD *)(v171 + 8 * v170))
                    {
                      *(_QWORD *)(v171 + 8 * v170) = v156;
                      goto LABEL_315;
                    }
                    *v156 = *v168;
                    v169 = 8 * v170;
                    *v168 = **(_QWORD **)(*(_QWORD *)(v16 + 7888) + v169);
                    **(_QWORD **)(*(_QWORD *)(v16 + 7888) + v169) = v168;
                    v168 = v156;
                  }
                  v170 = v158;
LABEL_315:
                  v156 = v168;
                  v168 = (_QWORD *)*v168;
                  v158 = v170;
                  if (!v168)
                    goto LABEL_329;
                }
              }
              v140 = *(_QWORD *)(*(_QWORD *)v109 + 8);
              if ((v106 & (v106 - 1)) != 0)
              {
                if (v140 >= v106)
                  v140 %= v106;
              }
              else
              {
                v140 &= v106 - 1;
              }
              v139 = (uint64_t *)(*v17 + 8 * v140);
            }
            *v139 = v109;
            goto LABEL_255;
          }
          v116 = 1;
          if (v106 >= 3)
            v116 = (v106 & (v106 - 1)) != 0;
          v117 = v116 | (2 * v106);
          v118 = vcvtps_u32_f32(v114 / v115);
          if (v117 <= v118)
            v119 = v118;
          else
            v119 = v117;
          if (v119 == 1)
          {
            v119 = 2;
          }
          else if ((v119 & (v119 - 1)) != 0)
          {
            v119 = std::__next_prime(v119);
            v106 = *(_QWORD *)(v16 + 7856);
          }
          if (v119 <= v106)
          {
            if (v119 >= v106)
              goto LABEL_241;
            v131 = vcvtps_u32_f32((float)*(unint64_t *)(v16 + 7872) / *(float *)(v16 + 7880));
            if (v106 < 3
              || (v132 = (uint8x8_t)vcnt_s8((int8x8_t)v106), v132.i16[0] = vaddlv_u8(v132), v132.u32[0] > 1uLL))
            {
              v131 = std::__next_prime(v131);
            }
            else
            {
              v133 = 1 << -(char)__clz(v131 - 1);
              if (v131 >= 2)
                v131 = v133;
            }
            if (v119 <= v131)
              v119 = v131;
            if (v119 >= v106)
              goto LABEL_241;
            if (!v119)
            {
              v137 = (_QWORD *)*v17;
              *v17 = 0;
              if (v137)
                operator delete(v137);
              *(_QWORD *)(v16 + 7856) = 0;
              goto LABEL_241;
            }
          }
          if (v119 >> 61)
            goto LABEL_450;
          v120 = operator new(8 * v119);
          v121 = (_QWORD *)*v17;
          *v17 = v120;
          if (v121)
            operator delete(v121);
          v122 = 0;
          *(_QWORD *)(v16 + 7856) = v119;
          do
            *(_QWORD *)(*v17 + 8 * v122++) = 0;
          while (v119 != v122);
          v123 = *(_QWORD **)(v16 + 7864);
          if (!v123)
            goto LABEL_241;
          v124 = v16 + 7864;
          v125 = v123[1];
          v126 = v119 - 1;
          if ((v119 & (v119 - 1)) == 0)
          {
            v127 = v125 & v126;
            *(_QWORD *)(*v17 + 8 * v127) = v124;
            while (1)
            {
              v128 = (_QWORD *)*v123;
              if (!*v123)
                break;
              v129 = v128[1] & v126;
              if (v129 == v127)
              {
                v123 = (_QWORD *)*v123;
              }
              else if (*(_QWORD *)(*v17 + 8 * v129))
              {
                *v123 = *v128;
                v130 = 8 * v129;
                *v128 = **(_QWORD **)(*v17 + v130);
                **(_QWORD **)(*v17 + v130) = v128;
              }
              else
              {
                *(_QWORD *)(*v17 + 8 * v129) = v123;
                v123 = v128;
                v127 = v129;
              }
            }
LABEL_241:
            v106 = *(_QWORD *)(v16 + 7856);
            if ((v106 & (v106 - 1)) != 0)
            {
              if (v105 >= v106)
                v63 = v105 % v106;
              else
                v63 = v105;
            }
            else
            {
              v63 = (v106 - 1) & v105;
            }
            goto LABEL_246;
          }
          if (v125 >= v119)
            v125 %= v119;
          *(_QWORD *)(*v17 + 8 * v125) = v124;
          v134 = (_QWORD *)*v123;
          if (!*v123)
            goto LABEL_241;
          while (1)
          {
            v136 = v134[1];
            if (v136 >= v119)
              v136 %= v119;
            if (v136 != v125)
            {
              if (!*(_QWORD *)(*v17 + 8 * v136))
              {
                *(_QWORD *)(*v17 + 8 * v136) = v123;
                goto LABEL_227;
              }
              *v123 = *v134;
              v135 = 8 * v136;
              *v134 = **(_QWORD **)(*v17 + v135);
              **(_QWORD **)(*v17 + v135) = v134;
              v134 = v123;
            }
            v136 = v125;
LABEL_227:
            v123 = v134;
            v134 = (_QWORD *)*v134;
            v125 = v136;
            if (!v134)
              goto LABEL_241;
          }
        }
        v99 = *(_QWORD *)(*(_QWORD *)v63 + 8);
        if ((v82 & (v82 - 1)) != 0)
        {
          if (v99 >= v82)
            v99 %= v82;
        }
        else
        {
          v99 &= v82 - 1;
        }
        v98 = (unint64_t *)(*v81 + 8 * v99);
      }
      *v98 = v63;
      goto LABEL_152;
    }
LABEL_451:
    abort();
  }
LABEL_437:
  v226 = *(_QWORD *)ecs2::Runtime::_localEntity();
  v227 = *v5;
  v239 = &off_1E4281880;
  *(_QWORD *)&v240 = v19;
  *((_QWORD *)&v240 + 1) = v226;
  v241 = &v239;
  v243 = v242;
  *(_QWORD *)v242 = &off_1E4281880;
  *(_OWORD *)&v242[8] = v240;
  v244 = 0;
  ecs2::Runtime::queueCommand(v227, (uint64_t)v242);
  if (v244 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v244])(&v238, v242);
  v244 = -1;
  v228 = v241;
  if (v241 == &v239)
  {
    v229 = 4;
    v228 = &v239;
    goto LABEL_443;
  }
  if (v241)
  {
    v229 = 5;
LABEL_443:
    (*v228)[v229]();
  }
LABEL_444:
  v230 = v237;
  if (v237)
  {
    v231 = (unint64_t *)&v237->__shared_owners_;
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
}

void sub_19F667D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _QWORD *v19;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v21 = v19[3];
  v19[3] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  operator delete(v19);
  if (a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialStyleConstantDataHandle>(gdc::Entity,md::ls::MaterialStyleConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialStyleConstantDataHandle>(gdc::Entity,md::ls::MaterialStyleConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281880;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialStyleConstantDataHandle>(gdc::Entity,md::ls::MaterialStyleConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281880;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialStyleConstantDataHandle>(gdc::Entity,md::ls::MaterialStyleConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::MaterialStyleConstantDataHandle>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

uint64_t gdc::Registry::storage<md::ls::MaterialStyleConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8DB28088BB3C2FE3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8DB28088BB3C2FE3;
      if (*(_QWORD *)&v3 <= 0x8DB28088BB3C2FE3)
        v5 = 0x8DB28088BB3C2FE3 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8DB28088BB3C2FE3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8DB28088BB3C2FE3)
            {
              if (v7[2] == 0x8DB28088BB3C2FE3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8DB28088BB3C2FE3)
          {
            if (v7[2] == 0x8DB28088BB3C2FE3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MaterialStyleConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273F08;
  *(_QWORD *)(v11 + 8) = 0x8DB28088BB3C2FE3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8DB28088BB3C2FE3, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8DB28088BB3C2FE3;
  v15[1] = "md::ls::MaterialStyleConstantDataHandle]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8DB28088BB3C2FE3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6682B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MaterialStyleConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialStyleConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialStyleConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialStyleConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::SandboxBaseMapEngineMode::~SandboxBaseMapEngineMode(md::SandboxBaseMapEngineMode *this)
{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
}

{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::SandboxBaseMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v3 = *(uint64_t **)(a2 + 1128);
  v4 = *v3;
  v5 = v3[1];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = v4;
    while (*(_BYTE *)v6 != 5)
    {
      v6 += 16;
      if (v6 == v5)
        goto LABEL_31;
    }
  }
  if (v6 != v5)
  {
    if (*(_QWORD *)(v6 + 8))
    {
      v7 = (int8x8_t)a3[1];
      if (v7)
      {
        v8 = (uint8x8_t)vcnt_s8(v7);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          v9 = 41;
          if (*(_QWORD *)&v7 <= 0x29uLL)
            v9 = 0x29u % a3[1];
        }
        else
        {
          v9 = (v7.i32[0] - 1) & 0x29;
        }
        v10 = *(uint64_t ***)(*a3 + 8 * v9);
        if (v10)
        {
          v11 = *v10;
          if (v11)
          {
            if (v8.u32[0] < 2uLL)
            {
              v12 = *(_QWORD *)&v7 - 1;
              while (1)
              {
                v14 = v11[1];
                if (v14 == 41)
                {
                  if (*((_BYTE *)v11 + 16) == 41)
                    goto LABEL_29;
                }
                else if ((v14 & v12) != v9)
                {
                  goto LABEL_31;
                }
                v11 = (uint64_t *)*v11;
                if (!v11)
                  goto LABEL_31;
              }
            }
            do
            {
              v13 = v11[1];
              if (v13 == 41)
              {
                if (*((_BYTE *)v11 + 16) == 41)
                {
LABEL_29:
                  if (*((_BYTE *)v11 + 17) == 2)
                    *((_BYTE *)v11 + 17) = 1;
                  break;
                }
              }
              else
              {
                if (v13 >= *(_QWORD *)&v7)
                  v13 %= *(_QWORD *)&v7;
                if (v13 != v9)
                  break;
              }
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
    }
  }
LABEL_31:
  if (v4 != v5)
  {
    while (*(_BYTE *)v4 != 5)
    {
      v4 += 16;
      if (v4 == v5)
        return;
    }
  }
  if (v4 != v5)
  {
    if (*(_QWORD *)(v4 + 8))
    {
      v15 = (int8x8_t)a3[1];
      if (v15)
      {
        v16 = (uint8x8_t)vcnt_s8(v15);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v17 = 42;
          if (*(_QWORD *)&v15 <= 0x2AuLL)
            v17 = 0x2Au % a3[1];
        }
        else
        {
          v17 = (v15.i32[0] - 1) & 0x2ALL;
        }
        v18 = *(uint64_t ***)(*a3 + 8 * v17);
        if (v18)
        {
          v19 = *v18;
          if (v19)
          {
            if (v16.u32[0] < 2uLL)
            {
              v20 = *(_QWORD *)&v15 - 1;
              while (1)
              {
                v22 = v19[1];
                if (v22 == 42)
                {
                  if (*((_BYTE *)v19 + 16) == 42)
                    goto LABEL_58;
                }
                else if ((v22 & v20) != v17)
                {
                  return;
                }
                v19 = (uint64_t *)*v19;
                if (!v19)
                  return;
              }
            }
            do
            {
              v21 = v19[1];
              if (v21 == 42)
              {
                if (*((_BYTE *)v19 + 16) == 42)
                {
LABEL_58:
                  if (*((_BYTE *)v19 + 17) == 2)
                    *((_BYTE *)v19 + 17) = 1;
                  return;
                }
              }
              else
              {
                if (v21 >= *(_QWORD *)&v15)
                  v21 %= *(_QWORD *)&v15;
                if (v21 != v17)
                  return;
              }
              v19 = (uint64_t *)*v19;
            }
            while (v19);
          }
        }
      }
    }
  }
}

void md::SandboxBaseMapEngineMode::applyMapDataTypeSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  if (!*(_QWORD *)(a2 + 1128))
    goto LABEL_123;
  if (*(_BYTE *)(a1 + 568))
    v3 = 7;
  else
    v3 = 2;
  v4 = (int8x8_t)a3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_100;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = 11;
    if (*(_QWORD *)&v4 <= 0xBuLL)
      v7 = 0xBu % a3[1];
  }
  else
  {
    v7 = (v4.i32[0] - 1) & 0xBLL;
  }
  v8 = *(uint64_t ***)(*a3 + 8 * v7);
  if (!v8)
    goto LABEL_30;
  v9 = *v8;
  if (!v9)
    goto LABEL_30;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 11)
      {
        if (*((_WORD *)v9 + 8) == 11)
          goto LABEL_26;
      }
      else if ((v11 & (*(_QWORD *)&v4 - 1)) != v7)
      {
        goto LABEL_28;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_28;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 11)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v7)
      goto LABEL_28;
LABEL_15:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_28;
  }
  if (*((_WORD *)v9 + 8) != 11)
    goto LABEL_15;
LABEL_26:
  if (*((_BYTE *)v9 + 18) == 2)
  {
    *(_DWORD *)((char *)v9 + 18) = (v3 << 16) | 2;
    v4 = (int8x8_t)a3[1];
  }
LABEL_28:
  if (!*(_QWORD *)&v4)
    goto LABEL_100;
  v12 = (uint8x8_t)vcnt_s8(v4);
  v12.i16[0] = vaddlv_u8(v12);
  v6 = v12.u32[0];
LABEL_30:
  if (v6 > 1)
  {
    v13 = 12;
    if (*(_QWORD *)&v4 <= 0xCuLL)
      v13 = 0xCu % v4.u8[0];
  }
  else
  {
    v13 = (v4.i8[0] - 1) & 0xC;
  }
  v14 = *(uint64_t ***)(*a3 + 8 * v13);
  if (!v14)
    goto LABEL_54;
  v15 = *v14;
  if (!v15)
    goto LABEL_54;
  if (v6 < 2)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 12)
      {
        if (*((_WORD *)v15 + 8) == 12)
          goto LABEL_50;
      }
      else if ((v17 & (*(_QWORD *)&v4 - 1)) != v13)
      {
        goto LABEL_52;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_52;
    }
  }
  while (2)
  {
    v16 = v15[1];
    if (v16 != 12)
    {
      if (v16 >= *(_QWORD *)&v4)
        v16 %= *(_QWORD *)&v4;
      if (v16 != v13)
        goto LABEL_52;
      goto LABEL_39;
    }
    if (*((_WORD *)v15 + 8) != 12)
    {
LABEL_39:
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_52;
      continue;
    }
    break;
  }
LABEL_50:
  if (*((_BYTE *)v15 + 18) == 2)
  {
    *(_DWORD *)((char *)v15 + 18) = (v3 << 16) | 2;
    v4 = (int8x8_t)a3[1];
  }
LABEL_52:
  if (!*(_QWORD *)&v4)
    goto LABEL_100;
  v18 = (uint8x8_t)vcnt_s8(v4);
  v18.i16[0] = vaddlv_u8(v18);
  v6 = v18.u32[0];
LABEL_54:
  if (v6 > 1)
  {
    v19 = 71;
    if (*(_QWORD *)&v4 <= 0x47uLL)
      v19 = 0x47u % v4.u8[0];
  }
  else
  {
    v19 = (v4.i32[0] - 1) & 0x47;
  }
  v20 = *(uint64_t ***)(*a3 + 8 * v19);
  if (!v20)
    goto LABEL_78;
  v21 = *v20;
  if (!v21)
    goto LABEL_78;
  if (v6 < 2)
  {
    while (1)
    {
      v23 = v21[1];
      if (v23 == 71)
      {
        if (*((_WORD *)v21 + 8) == 71)
          goto LABEL_74;
      }
      else if ((v23 & (*(_QWORD *)&v4 - 1)) != v19)
      {
        goto LABEL_76;
      }
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_76;
    }
  }
  while (2)
  {
    v22 = v21[1];
    if (v22 != 71)
    {
      if (v22 >= *(_QWORD *)&v4)
        v22 %= *(_QWORD *)&v4;
      if (v22 != v19)
        goto LABEL_76;
      goto LABEL_63;
    }
    if (*((_WORD *)v21 + 8) != 71)
    {
LABEL_63:
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_76;
      continue;
    }
    break;
  }
LABEL_74:
  if (*((_BYTE *)v21 + 18) == 2)
  {
    *(_DWORD *)((char *)v21 + 18) = (v3 << 16) | 2;
    v4 = (int8x8_t)a3[1];
  }
LABEL_76:
  if (v4)
  {
    v24 = (uint8x8_t)vcnt_s8(v4);
    v24.i16[0] = vaddlv_u8(v24);
    v6 = v24.u32[0];
LABEL_78:
    if (v6 > 1)
    {
      v25 = 72;
      if (*(_QWORD *)&v4 <= 0x48uLL)
        v25 = 0x48u % v4.u8[0];
    }
    else
    {
      v25 = (v4.i32[0] - 1) & 0x48;
    }
    v26 = *(uint64_t ***)(*a3 + 8 * v25);
    if (!v26)
      goto LABEL_100;
    v27 = *v26;
    if (!v27)
      goto LABEL_100;
    if (v6 < 2)
    {
      v28 = *(_QWORD *)&v4 - 1;
      while (1)
      {
        v30 = v27[1];
        if (v30 == 72)
        {
          if (*((_WORD *)v27 + 8) == 72)
            goto LABEL_98;
        }
        else if ((v30 & v28) != v25)
        {
          goto LABEL_100;
        }
        v27 = (uint64_t *)*v27;
        if (!v27)
          goto LABEL_100;
      }
    }
    do
    {
      v29 = v27[1];
      if (v29 == 72)
      {
        if (*((_WORD *)v27 + 8) == 72)
        {
LABEL_98:
          if (*((_BYTE *)v27 + 18) == 2)
            *(_DWORD *)((char *)v27 + 18) = (v3 << 16) | 2;
          break;
        }
      }
      else
      {
        if (v29 >= *(_QWORD *)&v4)
          v29 %= *(_QWORD *)&v4;
        if (v29 != v25)
          break;
      }
      v27 = (uint64_t *)*v27;
    }
    while (v27);
  }
LABEL_100:
  if (*(_BYTE *)(a1 + 568))
  {
    v31 = (int8x8_t)a3[1];
    if (v31)
    {
      v32 = (uint8x8_t)vcnt_s8(v31);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        v33 = 81;
        if (*(_QWORD *)&v31 <= 0x51uLL)
          v33 = 0x51u % a3[1];
      }
      else
      {
        v33 = (v31.i32[0] - 1) & 0x51;
      }
      v34 = *(uint64_t ***)(*a3 + 8 * v33);
      if (v34)
      {
        v35 = *v34;
        if (v35)
        {
          if (v32.u32[0] < 2uLL)
          {
            v36 = *(_QWORD *)&v31 - 1;
            while (1)
            {
              v38 = v35[1];
              if (v38 == 81)
              {
                if (*((_WORD *)v35 + 8) == 81)
                  goto LABEL_122;
              }
              else if ((v38 & v36) != v33)
              {
                goto LABEL_123;
              }
              v35 = (uint64_t *)*v35;
              if (!v35)
                goto LABEL_123;
            }
          }
          do
          {
            v37 = v35[1];
            if (v37 == 81)
            {
              if (*((_WORD *)v35 + 8) == 81)
              {
LABEL_122:
                *(_DWORD *)((char *)v35 + 18) = (*((unsigned __int16 *)v35 + 10) << 16) | 1;
                break;
              }
            }
            else
            {
              if (v37 >= *(_QWORD *)&v31)
                v37 %= *(_QWORD *)&v31;
              if (v37 != v33)
                break;
            }
            v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
      }
    }
  }
LABEL_123:
  md::MapEngineMode::applyMapDataTypeSettings(a1, a2, a3);
}

_QWORD *md::SandboxBaseMapEngineMode::didBecomeActive(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  NSObject *v16;
  int v17;
  int8x8_t *v18;
  int8x8_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  _QWORD *v47;
  uint64_t v48;
  int8x8_t *v49;
  int8x8_t v50;
  uint8x8_t v51;
  uint64_t v52;
  int8x8_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  __int16 v63;
  int8x8_t *v64;
  int8x8_t v65;
  uint8x8_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  int8x8_t *v75;
  int8x8_t v76;
  uint8x8_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  int v86;
  uint8_t *v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  __int16 v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  _WORD *v98;
  _WORD *v99;
  _QWORD *result;
  int8x8_t *v101;
  int8x8_t v102;
  uint8x8_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint8_t *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[3];
  _QWORD *v125;
  char v126;
  uint8_t buf[8];
  std::__shared_weak_count *v128;
  uint8_t *v129;
  char v130;
  _QWORD v131[3];
  _QWORD *v132;
  char v133;
  _QWORD v134[3];
  _QWORD *v135;
  char v136;
  _QWORD v137[3];
  _QWORD *v138;
  _QWORD v139[4];

  v139[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 576) = a2[150];
  md::CartographicMapEngineMode::didBecomeActive(a1, (uint64_t)a2, a3, a4);
  v7 = *(_QWORD *)(a3 + 856);
  v8 = *(_QWORD *)(v7 + 40);
  v9 = *(_QWORD *)(v7 + 48) - v8;
  if (v9 > 0x1AF)
  {
    v11 = *(_QWORD *)(v8 + 424);
    v10 = *(_QWORD *)(v8 + 80);
    if (v11)
    {
      v12 = *(unsigned __int8 *)(a1 + 600);
      if (*(unsigned __int8 *)(v11 + 33) != v12)
      {
        *(_BYTE *)(v11 + 33) = v12;
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v13 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          v14 = *(unsigned __int8 *)(v11 + 33);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v14;
          _os_log_impl(&dword_19F029000, v13, OS_LOG_TYPE_INFO, "[FeatureFlag]FlyoverRenderLayer:%d", buf, 8u);
        }

      }
    }
    goto LABEL_11;
  }
  if (v9 >= 0x58)
  {
    v10 = *(_QWORD *)(v8 + 80);
LABEL_11:
    if (v10)
    {
      v15 = *(unsigned __int8 *)(a1 + 600);
      if (*(unsigned __int8 *)(v10 + 33) != v15)
      {
        *(_BYTE *)(v10 + 33) = v15;
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v16 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          v17 = *(unsigned __int8 *)(v10 + 33);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v17;
          _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_INFO, "[FeatureFlag]GlobeRasterRenderLayer:%d", buf, 8u);
        }

      }
    }
  }
  v18 = (int8x8_t *)a2[140];
  v19 = v18[2];
  if (!*(_QWORD *)&v19)
    goto LABEL_52;
  v20 = (uint8x8_t)vcnt_s8(v19);
  v20.i16[0] = vaddlv_u8(v20);
  v21 = v20.u32[0];
  if (v20.u32[0] > 1uLL)
  {
    v22 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v19 <= 0x2FED70A4459DFCA1uLL)
      v22 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v19;
  }
  else
  {
    v22 = (*(_QWORD *)&v19 - 1) & 0x2FED70A4459DFCA1;
  }
  v23 = *(_QWORD **)(*(_QWORD *)&v18[1] + 8 * v22);
  if (v23)
  {
    v24 = (_QWORD *)*v23;
    if (v24)
    {
      if (v20.u32[0] < 2uLL)
      {
        while (1)
        {
          v26 = v24[1];
          if (v26 == 0x2FED70A4459DFCA1)
          {
            if (v24[2] == 0x2FED70A4459DFCA1)
              goto LABEL_39;
          }
          else if ((v26 & (*(_QWORD *)&v19 - 1)) != v22)
          {
            goto LABEL_48;
          }
          v24 = (_QWORD *)*v24;
          if (!v24)
            goto LABEL_48;
        }
      }
      while (1)
      {
        v25 = v24[1];
        if (v25 == 0x2FED70A4459DFCA1)
        {
          if (v24[2] == 0x2FED70A4459DFCA1)
          {
LABEL_39:
            v27 = v24[5];
            if (v27)
            {
              v28 = (uint64_t *)a2[141];
              v29 = *v28;
              v30 = v28[1];
              if (v29 != v30)
              {
                while (*(_BYTE *)v29 != 21)
                {
                  v29 += 16;
                  if (v29 == v30)
                    goto LABEL_46;
                }
              }
              if (v29 == v30)
LABEL_46:
                v31 = 0;
              else
                v31 = *(_QWORD *)(v29 + 8);
              md::StyleLogic::setGroundMode(v27, v31 != 0);
              v18 = (int8x8_t *)a2[140];
              v19 = v18[2];
            }
LABEL_48:
            if (v19)
            {
              v32 = (uint8x8_t)vcnt_s8(v19);
              v32.i16[0] = vaddlv_u8(v32);
              v21 = v32.u32[0];
              break;
            }
LABEL_52:
            v34 = 0;
            MEMORY[0x8C] = 0;
            MEMORY[0x8D] = 0;
            goto LABEL_88;
          }
        }
        else
        {
          if (v25 >= *(_QWORD *)&v19)
            v25 %= *(_QWORD *)&v19;
          if (v25 != v22)
            goto LABEL_48;
        }
        v24 = (_QWORD *)*v24;
        if (!v24)
          goto LABEL_48;
      }
    }
  }
  if (v21 > 1)
  {
    v33 = 0x91E65CD7F1A7A7FALL;
    if (*(_QWORD *)&v19 <= 0x91E65CD7F1A7A7FALL)
      v33 = 0x91E65CD7F1A7A7FALL % *(_QWORD *)&v19;
  }
  else
  {
    v33 = (*(_QWORD *)&v19 - 1) & 0x91E65CD7F1A7A7FALL;
  }
  v35 = v18[1];
  v36 = *(_QWORD **)(*(_QWORD *)&v35 + 8 * v33);
  if (v36 && (v37 = (_QWORD *)*v36) != 0)
  {
    if (v21 >= 2)
    {
      while (v37[1] != 0x91E65CD7F1A7A7FALL || v37[2] != 0x91E65CD7F1A7A7FALL)
        v37 = (_QWORD *)*v37;
    }
    else
    {
      while (v37[1] != 0x91E65CD7F1A7A7FALL || v37[2] != 0x91E65CD7F1A7A7FALL)
        v37 = (_QWORD *)*v37;
    }
    v38 = v37[5];
    *(_BYTE *)(v38 + 140) = 0;
    v39 = v38 + 141;
  }
  else
  {
    MEMORY[0x8C] = 0;
    v39 = 141;
  }
  *(_BYTE *)v39 = 0;
  if (v21 > 1)
  {
    v40 = 0xAF46DE79C836B0D8;
    if (*(_QWORD *)&v19 <= 0xAF46DE79C836B0D8)
      v40 = 0xAF46DE79C836B0D8 % *(_QWORD *)&v19;
  }
  else
  {
    v40 = (*(_QWORD *)&v19 - 1) & 0xAF46DE79C836B0D8;
  }
  v41 = *(_QWORD **)(*(_QWORD *)&v35 + 8 * v40);
  if (!v41 || (v42 = (_QWORD *)*v41) == 0)
  {
LABEL_87:
    v34 = 0;
    goto LABEL_88;
  }
  if (v21 < 2)
  {
    v43 = *(_QWORD *)&v19 - 1;
    while (1)
    {
      v45 = v42[1];
      if (v45 == 0xAF46DE79C836B0D8)
      {
        if (v42[2] == 0xAF46DE79C836B0D8)
          goto LABEL_238;
      }
      else if ((v45 & v43) != v40)
      {
        goto LABEL_87;
      }
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_87;
    }
  }
  while (1)
  {
    v44 = v42[1];
    if (v44 == 0xAF46DE79C836B0D8)
      break;
    if (v44 >= *(_QWORD *)&v19)
      v44 %= *(_QWORD *)&v19;
    if (v44 != v40)
      goto LABEL_87;
LABEL_77:
    v42 = (_QWORD *)*v42;
    if (!v42)
      goto LABEL_87;
  }
  if (v42[2] != 0xAF46DE79C836B0D8)
    goto LABEL_77;
LABEL_238:
  v34 = v42[5];
LABEL_88:
  *(_DWORD *)(v34 + 324) = 17826054;
  v46 = (std::__shared_weak_count *)a2[112];
  if (v46)
    md::World::setEnableGlobe(v46[1].__shared_owners_, v46[1].__shared_weak_owners_, *(_BYTE *)(a1 + 568));
  *(_BYTE *)(v34 + 328) = 3;
  v134[0] = &off_1E42D25A8;
  v134[1] = v46;
  v135 = v134;
  v136 = 1;
  std::__optional_storage_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false> const&>((_QWORD *)(v34 + 336), (uint64_t)v134);
  if (v136)
  {
    v47 = v135;
    if (v135 == v134)
    {
      v48 = 4;
      v47 = v134;
LABEL_95:
      (*(void (**)(void))(*v47 + 8 * v48))();
    }
    else if (v135)
    {
      v48 = 5;
      goto LABEL_95;
    }
  }
  v49 = (int8x8_t *)a2[140];
  v50 = v49[2];
  v51 = (uint8x8_t)vcnt_s8(v50);
  v51.i16[0] = vaddlv_u8(v51);
  if (v51.u32[0] > 1uLL)
  {
    v52 = 0x4BD0C73E70A08DDBuLL % *(_QWORD *)&v50;
    if (*(_QWORD *)&v50 > 0x4BD0C73E70A08DDBuLL)
      v52 = 0x4BD0C73E70A08DDBLL;
  }
  else
  {
    v52 = (*(_QWORD *)&v50 - 1) & 0x4BD0C73E70A08DDBLL;
  }
  v53 = v49[1];
  v54 = *(_QWORD **)(*(_QWORD *)&v53 + 8 * v52);
  if (!v54 || (v55 = (_QWORD *)*v54) == 0)
  {
LABEL_115:
    v58 = 0;
    goto LABEL_116;
  }
  if (v51.u32[0] < 2uLL)
  {
    while (1)
    {
      v57 = v55[1];
      if (v57 == 0x4BD0C73E70A08DDBLL)
      {
        if (v55[2] == 0x4BD0C73E70A08DDBLL)
          goto LABEL_231;
      }
      else if ((v57 & (*(_QWORD *)&v50 - 1)) != v52)
      {
        goto LABEL_115;
      }
      v55 = (_QWORD *)*v55;
      if (!v55)
        goto LABEL_115;
    }
  }
  while (2)
  {
    v56 = v55[1];
    if (v56 != 0x4BD0C73E70A08DDBLL)
    {
      if (v56 >= *(_QWORD *)&v50)
        v56 %= *(_QWORD *)&v50;
      if (v56 != v52)
        goto LABEL_115;
      goto LABEL_105;
    }
    if (v55[2] != 0x4BD0C73E70A08DDBLL)
    {
LABEL_105:
      v55 = (_QWORD *)*v55;
      if (!v55)
        goto LABEL_115;
      continue;
    }
    break;
  }
LABEL_231:
  v58 = v55[5];
LABEL_116:
  if (v51.u32[0] >= 2uLL)
  {
    v60 = 0xE3FE7D96C51342ALL;
    if (*(_QWORD *)&v50 <= 0xE3FE7D96C51342AuLL)
      v60 = 0xE3FE7D96C51342AuLL % *(_QWORD *)&v50;
    v59 = *(_QWORD **)(*(_QWORD *)&v53 + 8 * v60);
    do
    {
      do
        v59 = (_QWORD *)*v59;
      while (v59[1] != 0xE3FE7D96C51342ALL);
    }
    while (v59[2] != 0xE3FE7D96C51342ALL);
  }
  else
  {
    v59 = *(_QWORD **)(*(_QWORD *)&v53 + 8 * ((*(_QWORD *)&v50 - 1) & 0xE3FE7D96C51342ALL));
    do
    {
      do
        v59 = (_QWORD *)*v59;
      while (v59[1] != 0xE3FE7D96C51342ALL);
    }
    while (v59[2] != 0xE3FE7D96C51342ALL);
  }
  *(_BYTE *)(v59[5] + 808) = a2[150] != 1;
  v131[0] = &off_1E427AA88;
  v131[1] = v58;
  v132 = v131;
  v133 = 1;
  std::__optional_storage_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false> const&>((_QWORD *)(v34 + 376), (uint64_t)v131);
  if (v133)
  {
    v61 = v132;
    if (v132 == v131)
    {
      v62 = 4;
      v61 = v131;
LABEL_131:
      (*(void (**)(void))(*v61 + 8 * v62))();
    }
    else if (v132)
    {
      v62 = 5;
      goto LABEL_131;
    }
  }
  *(_BYTE *)(*(_QWORD *)(v34 + 136) + 48) = 1;
  *(_BYTE *)(*(_QWORD *)(v34 + 184) + 48) = 1;
  *(_BYTE *)(*(_QWORD *)(v34 + 192) + 48) = 1;
  if (*(_BYTE *)(a1 + 568))
    v63 = 7;
  else
    v63 = 2;
  v64 = (int8x8_t *)a2[140];
  v65 = v64[2];
  if (v65)
  {
    v66 = (uint8x8_t)vcnt_s8(v65);
    v66.i16[0] = vaddlv_u8(v66);
    if (v66.u32[0] > 1uLL)
    {
      v67 = 0xC267A080D338C6A1;
      if (*(_QWORD *)&v65 <= 0xC267A080D338C6A1)
        v67 = 0xC267A080D338C6A1 % *(_QWORD *)&v65;
    }
    else
    {
      v67 = (*(_QWORD *)&v65 - 1) & 0xC267A080D338C6A1;
    }
    v68 = *(_QWORD **)(*(_QWORD *)&v64[1] + 8 * v67);
    if (v68)
    {
      v69 = (_QWORD *)*v68;
      if (v69)
      {
        if (v66.u32[0] < 2uLL)
        {
          v70 = *(_QWORD *)&v65 - 1;
          while (1)
          {
            v72 = v69[1];
            if (v72 == 0xC267A080D338C6A1)
            {
              if (v69[2] == 0xC267A080D338C6A1)
                goto LABEL_234;
            }
            else if ((v72 & v70) != v67)
            {
              goto LABEL_155;
            }
            v69 = (_QWORD *)*v69;
            if (!v69)
              goto LABEL_155;
          }
        }
        do
        {
          v71 = v69[1];
          if (v71 == 0xC267A080D338C6A1)
          {
            if (v69[2] == 0xC267A080D338C6A1)
            {
LABEL_234:
              v73 = v69[5];
              goto LABEL_156;
            }
          }
          else
          {
            if (v71 >= *(_QWORD *)&v65)
              v71 %= *(_QWORD *)&v65;
            if (v71 != v67)
              break;
          }
          v69 = (_QWORD *)*v69;
        }
        while (v69);
      }
    }
  }
LABEL_155:
  v73 = 0;
LABEL_156:
  v74 = (float *)(v73 + 208);
  std::__hash_table<md::TileSelectionTileSetType,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>>::__emplace_unique_key_args<md::TileSelectionTileSetType,md::TileSelectionTileSetType const&>((float *)(v73 + 208), v63, v63);
  v75 = (int8x8_t *)a2[140];
  v76 = v75[2];
  if (!*(_QWORD *)&v76)
    goto LABEL_176;
  v77 = (uint8x8_t)vcnt_s8(v76);
  v77.i16[0] = vaddlv_u8(v77);
  if (v77.u32[0] > 1uLL)
  {
    v78 = 0x4AC7AB7561675F6;
    if (*(_QWORD *)&v76 <= 0x4AC7AB7561675F6uLL)
      v78 = 0x4AC7AB7561675F6uLL % *(_QWORD *)&v76;
  }
  else
  {
    v78 = (*(_QWORD *)&v76 - 1) & 0x4AC7AB7561675F6;
  }
  v79 = *(_QWORD **)(*(_QWORD *)&v75[1] + 8 * v78);
  if (!v79 || (v80 = (_QWORD *)*v79) == 0)
  {
LABEL_176:
    v84 = 0;
    goto LABEL_177;
  }
  if (v77.u32[0] < 2uLL)
  {
    v81 = *(_QWORD *)&v76 - 1;
    while (1)
    {
      v83 = v80[1];
      if (v83 == 0x4AC7AB7561675F6)
      {
        if (v80[2] == 0x4AC7AB7561675F6)
          goto LABEL_235;
      }
      else if ((v83 & v81) != v78)
      {
        goto LABEL_176;
      }
      v80 = (_QWORD *)*v80;
      if (!v80)
        goto LABEL_176;
    }
  }
  while (2)
  {
    v82 = v80[1];
    if (v82 != 0x4AC7AB7561675F6)
    {
      if (v82 >= *(_QWORD *)&v76)
        v82 %= *(_QWORD *)&v76;
      if (v82 != v78)
        goto LABEL_176;
      goto LABEL_166;
    }
    if (v80[2] != 0x4AC7AB7561675F6)
    {
LABEL_166:
      v80 = (_QWORD *)*v80;
      if (!v80)
        goto LABEL_176;
      continue;
    }
    break;
  }
LABEL_235:
  v84 = v80[5];
LABEL_177:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = objc_msgSend(v85, "flyoverDrapeGrid");

  if (v86)
  {
    std::__hash_table<md::TileSelectionTileSetType,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>>::__emplace_unique_key_args<md::TileSelectionTileSetType,md::TileSelectionTileSetType const&>(v74, 1u, 1);
    std::__hash_table<md::TileSelectionTileSetType,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>>::__emplace_unique_key_args<md::TileSelectionTileSetType,md::TileSelectionTileSetType const&>(v74, 8u, 8);
  }
  *(_QWORD *)buf = &off_1E427AAD0;
  v129 = buf;
  v130 = 1;
  std::__optional_storage_base<std::function<BOOL ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<BOOL ()(void)>,false> const&>((_QWORD *)(v84 + 144), (uint64_t)buf);
  if (v130)
  {
    v87 = v129;
    if (v129 == buf)
    {
      v88 = 4;
      v87 = buf;
LABEL_184:
      (*(void (**)(void))(*(_QWORD *)v87 + 8 * v88))();
    }
    else if (v129)
    {
      v88 = 5;
      goto LABEL_184;
    }
  }
  *(_QWORD *)buf = &off_1E427AB18;
  v129 = buf;
  v130 = 1;
  std::__optional_storage_base<std::function<BOOL ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<BOOL ()(void)>,false> const&>((_QWORD *)(v84 + 184), (uint64_t)buf);
  if (v130)
  {
    v89 = v129;
    if (v129 == buf)
    {
      v90 = 4;
      v89 = buf;
LABEL_190:
      (*(void (**)(void))(*(_QWORD *)v89 + 8 * v90))();
    }
    else if (v129)
    {
      v90 = 5;
      goto LABEL_190;
    }
  }
  v91 = *(_QWORD *)(v7 + 40);
  if ((unint64_t)(*(_QWORD *)(v7 + 48) - v91) >= 0x18)
    v92 = *(_QWORD *)(v91 + 16);
  else
    v92 = 0;
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v93, "standardCommandBufferSelector");
  v94 = v128;
  v95 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)buf + 8) + 8);
  if (v128)
  {
    p_shared_owners = (unint64_t *)&v128->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }

  v98 = *(_WORD **)(v92 + 8);
  v99 = *(_WORD **)(v92 + 24);
  if (v99 == v98)
  {
    if (v99)
    {
      *(_QWORD *)(v92 + 16) = v99;
      operator delete(v99);
      *(_QWORD *)(v92 + 8) = 0;
      *(_QWORD *)(v92 + 16) = 0;
      *(_QWORD *)(v92 + 24) = 0;
    }
    v98 = operator new(2uLL);
    *(_QWORD *)(v92 + 8) = v98;
    *(_QWORD *)(v92 + 24) = v98 + 1;
  }
  *v98 = v95;
  result = v98 + 1;
  *(_QWORD *)(v92 + 16) = result;
  *(_WORD *)(v92 + 57) = v95;
  v101 = (int8x8_t *)a2[140];
  v102 = v101[2];
  if (!*(_QWORD *)&v102)
    goto LABEL_223;
  v103 = (uint8x8_t)vcnt_s8(v102);
  v103.i16[0] = vaddlv_u8(v103);
  if (v103.u32[0] > 1uLL)
  {
    v104 = 0x17767EADC5B287BLL;
    if (*(_QWORD *)&v102 <= 0x17767EADC5B287BuLL)
      v104 = 0x17767EADC5B287BuLL % *(_QWORD *)&v102;
  }
  else
  {
    v104 = (*(_QWORD *)&v102 - 1) & 0x17767EADC5B287BLL;
  }
  v105 = *(_QWORD **)(*(_QWORD *)&v101[1] + 8 * v104);
  if (!v105 || (v106 = (_QWORD *)*v105) == 0)
  {
LABEL_223:
    v110 = 0;
    goto LABEL_224;
  }
  if (v103.u32[0] < 2uLL)
  {
    v107 = *(_QWORD *)&v102 - 1;
    while (1)
    {
      v109 = v106[1];
      if (v109 == 0x17767EADC5B287BLL)
      {
        if (v106[2] == 0x17767EADC5B287BLL)
          goto LABEL_236;
      }
      else if ((v109 & v107) != v104)
      {
        goto LABEL_223;
      }
      v106 = (_QWORD *)*v106;
      if (!v106)
        goto LABEL_223;
    }
  }
  while (2)
  {
    v108 = v106[1];
    if (v108 != 0x17767EADC5B287BLL)
    {
      if (v108 >= *(_QWORD *)&v102)
        v108 %= *(_QWORD *)&v102;
      if (v108 != v104)
        goto LABEL_223;
      goto LABEL_213;
    }
    if (v106[2] != 0x17767EADC5B287BLL)
    {
LABEL_213:
      v106 = (_QWORD *)*v106;
      if (!v106)
        goto LABEL_223;
      continue;
    }
    break;
  }
LABEL_236:
  v110 = v106[5];
LABEL_224:
  *(_OWORD *)(v110 + 224) = 0u;
  *(_OWORD *)(v110 + 240) = 0u;
  *(_OWORD *)(v110 + 192) = 0u;
  *(_OWORD *)(v110 + 208) = 0u;
  *(_OWORD *)(v110 + 176) = 0u;
  if (!*(_BYTE *)(a1 + 568))
    return result;
  *(_QWORD *)buf = &off_1E427AB60;
  v128 = v46;
  v129 = buf;
  v130 = 1;
  v111 = (_QWORD *)(a1 + 496);
  if (!*(_BYTE *)(a1 + 528))
  {
    *(_QWORD *)(a1 + 520) = v111;
    std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::__clone((uint64_t)buf, (_QWORD *)(a1 + 496));
    *(_BYTE *)(a1 + 528) = 1;
    goto LABEL_247;
  }
  v138 = v137;
  std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::__clone((uint64_t)buf, v137);
  if (v111 == v137)
  {
LABEL_240:
    v113 = v138;
    goto LABEL_241;
  }
  v112 = v138;
  v113 = *(_QWORD **)(a1 + 520);
  if (v138 != v137)
  {
    if (v113 != v111)
    {
      v138 = *(_QWORD **)(a1 + 520);
      *(_QWORD *)(a1 + 520) = v112;
      goto LABEL_241;
    }
    v113 = v137;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 496) + 24))(a1 + 496, v137);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 520) + 32))(*(_QWORD *)(a1 + 520));
    *(_QWORD *)(a1 + 520) = v138;
    v138 = v137;
    v114 = 4;
LABEL_245:
    (*(void (**)(_QWORD *))(*v113 + 8 * v114))(v113);
    goto LABEL_246;
  }
  if (v113 == v111)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v137[0] + 24))(v137, v139);
    (*(void (**)(_QWORD *))(*v138 + 32))(v138);
    v138 = 0;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 520) + 24))(*(_QWORD *)(a1 + 520), v137);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 520) + 32))(*(_QWORD *)(a1 + 520));
    *(_QWORD *)(a1 + 520) = 0;
    v138 = v137;
    (*(void (**)(_QWORD *, uint64_t))(v139[0] + 24))(v139, a1 + 496);
    (*(void (**)(_QWORD *))(v139[0] + 32))(v139);
    *(_QWORD *)(a1 + 520) = v111;
    goto LABEL_240;
  }
  (*(void (**)(_QWORD *, uint64_t))(v137[0] + 24))(v137, a1 + 496);
  (*(void (**)(_QWORD *))(*v138 + 32))(v138);
  v113 = *(_QWORD **)(a1 + 520);
  v138 = v113;
  *(_QWORD *)(a1 + 520) = v111;
LABEL_241:
  if (v113 == v137)
  {
    v114 = 4;
    v113 = v137;
    goto LABEL_245;
  }
  if (v113)
  {
    v114 = 5;
    goto LABEL_245;
  }
LABEL_246:
  if (v130)
  {
LABEL_247:
    v115 = v129;
    if (v129 == buf)
    {
      v116 = 4;
      v115 = buf;
LABEL_251:
      (*(void (**)(void))(*(_QWORD *)v115 + 8 * v116))();
    }
    else if (v129)
    {
      v116 = 5;
      goto LABEL_251;
    }
  }
  if (*(_BYTE *)(a1 + 592))
    *(_BYTE *)(a1 + 592) = 0;
  v124[0] = &off_1E427ABA8;
  v124[1] = a1;
  v125 = v124;
  v126 = 1;
  md::ElevationLogic::setElevationAdjustmentFeedback((_QWORD *)v110, (uint64_t)v124);
  if (v126)
  {
    v117 = v125;
    if (v125 == v124)
    {
      v118 = 4;
      v117 = v124;
LABEL_259:
      (*(void (**)(void))(*v117 + 8 * v118))();
    }
    else if (v125)
    {
      v118 = 5;
      goto LABEL_259;
    }
  }
  *(_QWORD *)buf = &off_1E427ABF0;
  v128 = (std::__shared_weak_count *)a1;
  v129 = buf;
  v130 = 1;
  v119 = (_QWORD *)(a1 + 456);
  if (!*(_BYTE *)(a1 + 488))
  {
    *(_QWORD *)(a1 + 480) = v119;
    std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::__clone((uint64_t)buf, (_QWORD *)(a1 + 456));
    *(_BYTE *)(a1 + 488) = 1;
    goto LABEL_277;
  }
  v138 = v137;
  result = (_QWORD *)std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::__clone((uint64_t)buf, v137);
  if (v119 == v137)
  {
LABEL_270:
    v121 = v138;
    goto LABEL_271;
  }
  v120 = v138;
  v121 = *(_QWORD **)(a1 + 480);
  if (v138 != v137)
  {
    if (v121 != v119)
    {
      v138 = *(_QWORD **)(a1 + 480);
      *(_QWORD *)(a1 + 480) = v120;
      goto LABEL_271;
    }
    v121 = v137;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 456) + 24))(a1 + 456, v137);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 480) + 32))(*(_QWORD *)(a1 + 480));
    *(_QWORD *)(a1 + 480) = v138;
    v138 = v137;
    v122 = 4;
LABEL_275:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v121 + 8 * v122))(v121);
    goto LABEL_276;
  }
  if (v121 == v119)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v137[0] + 24))(v137, v139);
    (*(void (**)(_QWORD *))(*v138 + 32))(v138);
    v138 = 0;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 480) + 24))(*(_QWORD *)(a1 + 480), v137);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 480) + 32))(*(_QWORD *)(a1 + 480));
    *(_QWORD *)(a1 + 480) = 0;
    v138 = v137;
    (*(void (**)(_QWORD *, uint64_t))(v139[0] + 24))(v139, a1 + 456);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v139[0] + 32))(v139);
    *(_QWORD *)(a1 + 480) = v119;
    goto LABEL_270;
  }
  (*(void (**)(_QWORD *, uint64_t))(v137[0] + 24))(v137, a1 + 456);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v138 + 32))(v138);
  v121 = *(_QWORD **)(a1 + 480);
  v138 = v121;
  *(_QWORD *)(a1 + 480) = v119;
LABEL_271:
  if (v121 == v137)
  {
    v122 = 4;
    v121 = v137;
    goto LABEL_275;
  }
  if (v121)
  {
    v122 = 5;
    goto LABEL_275;
  }
LABEL_276:
  if (v130)
  {
LABEL_277:
    result = v129;
    if (v129 == buf)
    {
      v123 = 4;
      result = buf;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v123))();
    }
    else if (v129)
    {
      v123 = 5;
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v123))();
    }
  }
  return result;
}

void sub_19F669C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  char *v37;
  uint64_t v38;

  if (a14)
  {
    v37 = a13;
    if (a13 == &a10)
    {
      v38 = 4;
      v37 = &a10;
      goto LABEL_6;
    }
    if (a13)
    {
      v38 = 5;
LABEL_6:
      (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::SandboxBaseMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int8x8_t *v25;
  int8x8_t v26;
  uint8x8_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t i;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int8x8_t *v50;
  int8x8_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  __int16 v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  _WORD *v69;
  _WORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t **v73;
  unint64_t v74;
  _BYTE v76[24];
  _BYTE *v77;
  char v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t *v81;
  char v82;
  _BYTE v83[24];
  _BYTE *v84;
  char v85;
  _BYTE v86[24];
  _BYTE *v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v5 = *(int8x8_t **)(a2 + 1120);
  v6 = v5[2];
  if (!*(_QWORD *)&v6)
  {
    v9 = 0;
    MEMORY[0x8C] = 1;
    MEMORY[0x8D] = 1;
    goto LABEL_40;
  }
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0x91E65CD7F1A7A7FALL;
    if (*(_QWORD *)&v6 <= 0x91E65CD7F1A7A7FALL)
      v8 = 0x91E65CD7F1A7A7FALL % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & 0x91E65CD7F1A7A7FALL;
  }
  v10 = v5[1];
  v11 = *(_QWORD **)(*(_QWORD *)&v10 + 8 * v8);
  if (v11 && (v12 = (_QWORD *)*v11) != 0)
  {
    if (v7.u32[0] >= 2uLL)
    {
      while (v12[1] != 0x91E65CD7F1A7A7FALL || v12[2] != 0x91E65CD7F1A7A7FALL)
        v12 = (_QWORD *)*v12;
    }
    else
    {
      while (v12[1] != 0x91E65CD7F1A7A7FALL || v12[2] != 0x91E65CD7F1A7A7FALL)
        v12 = (_QWORD *)*v12;
    }
    v13 = v12[5];
    *(_BYTE *)(v13 + 140) = 1;
    v14 = v13 + 141;
  }
  else
  {
    MEMORY[0x8C] = 1;
    v14 = 141;
  }
  *(_BYTE *)v14 = 1;
  if (v7.u32[0] > 1uLL)
  {
    v15 = 0xAF46DE79C836B0D8;
    if (*(_QWORD *)&v6 <= 0xAF46DE79C836B0D8)
      v15 = 0xAF46DE79C836B0D8 % *(_QWORD *)&v6;
  }
  else
  {
    v15 = (*(_QWORD *)&v6 - 1) & 0xAF46DE79C836B0D8;
  }
  v16 = *(_QWORD **)(*(_QWORD *)&v10 + 8 * v15);
  if (!v16 || (v17 = (_QWORD *)*v16) == 0)
  {
LABEL_39:
    v9 = 0;
    goto LABEL_40;
  }
  if (v7.u32[0] < 2uLL)
  {
    v18 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v20 = v17[1];
      if (v20 == 0xAF46DE79C836B0D8)
      {
        if (v17[2] == 0xAF46DE79C836B0D8)
          goto LABEL_162;
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_39;
      }
      v17 = (_QWORD *)*v17;
      if (!v17)
        goto LABEL_39;
    }
  }
  while (1)
  {
    v19 = v17[1];
    if (v19 == 0xAF46DE79C836B0D8)
      break;
    if (v19 >= *(_QWORD *)&v6)
      v19 %= *(_QWORD *)&v6;
    if (v19 != v15)
      goto LABEL_39;
LABEL_29:
    v17 = (_QWORD *)*v17;
    if (!v17)
      goto LABEL_39;
  }
  if (v17[2] != 0xAF46DE79C836B0D8)
    goto LABEL_29;
LABEL_162:
  v9 = v17[5];
LABEL_40:
  *(_DWORD *)(v9 + 324) = 0;
  v86[0] = 0;
  v88 = 0;
  std::__optional_storage_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false> const&>((_QWORD *)(v9 + 336), (uint64_t)v86);
  if (v88)
  {
    v21 = v87;
    if (v87 == v86)
    {
      v22 = 4;
      v21 = v86;
LABEL_45:
      (*(void (**)(void))(*v21 + 8 * v22))();
    }
    else if (v87)
    {
      v22 = 5;
      goto LABEL_45;
    }
  }
  *(_BYTE *)(v9 + 328) = 0;
  v83[0] = 0;
  v85 = 0;
  std::__optional_storage_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false> const&>((_QWORD *)(v9 + 376), (uint64_t)v83);
  if (v85)
  {
    v23 = v84;
    if (v84 == v83)
    {
      v24 = 4;
      v23 = v83;
LABEL_51:
      (*(void (**)(void))(*v23 + 8 * v24))();
    }
    else if (v84)
    {
      v24 = 5;
      goto LABEL_51;
    }
  }
  *(_BYTE *)(*(_QWORD *)(v9 + 136) + 48) = 0;
  *(_BYTE *)(*(_QWORD *)(v9 + 184) + 48) = 0;
  *(_BYTE *)(*(_QWORD *)(v9 + 192) + 48) = 0;
  v25 = *(int8x8_t **)(a2 + 1120);
  v26 = v25[2];
  if (!*(_QWORD *)&v26)
    goto LABEL_72;
  v27 = (uint8x8_t)vcnt_s8(v26);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] > 1uLL)
  {
    v28 = 0xC267A080D338C6A1;
    if (*(_QWORD *)&v26 <= 0xC267A080D338C6A1)
      v28 = 0xC267A080D338C6A1 % *(_QWORD *)&v26;
  }
  else
  {
    v28 = (*(_QWORD *)&v26 - 1) & 0xC267A080D338C6A1;
  }
  v29 = *(_QWORD **)(*(_QWORD *)&v25[1] + 8 * v28);
  if (!v29 || (v30 = (_QWORD *)*v29) == 0)
  {
LABEL_72:
    v33 = 0;
    if (MEMORY[0xE8])
      goto LABEL_73;
    goto LABEL_79;
  }
  if (v27.u32[0] < 2uLL)
  {
    while (1)
    {
      v32 = v30[1];
      if (v32 == 0xC267A080D338C6A1)
      {
        if (v30[2] == 0xC267A080D338C6A1)
          goto LABEL_163;
      }
      else if ((v32 & (*(_QWORD *)&v26 - 1)) != v28)
      {
        goto LABEL_72;
      }
      v30 = (_QWORD *)*v30;
      if (!v30)
        goto LABEL_72;
    }
  }
  while (2)
  {
    v31 = v30[1];
    if (v31 != 0xC267A080D338C6A1)
    {
      if (v31 >= *(_QWORD *)&v26)
        v31 %= *(_QWORD *)&v26;
      if (v31 != v28)
        goto LABEL_72;
      goto LABEL_62;
    }
    if (v30[2] != 0xC267A080D338C6A1)
    {
LABEL_62:
      v30 = (_QWORD *)*v30;
      if (!v30)
        goto LABEL_72;
      continue;
    }
    break;
  }
LABEL_163:
  v33 = (_QWORD *)v30[5];
  if (!v33[29])
    goto LABEL_79;
LABEL_73:
  v34 = (_QWORD *)v33[28];
  if (v34)
  {
    do
    {
      v35 = (_QWORD *)*v34;
      operator delete(v34);
      v34 = v35;
    }
    while (v35);
  }
  v33[28] = 0;
  v36 = v33[27];
  if (v36)
  {
    for (i = 0; i != v36; ++i)
      *(_QWORD *)(v33[26] + 8 * i) = 0;
  }
  v33[29] = 0;
  v25 = *(int8x8_t **)(a2 + 1120);
  v26 = v25[2];
LABEL_79:
  if (!*(_QWORD *)&v26)
    goto LABEL_99;
  v38 = (uint8x8_t)vcnt_s8(v26);
  v38.i16[0] = vaddlv_u8(v38);
  if (v38.u32[0] > 1uLL)
  {
    v39 = 0x4AC7AB7561675F6;
    if (*(_QWORD *)&v26 <= 0x4AC7AB7561675F6uLL)
      v39 = 0x4AC7AB7561675F6uLL % *(_QWORD *)&v26;
  }
  else
  {
    v39 = (*(_QWORD *)&v26 - 1) & 0x4AC7AB7561675F6;
  }
  v40 = *(_QWORD **)(*(_QWORD *)&v25[1] + 8 * v39);
  if (!v40 || (v41 = (_QWORD *)*v40) == 0)
  {
LABEL_99:
    v45 = 0;
    goto LABEL_100;
  }
  if (v38.u32[0] < 2uLL)
  {
    v42 = *(_QWORD *)&v26 - 1;
    while (1)
    {
      v44 = v41[1];
      if (v44 == 0x4AC7AB7561675F6)
      {
        if (v41[2] == 0x4AC7AB7561675F6)
          goto LABEL_165;
      }
      else if ((v44 & v42) != v39)
      {
        goto LABEL_99;
      }
      v41 = (_QWORD *)*v41;
      if (!v41)
        goto LABEL_99;
    }
  }
  while (2)
  {
    v43 = v41[1];
    if (v43 != 0x4AC7AB7561675F6)
    {
      if (v43 >= *(_QWORD *)&v26)
        v43 %= *(_QWORD *)&v26;
      if (v43 != v39)
        goto LABEL_99;
      goto LABEL_89;
    }
    if (v41[2] != 0x4AC7AB7561675F6)
    {
LABEL_89:
      v41 = (_QWORD *)*v41;
      if (!v41)
        goto LABEL_99;
      continue;
    }
    break;
  }
LABEL_165:
  v45 = v41[5];
LABEL_100:
  LOBYTE(v79) = 0;
  v82 = 0;
  std::__optional_storage_base<std::function<BOOL ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<BOOL ()(void)>,false> const&>((_QWORD *)(v45 + 144), (uint64_t)&v79);
  if (v82)
  {
    v46 = v81;
    if (v81 == &v79)
    {
      v47 = 4;
      v46 = &v79;
LABEL_105:
      (*(void (**)(void))(*v46 + 8 * v47))();
    }
    else if (v81)
    {
      v47 = 5;
      goto LABEL_105;
    }
  }
  LOBYTE(v79) = 0;
  v82 = 0;
  std::__optional_storage_base<std::function<BOOL ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<BOOL ()(void)>,false> const&>((_QWORD *)(v45 + 184), (uint64_t)&v79);
  if (v82)
  {
    v48 = v81;
    if (v81 == &v79)
    {
      v49 = 4;
      v48 = &v79;
LABEL_111:
      (*(void (**)(void))(*v48 + 8 * v49))();
    }
    else if (v81)
    {
      v49 = 5;
      goto LABEL_111;
    }
  }
  v50 = *(int8x8_t **)(a2 + 1120);
  v51 = v50[2];
  if (!*(_QWORD *)&v51)
    goto LABEL_132;
  v52 = (uint8x8_t)vcnt_s8(v51);
  v52.i16[0] = vaddlv_u8(v52);
  if (v52.u32[0] > 1uLL)
  {
    v53 = 0x17767EADC5B287BLL;
    if (*(_QWORD *)&v51 <= 0x17767EADC5B287BuLL)
      v53 = 0x17767EADC5B287BuLL % *(_QWORD *)&v51;
  }
  else
  {
    v53 = (*(_QWORD *)&v51 - 1) & 0x17767EADC5B287BLL;
  }
  v54 = *(_QWORD **)(*(_QWORD *)&v50[1] + 8 * v53);
  if (!v54 || (v55 = (_QWORD *)*v54) == 0)
  {
LABEL_132:
    v59 = 0;
    goto LABEL_133;
  }
  if (v52.u32[0] < 2uLL)
  {
    v56 = *(_QWORD *)&v51 - 1;
    while (1)
    {
      v58 = v55[1];
      if (v58 == 0x17767EADC5B287BLL)
      {
        if (v55[2] == 0x17767EADC5B287BLL)
          goto LABEL_166;
      }
      else if ((v58 & v56) != v53)
      {
        goto LABEL_132;
      }
      v55 = (_QWORD *)*v55;
      if (!v55)
        goto LABEL_132;
    }
  }
  while (2)
  {
    v57 = v55[1];
    if (v57 != 0x17767EADC5B287BLL)
    {
      if (v57 >= *(_QWORD *)&v51)
        v57 %= *(_QWORD *)&v51;
      if (v57 != v53)
        goto LABEL_132;
      goto LABEL_122;
    }
    if (v55[2] != 0x17767EADC5B287BLL)
    {
LABEL_122:
      v55 = (_QWORD *)*v55;
      if (!v55)
        goto LABEL_132;
      continue;
    }
    break;
  }
LABEL_166:
  v59 = (_QWORD *)v55[5];
LABEL_133:
  v76[0] = 0;
  v78 = 0;
  md::ElevationLogic::setElevationAdjustmentFeedback(v59, (uint64_t)v76);
  if (v78)
  {
    v60 = v77;
    if (v77 == v76)
    {
      v61 = 4;
      v60 = v76;
LABEL_138:
      (*(void (**)(void))(*v60 + 8 * v61))();
    }
    else if (v77)
    {
      v61 = 5;
      goto LABEL_138;
    }
  }
  v62 = *(_QWORD *)(*(_QWORD *)(a3 + 856) + 40);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)(a3 + 856) + 48) - v62) >= 0x18)
    v63 = *(_QWORD *)(v62 + 16);
  else
    v63 = 0;
  +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v64, "standardCommandBufferSelector");
  v65 = v80;
  v66 = *(_WORD *)(*(_QWORD *)(v79 + 8) + 8);
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v68 = __ldaxr(p_shared_owners);
    while (__stlxr(v68 - 1, p_shared_owners));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }

  v69 = *(_WORD **)(v63 + 8);
  v70 = *(_WORD **)(v63 + 24);
  if (v70 == v69)
  {
    if (v70)
    {
      *(_QWORD *)(v63 + 16) = v70;
      operator delete(v70);
      *(_QWORD *)(v63 + 8) = 0;
      *(_QWORD *)(v63 + 16) = 0;
      *(_QWORD *)(v63 + 24) = 0;
    }
    v69 = operator new(2uLL);
    *(_QWORD *)(v63 + 8) = v69;
    *(_QWORD *)(v63 + 24) = v69 + 1;
  }
  *v69 = v66;
  *(_QWORD *)(v63 + 16) = v69 + 1;
  *(_WORD *)(v63 + 57) = v66;
  v71 = *(_QWORD *)(a2 + 1120);
  v72 = *(_QWORD *)(v71 + 16);
  if ((v72 & (v72 - 1)) != 0)
  {
    v74 = 0x88BE5DF80D25DA79;
    if (v72 <= 0x88BE5DF80D25DA79)
      v74 = 0x88BE5DF80D25DA79 % v72;
    v73 = *(uint64_t ***)(*(_QWORD *)(v71 + 8) + 8 * v74);
    do
    {
      do
        v73 = (uint64_t **)*v73;
      while (v73[1] != (uint64_t *)0x88BE5DF80D25DA79);
    }
    while (v73[2] != (uint64_t *)0x88BE5DF80D25DA79);
  }
  else
  {
    v73 = *(uint64_t ***)(*(_QWORD *)(v71 + 8) + 8 * ((v72 - 1) & 0x88BE5DF80D25DA79));
    do
    {
      do
        v73 = (uint64_t **)*v73;
      while (v73[1] != (uint64_t *)0x88BE5DF80D25DA79);
    }
    while (v73[2] != (uint64_t *)0x88BE5DF80D25DA79);
  }
  return (*(uint64_t (**)(uint64_t *))(*v73[5] + 16))(v73[5]);
}

void sub_19F66A5AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__optional_storage_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v2 = result;
  v10[3] = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)result + 32) != *(unsigned __int8 *)(a2 + 32))
  {
    if (!*((_BYTE *)result + 32))
    {
      result = *(_QWORD **)(a2 + 24);
      if (result)
      {
        if (result == (_QWORD *)a2)
        {
          v2[3] = v2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v2);
        }
        else
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
          v2[3] = result;
        }
      }
      else
      {
        v2[3] = 0;
      }
      *((_BYTE *)v2 + 32) = 1;
      return result;
    }
    result = (_QWORD *)result[3];
    if (result == v2)
    {
      v4 = 4;
      result = v2;
    }
    else
    {
      if (!result)
      {
LABEL_16:
        *((_BYTE *)v2 + 32) = 0;
        return result;
      }
      v4 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
    goto LABEL_16;
  }
  if (!*((_BYTE *)result + 32))
    return result;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      v9 = v8;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    v9 = 0;
  }
  if (v8 != v2)
  {
    v5 = v9;
    v6 = (_QWORD *)v2[3];
    if (v9 == v8)
    {
      if (v6 == v2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v2[3] + 24))(v2[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)v2[3] + 32))(v2[3]);
        v2[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, v2);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v2);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)v2[3];
      }
      v2[3] = v2;
    }
    else if (v6 == v2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v2 + 24))(v2, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)v2[3] + 32))(v2[3]);
      v2[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)v2[3];
      v2[3] = v5;
    }
  }
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

_QWORD *std::__optional_storage_base<std::function<BOOL ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<BOOL ()(void)>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v2 = result;
  v8 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)result + 32) != *(unsigned __int8 *)(a2 + 32))
  {
    if (!*((_BYTE *)result + 32))
    {
      result = *(_QWORD **)(a2 + 24);
      if (result)
      {
        if (result == (_QWORD *)a2)
        {
          v2[3] = v2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v2);
        }
        else
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
          v2[3] = result;
        }
      }
      else
      {
        v2[3] = 0;
      }
      *((_BYTE *)v2 + 32) = 1;
      return result;
    }
    result = (_QWORD *)result[3];
    if (result == v2)
    {
      v4 = 4;
      result = v2;
    }
    else
    {
      if (!result)
      {
LABEL_16:
        *((_BYTE *)v2 + 32) = 0;
        return result;
      }
      v4 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
    goto LABEL_16;
  }
  if (!*((_BYTE *)result + 32))
    return result;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = v6;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v6);
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](v6, v2);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__hash_table<md::TileSelectionTileSetType,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>>::__emplace_unique_key_args<md::TileSelectionTileSetType,md::TileSelectionTileSetType const&>(float *a1, unsigned __int16 a2, __int16 a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_WORD *)v13 + 8) = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_63:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (*v13)
  {
    v39 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19F66AEC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427ABF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427ABF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::operator()(uint64_t a1, uint64_t *a2, double *a3, double *a4)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  __int128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  long double v17;
  long double v18;
  double v19;
  __double2 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  double v28[7];
  _OWORD v29[3];
  uint64_t v30;

  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(double *)(v6 + 40);
  *a3 = fmax(*(double *)(v6 + 32) * 0.15, 5.0);
  v9 = *(_OWORD *)(v6 + 24);
  v29[0] = *(_OWORD *)(v6 + 8);
  v29[1] = v9;
  v29[2] = *(_OWORD *)(v6 + 40);
  v30 = *(_QWORD *)(v6 + 56);
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformMercator(v28, (double *)v29, *(_BYTE *)v6 == 0);
  if (*(_BYTE *)(v7 + 592))
    v10 = *(double *)(v7 + 584);
  else
    v10 = 0.0;
  v11 = v28[2];
  v13 = *(double *)(v6 + 368);
  v12 = *(double *)(v6 + 376);
  if (v12 >= v13)
  {
    v19 = *(double *)(v6 + 456);
  }
  else
  {
    v14 = v12 * v13;
    v15 = v12 / v13;
    if (v14 <= 0.0)
      v16 = 1.0;
    else
      v16 = v15;
    v17 = tan(*(double *)(v6 + 456) * 0.5);
    v18 = atan(v16 * v17);
    v19 = v18 + v18;
  }
  v20 = __sincos_stret(v8);
  v21 = (fabs(v10) + v11 * 40075017.0) / fmax(v20.__cosval, 0.01745);
  v22 = v19 * 0.5;
  v23 = sin(1.57079633 - (v8 + v19 * 0.5));
  v24 = tan(v19 * 0.5);
  *a4 = fmax((v21 * (v20.__sinval * v24 * sin(v22 + 1.57079633)) / fmax(v23, 0.01745) + v21) * 1.5, 600.0);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return 1;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5>,void ()(std::optional<double> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5>,void ()(std::optional<double> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427ABA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5>,void ()(std::optional<double> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427ABA8;
  a2[1] = v2;
  return result;
}

double std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5>,void ()(std::optional<double> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 8);
  result = *(double *)a2;
  *(float *)&result = *(double *)a2;
  if (!*(_BYTE *)(a2 + 8))
    *(float *)&result = 0.0;
  if (*(unsigned __int8 *)(v2 + 592) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*(_BYTE *)(v2 + 592))
    {
      result = *(float *)&result;
      *(double *)(v2 + 584) = result;
    }
  }
  else if (*(_BYTE *)(v2 + 592))
  {
    *(_BYTE *)(v2 + 592) = 0;
  }
  else
  {
    result = *(float *)&result;
    *(double *)(v2 + 584) = result;
    *(_BYTE *)(v2 + 592) = 1;
  }
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427AB60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427AB60;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, float *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  float v7;
  uint64_t v8;
  const QuadTile *v9;
  double v11;
  long double v12;
  long double v13;
  int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _BYTE v17[40];
  _BYTE v18[4];
  unsigned int v19;
  unsigned int v20;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = *a3;
  *a4 = 0;
  a4[16] = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    goto LABEL_8;
  v9 = *(const QuadTile **)(v8 + 352);
  if (!v9 || v7 <= 15.0)
    goto LABEL_8;
  v11 = *(double *)(v5 + 16);
  v12 = tan(*(double *)(v5 + 8) * 0.5 + 0.785398163);
  v13 = log(v12);
  v14 = 1 << (int)v7;
  v18[0] = -1;
  v18[1] = (int)v7;
  v19 = v14 + ~vcvtmd_s64_f64((v13 * 0.159154943 + 0.5) * (double)v14);
  v20 = vcvtmd_s64_f64((v11 * 0.159154943 + 0.5) * (double)v14);
  md::FlyoverMetaData::adjustedTile((md::FlyoverMetaData *)v17, v9, (uint64_t)v18, 1);
  if (!v17[32])
    goto LABEL_14;
  if (v17[24] == 1)
  {
LABEL_8:
    if (!v6)
      return;
  }
  else
  {
LABEL_14:
    *(_OWORD *)a4 = xmmword_19FFB3D10;
    a4[16] = 1;
    if (!v6)
      return;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_19F66B3A0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3>,float ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3>,float ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427AB18;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3>,float ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427AB18;
}

float std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3>,float ()(void)>::operator()()
{
  void *v0;
  float v1;
  float v2;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "flyoverGridNDCBias");
  v2 = v1;

  return v2;
}

void sub_19F66B478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2>,BOOL ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E427AAD0;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2>,BOOL ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E427AAD0;
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2>,BOOL ()(void)>::operator()()
{
  void *v0;
  uint64_t v1;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "flyoverDrapeGrid");

  return v1;
}

void sub_19F66B518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1>,gdc::CameraFrame<geo::Radians,double> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1>,gdc::CameraFrame<geo::Radians,double> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427AA88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1>,gdc::CameraFrame<geo::Radians,double> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E427AA88;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1>,gdc::CameraFrame<geo::Radians,double> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (v11[0] = 0, v13 = 0, !*(_BYTE *)(v2 + 320)))
  {
    *(int64x2_t *)a2 = vdupq_n_s64(0xC00921FB54442D18);
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_QWORD *)(a2 + 48) = 0;
    return;
  }
  v4 = *(_QWORD *)(v2 + 312);
  if (v4)
  {
    if (v4 == v2 + 288)
    {
      v12 = v11;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v2 + 288) + 24))(v2 + 288, v11);
    }
    else
    {
      v12 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = 1;
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_14;
    v6 = 5;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v6))(v5);
LABEL_14:
  v7 = *(_QWORD *)(a1 + 8);
  v11[0] = 0;
  v13 = 0;
  if (!*(_BYTE *)(v7 + 320))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_30:
    __break(1u);
    return;
  }
  v8 = *(_QWORD *)(v7 + 312);
  if (v8)
  {
    if (v8 == v7 + 288)
    {
      v12 = v11;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v7 + 288) + 24))(v7 + 288, v11);
    }
    else
    {
      v12 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = 1;
  if (!v12)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_30;
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)v12 + 48))(v12);
  if (!v13)
    return;
  v9 = v12;
  if (v12 == v11)
  {
    v10 = 4;
    v9 = v11;
  }
  else
  {
    if (!v12)
      return;
    v10 = 5;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
}

void sub_19F66B778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  uint64_t *v14;
  uint64_t v15;

  if (a13)
  {
    v14 = a12;
    if (a12 == &a9)
    {
      v15 = 4;
      v14 = &a9;
    }
    else
    {
      if (!a12)
        goto LABEL_7;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D25A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D25A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _BYTE v16[8];
  __int128 v17;
  _BYTE v18[40];
  uint64_t v19;
  std::__shared_weak_count *v20;

  *(_BYTE *)a3 = 0;
  if ((unsigned __int16)md::FlyoverMetaData::tileType(*(md::FlyoverMetaData **)(*(_QWORD *)(a1 + 8) + 352), (const QuadTile *)a2, 0) >= 0x100u)
  {
    md::World::getDsmTileData((md::World *)&v19, *(const QuadTile **)(*(_QWORD *)(a1 + 8) + 80), *(const QuadTile **)(*(_QWORD *)(a1 + 8) + 88), a2);
    v6 = v19;
    if (v19)
    {
      md::FlyoverMetaData::adjustedTile((md::FlyoverMetaData *)v18, *(const QuadTile **)(*(_QWORD *)(a1 + 8) + 352), (uint64_t)a2, 0);
      if (v18[32])
        md::FlyoverMetaData::elevationBoundsForTile((md::FlyoverMetaData *)v16, *(const QuadTile **)(*(_QWORD *)(a1 + 8) + 352), (uint64_t)v18);
      else
        md::FlyoverMetaData::elevationBoundsForTile((md::FlyoverMetaData *)v16, *(const QuadTile **)(*(_QWORD *)(a1 + 8) + 352), (uint64_t)a2);
      v7 = v16[0];
      if (v16[0])
      {
        *(_OWORD *)(a3 + 8) = v17;
        v7 = 1;
        *(_BYTE *)a3 = 1;
      }
      if (!v7)
      {
        v11 = 720;
        if (*(_QWORD *)(v6 + 720))
        {
          v12 = (unint64_t *)(v6 + 720);
        }
        else
        {
          v11 = 736;
          v12 = (unint64_t *)(v6 + 736);
        }
        v13 = *(_QWORD *)(v6 + v11);
        if (v13)
        {
          v14 = *(_BYTE *)(v13 + 24) == 8
              ? md::FlyoverDsmTileData::_heightBounds<unsigned char>(v6, (uint64_t)a2, v12)
              : md::FlyoverDsmTileData::_heightBounds<unsigned short>(v6, (uint64_t)a2, v12);
          if (v15)
          {
            *(double *)(a3 + 8) = *(float *)&v14;
            *(double *)(a3 + 16) = *((float *)&v14 + 1);
            *(_BYTE *)a3 = 1;
          }
        }
      }
    }
    v8 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_19F66B9B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 - 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::SandboxBaseMapEngineMode::SandboxBaseMapEngineMode(uint64_t a1, char a2, int a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  _WORD *v11;
  uint64_t v12;
  char v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _QWORD *v30;
  int v31;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = md::CartographicMapEngineMode::CartographicMapEngineMode(a1, a2);
  *(_QWORD *)v5 = &off_1E42A1088;
  *(_BYTE *)(v5 + 568) = a3;
  *(_BYTE *)(v5 + 584) = 0;
  *(_BYTE *)(v5 + 592) = 0;
  *(_BYTE *)(a1 + 600) = MapsFeature_IsEnabled_VKMLayout_Flyover();
  v6 = *(unsigned __int8 *)(a1 + 548);
  *(_OWORD *)(a1 + 552) = xmmword_19FFB34C0;
  if (!v6)
    *(_BYTE *)(a1 + 548) = 1;
  *(_QWORD *)(a1 + 536) = 100;
  *(_BYTE *)(a1 + 49) = 0;
  *(_DWORD *)(a1 + 52) = 20;
  LOWORD(v44) = 2560;
  *((_QWORD *)&v44 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v44);
  LOWORD(v44) = 5386;
  *((_QWORD *)&v44 + 1) = 0x3FE0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v44);
  if (*(_BYTE *)(a1 + 568))
  {
    LOWORD(v44) = 2560;
    *((_QWORD *)&v44 + 1) = 0;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 384), (unsigned __int8 *)&v44);
    LOWORD(v44) = 5386;
    *((_QWORD *)&v44 + 1) = 0x3FD657184AE74487;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 384), (unsigned __int8 *)&v44);
    LOWORD(v44) = 768;
    *((_QWORD *)&v44 + 1) = 0;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v44);
    LOWORD(v44) = 3843;
    *((_QWORD *)&v44 + 1) = 0x3FE38C35418A5BF6;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v44);
    LOWORD(v44) = 4111;
    *((_QWORD *)&v44 + 1) = 0x3FF0C152382D7365;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v44);
    LOWORD(v44) = 6416;
    *((_QWORD *)&v44 + 1) = 0x3FF38C35418A5BF6;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v44);
    v8 = (_QWORD *)(a1 + 128);
    v7 = *(_QWORD *)(a1 + 128);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = (_QWORD *)v7;
          v10 = *(unsigned __int16 *)(v7 + 26);
          if (v10 < 9)
            break;
          v7 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_11;
        }
        if (v10 == 8)
          break;
        v7 = v9[1];
        if (!v7)
        {
          v8 = v9 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
      v9 = (_QWORD *)(a1 + 128);
LABEL_11:
      v11 = operator new(0x20uLL);
      v11[13] = 8;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = v9;
      *v8 = v11;
      v12 = **(_QWORD **)(a1 + 120);
      if (v12)
      {
        *(_QWORD *)(a1 + 120) = v12;
        v11 = (_WORD *)*v8;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 128), (uint64_t *)v11);
      ++*(_QWORD *)(a1 + 136);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 52) = 20;
    LOWORD(v44) = 5120;
    *((_QWORD *)&v44 + 1) = 0;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 384), (unsigned __int8 *)&v44);
    LOWORD(v44) = 5120;
    *((_QWORD *)&v44 + 1) = 0;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v44);
  }
  LOBYTE(v44) = 0;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0, &v44)+ 17) = 0;
  LOBYTE(v44) = 2;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 2u, &v44)+ 17) = 0;
  LOBYTE(v44) = 31;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Fu, &v44)+ 17) = 0;
  v33 = a1 + 144;
  if (*(_BYTE *)(a1 + 568))
  {
    LOBYTE(v44) = 1;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 1u, &v44)+ 17) = 0;
    LOBYTE(v44) = 10;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0xAu, &v44)+ 17) = 0;
    LOBYTE(v44) = 53;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x35u, &v44)+ 17) = 0;
    v13 = 6;
    v14 = 2;
  }
  else
  {
    LOBYTE(v44) = 3;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 3u, &v44)+ 17) = 0;
    LOBYTE(v44) = 21;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x15u, &v44)+ 17) = 0;
    LOBYTE(v44) = 9;
    v15 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 9u, &v44);
    v14 = 0;
    v13 = 0;
    *((_BYTE *)v15 + 17) = 0;
  }
  *(_BYTE *)(a1 + 224) = v14;
  *(_BYTE *)(a1 + 225) = v13;
  *(_QWORD *)&v38 = 0xEA624BC935BAF297;
  *((_QWORD *)&v38 + 1) = "md::mun::MuninLogic]";
  v39 = 19;
  *(_QWORD *)&v34 = 0x8EA84A1BD3791AFALL;
  *((_QWORD *)&v34 + 1) = "md::mun::MuninContext]";
  *(_QWORD *)&v35 = 21;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 3;
  v47 = xmmword_1E42F8D08;
  v48 = unk_1E42F8D18;
  *(_QWORD *)&v49 = 20;
  v45 = xmmword_1E42F8CE8;
  v46 = unk_1E42F8CF8;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 1, (uint64_t)&v44, (uint64_t)&v41);
  v41 = 0x79FE0BD9535D5C4DLL;
  v42 = "md::AnchorLogic]";
  v43 = 15;
  *(_QWORD *)&v44 = &v45;
  *(_QWORD *)&v38 = 0x63B6FE00C0848868;
  *((_QWORD *)&v38 + 1) = "md::AnchorContext]";
  v39 = 17;
  v40 = 1;
  *((_QWORD *)&v44 + 1) = 2;
  v45 = xmmword_1E42F87F0;
  v46 = unk_1E42F8800;
  v47 = xmmword_1E42F8810;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 1;
  v35 = xmmword_1E42F8E88;
  *(_QWORD *)&v36 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(_QWORD *)&v38 = 0x85B8F2BE93EDF996;
  *((_QWORD *)&v38 + 1) = "md::AssetLogic]";
  v39 = 14;
  *(_QWORD *)&v34 = 0x88B81689974D86F3;
  *((_QWORD *)&v34 + 1) = "md::AssetContext]";
  *(_QWORD *)&v35 = 16;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = xmmword_1E42F8C70;
  *(_QWORD *)&v46 = 29;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0x582FBDD84553E215;
  *((_QWORD *)&v38 + 1) = "md::AssetInjectionLogic]";
  v39 = 23;
  *(_QWORD *)&v34 = 0xD77FB76AFC10A710;
  *((_QWORD *)&v34 + 1) = "md::AssetInjectionContext]";
  *(_QWORD *)&v35 = 25;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = xmmword_1E42F8C58;
  *(_QWORD *)&v46 = 16;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0x8E629317B3523E63;
  *((_QWORD *)&v38 + 1) = "md::CameraLogic]";
  v39 = 15;
  *(_QWORD *)&v34 = 0x1AF456233693CD46;
  *((_QWORD *)&v34 + 1) = "md::CameraContext]";
  *(_QWORD *)&v35 = 17;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = xmmword_1E42F8820;
  *(_QWORD *)&v46 = 20;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  v41 = 0x17767EADC5B287BLL;
  v42 = "md::ElevationLogic]";
  v43 = 18;
  *(_QWORD *)&v44 = &v45;
  *(_QWORD *)&v38 = 0x8BD499FBD96FBB9ELL;
  *((_QWORD *)&v38 + 1) = "md::ElevationContext]";
  v39 = 20;
  v40 = 1;
  *((_QWORD *)&v44 + 1) = 2;
  v45 = xmmword_1E42F88C8;
  v46 = unk_1E42F88D8;
  v47 = xmmword_1E42F88E8;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 1;
  v35 = xmmword_1E42F88F8;
  *(_QWORD *)&v36 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(_QWORD *)&v34 = 0x701C95861FC50076;
  *((_QWORD *)&v34 + 1) = "md::GeometryLogic]";
  *(_QWORD *)&v35 = 17;
  *(_QWORD *)&v44 = 0x3070CB6B3C7F21D3;
  *((_QWORD *)&v44 + 1) = "md::GeometryContext]";
  *(_QWORD *)&v45 = 19;
  BYTE8(v45) = 1;
  *(_QWORD *)&v38 = &v39;
  *((_QWORD *)&v38 + 1) = 0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  v41 = 0x4AC7AB7561675F6;
  v42 = "md::GridLogic]";
  v43 = 13;
  *(_QWORD *)&v38 = 0x336A901A15BB7353;
  *((_QWORD *)&v38 + 1) = "md::GridContext]";
  v39 = 15;
  v40 = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = xmmword_1E42F8C28;
  *(_QWORD *)&v46 = 21;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 1;
  v35 = xmmword_1E42F8B38;
  *(_QWORD *)&v36 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  v41 = 0x8B855FB229857EA1;
  v42 = "md::IdentifiedResourceLogic]";
  v43 = 27;
  *(_QWORD *)&v44 = &v45;
  *(_QWORD *)&v38 = 0x12B1E486D3040E2CLL;
  *((_QWORD *)&v38 + 1) = "md::IdentifiedResourceContext]";
  v39 = 29;
  v40 = 1;
  *((_QWORD *)&v44 + 1) = 4;
  v47 = xmmword_1E42F8A98;
  v48 = unk_1E42F8AA8;
  v49 = xmmword_1E42F8AB8;
  v50 = *(_OWORD *)&off_1E42F8AC8;
  v45 = xmmword_1E42F8A78;
  v46 = unk_1E42F8A88;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 1;
  v35 = xmmword_1E42F8AD8;
  *(_QWORD *)&v36 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  v41 = 0x20A1ED17D78F322BLL;
  v42 = "md::LabelsLogic]";
  v43 = 15;
  *(_QWORD *)&v44 = &v45;
  *(_QWORD *)&v38 = 0xA588623CD4116DAELL;
  *((_QWORD *)&v38 + 1) = "md::LabelsContext]";
  v39 = 17;
  v40 = 1;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = xmmword_1E42F8C28;
  *(_QWORD *)&v46 = 21;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 1;
  v35 = xmmword_1E42F8C40;
  *(_QWORD *)&v36 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(_QWORD *)&v38 = 0x91E65CD7F1A7A7FALL;
  *((_QWORD *)&v38 + 1) = "md::LightingLogic]";
  v39 = 17;
  *(_QWORD *)&v34 = 0x41E8D6E445F4145;
  *((_QWORD *)&v34 + 1) = "md::LightingLogicContext]";
  *(_QWORD *)&v35 = 24;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 4;
  v47 = xmmword_1E42F7B60;
  v48 = unk_1E42F7B70;
  v49 = xmmword_1E42F7B80;
  v50 = *(_OWORD *)&off_1E42F7B90;
  v45 = xmmword_1E42F7B40;
  v46 = unk_1E42F7B50;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  v41 = 0x653D1F33EF15EF04;
  v42 = "md::LoadingStatusLogic]";
  v43 = 22;
  *(_QWORD *)&v44 = &v45;
  *(_QWORD *)&v38 = 0x90B6813830DCB581;
  *((_QWORD *)&v38 + 1) = "md::LoadingStatusContext]";
  v39 = 24;
  v40 = 1;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = xmmword_1E42F8C58;
  *(_QWORD *)&v46 = 16;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 1;
  v35 = xmmword_1E42F8C70;
  *(_QWORD *)&v36 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(_QWORD *)&v38 = 0xBDB8C71631E0AA6CLL;
  *((_QWORD *)&v38 + 1) = "md::MapZoomLevelStyleLogic]";
  v39 = 26;
  *(_QWORD *)&v34 = 0xF0AA2DB42EB710AFLL;
  *((_QWORD *)&v34 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(_QWORD *)&v35 = 33;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 2;
  v45 = xmmword_1E42F8898;
  v46 = unk_1E42F88A8;
  v47 = xmmword_1E42F88B8;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0xA1851987210F8D55;
  *((_QWORD *)&v38 + 1) = "md::MaterialLogic]";
  v39 = 17;
  *(_QWORD *)&v34 = 0xD2404CDD1F9A6950;
  *((_QWORD *)&v34 + 1) = "md::MaterialContext]";
  *(_QWORD *)&v35 = 19;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 5;
  v49 = xmmword_1E42F7BE0;
  v50 = *(_OWORD *)&off_1E42F7BF0;
  v51 = xmmword_1E42F7C00;
  *(_QWORD *)&v52 = 21;
  v45 = xmmword_1E42F7BA0;
  v46 = unk_1E42F7BB0;
  v47 = xmmword_1E42F7BC0;
  v48 = unk_1E42F7BD0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0x88BE5DF80D25DA79;
  *((_QWORD *)&v38 + 1) = "md::MeshRenderableLogic]";
  v39 = 23;
  *(_QWORD *)&v34 = 0xF014CCE28176CA44;
  *((_QWORD *)&v34 + 1) = "md::MeshRenderableContext]";
  *(_QWORD *)&v35 = 25;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 9;
  v55 = xmmword_1E42F7D48;
  v56 = *(_OWORD *)&off_1E42F7D58;
  v57 = xmmword_1E42F7D68;
  v58 = 15;
  v51 = xmmword_1E42F7D08;
  v52 = unk_1E42F7D18;
  v53 = xmmword_1E42F7D28;
  v54 = unk_1E42F7D38;
  v47 = xmmword_1E42F7CC8;
  v48 = unk_1E42F7CD8;
  v49 = xmmword_1E42F7CE8;
  v50 = *(_OWORD *)&off_1E42F7CF8;
  v45 = xmmword_1E42F7CA8;
  v46 = unk_1E42F7CB8;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  v41 = 0xBEC1A12372CEEC00;
  v42 = "md::NavigationLogic]";
  v43 = 19;
  *(_QWORD *)&v44 = &v45;
  *(_QWORD *)&v38 = 0x1B8B241A8D896A1DLL;
  *((_QWORD *)&v38 + 1) = "md::NavigationContext]";
  v39 = 21;
  v40 = 1;
  *((_QWORD *)&v44 + 1) = 3;
  v47 = xmmword_1E42F8858;
  v48 = unk_1E42F8868;
  *(_QWORD *)&v49 = 17;
  v45 = xmmword_1E42F8838;
  v46 = unk_1E42F8848;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 1;
  v35 = xmmword_1E42F8880;
  *(_QWORD *)&v36 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  v41 = 0x7173CF8D2BE8FE53;
  v42 = "md::RouteLineLogic]";
  v43 = 18;
  *(_QWORD *)&v44 = &v45;
  *(_QWORD *)&v38 = 0x8E4587A431F9C696;
  *((_QWORD *)&v38 + 1) = "md::RouteLineContext]";
  v39 = 20;
  v40 = 1;
  *((_QWORD *)&v44 + 1) = 4;
  v47 = xmmword_1E42F8930;
  v48 = unk_1E42F8940;
  v49 = xmmword_1E42F8950;
  v50 = *(_OWORD *)&off_1E42F8960;
  v45 = xmmword_1E42F8910;
  v46 = unk_1E42F8920;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 2;
  v35 = xmmword_1E42F8970;
  v36 = unk_1E42F8980;
  v37 = xmmword_1E42F8990;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(_QWORD *)&v38 = 0x1FCDF994595CDE24;
  *((_QWORD *)&v38 + 1) = "md::PuckLocationAnimationTracingLogic]";
  v39 = 37;
  *(_QWORD *)&v34 = 0xA81ACD73F9C92AA1;
  *((_QWORD *)&v34 + 1) = "md::PuckLocationAnimationTracingContext]";
  *(_QWORD *)&v35 = 39;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = xmmword_1E42F8E88;
  *(_QWORD *)&v46 = 21;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0x87668FB4D087F775;
  *((_QWORD *)&v38 + 1) = "md::OverlaysLogic]";
  v39 = 17;
  *(_QWORD *)&v34 = 0xADE8F13E6C18D970;
  *((_QWORD *)&v34 + 1) = "md::OverlaysContext]";
  *(_QWORD *)&v35 = 19;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 4;
  v47 = xmmword_1E42F8CA8;
  v48 = unk_1E42F8CB8;
  v49 = xmmword_1E42F8CC8;
  v50 = *(_OWORD *)&off_1E42F8CD8;
  v45 = xmmword_1E42F8C88;
  v46 = unk_1E42F8C98;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0x3B36D43422893971;
  *((_QWORD *)&v38 + 1) = "md::DrapingLogic]";
  v39 = 16;
  *(_QWORD *)&v34 = 0x1B9039CBDAB12E5CLL;
  *((_QWORD *)&v34 + 1) = "md::DrapingContext]";
  *(_QWORD *)&v35 = 18;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 4;
  v47 = xmmword_1E42F7C38;
  v48 = unk_1E42F7C48;
  v49 = xmmword_1E42F7C58;
  v50 = *(_OWORD *)&off_1E42F7C68;
  v45 = xmmword_1E42F7C18;
  v46 = unk_1E42F7C28;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0xDEBD99099DA2C65BLL;
  *((_QWORD *)&v38 + 1) = "md::RegistryLogic]";
  v39 = 17;
  *(_QWORD *)&v34 = 0xFBD83FDA8879FF7ELL;
  *((_QWORD *)&v34 + 1) = "md::RegistryContext]";
  *(_QWORD *)&v35 = 19;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = xmmword_1E42F8C58;
  *(_QWORD *)&v46 = 16;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0x8B45D3D7944796A2;
  *((_QWORD *)&v38 + 1) = "md::PendingRegistryLogic]";
  v39 = 24;
  *(_QWORD *)&v34 = 0xA8300AA8F44B09FFLL;
  *((_QWORD *)&v34 + 1) = "md::PendingRegistryContext]";
  *(_QWORD *)&v35 = 26;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = xmmword_1E42F8C10;
  *(_QWORD *)&v46 = 23;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v34 = 0x5CBBA028798243FLL;
  *((_QWORD *)&v34 + 1) = "md::RouteOverlayLogic]";
  *(_QWORD *)&v35 = 21;
  *(_QWORD *)&v44 = 0x13043386C0978CC2;
  *((_QWORD *)&v44 + 1) = "md::RouteOverlayContext]";
  *(_QWORD *)&v45 = 23;
  BYTE8(v45) = 1;
  *(_QWORD *)&v38 = &v39;
  *((_QWORD *)&v38 + 1) = 0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  *(_QWORD *)&v34 = 0x90C2E4CBBB63E301;
  *((_QWORD *)&v34 + 1) = "md::LayerDataLogic]";
  *(_QWORD *)&v35 = 18;
  *(_QWORD *)&v44 = 0x7851AF310F49C988;
  *((_QWORD *)&v44 + 1) = "md::LayerDataLogicContext]";
  *(_QWORD *)&v45 = 25;
  BYTE8(v45) = 1;
  *(_QWORD *)&v38 = &v39;
  *((_QWORD *)&v38 + 1) = 0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  v41 = 0xC267A080D338C6A1;
  v42 = "md::TerrainMeshProviderLogic]";
  v43 = 28;
  *(_QWORD *)&v38 = 0x44B2D9808992962CLL;
  *((_QWORD *)&v38 + 1) = "md::TerrainMeshProviderContext]";
  v39 = 30;
  v40 = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 2;
  v45 = xmmword_1E42EE400;
  v46 = unk_1E42EE410;
  v47 = xmmword_1E42EE420;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 2;
  v35 = xmmword_1E42EE430;
  v36 = unk_1E42EE440;
  v37 = xmmword_1E42EE450;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(_QWORD *)&v38 = 0xAF46DE79C836B0D8;
  *((_QWORD *)&v38 + 1) = "md::TileSelectionLogic]";
  v39 = 22;
  *(_QWORD *)&v34 = 0x64780CBD71DF7CF5;
  *((_QWORD *)&v34 + 1) = "md::TileSelectionContext]";
  *(_QWORD *)&v35 = 24;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 3;
  v47 = xmmword_1E42F8B10;
  v48 = unk_1E42F8B20;
  *(_QWORD *)&v49 = 21;
  v45 = xmmword_1E42F8AF0;
  v46 = unk_1E42F8B00;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0x4BD0C73E70A08DDBLL;
  *((_QWORD *)&v38 + 1) = "md::FlyoverTileDataLogic]";
  v39 = 24;
  *(_QWORD *)&v34 = 0x479E84E48468DB70;
  *((_QWORD *)&v34 + 1) = "md::FlyoverTileDataResolverContext]";
  *(_QWORD *)&v35 = 34;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 3;
  v47 = xmmword_1E42EE480;
  v48 = unk_1E42EE490;
  *(_QWORD *)&v49 = 17;
  v45 = xmmword_1E42EE460;
  v46 = unk_1E42EE470;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0xE3FE7D96C51342ALL;
  *((_QWORD *)&v38 + 1) = "md::FlyoverCompleteTileDataLogic]";
  v39 = 32;
  *(_QWORD *)&v34 = 0xD3D7935EF848FCE7;
  *((_QWORD *)&v34 + 1) = "md::FlyoverCompleteTileDataContext]";
  *(_QWORD *)&v35 = 34;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 3;
  v47 = xmmword_1E42EE4C8;
  v48 = unk_1E42EE4D8;
  *(_QWORD *)&v49 = 23;
  v45 = xmmword_1E42EE4A8;
  v46 = unk_1E42EE4B8;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  v16 = 0xCBF29CE484222325;
  v17 = 0x26u;
  do
    v16 = 0x100000001B3 * (v16 ^ aStdStringViewG_927[v17++]);
  while (v17 != 368);
  v41 = v16;
  v42 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  v43 = 330;
  *(_QWORD *)&v38 = 0x8677AD8BA9352C1DLL;
  *((_QWORD *)&v38 + 1) = "md::ResolvedTileSelectionContext]";
  v39 = 32;
  v40 = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 1;
  v45 = xmmword_1E42F8B38;
  *(_QWORD *)&v46 = 24;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 1;
  v35 = xmmword_1E42F8B50;
  *(_QWORD *)&v36 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(_QWORD *)&v38 = 0x87BA2765F9E38E05;
  *((_QWORD *)&v38 + 1) = "md::PendingSceneLogic]";
  v39 = 21;
  *(_QWORD *)&v34 = 0x9F2276D081C2CB20;
  *((_QWORD *)&v34 + 1) = "md::PendingSceneContext]";
  *(_QWORD *)&v35 = 23;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 5;
  v49 = xmmword_1E42F8BA8;
  v50 = *(_OWORD *)&off_1E42F8BB8;
  v51 = xmmword_1E42F8BC8;
  *(_QWORD *)&v52 = 25;
  v45 = xmmword_1E42F8B68;
  v46 = unk_1E42F8B78;
  v47 = xmmword_1E42F8B88;
  v48 = unk_1E42F8B98;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  v41 = 0x2B7C4502BD3C99C6;
  v42 = "md::ResolvedSceneLogic]";
  v43 = 22;
  *(_QWORD *)&v44 = &v45;
  *(_QWORD *)&v38 = 0x99BED48DEFBBD82BLL;
  *((_QWORD *)&v38 + 1) = "md::SceneContext]";
  v39 = 16;
  v40 = 1;
  *(_QWORD *)&v34 = &v35;
  *((_QWORD *)&v34 + 1) = 1;
  v35 = xmmword_1E42F8C10;
  *(_QWORD *)&v36 = 23;
  *((_QWORD *)&v44 + 1) = 2;
  v45 = xmmword_1E42F8BE0;
  v46 = unk_1E42F8BF0;
  v47 = xmmword_1E42F8C00;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v34, (uint64_t)&v44);
  *(_QWORD *)&v38 = 0x1F3242C85D9F2F62;
  *((_QWORD *)&v38 + 1) = "md::SceneQueryLogic]";
  v39 = 19;
  *(_QWORD *)&v34 = 0xDFC317497CF9A4BFLL;
  *((_QWORD *)&v34 + 1) = "md::SceneQueryContext]";
  *(_QWORD *)&v35 = 21;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 5;
  v49 = xmmword_1E42F7E20;
  v50 = *(_OWORD *)&off_1E42F7E30;
  v51 = xmmword_1E42F7E40;
  *(_QWORD *)&v52 = 19;
  v45 = xmmword_1E42F7DE0;
  v46 = unk_1E42F7DF0;
  v47 = xmmword_1E42F7E00;
  v48 = unk_1E42F7E10;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v34 = 0xD2443A61CED86C69;
  *((_QWORD *)&v34 + 1) = "md::SettingsLogic]";
  *(_QWORD *)&v35 = 17;
  *(_QWORD *)&v44 = 0xC97B9E962ADF4AD4;
  *((_QWORD *)&v44 + 1) = "md::SettingsContext]";
  *(_QWORD *)&v45 = 19;
  BYTE8(v45) = 1;
  *(_QWORD *)&v38 = &v39;
  *((_QWORD *)&v38 + 1) = 0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  *(_QWORD *)&v34 = 0x3F812BA5755E8568;
  *((_QWORD *)&v34 + 1) = "md::SharedResourcesLogic]";
  *(_QWORD *)&v35 = 24;
  *(_QWORD *)&v44 = 0xA60DDA5A69582425;
  *((_QWORD *)&v44 + 1) = "md::SharedResourcesContext]";
  *(_QWORD *)&v45 = 26;
  BYTE8(v45) = 1;
  *(_QWORD *)&v38 = &v39;
  *((_QWORD *)&v38 + 1) = 0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0xDAD5CEE0DC5FF509;
  *((_QWORD *)&v38 + 1) = "md::SkyLogic]";
  v39 = 12;
  *(_QWORD *)&v34 = 0x7C7EC6C7C111B0D0;
  *((_QWORD *)&v34 + 1) = "md::SkyLogicContext]";
  *(_QWORD *)&v35 = 19;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 2;
  v45 = xmmword_1E42F8898;
  v46 = unk_1E42F88A8;
  v47 = xmmword_1E42F88B8;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v34 = 0x2FED70A4459DFCA1;
  *((_QWORD *)&v34 + 1) = "md::StyleLogic]";
  *(_QWORD *)&v35 = 14;
  *(_QWORD *)&v44 = 0xE42D19AFCA302E68;
  *((_QWORD *)&v44 + 1) = "md::StyleLogicContext]";
  *(_QWORD *)&v45 = 21;
  BYTE8(v45) = 1;
  *(_QWORD *)&v38 = &v39;
  *((_QWORD *)&v38 + 1) = 0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0x33D44727E59BE9E9;
  *((_QWORD *)&v38 + 1) = "md::PuckLogic]";
  v39 = 13;
  *(_QWORD *)&v34 = 0x9AEE7E062376E454;
  *((_QWORD *)&v34 + 1) = "md::PuckContext]";
  *(_QWORD *)&v35 = 15;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 9;
  v55 = xmmword_1E42F8A40;
  v56 = *(_OWORD *)&off_1E42F8A50;
  v57 = xmmword_1E42F8A60;
  v58 = 24;
  v51 = xmmword_1E42F8A00;
  v52 = unk_1E42F8A10;
  v53 = xmmword_1E42F8A20;
  v54 = unk_1E42F8A30;
  v47 = xmmword_1E42F89C0;
  v48 = unk_1E42F89D0;
  v49 = xmmword_1E42F89E0;
  v50 = *(_OWORD *)&off_1E42F89F0;
  v45 = xmmword_1E42F89A0;
  v46 = unk_1E42F89B0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v34 = 0x6139471CB89383CBLL;
  *((_QWORD *)&v34 + 1) = "md::NonTiledAssetLogic]";
  *(_QWORD *)&v35 = 22;
  *(_QWORD *)&v44 = 0x932EE29454ABDC4ELL;
  *((_QWORD *)&v44 + 1) = "md::NonTiledAssetContext]";
  *(_QWORD *)&v45 = 24;
  BYTE8(v45) = 1;
  *(_QWORD *)&v38 = &v39;
  *((_QWORD *)&v38 + 1) = 0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  *(_QWORD *)&v38 = 0x652FEFC5C602CC21;
  *((_QWORD *)&v38 + 1) = "md::StandardLogic]";
  v39 = 17;
  *(_QWORD *)&v34 = 0xFFA06A69D924B0E8;
  *((_QWORD *)&v34 + 1) = "md::StandardLogicContext]";
  *(_QWORD *)&v35 = 24;
  BYTE8(v35) = 1;
  *(_QWORD *)&v44 = &v45;
  *((_QWORD *)&v44 + 1) = 2;
  v45 = xmmword_1E42F7EA0;
  v46 = unk_1E42F7EB0;
  v47 = xmmword_1E42F7EC0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(_QWORD *)&v34 = 0x41948F4CADE567A1;
  *((_QWORD *)&v34 + 1) = "md::DebugDrawLogic]";
  *(_QWORD *)&v35 = 18;
  *(_QWORD *)&v44 = 0x3619066E3FB5F2CLL;
  *((_QWORD *)&v44 + 1) = "md::DebugDrawContext]";
  *(_QWORD *)&v45 = 20;
  BYTE8(v45) = 1;
  *(_QWORD *)&v38 = &v39;
  *((_QWORD *)&v38 + 1) = 0;
  v41 = (unint64_t)&v43;
  v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  if (*(_BYTE *)(a1 + 600))
  {
    *(_QWORD *)&v38 = 0xBCE247AEE562B774;
    *((_QWORD *)&v38 + 1) = "md::CollectMapDataLogic<md::MapDataType::Flyover>]";
    v39 = 49;
    *(_QWORD *)&v34 = 0x4B05BEFA631D0889;
    *((_QWORD *)&v34 + 1) = "md::CollectMapDataContext<md::MapDataType::Flyover>]";
    *(_QWORD *)&v35 = 51;
    BYTE8(v35) = 1;
    *(_QWORD *)&v44 = &v45;
    *((_QWORD *)&v44 + 1) = 1;
    v45 = xmmword_1E42F8C58;
    *(_QWORD *)&v46 = 16;
    v41 = (unint64_t)&v43;
    v42 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
    v41 = 0x1643CA7DB4F8EC0BLL;
    v42 = "md::CollectRenderablesLogic<md::MapDataType::Flyover, md::FlyoverRenderable>]";
    v43 = 76;
    *(_QWORD *)&v44 = &v45;
    *(_QWORD *)&v38 = 0x57AAF780DF3EC6C0;
    *((_QWORD *)&v38 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::Flyover>]";
    v39 = 60;
    v40 = 1;
    *((_QWORD *)&v44 + 1) = 1;
    v45 = xmmword_1E42F7F18;
    *(_QWORD *)&v46 = 19;
    *(_QWORD *)&v34 = &v35;
    *((_QWORD *)&v34 + 1) = 1;
    v35 = xmmword_1E42EE4F0;
    *(_QWORD *)&v36 = 51;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
    *(_QWORD *)&v38 = 0x3FE9EE0C18B7C16;
    *((_QWORD *)&v38 + 1) = "md::CollectMapDataLogic<md::MapDataType::PolarFlyover>]";
    v39 = 54;
    *(_QWORD *)&v34 = 0xE4007F1EDCD91179;
    *((_QWORD *)&v34 + 1) = "md::CollectMapDataContext<md::MapDataType::PolarFlyover>]";
    *(_QWORD *)&v35 = 56;
    BYTE8(v35) = 1;
    *(_QWORD *)&v44 = &v45;
    *((_QWORD *)&v44 + 1) = 1;
    v45 = xmmword_1E42F8C58;
    *(_QWORD *)&v46 = 16;
    v41 = (unint64_t)&v43;
    v42 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
    v41 = 0xAE08CA453A162E8BLL;
    v42 = "md::CollectRenderablesLogic<md::MapDataType::PolarFlyover, md::FlyoverRenderable>]";
    v43 = 81;
    *(_QWORD *)&v44 = &v45;
    *(_QWORD *)&v38 = 0x4F6DB855E2E136BALL;
    *((_QWORD *)&v38 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::PolarFlyover>]";
    v39 = 65;
    v40 = 1;
    *((_QWORD *)&v44 + 1) = 1;
    v45 = xmmword_1E42F7F18;
    *(_QWORD *)&v46 = 19;
    *(_QWORD *)&v34 = &v35;
    *((_QWORD *)&v34 + 1) = 1;
    v35 = xmmword_1E42EE508;
    *(_QWORD *)&v36 = 56;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  }
  v18 = *(unsigned __int8 *)(a1 + 568);
  if (*(_BYTE *)(a1 + 568))
  {
    LOWORD(v44) = 75;
    WORD1(v44) = v18;
    DWORD1(v44) = 327759;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x4Bu, &v44)+ 18) = v18 << 16;
    v19 = WORD3(v44);
    v20 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v44), (_WORD *)&v44 + 2);
    v21 = v19 << 16;
  }
  else
  {
    LOWORD(v44) = 10;
    WORD1(v44) = v18;
    v20 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0xAu, &v44);
    v21 = v18 << 16;
  }
  *(_DWORD *)((char *)v20 + 18) = v21;
  LOWORD(v44) = 27;
  WORD1(v44) = v18;
  WORD2(v44) = 15;
  WORD3(v44) = v18;
  WORD4(v44) = 28;
  WORD5(v44) = v18;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x1Bu, &v44)+ 18) = (v18 << 16) | 1;
  v22 = WORD3(v44);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v44), (_WORD *)&v44 + 2)+ 18) = (v22 << 16) | 1;
  v23 = WORD5(v44);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v44), (_WORD *)&v44 + 4)+ 18) = (v23 << 16) | 1;
  if (*(_BYTE *)(a1 + 568))
  {
    LOWORD(v44) = 76;
    WORD1(v44) = v18;
    WORD2(v44) = 77;
    WORD3(v44) = v18;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x4Cu, &v44)+ 18) = (v18 << 16) | 1;
    v24 = WORD3(v44);
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v44), (_WORD *)&v44 + 2)+ 18) = (v24 << 16) | 1;
  }
  LOBYTE(v44) = 44;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v33, 0x2Cu, &v44)+ 17) = 1;
  LOBYTE(v44) = 40;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v33, 0x28u, &v44)+ 17) = 1;
  LOBYTE(v44) = 18;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v33, 0x12u, &v44)+ 17) = 1;
  v25 = *(unsigned __int8 *)(a1 + 568);
  LOWORD(v44) = 11;
  if (v25)
    v26 = 7;
  else
    v26 = 2;
  WORD1(v44) = v26;
  WORD2(v44) = 12;
  WORD3(v44) = v26;
  WORD4(v44) = 71;
  WORD5(v44) = v26;
  WORD6(v44) = 72;
  HIWORD(v44) = v26;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0xBu, &v44)+ 18) = (v26 << 16) | 2;
  v27 = WORD3(v44);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v44), (_WORD *)&v44 + 2)+ 18) = (v27 << 16) | 2;
  v28 = WORD5(v44);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v44), (_WORD *)&v44 + 4)+ 18) = (v28 << 16) | 2;
  v29 = HIWORD(v44);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v44), (_WORD *)&v44 + 6)+ 18) = (v29 << 16) | 2;
  if (*(_BYTE *)(a1 + 568))
  {
    LODWORD(v44) = 327761;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x51u, &v44)+ 18) = 327682;
  }
  LOWORD(v44) = 40;
  WORD1(v44) = a3;
  v30 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x28u, &v44);
  if (a3)
    v31 = 65538;
  else
    v31 = 2;
  *(_DWORD *)((char *)v30 + 18) = v31;
  LOBYTE(v44) = 41;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v33, 0x29u, &v44)+ 17) = 2;
  LOBYTE(v44) = 42;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v33, 0x2Au, &v44)+ 17) = 2;
  return a1;
}

void sub_19F66DAF0(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;

  *(_QWORD *)v1 = &off_1E42A1BF8;
  if (*((_BYTE *)v1 + 548))
    *((_BYTE *)v1 + 548) = 0;
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void md::S2TileFetcher::~S2TileFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::S2TileFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  objc_msgSend(v2, "size");
  objc_msgSend(v2, "scale");
  objc_msgSend(v2, "style");
  v3 = GEOS2TileKeyMake();

  return v3;
}

void sub_19F66DC30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F66DCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66DDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66DE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66DF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66DFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66E038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66E0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66E180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66E20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66E2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66E5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66E8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66E988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F66EB28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F66F0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, std::__shared_weak_count *a6, uint64_t a7, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  if (a6)
  {
    p_shared_owners = (unint64_t *)&a6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a6->__on_zero_shared)(a6);
      std::__shared_weak_count::__release_weak(a6);
    }
  }
  if (a4)
  {
    v10 = (unint64_t *)&a4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_19F672A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);

  gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19F672F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  v24 = a14;
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = a12;
  if (a12)
  {
    v28 = (unint64_t *)&a12->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a20)
  {
    a21 = a20;
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 40))(a23);
  }
  _Unwind_Resume(a1);
}

void sub_19F67343C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtZAtEnd(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;

  v4 = *(_QWORD *)(a1 + 16 * a4 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD **)(v4 + 72);
  if (!v5
    || (v6 = *v5 + 80 * *((unsigned __int8 *)v5 + a3 + 16), v7 = *(unsigned __int16 *)(v6 + 10), !*(_WORD *)(v6 + 10)))
  {
LABEL_28:
    v19 = a1 + 16 * a4;
    v20 = *(unsigned __int16 *)(v19 + 56);
    if (*(_WORD *)(v19 + 56))
    {
      v21 = *(_QWORD *)(v19 + 48);
      v22 = v21 + 8 * v20;
      while (1)
      {
        v24 = *(_QWORD **)(*(_QWORD *)v21 + 72);
        if (v24)
        {
          v25 = *v24 + 80 * *((unsigned __int8 *)v24 + a3 + 16);
          v26 = *(unsigned __int16 *)(v25 + 10);
          if (!*(_WORD *)(v25 + 10))
          {
            v23 = 0;
            goto LABEL_31;
          }
          v27 = *(unsigned __int8 **)v25;
          if (!*(_BYTE *)(v25 + 15))
          {
            v36 = *(unsigned __int16 *)(v25 + 10);
            v28 = *(unsigned __int8 **)v25;
            while (*v28 != a2)
            {
              ++v28;
              if (!--v36)
              {
                LOWORD(v28) = (_WORD)v27 + v26;
                break;
              }
            }
LABEL_52:
            v23 = (_WORD)v28 - (_WORD)v27;
LABEL_31:
            if ((_DWORD)v26 != v23)
              return 1;
            goto LABEL_32;
          }
          v28 = *(unsigned __int8 **)v25;
          v29 = v26;
          if (v26 < 0x1E)
          {
            v30 = 0;
            while (1)
            {
              v31 = v27[v30];
              if (v31 >= a2)
                break;
              if (v26 == ++v30)
                goto LABEL_32;
            }
            if (v31 == a2)
              v23 = v30;
            else
              v23 = v26;
            goto LABEL_31;
          }
          do
          {
            v32 = v29 >> 1;
            v33 = &v28[v29 >> 1];
            v35 = *v33;
            v34 = v33 + 1;
            v29 += ~(v29 >> 1);
            if (v35 < a2)
              v28 = v34;
            else
              v29 = v32;
          }
          while (v29);
          if (v28 != &v27[v26] && *v28 == a2)
            goto LABEL_52;
        }
LABEL_32:
        v21 += 8;
        if (v21 == v22)
          return 0;
      }
    }
    return 0;
  }
  v8 = *(unsigned __int8 **)v6;
  if (!*(_BYTE *)(v6 + 15))
  {
    v11 = *(unsigned __int16 *)(v6 + 10);
    v12 = *(unsigned __int8 **)v6;
    while (*v12 != a2)
    {
      ++v12;
      if (!--v11)
      {
        LOWORD(v12) = (_WORD)v8 + v7;
        break;
      }
    }
LABEL_22:
    if ((_DWORD)v7 == (unsigned __int16)((_WORD)v12 - (_WORD)v8))
      goto LABEL_28;
    return 1;
  }
  if (v7 >= 0x1E)
  {
    v12 = *(unsigned __int8 **)v6;
    v13 = v7;
    do
    {
      v14 = v13 >> 1;
      v15 = &v12[v13 >> 1];
      v17 = *v15;
      v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2)
        v12 = v16;
      else
        v13 = v14;
    }
    while (v13);
    if (v12 == &v8[v7] || *v12 != a2)
      goto LABEL_28;
    goto LABEL_22;
  }
  v9 = 0;
  while (1)
  {
    v10 = v8[v9];
    if (v10 >= a2)
      break;
    if (v7 == ++v9)
      goto LABEL_28;
  }
  if (v10 == a2)
    v18 = v9;
  else
    v18 = v7;
  if ((_DWORD)v7 == v18)
    goto LABEL_28;
  return 1;
}

int *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKeyAtZ<float>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  int *result;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned int v41;

  v5 = *(_QWORD *)(a1 + 16 * a4 + 16);
  if (v5)
  {
    v6 = a1 + 16 * a4;
    v7 = *(unsigned __int16 *)(v6 + 56);
    if (!*(_WORD *)(v6 + 56))
      return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(*(int **)(v5 + 72), a2, a3, a5);
    v8 = *(_QWORD *)(v6 + 48);
    v9 = v8 + 8 * v7;
    if (a3 >= 0x17)
      v10 = 23;
    else
      v10 = a3;
    while (1)
    {
      v12 = *(uint64_t **)(*(_QWORD *)v8 + 72);
      if (!v12)
        goto LABEL_8;
      v15 = *v12;
      v14 = v12 + 2;
      v13 = v15;
      v16 = (unsigned __int8 **)(v15 + 80 * *((unsigned __int8 *)v14 + a3));
      v17 = *((unsigned __int16 *)v16 + 5);
      if (!*((_WORD *)v16 + 5))
      {
        v11 = 0;
        goto LABEL_7;
      }
      v18 = (uint64_t)*v16;
      if (!*((_BYTE *)v16 + 15))
        break;
      v19 = *v16;
      v20 = v17;
      if (v17 >= 0x1E)
      {
        do
        {
          v23 = v20 >> 1;
          v24 = &v19[v20 >> 1];
          v26 = *v24;
          v25 = v24 + 1;
          v20 += ~(v20 >> 1);
          if (v26 < a2)
            v19 = v25;
          else
            v20 = v23;
        }
        while (v20);
        if (v19 == (unsigned __int8 *)(v18 + v17) || *v19 != a2)
          goto LABEL_8;
        goto LABEL_28;
      }
      v21 = 0;
      while (1)
      {
        v22 = *(unsigned __int8 *)(v18 + v21);
        if (v22 >= a2)
          break;
        if (v17 == ++v21)
          goto LABEL_8;
      }
      if (v22 == a2)
        v11 = v21;
      else
        v11 = v17;
LABEL_7:
      if ((_DWORD)v17 != v11)
      {
        v29 = *((unsigned __int8 *)v14 + v10);
        v30 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        v31 = (unsigned __int8 *)*(unsigned __int16 *)(v30 + 42);
        if (!*(_WORD *)(v30 + 42))
          return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        v32 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        v33 = *(_QWORD *)(v32 + 32);
        if (*(_BYTE *)(v32 + 47))
        {
          if (v31 < 0x1E)
          {
            v34 = 0;
            result = &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              v35 = v34[v33];
              if (v35 >= a2)
                break;
              if (v31 == ++v34)
                return result;
            }
            if (v35 != a2)
              LOWORD(v34) = (_WORD)v31;
            if (v31 <= (unsigned __int16)v34)
              return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            return (int *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 40) + 4 * (unsigned __int16)v34);
          }
          v34 = *(unsigned __int8 **)(v32 + 32);
          v37 = v31;
          do
          {
            v38 = (unsigned __int8 *)((unint64_t)v37 >> 1);
            v39 = &v34[(unint64_t)v37 >> 1];
            v41 = *v39;
            v40 = v39 + 1;
            v37 += ~((unint64_t)v37 >> 1);
            if (v41 < a2)
              v34 = v40;
            else
              v37 = v38;
          }
          while (v37);
          if (v34 == &v31[v33] || *v34 != a2)
            return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        else
        {
          v36 = v31;
          v34 = *(unsigned __int8 **)(v32 + 32);
          while (*v34 != a2)
          {
            ++v34;
            if (!--v36)
            {
              LOWORD(v34) = v33 + (_WORD)v31;
              break;
            }
          }
        }
        LOWORD(v34) = (_WORD)v34 - v33;
        if (v31 <= (unsigned __int16)v34)
          return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        return (int *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 40) + 4 * (unsigned __int16)v34);
      }
LABEL_8:
      v8 += 8;
      if (v8 == v9)
        return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(*(int **)(v5 + 72), a2, a3, a5);
    }
    v27 = *((unsigned __int16 *)v16 + 5);
    v19 = *v16;
    while (*v19 != a2)
    {
      ++v19;
      if (!--v27)
      {
        LOWORD(v19) = v18 + v17;
        break;
      }
    }
LABEL_28:
    v11 = (_WORD)v19 - v18;
    goto LABEL_7;
  }
  if (a5)
    *a5 = 0;
  return (int *)gss::defaultValueForKey<gss::ScenePropertyID,float>(a2);
}

int *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKeyAtZ<unsigned int>(uint64_t a1, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  int *result;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned int v41;

  v4 = *(_QWORD *)(a1 + 16 * a3 + 16);
  if (v4)
  {
    v6 = a1 + 16 * a3;
    v7 = *(unsigned __int16 *)(v6 + 56);
    if (!*(_WORD *)(v6 + 56))
      return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v4 + 72), 0x15u, a2, a4);
    v8 = *(_QWORD *)(v6 + 48);
    v9 = v8 + 8 * v7;
    if (a2 >= 0x17)
      v10 = 23;
    else
      v10 = a2;
    while (1)
    {
      v12 = *(uint64_t **)(*(_QWORD *)v8 + 72);
      if (!v12)
        goto LABEL_8;
      v15 = *v12;
      v14 = v12 + 2;
      v13 = v15;
      v16 = v15 + 80 * *((unsigned __int8 *)v14 + a2);
      v17 = *(unsigned __int16 *)(v16 + 10);
      if (!*(_WORD *)(v16 + 10))
      {
        v11 = 0;
        goto LABEL_7;
      }
      v18 = *(unsigned __int8 **)v16;
      if (!*(_BYTE *)(v16 + 15))
        break;
      v19 = *(unsigned __int8 **)v16;
      v20 = v17;
      if (v17 >= 0x1E)
      {
        do
        {
          v23 = v20 >> 1;
          v24 = &v19[v20 >> 1];
          v26 = *v24;
          v25 = v24 + 1;
          v20 += ~(v20 >> 1);
          if (v26 < 0x15)
            v19 = v25;
          else
            v20 = v23;
        }
        while (v20);
        if (v19 == &v18[v17] || *v19 != 21)
          goto LABEL_8;
        goto LABEL_28;
      }
      v21 = 0;
      while (1)
      {
        v22 = v18[v21];
        if (v22 >= 0x15)
          break;
        if (v17 == ++v21)
          goto LABEL_8;
      }
      if (v22 == 21)
        v11 = v21;
      else
        v11 = v17;
LABEL_7:
      if ((_DWORD)v17 != v11)
      {
        v29 = *((unsigned __int8 *)v14 + v10);
        v30 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        v31 = (unsigned __int8 *)*(unsigned __int16 *)(v30 + 42);
        if (!*(_WORD *)(v30 + 42))
          return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        v32 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        v33 = *(_QWORD *)(v32 + 32);
        if (*(_BYTE *)(v32 + 47))
        {
          if (v31 < 0x1E)
          {
            v34 = 0;
            result = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              v35 = v34[v33];
              if (v35 >= 0x15)
                break;
              if (v31 == ++v34)
                return result;
            }
            if (v35 != 21)
              LOWORD(v34) = (_WORD)v31;
            if (v31 <= (unsigned __int16)v34)
              return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            return (int *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 40) + 4 * (unsigned __int16)v34);
          }
          v34 = *(unsigned __int8 **)(v32 + 32);
          v37 = (unint64_t)v31;
          do
          {
            v38 = (_BYTE *)(v37 >> 1);
            v39 = &v34[v37 >> 1];
            v41 = *v39;
            v40 = v39 + 1;
            v37 += ~(v37 >> 1);
            if (v41 < 0x15)
              v34 = v40;
            else
              v37 = (unint64_t)v38;
          }
          while (v37);
          if (v34 == &v31[v33] || *v34 != 21)
            return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        else
        {
          v36 = v31;
          v34 = *(unsigned __int8 **)(v32 + 32);
          while (*v34 != 21)
          {
            ++v34;
            if (!--v36)
            {
              LOWORD(v34) = v33 + (_WORD)v31;
              break;
            }
          }
        }
        LOWORD(v34) = (_WORD)v34 - v33;
        if (v31 <= (unsigned __int16)v34)
          return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        return (int *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 40) + 4 * (unsigned __int16)v34);
      }
LABEL_8:
      v8 += 8;
      if (v8 == v9)
        return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v4 + 72), 0x15u, a2, a4);
    }
    v27 = *(unsigned __int16 *)(v16 + 10);
    v19 = *(unsigned __int8 **)v16;
    while (*v19 != 21)
    {
      ++v19;
      if (!--v27)
      {
        LOWORD(v19) = (_WORD)v18 + v17;
        break;
      }
    }
LABEL_28:
    v11 = (_WORD)v19 - (_WORD)v18;
    goto LABEL_7;
  }
  if (a4)
    *a4 = 0;
  return (int *)gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(0x15u);
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(uint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int8 ***v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int16 v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;

  v4 = *(_QWORD *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,float>(a2);
  }
  v5 = result + 16 * a3;
  v6 = *(unsigned __int16 *)(v5 + 56);
  if (*(_WORD *)(v5 + 56))
  {
    v7 = *(_QWORD *)(v5 + 48);
    v8 = v7 + 8 * v6;
    while (1)
    {
      v10 = *(unsigned __int8 ****)(*(_QWORD *)v7 + 72);
      if (!v10)
        goto LABEL_6;
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        v9 = 0;
        goto LABEL_5;
      }
      v13 = (uint64_t)*v11;
      if (!*((_BYTE *)v11 + 15))
        break;
      v14 = *v11;
      v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          v18 = v15 >> 1;
          v19 = &v14[v15 >> 1];
          v21 = *v19;
          v20 = v19 + 1;
          result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2)
            v14 = v20;
          else
            v15 = v18;
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2)
          goto LABEL_6;
        goto LABEL_26;
      }
      v16 = 0;
      while (1)
      {
        v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2)
          break;
        if (v12 == ++v16)
          goto LABEL_6;
      }
      if (v17 == a2)
        v9 = v16;
      else
        v9 = *((_WORD *)v11 + 5);
LABEL_5:
      if ((_DWORD)v12 != v9)
      {
        v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
        if (!*((_WORD *)v11 + 21))
          return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        v29 = v11[4];
        if (*((_BYTE *)v11 + 47))
        {
          if (v28 < 0x1E)
          {
            v30 = 0;
            result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              v31 = v30[(_QWORD)v29];
              if (v31 >= a2)
                break;
              if (v28 == ++v30)
                return result;
            }
            if (v31 != a2)
              LOWORD(v30) = *((_WORD *)v11 + 21);
            if (v28 > (unsigned __int16)v30)
              return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          v30 = v11[4];
          v44 = *((unsigned __int16 *)v11 + 21);
          do
          {
            v45 = v44 >> 1;
            v46 = &v30[v44 >> 1];
            v48 = *v46;
            v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2)
              v30 = v47;
            else
              v44 = v45;
          }
          while (v44);
          if (v30 == &v28[(_QWORD)v29] || *v30 != a2)
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        else
        {
          v42 = *((unsigned __int16 *)v11 + 21);
          v30 = v11[4];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30)
          return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8)
        goto LABEL_30;
    }
    v22 = *((unsigned __int16 *)v11 + 5);
    v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23)
    goto LABEL_61;
  v11 = *v23;
  v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5))
    goto LABEL_61;
  v25 = (uint64_t)*v11;
  if (!*((_BYTE *)v11 + 15))
  {
    v32 = *((unsigned __int16 *)v11 + 5);
    v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if ((_DWORD)v24 != (unsigned __int16)((_WORD)v33 - v25))
      goto LABEL_68;
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    v33 = *v11;
    v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      v35 = v34 >> 1;
      v36 = &v33[v34 >> 1];
      v38 = *v36;
      v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2)
        v33 = v37;
      else
        v34 = v35;
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2)
      goto LABEL_60;
LABEL_61:
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,float>(a2);
  }
  v26 = 0;
  while (1)
  {
    v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2)
      break;
    if (v24 == ++v26)
      goto LABEL_61;
  }
  if (v27 == a2)
    v39 = v26;
  else
    v39 = *((_WORD *)v11 + 5);
  if ((_DWORD)v24 == v39)
    goto LABEL_61;
LABEL_68:
  v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
  if (!*((_WORD *)v11 + 21))
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v29 = v11[4];
  if (*((_BYTE *)v11 + 47))
  {
    if (v40 < 0x1E)
    {
      v30 = 0;
      result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        v41 = v30[(_QWORD)v29];
        if (v41 >= a2)
          break;
        if (v40 == ++v30)
          return result;
      }
      if (v41 != a2)
        LOWORD(v30) = *((_WORD *)v11 + 21);
      if ((_DWORD)v40 == (unsigned __int16)v30)
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      goto LABEL_109;
    }
    v30 = v11[4];
    v49 = *((unsigned __int16 *)v11 + 21);
    do
    {
      v50 = v49 >> 1;
      v51 = &v30[v49 >> 1];
      v53 = *v51;
      v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2)
        v30 = v52;
      else
        v49 = v50;
    }
    while (v49);
    if (v30 == &v40[(_QWORD)v29] || *v30 != a2)
      return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  else
  {
    v43 = *((unsigned __int16 *)v11 + 21);
    v30 = v11[4];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if ((_DWORD)v40 == (unsigned __int16)v30)
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_109:
  if (v40 > (unsigned __int16)v30)
    return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
  return result;
}

unint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned char>(unint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int8 ***v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int16 v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;

  v4 = *(_QWORD *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (unint64_t)gss::defaultValueForKey<gss::ScenePropertyID,unsigned char>();
  }
  v5 = (char *)(result + 16 * a3);
  v6 = *((unsigned __int16 *)v5 + 28);
  if (*((_WORD *)v5 + 28))
  {
    v7 = *((_QWORD *)v5 + 6);
    v8 = v7 + 8 * v6;
    while (1)
    {
      v10 = *(unsigned __int8 ****)(*(_QWORD *)v7 + 72);
      if (!v10)
        goto LABEL_6;
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        v9 = 0;
        goto LABEL_5;
      }
      v13 = (uint64_t)*v11;
      if (!*((_BYTE *)v11 + 15))
        break;
      v14 = *v11;
      v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          v18 = v15 >> 1;
          v19 = &v14[v15 >> 1];
          v21 = *v19;
          v20 = v19 + 1;
          result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2)
            v14 = v20;
          else
            v15 = v18;
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2)
          goto LABEL_6;
        goto LABEL_26;
      }
      v16 = 0;
      while (1)
      {
        v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2)
          break;
        if (v12 == ++v16)
          goto LABEL_6;
      }
      if (v17 == a2)
        v9 = v16;
      else
        v9 = *((_WORD *)v11 + 5);
LABEL_5:
      if ((_DWORD)v12 != v9)
      {
        v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 13);
        if (!*((_WORD *)v11 + 13))
          return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        v29 = v11[2];
        if (*((_BYTE *)v11 + 31))
        {
          if (v28 < 0x1E)
          {
            v30 = 0;
            result = (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              v31 = v30[(_QWORD)v29];
              if (v31 >= a2)
                break;
              if (v28 == ++v30)
                return result;
            }
            if (v31 != a2)
              LOWORD(v30) = *((_WORD *)v11 + 13);
            if (v28 > (unsigned __int16)v30)
              return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
            return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          v30 = v11[2];
          v44 = *((unsigned __int16 *)v11 + 13);
          do
          {
            v45 = v44 >> 1;
            v46 = &v30[v44 >> 1];
            v48 = *v46;
            v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2)
              v30 = v47;
            else
              v44 = v45;
          }
          while (v44);
          if (v30 == &v28[(_QWORD)v29] || *v30 != a2)
            return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        else
        {
          v42 = *((unsigned __int16 *)v11 + 13);
          v30 = v11[2];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30)
          return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
        return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8)
        goto LABEL_30;
    }
    v22 = *((unsigned __int16 *)v11 + 5);
    v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23)
    goto LABEL_61;
  v11 = *v23;
  v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5))
    goto LABEL_61;
  v25 = (uint64_t)*v11;
  if (!*((_BYTE *)v11 + 15))
  {
    v32 = *((unsigned __int16 *)v11 + 5);
    v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if ((_DWORD)v24 != (unsigned __int16)((_WORD)v33 - v25))
      goto LABEL_68;
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    v33 = *v11;
    v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      v35 = v34 >> 1;
      v36 = &v33[v34 >> 1];
      v38 = *v36;
      v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2)
        v33 = v37;
      else
        v34 = v35;
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2)
      goto LABEL_60;
LABEL_61:
    if (a4)
      *a4 = 0;
    return (unint64_t)gss::defaultValueForKey<gss::ScenePropertyID,unsigned char>();
  }
  v26 = 0;
  while (1)
  {
    v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2)
      break;
    if (v24 == ++v26)
      goto LABEL_61;
  }
  if (v27 == a2)
    v39 = v26;
  else
    v39 = *((_WORD *)v11 + 5);
  if ((_DWORD)v24 == v39)
    goto LABEL_61;
LABEL_68:
  v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 13);
  if (!*((_WORD *)v11 + 13))
    return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v29 = v11[2];
  if (*((_BYTE *)v11 + 31))
  {
    if (v40 < 0x1E)
    {
      v30 = 0;
      result = (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        v41 = v30[(_QWORD)v29];
        if (v41 >= a2)
          break;
        if (v40 == ++v30)
          return result;
      }
      if (v41 != a2)
        LOWORD(v30) = *((_WORD *)v11 + 13);
      if ((_DWORD)v40 == (unsigned __int16)v30)
        return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      goto LABEL_109;
    }
    v30 = v11[2];
    v49 = *((unsigned __int16 *)v11 + 13);
    do
    {
      v50 = v49 >> 1;
      v51 = &v30[v49 >> 1];
      v53 = *v51;
      v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2)
        v30 = v52;
      else
        v49 = v50;
    }
    while (v49);
    if (v30 == &v40[(_QWORD)v29] || *v30 != a2)
      return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  else
  {
    v43 = *((unsigned __int16 *)v11 + 13);
    v30 = v11[2];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if ((_DWORD)v40 == (unsigned __int16)v30)
    return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_109:
  if (v40 > (unsigned __int16)v30)
    return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
  return result;
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<int>(uint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int8 ***v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int16 v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;

  v4 = *(_QWORD *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,int>(a2);
  }
  v5 = result + 16 * a3;
  v6 = *(unsigned __int16 *)(v5 + 56);
  if (*(_WORD *)(v5 + 56))
  {
    v7 = *(_QWORD *)(v5 + 48);
    v8 = v7 + 8 * v6;
    while (1)
    {
      v10 = *(unsigned __int8 ****)(*(_QWORD *)v7 + 72);
      if (!v10)
        goto LABEL_6;
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        v9 = 0;
        goto LABEL_5;
      }
      v13 = (uint64_t)*v11;
      if (!*((_BYTE *)v11 + 15))
        break;
      v14 = *v11;
      v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          v18 = v15 >> 1;
          v19 = &v14[v15 >> 1];
          v21 = *v19;
          v20 = v19 + 1;
          result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2)
            v14 = v20;
          else
            v15 = v18;
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2)
          goto LABEL_6;
        goto LABEL_26;
      }
      v16 = 0;
      while (1)
      {
        v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2)
          break;
        if (v12 == ++v16)
          goto LABEL_6;
      }
      if (v17 == a2)
        v9 = v16;
      else
        v9 = *((_WORD *)v11 + 5);
LABEL_5:
      if ((_DWORD)v12 != v9)
      {
        v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
        if (!*((_WORD *)v11 + 21))
          return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        v29 = v11[4];
        if (*((_BYTE *)v11 + 47))
        {
          if (v28 < 0x1E)
          {
            v30 = 0;
            result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              v31 = v30[(_QWORD)v29];
              if (v31 >= a2)
                break;
              if (v28 == ++v30)
                return result;
            }
            if (v31 != a2)
              LOWORD(v30) = *((_WORD *)v11 + 21);
            if (v28 > (unsigned __int16)v30)
              return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          v30 = v11[4];
          v44 = *((unsigned __int16 *)v11 + 21);
          do
          {
            v45 = v44 >> 1;
            v46 = &v30[v44 >> 1];
            v48 = *v46;
            v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2)
              v30 = v47;
            else
              v44 = v45;
          }
          while (v44);
          if (v30 == &v28[(_QWORD)v29] || *v30 != a2)
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        else
        {
          v42 = *((unsigned __int16 *)v11 + 21);
          v30 = v11[4];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30)
          return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8)
        goto LABEL_30;
    }
    v22 = *((unsigned __int16 *)v11 + 5);
    v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23)
    goto LABEL_61;
  v11 = *v23;
  v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5))
    goto LABEL_61;
  v25 = (uint64_t)*v11;
  if (!*((_BYTE *)v11 + 15))
  {
    v32 = *((unsigned __int16 *)v11 + 5);
    v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if ((_DWORD)v24 != (unsigned __int16)((_WORD)v33 - v25))
      goto LABEL_68;
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    v33 = *v11;
    v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      v35 = v34 >> 1;
      v36 = &v33[v34 >> 1];
      v38 = *v36;
      v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2)
        v33 = v37;
      else
        v34 = v35;
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2)
      goto LABEL_60;
LABEL_61:
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,int>(a2);
  }
  v26 = 0;
  while (1)
  {
    v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2)
      break;
    if (v24 == ++v26)
      goto LABEL_61;
  }
  if (v27 == a2)
    v39 = v26;
  else
    v39 = *((_WORD *)v11 + 5);
  if ((_DWORD)v24 == v39)
    goto LABEL_61;
LABEL_68:
  v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
  if (!*((_WORD *)v11 + 21))
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v29 = v11[4];
  if (*((_BYTE *)v11 + 47))
  {
    if (v40 < 0x1E)
    {
      v30 = 0;
      result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        v41 = v30[(_QWORD)v29];
        if (v41 >= a2)
          break;
        if (v40 == ++v30)
          return result;
      }
      if (v41 != a2)
        LOWORD(v30) = *((_WORD *)v11 + 21);
      if ((_DWORD)v40 == (unsigned __int16)v30)
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      goto LABEL_109;
    }
    v30 = v11[4];
    v49 = *((unsigned __int16 *)v11 + 21);
    do
    {
      v50 = v49 >> 1;
      v51 = &v30[v49 >> 1];
      v53 = *v51;
      v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2)
        v30 = v52;
      else
        v49 = v50;
    }
    while (v49);
    if (v30 == &v40[(_QWORD)v29] || *v30 != a2)
      return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  else
  {
    v43 = *((unsigned __int16 *)v11 + 21);
    v30 = v11[4];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if ((_DWORD)v40 == (unsigned __int16)v30)
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_109:
  if (v40 > (unsigned __int16)v30)
    return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
  return result;
}

unint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<BOOL>(unint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int8 ***v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int16 v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;

  v4 = *(_QWORD *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (unint64_t)gss::defaultValueForKey<gss::ScenePropertyID,BOOL>();
  }
  v5 = (char *)(result + 16 * a3);
  v6 = *((unsigned __int16 *)v5 + 28);
  if (*((_WORD *)v5 + 28))
  {
    v7 = *((_QWORD *)v5 + 6);
    v8 = v7 + 8 * v6;
    while (1)
    {
      v10 = *(unsigned __int8 ****)(*(_QWORD *)v7 + 72);
      if (!v10)
        goto LABEL_6;
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        v9 = 0;
        goto LABEL_5;
      }
      v13 = (uint64_t)*v11;
      if (!*((_BYTE *)v11 + 15))
        break;
      v14 = *v11;
      v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          v18 = v15 >> 1;
          v19 = &v14[v15 >> 1];
          v21 = *v19;
          v20 = v19 + 1;
          result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2)
            v14 = v20;
          else
            v15 = v18;
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2)
          goto LABEL_6;
        goto LABEL_26;
      }
      v16 = 0;
      while (1)
      {
        v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2)
          break;
        if (v12 == ++v16)
          goto LABEL_6;
      }
      if (v17 == a2)
        v9 = v16;
      else
        v9 = *((_WORD *)v11 + 5);
LABEL_5:
      if ((_DWORD)v12 != v9)
      {
        v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 13);
        if (!*((_WORD *)v11 + 13))
          return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        v29 = v11[2];
        if (*((_BYTE *)v11 + 31))
        {
          if (v28 < 0x1E)
          {
            v30 = 0;
            result = (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              v31 = v30[(_QWORD)v29];
              if (v31 >= a2)
                break;
              if (v28 == ++v30)
                return result;
            }
            if (v31 != a2)
              LOWORD(v30) = *((_WORD *)v11 + 13);
            if (v28 > (unsigned __int16)v30)
              return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
            return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          v30 = v11[2];
          v44 = *((unsigned __int16 *)v11 + 13);
          do
          {
            v45 = v44 >> 1;
            v46 = &v30[v44 >> 1];
            v48 = *v46;
            v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2)
              v30 = v47;
            else
              v44 = v45;
          }
          while (v44);
          if (v30 == &v28[(_QWORD)v29] || *v30 != a2)
            return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        else
        {
          v42 = *((unsigned __int16 *)v11 + 13);
          v30 = v11[2];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30)
          return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
        return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8)
        goto LABEL_30;
    }
    v22 = *((unsigned __int16 *)v11 + 5);
    v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23)
    goto LABEL_61;
  v11 = *v23;
  v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5))
    goto LABEL_61;
  v25 = (uint64_t)*v11;
  if (!*((_BYTE *)v11 + 15))
  {
    v32 = *((unsigned __int16 *)v11 + 5);
    v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if ((_DWORD)v24 != (unsigned __int16)((_WORD)v33 - v25))
      goto LABEL_68;
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    v33 = *v11;
    v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      v35 = v34 >> 1;
      v36 = &v33[v34 >> 1];
      v38 = *v36;
      v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2)
        v33 = v37;
      else
        v34 = v35;
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2)
      goto LABEL_60;
LABEL_61:
    if (a4)
      *a4 = 0;
    return (unint64_t)gss::defaultValueForKey<gss::ScenePropertyID,BOOL>();
  }
  v26 = 0;
  while (1)
  {
    v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2)
      break;
    if (v24 == ++v26)
      goto LABEL_61;
  }
  if (v27 == a2)
    v39 = v26;
  else
    v39 = *((_WORD *)v11 + 5);
  if ((_DWORD)v24 == v39)
    goto LABEL_61;
LABEL_68:
  v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 13);
  if (!*((_WORD *)v11 + 13))
    return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v29 = v11[2];
  if (*((_BYTE *)v11 + 31))
  {
    if (v40 < 0x1E)
    {
      v30 = 0;
      result = (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        v41 = v30[(_QWORD)v29];
        if (v41 >= a2)
          break;
        if (v40 == ++v30)
          return result;
      }
      if (v41 != a2)
        LOWORD(v30) = *((_WORD *)v11 + 13);
      if ((_DWORD)v40 == (unsigned __int16)v30)
        return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      goto LABEL_109;
    }
    v30 = v11[2];
    v49 = *((unsigned __int16 *)v11 + 13);
    do
    {
      v50 = v49 >> 1;
      v51 = &v30[v49 >> 1];
      v53 = *v51;
      v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2)
        v30 = v52;
      else
        v49 = v50;
    }
    while (v49);
    if (v30 == &v40[(_QWORD)v29] || *v30 != a2)
      return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  else
  {
    v43 = *((unsigned __int16 *)v11 + 13);
    v30 = v11[2];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if ((_DWORD)v40 == (unsigned __int16)v30)
    return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_109:
  if (v40 > (unsigned __int16)v30)
    return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
  return result;
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<gm::Matrix<float,2,1>>(uint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int8 ***v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int16 v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;

  v4 = *(_QWORD *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>();
  }
  v5 = result + 16 * a3;
  v6 = *(unsigned __int16 *)(v5 + 56);
  if (*(_WORD *)(v5 + 56))
  {
    v7 = *(_QWORD *)(v5 + 48);
    v8 = v7 + 8 * v6;
    while (1)
    {
      v10 = *(unsigned __int8 ****)(*(_QWORD *)v7 + 72);
      if (!v10)
        goto LABEL_6;
      v11 = *v10;
      v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        v9 = 0;
        goto LABEL_5;
      }
      v13 = (uint64_t)*v11;
      if (!*((_BYTE *)v11 + 15))
        break;
      v14 = *v11;
      v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          v18 = v15 >> 1;
          v19 = &v14[v15 >> 1];
          v21 = *v19;
          v20 = v19 + 1;
          result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2)
            v14 = v20;
          else
            v15 = v18;
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2)
          goto LABEL_6;
        goto LABEL_26;
      }
      v16 = 0;
      while (1)
      {
        v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2)
          break;
        if (v12 == ++v16)
          goto LABEL_6;
      }
      if (v17 == a2)
        v9 = v16;
      else
        v9 = *((_WORD *)v11 + 5);
LABEL_5:
      if ((_DWORD)v12 != v9)
      {
        v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 29);
        if (!*((_WORD *)v11 + 29))
          return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        v29 = v11[6];
        if (*((_BYTE *)v11 + 63))
        {
          if (v28 < 0x1E)
          {
            v30 = 0;
            result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              v31 = v30[(_QWORD)v29];
              if (v31 >= a2)
                break;
              if (v28 == ++v30)
                return result;
            }
            if (v31 != a2)
              LOWORD(v30) = *((_WORD *)v11 + 29);
            if (v28 > (unsigned __int16)v30)
              return (uint64_t)&v29[8 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 28)];
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          v30 = v11[6];
          v44 = *((unsigned __int16 *)v11 + 29);
          do
          {
            v45 = v44 >> 1;
            v46 = &v30[v44 >> 1];
            v48 = *v46;
            v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2)
              v30 = v47;
            else
              v44 = v45;
          }
          while (v44);
          if (v30 == &v28[(_QWORD)v29] || *v30 != a2)
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        else
        {
          v42 = *((unsigned __int16 *)v11 + 29);
          v30 = v11[6];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30)
          return (uint64_t)&v29[8 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 28)];
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8)
        goto LABEL_30;
    }
    v22 = *((unsigned __int16 *)v11 + 5);
    v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23)
    goto LABEL_61;
  v11 = *v23;
  v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5))
    goto LABEL_61;
  v25 = (uint64_t)*v11;
  if (!*((_BYTE *)v11 + 15))
  {
    v32 = *((unsigned __int16 *)v11 + 5);
    v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if ((_DWORD)v24 != (unsigned __int16)((_WORD)v33 - v25))
      goto LABEL_68;
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    v33 = *v11;
    v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      v35 = v34 >> 1;
      v36 = &v33[v34 >> 1];
      v38 = *v36;
      v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2)
        v33 = v37;
      else
        v34 = v35;
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2)
      goto LABEL_60;
LABEL_61:
    if (a4)
      *a4 = 0;
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>();
  }
  v26 = 0;
  while (1)
  {
    v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2)
      break;
    if (v24 == ++v26)
      goto LABEL_61;
  }
  if (v27 == a2)
    v39 = v26;
  else
    v39 = *((_WORD *)v11 + 5);
  if ((_DWORD)v24 == v39)
    goto LABEL_61;
LABEL_68:
  v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 29);
  if (!*((_WORD *)v11 + 29))
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v29 = v11[6];
  if (*((_BYTE *)v11 + 63))
  {
    if (v40 < 0x1E)
    {
      v30 = 0;
      result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        v41 = v30[(_QWORD)v29];
        if (v41 >= a2)
          break;
        if (v40 == ++v30)
          return result;
      }
      if (v41 != a2)
        LOWORD(v30) = *((_WORD *)v11 + 29);
      if ((_DWORD)v40 == (unsigned __int16)v30)
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      goto LABEL_109;
    }
    v30 = v11[6];
    v49 = *((unsigned __int16 *)v11 + 29);
    do
    {
      v50 = v49 >> 1;
      v51 = &v30[v49 >> 1];
      v53 = *v51;
      v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2)
        v30 = v52;
      else
        v49 = v50;
    }
    while (v49);
    if (v30 == &v40[(_QWORD)v29] || *v30 != a2)
      return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  else
  {
    v43 = *((unsigned __int16 *)v11 + 29);
    v30 = v11[6];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if ((_DWORD)v40 == (unsigned __int16)v30)
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_109:
  if (v40 > (unsigned __int16)v30)
    return (uint64_t)&v29[8 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 28)];
  return result;
}

unsigned __int8 *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(unsigned __int8 *result, unsigned int a2, int a3, _BYTE *a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unsigned int v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned __int16 v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unint64_t v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unint64_t v59;
  _BYTE *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;

  v4 = *(_QWORD *)&result[16 * a3 + 16];
  if (!v4)
  {
    if (a4)
      *a4 = 0;
    return (unsigned __int8 *)gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>();
  }
  v5 = (char *)&result[16 * a3];
  v6 = *((unsigned __int16 *)v5 + 28);
  if (!*((_WORD *)v5 + 28))
  {
LABEL_32:
    v24 = *(uint64_t **)(v4 + 72);
    if (v24)
    {
      v25 = a2 >= 0x17 ? 23 : a2;
      v26 = *((unsigned __int8 *)v24 + v25 + 16);
      v27 = *v24;
      v28 = v27 + 80 * v26;
      v29 = *(unsigned __int16 *)(v28 + 10);
      if (*(_WORD *)(v28 + 10))
      {
        v30 = *(unsigned __int8 **)v28;
        if (!*(_BYTE *)(v28 + 15))
        {
          v40 = *(unsigned __int16 *)(v28 + 10);
          v41 = *(unsigned __int8 **)v28;
          while (*v41 != 32)
          {
            ++v41;
            if (!--v40)
            {
              LOWORD(v41) = (_WORD)v30 + v29;
              break;
            }
          }
LABEL_65:
          if ((_DWORD)v29 != (unsigned __int16)((_WORD)v41 - (_WORD)v30))
            goto LABEL_73;
          goto LABEL_66;
        }
        if (v29 < 0x1E)
        {
          v31 = 0;
          while (1)
          {
            v32 = v30[v31];
            if (v32 >= 0x20)
              break;
            if (v29 == ++v31)
              goto LABEL_66;
          }
          if (v32 == 32)
            v47 = v31;
          else
            v47 = v29;
          if ((_DWORD)v29 != v47)
          {
LABEL_73:
            v48 = v27 + 80 * v26;
            v49 = (unsigned __int8 *)*(unsigned __int16 *)(v48 + 58);
            if (!*(_WORD *)(v48 + 58))
              return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            v50 = v27 + 80 * v26;
            v37 = *(_QWORD *)(v50 + 48);
            if (*(_BYTE *)(v50 + 63))
            {
              if (v49 < 0x1E)
              {
                v38 = 0;
                result = (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
                while (1)
                {
                  v51 = v38[v37];
                  if (v51 >= 0x20)
                    break;
                  if (v49 == ++v38)
                    return result;
                }
                if (v51 != 32)
                  LOWORD(v38) = (_WORD)v49;
                if ((_DWORD)v49 == (unsigned __int16)v38)
                  return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
                goto LABEL_115;
              }
              v38 = *(unsigned __int8 **)(v50 + 48);
              v59 = (unint64_t)v49;
              do
              {
                v60 = (_BYTE *)(v59 >> 1);
                v61 = &v38[v59 >> 1];
                v63 = *v61;
                v62 = v61 + 1;
                v59 += ~(v59 >> 1);
                if (v63 < 0x20)
                  v38 = v62;
                else
                  v59 = (unint64_t)v60;
              }
              while (v59);
              if (v38 == &v49[v37] || *v38 != 32)
                return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            }
            else
            {
              v53 = v49;
              v38 = *(unsigned __int8 **)(v50 + 48);
              while (*v38 != 32)
              {
                ++v38;
                if (!--v53)
                {
                  LOWORD(v38) = v37 + (_WORD)v49;
                  break;
                }
              }
            }
            LOWORD(v38) = (_WORD)v38 - v37;
            if ((_DWORD)v49 == (unsigned __int16)v38)
              return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_115:
            if (v49 > (unsigned __int16)v38)
            {
              v64 = v27 + 80 * v26;
              return (unsigned __int8 *)(v37 + *(unsigned __int16 *)(v64 + 56) + 8 * (unsigned __int16)v38);
            }
            return result;
          }
          goto LABEL_66;
        }
        v41 = *(unsigned __int8 **)v28;
        v42 = v29;
        do
        {
          v43 = v42 >> 1;
          v44 = &v41[v42 >> 1];
          v46 = *v44;
          v45 = v44 + 1;
          v42 += ~(v42 >> 1);
          if (v46 < 0x20)
            v41 = v45;
          else
            v42 = v43;
        }
        while (v42);
        if (v41 != &v30[v29] && *v41 == 32)
          goto LABEL_65;
      }
    }
LABEL_66:
    if (a4)
      *a4 = 0;
    return (unsigned __int8 *)gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>();
  }
  v7 = *((_QWORD *)v5 + 6);
  v8 = v7 + 8 * v6;
  if (a2 >= 0x17)
    v9 = 23;
  else
    v9 = a2;
  while (1)
  {
    v11 = *(uint64_t **)(*(_QWORD *)v7 + 72);
    if (!v11)
      goto LABEL_8;
    v14 = *v11;
    v13 = v11 + 2;
    v12 = v14;
    result = (unsigned __int8 *)(v14 + 80 * *((unsigned __int8 *)v13 + a2));
    v15 = (unsigned __int8 *)*((unsigned __int16 *)result + 5);
    if (!*((_WORD *)result + 5))
    {
      v10 = 0;
      goto LABEL_7;
    }
    v16 = *(unsigned __int8 **)result;
    if (!result[15])
    {
      v23 = *((unsigned __int16 *)result + 5);
      result = *(unsigned __int8 **)result;
      while (*result != 32)
      {
        ++result;
        if (!--v23)
        {
          result = &v15[(_QWORD)v16];
          break;
        }
      }
LABEL_28:
      v10 = (_WORD)result - (_WORD)v16;
      goto LABEL_7;
    }
    result = *(unsigned __int8 **)result;
    v17 = (unint64_t)v15;
    if (v15 >= 0x1E)
    {
      do
      {
        v19 = (char *)(v17 >> 1);
        v20 = &result[v17 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v17 += ~(v17 >> 1);
        if (v22 < 0x20)
          result = v21;
        else
          v17 = (unint64_t)v19;
      }
      while (v17);
      if (result == &v15[(_QWORD)v16] || *result != 32)
        goto LABEL_8;
      goto LABEL_28;
    }
    result = 0;
    while (1)
    {
      v18 = result[(_QWORD)v16];
      if (v18 >= 0x20)
        break;
      if (v15 == ++result)
        goto LABEL_8;
    }
    v10 = v18 == 32 ? (unsigned __int16)result : (unsigned __int16)v15;
LABEL_7:
    if ((_DWORD)v15 != v10)
      break;
LABEL_8:
    v7 += 8;
    if (v7 == v8)
      goto LABEL_32;
  }
  v33 = *((unsigned __int8 *)v13 + v9);
  v34 = v12 + 80 * *((unsigned __int8 *)v13 + v9);
  v35 = (unsigned __int8 *)*(unsigned __int16 *)(v34 + 58);
  if (!*(_WORD *)(v34 + 58))
    return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v36 = v12 + 80 * *((unsigned __int8 *)v13 + v9);
  v37 = *(_QWORD *)(v36 + 48);
  if (!*(_BYTE *)(v36 + 63))
  {
    v52 = v35;
    v38 = *(unsigned __int8 **)(v36 + 48);
    while (*v38 != 32)
    {
      ++v38;
      if (!--v52)
      {
        LOWORD(v38) = v37 + (_WORD)v35;
        break;
      }
    }
LABEL_95:
    LOWORD(v38) = (_WORD)v38 - v37;
    if (v35 > (unsigned __int16)v38)
      goto LABEL_109;
    return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  if (v35 >= 0x1E)
  {
    v38 = *(unsigned __int8 **)(v36 + 48);
    v54 = (unint64_t)v35;
    do
    {
      v55 = (_BYTE *)(v54 >> 1);
      v56 = &v38[v54 >> 1];
      v58 = *v56;
      v57 = v56 + 1;
      v54 += ~(v54 >> 1);
      if (v58 < 0x20)
        v38 = v57;
      else
        v54 = (unint64_t)v55;
    }
    while (v54);
    if (v38 == &v35[v37] || *v38 != 32)
      return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    goto LABEL_95;
  }
  v38 = 0;
  result = (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  while (1)
  {
    v39 = v38[v37];
    if (v39 >= 0x20)
      break;
    if (v35 == ++v38)
      return result;
  }
  if (v39 != 32)
    LOWORD(v38) = (_WORD)v35;
  if (v35 > (unsigned __int16)v38)
  {
LABEL_109:
    v64 = v12 + 80 * v33;
    return (unsigned __int8 *)(v37 + *(unsigned __int16 *)(v64 + 56) + 8 * (unsigned __int16)v38);
  }
  return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
}

void gss::Queryable<gss::ScenePropertyID>::~Queryable(uint64_t a1)
{
  geo::read_write_lock *v2;
  const char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_1E42C2A80;
  v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v2)
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  JUMPOUT(0x1A1AF4E00);
}

void gss::Queryable<gss::ScenePropertyID>::sourceCartoStyle(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void gss::Queryable<gss::ScenePropertyID>::targetCartoStyle(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

gss::Allocator *gss::StylePropertySet<gss::ScenePropertyID>::shrink_to_fit(gss::Allocator *result)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int16 v4;
  uint64_t v5;
  gss::Allocator *v6;
  gss::Allocator *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  uint64_t v12;
  gss::Allocator *v13;
  gss::Allocator *v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned __int16 v18;
  uint64_t v19;
  gss::Allocator *v20;
  gss::Allocator *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned __int16 v25;
  uint64_t v26;
  gss::Allocator *v27;
  gss::Allocator *v28;
  uint64_t v29;
  int v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  gss::Allocator *v34;
  const void *v35;
  unint64_t v36;
  uint64_t v37;
  int32x4_t *v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  int32x4_t v43;
  int32x4_t *v44;
  int32x4_t v45;
  int32x4_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;

  v1 = (uint64_t)result;
  if (!*((_BYTE *)result + 14))
  {
    v2 = *((unsigned __int16 *)result + 5);
    v3 = *((unsigned __int8 *)result + 15);
    if (v2 != *((unsigned __int16 *)result + 6) || !*((_BYTE *)result + 15))
    {
      v4 = v2 + 1;
      v5 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 16))(v5, (unsigned __int16)(v2 + 1 + v2), 1);
      v6 = result;
      if (*(_QWORD *)v1)
      {
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1, result, (_BYTE *)result + v4, v3 == 0);
        v8 = gss::Allocator::instance(v7);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)v1, *(unsigned __int16 *)(v1 + 12));
      }
      *(_WORD *)(v1 + 12) = v2;
      *(_QWORD *)v1 = v6;
      *(_WORD *)(v1 + 8) = v4;
    }
  }
  if (!*(_BYTE *)(v1 + 30))
  {
    v9 = *(unsigned __int16 *)(v1 + 26);
    v10 = *(unsigned __int8 *)(v1 + 31);
    if (v9 != *(unsigned __int16 *)(v1 + 28) || !*(_BYTE *)(v1 + 31))
    {
      v11 = v9 + 1;
      v12 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 16))(v12, (unsigned __int16)(v9 + 1 + v9), 1);
      v13 = result;
      if (*(_QWORD *)(v1 + 16))
      {
        geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1 + 16, result, (_BYTE *)result + v11, v10 == 0);
        v15 = gss::Allocator::instance(v14);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(v1 + 16), *(unsigned __int16 *)(v1 + 28));
      }
      *(_WORD *)(v1 + 28) = v9;
      *(_QWORD *)(v1 + 16) = v13;
      *(_WORD *)(v1 + 24) = v11;
    }
  }
  if (!*(_BYTE *)(v1 + 46))
  {
    v16 = *(unsigned __int16 *)(v1 + 42);
    v17 = *(unsigned __int8 *)(v1 + 47);
    if (v16 != *(unsigned __int16 *)(v1 + 44) || !*(_BYTE *)(v1 + 47))
    {
      v18 = (v16 & 0xFFFC) + 4;
      v19 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 16))(v19, (unsigned __int16)(v18 + 4 * v16) & 0xFFFC, 1);
      v20 = result;
      if (*(_QWORD *)(v1 + 32))
      {
        geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1 + 32, result, (gss::Allocator *)((char *)result + v18), v17 == 0);
        v22 = gss::Allocator::instance(v21);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 40))(v22, *(_QWORD *)(v1 + 32), *(unsigned __int16 *)(v1 + 44));
      }
      *(_WORD *)(v1 + 44) = v16;
      *(_QWORD *)(v1 + 32) = v20;
      *(_WORD *)(v1 + 40) = v18;
    }
  }
  if (!*(_BYTE *)(v1 + 62))
  {
    v23 = *(unsigned __int16 *)(v1 + 58);
    v24 = *(unsigned __int8 *)(v1 + 63);
    if (v23 != *(unsigned __int16 *)(v1 + 60) || !*(_BYTE *)(v1 + 63))
    {
      v25 = (v23 & 0xFFF8) + 8;
      v26 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 16))(v26, (unsigned __int16)(v25 + 8 * v23) & 0xFFF8, 1);
      v27 = result;
      if (*(_QWORD *)(v1 + 48))
      {
        geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v1 + 48, result, (gss::Allocator *)((char *)result + v25), v24 == 0);
        v29 = gss::Allocator::instance(v28);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)(v1 + 48), *(unsigned __int16 *)(v1 + 60));
      }
      *(_WORD *)(v1 + 60) = v23;
      *(_QWORD *)(v1 + 48) = v27;
      *(_WORD *)(v1 + 56) = v25;
    }
  }
  if (!*(_BYTE *)(v1 + 78))
  {
    v30 = *(unsigned __int16 *)(v1 + 74);
    v31 = *(unsigned __int8 *)(v1 + 79);
    if (v30 != *(unsigned __int16 *)(v1 + 76) || !*(_BYTE *)(v1 + 79))
    {
      v32 = (v30 & 0xFFF8) + 8;
      v33 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v33 + 16))(v33, (unsigned __int16)(v32 + 16 * v30) & 0xFFF8, 1);
      v34 = result;
      v35 = *(const void **)(v1 + 64);
      if (!v35)
      {
LABEL_45:
        *(_WORD *)(v1 + 76) = v30;
        *(_QWORD *)(v1 + 64) = v34;
        *(_WORD *)(v1 + 72) = v32;
        return result;
      }
      v36 = *(unsigned __int16 *)(v1 + 74);
      if (!*(_WORD *)(v1 + 74))
      {
LABEL_44:
        v51 = gss::Allocator::instance(result);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, *(_QWORD *)(v1 + 64), *(unsigned __int16 *)(v1 + 76));
        goto LABEL_45;
      }
      v37 = (unsigned __int16)((v30 & 0xFFF8) + 8);
      if (v31)
      {
        result = (gss::Allocator *)memmove(result, v35, *(unsigned __int16 *)(v1 + 74));
        if (*(_WORD *)(v1 + 74))
          result = (gss::Allocator *)memmove((char *)v34 + v37, (const void *)(*(_QWORD *)(v1 + 64) + *(unsigned __int16 *)(v1 + 72)), 16 * *(unsigned __int16 *)(v1 + 74));
        goto LABEL_44;
      }
      v38 = (int32x4_t *)operator new(4 * v36);
      bzero(v38, 4 * v36);
      v39 = (unsigned int *)v38 + v36;
      if (4 * v36 - 4 >= 0x1C)
      {
        v42 = ((4 * v36 - 4) >> 2) + 1;
        v40 = v42 & 0x7FFFFFFFFFFFFFF8;
        v43 = (int32x4_t)xmmword_19FFB2E90;
        v44 = v38 + 1;
        v45.i64[0] = 0x400000004;
        v45.i64[1] = 0x400000004;
        v46.i64[0] = 0x800000008;
        v46.i64[1] = 0x800000008;
        v47 = v42 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v44[-1] = v43;
          *v44 = vaddq_s32(v43, v45);
          v43 = vaddq_s32(v43, v46);
          v44 += 2;
          v47 -= 8;
        }
        while (v47);
        if (v42 == v40)
          goto LABEL_40;
        v41 = (unsigned int *)v38 + (v42 & 0x7FFFFFFFFFFFFFF8);
      }
      else
      {
        LODWORD(v40) = 0;
        v41 = (unsigned int *)v38;
      }
      do
      {
        *v41++ = v40;
        LODWORD(v40) = v40 + 1;
      }
      while (v41 != v39);
LABEL_40:
      v52 = (uint64_t *)(v1 + 64);
      std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v38, v39, &v52, 126 - 2 * __clz(v36), 1);
      if (*(_WORD *)(v1 + 74))
      {
        v48 = 0;
        do
        {
          v49 = v38->u32[v48];
          v50 = *(_QWORD *)(v1 + 64);
          *((_BYTE *)v34 + v48) = *(_BYTE *)(v50 + v49);
          *(_OWORD *)((char *)v34 + v37) = *(_OWORD *)(v50 + *(unsigned __int16 *)(v1 + 72) + 16 * v49);
          ++v48;
          v37 += 16;
        }
        while (v48 < *(unsigned __int16 *)(v1 + 74));
      }
      *(_BYTE *)(v1 + 79) = 1;
      operator delete(v38);
      goto LABEL_44;
    }
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>,std::__unordered_map_hasher<gss::StylePropertySet<gss::ScenePropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>,std::hash<gss::StylePropertySet<gss::ScenePropertyID>>,std::equal_to<gss::StylePropertySet<gss::ScenePropertyID>>,true>,std::__unordered_map_equal<gss::StylePropertySet<gss::ScenePropertyID>,std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>,std::equal_to<gss::StylePropertySet<gss::ScenePropertyID>>,std::hash<gss::StylePropertySet<gss::ScenePropertyID>>,true>,std::allocator<std::__hash_value_type<gss::StylePropertySet<gss::ScenePropertyID>,unsigned char>>>::__emplace_unique_key_args<gss::StylePropertySet<gss::ScenePropertyID>,gss::StylePropertySet<gss::ScenePropertyID>,unsigned char &>(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned int v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  unint64_t v45;
  float *v46;
  float *i;
  float v48;
  uint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  unsigned __int8 **v52;
  unsigned __int8 *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  _BOOL8 v64;
  unint64_t v65;
  unint64_t v66;
  size_t prime;
  void *v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  size_t v72;
  size_t v73;
  size_t v74;
  _QWORD *j;
  size_t v76;
  uint64_t v77;
  unint64_t v78;
  uint8x8_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  size_t v83;
  _QWORD *v84;
  unint64_t v85;
  void *v87;
  _QWORD *v90;

  v9 = *(unsigned __int16 *)(a2 + 10);
  if (!*(_WORD *)(a2 + 10))
  {
    v10 = 0;
    v14 = *(unsigned __int16 *)(a2 + 26);
    if (!*(_WORD *)(a2 + 26))
      goto LABEL_19;
    goto LABEL_12;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    if (v12 < v9)
      v11 = (unsigned __int8 *)(*(_QWORD *)a2 + v12);
    v4 = (_QWORD *)((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2));
    v10 ^= (unint64_t)v4 + *v11;
    v13 = v12 + 1;
    if (v12 + 1 < v9)
      ++v12;
    else
      v12 = *(unsigned __int16 *)(a2 + 10);
  }
  while (v13 < v9);
  v14 = *(unsigned __int16 *)(a2 + 26);
  if (*(_WORD *)(a2 + 26))
  {
LABEL_12:
    v15 = 0;
    v16 = 0;
    v17 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v16 < v14)
      {
        v15 = (unsigned __int8 *)(v17 + v16);
        v4 = (_QWORD *)(v17 + *(unsigned __int16 *)(a2 + 24) + v16);
      }
      v18 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v15) ^ v10;
      v10 = (*(unsigned __int8 *)v4 - 0x61C8864680B583EBLL + (v18 << 6) + (v18 >> 2)) ^ v18;
      v19 = v16 + 1;
      if (v16 + 1 < v14)
        ++v16;
      else
        v16 = v14;
    }
    while (v19 < v14);
  }
LABEL_19:
  v20 = *(unsigned __int16 *)(a2 + 42);
  if (*(_WORD *)(a2 + 42))
  {
    v21 = 0;
    v22 = 0;
    v23 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v22 < v20)
      {
        v21 = (unsigned __int8 *)(v23 + v22);
        v4 = (_QWORD *)(v23 + *(unsigned __int16 *)(a2 + 40) + 4 * v22);
      }
      v24 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v21) ^ v10;
      v10 = (*(unsigned int *)v4 - 0x61C8864680B583EBLL + (v24 << 6) + (v24 >> 2)) ^ v24;
      v25 = v22 + 1;
      if (v22 + 1 < v20)
        ++v22;
      else
        v22 = *(unsigned __int16 *)(a2 + 42);
    }
    while (v25 < v20);
  }
  v26 = *(unsigned __int16 *)(a2 + 58);
  if (*(_WORD *)(a2 + 58))
  {
    v27 = 0;
    v28 = 0;
    v29 = *(_QWORD *)(a2 + 48);
    do
    {
      if (v28 < v26)
      {
        v27 = (unsigned __int8 *)(v29 + v28);
        v4 = (_QWORD *)(v29 + *(unsigned __int16 *)(a2 + 56) + 8 * v28);
      }
      v30 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v27) ^ v10;
      v10 = (*v4 - 0x61C8864680B583EBLL + (v30 << 6) + (v30 >> 2)) ^ v30;
      v31 = v28 + 1;
      if (v28 + 1 < v26)
        ++v28;
      else
        v28 = *(unsigned __int16 *)(a2 + 58);
    }
    while (v31 < v26);
  }
  v32 = *(unsigned __int16 *)(a2 + 74);
  if (*(_WORD *)(a2 + 74))
  {
    LODWORD(v6) = 0;
    v33 = 0;
    v34 = *(_QWORD *)(a2 + 64);
    v35 = v34 + *(unsigned __int16 *)(a2 + 72);
    do
    {
      if (v6 < v32)
      {
        v5 = (unsigned __int8 *)(v35 + 16 * v6);
        v33 = (unsigned __int8 *)(v34 + v6);
      }
      v10 ^= (v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v33;
      v38 = *v5;
      if (v38 == 2)
      {
        v43 = *((_QWORD *)v5 + 1);
        v44 = *(float *)(v43 + 32);
        v45 = (LODWORD(v44) - 0x61C8864680B57FA7) ^ 0x11;
        if (v44 == 0.0)
          v45 = 0x9E3779B97F4A8048;
        v46 = *(float **)v43;
        for (i = *(float **)(v43 + 8); v46 != i; v45 ^= (v45 >> 2) + (v45 << 6) + v49)
        {
          v48 = *v46++;
          v49 = LODWORD(v48) - 0x61C8864680B583EBLL;
          if (v48 == 0.0)
            v49 = 0x9E3779B97F4A7C15;
        }
        v36 = (v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + v45;
      }
      else
      {
        if (v38 != 1)
          goto LABEL_39;
        v39 = *((_QWORD *)v5 + 1);
        v40 = *(char *)(v39 + 23);
        if (v40 >= 0)
          v41 = (uint64_t *)*((_QWORD *)v5 + 1);
        else
          v41 = *(uint64_t **)v39;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(v39 + 23);
        else
          v42 = *(_QWORD *)(v39 + 8);
        v36 = (v10 << 6)
            - 0x61C8864680B583EBLL
            + (v10 >> 2)
            + std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v41, v42);
      }
      v10 ^= v36;
LABEL_39:
      v37 = v6 + 1;
      if ((int)v6 + 1 < v32)
        v6 = (v6 + 1);
      else
        v6 = v32;
    }
    while (v37 < v32);
  }
  v50 = *(_QWORD *)(a1 + 8);
  if (v50)
  {
    v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.u32[0] > 1uLL)
    {
      v6 = v10;
      if (v10 >= v50)
        v6 = v10 % v50;
    }
    else
    {
      v6 = (v50 - 1) & v10;
    }
    v52 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v6);
    if (v52)
    {
      v53 = *v52;
      if (*v52)
      {
        if (v51.u32[0] < 2uLL)
        {
          while (1)
          {
            v55 = *((_QWORD *)v53 + 1);
            if (v55 == v10)
            {
              if ((gss::StylePropertySet<gss::ScenePropertyID>::operator==((unsigned __int8 **)v53 + 2, (unsigned __int8 **)a2) & 1) != 0)return v53;
            }
            else if ((v55 & (v50 - 1)) != v6)
            {
              goto LABEL_83;
            }
            v53 = *(unsigned __int8 **)v53;
            if (!v53)
              goto LABEL_83;
          }
        }
        do
        {
          v54 = *((_QWORD *)v53 + 1);
          if (v54 == v10)
          {
            if ((gss::StylePropertySet<gss::ScenePropertyID>::operator==((unsigned __int8 **)v53 + 2, (unsigned __int8 **)a2) & 1) != 0)return v53;
          }
          else
          {
            if (v54 >= v50)
              v54 %= v50;
            if (v54 != v6)
              break;
          }
          v53 = *(unsigned __int8 **)v53;
        }
        while (v53);
      }
    }
  }
LABEL_83:
  v56 = (_QWORD *)(a1 + 16);
  v90 = operator new(0x68uLL);
  *v90 = 0;
  v90[1] = v10;
  v57 = *(_QWORD *)(a3 + 8);
  v90[2] = *(_QWORD *)a3;
  *((_DWORD *)v90 + 6) = v57;
  *((_WORD *)v90 + 14) = WORD2(v57);
  *((_WORD *)v90 + 15) = *(_WORD *)(a3 + 14);
  *(_QWORD *)(a3 + 7) = 0;
  *(_QWORD *)a3 = 0;
  v58 = *(_QWORD *)(a3 + 24);
  v90[4] = *(_QWORD *)(a3 + 16);
  *((_DWORD *)v90 + 10) = v58;
  *((_WORD *)v90 + 22) = WORD2(v58);
  *((_WORD *)v90 + 23) = *(_WORD *)(a3 + 30);
  v59 = *(_QWORD *)(a3 + 40);
  v90[6] = *(_QWORD *)(a3 + 32);
  *((_DWORD *)v90 + 14) = v59;
  *((_WORD *)v90 + 30) = WORD2(v59);
  *((_WORD *)v90 + 31) = *(_WORD *)(a3 + 46);
  v60 = *(_QWORD *)(a3 + 56);
  v90[8] = *(_QWORD *)(a3 + 48);
  *((_DWORD *)v90 + 18) = v60;
  *((_WORD *)v90 + 38) = WORD2(v60);
  *((_BYTE *)v90 + 78) = *(_BYTE *)(a3 + 62);
  *((_BYTE *)v90 + 79) = *(_BYTE *)(a3 + 63);
  v61 = *(_QWORD *)(a3 + 72);
  v90[10] = *(_QWORD *)(a3 + 64);
  *(_BYTE *)(a3 + 15) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 23) = 0;
  *(_BYTE *)(a3 + 31) = 1;
  *(_QWORD *)(a3 + 39) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 47) = 1;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 55) = 0;
  *(_BYTE *)(a3 + 63) = 1;
  *((_DWORD *)v90 + 22) = v61;
  *((_WORD *)v90 + 46) = WORD2(v61);
  *((_BYTE *)v90 + 94) = *(_BYTE *)(a3 + 78);
  *((_BYTE *)v90 + 95) = *(_BYTE *)(a3 + 79);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 71) = 0;
  *(_BYTE *)(a3 + 79) = 1;
  *((_BYTE *)v90 + 96) = *a4;
  v62 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v63 = *(float *)(a1 + 32);
  if (!v50 || (float)(v63 * (float)v50) < v62)
  {
    v64 = v50 < 3 || (v50 & (v50 - 1)) != 0;
    v65 = v64 | (2 * v50);
    v66 = vcvtps_u32_f32(v62 / v63);
    if (v65 <= v66)
      prime = v66;
    else
      prime = v65;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v50 = *(_QWORD *)(a1 + 8);
    if (prime <= v50)
    {
      if (prime >= v50)
        goto LABEL_121;
      v78 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v50 < 3 || (v79 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v79.i16[0] = vaddlv_u8(v79), v79.u32[0] > 1uLL))
      {
        v78 = std::__next_prime(v78);
      }
      else
      {
        v80 = 1 << -(char)__clz(v78 - 1);
        if (v78 >= 2)
          v78 = v80;
      }
      if (prime <= v78)
        prime = v78;
      if (prime >= v50)
      {
        v50 = *(_QWORD *)(a1 + 8);
LABEL_121:
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v10 >= v50)
            v6 = v10 % v50;
          else
            v6 = v10;
        }
        else
        {
          v6 = (v50 - 1) & v10;
        }
        goto LABEL_134;
      }
      if (!prime)
      {
        v87 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v87)
          operator delete(v87);
        v50 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        goto LABEL_121;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v68 = operator new(8 * prime);
    v69 = *(void **)a1;
    *(_QWORD *)a1 = v68;
    if (v69)
      operator delete(v69);
    v70 = 0;
    *(_QWORD *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v70++) = 0;
    while (prime != v70);
    v71 = (_QWORD *)*v56;
    if (!*v56)
    {
LABEL_120:
      v50 = prime;
      goto LABEL_121;
    }
    v72 = v71[1];
    v73 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v74 = v72 & v73;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v74) = v56;
      for (j = (_QWORD *)*v71; *v71; j = (_QWORD *)*v71)
      {
        v76 = j[1] & v73;
        if (v76 == v74)
        {
          v71 = j;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v76))
        {
          *v71 = *j;
          v77 = 8 * v76;
          *j = **(_QWORD **)(*(_QWORD *)a1 + v77);
          **(_QWORD **)(*(_QWORD *)a1 + v77) = j;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v76) = v71;
          v71 = j;
          v74 = v76;
        }
      }
      goto LABEL_120;
    }
    if (v72 >= prime)
      v72 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v72) = v56;
    v81 = (_QWORD *)*v71;
    if (!*v71)
      goto LABEL_120;
    while (1)
    {
      v83 = v81[1];
      if (v83 >= prime)
        v83 %= prime;
      if (v83 != v72)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v83))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v83) = v71;
          goto LABEL_125;
        }
        *v71 = *v81;
        v82 = 8 * v83;
        *v81 = **(_QWORD **)(*(_QWORD *)a1 + v82);
        **(_QWORD **)(*(_QWORD *)a1 + v82) = v81;
        v81 = v71;
      }
      v83 = v72;
LABEL_125:
      v71 = v81;
      v81 = (_QWORD *)*v81;
      v72 = v83;
      if (!v81)
        goto LABEL_120;
    }
  }
LABEL_134:
  v84 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  v53 = (unsigned __int8 *)v90;
  if (v84)
  {
    *v90 = *v84;
LABEL_142:
    *v84 = v90;
    goto LABEL_143;
  }
  *v90 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v90;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = v56;
  if (*v90)
  {
    v85 = *(_QWORD *)(*v90 + 8);
    if ((v50 & (v50 - 1)) != 0)
    {
      if (v85 >= v50)
        v85 %= v50;
    }
    else
    {
      v85 &= v50 - 1;
    }
    v84 = (_QWORD *)(*(_QWORD *)a1 + 8 * v85);
    goto LABEL_142;
  }
LABEL_143:
  ++*(_QWORD *)(a1 + 24);
  return v53;
}

void sub_19F675FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gss::StylePropertySet<gss::PropertyID>,unsigned char>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(_DWORD *result, unsigned int *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  v7 = *a2;
  v8 = *result;
  v9 = *(unsigned __int8 *)(a6 + v6);
  v10 = *(unsigned __int8 *)(a6 + v8);
  v11 = *a3;
  v12 = *(unsigned __int8 *)(a6 + v11);
  if (v9 >= v10)
  {
    if (v12 >= v9)
    {
      v6 = *a3;
      v7 = *a3;
    }
    else
    {
      *a2 = v11;
      *a3 = v6;
      v13 = *a2;
      v14 = *result;
      if (*(unsigned __int8 *)(a6 + v13) < *(unsigned __int8 *)(a6 + v14))
      {
        *result = v13;
        *a2 = v14;
        v6 = *a3;
        v7 = *a3;
      }
    }
  }
  else
  {
    if (v12 < v9)
    {
      *result = v11;
LABEL_9:
      *a3 = v8;
      v6 = v8;
      v7 = v8;
      goto LABEL_11;
    }
    *result = v6;
    *a2 = v8;
    v6 = *a3;
    v7 = *a3;
    if (*(unsigned __int8 *)(a6 + v6) < v10)
    {
      *a2 = v6;
      goto LABEL_9;
    }
  }
LABEL_11:
  v15 = *a4;
  if (*(unsigned __int8 *)(a6 + v15) < *(unsigned __int8 *)(a6 + v6))
  {
    *a3 = v15;
    *a4 = v7;
    v16 = *a3;
    v17 = *a2;
    if (*(unsigned __int8 *)(a6 + v16) < *(unsigned __int8 *)(a6 + v17))
    {
      *a2 = v16;
      *a3 = v17;
      v18 = *a2;
      v19 = *result;
      if (*(unsigned __int8 *)(a6 + v18) < *(unsigned __int8 *)(a6 + v19))
      {
        *result = v18;
        *a2 = v19;
      }
    }
  }
  v20 = *a5;
  v21 = *a4;
  if (*(unsigned __int8 *)(a6 + v20) < *(unsigned __int8 *)(a6 + v21))
  {
    *a4 = v20;
    *a5 = v21;
    v22 = *a4;
    v23 = *a3;
    if (*(unsigned __int8 *)(a6 + v22) < *(unsigned __int8 *)(a6 + v23))
    {
      *a3 = v22;
      *a4 = v23;
      v24 = *a3;
      v25 = *a2;
      if (*(unsigned __int8 *)(a6 + v24) < *(unsigned __int8 *)(a6 + v25))
      {
        *a2 = v24;
        *a3 = v25;
        v26 = *a2;
        v27 = *result;
        if (*(unsigned __int8 *)(a6 + v26) < *(unsigned __int8 *)(a6 + v27))
        {
          *result = v26;
          *a2 = v27;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int *v35;
  int v36;
  uint64_t i;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v4 = *(a2 - 1);
      v5 = *a1;
      if (*(unsigned __int8 *)(*a3 + v4) < *(unsigned __int8 *)(*a3 + v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3;
      v19 = *(unsigned __int8 *)(*a3 + v17);
      v20 = *(unsigned __int8 *)(*a3 + v16);
      v21 = *(a2 - 1);
      v22 = *(unsigned __int8 *)(*a3 + v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          v45 = *a1;
          v44 = a1[1];
          if (*(unsigned __int8 *)(v18 + v44) < *(unsigned __int8 *)(v18 + v45))
          {
            *a1 = v44;
            a1[1] = v45;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v46 = *(a2 - 1);
        if (*(unsigned __int8 *)(v18 + v46) < v20)
        {
          a1[1] = v46;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = a1[1];
      v28 = *a3;
      v29 = *(unsigned __int8 *)(*a3 + v24);
      v30 = *a1;
      v31 = *(unsigned __int8 *)(*a3 + v30);
      v32 = *(unsigned __int8 *)(*a3 + v26);
      if (v29 >= v31)
      {
        if (v32 < v29)
        {
          *v23 = v26;
          *v25 = v24;
          v33 = a1;
          v34 = a1 + 1;
          if (v32 >= v31)
            goto LABEL_39;
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          v33 = a1;
          v34 = a1 + 2;
          v24 = *a1;
          v27 = *a1;
LABEL_37:
          *v33 = v26;
          *v34 = v30;
          goto LABEL_39;
        }
        v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v30;
        v34 = a1 + 2;
        v24 = v30;
        v27 = v30;
        if (v32 < v31)
          goto LABEL_37;
      }
      v24 = v26;
      v27 = v26;
LABEL_39:
      v47 = *(a2 - 1);
      if (*(unsigned __int8 *)(v28 + v47) < *(unsigned __int8 *)(v28 + v24))
      {
        *v25 = v47;
        *(a2 - 1) = v27;
        v48 = *v25;
        v49 = *v23;
        v50 = *(unsigned __int8 *)(v28 + v48);
        if (v50 < *(unsigned __int8 *)(v28 + v49))
        {
          a1[1] = v48;
          a1[2] = v49;
          v51 = *a1;
          if (v50 < *(unsigned __int8 *)(v28 + v51))
          {
            *a1 = v48;
            a1[1] = v51;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v7 = a1 + 2;
      v6 = a1[2];
      v8 = a1[1];
      v9 = *a3;
      v10 = *(unsigned __int8 *)(*a3 + v8);
      v11 = *a1;
      v12 = *(unsigned __int8 *)(v9 + v11);
      v13 = *(unsigned __int8 *)(v9 + v6);
      if (v10 >= v12)
      {
        if (v13 >= v10)
          goto LABEL_18;
        a1[1] = v6;
        *v7 = v8;
        v14 = a1;
        v15 = a1 + 1;
      }
      else
      {
        v14 = a1;
        v15 = a1 + 2;
        if (v13 < v10)
          goto LABEL_17;
        *a1 = v8;
        a1[1] = v11;
        v14 = a1 + 1;
        v15 = a1 + 2;
      }
      if (v13 >= v12)
        goto LABEL_18;
LABEL_17:
      *v14 = v6;
      *v15 = v11;
LABEL_18:
      v35 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v36 = 0;
      for (i = 12; ; i += 4)
      {
        v39 = *v35;
        v40 = *v7;
        v41 = *(unsigned __int8 *)(v9 + v39);
        if (v41 < *(unsigned __int8 *)(v9 + v40))
        {
          v42 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v42) = v40;
            v43 = v42 - 4;
            if (v42 == 4)
            {
              v38 = a1;
              goto LABEL_21;
            }
            v40 = *(unsigned int *)((char *)a1 + v42 - 8);
            v42 -= 4;
          }
          while (v41 < *(unsigned __int8 *)(v9 + v40));
          v38 = (unsigned int *)((char *)a1 + v43);
LABEL_21:
          *v38 = v39;
          if (++v36 == 8)
            break;
        }
        v7 = v35++;
        if (v35 == a2)
          return 1;
      }
      return v35 + 1 == a2;
  }
}

void std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42D5DA0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = gss::Allocator::instance((gss::Allocator *)a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v3, a1[2]);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int *v35;
  int v36;
  uint64_t i;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v4 = *(a2 - 1);
      v5 = *a1;
      if (*(unsigned __int8 *)(*a3 + v4) < *(unsigned __int8 *)(*a3 + v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3;
      v19 = *(unsigned __int8 *)(*a3 + v17);
      v20 = *(unsigned __int8 *)(*a3 + v16);
      v21 = *(a2 - 1);
      v22 = *(unsigned __int8 *)(*a3 + v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          v45 = *a1;
          v44 = a1[1];
          if (*(unsigned __int8 *)(v18 + v44) < *(unsigned __int8 *)(v18 + v45))
          {
            *a1 = v44;
            a1[1] = v45;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v46 = *(a2 - 1);
        if (*(unsigned __int8 *)(v18 + v46) < v20)
        {
          a1[1] = v46;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = a1[1];
      v28 = *a3;
      v29 = *(unsigned __int8 *)(*a3 + v24);
      v30 = *a1;
      v31 = *(unsigned __int8 *)(*a3 + v30);
      v32 = *(unsigned __int8 *)(*a3 + v26);
      if (v29 >= v31)
      {
        if (v32 < v29)
        {
          *v23 = v26;
          *v25 = v24;
          v33 = a1;
          v34 = a1 + 1;
          if (v32 >= v31)
            goto LABEL_39;
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          v33 = a1;
          v34 = a1 + 2;
          v24 = *a1;
          v27 = *a1;
LABEL_37:
          *v33 = v26;
          *v34 = v30;
          goto LABEL_39;
        }
        v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v30;
        v34 = a1 + 2;
        v24 = v30;
        v27 = v30;
        if (v32 < v31)
          goto LABEL_37;
      }
      v24 = v26;
      v27 = v26;
LABEL_39:
      v47 = *(a2 - 1);
      if (*(unsigned __int8 *)(v28 + v47) < *(unsigned __int8 *)(v28 + v24))
      {
        *v25 = v47;
        *(a2 - 1) = v27;
        v48 = *v25;
        v49 = *v23;
        v50 = *(unsigned __int8 *)(v28 + v48);
        if (v50 < *(unsigned __int8 *)(v28 + v49))
        {
          a1[1] = v48;
          a1[2] = v49;
          v51 = *a1;
          if (v50 < *(unsigned __int8 *)(v28 + v51))
          {
            *a1 = v48;
            a1[1] = v51;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v7 = a1 + 2;
      v6 = a1[2];
      v8 = a1[1];
      v9 = *a3;
      v10 = *(unsigned __int8 *)(*a3 + v8);
      v11 = *a1;
      v12 = *(unsigned __int8 *)(v9 + v11);
      v13 = *(unsigned __int8 *)(v9 + v6);
      if (v10 >= v12)
      {
        if (v13 >= v10)
          goto LABEL_18;
        a1[1] = v6;
        *v7 = v8;
        v14 = a1;
        v15 = a1 + 1;
      }
      else
      {
        v14 = a1;
        v15 = a1 + 2;
        if (v13 < v10)
          goto LABEL_17;
        *a1 = v8;
        a1[1] = v11;
        v14 = a1 + 1;
        v15 = a1 + 2;
      }
      if (v13 >= v12)
        goto LABEL_18;
LABEL_17:
      *v14 = v6;
      *v15 = v11;
LABEL_18:
      v35 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v36 = 0;
      for (i = 12; ; i += 4)
      {
        v39 = *v35;
        v40 = *v7;
        v41 = *(unsigned __int8 *)(v9 + v39);
        if (v41 < *(unsigned __int8 *)(v9 + v40))
        {
          v42 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v42) = v40;
            v43 = v42 - 4;
            if (v42 == 4)
            {
              v38 = a1;
              goto LABEL_21;
            }
            v40 = *(unsigned int *)((char *)a1 + v42 - 8);
            v42 -= 4;
          }
          while (v41 < *(unsigned __int8 *)(v9 + v40));
          v38 = (unsigned int *)((char *)a1 + v43);
LABEL_21:
          *v38 = v39;
          if (++v36 == 8)
            break;
        }
        v7 = v35++;
        if (v35 == a2)
          return 1;
      }
      return v35 + 1 == a2;
  }
}

void std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42D5D58;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = gss::Allocator::instance((gss::Allocator *)a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v3, a1[2]);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int *v35;
  int v36;
  uint64_t i;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v4 = *(a2 - 1);
      v5 = *a1;
      if (*(unsigned __int8 *)(*a3 + v4) < *(unsigned __int8 *)(*a3 + v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3;
      v19 = *(unsigned __int8 *)(*a3 + v17);
      v20 = *(unsigned __int8 *)(*a3 + v16);
      v21 = *(a2 - 1);
      v22 = *(unsigned __int8 *)(*a3 + v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          v45 = *a1;
          v44 = a1[1];
          if (*(unsigned __int8 *)(v18 + v44) < *(unsigned __int8 *)(v18 + v45))
          {
            *a1 = v44;
            a1[1] = v45;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v46 = *(a2 - 1);
        if (*(unsigned __int8 *)(v18 + v46) < v20)
        {
          a1[1] = v46;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = a1[1];
      v28 = *a3;
      v29 = *(unsigned __int8 *)(*a3 + v24);
      v30 = *a1;
      v31 = *(unsigned __int8 *)(*a3 + v30);
      v32 = *(unsigned __int8 *)(*a3 + v26);
      if (v29 >= v31)
      {
        if (v32 < v29)
        {
          *v23 = v26;
          *v25 = v24;
          v33 = a1;
          v34 = a1 + 1;
          if (v32 >= v31)
            goto LABEL_39;
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          v33 = a1;
          v34 = a1 + 2;
          v24 = *a1;
          v27 = *a1;
LABEL_37:
          *v33 = v26;
          *v34 = v30;
          goto LABEL_39;
        }
        v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v30;
        v34 = a1 + 2;
        v24 = v30;
        v27 = v30;
        if (v32 < v31)
          goto LABEL_37;
      }
      v24 = v26;
      v27 = v26;
LABEL_39:
      v47 = *(a2 - 1);
      if (*(unsigned __int8 *)(v28 + v47) < *(unsigned __int8 *)(v28 + v24))
      {
        *v25 = v47;
        *(a2 - 1) = v27;
        v48 = *v25;
        v49 = *v23;
        v50 = *(unsigned __int8 *)(v28 + v48);
        if (v50 < *(unsigned __int8 *)(v28 + v49))
        {
          a1[1] = v48;
          a1[2] = v49;
          v51 = *a1;
          if (v50 < *(unsigned __int8 *)(v28 + v51))
          {
            *a1 = v48;
            a1[1] = v51;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v7 = a1 + 2;
      v6 = a1[2];
      v8 = a1[1];
      v9 = *a3;
      v10 = *(unsigned __int8 *)(*a3 + v8);
      v11 = *a1;
      v12 = *(unsigned __int8 *)(v9 + v11);
      v13 = *(unsigned __int8 *)(v9 + v6);
      if (v10 >= v12)
      {
        if (v13 >= v10)
          goto LABEL_18;
        a1[1] = v6;
        *v7 = v8;
        v14 = a1;
        v15 = a1 + 1;
      }
      else
      {
        v14 = a1;
        v15 = a1 + 2;
        if (v13 < v10)
          goto LABEL_17;
        *a1 = v8;
        a1[1] = v11;
        v14 = a1 + 1;
        v15 = a1 + 2;
      }
      if (v13 >= v12)
        goto LABEL_18;
LABEL_17:
      *v14 = v6;
      *v15 = v11;
LABEL_18:
      v35 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v36 = 0;
      for (i = 12; ; i += 4)
      {
        v39 = *v35;
        v40 = *v7;
        v41 = *(unsigned __int8 *)(v9 + v39);
        if (v41 < *(unsigned __int8 *)(v9 + v40))
        {
          v42 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v42) = v40;
            v43 = v42 - 4;
            if (v42 == 4)
            {
              v38 = a1;
              goto LABEL_21;
            }
            v40 = *(unsigned int *)((char *)a1 + v42 - 8);
            v42 -= 4;
          }
          while (v41 < *(unsigned __int8 *)(v9 + v40));
          v38 = (unsigned int *)((char *)a1 + v43);
LABEL_21:
          *v38 = v39;
          if (++v36 == 8)
            break;
        }
        v7 = v35++;
        if (v35 == a2)
          return 1;
      }
      return v35 + 1 == a2;
  }
}

void std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E42D5D10;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = gss::Allocator::instance((gss::Allocator *)a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, v3, a1[2]);
}

_QWORD *geo::intern_linear_map<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _QWORD *v4;
  char v5;
  unsigned int v6;
  unsigned __int16 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = result;
  if (*(_BYTE *)(a2 + 14))
  {
    *result = *(_QWORD *)a2;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    v5 = 1;
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 10);
    if (!*((_BYTE *)result + 14) && *((unsigned __int16 *)result + 6) < v6)
    {
      v7 = v6 + 1;
      v8 = gss::Allocator::instance((gss::Allocator *)result);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, (unsigned __int16)(v6 + 1 + v6), 1);
      v9 = result;
      if (*v4)
      {
        if (*((_WORD *)v4 + 5))
        {
          result = memmove(result, (const void *)*v4, *((unsigned __int16 *)v4 + 5));
          if (*((_WORD *)v4 + 5))
            result = memmove((char *)v9 + v7, (const void *)(*v4 + *((unsigned __int16 *)v4 + 4)), *((unsigned __int16 *)v4 + 5));
        }
        v10 = gss::Allocator::instance((gss::Allocator *)result);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 40))(v10, *v4, *((unsigned __int16 *)v4 + 6));
      }
      *((_WORD *)v4 + 6) = v6;
      *v4 = v9;
      *((_WORD *)v4 + 4) = v7;
      v6 = *(unsigned __int16 *)(a2 + 10);
    }
    v11 = 0;
    v12 = 0;
    LOWORD(v13) = v6;
    while (v12 != v6)
    {
      v16 = *((unsigned __int16 *)v4 + 5);
      if (v16 == *((unsigned __int16 *)v4 + 6))
      {
        if (v16 == 0xFFFF)
          break;
        if (2 * (v16 & 0x7FFFu) <= 4)
          v17 = 4;
        else
          v17 = 2 * (v16 & 0x7FFF);
        v18 = v17 | 1;
        v19 = gss::Allocator::instance((gss::Allocator *)result);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 16))(v19, (unsigned __int16)((v17 | 1) + v17), 1);
        v20 = result;
        if (*v4)
        {
          if (*((_WORD *)v4 + 5))
          {
            result = memmove(result, (const void *)*v4, *((unsigned __int16 *)v4 + 5));
            if (*((_WORD *)v4 + 5))
              result = memmove((char *)v20 + v18, (const void *)(*v4 + *((unsigned __int16 *)v4 + 4)), *((unsigned __int16 *)v4 + 5));
          }
          v21 = gss::Allocator::instance((gss::Allocator *)result);
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 40))(v21, *v4, *((unsigned __int16 *)v4 + 6));
        }
        *((_WORD *)v4 + 6) = v17;
        *v4 = v20;
        *((_WORD *)v4 + 4) = v18;
        LOWORD(v13) = *(_WORD *)(a2 + 10);
      }
      if (v12 < (unsigned __int16)v13)
      {
        v11 = (_BYTE *)(*(_QWORD *)a2 + v12);
        v2 = &v11[*(unsigned __int16 *)(a2 + 8)];
      }
      v14 = *((unsigned __int16 *)v4 + 5);
      v15 = (_BYTE *)*v4;
      v15[v14] = *v11;
      v15[*((unsigned __int16 *)v4 + 4) + v14] = *v2;
      ++*((_WORD *)v4 + 5);
      v13 = *(unsigned __int16 *)(a2 + 10);
      if (v12 + 1 < v13)
        ++v12;
      else
        v12 = *(unsigned __int16 *)(a2 + 10);
    }
    v5 = *(_BYTE *)(a2 + 14);
  }
  *((_BYTE *)v4 + 14) = v5;
  *((_BYTE *)v4 + 15) = *(_BYTE *)(a2 + 15);
  return result;
}

uint64_t gss::StylePropertySet<gss::ScenePropertyID>::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t result;
  unsigned int v43;
  unsigned __int8 *v44;
  int v45;
  unsigned __int8 *v46;
  unsigned __int8 **v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  int v51;
  unsigned __int8 *v52;
  float *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;

  v4 = *((unsigned __int16 *)a1 + 5);
  if ((_DWORD)v4 != *((unsigned __int16 *)a2 + 5))
    return 0;
  if (*((_WORD *)a1 + 5))
  {
    v6 = (uint64_t)*a1;
    v7 = (uint64_t)*a2;
    if (**a1 != **a2)
      return 0;
    v8 = *((unsigned __int16 *)a2 + 4);
    v9 = *((unsigned __int16 *)a1 + 4);
    if (*(unsigned __int8 *)(v6 + v9) != *(unsigned __int8 *)(v7 + v8))
      return 0;
    v10 = v6 + v9;
    v11 = v7 + v8;
    v12 = 1;
    while (v4 != v12)
    {
      v13 = v12;
      if (*(unsigned __int8 *)(v6 + v12) == *(unsigned __int8 *)(v7 + v12))
      {
        ++v12;
        if (*(unsigned __int8 *)(v10 + v13) == *(unsigned __int8 *)(v11 + v13))
          continue;
      }
      if (v13 < v4)
        return 0;
      break;
    }
  }
  v14 = *((unsigned __int16 *)a1 + 13);
  if ((_DWORD)v14 == *((unsigned __int16 *)a2 + 13))
  {
    if (*((_WORD *)a1 + 13))
    {
      v15 = a1[2];
      v16 = a2[2];
      if (*v15 != *v16)
        return 0;
      v17 = *((unsigned __int16 *)a2 + 12);
      v18 = *((unsigned __int16 *)a1 + 12);
      if (v15[v18] != v16[v17])
        return 0;
      v19 = &v15[v18];
      v20 = &v16[v17];
      v21 = 1;
      while (v14 != v21)
      {
        v22 = v21;
        if (v15[v21] == v16[v21])
        {
          ++v21;
          if (v19[v22] == v20[v22])
            continue;
        }
        if (v22 < v14)
          return 0;
        break;
      }
    }
    v23 = *((unsigned __int16 *)a1 + 21);
    if ((_DWORD)v23 == *((unsigned __int16 *)a2 + 21))
    {
      if (*((_WORD *)a1 + 21))
      {
        v24 = a1[4];
        v25 = a2[4];
        if (*v24 != *v25)
          return 0;
        v26 = &v25[*((unsigned __int16 *)a2 + 20)];
        v27 = &v24[*((unsigned __int16 *)a1 + 20)];
        if (*(_DWORD *)v27 != *(_DWORD *)v26)
          return 0;
        v28 = 0;
        while (++v28 != v23)
        {
          if (v24[v28] != v25[v28] || *(_DWORD *)&v27[4 * v28] != *(_DWORD *)&v26[4 * v28])
          {
            if (v28 < v23)
              return 0;
            break;
          }
        }
      }
      v29 = *((unsigned __int16 *)a1 + 29);
      if ((_DWORD)v29 == *((unsigned __int16 *)a2 + 29))
      {
        if (*((_WORD *)a1 + 29))
        {
          v30 = a1[6];
          v31 = a2[6];
          if (*v30 != *v31)
            return 0;
          v32 = &v31[*((unsigned __int16 *)a2 + 28)];
          v33 = &v30[*((unsigned __int16 *)a1 + 28)];
          if (*(_QWORD *)v33 != *(_QWORD *)v32)
            return 0;
          v34 = 0;
          while (++v34 != v29)
          {
            if (v30[v34] != v31[v34] || *(_QWORD *)&v33[8 * v34] != *(_QWORD *)&v32[8 * v34])
            {
              if (v34 < v29)
                return 0;
              break;
            }
          }
        }
        v35 = *((unsigned __int16 *)a1 + 37);
        if (v35 == *((unsigned __int16 *)a2 + 37))
        {
          if (!*((_WORD *)a1 + 37))
            return 1;
          v36 = 0;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v40 = a2[8];
          v41 = &v40[*((unsigned __int16 *)a2 + 36)];
          while (1)
          {
            if (v37 < v35)
            {
              v44 = a1[8];
              v36 = &v44[v37];
              v3 = &v44[16 * v37 + *((unsigned __int16 *)a1 + 36)];
            }
            if (v39 < v35)
            {
              v38 = &v40[v39];
              v2 = &v41[16 * v39];
            }
            if (*v36 != *v38)
              break;
            v45 = *v3;
            if (v45 != *v2)
              break;
            if (v45 == 2)
            {
              v53 = (float *)*((_QWORD *)v3 + 1);
              v54 = (float *)*((_QWORD *)v2 + 1);
              if (v53[8] != v54[8])
                return 0;
              v55 = *(_QWORD *)v53;
              v56 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 8);
              v57 = (v56 - v55) >> 2;
              v58 = *(_QWORD *)v54;
              if (v57 != (*(_QWORD *)(*((_QWORD *)v2 + 1) + 8) - v58) >> 2)
                return 0;
              if (v56 != v55)
              {
                v59 = 0;
                v60 = 1;
                while (vabds_f32(*(float *)(v55 + 4 * v59), *(float *)(v58 + 4 * v59)) <= 0.00000011921)
                {
                  v59 = v60++;
                  if (v57 <= v59)
                    goto LABEL_42;
                }
                return 0;
              }
            }
            else if (v45 == 1)
            {
              v46 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
              v47 = (unsigned __int8 **)*((_QWORD *)v2 + 1);
              v48 = v46[23];
              if ((v48 & 0x80u) == 0)
                v49 = (unsigned __int8 *)v46[23];
              else
                v49 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
              v50 = (unsigned __int8 *)*((unsigned __int8 *)v47 + 23);
              v51 = (char)v50;
              if ((char)v50 < 0)
                v50 = v47[1];
              if (v49 != v50)
                return 0;
              if (v51 >= 0)
                v52 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
              else
                v52 = *v47;
              if ((v48 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v46, v52, *((_QWORD *)v46 + 1)))
                  return 0;
              }
              else if (v46[23])
              {
                while (*v46 == *v52)
                {
                  ++v46;
                  ++v52;
                  if (!--v48)
                    goto LABEL_42;
                }
                return 0;
              }
            }
LABEL_42:
            v43 = v37 + 1;
            if (v39 + 1 < v35)
              ++v39;
            else
              v39 = v35;
            result = 1;
            if (v43 < v35)
              ++v37;
            else
              v37 = v35;
            if (v43 >= v35)
              return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int64_t v119;
  uint64_t *v120;
  int64_t v121;
  BOOL v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t *v142;
  unsigned int *v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *v10;
        v90 = *v11;
        if (*(unsigned __int8 *)(**a3 + v89) < *(unsigned __int8 *)(**a3 + v90))
        {
          *v11 = v89;
          *v10 = v90;
        }
        return result;
      case 3:
        v91 = *v11;
        v92 = v11[1];
        v93 = **a3;
        v94 = *(unsigned __int8 *)(v93 + v92);
        v95 = *(unsigned __int8 *)(v93 + v91);
        v96 = *v10;
        v97 = *(unsigned __int8 *)(v93 + v96);
        if (v94 >= v95)
        {
          if (v97 < v94)
          {
            v11[1] = v96;
            *v10 = v92;
            v132 = *v11;
            v131 = v11[1];
            if (*(unsigned __int8 *)(v93 + v131) < *(unsigned __int8 *)(v93 + v132))
            {
              *v11 = v131;
              v11[1] = v132;
            }
          }
        }
        else if (v97 >= v94)
        {
          *v11 = v92;
          v11[1] = v91;
          v157 = *v10;
          if (*(unsigned __int8 *)(v93 + v157) < v95)
          {
            v11[1] = v157;
            *v10 = v91;
          }
        }
        else
        {
          *v11 = v96;
          *v10 = v91;
        }
        return result;
      case 4:
        v98 = v11 + 1;
        v99 = v11[1];
        v100 = v11 + 2;
        v101 = v11[2];
        v102 = v11[1];
        v103 = **a3;
        v104 = *(unsigned __int8 *)(v103 + v99);
        v105 = *v11;
        v106 = *(unsigned __int8 *)(v103 + v105);
        v107 = *(unsigned __int8 *)(v103 + v101);
        if (v104 >= v106)
        {
          if (v107 < v104)
          {
            *v98 = v101;
            *v100 = v99;
            v108 = v11;
            result = (uint64_t)(v11 + 1);
            if (v107 >= v106)
              goto LABEL_171;
            goto LABEL_169;
          }
        }
        else
        {
          if (v107 < v104)
          {
            v108 = v11;
            result = (uint64_t)(v11 + 2);
            v99 = *v11;
            v102 = *v11;
LABEL_169:
            *v108 = v101;
            *(_DWORD *)result = v105;
            goto LABEL_171;
          }
          v108 = v11 + 1;
          *v11 = v99;
          v11[1] = v105;
          result = (uint64_t)(v11 + 2);
          v99 = v105;
          v102 = v105;
          if (v107 < v106)
            goto LABEL_169;
        }
        v99 = v101;
        v102 = v101;
LABEL_171:
        v158 = *v10;
        if (*(unsigned __int8 *)(v103 + v158) < *(unsigned __int8 *)(v103 + v99))
        {
          *v100 = v158;
          *v10 = v102;
          v159 = *v100;
          v160 = *v98;
          v161 = *(unsigned __int8 *)(v103 + v159);
          if (v161 < *(unsigned __int8 *)(v103 + v160))
          {
            v11[1] = v159;
            v11[2] = v160;
            v162 = *v11;
            if (v161 < *(unsigned __int8 *)(v103 + v162))
            {
              *v11 = v159;
              v11[1] = v162;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, **a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v119 = (unint64_t)(v13 - 2) >> 1;
              v120 = *a3;
              v121 = v119;
              do
              {
                if (v119 >= v121)
                {
                  v123 = (2 * v121) | 1;
                  v124 = &v11[v123];
                  v125 = *v124;
                  if (2 * v121 + 2 >= v13)
                  {
                    v126 = *v120;
                  }
                  else
                  {
                    v126 = *v120;
                    if (*(unsigned __int8 *)(*v120 + v125) < *(unsigned __int8 *)(*v120 + v124[1]))
                    {
                      LODWORD(v125) = v124[1];
                      ++v124;
                      v123 = 2 * v121 + 2;
                    }
                  }
                  v127 = &v11[v121];
                  v128 = *v127;
                  result = *(unsigned __int8 *)(v126 + v128);
                  if (*(unsigned __int8 *)(v126 + v125) >= result)
                  {
                    do
                    {
                      v129 = v124;
                      *v127 = v125;
                      if (v119 < v123)
                        break;
                      v130 = (2 * v123) | 1;
                      v124 = &v11[v130];
                      v123 = 2 * v123 + 2;
                      v125 = *v124;
                      if (v123 < v13)
                      {
                        if (*(unsigned __int8 *)(v126 + v125) >= *(unsigned __int8 *)(v126 + v124[1]))
                        {
                          v123 = v130;
                        }
                        else
                        {
                          LODWORD(v125) = v124[1];
                          ++v124;
                        }
                      }
                      else
                      {
                        v123 = v130;
                      }
                      v127 = v129;
                    }
                    while (*(unsigned __int8 *)(v126 + v125) >= result);
                    *v129 = v128;
                  }
                }
                v122 = v121-- <= 0;
              }
              while (!v122);
              v139 = (unint64_t)v12 >> 2;
              do
              {
                v140 = 0;
                v141 = *v11;
                v142 = *a3;
                v143 = v11;
                do
                {
                  v146 = &v143[v140];
                  v147 = v146[1];
                  v145 = v146 + 1;
                  v144 = v147;
                  v148 = (2 * v140) | 1;
                  v140 = 2 * v140 + 2;
                  if (v140 < v139)
                  {
                    result = v145[1];
                    if (*(unsigned __int8 *)(*v142 + v144) >= *(unsigned __int8 *)(*v142 + result))
                    {
                      v140 = v148;
                    }
                    else
                    {
                      LODWORD(v144) = v145[1];
                      ++v145;
                    }
                  }
                  else
                  {
                    v140 = v148;
                  }
                  *v143 = v144;
                  v143 = v145;
                }
                while (v140 <= (uint64_t)((unint64_t)(v139 - 2) >> 1));
                if (v145 == --a2)
                {
                  *v145 = v141;
                }
                else
                {
                  *v145 = *a2;
                  *a2 = v141;
                  v149 = (char *)v145 - (char *)v11 + 4;
                  if (v149 >= 5)
                  {
                    v150 = (((unint64_t)v149 >> 2) - 2) >> 1;
                    v151 = &v11[v150];
                    v152 = *v151;
                    v153 = *v145;
                    v154 = *v142;
                    v155 = *(unsigned __int8 *)(v154 + v153);
                    if (*(unsigned __int8 *)(v154 + v152) < v155)
                    {
                      do
                      {
                        v156 = v151;
                        *v145 = v152;
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v11[v150];
                        v152 = *v151;
                        v145 = v156;
                      }
                      while (*(unsigned __int8 *)(v154 + v152) < v155);
                      *v156 = v153;
                    }
                  }
                }
                v122 = v139-- <= 2;
              }
              while (!v122);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          v17 = *v10;
          v18 = *(unsigned __int8 *)(v16 + v17);
          if ((unint64_t)v12 >= 0x201)
          {
            v19 = *v15;
            v20 = *v11;
            v21 = *(unsigned __int8 *)(v16 + v19);
            v22 = *(unsigned __int8 *)(v16 + v20);
            if (v21 >= v22)
            {
              if (v18 < v21)
              {
                *v15 = v17;
                *v10 = v19;
                v27 = *v15;
                v28 = *v11;
                if (*(unsigned __int8 *)(v16 + v27) < *(unsigned __int8 *)(v16 + v28))
                {
                  *v11 = v27;
                  *v15 = v28;
                }
              }
            }
            else
            {
              if (v18 >= v21)
              {
                *v11 = v19;
                *v15 = v20;
                v31 = *v10;
                if (*(unsigned __int8 *)(v16 + v31) >= v22)
                  goto LABEL_22;
                *v15 = v31;
              }
              else
              {
                *v11 = v17;
              }
              *v10 = v20;
            }
LABEL_22:
            v32 = &v11[v14];
            v35 = *(v32 - 1);
            v33 = v32 - 1;
            v34 = v35;
            v36 = v11[1];
            v37 = *(unsigned __int8 *)(v16 + v35);
            v38 = *(unsigned __int8 *)(v16 + v36);
            v39 = *(a2 - 2);
            v40 = *(unsigned __int8 *)(v16 + v39);
            if (v37 >= v38)
            {
              if (v40 < v37)
              {
                *v33 = v39;
                *(a2 - 2) = v34;
                v41 = *v33;
                v42 = v11[1];
                if (*(unsigned __int8 *)(v16 + v41) < *(unsigned __int8 *)(v16 + v42))
                {
                  v11[1] = v41;
                  *v33 = v42;
                }
              }
            }
            else
            {
              if (v40 >= v37)
              {
                v11[1] = v34;
                *v33 = v36;
                v44 = *(a2 - 2);
                if (*(unsigned __int8 *)(v16 + v44) >= v38)
                  goto LABEL_34;
                *v33 = v44;
              }
              else
              {
                v11[1] = v39;
              }
              *(a2 - 2) = v36;
            }
LABEL_34:
            v45 = &v11[v14];
            v48 = v45[1];
            v46 = v45 + 1;
            v47 = v48;
            v49 = v11[2];
            v50 = *(unsigned __int8 *)(v16 + v48);
            v51 = *(unsigned __int8 *)(v16 + v49);
            v52 = *(a2 - 3);
            v53 = *(unsigned __int8 *)(v16 + v52);
            if (v50 >= v51)
            {
              if (v53 < v50)
              {
                *v46 = v52;
                *(a2 - 3) = v47;
                v54 = *v46;
                v55 = v11[2];
                if (*(unsigned __int8 *)(v16 + v54) < *(unsigned __int8 *)(v16 + v55))
                {
                  v11[2] = v54;
                  *v46 = v55;
                }
              }
            }
            else
            {
              if (v53 >= v50)
              {
                v11[2] = v47;
                *v46 = v49;
                v56 = *(a2 - 3);
                if (*(unsigned __int8 *)(v16 + v56) >= v51)
                  goto LABEL_43;
                *v46 = v56;
              }
              else
              {
                v11[2] = v52;
              }
              *(a2 - 3) = v49;
            }
LABEL_43:
            v57 = *v15;
            v58 = *v33;
            v59 = *(unsigned __int8 *)(v16 + v57);
            v60 = *(unsigned __int8 *)(v16 + v58);
            v61 = *v46;
            v62 = *(unsigned __int8 *)(v16 + v61);
            if (v59 >= v60)
            {
              if (v62 >= v59)
                goto LABEL_50;
              *v15 = v61;
              *v46 = v57;
              v46 = v15;
              LODWORD(v57) = v58;
              if (v62 >= v60)
              {
                LODWORD(v57) = v61;
                goto LABEL_50;
              }
            }
            else if (v62 >= v59)
            {
              *v33 = v57;
              *v15 = v58;
              v33 = v15;
              LODWORD(v57) = v61;
              if (v62 >= v60)
              {
                LODWORD(v57) = v58;
LABEL_50:
                v63 = *v11;
                *v11 = v57;
                *v15 = v63;
                goto LABEL_51;
              }
            }
            *v33 = v61;
            *v46 = v58;
            goto LABEL_50;
          }
          v23 = *v11;
          v24 = *v15;
          v25 = *(unsigned __int8 *)(v16 + v23);
          v26 = *(unsigned __int8 *)(v16 + v24);
          if (v25 >= v26)
          {
            if (v18 < v25)
            {
              *v11 = v17;
              *v10 = v23;
              v29 = *v11;
              v30 = *v15;
              if (*(unsigned __int8 *)(v16 + v29) < *(unsigned __int8 *)(v16 + v30))
              {
                *v15 = v29;
                *v11 = v30;
              }
            }
          }
          else
          {
            if (v18 >= v25)
            {
              *v15 = v23;
              *v11 = v24;
              v43 = *v10;
              if (*(unsigned __int8 *)(v16 + v43) >= v26)
                goto LABEL_51;
              *v11 = v43;
            }
            else
            {
              *v15 = v17;
            }
            *v10 = v24;
          }
LABEL_51:
          --a4;
          v64 = *v11;
          if ((a5 & 1) == 0)
          {
            v65 = *(unsigned __int8 *)(v16 + v64);
            if (*(unsigned __int8 *)(v16 + *(v11 - 1)) < v65)
              goto LABEL_54;
            if (v65 >= *(unsigned __int8 *)(v16 + *v10))
            {
              v81 = v11 + 1;
              do
              {
                v11 = v81;
                if (v81 >= a2)
                  break;
                ++v81;
              }
              while (v65 >= *(unsigned __int8 *)(v16 + *v11));
            }
            else
            {
              do
              {
                v80 = v11[1];
                ++v11;
              }
              while (v65 >= *(unsigned __int8 *)(v16 + v80));
            }
            v82 = a2;
            if (v11 < a2)
            {
              v82 = a2;
              do
                v83 = *--v82;
              while (v65 < *(unsigned __int8 *)(v16 + v83));
            }
            if (v11 < v82)
            {
              v84 = *v11;
              v85 = *v82;
              do
              {
                *v11 = v85;
                *v82 = v84;
                do
                {
                  v86 = v11[1];
                  ++v11;
                  v84 = v86;
                }
                while (v65 >= *(unsigned __int8 *)(v16 + v86));
                do
                {
                  v87 = *--v82;
                  v85 = v87;
                }
                while (v65 < *(unsigned __int8 *)(v16 + v87));
              }
              while (v11 < v82);
            }
            v88 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v88;
            a5 = 0;
            *v88 = v64;
            continue;
          }
          v65 = *(unsigned __int8 *)(v16 + v64);
LABEL_54:
          v66 = v11;
          do
          {
            v67 = v66;
            v69 = v66[1];
            ++v66;
            v68 = v69;
          }
          while (*(unsigned __int8 *)(v16 + v69) < v65);
          v70 = a2;
          if (v67 == v11)
          {
            v70 = a2;
            do
            {
              if (v66 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(unsigned __int8 *)(v16 + v72) >= v65);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(unsigned __int8 *)(v16 + v71) >= v65);
          }
          if (v66 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = v66;
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              do
              {
                v67 = v75;
                v77 = v75[1];
                ++v75;
                v74 = v77;
              }
              while (*(unsigned __int8 *)(v16 + v77) < v65);
              do
              {
                v78 = *--v76;
                v73 = v78;
              }
              while (*(unsigned __int8 *)(v16 + v78) >= v65);
            }
            while (v75 < v76);
          }
          if (v67 != v11)
            *v11 = *v67;
          *v67 = v64;
          if (v66 < v70)
            goto LABEL_73;
          v79 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v67, *a3);
          v11 = v67 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v67 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v9, v67, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v67 + 1;
            continue;
          }
          a2 = v67;
          if (v79)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v11 != a2)
          {
            v109 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v110 = **a3;
              v111 = 4;
              v112 = v11;
              do
              {
                v115 = *v112;
                v114 = v112[1];
                v112 = v109;
                v116 = *(unsigned __int8 *)(v110 + v114);
                if (v116 < *(unsigned __int8 *)(v110 + v115))
                {
                  v117 = v111;
                  do
                  {
                    *(unsigned int *)((char *)v11 + v117) = v115;
                    v118 = v117 - 4;
                    if (v117 == 4)
                    {
                      v113 = v11;
                      goto LABEL_110;
                    }
                    v115 = *(unsigned int *)((char *)v11 + v117 - 8);
                    v117 -= 4;
                  }
                  while (v116 < *(unsigned __int8 *)(v110 + v115));
                  v113 = (unsigned int *)((char *)v11 + v118);
LABEL_110:
                  *v113 = v114;
                }
                v109 = v112 + 1;
                v111 += 4;
              }
              while (v112 + 1 != a2);
            }
          }
        }
        else if (v11 != a2)
        {
          v133 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v134 = **a3;
            do
            {
              v136 = *v9;
              v135 = v9[1];
              v9 = v133;
              v137 = *(unsigned __int8 *)(v134 + v135);
              if (v137 < *(unsigned __int8 *)(v134 + v136))
              {
                v138 = v9;
                do
                {
                  *v138 = v136;
                  v136 = *(v138 - 2);
                  --v138;
                }
                while (v137 < *(unsigned __int8 *)(v134 + v136));
                *v138 = v135;
              }
              v133 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  unsigned int *v35;
  int v36;
  uint64_t i;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v4 = *(a2 - 1);
      v5 = *a1;
      if (*(unsigned __int8 *)(*a3 + v4) < *(unsigned __int8 *)(*a3 + v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = *a3;
      v19 = *(unsigned __int8 *)(*a3 + v17);
      v20 = *(unsigned __int8 *)(*a3 + v16);
      v21 = *(a2 - 1);
      v22 = *(unsigned __int8 *)(*a3 + v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          v45 = *a1;
          v44 = a1[1];
          if (*(unsigned __int8 *)(v18 + v44) < *(unsigned __int8 *)(v18 + v45))
          {
            *a1 = v44;
            a1[1] = v45;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v46 = *(a2 - 1);
        if (*(unsigned __int8 *)(v18 + v46) < v20)
        {
          a1[1] = v46;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = a1[1];
      v28 = *a3;
      v29 = *(unsigned __int8 *)(*a3 + v24);
      v30 = *a1;
      v31 = *(unsigned __int8 *)(*a3 + v30);
      v32 = *(unsigned __int8 *)(*a3 + v26);
      if (v29 >= v31)
      {
        if (v32 < v29)
        {
          *v23 = v26;
          *v25 = v24;
          v33 = a1;
          v34 = a1 + 1;
          if (v32 >= v31)
            goto LABEL_39;
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          v33 = a1;
          v34 = a1 + 2;
          v24 = *a1;
          v27 = *a1;
LABEL_37:
          *v33 = v26;
          *v34 = v30;
          goto LABEL_39;
        }
        v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v30;
        v34 = a1 + 2;
        v24 = v30;
        v27 = v30;
        if (v32 < v31)
          goto LABEL_37;
      }
      v24 = v26;
      v27 = v26;
LABEL_39:
      v47 = *(a2 - 1);
      if (*(unsigned __int8 *)(v28 + v47) < *(unsigned __int8 *)(v28 + v24))
      {
        *v25 = v47;
        *(a2 - 1) = v27;
        v48 = *v25;
        v49 = *v23;
        v50 = *(unsigned __int8 *)(v28 + v48);
        if (v50 < *(unsigned __int8 *)(v28 + v49))
        {
          a1[1] = v48;
          a1[2] = v49;
          v51 = *a1;
          if (v50 < *(unsigned __int8 *)(v28 + v51))
          {
            *a1 = v48;
            a1[1] = v51;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v7 = a1 + 2;
      v6 = a1[2];
      v8 = a1[1];
      v9 = *a3;
      v10 = *(unsigned __int8 *)(*a3 + v8);
      v11 = *a1;
      v12 = *(unsigned __int8 *)(v9 + v11);
      v13 = *(unsigned __int8 *)(v9 + v6);
      if (v10 >= v12)
      {
        if (v13 >= v10)
          goto LABEL_18;
        a1[1] = v6;
        *v7 = v8;
        v14 = a1;
        v15 = a1 + 1;
      }
      else
      {
        v14 = a1;
        v15 = a1 + 2;
        if (v13 < v10)
          goto LABEL_17;
        *a1 = v8;
        a1[1] = v11;
        v14 = a1 + 1;
        v15 = a1 + 2;
      }
      if (v13 >= v12)
        goto LABEL_18;
LABEL_17:
      *v14 = v6;
      *v15 = v11;
LABEL_18:
      v35 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v36 = 0;
      for (i = 12; ; i += 4)
      {
        v39 = *v35;
        v40 = *v7;
        v41 = *(unsigned __int8 *)(v9 + v39);
        if (v41 < *(unsigned __int8 *)(v9 + v40))
        {
          v42 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v42) = v40;
            v43 = v42 - 4;
            if (v42 == 4)
            {
              v38 = a1;
              goto LABEL_21;
            }
            v40 = *(unsigned int *)((char *)a1 + v42 - 8);
            v42 -= 4;
          }
          while (v41 < *(unsigned __int8 *)(v9 + v40));
          v38 = (unsigned int *)((char *)a1 + v43);
LABEL_21:
          *v38 = v39;
          if (++v36 == 8)
            break;
        }
        v7 = v35++;
        if (v35 == a2)
          return 1;
      }
      return v35 + 1 == a2;
  }
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

gss::Allocator *std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,gss::Allocator>>::__on_zero_shared(gss::Allocator *result)
{
  _BYTE *v1;
  gss::Allocator *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (char *)result + 32;
  if (!*((_BYTE *)result + 44))
  {
    v2 = result;
    result = *(gss::Allocator **)v1;
    if (*(_QWORD *)v1)
    {
      if (*((_WORD *)v2 + 20))
      {
        v3 = 80 * *((unsigned __int16 *)v2 + 20);
        do
        {
          result = (gss::Allocator *)(gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)result) + 80);
          v3 -= 80;
        }
        while (v3);
      }
      v4 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)v2 + 4), 80 * *((unsigned __int16 *)v2 + 21));
    }
  }
  *(_QWORD *)(v1 + 5) = 0;
  *(_QWORD *)v1 = 0;
  return result;
}

uint64_t std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 72);
}

void gss::StylesheetQuery<gss::ScenePropertyID>::~StylesheetQuery(uint64_t a1)
{
  gss::StylesheetQuery<gss::ScenePropertyID>::~StylesheetQuery(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gss::StylesheetQuery<gss::ScenePropertyID>::~StylesheetQuery(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)a1 = &off_1E42C2928;
  v2 = *(std::__shared_weak_count **)(a1 + 312);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 296);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  if (!*(_BYTE *)(a1 + 286) && *(_QWORD *)(a1 + 272))
  {
    v4 = gss::Allocator::instance((gss::Allocator *)v3);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 272), *(unsigned __int16 *)(a1 + 284));
    *(_QWORD *)(a1 + 272) = 0;
  }
  v5 = *(_QWORD *)(a1 + 240);
  if (v5)
  {
    *(_QWORD *)(a1 + 248) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 264) + 40))(*(_QWORD *)(a1 + 264), v5, *(_QWORD *)(a1 + 256) - v5);
  }
  *(_QWORD *)a1 = &off_1E42C2A80;
  v6 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v6)
    geo::read_write_lock::logFailure(v6, (uint64_t)"destruction", v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v8)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void std::__shared_ptr_emplace<gss::StylesheetQuery<gss::ScenePropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gss::StylesheetQuery<gss::ScenePropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    goto LABEL_4;
  }
}

BOOL md::DataOverrideManager::getColorOverrideForAttributes(uint64_t **a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v18;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;

  v29 = -1;
  v28 = -1;
  v27 = -1;
  v26 = -1;
  v25 = -1;
  gss::FeatureAttributeSet::getValueForAttributeKey(a2, 50, &v29);
  gss::FeatureAttributeSet::getValueForAttributeKey(a2, 49, &v28);
  gss::FeatureAttributeSet::getValueForAttributeKey(a2, 37, &v27);
  gss::FeatureAttributeSet::getValueForAttributeKey(a2, 4, &v26);
  gss::FeatureAttributeSet::getValueForAttributeKey(a2, 53, &v25);
  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = v27;
    v10 = v29;
    v11 = v26;
    v12 = v25;
    v13 = v28;
    do
    {
      v14 = *v6;
      if (*v6 == -1 || v14 == v9)
      {
        v16 = v6[1];
        if (v16 == -1 || v16 == v13)
        {
          v18 = v6[2];
          if (v18 == -1 || v18 == v10)
          {
            v20 = v6[3];
            if (v20 == -1 || v20 == v11)
            {
              v22 = v6[4];
              if ((v22 == -1 || v22 == v12) && (v16 & v14 & v18 & v20 & v22) != 0xFFFFFFFFFFFFFFFFLL)
              {
                v23 = (2 * (v14 != -1)) | (16 * (v18 != -1)) | (8 * (v22 != -1)) | (4 * (v16 != -1)) | (v20 != -1);
                if (v23 > v8)
                {
                  *a3 = *((_DWORD *)v6 + 10);
                  a3[1] = *((_DWORD *)v6 + 11);
                  a3[2] = *((_DWORD *)v6 + 12);
                  a3[3] = *((_DWORD *)v6 + 13);
                  v8 = v23;
                }
              }
            }
          }
        }
      }
      v6 += 9;
    }
    while (v6 != v7);
  }
  return v8 != 0;
}

#error "19F682BB8: call analysis failed (funcsize=14832)"

void sub_19F6877AC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,void **a35,void **a36,void **a37,void **a38,void **a39,void **a40,void **a41,void **a42,void **a43,void **a44,void **a45,void **a46,void **a47,void **a48,void **a49,void **a50,void **a51,void **a52,void **a53,void **a54,void **a55,void **a56,void **a57,void **a58,void **a59,void **a60,void **a61,void **a62,void **a63)
{
  void **a64;
  void **a66;
  void **a67;
  void **a68;
  void **a69;
  void **a70;
  void **a71;
  void **a72;
  void **v72;
  void **v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  void **v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  void **v84;
  void **v85;
  void **v86;
  void **v87;
  void **v88;
  void **v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  _Unwind_Exception *v93;
  unint64_t *v94;

  STACK[0xD80] = a1;
  v78 = *(_QWORD **)(v76 + 448);
  if (v78 == v75)
  {
    v79 = 4;
  }
  else
  {
    if (!v78)
      goto LABEL_6;
    v79 = 5;
    v75 = *(_QWORD **)(v76 + 448);
  }
  (*(void (**)(_QWORD *))(*v75 + 8 * v79))(v75);
LABEL_6:
  v80 = *(_QWORD **)(v76 + 416);
  if (v80 == v74)
  {
    v81 = 4;
  }
  else
  {
    if (!v80)
      goto LABEL_11;
    v81 = 5;
    v74 = *(_QWORD **)(v76 + 416);
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v81))(v74);
LABEL_11:
  STACK[0x7960] = v76;
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0xB30]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a9);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(v77);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0xD90]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0xF90]);
  STACK[0xCA0] = STACK[0xC40];
  STACK[0xCB0] = STACK[0xCA0];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x1010]);
  STACK[0xCC0] = STACK[0xCB0];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x1090]);
  STACK[0x530] = STACK[0xCC0];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a14);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a15);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a16);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a17);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a18);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a19);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a20);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a21);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a22);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a23);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a24);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a25);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a26);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a27);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a28);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a30);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a31);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a32);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a33);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a34);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a35);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a29);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a36);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a38);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a39);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a40);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a41);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a42);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a43);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a44);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a45);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a46);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a47);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a48);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a49);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a50);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a51);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a52);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a53);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a54);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a55);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a56);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a57);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a58);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a59);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a60);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a61);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a62);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a63);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a64);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a37);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a10);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a11);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a12);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a13);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(v73);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x1110]);
  v82 = (void *)STACK[0x698];
  v83 = STACK[0xC68];
  v84 = (void **)STACK[0x4A8];
  v85 = (void **)STACK[0x4A0];
  v86 = (void **)STACK[0x480];
  v87 = (void **)STACK[0x478];
  v88 = (void **)STACK[0x498];
  STACK[0x5F0] = STACK[0x530];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x2D90]);
  STACK[0x618] = STACK[0x5F0];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x2E90]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x2E10]);
  STACK[0x678] = STACK[0x618];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a66);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a67);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a68);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a69);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a70);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a71);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(a72);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x200]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x208]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x210]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x218]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x220]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x228]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x230]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x238]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x240]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x248]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x250]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x258]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x260]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x268]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x270]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x278]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x280]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x288]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x290]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x298]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2A0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2A8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2B0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2B8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2C0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2C8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2D0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2D8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2E0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2E8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2F0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x2F8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x300]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x308]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(v72);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x2F10]);
  STACK[0x680] = STACK[0x678];
  v89 = (void **)STACK[0x340];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x318]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x320]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x328]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x330]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x338]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(v89);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x310]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x4490]);
  STACK[0x688] = STACK[0x680];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x4910]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x4890]);
  STACK[0x690] = STACK[0x688];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x348]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x358]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x350]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x4A10]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x4990]);
  v90 = STACK[0x690];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x360]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x368]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x370]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x378]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x380]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x388]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x390]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x398]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3A0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3A8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3B0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3B8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3C0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3C8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3D0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3D8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3E0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3E8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3F0]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x3F8]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x400]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x4C10]);
  STACK[0x6A0] = v90;
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x5790]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x5710]);
  STACK[0x6A8] = STACK[0x6A0];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x5890]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x5810]);
  v91 = STACK[0x6A8];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x410]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x408]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x5910]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x428]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x430]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x418]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x420]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x5A90]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x5D90]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x5D10]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x438]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x440]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x5E10]);
  STACK[0x6B0] = v91;
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x6010]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x5F90]);
  STACK[0x6B8] = STACK[0x6B0];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x6110]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x6090]);
  v92 = (unint64_t *)STACK[0x6B8];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x450]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x458]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x470]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x460]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x468]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x448]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x6190]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(v88);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x488]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)STACK[0x490]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(v87);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(v86);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x6510]);
  v93 = (_Unwind_Exception *)STACK[0xD80];
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x6810]);
  operator delete(v82);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x6910]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x6890]);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x6990]);
  v94 = v92;
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(v85);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor(v84);
  ecs2::ExecutionTaskDescriptor::~ExecutionTaskDescriptor((void **)&STACK[0x6A10]);
  ecs2::UtlityTaskDescriptor::~UtlityTaskDescriptor((void **)&STACK[0x6B90]);
  if (&STACK[0x6BD0] != v92)
  {
    do
    {
      ecs2::ModuleBucketLayoutDescriptor::{unnamed type#1}::~ModuleBucketLayoutDescriptor((void **)v94 - 6);
      ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor((ecs2::ModuleBucketExecutionDescriptor *)(v94 - 15));
      v94 -= 16;
    }
    while (v94 != &STACK[0x6BD0]);
  }
  if (*(char *)(v83 + 31) < 0)
    operator delete(*(void **)(v83 + 8));
  _Unwind_Resume(v93);
}

void ecs2::UtlityTaskDescriptor::~UtlityTaskDescriptor(void **this)
{
  ecs2::UtlityTaskDescriptor *v2;
  uint64_t v3;

  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  v2 = (ecs2::UtlityTaskDescriptor *)this[4];
  if (v2 == (ecs2::UtlityTaskDescriptor *)(this + 1))
  {
    v3 = 4;
    v2 = (ecs2::UtlityTaskDescriptor *)(this + 1);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287A18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287A18;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287A60;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287A60;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x90uLL);
  a1[2] = (char *)(v2 + 18);
  *v2 = 0xCAB567F400206020;
  v2[1] = "md::ls::FinishedProcessing]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB3EE0;
  v2[4] = "md::ls::PendingProcessing]";
  v2[5] = 25;
  v2[6] = 0x343B7A672BA2F664;
  v2[7] = "md::ls::FinishedProcessingShadow]";
  v2[8] = 32;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 18)
  {
    *(_QWORD *)v3 = 0xEC85A518158AB507;
    v2[10] = "md::ls::PendingProcessingShadow]";
    v2[11] = 31;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  if (0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 18) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 18) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xEC85A518158AB507;
  *((_QWORD *)v10 + 1) = "md::ls::PendingProcessingShadow]";
  *((_QWORD *)v10 + 2) = 31;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x2B00F9EAE99A5837;
    *((_QWORD *)v4 + 1) = "md::ls::FinishedProcessingDepthPrePass]";
    *((_QWORD *)v4 + 2) = 38;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_56;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x2B00F9EAE99A5837;
  *((_QWORD *)v21 + 1) = "md::ls::FinishedProcessingDepthPrePass]";
  *((_QWORD *)v21 + 2) = 38;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0xB7D4B4C2109DE954;
    *((_QWORD *)v14 + 1) = "md::ls::PendingProcessingDepthPrePass]";
    *((_QWORD *)v14 + 2) = 37;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_56:
    abort();
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 <= 0xAAAAAAAAAAAAAAALL)
    {
      v31 = (char *)operator new(24 * v30);
      goto LABEL_49;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v31 = 0;
LABEL_49:
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0xB7D4B4C2109DE954;
  *((_QWORD *)v32 + 1) = "md::ls::PendingProcessingDepthPrePass]";
  *((_QWORD *)v32 + 2) = 37;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
}

void sub_19F68B4CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42785B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42785B0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t result;
  uint64_t (**v14)();
  _QWORD *v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42751D8;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E42754A8;
  v5[1] = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E4275538;
  v6[1] = a2;
  v14 = &off_1E427C468;
  v15 = v3;
  v16 = &v14;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v4 + 16))(v4, &v14);
  v7 = v16;
  if (v16 == &v14)
  {
    v8 = 4;
    v7 = &v14;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_6:
  v14 = &off_1E427C4B0;
  v15 = v3;
  v16 = &v14;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v5 + 16))(v5, &v14);
  v9 = v16;
  if (v16 == &v14)
  {
    v10 = 4;
    v9 = &v14;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v10 = 5;
  }
  (*v9)[v10]();
LABEL_11:
  v14 = (uint64_t (**)())&unk_1E427C4F8;
  v15 = v3;
  v16 = &v14;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v6 + 16))(v6, &v14);
  v11 = v16;
  if (v16 == &v14)
  {
    v12 = 4;
    v11 = &v14;
    goto LABEL_15;
  }
  if (v16)
  {
    v12 = 5;
LABEL_15:
    (*v11)[v12]();
  }
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F68B764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == v16)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::FinishedProcessingDepthPrePass>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = &ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity();
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::FinishedProcessingDepthPrePass>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::FinishedProcessingDepthPrePass>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2B00F9EAE99A5837;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2B00F9EAE99A5837;
      if (*(_QWORD *)&v3 <= 0x2B00F9EAE99A5837uLL)
        v5 = 0x2B00F9EAE99A5837uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2B00F9EAE99A5837;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2B00F9EAE99A5837)
            {
              if (v7[2] == 0x2B00F9EAE99A5837)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2B00F9EAE99A5837)
          {
            if (v7[2] == 0x2B00F9EAE99A5837)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FinishedProcessingDepthPrePass]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273DE8;
  *(_QWORD *)(v11 + 8) = 0x2B00F9EAE99A5837;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2B00F9EAE99A5837uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2B00F9EAE99A5837;
  v15[1] = "md::ls::FinishedProcessingDepthPrePass]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2B00F9EAE99A5837, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F68BD80(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB7D4B4C2109DE954;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB7D4B4C2109DE954;
      if (*(_QWORD *)&v3 <= 0xB7D4B4C2109DE954)
        v5 = 0xB7D4B4C2109DE954 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB7D4B4C2109DE954;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB7D4B4C2109DE954)
            {
              if (v7[2] == 0xB7D4B4C2109DE954)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB7D4B4C2109DE954)
          {
            if (v7[2] == 0xB7D4B4C2109DE954)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PendingProcessingDepthPrePass]";
  *(_QWORD *)(v11 + 24) = 37;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273CC8;
  *(_QWORD *)(v11 + 8) = 0xB7D4B4C2109DE954;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB7D4B4C2109DE954, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB7D4B4C2109DE954;
  v15[1] = "md::ls::PendingProcessingDepthPrePass]";
  v15[2] = 37;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB7D4B4C2109DE954, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F68BFA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(_QWORD *result, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[4] = a5;
  v5 = *(_QWORD *)(a2 + 32);
  if (v5 != a5)
  {
    v6 = *(unsigned int *)(a5 + 4);
    v7 = v6 >> 7;
    v8 = a3[4];
    v9 = (a3[5] - v8) >> 3;
    if (v6 >> 7 >= v9)
      goto LABEL_17;
    v10 = *(_QWORD *)(v8 + 8 * v7);
    if (!v10)
      goto LABEL_17;
    v11 = *(unsigned __int16 *)(v10 + 2 * (v6 & 0x7F));
    v13 = a3[7];
    v12 = a3[8];
    if (v11 >= (v12 - v13) >> 3)
      goto LABEL_17;
    v14 = v13 + 8 * v11;
    v15 = v14 != v12 && *(_DWORD *)(v14 + 4) == (_DWORD)v6;
    if (!v15
      || (v16 = a4[4], v7 >= (a4[5] - v16) >> 3)
      || (v17 = *(_QWORD *)(v16 + 8 * v7)) == 0
      || (v18 = *(unsigned __int16 *)(v17 + 2 * (v6 & 0x7F)), v20 = a4[7], v19 = a4[8], v18 >= (v19 - v20) >> 3)
      || ((v21 = v20 + 8 * v18, v21 != v19) ? (v22 = *(_DWORD *)(v21 + 4) == (_DWORD)v6) : (v22 = 0), !v22))
    {
LABEL_17:
      result[4] = a5 + 8;
      if (a5 + 8 != v5)
      {
        v23 = a5 + 16;
        do
        {
          v24 = *(unsigned int *)(v23 - 4);
          v25 = v24 >> 7;
          if (v24 >> 7 < v9)
          {
            v26 = *(_QWORD *)(v8 + 8 * v25);
            if (v26)
            {
              v27 = *(unsigned __int16 *)(v26 + 2 * (v24 & 0x7F));
              v29 = a3[7];
              v28 = a3[8];
              if (v27 < (v28 - v29) >> 3)
              {
                v30 = v29 + 8 * v27;
                if (v30 != v28 && *(_DWORD *)(v30 + 4) == (_DWORD)v24)
                {
                  v32 = a4[4];
                  if (v25 < (a4[5] - v32) >> 3)
                  {
                    v33 = *(_QWORD *)(v32 + 8 * v25);
                    if (v33)
                    {
                      v34 = *(unsigned __int16 *)(v33 + 2 * (v24 & 0x7F));
                      v36 = a4[7];
                      v35 = a4[8];
                      if (v34 < (v35 - v36) >> 3)
                      {
                        v37 = v36 + 8 * v34;
                        if (v37 != v35 && *(_DWORD *)(v37 + 4) == (_DWORD)v24)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          result[4] = v23;
          v15 = v23 == v5;
          v23 += 8;
        }
        while (!v15);
      }
    }
  }
  return result;
}

void gdc::ComponentStorageWrapper<md::ls::PendingProcessingDepthPrePass>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingProcessingDepthPrePass>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PendingProcessingDepthPrePass>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingProcessingDepthPrePass>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FinishedProcessingDepthPrePass>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FinishedProcessingDepthPrePass>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FinishedProcessingDepthPrePass>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FinishedProcessingDepthPrePass>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::FinishedProcessingShadow>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PendingProcessingShadow>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = &ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity();
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::FinishedProcessingShadow>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PendingProcessingShadow>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::FinishedProcessingShadow>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x343B7A672BA2F664;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x343B7A672BA2F664;
      if (*(_QWORD *)&v3 <= 0x343B7A672BA2F664uLL)
        v5 = 0x343B7A672BA2F664uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x343B7A672BA2F664;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x343B7A672BA2F664)
            {
              if (v7[2] == 0x343B7A672BA2F664)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x343B7A672BA2F664)
          {
            if (v7[2] == 0x343B7A672BA2F664)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FinishedProcessingShadow]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272EE8;
  *(_QWORD *)(v11 + 8) = 0x343B7A672BA2F664;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x343B7A672BA2F664uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x343B7A672BA2F664;
  v15[1] = "md::ls::FinishedProcessingShadow]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0x343B7A672BA2F664, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F68C98C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PendingProcessingShadow>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEC85A518158AB507;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEC85A518158AB507;
      if (*(_QWORD *)&v3 <= 0xEC85A518158AB507)
        v5 = 0xEC85A518158AB507 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEC85A518158AB507;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEC85A518158AB507)
            {
              if (v7[2] == 0xEC85A518158AB507)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEC85A518158AB507)
          {
            if (v7[2] == 0xEC85A518158AB507)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PendingProcessingShadow]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272AF8;
  *(_QWORD *)(v11 + 8) = 0xEC85A518158AB507;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEC85A518158AB507, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEC85A518158AB507;
  v15[1] = "md::ls::PendingProcessingShadow]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEC85A518158AB507, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F68CBB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PendingProcessingShadow>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingProcessingShadow>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PendingProcessingShadow>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingProcessingShadow>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FinishedProcessingShadow>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FinishedProcessingShadow>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FinishedProcessingShadow>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FinishedProcessingShadow>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::FinishedProcessing>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PendingProcessing>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = &ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity();
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::FinishedProcessing>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PendingProcessing>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::FinishedProcessing>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCAB567F400206020;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCAB567F400206020;
      if (*(_QWORD *)&v3 <= 0xCAB567F400206020)
        v5 = 0xCAB567F400206020 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCAB567F400206020;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCAB567F400206020)
            {
              if (v7[2] == 0xCAB567F400206020)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCAB567F400206020)
          {
            if (v7[2] == 0xCAB567F400206020)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FinishedProcessing]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272138;
  *(_QWORD *)(v11 + 8) = 0xCAB567F400206020;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCAB567F400206020, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCAB567F400206020;
  v15[1] = "md::ls::FinishedProcessing]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCAB567F400206020, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F68D43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PendingProcessing>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x75DBD6381F1903FFLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x75DBD6381F1903FFLL;
      if (*(_QWORD *)&v3 <= 0x75DBD6381F1903FFuLL)
        v5 = 0x75DBD6381F1903FFuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x75DBD6381F1903FFLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x75DBD6381F1903FFLL)
            {
              if (v7[2] == 0x75DBD6381F1903FFLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x75DBD6381F1903FFLL)
          {
            if (v7[2] == 0x75DBD6381F1903FFLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PendingProcessing]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272018;
  *(_QWORD *)(v11 + 8) = 0x75DBD6381F1903FFLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x75DBD6381F1903FFuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x75DBD6381F1903FFLL;
  v15[1] = "md::ls::PendingProcessing]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x75DBD6381F1903FFLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F68D664(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PendingProcessing>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingProcessing>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PendingProcessing>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingProcessing>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FinishedProcessing>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FinishedProcessing>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FinishedProcessing>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FinishedProcessing>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284418;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284418;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284460;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284460;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276AB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276AB0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *result;
  uint64_t v55;
  char v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v57[0] = &unk_1E42820A8;
  v58 = v57;
  v59[0] = &unk_1E42820A8;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(a2, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v3 = v58;
  if (v58 == v57)
  {
    v4 = 4;
    v3 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E42820F0;
  v58 = v57;
  v59[0] = &unk_1E42820F0;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v5, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v6 = v58;
  if (v58 == v57)
  {
    v7 = 4;
    v6 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  v8 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E4282258;
  v58 = v57;
  v59[0] = &unk_1E4282258;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v8, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v9 = v58;
  if (v58 == v57)
  {
    v10 = 4;
    v9 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_22;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_22:
  v11 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E42822A0;
  v58 = v57;
  v59[0] = &unk_1E42822A0;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v11, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v12 = v58;
  if (v58 == v57)
  {
    v13 = 4;
    v12 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_29;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_29:
  v14 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E42822E8;
  v58 = v57;
  v59[0] = &unk_1E42822E8;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v14, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v15 = v58;
  if (v58 == v57)
  {
    v16 = 4;
    v15 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E4282330;
  v58 = v57;
  v59[0] = &unk_1E4282330;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v17, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v18 = v58;
  if (v58 == v57)
  {
    v19 = 4;
    v18 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_43;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_43:
  v20 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E4282378;
  v58 = v57;
  v59[0] = &unk_1E4282378;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v20, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v21 = v58;
  if (v58 == v57)
  {
    v22 = 4;
    v21 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_50;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_50:
  v23 = *(_QWORD **)(a1 + 8);
  v57[0] = &off_1E42F1350;
  v58 = v57;
  v59[0] = &off_1E42F1350;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v23, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v24 = v58;
  if (v58 == v57)
  {
    v25 = 4;
    v24 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_57;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_57:
  v26 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E42F1398;
  v58 = v57;
  v59[0] = &unk_1E42F1398;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v26, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v27 = v58;
  if (v58 == v57)
  {
    v28 = 4;
    v27 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_64;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_64:
  v29 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E42823C0;
  v58 = v57;
  v59[0] = &unk_1E42823C0;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v29, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v30 = v58;
  if (v58 == v57)
  {
    v31 = 4;
    v30 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_71;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_71:
  v32 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E42F1410;
  v58 = v57;
  v59[0] = &unk_1E42F1410;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v32, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v33 = v58;
  if (v58 == v57)
  {
    v34 = 4;
    v33 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_78;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_78:
  v35 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E42821C8;
  v58 = v57;
  v59[0] = &unk_1E42821C8;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v35, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v36 = v58;
  if (v58 == v57)
  {
    v37 = 4;
    v36 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_85;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_85:
  v38 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E42824E0;
  v58 = v57;
  v59[0] = &unk_1E42824E0;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v38, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v39 = v58;
  if (v58 == v57)
  {
    v40 = 4;
    v39 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_92;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_92:
  v41 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E4282210;
  v58 = v57;
  v59[0] = &unk_1E4282210;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v41, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v42 = v58;
  if (v58 == v57)
  {
    v43 = 4;
    v42 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_99;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_99:
  v44 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E4282138;
  v58 = v57;
  v59[0] = &unk_1E4282138;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v44, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v45 = v58;
  if (v58 == v57)
  {
    v46 = 4;
    v45 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_106;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_106:
  v47 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E4282498;
  v58 = v57;
  v59[0] = &unk_1E4282498;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v47, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v48 = v58;
  if (v58 == v57)
  {
    v49 = 4;
    v48 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_113;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_113:
  v50 = *(_QWORD **)(a1 + 8);
  v57[0] = &unk_1E4282450;
  v58 = v57;
  v59[0] = &unk_1E4282450;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v50, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  v51 = v58;
  if (v58 == v57)
  {
    v52 = 4;
    v51 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_120;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_120:
  v53 = *(_QWORD **)(a1 + 8);
  v57[0] = &off_1E4282408;
  v58 = v57;
  v59[0] = &off_1E4282408;
  v60 = v59;
  v61 = 3;
  ecs2::Runtime::queueCommand(v53, (uint64_t)v59);
  if (v61 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v61])(&v56, v59);
  v61 = -1;
  result = v58;
  if (v58 == v57)
  {
    v55 = 4;
    result = v57;
    goto LABEL_126;
  }
  if (v58)
  {
    v55 = 5;
LABEL_126:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v55))();
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282B58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282B58;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282BA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282BA0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32CommandBufferDescriptionCreationEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F68E4DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls32CommandBufferDescriptionCreationEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0x7C0654221E3B4567;
    *((_QWORD *)v11 + 1) = "md::ls::CommandBufferDescriptionCreation]";
    *((_QWORD *)v11 + 2) = 40;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0x7C0654221E3B4567;
    *((_QWORD *)v3 + 1) = "md::ls::CommandBufferDescriptionCreation]";
    *((_QWORD *)v3 + 2) = 40;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ForwardToExecute<CleanupMeshRendererLayout>,std::allocator<ecs2::ForwardToExecute<CleanupMeshRendererLayout>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<CleanupMeshRendererLayout>,std::allocator<ecs2::ForwardToExecute<CleanupMeshRendererLayout>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275DC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<CleanupMeshRendererLayout>,std::allocator<ecs2::ForwardToExecute<CleanupMeshRendererLayout>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275DC0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<CleanupMeshRendererLayout>,std::allocator<ecs2::ForwardToExecute<CleanupMeshRendererLayout>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  md::VKMRenderResourcesStore *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  md::MaterialResourceStore *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void (***v32)(_QWORD);
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t i;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int8x8_t v58;
  unint64_t v59;
  char *v60;
  uint8x8_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int8x8_t v69;
  char *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  unint64_t v75;
  uint8x8_t v76;
  unint64_t v77;
  uint64_t ***v78;
  uint64_t **v79;
  unint64_t v80;
  uint64_t *v81;
  int8x8_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint8x8_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t **v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v93;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint8x8_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD **v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t result;
  void (***v127)(_QWORD);
  uint64_t **v128;
  _QWORD *v129;
  _QWORD v130[3];
  _QWORD *v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (uint64_t **)(a1 + 8);
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275568;
  v4[1] = a2;
  v5 = **v3;
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = (md::VKMRenderResourcesStore *)v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v13 = **v3;
  v14 = *(_QWORD **)v13;
  v15 = *(_QWORD **)(v13 + 8);
  if (v14 != v15)
  {
    while (*v14 != 0x4EDAD23DFB014132)
    {
      v14 += 5;
      if (v14 == v15)
        goto LABEL_24;
    }
  }
  if (v14 == v15)
  {
LABEL_24:
    v17 = 0;
  }
  else
  {
    v17 = (md::MaterialResourceStore *)v14[3];
    v16 = (std::__shared_weak_count *)v14[4];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v21 = **v3;
  v22 = *(_QWORD **)v21;
  v23 = *(_QWORD **)(v21 + 8);
  if (v22 != v23)
  {
    while (*v22 != 0x348A0B0E758C07C2)
    {
      v22 += 5;
      if (v22 == v23)
        goto LABEL_36;
    }
  }
  if (v22 == v23)
  {
LABEL_36:
    v25 = 0;
  }
  else
  {
    v25 = (_QWORD *)v22[3];
    v24 = (std::__shared_weak_count *)v22[4];
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v29 = **v3;
  v30 = *(_QWORD **)v29;
  v31 = *(_QWORD **)(v29 + 8);
  if (v30 != v31)
  {
    while (*v30 != 0xC94DD89A7B09BE9CLL)
    {
      v30 += 5;
      if (v30 == v31)
        goto LABEL_48;
    }
  }
  if (v30 == v31)
  {
LABEL_48:
    v32 = 0;
  }
  else
  {
    v32 = (void (***)(_QWORD))v30[3];
    v33 = (std::__shared_weak_count *)v30[4];
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  if (*((_QWORD *)v9 + 106))
  {
    v37 = (_QWORD *)*((_QWORD *)v9 + 105);
    if (v37)
    {
      do
      {
        v71 = (_QWORD *)*v37;
        v72 = (_QWORD *)v37[5];
        if (v72)
        {
          do
          {
            v73 = (_QWORD *)*v72;
            operator delete(v72);
            v72 = v73;
          }
          while (v73);
        }
        v74 = (void *)v37[3];
        v37[3] = 0;
        if (v74)
          operator delete(v74);
        operator delete(v37);
        v37 = v71;
      }
      while (v71);
    }
    *((_QWORD *)v9 + 105) = 0;
    v38 = *((_QWORD *)v9 + 104);
    if (v38)
    {
      for (i = 0; i != v38; ++i)
        *(_QWORD *)(*((_QWORD *)v9 + 103) + 8 * i) = 0;
    }
    *((_QWORD *)v9 + 106) = 0;
  }
  md::VKMRenderResourcesStore::resetV2(v9);
  md::MaterialResourceStore::reset(v17);
  v40 = (char *)v25[57];
  if (!v40)
    goto LABEL_263;
  v127 = v32;
  v128 = v3;
  v129 = v4;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  do
  {
    while (v40[40] || *(_OWORD *)(v40 + 24) != 0)
    {
      *((_QWORD *)v40 + 3) = 0;
      v40 = *(char **)v40;
      if (!v40)
        goto LABEL_115;
    }
    *((_QWORD *)v40 + 3) = 0;
    *((_QWORD *)v40 + 4) = 0;
    if (v42 < v43)
    {
      *(_QWORD *)v42 = *((_QWORD *)v40 + 2);
      v42 += 8;
      goto LABEL_88;
    }
    v44 = (v42 - v41) >> 3;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 61)
      abort();
    if ((v43 - v41) >> 2 > v45)
      v45 = (v43 - v41) >> 2;
    if ((unint64_t)(v43 - v41) >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
    {
      if (v46 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v47 = operator new(8 * v46);
    }
    else
    {
      v47 = 0;
    }
    v48 = &v47[8 * v44];
    *(_QWORD *)v48 = *((_QWORD *)v40 + 2);
    v49 = v48 + 8;
    if (v42 != v41)
    {
      v50 = v42 - 8 - v41;
      if (v50 >= 0x168)
      {
        if (&v47[v42 - v41 - 8 - (v50 & 0xFFFFFFFFFFFFFFF8)] > &v47[v42 - v41 - 8])
        {
          v51 = v42;
        }
        else if (&v42[-(v50 & 0xFFFFFFFFFFFFFFF8) - 8] > v42 - 8)
        {
          v51 = v42;
        }
        else if ((unint64_t)(v41 - v47) >= 0x20)
        {
          v52 = (v50 >> 3) + 1;
          v51 = &v42[-8 * (v52 & 0x3FFFFFFFFFFFFFFCLL)];
          v53 = &v47[8 * v44 - 16];
          v54 = v42 - 16;
          v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = *(_OWORD *)v54;
            *(v53 - 1) = *((_OWORD *)v54 - 1);
            *v53 = v56;
            v53 -= 2;
            v54 -= 32;
            v55 -= 4;
          }
          while (v55);
          v48 -= 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_85;
        }
        else
        {
          v51 = v42;
        }
      }
      else
      {
        v51 = v42;
      }
      do
      {
        v57 = *((_QWORD *)v51 - 1);
        v51 -= 8;
        *((_QWORD *)v48 - 1) = v57;
        v48 -= 8;
      }
      while (v51 != v41);
    }
LABEL_85:
    v43 = &v47[8 * v46];
    if (v41)
      operator delete(v41);
    v41 = v48;
    v42 = v49;
LABEL_88:
    v58 = (int8x8_t)v25[56];
    v60 = *(char **)v40;
    v59 = *((_QWORD *)v40 + 1);
    v61 = (uint8x8_t)vcnt_s8(v58);
    v61.i16[0] = vaddlv_u8(v61);
    if (v61.u32[0] > 1uLL)
    {
      if (v59 >= *(_QWORD *)&v58)
        v59 %= *(_QWORD *)&v58;
    }
    else
    {
      v59 &= *(_QWORD *)&v58 - 1;
    }
    v62 = v25[55];
    v63 = *(char **)(v62 + 8 * v59);
    do
    {
      v64 = v63;
      v63 = *(char **)v63;
    }
    while (v63 != v40);
    if (v64 != (char *)(v25 + 57))
    {
      v65 = *((_QWORD *)v64 + 1);
      if (v61.u32[0] > 1uLL)
      {
        if (v65 >= *(_QWORD *)&v58)
          v65 %= *(_QWORD *)&v58;
      }
      else
      {
        v65 &= *(_QWORD *)&v58 - 1;
      }
      v66 = *(_QWORD *)v40;
      if (v65 == v59)
        goto LABEL_107;
    }
    if (!v60)
      goto LABEL_106;
    v67 = *((_QWORD *)v60 + 1);
    if (v61.u32[0] > 1uLL)
    {
      if (v67 >= *(_QWORD *)&v58)
        v67 %= *(_QWORD *)&v58;
    }
    else
    {
      v67 &= *(_QWORD *)&v58 - 1;
    }
    v66 = *(_QWORD *)v40;
    if (v67 != v59)
    {
LABEL_106:
      *(_QWORD *)(v62 + 8 * v59) = 0;
      v66 = *(_QWORD *)v40;
LABEL_107:
      if (!v66)
        goto LABEL_114;
    }
    v68 = *(_QWORD *)(v66 + 8);
    if (v61.u32[0] > 1uLL)
    {
      if (v68 >= *(_QWORD *)&v58)
        v68 %= *(_QWORD *)&v58;
    }
    else
    {
      v68 &= *(_QWORD *)&v58 - 1;
    }
    if (v68 != v59)
    {
      *(_QWORD *)(v25[55] + 8 * v68) = v64;
      v66 = *(_QWORD *)v40;
    }
LABEL_114:
    *(_QWORD *)v64 = v66;
    --v25[58];
    operator delete(v40);
    v40 = v60;
  }
  while (v60);
LABEL_115:
  if (v41 == v42)
    goto LABEL_261;
  v69 = (int8x8_t)v25[9];
  if (!*(_QWORD *)&v69)
    goto LABEL_247;
  v70 = v41;
LABEL_124:
  v75 = *(_QWORD *)v70;
  v76 = (uint8x8_t)vcnt_s8(v69);
  v76.i16[0] = vaddlv_u8(v76);
  if (v76.u32[0] > 1uLL)
  {
    v77 = *(_QWORD *)v70;
    if (v75 >= *(_QWORD *)&v69)
      v77 = v75 % *(_QWORD *)&v69;
  }
  else
  {
    v77 = (*(_QWORD *)&v69 - 1) & v75;
  }
  v78 = *(uint64_t ****)(v25[8] + 8 * v77);
  if (!v78)
    goto LABEL_246;
  v79 = *v78;
  if (!*v78)
    goto LABEL_246;
  if (v76.u32[0] < 2uLL)
  {
    while (1)
    {
      v81 = v79[1];
      if (v81 == (uint64_t *)v75)
      {
        if (v79[2] == (uint64_t *)v75)
          goto LABEL_144;
      }
      else if (((unint64_t)v81 & (*(_QWORD *)&v69 - 1)) != v77)
      {
        goto LABEL_246;
      }
      v79 = (uint64_t **)*v79;
      if (!v79)
        goto LABEL_246;
    }
  }
  while (2)
  {
    v80 = (unint64_t)v79[1];
    if (v80 != v75)
    {
      if (v80 >= *(_QWORD *)&v69)
        v80 %= *(_QWORD *)&v69;
      if (v80 != v77)
        goto LABEL_246;
      goto LABEL_133;
    }
    if (v79[2] != (uint64_t *)v75)
    {
LABEL_133:
      v79 = (uint64_t **)*v79;
      if (!v79)
        goto LABEL_246;
      continue;
    }
    break;
  }
LABEL_144:
  v82 = (int8x8_t)v25[4];
  if (v82)
  {
    v83 = *((unsigned __int8 *)v79 + 32);
    v84 = v79[3];
    v85 = (unint64_t)(&v84[8 * v83 - 0xE44323405AC1F58] - 0x3A3AA7D820E2E4E6) ^ (v83 - 0x61C8864680B583EBLL);
    v86 = (uint8x8_t)vcnt_s8(v82);
    v86.i16[0] = vaddlv_u8(v86);
    if (v86.u32[0] > 1uLL)
    {
      v87 = (unint64_t)(&v84[8 * v83 - 0xE44323405AC1F58] - 0x3A3AA7D820E2E4E6) ^ (v83 - 0x61C8864680B583EBLL);
      if (v85 >= *(_QWORD *)&v82)
        v87 = v85 % *(_QWORD *)&v82;
    }
    else
    {
      v87 = v85 & (*(_QWORD *)&v82 - 1);
    }
    v88 = v25[3];
    v89 = *(uint64_t ***)(v88 + 8 * v87);
    if (v89)
    {
      v90 = *v89;
      if (*v89)
      {
        v91 = *(_QWORD *)&v82 - 1;
        if (v86.u32[0] < 2uLL)
        {
          while (1)
          {
            v93 = v90[1];
            if (v93 == v85)
            {
              if ((uint64_t *)v90[2] == v84 && *((unsigned __int8 *)v90 + 24) == (_DWORD)v83)
                goto LABEL_171;
            }
            else if ((v93 & v91) != v87)
            {
              goto LABEL_198;
            }
            v90 = (uint64_t *)*v90;
            if (!v90)
              goto LABEL_198;
          }
        }
        do
        {
          v95 = v90[1];
          if (v95 == v85)
          {
            if ((uint64_t *)v90[2] == v84 && *((unsigned __int8 *)v90 + 24) == (_DWORD)v83)
            {
LABEL_171:
              if (v86.u32[0] > 1uLL)
              {
                if (v85 >= *(_QWORD *)&v82)
                  v85 %= *(_QWORD *)&v82;
              }
              else
              {
                v85 &= v91;
              }
              v96 = *(uint64_t **)(v88 + 8 * v85);
              do
              {
                v97 = v96;
                v96 = (uint64_t *)*v96;
              }
              while (v96 != v90);
              if (v97 == v25 + 5)
                goto LABEL_188;
              v98 = v97[1];
              if (v86.u32[0] > 1uLL)
              {
                if (v98 >= *(_QWORD *)&v82)
                  v98 %= *(_QWORD *)&v82;
              }
              else
              {
                v98 &= v91;
              }
              if (v98 != v85)
              {
LABEL_188:
                if (!*v90)
                  goto LABEL_189;
                v99 = *(_QWORD *)(*v90 + 8);
                if (v86.u32[0] > 1uLL)
                {
                  if (v99 >= *(_QWORD *)&v82)
                    v99 %= *(_QWORD *)&v82;
                }
                else
                {
                  v99 &= v91;
                }
                if (v99 != v85)
LABEL_189:
                  *(_QWORD *)(v88 + 8 * v85) = 0;
              }
              v100 = (uint64_t *)*v90;
              if (*v90)
              {
                v101 = v100[1];
                if (v86.u32[0] > 1uLL)
                {
                  if (v101 >= *(_QWORD *)&v82)
                    v101 %= *(_QWORD *)&v82;
                }
                else
                {
                  v101 &= v91;
                }
                if (v101 != v85)
                {
                  *(_QWORD *)(v25[3] + 8 * v101) = v97;
                  v100 = (uint64_t *)*v90;
                }
              }
              *v97 = (uint64_t)v100;
              --v25[6];
              operator delete(v90);
              v75 = (unint64_t)v79[2];
              v69 = (int8x8_t)v25[9];
              break;
            }
          }
          else
          {
            if (v95 >= *(_QWORD *)&v82)
              v95 %= *(_QWORD *)&v82;
            if (v95 != v87)
              break;
          }
          v90 = (uint64_t *)*v90;
        }
        while (v90);
      }
    }
  }
LABEL_198:
  if (v69)
  {
    v102 = (uint8x8_t)vcnt_s8(v69);
    v102.i16[0] = vaddlv_u8(v102);
    if (v102.u32[0] > 1uLL)
    {
      v103 = v75;
      if (v75 >= *(_QWORD *)&v69)
        v103 = v75 % *(_QWORD *)&v69;
    }
    else
    {
      v103 = (*(_QWORD *)&v69 - 1) & v75;
    }
    v104 = v25[8];
    v105 = *(_QWORD ***)(v104 + 8 * v103);
    if (v105)
    {
      v106 = *v105;
      if (*v105)
      {
        v107 = *(_QWORD *)&v69 - 1;
        if (v102.u32[0] < 2uLL)
        {
          while (1)
          {
            v108 = v106[1];
            if (v108 == v75)
            {
              if (v106[2] == v75)
                goto LABEL_219;
            }
            else if ((v108 & v107) != v103)
            {
              goto LABEL_246;
            }
            v106 = (_QWORD *)*v106;
            if (!v106)
              goto LABEL_246;
          }
        }
        do
        {
          v109 = v106[1];
          if (v109 == v75)
          {
            if (v106[2] == v75)
            {
LABEL_219:
              if (v102.u32[0] > 1uLL)
              {
                if (v75 >= *(_QWORD *)&v69)
                  v75 %= *(_QWORD *)&v69;
              }
              else
              {
                v75 &= v107;
              }
              v110 = *(_QWORD **)(v104 + 8 * v75);
              do
              {
                v111 = v110;
                v110 = (_QWORD *)*v110;
              }
              while (v110 != v106);
              if (v111 == v25 + 10)
                goto LABEL_236;
              v112 = v111[1];
              if (v102.u32[0] > 1uLL)
              {
                if (v112 >= *(_QWORD *)&v69)
                  v112 %= *(_QWORD *)&v69;
              }
              else
              {
                v112 &= v107;
              }
              if (v112 != v75)
              {
LABEL_236:
                if (!*v106)
                  goto LABEL_237;
                v113 = *(_QWORD *)(*v106 + 8);
                if (v102.u32[0] > 1uLL)
                {
                  if (v113 >= *(_QWORD *)&v69)
                    v113 %= *(_QWORD *)&v69;
                }
                else
                {
                  v113 &= v107;
                }
                if (v113 != v75)
LABEL_237:
                  *(_QWORD *)(v104 + 8 * v75) = 0;
              }
              v114 = *v106;
              if (*v106)
              {
                v115 = *(_QWORD *)(v114 + 8);
                if (v102.u32[0] > 1uLL)
                {
                  if (v115 >= *(_QWORD *)&v69)
                    v115 %= *(_QWORD *)&v69;
                }
                else
                {
                  v115 &= v107;
                }
                if (v115 != v75)
                {
                  *(_QWORD *)(v25[8] + 8 * v115) = v111;
                  v114 = *v106;
                }
              }
              *v111 = v114;
              --v25[11];
              operator delete(v106);
              break;
            }
          }
          else
          {
            if (v109 >= *(_QWORD *)&v69)
              v109 %= *(_QWORD *)&v69;
            if (v109 != v103)
              break;
          }
          v106 = (_QWORD *)*v106;
        }
        while (v106);
      }
    }
  }
LABEL_246:
  while (1)
  {
    v70 += 8;
    if (v70 == v42)
      break;
    v69 = (int8x8_t)v25[9];
    if (v69)
      goto LABEL_124;
  }
LABEL_247:
  v116 = v41;
  do
  {
    v117 = *(_QWORD *)v116;
    v118 = v25[63];
    if (v117 < (v25[64] - v118) >> 3)
    {
      v119 = *(_QWORD *)(v118 + 8 * v117);
      if (v119 && HIDWORD(*(_QWORD *)v116) == HIDWORD(v119))
      {
        v121 = v25[66];
        v122 = (_QWORD *)(v121 + 40 * v119);
        v123 = (_QWORD *)v25[67];
        if (v122 != v123)
        {
          if (*v122 && !*(_BYTE *)(v121 + 40 * v119 + 32))
          {
            (*(void (**)(_QWORD))(*(_QWORD *)*v122 + 8))(*v122);
            v123 = (_QWORD *)v25[67];
          }
          if (v123 != v122)
          {
            v130[0] = *(_QWORD *)(v25[69]
                                              + 0x6666666666666668 * (((unint64_t)v122 - v25[66]) >> 3)) | ((unint64_t)*(unsigned int *)(v25[63] + 8 * *(_QWORD *)(v25[69] + 0x6666666666666668 * (((unint64_t)v122 - v25[66]) >> 3)) + 4) << 32);
            geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::erase((uint64_t)(v25 + 60), v130);
          }
        }
      }
    }
    v116 += 8;
  }
  while (v116 != v42);
LABEL_261:
  v3 = v128;
  v4 = v129;
  v32 = v127;
  if (v41)
    operator delete(v41);
LABEL_263:
  (**v32)(v32);
  v130[0] = &off_1E4279720;
  v130[1] = v3;
  v131 = v130;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v130);
  v124 = v131;
  if (v131 == v130)
  {
    v125 = 4;
    v124 = v130;
LABEL_267:
    (*(void (**)(void))(*v124 + 8 * v125))();
  }
  else if (v131)
  {
    v125 = 5;
    goto LABEL_267;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *v3 = 0;
  return result;
}

void sub_19F68F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v15)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void std::__function::__func<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1},std::allocator<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1}>,void ()(md::ls::CommandBufferDescriptionCreation const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1},std::allocator<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1}>,void ()(md::ls::CommandBufferDescriptionCreation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279720;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1},std::allocator<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1}>,void ()(md::ls::CommandBufferDescriptionCreation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279720;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1},std::allocator<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1}>,void ()(md::ls::CommandBufferDescriptionCreation const&)>::operator()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  char v6;
  _QWORD v7[2];
  int v8;
  _QWORD *v9;
  _QWORD v10[2];
  int v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = (_QWORD *)ecs2::Runtime::_localEntity();
  v1 = HIDWORD(*v0);
  v2 = *v0 << 32;
  v7[0] = &off_1E427F510;
  v7[1] = v2;
  v8 = v1;
  v9 = v7;
  v10[0] = &off_1E427F510;
  v12 = v10;
  v10[1] = v2;
  v11 = v1;
  v13 = 0;
  ecs2::Runtime::queueCommand(v3, (uint64_t)v10);
  if (v13 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v13])(&v6, v10);
  v13 = -1;
  result = v9;
  if (v9 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v9)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarkForEntityDeletion>(gdc::Entity,md::ls::MarkForEntityDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarkForEntityDeletion>(gdc::Entity,md::ls::MarkForEntityDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F510;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarkForEntityDeletion>(gdc::Entity,md::ls::MarkForEntityDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F510;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarkForEntityDeletion>(gdc::Entity,md::ls::MarkForEntityDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::MarkForEntityDeletion>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

uint64_t gdc::Registry::storage<md::ls::MarkForEntityDeletion>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC3545FB0365E4B12;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC3545FB0365E4B12;
      if (*(_QWORD *)&v3 <= 0xC3545FB0365E4B12)
        v5 = 0xC3545FB0365E4B12 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC3545FB0365E4B12;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC3545FB0365E4B12)
            {
              if (v7[2] == 0xC3545FB0365E4B12)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC3545FB0365E4B12)
          {
            if (v7[2] == 0xC3545FB0365E4B12)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::MarkForEntityDeletion]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3AF8;
  *(_QWORD *)(v11 + 8) = 0xC3545FB0365E4B12;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC3545FB0365E4B12, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC3545FB0365E4B12;
  v15[1] = "md::ls::MarkForEntityDeletion]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC3545FB0365E4B12, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F68F91C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::MarkForEntityDeletion>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MarkForEntityDeletion>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MarkForEntityDeletion>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MarkForEntityDeletion>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>::Model<ecs2::RuntimeQuery<md::ls::CommandBufferDescriptionCreation const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>::Model<ecs2::RuntimeQuery<md::ls::CommandBufferDescriptionCreation const&>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *result;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::CommandBufferDescriptionCreation>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v6;
        v23 = *v6;
        v24 = *v6 >> 39;
        v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
          && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              v29 = v4[7],
              v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
            : (v32 = 0),
              v32))
        {
          v33 = v4[11];
          v34 = v4[10] + 3 * v27;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          v33 = v4[11];
          v34 = v33;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
            goto LABEL_44;
        }
        if (v34 == v33)
          v36 = 0;
        else
          v36 = v34;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v36);
        v37 = v4[4];
        v38 = v4[7];
        v22 = (uint64_t *)v4[8];
        v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          v40 = *((unsigned int *)v39 + 1);
          v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            v42 = *(_QWORD *)(v37 + 8 * (v40 >> 7));
            v41 = v4[8];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != (_DWORD)v40)
                  v41 = v4[8];
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            v22 = v39 - 1;
            break;
          }
        }
        v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>::Model<ecs2::RuntimeQuery<md::ls::CommandBufferDescriptionCreation const&>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = (_QWORD *)gdc::Registry::storage<md::ls::CommandBufferDescriptionCreation>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v3 = v1[7];
  v2 = v1[8];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (v8 = *(_QWORD *)(v6 + 8 * (v5 >> 7))) == 0
      || (v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == (_DWORD)v5) : (v11 = 0), !v11))
    {
      v12 = v4 >> 3;
      v13 = v3 + 8;
      while (v13 != v2)
      {
        v14 = *(unsigned int *)(v13 + 4);
        v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          v16 = *(_QWORD *)(v6 + 8 * (v14 >> 7));
          v15 = v1[8];
          if (v16)
          {
            v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            v15 = v1[8];
            if (v12 > v17)
            {
              v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != (_DWORD)v14)
                v15 = v1[8];
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
      v3 = v1[8];
    }
  }
  return v2 == v3;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284D18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284D18;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284D60;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284D60;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276F30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276F30;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;
  char v5;
  _QWORD v6[3];
  _QWORD *v7;
  _QWORD v8[4];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v6[0] = &off_1E4282180;
  v7 = v6;
  v8[0] = &off_1E4282180;
  v8[3] = v8;
  v9 = 3;
  ecs2::Runtime::queueCommand(a2, (uint64_t)v8);
  if (v9 != -1)
    ((void (*)(char *, _QWORD *))off_1E42FB340[v9])(&v5, v8);
  v9 = -1;
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
    goto LABEL_7;
  }
  if (v7)
  {
    v4 = 5;
LABEL_7:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42837B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42837B8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283800;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283800;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276480;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276480;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  _QWORD *i;
  uint64_t *v13;
  uint64_t *j;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xC94DD89A7B09BE9CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xC94DD89A7B09BE9CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  for (i = *(_QWORD **)(result + 16); i; i = (_QWORD *)*i)
  {
    v13 = (uint64_t *)i[4];
    for (j = (uint64_t *)i[5];
          v13 != j;
          result = std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v16, v17, v19, 1))
    {
      v15 = *v13++;
      v16 = *(_QWORD *)(v15 + 72);
      v17 = *(uint64_t **)(v15 + 80);
      v18 = 126 - 2 * __clz((uint64_t)((uint64_t)v17 - v16) >> 3);
      if (v17 == (uint64_t *)v16)
        v19 = 0;
      else
        v19 = v18;
    }
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4282FD8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4282FD8;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xE74BE2A9DD9BA5F1;
  result[1] = "md::ls::CommandBufferRef]";
  result[2] = 24;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283020;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283020;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xD68EA0DE832DEC03;
  v2[1] = "md::ls::RenderItemID]";
  *(_QWORD *)&result = 20;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3EF0;
  v2[4] = "md::ls::ItemsPrepared]";
  v2[5] = 21;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PushRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::PushRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PushRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::PushRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276090;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PushRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::PushRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276090;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PushRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::PushRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int8x8_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  ggl::RenderItem *RenderItem;
  uint64_t result;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RenderItemID>(v3);
  v5 = gdc::Registry::storage<md::ls::ItemsPrepared>(v3);
  v6 = gdc::Registry::storage<md::ls::CommandBufferRef>(v3);
  v7 = (_QWORD *)v6;
  v8 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v4[8] - v4[7])
    v8 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v68 = v8;
  v69 = v4;
  v70 = (_QWORD *)v5;
  v71 = (_QWORD *)v6;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v72 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v68))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v72 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v68);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v13 = (_QWORD *)result;
  }
  else
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *v13 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v4[4];
      if (v17 < (v4[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v4[7],
            v21 = v4[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = v4[11];
        v26 = v4[10] + 24 * v20;
      }
      else
      {
        v25 = v4[11];
        v26 = v25;
      }
      if (v26 == v25)
        v27 = 0;
      else
        v27 = (unint64_t *)v26;
      v28 = v7[4];
      if (v17 < (v7[5] - v28) >> 3
        && (v29 = *(_QWORD *)(v28 + 8 * v17)) != 0
        && (v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            v32 = v7[7],
            v31 = v7[8],
            v30 < (v31 - v32) >> 3)
        && ((v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == (_DWORD)v16) : (v34 = 0), v34))
      {
        v35 = (uint64_t *)(v7[10] + 8 * v30);
      }
      else
      {
        v35 = (uint64_t *)v7[11];
      }
      v36 = **(_QWORD **)(a1 + 8);
      v37 = *(_QWORD **)v36;
      v38 = *(_QWORD **)(v36 + 8);
      if (v37 != v38)
      {
        while (*v37 != 0x41D4E9297E100630)
        {
          v37 += 5;
          if (v37 == v38)
            goto LABEL_45;
        }
      }
      if (v37 == v38)
      {
LABEL_45:
        v39 = 0;
      }
      else
      {
        v39 = (int8x8_t *)v37[3];
        v40 = (std::__shared_weak_count *)v37[4];
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(p_shared_owners);
          while (__stxr(v42 + 1, p_shared_owners));
          do
            v43 = __ldaxr(p_shared_owners);
          while (__stlxr(v43 - 1, p_shared_owners));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      RenderItem = (ggl::RenderItem *)md::VKMRenderResourcesStore::getRenderItem(v39, *v27, v27[1]);
      result = ggl::CommandBuffer::pushRenderItem(*v35, RenderItem);
      v9 = (_QWORD *)v68[4];
      v14 = v72 + 1;
      v72 = v14;
      if (v14 != v9)
      {
        v46 = v69[4];
        while (1)
        {
          v47 = *((unsigned int *)v14 + 1);
          v48 = v47 >> 7;
          if (v47 >> 7 < (v69[5] - v46) >> 3)
          {
            v49 = *(_QWORD *)(v46 + 8 * v48);
            if (v49)
            {
              v50 = v47 & 0x7F;
              v51 = *(unsigned __int16 *)(v49 + 2 * v50);
              v52 = v69[7];
              result = v69[8];
              if (v51 < (result - v52) >> 3)
              {
                v53 = v52 + 8 * v51;
                if (v53 != result && *(_DWORD *)(v53 + 4) == (_DWORD)v47)
                {
                  v55 = v70[4];
                  result = v70[5] - v55;
                  if (v48 < result >> 3)
                  {
                    v56 = *(_QWORD *)(v55 + 8 * v48);
                    if (v56)
                    {
                      v57 = *(unsigned __int16 *)(v56 + 2 * v50);
                      v58 = v70[7];
                      result = v70[8];
                      if (v57 < (result - v58) >> 3)
                      {
                        v59 = v58 + 8 * v57;
                        if (v59 != result && *(_DWORD *)(v59 + 4) == (_DWORD)v47)
                        {
                          v61 = v71[4];
                          result = v71[5] - v61;
                          if (v48 < result >> 3)
                          {
                            v62 = *(_QWORD *)(v61 + 8 * v48);
                            if (v62)
                            {
                              v63 = *(unsigned __int16 *)(v62 + 2 * v50);
                              v65 = v71[7];
                              v64 = v71[8];
                              result = v64 - v65;
                              if (v63 < (v64 - v65) >> 3)
                              {
                                v66 = v65 + 8 * v63;
                                if (*(_DWORD *)(v66 + 4) == (_DWORD)v47 && v66 != v64)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v9)
          {
            v14 = v9;
            goto LABEL_13;
          }
        }
        v9 = v14;
LABEL_13:
        v72 = v14;
      }
    }
    while (v10 != v9);
  }
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::RenderItemID>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD68EA0DE832DEC03;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD68EA0DE832DEC03;
      if (*(_QWORD *)&v3 <= 0xD68EA0DE832DEC03)
        v5 = 0xD68EA0DE832DEC03 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD68EA0DE832DEC03;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD68EA0DE832DEC03)
            {
              if (v7[2] == 0xD68EA0DE832DEC03)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD68EA0DE832DEC03)
          {
            if (v7[2] == 0xD68EA0DE832DEC03)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderItemID]";
  *(_QWORD *)(v11 + 24) = 20;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42713E8;
  *(_QWORD *)(v11 + 8) = 0xD68EA0DE832DEC03;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD68EA0DE832DEC03, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD68EA0DE832DEC03;
  v15[1] = "md::ls::RenderItemID]";
  v15[2] = 20;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD68EA0DE832DEC03, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F690A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ItemsPrepared>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC120277B06FDA0DALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC120277B06FDA0DALL;
      if (*(_QWORD *)&v3 <= 0xC120277B06FDA0DALL)
        v5 = 0xC120277B06FDA0DALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC120277B06FDA0DALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC120277B06FDA0DALL)
            {
              if (v7[2] == 0xC120277B06FDA0DALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC120277B06FDA0DALL)
          {
            if (v7[2] == 0xC120277B06FDA0DALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ItemsPrepared]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42715C8;
  *(_QWORD *)(v11 + 8) = 0xC120277B06FDA0DALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC120277B06FDA0DALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC120277B06FDA0DALL;
  v15[1] = "md::ls::ItemsPrepared]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC120277B06FDA0DALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F690C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::CommandBufferRef>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE74BE2A9DD9BA5F1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE74BE2A9DD9BA5F1;
      if (*(_QWORD *)&v3 <= 0xE74BE2A9DD9BA5F1)
        v5 = 0xE74BE2A9DD9BA5F1 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE74BE2A9DD9BA5F1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE74BE2A9DD9BA5F1)
            {
              if (v7[2] == 0xE74BE2A9DD9BA5F1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE74BE2A9DD9BA5F1)
          {
            if (v7[2] == 0xE74BE2A9DD9BA5F1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::CommandBufferRef]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271AD8;
  *(_QWORD *)(v11 + 8) = 0xE74BE2A9DD9BA5F1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE74BE2A9DD9BA5F1, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE74BE2A9DD9BA5F1;
  v15[1] = "md::ls::CommandBufferRef]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE74BE2A9DD9BA5F1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F690E58(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (_QWORD *)a1[1];
  v2 = *(unsigned int *)(a1[5] + 4);
  v3 = v2 >> 7;
  v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3)
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    return 0;
  v6 = v2 & 0x7F;
  v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  v10 = v1 + 7;
  v8 = v1[7];
  v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3)
    return 0;
  v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != (_DWORD)v2)
    return 0;
  v13 = (_QWORD *)a1[2];
  v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3)
    return 0;
  v15 = *(_QWORD *)(v14 + 8 * v3);
  if (!v15)
    return 0;
  v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  v19 = v13 + 7;
  v17 = v13[7];
  v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3)
    return 0;
  v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != (_DWORD)v2)
    return 0;
  v23 = (_QWORD *)a1[3];
  v24 = v23[4];
  if (v3 < (v23[5] - v24) >> 3 && (v25 = *(_QWORD *)(v24 + 8 * v3)) != 0)
  {
    v26 = *(unsigned __int16 *)(v25 + 2 * v6);
    v29 = v23 + 7;
    v28 = v23[7];
    v27 = v29[1];
    if (v26 < (v27 - v28) >> 3)
    {
      v30 = v28 + 8 * v26;
      if (*(_DWORD *)(v30 + 4) == (_DWORD)v2)
        v31 = v30;
      else
        v31 = v27;
      return v31 != v27;
    }
  }
  else
  {
    v27 = v23[8];
  }
  v31 = v27;
  return v31 != v27;
}

void gdc::ComponentStorageWrapper<md::ls::CommandBufferRef>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CommandBufferRef>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CommandBufferRef>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CommandBufferRef>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::ItemsPrepared>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ItemsPrepared>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ItemsPrepared>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ItemsPrepared>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RenderItemID>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderItemID>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_QWORD *)(v15 - 8);
  *(_OWORD *)v14 = *(_OWORD *)(v15 - 24);
  *(_QWORD *)(v14 + 16) = v16;
  a1[11] -= 24;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderItemID>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderItemID>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283848;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283848;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xD68EA0DE832DEC03;
  result[1] = "md::ls::RenderItemID]";
  result[2] = 20;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283890;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283890;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0xF0uLL);
  a1[2] = (char *)(v2 + 30);
  *v2 = 0x52AC71251090DBDELL;
  v2[1] = "md::ls::RenderState]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB3F00;
  v2[4] = "md::ls::PipelineSetup]";
  v2[5] = 21;
  v2[6] = 0x9158B59D97A4E38DLL;
  v2[7] = "md::ls::RenderOrderToUse]";
  v2[8] = 24;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 30)
  {
    *(_QWORD *)v3 = 0xE53EF176130D7769;
    v2[10] = "md::ls::InstanceCount]";
    v2[11] = 21;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  if (0x5555555555555556 * (((char *)(v2 + 30) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 30) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 30) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0xE53EF176130D7769;
  *((_QWORD *)v10 + 1) = "md::ls::InstanceCount]";
  *((_QWORD *)v10 + 2) = 21;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x9EC66CE0B60A2DFFLL;
    *((_QWORD *)v4 + 1) = "md::ls::StencilRefValueToUse]";
    *((_QWORD *)v4 + 2) = 28;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v20 = (char *)operator new(24 * v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x9EC66CE0B60A2DFFLL;
  *((_QWORD *)v21 + 1) = "md::ls::StencilRefValueToUse]";
  *((_QWORD *)v21 + 2) = 28;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
  v24 = (unint64_t)a1[2];
  if ((unint64_t)v14 < v24)
  {
    *(_QWORD *)v14 = 0x71CBA64B1A9CA230;
    *((_QWORD *)v14 + 1) = "md::ls::IndexRange]";
    *((_QWORD *)v14 + 2) = 18;
    v25 = v14 + 24;
    goto LABEL_55;
  }
  v26 = *a1;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  v28 = v27 + 1;
  if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v29 > v28)
    v28 = 2 * v29;
  if (v29 >= 0x555555555555555)
    v30 = 0xAAAAAAAAAAAAAAALL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v31 = (char *)operator new(24 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[24 * v27];
  v33 = &v31[24 * v30];
  *(_QWORD *)v32 = 0x71CBA64B1A9CA230;
  *((_QWORD *)v32 + 1) = "md::ls::IndexRange]";
  *((_QWORD *)v32 + 2) = 18;
  v25 = v32 + 24;
  if (v14 == v26)
  {
    *a1 = v32;
    a1[1] = v25;
    a1[2] = v33;
LABEL_54:
    operator delete(v14);
    goto LABEL_55;
  }
  do
  {
    v34 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v32 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v32 - 24) = v34;
    v32 -= 24;
    v14 -= 24;
  }
  while (v14 != v26);
  v14 = *a1;
  *a1 = v32;
  a1[1] = v25;
  a1[2] = v33;
  if (v14)
    goto LABEL_54;
LABEL_55:
  a1[1] = v25;
  v35 = (unint64_t)a1[2];
  if ((unint64_t)v25 < v35)
  {
    *(_QWORD *)v25 = 0xCD844FF303308290;
    *((_QWORD *)v25 + 1) = "md::ls::HasMeshHandle]";
    *((_QWORD *)v25 + 2) = 21;
    v36 = v25 + 24;
    goto LABEL_73;
  }
  v37 = *a1;
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *a1) >> 3);
  v39 = v38 + 1;
  if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v37) >> 3);
  if (2 * v40 > v39)
    v39 = 2 * v40;
  if (v40 >= 0x555555555555555)
    v41 = 0xAAAAAAAAAAAAAAALL;
  else
    v41 = v39;
  if (v41)
  {
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v42 = (char *)operator new(24 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = &v42[24 * v38];
  v44 = &v42[24 * v41];
  *(_QWORD *)v43 = 0xCD844FF303308290;
  *((_QWORD *)v43 + 1) = "md::ls::HasMeshHandle]";
  *((_QWORD *)v43 + 2) = 21;
  v36 = v43 + 24;
  if (v25 == v37)
  {
    *a1 = v43;
    a1[1] = v36;
    a1[2] = v44;
LABEL_72:
    operator delete(v25);
    goto LABEL_73;
  }
  do
  {
    v45 = *(_OWORD *)(v25 - 24);
    *((_QWORD *)v43 - 1) = *((_QWORD *)v25 - 1);
    *(_OWORD *)(v43 - 24) = v45;
    v43 -= 24;
    v25 -= 24;
  }
  while (v25 != v37);
  v25 = *a1;
  *a1 = v43;
  a1[1] = v36;
  a1[2] = v44;
  if (v25)
    goto LABEL_72;
LABEL_73:
  a1[1] = v36;
  v46 = (unint64_t)a1[2];
  if ((unint64_t)v36 < v46)
  {
    *(_QWORD *)v36 = 0xC62D89929260CB56;
    *((_QWORD *)v36 + 1) = "md::ls::FunctionConstants]";
    *((_QWORD *)v36 + 2) = 25;
    v47 = v36 + 24;
    goto LABEL_91;
  }
  v48 = *a1;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *a1) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v48) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v53 = (char *)operator new(24 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[24 * v49];
  v55 = &v53[24 * v52];
  *(_QWORD *)v54 = 0xC62D89929260CB56;
  *((_QWORD *)v54 + 1) = "md::ls::FunctionConstants]";
  *((_QWORD *)v54 + 2) = 25;
  v47 = v54 + 24;
  if (v36 == v48)
  {
    *a1 = v54;
    a1[1] = v47;
    a1[2] = v55;
LABEL_90:
    operator delete(v36);
    goto LABEL_91;
  }
  do
  {
    v56 = *(_OWORD *)(v36 - 24);
    *((_QWORD *)v54 - 1) = *((_QWORD *)v36 - 1);
    *(_OWORD *)(v54 - 24) = v56;
    v54 -= 24;
    v36 -= 24;
  }
  while (v36 != v48);
  v36 = *a1;
  *a1 = v54;
  a1[1] = v47;
  a1[2] = v55;
  if (v36)
    goto LABEL_90;
LABEL_91:
  a1[1] = v47;
  v57 = (unint64_t)a1[2];
  if ((unint64_t)v47 < v57)
  {
    *(_QWORD *)v47 = 0x8D5EEF513BFB7EF4;
    *((_QWORD *)v47 + 1) = "md::ls::VisibilityTestResult]";
    *((_QWORD *)v47 + 2) = 28;
    v58 = v47 + 24;
    goto LABEL_109;
  }
  v59 = *a1;
  v60 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a1) >> 3);
  v61 = v60 + 1;
  if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_128;
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (_QWORD)v59) >> 3);
  if (2 * v62 > v61)
    v61 = 2 * v62;
  if (v62 >= 0x555555555555555)
    v63 = 0xAAAAAAAAAAAAAAALL;
  else
    v63 = v61;
  if (v63)
  {
    if (v63 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_129;
    v64 = (char *)operator new(24 * v63);
  }
  else
  {
    v64 = 0;
  }
  v65 = &v64[24 * v60];
  v66 = &v64[24 * v63];
  *(_QWORD *)v65 = 0x8D5EEF513BFB7EF4;
  *((_QWORD *)v65 + 1) = "md::ls::VisibilityTestResult]";
  *((_QWORD *)v65 + 2) = 28;
  v58 = v65 + 24;
  if (v47 == v59)
  {
    *a1 = v65;
    a1[1] = v58;
    a1[2] = v66;
LABEL_108:
    operator delete(v47);
    goto LABEL_109;
  }
  do
  {
    v67 = *(_OWORD *)(v47 - 24);
    *((_QWORD *)v65 - 1) = *((_QWORD *)v47 - 1);
    *(_OWORD *)(v65 - 24) = v67;
    v65 -= 24;
    v47 -= 24;
  }
  while (v47 != v59);
  v47 = *a1;
  *a1 = v65;
  a1[1] = v58;
  a1[2] = v66;
  if (v47)
    goto LABEL_108;
LABEL_109:
  a1[1] = v58;
  v68 = (unint64_t)a1[2];
  if ((unint64_t)v58 < v68)
  {
    *(_QWORD *)v58 = 0x22E5462B4C348FD9;
    *((_QWORD *)v58 + 1) = "md::ls::ShouldSkipRender]";
    *((_QWORD *)v58 + 2) = 24;
    v69 = v58 + 24;
    goto LABEL_127;
  }
  v70 = *a1;
  v71 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *a1) >> 3);
  v72 = v71 + 1;
  if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_128:
    abort();
  v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (_QWORD)v70) >> 3);
  if (2 * v73 > v72)
    v72 = 2 * v73;
  if (v73 >= 0x555555555555555)
    v74 = 0xAAAAAAAAAAAAAAALL;
  else
    v74 = v72;
  if (v74)
  {
    if (v74 <= 0xAAAAAAAAAAAAAAALL)
    {
      v75 = (char *)operator new(24 * v74);
      goto LABEL_121;
    }
LABEL_129:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v75 = 0;
LABEL_121:
  v76 = &v75[24 * v71];
  v77 = &v75[24 * v74];
  *(_QWORD *)v76 = 0x22E5462B4C348FD9;
  *((_QWORD *)v76 + 1) = "md::ls::ShouldSkipRender]";
  *((_QWORD *)v76 + 2) = 24;
  v69 = v76 + 24;
  if (v58 == v70)
  {
    *a1 = v76;
    a1[1] = v69;
    a1[2] = v77;
LABEL_126:
    operator delete(v58);
    goto LABEL_127;
  }
  do
  {
    v78 = *(_OWORD *)(v58 - 24);
    *((_QWORD *)v76 - 1) = *((_QWORD *)v58 - 1);
    *(_OWORD *)(v76 - 24) = v78;
    v76 -= 24;
    v58 -= 24;
  }
  while (v58 != v70);
  v58 = *a1;
  *a1 = v76;
  a1[1] = v69;
  a1[2] = v77;
  if (v58)
    goto LABEL_126;
LABEL_127:
  a1[1] = v69;
}

void sub_19F691D8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42764C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42764C8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *HasMesh;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL4 isValid;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  int8x8_t *v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  unint64_t v108;
  _BOOL4 v109;
  _QWORD *v110;
  _BOOL4 v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *ShouldSkip;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  unsigned __int8 *v129;
  _QWORD v130[8];
  _QWORD *v131;
  char v132;
  _QWORD v133[2];
  int v134;
  _QWORD *v135;
  _QWORD v136[2];
  int v137;
  _QWORD *v138;
  int v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = gdc::Registry::storage<md::ls::RenderState>(v2);
  v4 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::IndexRange>(v2);
  HasMesh = (_QWORD *)gdc::Registry::storage<md::ls::HasMeshHandle>(v2);
  v7 = gdc::Registry::storage<md::ls::FunctionConstants>(v2);
  v8 = (_QWORD *)gdc::Registry::storage<md::ls::RenderOrderToUse>(v2);
  v9 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceCount>(v2);
  v10 = (_QWORD *)gdc::Registry::storage<md::ls::StencilRefValueToUse>(v2);
  v126 = (_QWORD *)gdc::Registry::storage<md::ls::VisibilityTestResult>(v2);
  ShouldSkip = (_QWORD *)gdc::Registry::storage<md::ls::ShouldSkipRender>(v2);
  v11 = gdc::Registry::storage<md::ls::RenderItemID>(v2);
  v12 = (_QWORD *)v11;
  v13 = (_QWORD *)(v11 + 32);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) < *(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56))
    v13 = (_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v13[4] - v13[3])
    v13 = (_QWORD *)(v4 + 32);
  if (v5[8] - v5[7] < v13[4] - v13[3])
    v13 = v5 + 4;
  if (HasMesh[8] - HasMesh[7] < v13[4] - v13[3])
    v13 = HasMesh + 4;
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < v13[4] - v13[3])
    v13 = (_QWORD *)(v7 + 32);
  v130[0] = v13;
  v130[1] = v11;
  v130[2] = v3;
  v130[3] = v4;
  v130[4] = v5;
  v130[5] = HasMesh;
  v15 = (_QWORD *)v13[3];
  v14 = (_QWORD *)v13[4];
  v130[6] = v7;
  v131 = v15;
  v127 = v14;
  if (v14 == v15)
  {
    v16 = a1;
  }
  else
  {
    v16 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v130))
    {
      v17 = v15 + 1;
      do
      {
        v15 = v17;
        v131 = v17;
        if (v17 == v127)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v130);
        v17 = v15 + 1;
      }
      while (!isValid);
    }
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v128 = (_QWORD *)result;
  if (v127 != v15)
  {
    v123 = HasMesh;
    v124 = v5;
    v121 = v9;
    v122 = v8;
    v119 = v12;
    v120 = v10;
    do
    {
      *v128 = *v15;
      v20 = *v15;
      v21 = HIDWORD(*v15);
      v22 = *v15 >> 39;
      v23 = v12[4];
      if (v22 < (v12[5] - v23) >> 3
        && (v24 = *(_QWORD *)(v23 + 8 * v22)) != 0
        && (v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v20) & 0x7F)),
            v27 = v12[7],
            v26 = v12[8],
            v25 < (v26 - v27) >> 3)
        && ((v28 = v27 + 8 * v25, v28 != v26) ? (v29 = *(_DWORD *)(v28 + 4) == (_DWORD)v21) : (v29 = 0), v29))
      {
        v30 = v12[11];
        v31 = v12[10] + 24 * v25;
      }
      else
      {
        v30 = v12[11];
        v31 = v30;
      }
      if (v31 == v30)
        v32 = 0;
      else
        v32 = (unint64_t *)v31;
      v33 = v8[4];
      if (v22 < (v8[5] - v33) >> 3
        && (v34 = *(_QWORD *)(v33 + 8 * v22)) != 0
        && (v35 = *(unsigned __int16 *)(v34 + 2 * (HIDWORD(v20) & 0x7F)),
            v37 = v8[7],
            v36 = v8[8],
            v35 < (v36 - v37) >> 3)
        && ((v38 = v37 + 8 * v35, v38 != v36) ? (v39 = *(_DWORD *)(v38 + 4) == (_DWORD)v21) : (v39 = 0), v39))
      {
        v40 = v8[11];
        v41 = v8[10] + 8 * v35;
      }
      else
      {
        v40 = v8[11];
        v41 = v40;
      }
      if (v41 == v40)
        v42 = 0;
      else
        v42 = v41;
      v43 = v9[4];
      if (v22 < (v9[5] - v43) >> 3
        && (v44 = *(_QWORD *)(v43 + 8 * v22)) != 0
        && (v45 = *(unsigned __int16 *)(v44 + 2 * (HIDWORD(v20) & 0x7F)),
            v47 = v9[7],
            v46 = v9[8],
            v45 < (v46 - v47) >> 3)
        && ((v48 = v47 + 8 * v45, v48 != v46) ? (v49 = *(_DWORD *)(v48 + 4) == (_DWORD)v21) : (v49 = 0), v49))
      {
        v50 = v9[11];
        v51 = v9[10] + 8 * v45;
      }
      else
      {
        v50 = v9[11];
        v51 = v50;
      }
      if (v51 == v50)
        v52 = 0;
      else
        v52 = (_QWORD *)v51;
      v53 = v10[4];
      if (v22 < (v10[5] - v53) >> 3
        && (v54 = *(_QWORD *)(v53 + 8 * v22)) != 0
        && (v55 = *(unsigned __int16 *)(v54 + 2 * (HIDWORD(v20) & 0x7F)),
            v57 = v10[7],
            v56 = v10[8],
            v55 < (v56 - v57) >> 3)
        && ((v58 = v57 + 8 * v55, v58 != v56) ? (v59 = *(_DWORD *)(v58 + 4) == (_DWORD)v21) : (v59 = 0), v59))
      {
        v60 = v10[11];
        v61 = v10[10] + v55;
      }
      else
      {
        v60 = v10[11];
        v61 = v60;
      }
      if (v61 == v60)
        v62 = 0;
      else
        v62 = (unsigned __int8 *)v61;
      v63 = v5[4];
      v129 = v62;
      if (v22 < (v5[5] - v63) >> 3
        && (v64 = *(_QWORD *)(v63 + 8 * v22)) != 0
        && (v65 = *(unsigned __int16 *)(v64 + 2 * (HIDWORD(v20) & 0x7F)),
            v67 = v5[7],
            v66 = v5[8],
            v65 < (v66 - v67) >> 3)
        && ((v68 = v67 + 8 * v65, v68 != v66) ? (v69 = *(_DWORD *)(v68 + 4) == (_DWORD)v21) : (v69 = 0), v69))
      {
        v70 = v5[11];
        v71 = v5[10] + 16 * v65;
      }
      else
      {
        v70 = v5[11];
        v71 = v70;
      }
      if (v71 == v70)
        v72 = 0;
      else
        v72 = (_OWORD *)v71;
      v73 = HasMesh[4];
      if (v22 < (HasMesh[5] - v73) >> 3
        && (v74 = *(_QWORD *)(v73 + 8 * v22)) != 0
        && (v75 = *(unsigned __int16 *)(v74 + 2 * (HIDWORD(v20) & 0x7F)),
            v77 = HasMesh[7],
            v76 = HasMesh[8],
            v75 < (v76 - v77) >> 3)
        && ((v78 = v77 + 8 * v75, v78 != v76) ? (v79 = *(_DWORD *)(v78 + 4) == (_DWORD)v21) : (v79 = 0), v79))
      {
        v80 = (_QWORD *)(HasMesh[10] + 8 * v75);
      }
      else
      {
        v80 = (_QWORD *)HasMesh[11];
      }
      v81 = v126[4];
      if (v22 < (v126[5] - v81) >> 3
        && (v82 = *(_QWORD *)(v81 + 8 * v22)) != 0
        && (v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v20) & 0x7F)),
            v85 = v126[7],
            v84 = v126[8],
            v83 < (v84 - v85) >> 3)
        && ((v86 = v85 + 8 * v83, v86 != v84) ? (v87 = *(_DWORD *)(v86 + 4) == (_DWORD)v21) : (v87 = 0), v87))
      {
        v88 = (_BYTE *)v126[11];
        v89 = (_BYTE *)(v126[10] + v83);
      }
      else
      {
        v88 = (_BYTE *)v126[11];
        v89 = v88;
      }
      if (v89 == v88)
        v90 = 0;
      else
        v90 = v89;
      v91 = ShouldSkip[4];
      if (v22 < (ShouldSkip[5] - v91) >> 3
        && (v92 = *(_QWORD *)(v91 + 8 * v22)) != 0
        && (v93 = *(unsigned __int16 *)(v92 + 2 * (HIDWORD(v20) & 0x7F)),
            v95 = ShouldSkip[7],
            v94 = ShouldSkip[8],
            v93 < (v94 - v95) >> 3)
        && (v96 = v95 + 8 * v93, v96 != v94)
        && *(_DWORD *)(v96 + 4) == (_DWORD)v21)
      {
        v97 = ShouldSkip[11];
        v98 = ShouldSkip[10] + v93;
      }
      else
      {
        v97 = ShouldSkip[11];
        v98 = v97;
      }
      v99 = **(_QWORD **)(v16 + 8);
      v100 = *(_QWORD **)v99;
      v101 = *(_QWORD **)(v99 + 8);
      if (v100 != v101)
      {
        while (*v100 != 0x41D4E9297E100630)
        {
          v100 += 5;
          if (v100 == v101)
          {
            v102 = v52;
            v103 = (_QWORD *)v42;
            v104 = 0;
            if (v90)
              goto LABEL_116;
            goto LABEL_118;
          }
        }
      }
      v102 = v52;
      v103 = (_QWORD *)v42;
      if (v100 == v101)
      {
        v104 = 0;
        if (v90)
          goto LABEL_116;
      }
      else
      {
        v104 = (int8x8_t *)v100[3];
        v105 = (std::__shared_weak_count *)v100[4];
        if (v105)
        {
          p_shared_owners = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldxr(p_shared_owners);
          while (__stxr(v107 + 1, p_shared_owners));
          do
            v108 = __ldaxr(p_shared_owners);
          while (__stlxr(v108 - 1, p_shared_owners));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        v16 = a1;
        if (v90)
        {
LABEL_116:
          v109 = *v90 != 0;
          goto LABEL_119;
        }
      }
LABEL_118:
      v109 = 1;
LABEL_119:
      result = md::VKMRenderResourcesStore::getRenderItem(v104, *v32, v32[1]);
      *(_OWORD *)(result + 72) = *v72;
      *(_QWORD *)(result + 88) = 0;
      *(_QWORD *)(result + 96) = 1;
      *(_QWORD *)(result + 64) = *v80;
      *(_QWORD *)(result + 8) = v32[2];
      v110 = v103;
      if (v129)
        *(_DWORD *)(result + 40) = *v129;
      v12 = v119;
      v10 = v120;
      if (v102)
        *(_QWORD *)(result + 104) = *v102;
      v8 = v122;
      if (v110)
        *(_QWORD *)(result + 48) = *v110;
      v112 = (v98 == v97 || v98 == 0) && v109;
      v5 = v124;
      v9 = v121;
      if (v112)
      {
        v113 = *(_QWORD **)(v16 + 8);
        v114 = HIDWORD(*v128);
        v115 = *v128 << 32;
        v133[0] = &off_1E427DD28;
        v133[1] = v115;
        v134 = v114;
        v135 = v133;
        v136[0] = &off_1E427DD28;
        v138 = v136;
        v136[1] = v115;
        v137 = v114;
        v139 = 0;
        ecs2::Runtime::queueCommand(v113, (uint64_t)v136);
        if (v139 != -1)
          ((void (*)(char *, _QWORD *))off_1E42FB340[v139])(&v132, v136);
        v139 = -1;
        result = (uint64_t)v135;
        if (v135 == v133)
        {
          result = (uint64_t)v133;
          v116 = 4;
        }
        else
        {
          if (!v135)
            goto LABEL_139;
          v116 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v116))();
      }
LABEL_139:
      v15 = v131;
      v117 = *(_QWORD **)(v130[0] + 32);
      while (1)
      {
        v131 = ++v15;
        if (v15 == v117)
          break;
        result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v130);
        if ((_DWORD)result)
          goto LABEL_21;
      }
      v15 = v117;
LABEL_21:
      HasMesh = v123;
    }
    while (v127 != v15);
  }
  *v128 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v16 + 8) = 0;
  return result;
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = (_QWORD *)a1[1];
  v2 = *(unsigned int *)(a1[8] + 4);
  v3 = v2 >> 7;
  v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3)
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    return 0;
  v6 = v2 & 0x7F;
  v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  v10 = v1 + 7;
  v8 = v1[7];
  v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3)
    return 0;
  v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != (_DWORD)v2)
    return 0;
  v13 = (_QWORD *)a1[2];
  v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3)
    return 0;
  v15 = *(_QWORD *)(v14 + 8 * v3);
  if (!v15)
    return 0;
  v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  v19 = v13 + 7;
  v17 = v13[7];
  v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3)
    return 0;
  v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != (_DWORD)v2)
    return 0;
  v22 = (_QWORD *)a1[3];
  v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3)
    return 0;
  v24 = *(_QWORD *)(v23 + 8 * v3);
  if (!v24)
    return 0;
  v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  v28 = v22 + 7;
  v26 = v22[7];
  v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3)
    return 0;
  v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != (_DWORD)v2)
    return 0;
  v31 = (_QWORD *)a1[4];
  v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3)
    return 0;
  v33 = *(_QWORD *)(v32 + 8 * v3);
  if (!v33)
    return 0;
  v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  v37 = v31 + 7;
  v35 = v31[7];
  v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3)
    return 0;
  v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != (_DWORD)v2)
    return 0;
  v40 = (_QWORD *)a1[5];
  v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3)
    return 0;
  v42 = *(_QWORD *)(v41 + 8 * v3);
  if (!v42)
    return 0;
  v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  v45 = v40[7];
  v44 = v40[8];
  if (v43 >= (v44 - v45) >> 3)
    return 0;
  v46 = 0;
  v47 = v45 + 8 * v43;
  if (v47 != v44 && *(_DWORD *)(v47 + 4) == (_DWORD)v2)
  {
    v48 = (_QWORD *)a1[6];
    v49 = v48[4];
    if (v3 < (v48[5] - v49) >> 3 && (v50 = *(_QWORD *)(v49 + 8 * v3)) != 0)
    {
      v51 = *(unsigned __int16 *)(v50 + 2 * v6);
      v53 = v48[7];
      v52 = v48[8];
      if (v51 < (v52 - v53) >> 3)
      {
        v54 = v53 + 8 * v51;
        if (*(_DWORD *)(v54 + 4) == (_DWORD)v2)
          v55 = v54;
        else
          v55 = v48[8];
        return v55 != v52;
      }
    }
    else
    {
      v52 = v48[8];
    }
    v55 = v52;
    return v55 != v52;
  }
  return v46;
}

uint64_t gdc::Registry::storage<md::ls::RenderState>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x52AC71251090DBDELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x52AC71251090DBDELL;
      if (*(_QWORD *)&v3 <= 0x52AC71251090DBDEuLL)
        v5 = 0x52AC71251090DBDEuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x52AC71251090DBDELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x52AC71251090DBDELL)
            {
              if (v7[2] == 0x52AC71251090DBDELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x52AC71251090DBDELL)
          {
            if (v7[2] == 0x52AC71251090DBDELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderState]";
  *(_QWORD *)(v11 + 24) = 19;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42711A8;
  *(_QWORD *)(v11 + 8) = 0x52AC71251090DBDELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x52AC71251090DBDEuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x52AC71251090DBDELL;
  v15[1] = "md::ls::RenderState]";
  v15[2] = 19;
  gdc::Registry::_registerStorageDataSignals(a1, 0x52AC71251090DBDELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F692994(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PipelineSetup>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9C4E7BCF9B8D6334;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9C4E7BCF9B8D6334;
      if (*(_QWORD *)&v3 <= 0x9C4E7BCF9B8D6334)
        v5 = 0x9C4E7BCF9B8D6334 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9C4E7BCF9B8D6334;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9C4E7BCF9B8D6334)
            {
              if (v7[2] == 0x9C4E7BCF9B8D6334)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9C4E7BCF9B8D6334)
          {
            if (v7[2] == 0x9C4E7BCF9B8D6334)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PipelineSetup]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271628;
  *(_QWORD *)(v11 + 8) = 0x9C4E7BCF9B8D6334;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9C4E7BCF9B8D6334, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9C4E7BCF9B8D6334;
  v15[1] = "md::ls::PipelineSetup]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9C4E7BCF9B8D6334, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F692BBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::IndexRange>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x71CBA64B1A9CA230;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x71CBA64B1A9CA230;
      if (*(_QWORD *)&v3 <= 0x71CBA64B1A9CA230uLL)
        v5 = 0x71CBA64B1A9CA230uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x71CBA64B1A9CA230;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x71CBA64B1A9CA230)
            {
              if (v7[2] == 0x71CBA64B1A9CA230)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x71CBA64B1A9CA230)
          {
            if (v7[2] == 0x71CBA64B1A9CA230)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IndexRange]";
  *(_QWORD *)(v11 + 24) = 18;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270E78;
  *(_QWORD *)(v11 + 8) = 0x71CBA64B1A9CA230;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x71CBA64B1A9CA230uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x71CBA64B1A9CA230;
  v15[1] = "md::ls::IndexRange]";
  v15[2] = 18;
  gdc::Registry::_registerStorageDataSignals(a1, 0x71CBA64B1A9CA230, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F692DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::HasMeshHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCD844FF303308290;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCD844FF303308290;
      if (*(_QWORD *)&v3 <= 0xCD844FF303308290)
        v5 = 0xCD844FF303308290 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCD844FF303308290;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCD844FF303308290)
            {
              if (v7[2] == 0xCD844FF303308290)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCD844FF303308290)
          {
            if (v7[2] == 0xCD844FF303308290)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::HasMeshHandle]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42714A8;
  *(_QWORD *)(v11 + 8) = 0xCD844FF303308290;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCD844FF303308290, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCD844FF303308290;
  v15[1] = "md::ls::HasMeshHandle]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCD844FF303308290, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69300C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FunctionConstants>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC62D89929260CB56;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC62D89929260CB56;
      if (*(_QWORD *)&v3 <= 0xC62D89929260CB56)
        v5 = 0xC62D89929260CB56 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC62D89929260CB56;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC62D89929260CB56)
            {
              if (v7[2] == 0xC62D89929260CB56)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC62D89929260CB56)
          {
            if (v7[2] == 0xC62D89929260CB56)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FunctionConstants]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271FB8;
  *(_QWORD *)(v11 + 8) = 0xC62D89929260CB56;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC62D89929260CB56, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC62D89929260CB56;
  v15[1] = "md::ls::FunctionConstants]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC62D89929260CB56, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F693234(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RenderOrderToUse>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9158B59D97A4E38DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9158B59D97A4E38DLL;
      if (*(_QWORD *)&v3 <= 0x9158B59D97A4E38DLL)
        v5 = 0x9158B59D97A4E38DLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9158B59D97A4E38DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9158B59D97A4E38DLL)
            {
              if (v7[2] == 0x9158B59D97A4E38DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9158B59D97A4E38DLL)
          {
            if (v7[2] == 0x9158B59D97A4E38DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RenderOrderToUse]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271CB8;
  *(_QWORD *)(v11 + 8) = 0x9158B59D97A4E38DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9158B59D97A4E38DLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9158B59D97A4E38DLL;
  v15[1] = "md::ls::RenderOrderToUse]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9158B59D97A4E38DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69345C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::InstanceCount>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE53EF176130D7769;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE53EF176130D7769;
      if (*(_QWORD *)&v3 <= 0xE53EF176130D7769)
        v5 = 0xE53EF176130D7769 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE53EF176130D7769;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE53EF176130D7769)
            {
              if (v7[2] == 0xE53EF176130D7769)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE53EF176130D7769)
          {
            if (v7[2] == 0xE53EF176130D7769)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::InstanceCount]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271508;
  *(_QWORD *)(v11 + 8) = 0xE53EF176130D7769;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE53EF176130D7769, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE53EF176130D7769;
  v15[1] = "md::ls::InstanceCount]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE53EF176130D7769, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F693684(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StencilRefValueToUse>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9EC66CE0B60A2DFFLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9EC66CE0B60A2DFFLL;
      if (*(_QWORD *)&v3 <= 0x9EC66CE0B60A2DFFLL)
        v5 = 0x9EC66CE0B60A2DFFLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9EC66CE0B60A2DFFLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9EC66CE0B60A2DFFLL)
            {
              if (v7[2] == 0x9EC66CE0B60A2DFFLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9EC66CE0B60A2DFFLL)
          {
            if (v7[2] == 0x9EC66CE0B60A2DFFLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::StencilRefValueToUse]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272588;
  *(_QWORD *)(v11 + 8) = 0x9EC66CE0B60A2DFFLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9EC66CE0B60A2DFFLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9EC66CE0B60A2DFFLL;
  v15[1] = "md::ls::StencilRefValueToUse]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9EC66CE0B60A2DFFLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6938AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::VisibilityTestResult>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8D5EEF513BFB7EF4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8D5EEF513BFB7EF4;
      if (*(_QWORD *)&v3 <= 0x8D5EEF513BFB7EF4)
        v5 = 0x8D5EEF513BFB7EF4 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8D5EEF513BFB7EF4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8D5EEF513BFB7EF4)
            {
              if (v7[2] == 0x8D5EEF513BFB7EF4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8D5EEF513BFB7EF4)
          {
            if (v7[2] == 0x8D5EEF513BFB7EF4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::VisibilityTestResult]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272798;
  *(_QWORD *)(v11 + 8) = 0x8D5EEF513BFB7EF4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8D5EEF513BFB7EF4, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8D5EEF513BFB7EF4;
  v15[1] = "md::ls::VisibilityTestResult]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8D5EEF513BFB7EF4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F693AD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ShouldSkipRender>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x22E5462B4C348FD9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x22E5462B4C348FD9;
      if (*(_QWORD *)&v3 <= 0x22E5462B4C348FD9uLL)
        v5 = 0x22E5462B4C348FD9uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x22E5462B4C348FD9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x22E5462B4C348FD9)
            {
              if (v7[2] == 0x22E5462B4C348FD9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x22E5462B4C348FD9)
          {
            if (v7[2] == 0x22E5462B4C348FD9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ShouldSkipRender]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271D48;
  *(_QWORD *)(v11 + 8) = 0x22E5462B4C348FD9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x22E5462B4C348FD9uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x22E5462B4C348FD9;
  v15[1] = "md::ls::ShouldSkipRender]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x22E5462B4C348FD9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F693CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::ShouldSkipRender>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShouldSkipRender>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ShouldSkipRender>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShouldSkipRender>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::VisibilityTestResult>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::VisibilityTestResult>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::VisibilityTestResult>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::VisibilityTestResult>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::StencilRefValueToUse>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StencilRefValueToUse>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_BYTE *)(v14 + v7) = *(_BYTE *)--a1[11];
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StencilRefValueToUse>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StencilRefValueToUse>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::InstanceCount>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::InstanceCount>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::InstanceCount>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::InstanceCount>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RenderOrderToUse>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderOrderToUse>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderOrderToUse>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderOrderToUse>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FunctionConstants>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FunctionConstants>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v23 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 33 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_OWORD *)(v15 - 33);
  v17 = *(_OWORD *)(v15 - 17);
  *(_BYTE *)(v14 + 32) = *(_BYTE *)(v15 - 1);
  *(_OWORD *)v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  a1[11] -= 33;
  v18 = (_QWORD *)a1[28];
  if (!v18)
    return 1;
  v19 = a1[31];
  while (1)
  {
    v25[0] = &v23;
    v25[1] = 1;
    v24 = v19;
    v20 = v18[6];
    if (!v20)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v20 + 48))(v20, &v24, v25);
    v18 = (_QWORD *)*v18;
    if (!v18)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FunctionConstants>::contains(v21, v22);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FunctionConstants>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::HasMeshHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasMeshHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasMeshHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasMeshHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::IndexRange>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IndexRange>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IndexRange>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IndexRange>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PipelineSetup>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PipelineSetup>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PipelineSetup>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PipelineSetup>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RenderState>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderState>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderState>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderState>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287088;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287088;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F694C20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0x9C4E7BCF9B8D6334;
    *((_QWORD *)v11 + 1) = "md::ls::PipelineSetup]";
    *((_QWORD *)v11 + 2) = 21;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0x9C4E7BCF9B8D6334;
    *((_QWORD *)v3 + 1) = "md::ls::PipelineSetup]";
    *((_QWORD *)v3 + 2) = 21;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42870D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42870D0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xF9931FC5DA4F362;
  v2[1] = "md::ls::RequiresShaderTextureID<Flyover::NightTexture>]";
  *(_QWORD *)&result = 54;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3F10;
  v2[4] = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
  v2[5] = 51;
  v2[6] = 0x69465F3BE0BF85FBLL;
  v2[7] = "md::ls::FlyoverInstance]";
  v2[8] = 23;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42780E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42780E8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _BOOL4 isValid;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  BOOL v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t *v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned __int8 v78;
  unint64_t v79;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint8x8_t v89;
  unint64_t v90;
  uint64_t ***v91;
  uint64_t **v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  int v125;
  unsigned __int8 *v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v159;
  md *v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  unint64_t v171;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::NightTexture>>(v3);
  v6 = gdc::Registry::storage<md::ls::FlyoverInstance>(v3);
  v7 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v8 = (_QWORD *)v7;
  v9 = (_QWORD *)(v4 + 32);
  if (v5[8] - v5[7] < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v9 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v9[4] - v9[3])
    v9 = (_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < v9[4] - v9[3])
    v9 = (_QWORD *)(v7 + 32);
  v165 = v9;
  v166 = (_QWORD *)v4;
  v167 = v5;
  v168 = (_QWORD *)v6;
  v11 = (_QWORD *)v9[3];
  v10 = (_QWORD *)v9[4];
  v169 = (_QWORD *)v7;
  v170 = v11;
  v164 = v10;
  if (v10 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v165))
  {
    v12 = v11 + 1;
    do
    {
      v11 = v12;
      v170 = v12;
      if (v12 == v164)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v165);
      v12 = v11 + 1;
    }
    while (!isValid);
  }
  v163 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  if (v164 != v11)
  {
    v161 = v2;
    v162 = v5;
    do
    {
      *v163 = *v11;
      v14 = *v11;
      v15 = HIDWORD(*v11);
      v16 = *v11 >> 39;
      v17 = v5[4];
      if (v16 < (v5[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v5[7],
            v20 = v5[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v5[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v5[11];
      }
      v25 = v8[4];
      if (v16 < (v8[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v8[7],
            v28 = v8[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v8[11];
        v33 = v8[10] + 8 * v27;
      }
      else
      {
        v32 = v8[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v2 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_46;
        }
      }
      if (v36 == v37)
      {
LABEL_46:
        v39 = 0;
      }
      else
      {
        v39 = (_QWORD *)v36[3];
        v38 = (std::__shared_weak_count *)v36[4];
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      v43 = **(_QWORD **)(v2 + 8);
      v44 = *(_QWORD **)v43;
      v45 = *(_QWORD **)(v43 + 8);
      if (v44 != v45)
      {
        while (*v44 != 0x348A0B0E758C07C2)
        {
          v44 += 5;
          if (v44 == v45)
            goto LABEL_58;
        }
      }
      if (v44 == v45)
      {
LABEL_58:
        v46 = 0;
      }
      else
      {
        v46 = v44[3];
        v47 = (std::__shared_weak_count *)v44[4];
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
          do
            v50 = __ldaxr(v48);
          while (__stlxr(v50 - 1, v48));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      v51 = (uint64_t)(v39 + 37);
      v52 = *v34;
      v53 = *v34;
      v54 = v39[50];
      v55 = (v39[51] - v54) >> 3;
      if (v53 < v55
        && (v56 = *(_QWORD *)(v54 + 8 * v53)) != 0
        && HIDWORD(v52) == HIDWORD(v56)
        && ((v57 = v39[53], v57 + 16 * v56 != v39[54]) ? (v58 = v57 == 0) : (v58 = 1), !v58))
      {
        v67 = *(_QWORD *)(v54 + 8 * v53);
        v68 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v52, v34);
        ++v68[3];
        v69 = v57 + 16 * v67;
        v2 = v161;
        v59 = *(_QWORD **)(v69 + 8);
        v52 = *v34;
        v54 = v39[50];
        v53 = *v34;
        if (v53 >= (v39[51] - v54) >> 3)
          goto LABEL_78;
      }
      else
      {
        v59 = 0;
        if (v53 >= v55)
          goto LABEL_78;
      }
      v60 = *(_QWORD *)(v54 + 8 * v53);
      if (!v60
        || HIDWORD(v52) != HIDWORD(v60)
        || ((v61 = v39[53], v62 = (uint64_t *)v39[54], v63 = (uint64_t *)(v61 + 16 * v60), v63 != v62)
          ? (v64 = v61 == 0)
          : (v64 = 1),
            v64))
      {
LABEL_78:
        v66 = 0;
        goto LABEL_79;
      }
      v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v51, v52, v34);
      ++v65[3];
      v66 = *v63;
LABEL_79:
      v70 = *v24;
      v171 = v70;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v46 + 104));
      v71 = *(_QWORD *)(v46 + 504);
      if (v70 < (unint64_t)((*(_QWORD *)(v46 + 512) - v71) >> 3)
        && ((v72 = *(_QWORD *)(v71 + 8 * v70)) != 0 ? (v73 = HIDWORD(v70) == HIDWORD(v72)) : (v73 = 0),
            v73))
      {
        v75 = (uint64_t *)(*(_QWORD *)(v46 + 528) + 40 * v72);
        v74 = *(uint64_t **)(v46 + 536);
      }
      else
      {
        v74 = *(uint64_t **)(v46 + 536);
        v75 = v74;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v46 + 104));
      v76 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v46 + 440), v171, &v171);
      v77 = 0;
      ++v76[3];
      if (v75 != v74 && v75)
        v77 = *v75;
      if ((v78 & 1) == 0
      {
        do
          v159 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v159 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<Flyover::NightTexture>(void)::index = v159;
        v2 = v161;
      }
      v79 = v59[1];
      if (!v79)
        goto LABEL_160;
      v80 = gdc::typeIndex<Flyover::NightTexture>(void)::index;
      v81 = (uint8x8_t)vcnt_s8((int8x8_t)v79);
      v81.i16[0] = vaddlv_u8(v81);
      if (v81.u32[0] > 1uLL)
      {
        v82 = gdc::typeIndex<Flyover::NightTexture>(void)::index;
        if (gdc::typeIndex<Flyover::NightTexture>(void)::index >= v79)
          v82 = gdc::typeIndex<Flyover::NightTexture>(void)::index % v79;
      }
      else
      {
        v82 = (v79 - 1) & gdc::typeIndex<Flyover::NightTexture>(void)::index;
      }
      v83 = *(_QWORD **)(*v59 + 8 * v82);
      if (!v83)
        goto LABEL_160;
      v84 = (_QWORD *)*v83;
      if (!v84)
        goto LABEL_160;
      if (v81.u32[0] < 2uLL)
      {
        v85 = v79 - 1;
        while (1)
        {
          v87 = v84[1];
          if (gdc::typeIndex<Flyover::NightTexture>(void)::index == v87)
          {
            if (v84[2] == gdc::typeIndex<Flyover::NightTexture>(void)::index)
              goto LABEL_111;
          }
          else if ((v87 & v85) != v82)
          {
            goto LABEL_160;
          }
          v84 = (_QWORD *)*v84;
          if (!v84)
            goto LABEL_160;
        }
      }
      while (1)
      {
        v86 = v84[1];
        if (gdc::typeIndex<Flyover::NightTexture>(void)::index == v86)
          break;
        if (v86 >= v79)
          v86 %= v79;
        if (v86 != v82)
          goto LABEL_160;
LABEL_99:
        v84 = (_QWORD *)*v84;
        if (!v84)
          goto LABEL_160;
      }
      if (v84[2] != gdc::typeIndex<Flyover::NightTexture>(void)::index)
        goto LABEL_99;
LABEL_111:
      if ((v88 & 1) == 0)
      {
        if ((_DWORD)v160)
        {
          md::typeToIntMap(v160);
          v2 = v161;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_203;
      v89 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v89.i16[0] = vaddlv_u8(v89);
      if (v89.u32[0] > 1uLL)
      {
        v90 = v80;
        if (v80 >= qword_1EE5779D0)
          v90 = v80 % qword_1EE5779D0;
      }
      else
      {
        v90 = (qword_1EE5779D0 - 1) & v80;
      }
      v91 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v90);
      if (!v91 || (v92 = *v91) == 0)
LABEL_203:
        abort();
      if (v89.u32[0] < 2uLL)
      {
        while (1)
        {
          v94 = v92[1];
          if ((uint64_t *)v80 == v94)
          {
            if (v92[2] == (uint64_t *)v80)
              goto LABEL_132;
          }
          else if (((unint64_t)v94 & (qword_1EE5779D0 - 1)) != v90)
          {
            goto LABEL_203;
          }
          v92 = (uint64_t **)*v92;
          if (!v92)
            goto LABEL_203;
        }
      }
      while (2)
      {
        v93 = (unint64_t)v92[1];
        if (v80 != v93)
        {
          if (v93 >= qword_1EE5779D0)
            v93 %= (unint64_t)qword_1EE5779D0;
          if (v93 != v90)
            goto LABEL_203;
LABEL_122:
          v92 = (uint64_t **)*v92;
          if (!v92)
            goto LABEL_203;
          continue;
        }
        break;
      }
      if (v92[2] != (uint64_t *)v80)
        goto LABEL_122;
LABEL_132:
      v96 = *((int *)v92 + 6);
      v95 = *((int *)v92 + 7);
      if ((_DWORD)v96 != -1)
      {
        v97 = *(_QWORD *)(v66 + 16);
        if (v97)
        {
          v98 = *(_QWORD *)(*(_QWORD *)(v97 + 48) + 72);
          v99 = *(_QWORD *)(v98 + 8);
          v100 = *(_QWORD *)(v99 + 72);
          if (v100)
          {
            v101 = 0;
            v102 = *(_QWORD *)(v99 + 64);
            v103 = (unsigned __int8 *)(v102 + 1);
            while (1)
            {
              v104 = *v103;
              v103 += 2;
              if (v104 == v96)
                break;
              if (v100 == ++v101)
                goto LABEL_138;
            }
            v111 = (unsigned __int8 *)(v102 + 2 * v101);
LABEL_145:
            *(_QWORD *)(*(_QWORD *)(v66 + 96) + 8 * *v111) = v77;
          }
          else
          {
LABEL_138:
            v105 = *(_QWORD *)(v98 + 24);
            v106 = *(_QWORD *)(v105 + 72);
            if (v106)
            {
              v107 = 0;
              v108 = *(_QWORD *)(v105 + 64);
              v109 = (unsigned __int8 *)(v108 + 1);
              while (1)
              {
                v110 = *v109;
                v109 += 2;
                if (v110 == v96)
                  break;
                if (v106 == ++v107)
                  goto LABEL_146;
              }
              v111 = (unsigned __int8 *)(v108 + 2 * v107);
              goto LABEL_145;
            }
          }
        }
      }
LABEL_146:
      if ((_DWORD)v95 != -1)
      {
        v112 = *(_QWORD *)(v66 + 16);
        if (v112)
        {
          v113 = *(_QWORD *)(*(_QWORD *)(v112 + 48) + 72);
          v114 = *(_QWORD *)(v113 + 8);
          v115 = *(_QWORD *)(v114 + 72);
          if (v115)
          {
            v116 = 0;
            v117 = *(_QWORD *)(v114 + 64);
            v118 = (unsigned __int8 *)(v117 + 1);
            while (1)
            {
              v119 = *v118;
              v118 += 2;
              if (v119 == v95)
                break;
              if (v115 == ++v116)
                goto LABEL_152;
            }
            v126 = (unsigned __int8 *)(v117 + 2 * v116);
LABEL_159:
            *(_QWORD *)(*(_QWORD *)(v66 + 96) + 8 * *v126) = v77;
          }
          else
          {
LABEL_152:
            v120 = *(_QWORD *)(v113 + 24);
            v121 = *(_QWORD *)(v120 + 72);
            if (v121)
            {
              v122 = 0;
              v123 = *(_QWORD *)(v120 + 64);
              v124 = (unsigned __int8 *)(v123 + 1);
              while (1)
              {
                v125 = *v124;
                v124 += 2;
                if (v125 == v95)
                  break;
                if (v121 == ++v122)
                  goto LABEL_160;
              }
              v126 = (unsigned __int8 *)(v123 + 2 * v122);
              goto LABEL_159;
            }
          }
        }
      }
LABEL_160:
      v11 = (_QWORD *)v165[4];
      v127 = v170 + 1;
      v170 = v127;
      if (v127 == v11)
      {
        v5 = v162;
      }
      else
      {
        v128 = v166[4];
        v5 = v162;
        do
        {
          v129 = *((unsigned int *)v127 + 1);
          v130 = v129 >> 7;
          if (v129 >> 7 < (v166[5] - v128) >> 3)
          {
            v131 = *(_QWORD *)(v128 + 8 * v130);
            if (v131)
            {
              v132 = v129 & 0x7F;
              v133 = *(unsigned __int16 *)(v131 + 2 * v132);
              v135 = v166[7];
              v134 = v166[8];
              if (v133 < (v134 - v135) >> 3)
              {
                v136 = v135 + 8 * v133;
                if (v136 != v134 && *(_DWORD *)(v136 + 4) == (_DWORD)v129)
                {
                  v138 = v167[4];
                  if (v130 < (v167[5] - v138) >> 3)
                  {
                    v139 = *(_QWORD *)(v138 + 8 * v130);
                    if (v139)
                    {
                      v140 = *(unsigned __int16 *)(v139 + 2 * v132);
                      v142 = v167[7];
                      v141 = v167[8];
                      if (v140 < (v141 - v142) >> 3)
                      {
                        v143 = v142 + 8 * v140;
                        if (v143 != v141 && *(_DWORD *)(v143 + 4) == (_DWORD)v129)
                        {
                          v145 = v168[4];
                          if (v130 < (v168[5] - v145) >> 3)
                          {
                            v146 = *(_QWORD *)(v145 + 8 * v130);
                            if (v146)
                            {
                              v147 = *(unsigned __int16 *)(v146 + 2 * v132);
                              v149 = v168[7];
                              v148 = v168[8];
                              if (v147 < (v148 - v149) >> 3)
                              {
                                v150 = v149 + 8 * v147;
                                if (v150 != v148 && *(_DWORD *)(v150 + 4) == (_DWORD)v129)
                                {
                                  v152 = v169[4];
                                  if (v130 < (v169[5] - v152) >> 3)
                                  {
                                    v153 = *(_QWORD *)(v152 + 8 * v130);
                                    if (v153)
                                    {
                                      v154 = *(unsigned __int16 *)(v153 + 2 * v132);
                                      v155 = v169[7];
                                      v156 = v169[8];
                                      if (v154 < (v156 - v155) >> 3)
                                      {
                                        v157 = v155 + 8 * v154;
                                        if (*(_DWORD *)(v157 + 4) == (_DWORD)v129 && v157 != v156)
                                        {
                                          v11 = v127;
                                          goto LABEL_196;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v127;
        }
        while (v127 != v11);
        v127 = v11;
LABEL_196:
        v170 = v127;
      }
    }
    while (v164 != v11);
  }
  *v163 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
}

void sub_19F6958A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0xF9931FC5DA4F362;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF9931FC5DA4F362;
      if (*(_QWORD *)&v3 <= 0xF9931FC5DA4F362uLL)
        v5 = 0xF9931FC5DA4F362uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF9931FC5DA4F362;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF9931FC5DA4F362)
            {
              if (v7[2] == 0xF9931FC5DA4F362)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF9931FC5DA4F362)
          {
            if (v7[2] == 0xF9931FC5DA4F362)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<Flyover::NightTexture>]";
  *(_QWORD *)(v11 + 24) = 54;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272DF8;
  *(_QWORD *)(v11 + 8) = 0xF9931FC5DA4F362;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF9931FC5DA4F362uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF9931FC5DA4F362;
  v15[1] = "md::ls::RequiresShaderTextureID<Flyover::NightTexture>]";
  v15[2] = 54;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF9931FC5DA4F362, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F695AC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::NightTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD49B968135FE1A73;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD49B968135FE1A73;
      if (*(_QWORD *)&v3 <= 0xD49B968135FE1A73)
        v5 = 0xD49B968135FE1A73 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD49B968135FE1A73;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD49B968135FE1A73)
            {
              if (v7[2] == 0xD49B968135FE1A73)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD49B968135FE1A73)
          {
            if (v7[2] == 0xD49B968135FE1A73)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
  *(_QWORD *)(v11 + 24) = 51;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272708;
  *(_QWORD *)(v11 + 8) = 0xD49B968135FE1A73;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD49B968135FE1A73, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD49B968135FE1A73;
  v15[1] = "md::ls::TextureHandleForType<Flyover::NightTexture>]";
  v15[2] = 51;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD49B968135FE1A73, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F695CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FlyoverInstance>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x69465F3BE0BF85FBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x69465F3BE0BF85FBLL;
      if (*(_QWORD *)&v3 <= 0x69465F3BE0BF85FBuLL)
        v5 = 0x69465F3BE0BF85FBuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x69465F3BE0BF85FBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x69465F3BE0BF85FBLL)
            {
              if (v7[2] == 0x69465F3BE0BF85FBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x69465F3BE0BF85FBLL)
          {
            if (v7[2] == 0x69465F3BE0BF85FBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FlyoverInstance]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271988;
  *(_QWORD *)(v11 + 8) = 0x69465F3BE0BF85FBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x69465F3BE0BF85FBuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x69465F3BE0BF85FBLL;
  v15[1] = "md::ls::FlyoverInstance]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0x69465F3BE0BF85FBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F695F18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v1 = (_QWORD *)a1[1];
  v2 = *(unsigned int *)(a1[6] + 4);
  v3 = v2 >> 7;
  v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3)
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    return 0;
  v6 = v2 & 0x7F;
  v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  v10 = v1 + 7;
  v8 = v1[7];
  v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3)
    return 0;
  v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != (_DWORD)v2)
    return 0;
  v13 = (_QWORD *)a1[2];
  v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3)
    return 0;
  v15 = *(_QWORD *)(v14 + 8 * v3);
  if (!v15)
    return 0;
  v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  v19 = v13 + 7;
  v17 = v13[7];
  v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3)
    return 0;
  v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != (_DWORD)v2)
    return 0;
  v22 = (_QWORD *)a1[3];
  v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3)
    return 0;
  v24 = *(_QWORD *)(v23 + 8 * v3);
  if (!v24)
    return 0;
  v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  v28 = v22 + 7;
  v26 = v22[7];
  v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3)
    return 0;
  v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != (_DWORD)v2)
    return 0;
  v32 = (_QWORD *)a1[4];
  v33 = v32[4];
  if (v3 < (v32[5] - v33) >> 3 && (v34 = *(_QWORD *)(v33 + 8 * v3)) != 0)
  {
    v35 = *(unsigned __int16 *)(v34 + 2 * v6);
    v38 = v32 + 7;
    v37 = v32[7];
    v36 = v38[1];
    if (v35 < (v36 - v37) >> 3)
    {
      v39 = v37 + 8 * v35;
      if (*(_DWORD *)(v39 + 4) == (_DWORD)v2)
        v40 = v39;
      else
        v40 = v36;
      return v40 != v36;
    }
  }
  else
  {
    v36 = v32[8];
  }
  v40 = v36;
  return v40 != v36;
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverInstance>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverInstance>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverInstance>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverInstance>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::NightTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::NightTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::NightTexture>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::NightTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42880D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42880D8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F696540(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288120;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288120;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xD2597E061104B596;
  result[1] = "md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>]";
  result[2] = 59;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278910;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278910;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  BOOL v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t ***v73;
  uint64_t **v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  int v107;
  unsigned __int8 *v108;
  unint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v128;
  md *v129;
  unint64_t *v130;
  uint64_t v131[4];
  unint64_t *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t *v136;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v133, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v131, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v132 != v136)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v130 = v11;
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 8 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = (unint64_t *)v22;
      v24 = **(_QWORD **)(a1 + 8);
      v25 = *(_QWORD **)v24;
      v26 = *(_QWORD **)(v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != 0x41D4E9297E100630)
        {
          v25 += 5;
          if (v25 == v26)
            goto LABEL_32;
        }
      }
      if (v25 == v26)
      {
LABEL_32:
        v28 = 0;
      }
      else
      {
        v28 = (_QWORD *)v25[3];
        v27 = (std::__shared_weak_count *)v25[4];
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      v32 = ***(uint64_t ****)(a1 + 8);
      if (v32 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v32 != 0xC94DD89A7B09BE9CLL)
      {
        v33 = v32 + 5;
        do
        {
          v34 = *v33;
          v33 += 5;
        }
        while (v34 != 0xC94DD89A7B09BE9CLL);
        v32 = v33 - 5;
      }
      v35 = v32[3];
      v36 = (std::__shared_weak_count *)v32[4];
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v40 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35) + 1256);
      v41 = (uint64_t)(v28 + 37);
      v42 = *v23;
      v43 = *v23;
      v44 = v28[50];
      v45 = (v28[51] - v44) >> 3;
      if (v43 < v45
        && (v46 = *(_QWORD *)(v44 + 8 * v43)) != 0
        && HIDWORD(v42) == HIDWORD(v46)
        && ((v47 = v28[53], v47 + 16 * v46 != v28[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
      {
        v57 = *(_QWORD *)(v44 + 8 * v43);
        v58 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v28 + 37), v42, v23);
        ++v58[3];
        v59 = v47 + 16 * v57;
        v11 = v130;
        v49 = *(_QWORD **)(v59 + 8);
        v42 = *v23;
        v44 = v28[50];
        v43 = *v23;
        if (v43 >= (v28[51] - v44) >> 3)
          goto LABEL_62;
      }
      else
      {
        v49 = 0;
        if (v43 >= v45)
          goto LABEL_62;
      }
      v50 = *(_QWORD *)(v44 + 8 * v43);
      if (!v50
        || HIDWORD(v42) != HIDWORD(v50)
        || ((v51 = v28[53], v52 = (uint64_t *)v28[54], v53 = (uint64_t *)(v51 + 16 * v50), v53 != v52)
          ? (v54 = v51 == 0)
          : (v54 = 1),
            v54))
      {
LABEL_62:
        v56 = 0;
        goto LABEL_63;
      }
      v55 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v41, v42, v23);
      ++v55[3];
      v56 = *v53;
LABEL_63:
      if ((v60 & 1) == 0
      {
        do
          v128 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v128 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index = v128;
        v11 = v130;
      }
      v61 = v49[1];
      if (!v61)
        goto LABEL_134;
      v62 = gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index;
      v63 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
      v63.i16[0] = vaddlv_u8(v63);
      if (v63.u32[0] > 1uLL)
      {
        v64 = gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index;
        if (gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index >= v61)
          v64 = gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index % v61;
      }
      else
      {
        v64 = (v61 - 1) & gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index;
      }
      v65 = *(_QWORD **)(*v49 + 8 * v64);
      if (!v65)
        goto LABEL_134;
      v66 = (_QWORD *)*v65;
      if (!v66)
        goto LABEL_134;
      if (v63.u32[0] < 2uLL)
      {
        v67 = v61 - 1;
        while (1)
        {
          v69 = v66[1];
          if (gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index == v69)
          {
            if (v66[2] == gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index)
              goto LABEL_85;
          }
          else if ((v69 & v67) != v64)
          {
            goto LABEL_134;
          }
          v66 = (_QWORD *)*v66;
          if (!v66)
            goto LABEL_134;
        }
      }
      while (1)
      {
        v68 = v66[1];
        if (gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index == v68)
          break;
        if (v68 >= v61)
          v68 %= v61;
        if (v68 != v64)
          goto LABEL_134;
LABEL_74:
        v66 = (_QWORD *)*v66;
        if (!v66)
          goto LABEL_134;
      }
      if (v66[2] != gdc::typeIndex<Flyover::AtmosphereTexture>(void)::index)
        goto LABEL_74;
LABEL_85:
      if ((v70 & 1) == 0)
      {
        if ((_DWORD)v129)
        {
          md::typeToIntMap(v129);
          v11 = v130;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_161;
      v71 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        v72 = v62;
        if (v62 >= qword_1EE5779D0)
          v72 = v62 % qword_1EE5779D0;
      }
      else
      {
        v72 = (qword_1EE5779D0 - 1) & v62;
      }
      v73 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v72);
      if (!v73 || (v74 = *v73) == 0)
LABEL_161:
        abort();
      if (v71.u32[0] < 2uLL)
      {
        while (1)
        {
          v76 = v74[1];
          if ((uint64_t *)v62 == v76)
          {
            if (v74[2] == (uint64_t *)v62)
              goto LABEL_106;
          }
          else if (((unint64_t)v76 & (qword_1EE5779D0 - 1)) != v72)
          {
            goto LABEL_161;
          }
          v74 = (uint64_t **)*v74;
          if (!v74)
            goto LABEL_161;
        }
      }
      while (2)
      {
        v75 = (unint64_t)v74[1];
        if (v62 != v75)
        {
          if (v75 >= qword_1EE5779D0)
            v75 %= (unint64_t)qword_1EE5779D0;
          if (v75 != v72)
            goto LABEL_161;
LABEL_96:
          v74 = (uint64_t **)*v74;
          if (!v74)
            goto LABEL_161;
          continue;
        }
        break;
      }
      if (v74[2] != (uint64_t *)v62)
        goto LABEL_96;
LABEL_106:
      v78 = *((int *)v74 + 6);
      v77 = *((int *)v74 + 7);
      if ((_DWORD)v78 != -1)
      {
        v79 = *(_QWORD *)(v56 + 16);
        if (v79)
        {
          v80 = *(_QWORD *)(*(_QWORD *)(v79 + 48) + 72);
          v81 = *(_QWORD *)(v80 + 8);
          v82 = *(_QWORD *)(v81 + 72);
          if (v82)
          {
            v83 = 0;
            v84 = *(_QWORD *)(v81 + 64);
            v85 = (unsigned __int8 *)(v84 + 1);
            while (1)
            {
              v86 = *v85;
              v85 += 2;
              if (v86 == v78)
                break;
              if (v82 == ++v83)
                goto LABEL_112;
            }
            v93 = (unsigned __int8 *)(v84 + 2 * v83);
LABEL_119:
            *(_QWORD *)(*(_QWORD *)(v56 + 96) + 8 * *v93) = v40;
          }
          else
          {
LABEL_112:
            v87 = *(_QWORD *)(v80 + 24);
            v88 = *(_QWORD *)(v87 + 72);
            if (v88)
            {
              v89 = 0;
              v90 = *(_QWORD *)(v87 + 64);
              v91 = (unsigned __int8 *)(v90 + 1);
              while (1)
              {
                v92 = *v91;
                v91 += 2;
                if (v92 == v78)
                  break;
                if (v88 == ++v89)
                  goto LABEL_120;
              }
              v93 = (unsigned __int8 *)(v90 + 2 * v89);
              goto LABEL_119;
            }
          }
        }
      }
LABEL_120:
      if ((_DWORD)v77 != -1)
      {
        v94 = *(_QWORD *)(v56 + 16);
        if (v94)
        {
          v95 = *(_QWORD *)(*(_QWORD *)(v94 + 48) + 72);
          v96 = *(_QWORD *)(v95 + 8);
          v97 = *(_QWORD *)(v96 + 72);
          if (v97)
          {
            v98 = 0;
            v99 = *(_QWORD *)(v96 + 64);
            v100 = (unsigned __int8 *)(v99 + 1);
            while (1)
            {
              v101 = *v100;
              v100 += 2;
              if (v101 == v77)
                break;
              if (v97 == ++v98)
                goto LABEL_126;
            }
            v108 = (unsigned __int8 *)(v99 + 2 * v98);
LABEL_133:
            *(_QWORD *)(*(_QWORD *)(v56 + 96) + 8 * *v108) = v40;
          }
          else
          {
LABEL_126:
            v102 = *(_QWORD *)(v95 + 24);
            v103 = *(_QWORD *)(v102 + 72);
            if (v103)
            {
              v104 = 0;
              v105 = *(_QWORD *)(v102 + 64);
              v106 = (unsigned __int8 *)(v105 + 1);
              while (1)
              {
                v107 = *v106;
                v106 += 2;
                if (v107 == v77)
                  break;
                if (v103 == ++v104)
                  goto LABEL_134;
              }
              v108 = (unsigned __int8 *)(v105 + 2 * v104);
              goto LABEL_133;
            }
          }
        }
      }
LABEL_134:
      v109 = v136;
      v10 = *(unint64_t **)(v133 + 32);
      if (++v136 != v10)
      {
        v110 = v134[4];
        v111 = (v134[5] - v110) >> 3;
        v112 = v109 + 2;
        while (1)
        {
          v113 = *((unsigned int *)v112 - 1);
          v114 = v113 >> 7;
          if (v113 >> 7 < v111)
          {
            v115 = *(_QWORD *)(v110 + 8 * v114);
            if (v115)
            {
              v116 = *(unsigned __int16 *)(v115 + 2 * (v113 & 0x7F));
              v118 = v134[7];
              v117 = v134[8];
              if (v116 < (v117 - v118) >> 3)
              {
                v119 = v118 + 8 * v116;
                if (v119 != v117 && *(_DWORD *)(v119 + 4) == (_DWORD)v113)
                {
                  v121 = v135[4];
                  if (v114 < (v135[5] - v121) >> 3)
                  {
                    v122 = *(_QWORD *)(v121 + 8 * v114);
                    if (v122)
                    {
                      v123 = *(unsigned __int16 *)(v122 + 2 * (v113 & 0x7F));
                      v125 = v135[7];
                      v124 = v135[8];
                      if (v123 < (v124 - v125) >> 3)
                      {
                        v126 = v125 + 8 * v123;
                        if (v126 != v124 && *(_DWORD *)(v126 + 4) == (_DWORD)v113)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v136 = v112;
          v20 = v112++ == v10;
          if (v20)
            goto LABEL_9;
        }
        v10 = v112 - 1;
      }
LABEL_9:
      if (v132 == v10)
        goto LABEL_160;
    }
  }
  v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_160:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F696E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD2597E061104B596;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD2597E061104B596;
      if (*(_QWORD *)&v3 <= 0xD2597E061104B596)
        v5 = 0xD2597E061104B596 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD2597E061104B596;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD2597E061104B596)
            {
              if (v7[2] == 0xD2597E061104B596)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD2597E061104B596)
          {
            if (v7[2] == 0xD2597E061104B596)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>]";
  *(_QWORD *)(v11 + 24) = 59;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272E58;
  *(_QWORD *)(v11 + 8) = 0xD2597E061104B596;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD2597E061104B596, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD2597E061104B596;
  v15[1] = "md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>]";
  v15[2] = 59;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD2597E061104B596, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F697090(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287868;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287868;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6972A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42878B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42878B0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xEC8E73EF48115BAELL;
  v2[1] = "md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>]";
  *(_QWORD *)&result = 56;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3F20;
  v2[4] = "md::ls::TextureHandleForType<Flyover::DiffuseTexture>]";
  v2[5] = 53;
  v2[6] = 0x69465F3BE0BF85FBLL;
  v2[7] = "md::ls::FlyoverInstance]";
  v2[8] = 23;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42784D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42784D8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _BOOL4 isValid;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  BOOL v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t *v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned __int8 v78;
  unint64_t v79;
  unint64_t v80;
  uint8x8_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint8x8_t v89;
  unint64_t v90;
  uint64_t ***v91;
  uint64_t **v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  int v125;
  unsigned __int8 *v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v159;
  md *v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  unint64_t v171;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(v3);
  v6 = gdc::Registry::storage<md::ls::FlyoverInstance>(v3);
  v7 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v8 = (_QWORD *)v7;
  v9 = (_QWORD *)(v4 + 32);
  if (v5[8] - v5[7] < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v9 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v9[4] - v9[3])
    v9 = (_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < v9[4] - v9[3])
    v9 = (_QWORD *)(v7 + 32);
  v165 = v9;
  v166 = (_QWORD *)v4;
  v167 = v5;
  v168 = (_QWORD *)v6;
  v11 = (_QWORD *)v9[3];
  v10 = (_QWORD *)v9[4];
  v169 = (_QWORD *)v7;
  v170 = v11;
  v164 = v10;
  if (v10 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v165))
  {
    v12 = v11 + 1;
    do
    {
      v11 = v12;
      v170 = v12;
      if (v12 == v164)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v165);
      v12 = v11 + 1;
    }
    while (!isValid);
  }
  v163 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  if (v164 != v11)
  {
    v161 = v2;
    v162 = v5;
    do
    {
      *v163 = *v11;
      v14 = *v11;
      v15 = HIDWORD(*v11);
      v16 = *v11 >> 39;
      v17 = v5[4];
      if (v16 < (v5[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v5[7],
            v20 = v5[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v5[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v5[11];
      }
      v25 = v8[4];
      if (v16 < (v8[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v8[7],
            v28 = v8[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v8[11];
        v33 = v8[10] + 8 * v27;
      }
      else
      {
        v32 = v8[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v2 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_46;
        }
      }
      if (v36 == v37)
      {
LABEL_46:
        v39 = 0;
      }
      else
      {
        v39 = (_QWORD *)v36[3];
        v38 = (std::__shared_weak_count *)v36[4];
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      v43 = **(_QWORD **)(v2 + 8);
      v44 = *(_QWORD **)v43;
      v45 = *(_QWORD **)(v43 + 8);
      if (v44 != v45)
      {
        while (*v44 != 0x348A0B0E758C07C2)
        {
          v44 += 5;
          if (v44 == v45)
            goto LABEL_58;
        }
      }
      if (v44 == v45)
      {
LABEL_58:
        v46 = 0;
      }
      else
      {
        v46 = v44[3];
        v47 = (std::__shared_weak_count *)v44[4];
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
          do
            v50 = __ldaxr(v48);
          while (__stlxr(v50 - 1, v48));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      v51 = (uint64_t)(v39 + 37);
      v52 = *v34;
      v53 = *v34;
      v54 = v39[50];
      v55 = (v39[51] - v54) >> 3;
      if (v53 < v55
        && (v56 = *(_QWORD *)(v54 + 8 * v53)) != 0
        && HIDWORD(v52) == HIDWORD(v56)
        && ((v57 = v39[53], v57 + 16 * v56 != v39[54]) ? (v58 = v57 == 0) : (v58 = 1), !v58))
      {
        v67 = *(_QWORD *)(v54 + 8 * v53);
        v68 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v52, v34);
        ++v68[3];
        v69 = v57 + 16 * v67;
        v2 = v161;
        v59 = *(_QWORD **)(v69 + 8);
        v52 = *v34;
        v54 = v39[50];
        v53 = *v34;
        if (v53 >= (v39[51] - v54) >> 3)
          goto LABEL_78;
      }
      else
      {
        v59 = 0;
        if (v53 >= v55)
          goto LABEL_78;
      }
      v60 = *(_QWORD *)(v54 + 8 * v53);
      if (!v60
        || HIDWORD(v52) != HIDWORD(v60)
        || ((v61 = v39[53], v62 = (uint64_t *)v39[54], v63 = (uint64_t *)(v61 + 16 * v60), v63 != v62)
          ? (v64 = v61 == 0)
          : (v64 = 1),
            v64))
      {
LABEL_78:
        v66 = 0;
        goto LABEL_79;
      }
      v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v51, v52, v34);
      ++v65[3];
      v66 = *v63;
LABEL_79:
      v70 = *v24;
      v171 = v70;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v46 + 104));
      v71 = *(_QWORD *)(v46 + 504);
      if (v70 < (unint64_t)((*(_QWORD *)(v46 + 512) - v71) >> 3)
        && ((v72 = *(_QWORD *)(v71 + 8 * v70)) != 0 ? (v73 = HIDWORD(v70) == HIDWORD(v72)) : (v73 = 0),
            v73))
      {
        v75 = (uint64_t *)(*(_QWORD *)(v46 + 528) + 40 * v72);
        v74 = *(uint64_t **)(v46 + 536);
      }
      else
      {
        v74 = *(uint64_t **)(v46 + 536);
        v75 = v74;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v46 + 104));
      v76 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v46 + 440), v171, &v171);
      v77 = 0;
      ++v76[3];
      if (v75 != v74 && v75)
        v77 = *v75;
      if ((v78 & 1) == 0
      {
        do
          v159 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v159 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<Flyover::DiffuseTexture>(void)::index = v159;
        v2 = v161;
      }
      v79 = v59[1];
      if (!v79)
        goto LABEL_160;
      v80 = gdc::typeIndex<Flyover::DiffuseTexture>(void)::index;
      v81 = (uint8x8_t)vcnt_s8((int8x8_t)v79);
      v81.i16[0] = vaddlv_u8(v81);
      if (v81.u32[0] > 1uLL)
      {
        v82 = gdc::typeIndex<Flyover::DiffuseTexture>(void)::index;
        if (gdc::typeIndex<Flyover::DiffuseTexture>(void)::index >= v79)
          v82 = gdc::typeIndex<Flyover::DiffuseTexture>(void)::index % v79;
      }
      else
      {
        v82 = (v79 - 1) & gdc::typeIndex<Flyover::DiffuseTexture>(void)::index;
      }
      v83 = *(_QWORD **)(*v59 + 8 * v82);
      if (!v83)
        goto LABEL_160;
      v84 = (_QWORD *)*v83;
      if (!v84)
        goto LABEL_160;
      if (v81.u32[0] < 2uLL)
      {
        v85 = v79 - 1;
        while (1)
        {
          v87 = v84[1];
          if (gdc::typeIndex<Flyover::DiffuseTexture>(void)::index == v87)
          {
            if (v84[2] == gdc::typeIndex<Flyover::DiffuseTexture>(void)::index)
              goto LABEL_111;
          }
          else if ((v87 & v85) != v82)
          {
            goto LABEL_160;
          }
          v84 = (_QWORD *)*v84;
          if (!v84)
            goto LABEL_160;
        }
      }
      while (1)
      {
        v86 = v84[1];
        if (gdc::typeIndex<Flyover::DiffuseTexture>(void)::index == v86)
          break;
        if (v86 >= v79)
          v86 %= v79;
        if (v86 != v82)
          goto LABEL_160;
LABEL_99:
        v84 = (_QWORD *)*v84;
        if (!v84)
          goto LABEL_160;
      }
      if (v84[2] != gdc::typeIndex<Flyover::DiffuseTexture>(void)::index)
        goto LABEL_99;
LABEL_111:
      if ((v88 & 1) == 0)
      {
        if ((_DWORD)v160)
        {
          md::typeToIntMap(v160);
          v2 = v161;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_203;
      v89 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v89.i16[0] = vaddlv_u8(v89);
      if (v89.u32[0] > 1uLL)
      {
        v90 = v80;
        if (v80 >= qword_1EE5779D0)
          v90 = v80 % qword_1EE5779D0;
      }
      else
      {
        v90 = (qword_1EE5779D0 - 1) & v80;
      }
      v91 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v90);
      if (!v91 || (v92 = *v91) == 0)
LABEL_203:
        abort();
      if (v89.u32[0] < 2uLL)
      {
        while (1)
        {
          v94 = v92[1];
          if ((uint64_t *)v80 == v94)
          {
            if (v92[2] == (uint64_t *)v80)
              goto LABEL_132;
          }
          else if (((unint64_t)v94 & (qword_1EE5779D0 - 1)) != v90)
          {
            goto LABEL_203;
          }
          v92 = (uint64_t **)*v92;
          if (!v92)
            goto LABEL_203;
        }
      }
      while (2)
      {
        v93 = (unint64_t)v92[1];
        if (v80 != v93)
        {
          if (v93 >= qword_1EE5779D0)
            v93 %= (unint64_t)qword_1EE5779D0;
          if (v93 != v90)
            goto LABEL_203;
LABEL_122:
          v92 = (uint64_t **)*v92;
          if (!v92)
            goto LABEL_203;
          continue;
        }
        break;
      }
      if (v92[2] != (uint64_t *)v80)
        goto LABEL_122;
LABEL_132:
      v96 = *((int *)v92 + 6);
      v95 = *((int *)v92 + 7);
      if ((_DWORD)v96 != -1)
      {
        v97 = *(_QWORD *)(v66 + 16);
        if (v97)
        {
          v98 = *(_QWORD *)(*(_QWORD *)(v97 + 48) + 72);
          v99 = *(_QWORD *)(v98 + 8);
          v100 = *(_QWORD *)(v99 + 72);
          if (v100)
          {
            v101 = 0;
            v102 = *(_QWORD *)(v99 + 64);
            v103 = (unsigned __int8 *)(v102 + 1);
            while (1)
            {
              v104 = *v103;
              v103 += 2;
              if (v104 == v96)
                break;
              if (v100 == ++v101)
                goto LABEL_138;
            }
            v111 = (unsigned __int8 *)(v102 + 2 * v101);
LABEL_145:
            *(_QWORD *)(*(_QWORD *)(v66 + 96) + 8 * *v111) = v77;
          }
          else
          {
LABEL_138:
            v105 = *(_QWORD *)(v98 + 24);
            v106 = *(_QWORD *)(v105 + 72);
            if (v106)
            {
              v107 = 0;
              v108 = *(_QWORD *)(v105 + 64);
              v109 = (unsigned __int8 *)(v108 + 1);
              while (1)
              {
                v110 = *v109;
                v109 += 2;
                if (v110 == v96)
                  break;
                if (v106 == ++v107)
                  goto LABEL_146;
              }
              v111 = (unsigned __int8 *)(v108 + 2 * v107);
              goto LABEL_145;
            }
          }
        }
      }
LABEL_146:
      if ((_DWORD)v95 != -1)
      {
        v112 = *(_QWORD *)(v66 + 16);
        if (v112)
        {
          v113 = *(_QWORD *)(*(_QWORD *)(v112 + 48) + 72);
          v114 = *(_QWORD *)(v113 + 8);
          v115 = *(_QWORD *)(v114 + 72);
          if (v115)
          {
            v116 = 0;
            v117 = *(_QWORD *)(v114 + 64);
            v118 = (unsigned __int8 *)(v117 + 1);
            while (1)
            {
              v119 = *v118;
              v118 += 2;
              if (v119 == v95)
                break;
              if (v115 == ++v116)
                goto LABEL_152;
            }
            v126 = (unsigned __int8 *)(v117 + 2 * v116);
LABEL_159:
            *(_QWORD *)(*(_QWORD *)(v66 + 96) + 8 * *v126) = v77;
          }
          else
          {
LABEL_152:
            v120 = *(_QWORD *)(v113 + 24);
            v121 = *(_QWORD *)(v120 + 72);
            if (v121)
            {
              v122 = 0;
              v123 = *(_QWORD *)(v120 + 64);
              v124 = (unsigned __int8 *)(v123 + 1);
              while (1)
              {
                v125 = *v124;
                v124 += 2;
                if (v125 == v95)
                  break;
                if (v121 == ++v122)
                  goto LABEL_160;
              }
              v126 = (unsigned __int8 *)(v123 + 2 * v122);
              goto LABEL_159;
            }
          }
        }
      }
LABEL_160:
      v11 = (_QWORD *)v165[4];
      v127 = v170 + 1;
      v170 = v127;
      if (v127 == v11)
      {
        v5 = v162;
      }
      else
      {
        v128 = v166[4];
        v5 = v162;
        do
        {
          v129 = *((unsigned int *)v127 + 1);
          v130 = v129 >> 7;
          if (v129 >> 7 < (v166[5] - v128) >> 3)
          {
            v131 = *(_QWORD *)(v128 + 8 * v130);
            if (v131)
            {
              v132 = v129 & 0x7F;
              v133 = *(unsigned __int16 *)(v131 + 2 * v132);
              v135 = v166[7];
              v134 = v166[8];
              if (v133 < (v134 - v135) >> 3)
              {
                v136 = v135 + 8 * v133;
                if (v136 != v134 && *(_DWORD *)(v136 + 4) == (_DWORD)v129)
                {
                  v138 = v167[4];
                  if (v130 < (v167[5] - v138) >> 3)
                  {
                    v139 = *(_QWORD *)(v138 + 8 * v130);
                    if (v139)
                    {
                      v140 = *(unsigned __int16 *)(v139 + 2 * v132);
                      v142 = v167[7];
                      v141 = v167[8];
                      if (v140 < (v141 - v142) >> 3)
                      {
                        v143 = v142 + 8 * v140;
                        if (v143 != v141 && *(_DWORD *)(v143 + 4) == (_DWORD)v129)
                        {
                          v145 = v168[4];
                          if (v130 < (v168[5] - v145) >> 3)
                          {
                            v146 = *(_QWORD *)(v145 + 8 * v130);
                            if (v146)
                            {
                              v147 = *(unsigned __int16 *)(v146 + 2 * v132);
                              v149 = v168[7];
                              v148 = v168[8];
                              if (v147 < (v148 - v149) >> 3)
                              {
                                v150 = v149 + 8 * v147;
                                if (v150 != v148 && *(_DWORD *)(v150 + 4) == (_DWORD)v129)
                                {
                                  v152 = v169[4];
                                  if (v130 < (v169[5] - v152) >> 3)
                                  {
                                    v153 = *(_QWORD *)(v152 + 8 * v130);
                                    if (v153)
                                    {
                                      v154 = *(unsigned __int16 *)(v153 + 2 * v132);
                                      v155 = v169[7];
                                      v156 = v169[8];
                                      if (v154 < (v156 - v155) >> 3)
                                      {
                                        v157 = v155 + 8 * v154;
                                        if (*(_DWORD *)(v157 + 4) == (_DWORD)v129 && v157 != v156)
                                        {
                                          v11 = v127;
                                          goto LABEL_196;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v127;
        }
        while (v127 != v11);
        v127 = v11;
LABEL_196:
        v170 = v127;
      }
    }
    while (v164 != v11);
  }
  *v163 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
}

void sub_19F697DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEC8E73EF48115BAELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEC8E73EF48115BAELL;
      if (*(_QWORD *)&v3 <= 0xEC8E73EF48115BAELL)
        v5 = 0xEC8E73EF48115BAELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEC8E73EF48115BAELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEC8E73EF48115BAELL)
            {
              if (v7[2] == 0xEC8E73EF48115BAELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEC8E73EF48115BAELL)
          {
            if (v7[2] == 0xEC8E73EF48115BAELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>]";
  *(_QWORD *)(v11 + 24) = 56;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272E28;
  *(_QWORD *)(v11 + 8) = 0xEC8E73EF48115BAELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEC8E73EF48115BAELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEC8E73EF48115BAELL;
  v15[1] = "md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>]";
  v15[2] = 56;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEC8E73EF48115BAELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F697FF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBAA35DF429A7267FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBAA35DF429A7267FLL;
      if (*(_QWORD *)&v3 <= 0xBAA35DF429A7267FLL)
        v5 = 0xBAA35DF429A7267FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBAA35DF429A7267FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBAA35DF429A7267FLL)
            {
              if (v7[2] == 0xBAA35DF429A7267FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBAA35DF429A7267FLL)
          {
            if (v7[2] == 0xBAA35DF429A7267FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TextureHandleForType<Flyover::DiffuseTexture>]";
  *(_QWORD *)(v11 + 24) = 53;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272738;
  *(_QWORD *)(v11 + 8) = 0xBAA35DF429A7267FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBAA35DF429A7267FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBAA35DF429A7267FLL;
  v15[1] = "md::ls::TextureHandleForType<Flyover::DiffuseTexture>]";
  v15[2] = 53;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBAA35DF429A7267FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F698218(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287B38;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287B38;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6985A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287B80;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287B80;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xB70B6DE024A5B9DALL;
  v2[1] = "md::ls::FlyoverCommonMaterialHandle]";
  *(_QWORD *)&result = 35;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3F30;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>]";
  v2[5] = 90;
  v2[6] = 0x69465F3BE0BF85FBLL;
  v2[7] = "md::ls::FlyoverInstance]";
  v2[8] = 23;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278640;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278640;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL4 isValid;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD **v54;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t *v95;
  _QWORD *v97;
  uint64_t v98;
  unsigned __int8 v99;
  unint64_t v100;
  unint64_t v101;
  uint8x8_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint8x8_t v112;
  unint64_t v113;
  uint64_t ***v114;
  uint64_t **v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  md *v121;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverCommonMaterialHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>(v2);
  v5 = gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v7 = (_QWORD *)v6;
  v8 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v8 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v124 = v8;
  v125 = v3;
  v126 = (_QWORD *)v4;
  v127 = (_QWORD *)v5;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v128 = (_QWORD *)v6;
  v129 = v9;
  if (v10 == v9)
  {
    v11 = a1;
  }
  else
  {
    v11 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v124))
    {
      v12 = v9 + 1;
      do
      {
        v9 = v12;
        v129 = v12;
        if (v12 == v10)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v124);
        v12 = v9 + 1;
      }
      while (!isValid);
    }
  }
  v123 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *v123 = *v9;
    v15 = *v9;
    v16 = HIDWORD(*v9);
    v17 = *v9 >> 39;
    v18 = v3[4];
    if (v17 < (v3[5] - v18) >> 3
      && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
      && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v3[7], v21 = v3[8], v20 < (v21 - v22) >> 3)
      && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
    {
      v25 = (unint64_t *)(v3[10] + 8 * v20);
    }
    else
    {
      v25 = (unint64_t *)v3[11];
    }
    v26 = v7[4];
    if (v17 < (v7[5] - v26) >> 3
      && (v27 = *(_QWORD *)(v26 + 8 * v17)) != 0
      && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)), v30 = v7[7], v29 = v7[8], v28 < (v29 - v30) >> 3)
      && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v16) : (v32 = 0), v32))
    {
      v33 = v7[11];
      v34 = v7[10] + 8 * v28;
    }
    else
    {
      v33 = v7[11];
      v34 = v33;
    }
    if (v34 == v33)
      v35 = 0;
    else
      v35 = (unint64_t *)v34;
    v36 = **(_QWORD **)(v11 + 8);
    v37 = *(_QWORD **)v36;
    v38 = *(_QWORD **)(v36 + 8);
    if (v37 != v38)
    {
      while (*v37 != 0x41D4E9297E100630)
      {
        v37 += 5;
        if (v37 == v38)
          goto LABEL_49;
      }
    }
    if (v37 == v38)
    {
LABEL_49:
      v39 = 0;
    }
    else
    {
      v39 = (_QWORD *)v37[3];
      v40 = (std::__shared_weak_count *)v37[4];
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    v44 = *v35;
    v45 = *v35;
    v46 = v39[50];
    v47 = (v39[51] - v46) >> 3;
    if (v45 < v47
      && (v48 = *(_QWORD *)(v46 + 8 * v45)) != 0
      && HIDWORD(v44) == HIDWORD(v48)
      && ((v49 = v39[53], v49 + 16 * v48 != v39[54]) ? (v50 = v49 == 0) : (v50 = 1), !v50))
    {
      v56 = *(_QWORD *)(v46 + 8 * v45);
      v57 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v44, v35);
      ++v57[3];
      v58 = v49 + 16 * v56;
      v11 = a1;
      v51 = *(_QWORD **)(v58 + 8);
      v44 = *v35;
      v46 = v39[50];
      v45 = *v35;
      if (v45 >= (v39[51] - v46) >> 3)
      {
LABEL_70:
        v105 = 0;
        goto LABEL_71;
      }
    }
    else
    {
      v51 = 0;
      if (v45 >= v47)
        goto LABEL_70;
    }
    v52 = *(_QWORD *)(v46 + 8 * v45);
    if (!v52 || HIDWORD(v44) != HIDWORD(v52))
      goto LABEL_70;
    v53 = v39[53];
    v54 = (_QWORD **)(v53 + 16 * v52);
    if (v54 == (_QWORD **)v39[54] || v53 == 0)
    {
      v105 = 0;
    }
    else
    {
      v104 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v44, v35);
      ++v104[3];
      v105 = *v54;
    }
    v11 = a1;
LABEL_71:
    v59 = *v25;
    v130 = v59;
    v60 = v39[662];
    if (v59 < (unint64_t)((v39[663] - v60) >> 3))
    {
      v61 = *(_QWORD *)(v60 + 8 * v59);
      if (v61 && HIDWORD(v59) == HIDWORD(v61))
      {
        v94 = v39[665];
        v95 = (uint64_t *)(v94 + 24 * v61);
        if (v95 != (uint64_t *)v39[666] && v94 != 0)
        {
          v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Material>> const&>,std::tuple<>>((uint64_t)(v39 + 649), v59, &v130);
          ++v97[3];
          v98 = *v95;
          if (v98)
          {
            if ((v99 & 1) == 0
            {
              do
                v120 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
              while (__stlxr(v120 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
              gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index = v120;
              v11 = a1;
            }
            v100 = v51[1];
            if (v100)
            {
              v101 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index;
              v102 = (uint8x8_t)vcnt_s8((int8x8_t)v100);
              v102.i16[0] = vaddlv_u8(v102);
              if (v102.u32[0] > 1uLL)
              {
                v103 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index;
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index >= v100)
                  v103 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index % v100;
              }
              else
              {
                v103 = (v100 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index;
              }
              v106 = *(_QWORD **)(*v51 + 8 * v103);
              if (v106)
              {
                v107 = (_QWORD *)*v106;
                if (v107)
                {
                  if (v102.u32[0] < 2uLL)
                  {
                    v108 = v100 - 1;
                    while (1)
                    {
                      v110 = v107[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index == v110)
                      {
                        if (v107[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index)
                          goto LABEL_139;
                      }
                      else if ((v110 & v108) != v103)
                      {
                        goto LABEL_76;
                      }
                      v107 = (_QWORD *)*v107;
                      if (!v107)
                        goto LABEL_76;
                    }
                  }
                  do
                  {
                    v109 = v107[1];
                    if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index == v109)
                    {
                      if (v107[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>(void)::index)
                      {
LABEL_139:
                        if ((v111 & 1) == 0)
                        {
                          if ((_DWORD)v121)
                          {
                            md::typeToIntMap(v121);
                            v11 = a1;
                          }
                        }
                        if (!qword_1EE5779D0)
                          goto LABEL_170;
                        v112 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                        v112.i16[0] = vaddlv_u8(v112);
                        if (v112.u32[0] > 1uLL)
                        {
                          v113 = v101;
                          if (v101 >= qword_1EE5779D0)
                            v113 = v101 % qword_1EE5779D0;
                        }
                        else
                        {
                          v113 = (qword_1EE5779D0 - 1) & v101;
                        }
                        v114 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v113);
                        if (!v114 || (v115 = *v114) == 0)
LABEL_170:
                          abort();
                        if (v112.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v117 = v115[1];
                            if ((uint64_t *)v101 == v117)
                            {
                              if (v115[2] == (uint64_t *)v101)
                                goto LABEL_160;
                            }
                            else if (((unint64_t)v117 & (qword_1EE5779D0 - 1)) != v113)
                            {
                              goto LABEL_170;
                            }
                            v115 = (uint64_t **)*v115;
                            if (!v115)
                              goto LABEL_170;
                          }
                        }
                        while (1)
                        {
                          v116 = (unint64_t)v115[1];
                          if (v101 == v116)
                          {
                            if (v115[2] == (uint64_t *)v101)
                            {
LABEL_160:
                              v118 = *((int *)v115 + 6);
                              v119 = *((int *)v115 + 7);
                              if ((_DWORD)v118 != -1)
                                ggl::PipelineSetup::setConstantData(v105, v118, v98, 1);
                              if ((_DWORD)v119 != -1)
                                ggl::PipelineSetup::setConstantData(v105, v119, v98, 2);
                              goto LABEL_76;
                            }
                          }
                          else
                          {
                            if (v116 >= qword_1EE5779D0)
                              v116 %= (unint64_t)qword_1EE5779D0;
                            if (v116 != v113)
                              goto LABEL_170;
                          }
                          v115 = (uint64_t **)*v115;
                          if (!v115)
                            goto LABEL_170;
                        }
                      }
                    }
                    else
                    {
                      if (v109 >= v100)
                        v109 %= v100;
                      if (v109 != v103)
                        break;
                    }
                    v107 = (_QWORD *)*v107;
                  }
                  while (v107);
                }
              }
            }
          }
        }
      }
    }
LABEL_76:
    v9 = (_QWORD *)v124[4];
    v14 = v129 + 1;
    v129 = v14;
    if (v14 != v9)
    {
      v63 = v125[4];
      while (1)
      {
        v64 = *((unsigned int *)v14 + 1);
        v65 = v64 >> 7;
        if (v64 >> 7 < (v125[5] - v63) >> 3)
        {
          v66 = *(_QWORD *)(v63 + 8 * v65);
          if (v66)
          {
            v67 = v64 & 0x7F;
            v68 = *(unsigned __int16 *)(v66 + 2 * v67);
            v70 = v125[7];
            v69 = v125[8];
            if (v68 < (v69 - v70) >> 3)
            {
              v71 = v70 + 8 * v68;
              if (v71 != v69 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
              {
                v73 = v126[4];
                if (v65 < (v126[5] - v73) >> 3)
                {
                  v74 = *(_QWORD *)(v73 + 8 * v65);
                  if (v74)
                  {
                    v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                    v77 = v126[7];
                    v76 = v126[8];
                    if (v75 < (v76 - v77) >> 3)
                    {
                      v78 = v77 + 8 * v75;
                      if (v78 != v76 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                      {
                        v80 = v127[4];
                        if (v65 < (v127[5] - v80) >> 3)
                        {
                          v81 = *(_QWORD *)(v80 + 8 * v65);
                          if (v81)
                          {
                            v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                            v84 = v127[7];
                            v83 = v127[8];
                            if (v82 < (v83 - v84) >> 3)
                            {
                              v85 = v84 + 8 * v82;
                              if (v85 != v83 && *(_DWORD *)(v85 + 4) == (_DWORD)v64)
                              {
                                v87 = v128[4];
                                if (v65 < (v128[5] - v87) >> 3)
                                {
                                  v88 = *(_QWORD *)(v87 + 8 * v65);
                                  if (v88)
                                  {
                                    v89 = *(unsigned __int16 *)(v88 + 2 * v67);
                                    v90 = v128[7];
                                    v91 = v128[8];
                                    if (v89 < (v91 - v90) >> 3)
                                    {
                                      v92 = v90 + 8 * v89;
                                      if (*(_DWORD *)(v92 + 4) == (_DWORD)v64 && v92 != v91)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v9)
        {
          v14 = v9;
          goto LABEL_17;
        }
      }
      v9 = v14;
LABEL_17:
      v129 = v14;
    }
  }
  *v123 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v11 + 8) = 0;
}

void sub_19F698F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FlyoverCommonMaterialHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB70B6DE024A5B9DALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB70B6DE024A5B9DALL;
      if (*(_QWORD *)&v3 <= 0xB70B6DE024A5B9DALL)
        v5 = 0xB70B6DE024A5B9DALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB70B6DE024A5B9DALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB70B6DE024A5B9DALL)
            {
              if (v7[2] == 0xB70B6DE024A5B9DALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB70B6DE024A5B9DALL)
          {
            if (v7[2] == 0xB70B6DE024A5B9DALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FlyoverCommonMaterialHandle]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273338;
  *(_QWORD *)(v11 + 8) = 0xB70B6DE024A5B9DALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB70B6DE024A5B9DALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB70B6DE024A5B9DALL;
  v15[1] = "md::ls::FlyoverCommonMaterialHandle]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB70B6DE024A5B9DALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F699140(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8756C476CCEB09D6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8756C476CCEB09D6;
      if (*(_QWORD *)&v3 <= 0x8756C476CCEB09D6)
        v5 = 0x8756C476CCEB09D6 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8756C476CCEB09D6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8756C476CCEB09D6)
            {
              if (v7[2] == 0x8756C476CCEB09D6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8756C476CCEB09D6)
          {
            if (v7[2] == 0x8756C476CCEB09D6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>]";
  *(_QWORD *)(v11 + 24) = 90;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42735A8;
  *(_QWORD *)(v11 + 8) = 0x8756C476CCEB09D6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8756C476CCEB09D6, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8756C476CCEB09D6;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>]";
  v15[2] = 90;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8756C476CCEB09D6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F699368(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverCommonMaterialHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonMaterialHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverCommonMaterialHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonMaterialHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287D78;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287D78;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6996F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287DC0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287DC0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x5B12559DCF20DC9ALL;
  v2[1] = "md::ls::FlyoverCommonTexcoordsHandle]";
  *(_QWORD *)&result = 36;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3F40;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>]";
  v2[5] = 91;
  v2[6] = 0x69465F3BE0BF85FBLL;
  v2[7] = "md::ls::FlyoverInstance]";
  v2[8] = 23;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278760;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278760;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL4 isValid;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD **v54;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t *v95;
  _QWORD *v97;
  uint64_t v98;
  unsigned __int8 v99;
  unint64_t v100;
  unint64_t v101;
  uint8x8_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint8x8_t v112;
  unint64_t v113;
  uint64_t ***v114;
  uint64_t **v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  md *v121;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverCommonTexcoordsHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>(v2);
  v5 = gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v7 = (_QWORD *)v6;
  v8 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v8 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v124 = v8;
  v125 = v3;
  v126 = (_QWORD *)v4;
  v127 = (_QWORD *)v5;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v128 = (_QWORD *)v6;
  v129 = v9;
  if (v10 == v9)
  {
    v11 = a1;
  }
  else
  {
    v11 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v124))
    {
      v12 = v9 + 1;
      do
      {
        v9 = v12;
        v129 = v12;
        if (v12 == v10)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v124);
        v12 = v9 + 1;
      }
      while (!isValid);
    }
  }
  v123 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *v123 = *v9;
    v15 = *v9;
    v16 = HIDWORD(*v9);
    v17 = *v9 >> 39;
    v18 = v3[4];
    if (v17 < (v3[5] - v18) >> 3
      && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
      && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v3[7], v21 = v3[8], v20 < (v21 - v22) >> 3)
      && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
    {
      v25 = (unint64_t *)(v3[10] + 8 * v20);
    }
    else
    {
      v25 = (unint64_t *)v3[11];
    }
    v26 = v7[4];
    if (v17 < (v7[5] - v26) >> 3
      && (v27 = *(_QWORD *)(v26 + 8 * v17)) != 0
      && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)), v30 = v7[7], v29 = v7[8], v28 < (v29 - v30) >> 3)
      && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v16) : (v32 = 0), v32))
    {
      v33 = v7[11];
      v34 = v7[10] + 8 * v28;
    }
    else
    {
      v33 = v7[11];
      v34 = v33;
    }
    if (v34 == v33)
      v35 = 0;
    else
      v35 = (unint64_t *)v34;
    v36 = **(_QWORD **)(v11 + 8);
    v37 = *(_QWORD **)v36;
    v38 = *(_QWORD **)(v36 + 8);
    if (v37 != v38)
    {
      while (*v37 != 0x41D4E9297E100630)
      {
        v37 += 5;
        if (v37 == v38)
          goto LABEL_49;
      }
    }
    if (v37 == v38)
    {
LABEL_49:
      v39 = 0;
    }
    else
    {
      v39 = (_QWORD *)v37[3];
      v40 = (std::__shared_weak_count *)v37[4];
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    v44 = *v35;
    v45 = *v35;
    v46 = v39[50];
    v47 = (v39[51] - v46) >> 3;
    if (v45 < v47
      && (v48 = *(_QWORD *)(v46 + 8 * v45)) != 0
      && HIDWORD(v44) == HIDWORD(v48)
      && ((v49 = v39[53], v49 + 16 * v48 != v39[54]) ? (v50 = v49 == 0) : (v50 = 1), !v50))
    {
      v56 = *(_QWORD *)(v46 + 8 * v45);
      v57 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v44, v35);
      ++v57[3];
      v58 = v49 + 16 * v56;
      v11 = a1;
      v51 = *(_QWORD **)(v58 + 8);
      v44 = *v35;
      v46 = v39[50];
      v45 = *v35;
      if (v45 >= (v39[51] - v46) >> 3)
      {
LABEL_70:
        v105 = 0;
        goto LABEL_71;
      }
    }
    else
    {
      v51 = 0;
      if (v45 >= v47)
        goto LABEL_70;
    }
    v52 = *(_QWORD *)(v46 + 8 * v45);
    if (!v52 || HIDWORD(v44) != HIDWORD(v52))
      goto LABEL_70;
    v53 = v39[53];
    v54 = (_QWORD **)(v53 + 16 * v52);
    if (v54 == (_QWORD **)v39[54] || v53 == 0)
    {
      v105 = 0;
    }
    else
    {
      v104 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v44, v35);
      ++v104[3];
      v105 = *v54;
    }
    v11 = a1;
LABEL_71:
    v59 = *v25;
    v130 = v59;
    v60 = v39[635];
    if (v59 < (unint64_t)((v39[636] - v60) >> 3))
    {
      v61 = *(_QWORD *)(v60 + 8 * v59);
      if (v61 && HIDWORD(v59) == HIDWORD(v61))
      {
        v94 = v39[638];
        v95 = (uint64_t *)(v94 + 24 * v61);
        if (v95 != (uint64_t *)v39[639] && v94 != 0)
        {
          v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Texcoords>> const&>,std::tuple<>>((uint64_t)(v39 + 622), v59, &v130);
          ++v97[3];
          v98 = *v95;
          if (v98)
          {
            if ((v99 & 1) == 0
            {
              do
                v120 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
              while (__stlxr(v120 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
              gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index = v120;
              v11 = a1;
            }
            v100 = v51[1];
            if (v100)
            {
              v101 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index;
              v102 = (uint8x8_t)vcnt_s8((int8x8_t)v100);
              v102.i16[0] = vaddlv_u8(v102);
              if (v102.u32[0] > 1uLL)
              {
                v103 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index;
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index >= v100)
                  v103 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index % v100;
              }
              else
              {
                v103 = (v100 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index;
              }
              v106 = *(_QWORD **)(*v51 + 8 * v103);
              if (v106)
              {
                v107 = (_QWORD *)*v106;
                if (v107)
                {
                  if (v102.u32[0] < 2uLL)
                  {
                    v108 = v100 - 1;
                    while (1)
                    {
                      v110 = v107[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index == v110)
                      {
                        if (v107[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index)
                          goto LABEL_139;
                      }
                      else if ((v110 & v108) != v103)
                      {
                        goto LABEL_76;
                      }
                      v107 = (_QWORD *)*v107;
                      if (!v107)
                        goto LABEL_76;
                    }
                  }
                  do
                  {
                    v109 = v107[1];
                    if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index == v109)
                    {
                      if (v107[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>(void)::index)
                      {
LABEL_139:
                        if ((v111 & 1) == 0)
                        {
                          if ((_DWORD)v121)
                          {
                            md::typeToIntMap(v121);
                            v11 = a1;
                          }
                        }
                        if (!qword_1EE5779D0)
                          goto LABEL_170;
                        v112 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                        v112.i16[0] = vaddlv_u8(v112);
                        if (v112.u32[0] > 1uLL)
                        {
                          v113 = v101;
                          if (v101 >= qword_1EE5779D0)
                            v113 = v101 % qword_1EE5779D0;
                        }
                        else
                        {
                          v113 = (qword_1EE5779D0 - 1) & v101;
                        }
                        v114 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v113);
                        if (!v114 || (v115 = *v114) == 0)
LABEL_170:
                          abort();
                        if (v112.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v117 = v115[1];
                            if ((uint64_t *)v101 == v117)
                            {
                              if (v115[2] == (uint64_t *)v101)
                                goto LABEL_160;
                            }
                            else if (((unint64_t)v117 & (qword_1EE5779D0 - 1)) != v113)
                            {
                              goto LABEL_170;
                            }
                            v115 = (uint64_t **)*v115;
                            if (!v115)
                              goto LABEL_170;
                          }
                        }
                        while (1)
                        {
                          v116 = (unint64_t)v115[1];
                          if (v101 == v116)
                          {
                            if (v115[2] == (uint64_t *)v101)
                            {
LABEL_160:
                              v118 = *((int *)v115 + 6);
                              v119 = *((int *)v115 + 7);
                              if ((_DWORD)v118 != -1)
                                ggl::PipelineSetup::setConstantData(v105, v118, v98, 1);
                              if ((_DWORD)v119 != -1)
                                ggl::PipelineSetup::setConstantData(v105, v119, v98, 2);
                              goto LABEL_76;
                            }
                          }
                          else
                          {
                            if (v116 >= qword_1EE5779D0)
                              v116 %= (unint64_t)qword_1EE5779D0;
                            if (v116 != v113)
                              goto LABEL_170;
                          }
                          v115 = (uint64_t **)*v115;
                          if (!v115)
                            goto LABEL_170;
                        }
                      }
                    }
                    else
                    {
                      if (v109 >= v100)
                        v109 %= v100;
                      if (v109 != v103)
                        break;
                    }
                    v107 = (_QWORD *)*v107;
                  }
                  while (v107);
                }
              }
            }
          }
        }
      }
    }
LABEL_76:
    v9 = (_QWORD *)v124[4];
    v14 = v129 + 1;
    v129 = v14;
    if (v14 != v9)
    {
      v63 = v125[4];
      while (1)
      {
        v64 = *((unsigned int *)v14 + 1);
        v65 = v64 >> 7;
        if (v64 >> 7 < (v125[5] - v63) >> 3)
        {
          v66 = *(_QWORD *)(v63 + 8 * v65);
          if (v66)
          {
            v67 = v64 & 0x7F;
            v68 = *(unsigned __int16 *)(v66 + 2 * v67);
            v70 = v125[7];
            v69 = v125[8];
            if (v68 < (v69 - v70) >> 3)
            {
              v71 = v70 + 8 * v68;
              if (v71 != v69 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
              {
                v73 = v126[4];
                if (v65 < (v126[5] - v73) >> 3)
                {
                  v74 = *(_QWORD *)(v73 + 8 * v65);
                  if (v74)
                  {
                    v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                    v77 = v126[7];
                    v76 = v126[8];
                    if (v75 < (v76 - v77) >> 3)
                    {
                      v78 = v77 + 8 * v75;
                      if (v78 != v76 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                      {
                        v80 = v127[4];
                        if (v65 < (v127[5] - v80) >> 3)
                        {
                          v81 = *(_QWORD *)(v80 + 8 * v65);
                          if (v81)
                          {
                            v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                            v84 = v127[7];
                            v83 = v127[8];
                            if (v82 < (v83 - v84) >> 3)
                            {
                              v85 = v84 + 8 * v82;
                              if (v85 != v83 && *(_DWORD *)(v85 + 4) == (_DWORD)v64)
                              {
                                v87 = v128[4];
                                if (v65 < (v128[5] - v87) >> 3)
                                {
                                  v88 = *(_QWORD *)(v87 + 8 * v65);
                                  if (v88)
                                  {
                                    v89 = *(unsigned __int16 *)(v88 + 2 * v67);
                                    v90 = v128[7];
                                    v91 = v128[8];
                                    if (v89 < (v91 - v90) >> 3)
                                    {
                                      v92 = v90 + 8 * v89;
                                      if (*(_DWORD *)(v92 + 4) == (_DWORD)v64 && v92 != v91)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v9)
        {
          v14 = v9;
          goto LABEL_17;
        }
      }
      v9 = v14;
LABEL_17:
      v129 = v14;
    }
  }
  *v123 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v11 + 8) = 0;
}

void sub_19F69A06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FlyoverCommonTexcoordsHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5B12559DCF20DC9ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5B12559DCF20DC9ALL;
      if (*(_QWORD *)&v3 <= 0x5B12559DCF20DC9AuLL)
        v5 = 0x5B12559DCF20DC9AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5B12559DCF20DC9ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5B12559DCF20DC9ALL)
            {
              if (v7[2] == 0x5B12559DCF20DC9ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5B12559DCF20DC9ALL)
          {
            if (v7[2] == 0x5B12559DCF20DC9ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FlyoverCommonTexcoordsHandle]";
  *(_QWORD *)(v11 + 24) = 36;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42734E8;
  *(_QWORD *)(v11 + 8) = 0x5B12559DCF20DC9ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5B12559DCF20DC9AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5B12559DCF20DC9ALL;
  v15[1] = "md::ls::FlyoverCommonTexcoordsHandle]";
  v15[2] = 36;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5B12559DCF20DC9ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69A290(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0xCB8B71FD962316ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCB8B71FD962316ALL;
      if (*(_QWORD *)&v3 <= 0xCB8B71FD962316AuLL)
        v5 = 0xCB8B71FD962316AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCB8B71FD962316ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCB8B71FD962316ALL)
            {
              if (v7[2] == 0xCB8B71FD962316ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCB8B71FD962316ALL)
          {
            if (v7[2] == 0xCB8B71FD962316ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>]";
  *(_QWORD *)(v11 + 24) = 91;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42735D8;
  *(_QWORD *)(v11 + 8) = 0xCB8B71FD962316ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCB8B71FD962316AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCB8B71FD962316ALL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>]";
  v15[2] = 91;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCB8B71FD962316ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69A4B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTexcoordsHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTexcoordsHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTexcoordsHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTexcoordsHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288318;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288318;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F69A840(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288360;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288360;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x81BF69EEE736436;
  v2[1] = "md::ls::FlyoverCommonS2TransformHandle]";
  *(_QWORD *)&result = 38;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3F50;
  v2[4] = "md::ls::FlyoverInstance]";
  v2[5] = 23;
  v2[6] = 0x68B9076D41547F1ALL;
  v2[7] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>]";
  v2[8] = 93;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278A30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278A30;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL4 isValid;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD **v60;
  _QWORD **v61;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  BOOL v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned __int8 v72;
  unint64_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint8x8_t v83;
  unint64_t v84;
  uint64_t ***v85;
  uint64_t **v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v122;
  md *v123;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverCommonS2TransformHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>(v2);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v7 = (_QWORD *)v6;
  v8 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v8 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v126 = v8;
  v127 = v3;
  v128 = (_QWORD *)v4;
  v129 = (_QWORD *)v5;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v130 = (_QWORD *)v6;
  v131 = v9;
  if (v10 == v9)
  {
    v11 = a1;
  }
  else
  {
    v11 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v126))
    {
      v12 = v9 + 1;
      do
      {
        v9 = v12;
        v131 = v12;
        if (v12 == v10)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v126);
        v12 = v9 + 1;
      }
      while (!isValid);
    }
  }
  v125 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *v125 = *v9;
    v15 = *v9;
    v16 = HIDWORD(*v9);
    v17 = *v9 >> 39;
    v18 = v3[4];
    if (v17 < (v3[5] - v18) >> 3
      && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
      && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v3[7], v21 = v3[8], v20 < (v21 - v22) >> 3)
      && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
    {
      v25 = (unint64_t *)(v3[10] + 8 * v20);
    }
    else
    {
      v25 = (unint64_t *)v3[11];
    }
    v26 = v7[4];
    if (v17 < (v7[5] - v26) >> 3
      && (v27 = *(_QWORD *)(v26 + 8 * v17)) != 0
      && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)), v30 = v7[7], v29 = v7[8], v28 < (v29 - v30) >> 3)
      && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v16) : (v32 = 0), v32))
    {
      v33 = v7[11];
      v34 = v7[10] + 8 * v28;
    }
    else
    {
      v33 = v7[11];
      v34 = v33;
    }
    if (v34 == v33)
      v35 = 0;
    else
      v35 = (unint64_t *)v34;
    v36 = **(_QWORD **)(v11 + 8);
    v37 = *(_QWORD **)v36;
    v38 = *(_QWORD **)(v36 + 8);
    if (v37 != v38)
    {
      while (*v37 != 0x41D4E9297E100630)
      {
        v37 += 5;
        if (v37 == v38)
          goto LABEL_49;
      }
    }
    if (v37 == v38)
    {
LABEL_49:
      v39 = 0;
    }
    else
    {
      v39 = (_QWORD *)v37[3];
      v40 = (std::__shared_weak_count *)v37[4];
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    v44 = *v25;
    v132 = v44;
    v45 = v39[608];
    if (v44 >= (unint64_t)((v39[609] - v45) >> 3)
      || ((v46 = *(_QWORD *)(v45 + 8 * v44)) != 0 ? (v47 = HIDWORD(v44) == HIDWORD(v46)) : (v47 = 0),
          !v47
       || ((v65 = v39[611], v66 = (uint64_t *)(v65 + 24 * v46), v66 != (uint64_t *)v39[612])
         ? (v67 = v65 == 0)
         : (v67 = 1),
           v67)))
    {
      v48 = 0;
    }
    else
    {
      v68 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::S2Transform>> const&>,std::tuple<>>((uint64_t)(v39 + 595), v44, &v132);
      ++v68[3];
      v48 = *v66;
    }
    v49 = (uint64_t)(v39 + 37);
    v50 = *v35;
    v51 = *v35;
    v52 = v39[50];
    v53 = (v39[51] - v52) >> 3;
    if (v51 < v53
      && (v54 = *(_QWORD *)(v52 + 8 * v51)) != 0
      && HIDWORD(v50) == HIDWORD(v54)
      && ((v55 = v39[53], v55 + 16 * v54 != v39[54]) ? (v56 = v55 == 0) : (v56 = 1), !v56))
    {
      v69 = *(_QWORD *)(v52 + 8 * v51);
      v70 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v50, v35);
      ++v70[3];
      v71 = v55 + 16 * v69;
      v11 = a1;
      v57 = *(_QWORD **)(v71 + 8);
      v50 = *v35;
      v52 = v39[50];
      v51 = *v35;
      if (v51 >= (v39[51] - v52) >> 3)
        goto LABEL_81;
    }
    else
    {
      v57 = 0;
      if (v51 >= v53)
        goto LABEL_81;
    }
    v58 = *(_QWORD *)(v52 + 8 * v51);
    if (v58 && HIDWORD(v50) == HIDWORD(v58))
    {
      v59 = v39[53];
      v60 = (_QWORD **)v39[54];
      v61 = (_QWORD **)(v59 + 16 * v58);
      if (v61 != v60 && v59 != 0)
      {
        v63 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v49, v50, v35);
        ++v63[3];
        v64 = *v61;
        if (!v48)
          goto LABEL_129;
        goto LABEL_82;
      }
    }
LABEL_81:
    v64 = 0;
    if (!v48)
      goto LABEL_129;
LABEL_82:
    if ((v72 & 1) == 0
    {
      do
        v122 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v122 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index = v122;
      v11 = a1;
    }
    v73 = v57[1];
    if (v73)
    {
      v74 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index;
      v75 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
      v75.i16[0] = vaddlv_u8(v75);
      if (v75.u32[0] > 1uLL)
      {
        v76 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index;
        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index >= v73)
          v76 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index % v73;
      }
      else
      {
        v76 = (v73 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index;
      }
      v77 = *(_QWORD **)(*v57 + 8 * v76);
      if (v77)
      {
        v78 = (_QWORD *)*v77;
        if (v78)
        {
          if (v75.u32[0] < 2uLL)
          {
            v79 = v73 - 1;
            while (1)
            {
              v81 = v78[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index == v81)
              {
                if (v78[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index)
                  goto LABEL_104;
              }
              else if ((v81 & v79) != v76)
              {
                goto LABEL_129;
              }
              v78 = (_QWORD *)*v78;
              if (!v78)
                goto LABEL_129;
            }
          }
          do
          {
            v80 = v78[1];
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index == v80)
            {
              if (v78[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>(void)::index)
              {
LABEL_104:
                if ((v82 & 1) == 0)
                {
                  if ((_DWORD)v123)
                  {
                    md::typeToIntMap(v123);
                    v11 = a1;
                  }
                }
                if (!qword_1EE5779D0)
                  goto LABEL_170;
                v83 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                v83.i16[0] = vaddlv_u8(v83);
                if (v83.u32[0] > 1uLL)
                {
                  v84 = v74;
                  if (v74 >= qword_1EE5779D0)
                    v84 = v74 % qword_1EE5779D0;
                }
                else
                {
                  v84 = (qword_1EE5779D0 - 1) & v74;
                }
                v85 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v84);
                if (!v85 || (v86 = *v85) == 0)
LABEL_170:
                  abort();
                if (v83.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v88 = v86[1];
                    if ((uint64_t *)v74 == v88)
                    {
                      if (v86[2] == (uint64_t *)v74)
                        goto LABEL_125;
                    }
                    else if (((unint64_t)v88 & (qword_1EE5779D0 - 1)) != v84)
                    {
                      goto LABEL_170;
                    }
                    v86 = (uint64_t **)*v86;
                    if (!v86)
                      goto LABEL_170;
                  }
                }
                while (1)
                {
                  v87 = (unint64_t)v86[1];
                  if (v74 == v87)
                  {
                    if (v86[2] == (uint64_t *)v74)
                    {
LABEL_125:
                      v89 = *((int *)v86 + 6);
                      v90 = *((int *)v86 + 7);
                      if ((_DWORD)v89 != -1)
                        ggl::PipelineSetup::setConstantData(v64, v89, v48, 1);
                      if ((_DWORD)v90 != -1)
                        ggl::PipelineSetup::setConstantData(v64, v90, v48, 2);
                      goto LABEL_129;
                    }
                  }
                  else
                  {
                    if (v87 >= qword_1EE5779D0)
                      v87 %= (unint64_t)qword_1EE5779D0;
                    if (v87 != v84)
                      goto LABEL_170;
                  }
                  v86 = (uint64_t **)*v86;
                  if (!v86)
                    goto LABEL_170;
                }
              }
            }
            else
            {
              if (v80 >= v73)
                v80 %= v73;
              if (v80 != v76)
                break;
            }
            v78 = (_QWORD *)*v78;
          }
          while (v78);
        }
      }
    }
LABEL_129:
    v9 = (_QWORD *)v126[4];
    v14 = v131 + 1;
    v131 = v14;
    if (v14 != v9)
    {
      v91 = v127[4];
      while (1)
      {
        v92 = *((unsigned int *)v14 + 1);
        v93 = v92 >> 7;
        if (v92 >> 7 < (v127[5] - v91) >> 3)
        {
          v94 = *(_QWORD *)(v91 + 8 * v93);
          if (v94)
          {
            v95 = v92 & 0x7F;
            v96 = *(unsigned __int16 *)(v94 + 2 * v95);
            v98 = v127[7];
            v97 = v127[8];
            if (v96 < (v97 - v98) >> 3)
            {
              v99 = v98 + 8 * v96;
              if (v99 != v97 && *(_DWORD *)(v99 + 4) == (_DWORD)v92)
              {
                v101 = v128[4];
                if (v93 < (v128[5] - v101) >> 3)
                {
                  v102 = *(_QWORD *)(v101 + 8 * v93);
                  if (v102)
                  {
                    v103 = *(unsigned __int16 *)(v102 + 2 * v95);
                    v105 = v128[7];
                    v104 = v128[8];
                    if (v103 < (v104 - v105) >> 3)
                    {
                      v106 = v105 + 8 * v103;
                      if (v106 != v104 && *(_DWORD *)(v106 + 4) == (_DWORD)v92)
                      {
                        v108 = v129[4];
                        if (v93 < (v129[5] - v108) >> 3)
                        {
                          v109 = *(_QWORD *)(v108 + 8 * v93);
                          if (v109)
                          {
                            v110 = *(unsigned __int16 *)(v109 + 2 * v95);
                            v112 = v129[7];
                            v111 = v129[8];
                            if (v110 < (v111 - v112) >> 3)
                            {
                              v113 = v112 + 8 * v110;
                              if (v113 != v111 && *(_DWORD *)(v113 + 4) == (_DWORD)v92)
                              {
                                v115 = v130[4];
                                if (v93 < (v130[5] - v115) >> 3)
                                {
                                  v116 = *(_QWORD *)(v115 + 8 * v93);
                                  if (v116)
                                  {
                                    v117 = *(unsigned __int16 *)(v116 + 2 * v95);
                                    v118 = v130[7];
                                    v119 = v130[8];
                                    if (v117 < (v119 - v118) >> 3)
                                    {
                                      v120 = v118 + 8 * v117;
                                      if (*(_DWORD *)(v120 + 4) == (_DWORD)v92 && v120 != v119)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v9)
        {
          v14 = v9;
          goto LABEL_17;
        }
      }
      v9 = v14;
LABEL_17:
      v131 = v14;
    }
  }
  *v125 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v11 + 8) = 0;
}

void sub_19F69B1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FlyoverCommonS2TransformHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x81BF69EEE736436;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x81BF69EEE736436;
      if (*(_QWORD *)&v3 <= 0x81BF69EEE736436uLL)
        v5 = 0x81BF69EEE736436uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x81BF69EEE736436;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x81BF69EEE736436)
            {
              if (v7[2] == 0x81BF69EEE736436)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x81BF69EEE736436)
          {
            if (v7[2] == 0x81BF69EEE736436)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FlyoverCommonS2TransformHandle]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273E18;
  *(_QWORD *)(v11 + 8) = 0x81BF69EEE736436;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x81BF69EEE736436uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x81BF69EEE736436;
  v15[1] = "md::ls::FlyoverCommonS2TransformHandle]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0x81BF69EEE736436, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69B3DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x68B9076D41547F1ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x68B9076D41547F1ALL;
      if (*(_QWORD *)&v3 <= 0x68B9076D41547F1AuLL)
        v5 = 0x68B9076D41547F1AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x68B9076D41547F1ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x68B9076D41547F1ALL)
            {
              if (v7[2] == 0x68B9076D41547F1ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x68B9076D41547F1ALL)
          {
            if (v7[2] == 0x68B9076D41547F1ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>]";
  *(_QWORD *)(v11 + 24) = 93;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273518;
  *(_QWORD *)(v11 + 8) = 0x68B9076D41547F1ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x68B9076D41547F1AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x68B9076D41547F1ALL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>]";
  v15[2] = 93;
  gdc::Registry::_registerStorageDataSignals(a1, 0x68B9076D41547F1ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69B604(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverCommonS2TransformHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonS2TransformHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverCommonS2TransformHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonS2TransformHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42873E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42873E8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F69B98C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287430;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287430;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xE57F1B6EAAE9263ALL;
  v2[1] = "md::ls::FlyoverSharedConstants]";
  *(_QWORD *)&result = 30;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3F60;
  v2[4] = "md::ls::FlyoverInstance]";
  v2[5] = 23;
  v2[6] = 0x5E5AF20C38ADA136;
  v2[7] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>]";
  v2[8] = 88;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278298;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278298;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t *v22;
  uint64_t *v23;
  uint64_t (***v24)();
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E42753E8;
  v4[1] = a2;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E4275748;
  v5[1] = a2;
  v20 = 0;
  v6 = **(_QWORD **)(a1 + 8);
  v7 = *(_QWORD **)v6;
  v8 = *(_QWORD **)(v6 + 8);
  if (v7 != v8)
  {
    while (*v7 != 0x41D4E9297E100630)
    {
      v7 += 5;
      if (v7 == v8)
        goto LABEL_12;
    }
  }
  if (v7 == v8)
  {
LABEL_12:
    v10 = 0;
  }
  else
  {
    v10 = v7[3];
    v9 = (std::__shared_weak_count *)v7[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v19 = 0;
  v20 = v10;
  v21 = &off_1E427C300;
  v22 = &v19;
  v23 = &v20;
  v24 = &v21;
  (*(void (**)(_QWORD *, uint64_t (***)()))(*v4 + 16))(v4, &v21);
  v14 = v24;
  if (v24 == &v21)
  {
    v15 = 4;
    v14 = &v21;
  }
  else
  {
    if (!v24)
      goto LABEL_18;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_18:
  if (v19)
  {
    v21 = &off_1E427C348;
    v22 = &v20;
    v23 = &v19;
    v24 = &v21;
    (*(void (**)(_QWORD *, uint64_t (***)()))(*v5 + 16))(v5, &v21);
    v16 = v24;
    if (v24 == &v21)
    {
      v17 = 4;
      v16 = &v21;
      goto LABEL_23;
    }
    if (v24)
    {
      v17 = 5;
LABEL_23:
      (*v16)[v17]();
    }
  }
  (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F69BD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a15;
  if (a15 == v17)
  {
    v20 = 4;
    v19 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverInstance>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(v3);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v10 = (_QWORD *)v6;
  v11 = (_QWORD *)(v6 + 32);
  if (v4[8] - v4[7] < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v11 = v4 + 4;
  if (v5[8] - v5[7] >= v11[4] - v11[3])
    v12 = v11;
  else
    v12 = v5 + 4;
  v82[0] = v12;
  v82[1] = v6;
  v82[2] = v4;
  v82[3] = v5;
  v14 = (_QWORD *)v12[3];
  v13 = (_QWORD *)v12[4];
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v10[4];
    if (v23 >= (v10[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v10[7];
    v27 = v10[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v10[11];
      v32 = v10[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      v31 = v10[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v4[4], v23 < (v4[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v4[7], v37 = v4[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v4[11];
      v42 = v4[10] + v36;
    }
    else
    {
      v41 = v4[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v5[4];
    if (v23 < (v5[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v5[7];
        v47 = v5[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v5[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = (_QWORD *)v12[4];
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v10[4];
      v59 = v10[7];
      v58 = v10[8];
      v60 = v4[4];
      result = v4[7];
      v61 = v4[8];
      v62 = v5[4];
      v64 = v5[7];
      v63 = v5[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v10[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v4[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v5[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v5[11];
  v52 = v5[10] + v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::FlyoverInstance>(v1);
  v3 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(v1);
  v4 = gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  if (*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56) >= *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v5 = v4;
  else
    v5 = v2;
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v3;
  v11[0] = v5 + 32;
  v11[1] = v4;
  v11[2] = v2;
  v11[3] = v3;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5E5AF20C38ADA136;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5E5AF20C38ADA136;
      if (*(_QWORD *)&v3 <= 0x5E5AF20C38ADA136uLL)
        v5 = 0x5E5AF20C38ADA136uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5E5AF20C38ADA136;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5E5AF20C38ADA136)
            {
              if (v7[2] == 0x5E5AF20C38ADA136)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5E5AF20C38ADA136)
          {
            if (v7[2] == 0x5E5AF20C38ADA136)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>]";
  *(_QWORD *)(v11 + 24) = 88;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273578;
  *(_QWORD *)(v11 + 8) = 0x5E5AF20C38ADA136;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5E5AF20C38ADA136uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5E5AF20C38ADA136;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>]";
  v15[2] = 88;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5E5AF20C38ADA136, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69C424(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void ecs2::Query<md::ls::FlyoverSharedConstants const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverSharedConstants const&>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *ecs2::Query<md::ls::FlyoverSharedConstants const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverSharedConstants const&>>::each(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *result;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverSharedConstants>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v4 = v3;
  v6 = (unint64_t *)v3[7];
  v5 = (uint64_t *)v3[8];
  v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) != 0
    && (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == (_DWORD)v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        *v21 = *v6;
        v23 = *v6;
        v24 = *v6 >> 39;
        v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (v26 = *(_QWORD *)(v25 + 8 * v24)) != 0
          && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              v29 = v4[7],
              v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v30)
            : (v32 = 0),
              v32))
        {
          v33 = v4[11];
          v34 = v4[10] + 8 * v27;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          v33 = v4[11];
          v34 = v33;
          v35 = *(_QWORD *)(a2 + 24);
          if (!v35)
            goto LABEL_44;
        }
        if (v34 == v33)
          v36 = 0;
        else
          v36 = v34;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v36);
        v37 = v4[4];
        v38 = v4[7];
        v22 = (uint64_t *)v4[8];
        v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          v40 = *((unsigned int *)v39 + 1);
          v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            v42 = *(_QWORD *)(v37 + 8 * (v40 >> 7));
            v41 = v4[8];
            if (v42)
            {
              v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != (_DWORD)v40)
                  v41 = v4[8];
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            v22 = v39 - 1;
            break;
          }
        }
        v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    v15 = v7 >> 3;
    v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != (_DWORD)v17)
              v18 = (uint64_t *)v3[8];
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FlyoverSharedConstants const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverSharedConstants const&>>::empty(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverSharedConstants>(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v3 = v1[7];
  v2 = v1[8];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (v8 = *(_QWORD *)(v6 + 8 * (v5 >> 7))) == 0
      || (v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == (_DWORD)v5) : (v11 = 0), !v11))
    {
      v12 = v4 >> 3;
      v13 = v3 + 8;
      while (v13 != v2)
      {
        v14 = *(unsigned int *)(v13 + 4);
        v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          v16 = *(_QWORD *)(v6 + 8 * (v14 >> 7));
          v15 = v1[8];
          if (v16)
          {
            v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            v15 = v1[8];
            if (v12 > v17)
            {
              v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != (_DWORD)v14)
                v15 = v1[8];
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          v3 = v13 - 8;
          return v2 == v3;
        }
      }
      v3 = v1[8];
    }
  }
  return v2 == v3;
}

uint64_t gdc::Registry::storage<md::ls::FlyoverSharedConstants>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE57F1B6EAAE9263ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE57F1B6EAAE9263ALL;
      if (*(_QWORD *)&v3 <= 0xE57F1B6EAAE9263ALL)
        v5 = 0xE57F1B6EAAE9263ALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE57F1B6EAAE9263ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE57F1B6EAAE9263ALL)
            {
              if (v7[2] == 0xE57F1B6EAAE9263ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE57F1B6EAAE9263ALL)
          {
            if (v7[2] == 0xE57F1B6EAAE9263ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FlyoverSharedConstants]";
  *(_QWORD *)(v11 + 24) = 30;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42728E8;
  *(_QWORD *)(v11 + 8) = 0xE57F1B6EAAE9263ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE57F1B6EAAE9263ALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE57F1B6EAAE9263ALL;
  v15[1] = "md::ls::FlyoverSharedConstants]";
  v15[2] = 30;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE57F1B6EAAE9263ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69CB04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverSharedConstants>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverSharedConstants>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverSharedConstants>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverSharedConstants>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42868A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42868A8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F69CD28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42868F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42868F0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x5E4DB6CB13CB5848;
  v2[1] = "md::ls::FlyoverClipConstantDataHandle]";
  *(_QWORD *)&result = 37;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3F70;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>]";
  v2[5] = 86;
  v2[6] = 0x69465F3BE0BF85FBLL;
  v2[7] = "md::ls::FlyoverInstance]";
  v2[8] = 23;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277CF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277CF8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL4 isValid;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD **v54;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t *v95;
  _QWORD *v97;
  uint64_t v98;
  unsigned __int8 v99;
  unint64_t v100;
  unint64_t v101;
  uint8x8_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint8x8_t v112;
  unint64_t v113;
  uint64_t ***v114;
  uint64_t **v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  md *v121;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverClipConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>(v2);
  v5 = gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v7 = (_QWORD *)v6;
  v8 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v8 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v124 = v8;
  v125 = v3;
  v126 = (_QWORD *)v4;
  v127 = (_QWORD *)v5;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v128 = (_QWORD *)v6;
  v129 = v9;
  if (v10 == v9)
  {
    v11 = a1;
  }
  else
  {
    v11 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v124))
    {
      v12 = v9 + 1;
      do
      {
        v9 = v12;
        v129 = v12;
        if (v12 == v10)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v124);
        v12 = v9 + 1;
      }
      while (!isValid);
    }
  }
  v123 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *v123 = *v9;
    v15 = *v9;
    v16 = HIDWORD(*v9);
    v17 = *v9 >> 39;
    v18 = v3[4];
    if (v17 < (v3[5] - v18) >> 3
      && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
      && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v3[7], v21 = v3[8], v20 < (v21 - v22) >> 3)
      && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
    {
      v25 = (unint64_t *)(v3[10] + 8 * v20);
    }
    else
    {
      v25 = (unint64_t *)v3[11];
    }
    v26 = v7[4];
    if (v17 < (v7[5] - v26) >> 3
      && (v27 = *(_QWORD *)(v26 + 8 * v17)) != 0
      && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)), v30 = v7[7], v29 = v7[8], v28 < (v29 - v30) >> 3)
      && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v16) : (v32 = 0), v32))
    {
      v33 = v7[11];
      v34 = v7[10] + 8 * v28;
    }
    else
    {
      v33 = v7[11];
      v34 = v33;
    }
    if (v34 == v33)
      v35 = 0;
    else
      v35 = (unint64_t *)v34;
    v36 = **(_QWORD **)(v11 + 8);
    v37 = *(_QWORD **)v36;
    v38 = *(_QWORD **)(v36 + 8);
    if (v37 != v38)
    {
      while (*v37 != 0x41D4E9297E100630)
      {
        v37 += 5;
        if (v37 == v38)
          goto LABEL_49;
      }
    }
    if (v37 == v38)
    {
LABEL_49:
      v39 = 0;
    }
    else
    {
      v39 = (_QWORD *)v37[3];
      v40 = (std::__shared_weak_count *)v37[4];
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    v44 = *v35;
    v45 = *v35;
    v46 = v39[50];
    v47 = (v39[51] - v46) >> 3;
    if (v45 < v47
      && (v48 = *(_QWORD *)(v46 + 8 * v45)) != 0
      && HIDWORD(v44) == HIDWORD(v48)
      && ((v49 = v39[53], v49 + 16 * v48 != v39[54]) ? (v50 = v49 == 0) : (v50 = 1), !v50))
    {
      v56 = *(_QWORD *)(v46 + 8 * v45);
      v57 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v44, v35);
      ++v57[3];
      v58 = v49 + 16 * v56;
      v11 = a1;
      v51 = *(_QWORD **)(v58 + 8);
      v44 = *v35;
      v46 = v39[50];
      v45 = *v35;
      if (v45 >= (v39[51] - v46) >> 3)
      {
LABEL_70:
        v105 = 0;
        goto LABEL_71;
      }
    }
    else
    {
      v51 = 0;
      if (v45 >= v47)
        goto LABEL_70;
    }
    v52 = *(_QWORD *)(v46 + 8 * v45);
    if (!v52 || HIDWORD(v44) != HIDWORD(v52))
      goto LABEL_70;
    v53 = v39[53];
    v54 = (_QWORD **)(v53 + 16 * v52);
    if (v54 == (_QWORD **)v39[54] || v53 == 0)
    {
      v105 = 0;
    }
    else
    {
      v104 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v44, v35);
      ++v104[3];
      v105 = *v54;
    }
    v11 = a1;
LABEL_71:
    v59 = *v25;
    v130 = v59;
    v60 = v39[554];
    if (v59 < (unint64_t)((v39[555] - v60) >> 3))
    {
      v61 = *(_QWORD *)(v60 + 8 * v59);
      if (v61 && HIDWORD(v59) == HIDWORD(v61))
      {
        v94 = v39[557];
        v95 = (uint64_t *)(v94 + 24 * v61);
        if (v95 != (uint64_t *)v39[558] && v94 != 0)
        {
          v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Clip>> const&>,std::tuple<>>((uint64_t)(v39 + 541), v59, &v130);
          ++v97[3];
          v98 = *v95;
          if (v98)
          {
            if ((v99 & 1) == 0
            {
              do
                v120 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
              while (__stlxr(v120 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
              gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index = v120;
              v11 = a1;
            }
            v100 = v51[1];
            if (v100)
            {
              v101 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index;
              v102 = (uint8x8_t)vcnt_s8((int8x8_t)v100);
              v102.i16[0] = vaddlv_u8(v102);
              if (v102.u32[0] > 1uLL)
              {
                v103 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index;
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index >= v100)
                  v103 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index % v100;
              }
              else
              {
                v103 = (v100 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index;
              }
              v106 = *(_QWORD **)(*v51 + 8 * v103);
              if (v106)
              {
                v107 = (_QWORD *)*v106;
                if (v107)
                {
                  if (v102.u32[0] < 2uLL)
                  {
                    v108 = v100 - 1;
                    while (1)
                    {
                      v110 = v107[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index == v110)
                      {
                        if (v107[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index)
                          goto LABEL_139;
                      }
                      else if ((v110 & v108) != v103)
                      {
                        goto LABEL_76;
                      }
                      v107 = (_QWORD *)*v107;
                      if (!v107)
                        goto LABEL_76;
                    }
                  }
                  do
                  {
                    v109 = v107[1];
                    if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index == v109)
                    {
                      if (v107[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>(void)::index)
                      {
LABEL_139:
                        if ((v111 & 1) == 0)
                        {
                          if ((_DWORD)v121)
                          {
                            md::typeToIntMap(v121);
                            v11 = a1;
                          }
                        }
                        if (!qword_1EE5779D0)
                          goto LABEL_170;
                        v112 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                        v112.i16[0] = vaddlv_u8(v112);
                        if (v112.u32[0] > 1uLL)
                        {
                          v113 = v101;
                          if (v101 >= qword_1EE5779D0)
                            v113 = v101 % qword_1EE5779D0;
                        }
                        else
                        {
                          v113 = (qword_1EE5779D0 - 1) & v101;
                        }
                        v114 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v113);
                        if (!v114 || (v115 = *v114) == 0)
LABEL_170:
                          abort();
                        if (v112.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v117 = v115[1];
                            if ((uint64_t *)v101 == v117)
                            {
                              if (v115[2] == (uint64_t *)v101)
                                goto LABEL_160;
                            }
                            else if (((unint64_t)v117 & (qword_1EE5779D0 - 1)) != v113)
                            {
                              goto LABEL_170;
                            }
                            v115 = (uint64_t **)*v115;
                            if (!v115)
                              goto LABEL_170;
                          }
                        }
                        while (1)
                        {
                          v116 = (unint64_t)v115[1];
                          if (v101 == v116)
                          {
                            if (v115[2] == (uint64_t *)v101)
                            {
LABEL_160:
                              v118 = *((int *)v115 + 6);
                              v119 = *((int *)v115 + 7);
                              if ((_DWORD)v118 != -1)
                                ggl::PipelineSetup::setConstantData(v105, v118, v98, 1);
                              if ((_DWORD)v119 != -1)
                                ggl::PipelineSetup::setConstantData(v105, v119, v98, 2);
                              goto LABEL_76;
                            }
                          }
                          else
                          {
                            if (v116 >= qword_1EE5779D0)
                              v116 %= (unint64_t)qword_1EE5779D0;
                            if (v116 != v113)
                              goto LABEL_170;
                          }
                          v115 = (uint64_t **)*v115;
                          if (!v115)
                            goto LABEL_170;
                        }
                      }
                    }
                    else
                    {
                      if (v109 >= v100)
                        v109 %= v100;
                      if (v109 != v103)
                        break;
                    }
                    v107 = (_QWORD *)*v107;
                  }
                  while (v107);
                }
              }
            }
          }
        }
      }
    }
LABEL_76:
    v9 = (_QWORD *)v124[4];
    v14 = v129 + 1;
    v129 = v14;
    if (v14 != v9)
    {
      v63 = v125[4];
      while (1)
      {
        v64 = *((unsigned int *)v14 + 1);
        v65 = v64 >> 7;
        if (v64 >> 7 < (v125[5] - v63) >> 3)
        {
          v66 = *(_QWORD *)(v63 + 8 * v65);
          if (v66)
          {
            v67 = v64 & 0x7F;
            v68 = *(unsigned __int16 *)(v66 + 2 * v67);
            v70 = v125[7];
            v69 = v125[8];
            if (v68 < (v69 - v70) >> 3)
            {
              v71 = v70 + 8 * v68;
              if (v71 != v69 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
              {
                v73 = v126[4];
                if (v65 < (v126[5] - v73) >> 3)
                {
                  v74 = *(_QWORD *)(v73 + 8 * v65);
                  if (v74)
                  {
                    v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                    v77 = v126[7];
                    v76 = v126[8];
                    if (v75 < (v76 - v77) >> 3)
                    {
                      v78 = v77 + 8 * v75;
                      if (v78 != v76 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                      {
                        v80 = v127[4];
                        if (v65 < (v127[5] - v80) >> 3)
                        {
                          v81 = *(_QWORD *)(v80 + 8 * v65);
                          if (v81)
                          {
                            v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                            v84 = v127[7];
                            v83 = v127[8];
                            if (v82 < (v83 - v84) >> 3)
                            {
                              v85 = v84 + 8 * v82;
                              if (v85 != v83 && *(_DWORD *)(v85 + 4) == (_DWORD)v64)
                              {
                                v87 = v128[4];
                                if (v65 < (v128[5] - v87) >> 3)
                                {
                                  v88 = *(_QWORD *)(v87 + 8 * v65);
                                  if (v88)
                                  {
                                    v89 = *(unsigned __int16 *)(v88 + 2 * v67);
                                    v90 = v128[7];
                                    v91 = v128[8];
                                    if (v89 < (v91 - v90) >> 3)
                                    {
                                      v92 = v90 + 8 * v89;
                                      if (*(_DWORD *)(v92 + 4) == (_DWORD)v64 && v92 != v91)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v9)
        {
          v14 = v9;
          goto LABEL_17;
        }
      }
      v9 = v14;
LABEL_17:
      v129 = v14;
    }
  }
  *v123 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v11 + 8) = 0;
}

void sub_19F69D6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FlyoverClipConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5E4DB6CB13CB5848;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5E4DB6CB13CB5848;
      if (*(_QWORD *)&v3 <= 0x5E4DB6CB13CB5848uLL)
        v5 = 0x5E4DB6CB13CB5848uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5E4DB6CB13CB5848;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5E4DB6CB13CB5848)
            {
              if (v7[2] == 0x5E4DB6CB13CB5848)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5E4DB6CB13CB5848)
          {
            if (v7[2] == 0x5E4DB6CB13CB5848)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FlyoverClipConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 37;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273C98;
  *(_QWORD *)(v11 + 8) = 0x5E4DB6CB13CB5848;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5E4DB6CB13CB5848uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5E4DB6CB13CB5848;
  v15[1] = "md::ls::FlyoverClipConstantDataHandle]";
  v15[2] = 37;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5E4DB6CB13CB5848, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69D8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3CCD86F46BBA1B2DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3CCD86F46BBA1B2DLL;
      if (*(_QWORD *)&v3 <= 0x3CCD86F46BBA1B2DuLL)
        v5 = 0x3CCD86F46BBA1B2DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3CCD86F46BBA1B2DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3CCD86F46BBA1B2DLL)
            {
              if (v7[2] == 0x3CCD86F46BBA1B2DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3CCD86F46BBA1B2DLL)
          {
            if (v7[2] == 0x3CCD86F46BBA1B2DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>]";
  *(_QWORD *)(v11 + 24) = 86;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273548;
  *(_QWORD *)(v11 + 8) = 0x3CCD86F46BBA1B2DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3CCD86F46BBA1B2DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3CCD86F46BBA1B2DLL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>]";
  v15[2] = 86;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3CCD86F46BBA1B2DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69DAF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverClipConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverClipConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverClipConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverClipConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287E08;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287E08;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F69DE78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287E50;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287E50;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x7D9191A7B57B7B35;
  v2[1] = "md::ls::FlyoverCommonTransformConstantDataHandle]";
  *(_QWORD *)&result = 48;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3F80;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>]";
  v2[5] = 91;
  v2[6] = 0x69465F3BE0BF85FBLL;
  v2[7] = "md::ls::FlyoverInstance]";
  v2[8] = 23;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42787A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42787A8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _BOOL4 isValid;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD **v60;
  _QWORD **v61;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  BOOL v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned __int8 v72;
  unint64_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint8x8_t v83;
  unint64_t v84;
  uint64_t ***v85;
  uint64_t **v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v122;
  md *v123;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>(v2);
  v5 = gdc::Registry::storage<md::ls::FlyoverInstance>(v2);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v7 = (_QWORD *)v6;
  v8 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v8 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v126 = v8;
  v127 = v3;
  v128 = (_QWORD *)v4;
  v129 = (_QWORD *)v5;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v130 = (_QWORD *)v6;
  v131 = v9;
  if (v10 == v9)
  {
    v11 = a1;
  }
  else
  {
    v11 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v126))
    {
      v12 = v9 + 1;
      do
      {
        v9 = v12;
        v131 = v12;
        if (v12 == v10)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v126);
        v12 = v9 + 1;
      }
      while (!isValid);
    }
  }
  v125 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (v10 != v9)
  {
    *v125 = *v9;
    v15 = *v9;
    v16 = HIDWORD(*v9);
    v17 = *v9 >> 39;
    v18 = v3[4];
    if (v17 < (v3[5] - v18) >> 3
      && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
      && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)), v22 = v3[7], v21 = v3[8], v20 < (v21 - v22) >> 3)
      && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
    {
      v25 = (unint64_t *)(v3[10] + 8 * v20);
    }
    else
    {
      v25 = (unint64_t *)v3[11];
    }
    v26 = v7[4];
    if (v17 < (v7[5] - v26) >> 3
      && (v27 = *(_QWORD *)(v26 + 8 * v17)) != 0
      && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)), v30 = v7[7], v29 = v7[8], v28 < (v29 - v30) >> 3)
      && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v16) : (v32 = 0), v32))
    {
      v33 = v7[11];
      v34 = v7[10] + 8 * v28;
    }
    else
    {
      v33 = v7[11];
      v34 = v33;
    }
    if (v34 == v33)
      v35 = 0;
    else
      v35 = (unint64_t *)v34;
    v36 = **(_QWORD **)(v11 + 8);
    v37 = *(_QWORD **)v36;
    v38 = *(_QWORD **)(v36 + 8);
    if (v37 != v38)
    {
      while (*v37 != 0x41D4E9297E100630)
      {
        v37 += 5;
        if (v37 == v38)
          goto LABEL_49;
      }
    }
    if (v37 == v38)
    {
LABEL_49:
      v39 = 0;
    }
    else
    {
      v39 = (_QWORD *)v37[3];
      v40 = (std::__shared_weak_count *)v37[4];
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    v44 = *v25;
    v132 = v44;
    v45 = v39[581];
    if (v44 >= (unint64_t)((v39[582] - v45) >> 3)
      || ((v46 = *(_QWORD *)(v45 + 8 * v44)) != 0 ? (v47 = HIDWORD(v44) == HIDWORD(v46)) : (v47 = 0),
          !v47
       || ((v65 = v39[584], v66 = (uint64_t *)(v65 + 24 * v46), v66 != (uint64_t *)v39[585])
         ? (v67 = v65 == 0)
         : (v67 = 1),
           v67)))
    {
      v48 = 0;
    }
    else
    {
      v68 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::FlyoverCommon::Transform>> const&>,std::tuple<>>((uint64_t)(v39 + 568), v44, &v132);
      ++v68[3];
      v48 = *v66;
    }
    v49 = (uint64_t)(v39 + 37);
    v50 = *v35;
    v51 = *v35;
    v52 = v39[50];
    v53 = (v39[51] - v52) >> 3;
    if (v51 < v53
      && (v54 = *(_QWORD *)(v52 + 8 * v51)) != 0
      && HIDWORD(v50) == HIDWORD(v54)
      && ((v55 = v39[53], v55 + 16 * v54 != v39[54]) ? (v56 = v55 == 0) : (v56 = 1), !v56))
    {
      v69 = *(_QWORD *)(v52 + 8 * v51);
      v70 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v50, v35);
      ++v70[3];
      v71 = v55 + 16 * v69;
      v11 = a1;
      v57 = *(_QWORD **)(v71 + 8);
      v50 = *v35;
      v52 = v39[50];
      v51 = *v35;
      if (v51 >= (v39[51] - v52) >> 3)
        goto LABEL_81;
    }
    else
    {
      v57 = 0;
      if (v51 >= v53)
        goto LABEL_81;
    }
    v58 = *(_QWORD *)(v52 + 8 * v51);
    if (v58 && HIDWORD(v50) == HIDWORD(v58))
    {
      v59 = v39[53];
      v60 = (_QWORD **)v39[54];
      v61 = (_QWORD **)(v59 + 16 * v58);
      if (v61 != v60 && v59 != 0)
      {
        v63 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v49, v50, v35);
        ++v63[3];
        v64 = *v61;
        if (!v48)
          goto LABEL_129;
        goto LABEL_82;
      }
    }
LABEL_81:
    v64 = 0;
    if (!v48)
      goto LABEL_129;
LABEL_82:
    if ((v72 & 1) == 0
    {
      do
        v122 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v122 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index = v122;
      v11 = a1;
    }
    v73 = v57[1];
    if (v73)
    {
      v74 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index;
      v75 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
      v75.i16[0] = vaddlv_u8(v75);
      if (v75.u32[0] > 1uLL)
      {
        v76 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index;
        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index >= v73)
          v76 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index % v73;
      }
      else
      {
        v76 = (v73 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index;
      }
      v77 = *(_QWORD **)(*v57 + 8 * v76);
      if (v77)
      {
        v78 = (_QWORD *)*v77;
        if (v78)
        {
          if (v75.u32[0] < 2uLL)
          {
            v79 = v73 - 1;
            while (1)
            {
              v81 = v78[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index == v81)
              {
                if (v78[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index)
                  goto LABEL_104;
              }
              else if ((v81 & v79) != v76)
              {
                goto LABEL_129;
              }
              v78 = (_QWORD *)*v78;
              if (!v78)
                goto LABEL_129;
            }
          }
          do
          {
            v80 = v78[1];
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index == v80)
            {
              if (v78[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>(void)::index)
              {
LABEL_104:
                if ((v82 & 1) == 0)
                {
                  if ((_DWORD)v123)
                  {
                    md::typeToIntMap(v123);
                    v11 = a1;
                  }
                }
                if (!qword_1EE5779D0)
                  goto LABEL_170;
                v83 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                v83.i16[0] = vaddlv_u8(v83);
                if (v83.u32[0] > 1uLL)
                {
                  v84 = v74;
                  if (v74 >= qword_1EE5779D0)
                    v84 = v74 % qword_1EE5779D0;
                }
                else
                {
                  v84 = (qword_1EE5779D0 - 1) & v74;
                }
                v85 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v84);
                if (!v85 || (v86 = *v85) == 0)
LABEL_170:
                  abort();
                if (v83.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v88 = v86[1];
                    if ((uint64_t *)v74 == v88)
                    {
                      if (v86[2] == (uint64_t *)v74)
                        goto LABEL_125;
                    }
                    else if (((unint64_t)v88 & (qword_1EE5779D0 - 1)) != v84)
                    {
                      goto LABEL_170;
                    }
                    v86 = (uint64_t **)*v86;
                    if (!v86)
                      goto LABEL_170;
                  }
                }
                while (1)
                {
                  v87 = (unint64_t)v86[1];
                  if (v74 == v87)
                  {
                    if (v86[2] == (uint64_t *)v74)
                    {
LABEL_125:
                      v89 = *((int *)v86 + 6);
                      v90 = *((int *)v86 + 7);
                      if ((_DWORD)v89 != -1)
                        ggl::PipelineSetup::setConstantData(v64, v89, v48, 1);
                      if ((_DWORD)v90 != -1)
                        ggl::PipelineSetup::setConstantData(v64, v90, v48, 2);
                      goto LABEL_129;
                    }
                  }
                  else
                  {
                    if (v87 >= qword_1EE5779D0)
                      v87 %= (unint64_t)qword_1EE5779D0;
                    if (v87 != v84)
                      goto LABEL_170;
                  }
                  v86 = (uint64_t **)*v86;
                  if (!v86)
                    goto LABEL_170;
                }
              }
            }
            else
            {
              if (v80 >= v73)
                v80 %= v73;
              if (v80 != v76)
                break;
            }
            v78 = (_QWORD *)*v78;
          }
          while (v78);
        }
      }
    }
LABEL_129:
    v9 = (_QWORD *)v126[4];
    v14 = v131 + 1;
    v131 = v14;
    if (v14 != v9)
    {
      v91 = v127[4];
      while (1)
      {
        v92 = *((unsigned int *)v14 + 1);
        v93 = v92 >> 7;
        if (v92 >> 7 < (v127[5] - v91) >> 3)
        {
          v94 = *(_QWORD *)(v91 + 8 * v93);
          if (v94)
          {
            v95 = v92 & 0x7F;
            v96 = *(unsigned __int16 *)(v94 + 2 * v95);
            v98 = v127[7];
            v97 = v127[8];
            if (v96 < (v97 - v98) >> 3)
            {
              v99 = v98 + 8 * v96;
              if (v99 != v97 && *(_DWORD *)(v99 + 4) == (_DWORD)v92)
              {
                v101 = v128[4];
                if (v93 < (v128[5] - v101) >> 3)
                {
                  v102 = *(_QWORD *)(v101 + 8 * v93);
                  if (v102)
                  {
                    v103 = *(unsigned __int16 *)(v102 + 2 * v95);
                    v105 = v128[7];
                    v104 = v128[8];
                    if (v103 < (v104 - v105) >> 3)
                    {
                      v106 = v105 + 8 * v103;
                      if (v106 != v104 && *(_DWORD *)(v106 + 4) == (_DWORD)v92)
                      {
                        v108 = v129[4];
                        if (v93 < (v129[5] - v108) >> 3)
                        {
                          v109 = *(_QWORD *)(v108 + 8 * v93);
                          if (v109)
                          {
                            v110 = *(unsigned __int16 *)(v109 + 2 * v95);
                            v112 = v129[7];
                            v111 = v129[8];
                            if (v110 < (v111 - v112) >> 3)
                            {
                              v113 = v112 + 8 * v110;
                              if (v113 != v111 && *(_DWORD *)(v113 + 4) == (_DWORD)v92)
                              {
                                v115 = v130[4];
                                if (v93 < (v130[5] - v115) >> 3)
                                {
                                  v116 = *(_QWORD *)(v115 + 8 * v93);
                                  if (v116)
                                  {
                                    v117 = *(unsigned __int16 *)(v116 + 2 * v95);
                                    v118 = v130[7];
                                    v119 = v130[8];
                                    if (v117 < (v119 - v118) >> 3)
                                    {
                                      v120 = v118 + 8 * v117;
                                      if (*(_DWORD *)(v120 + 4) == (_DWORD)v92 && v120 != v119)
                                        break;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v14 == v9)
        {
          v14 = v9;
          goto LABEL_17;
        }
      }
      v9 = v14;
LABEL_17:
      v131 = v14;
    }
  }
  *v125 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v11 + 8) = 0;
}

void sub_19F69E7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7D9191A7B57B7B35;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7D9191A7B57B7B35;
      if (*(_QWORD *)&v3 <= 0x7D9191A7B57B7B35uLL)
        v5 = 0x7D9191A7B57B7B35uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7D9191A7B57B7B35;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7D9191A7B57B7B35)
            {
              if (v7[2] == 0x7D9191A7B57B7B35)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7D9191A7B57B7B35)
          {
            if (v7[2] == 0x7D9191A7B57B7B35)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FlyoverCommonTransformConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 48;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42742F8;
  *(_QWORD *)(v11 + 8) = 0x7D9191A7B57B7B35;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7D9191A7B57B7B35uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7D9191A7B57B7B35;
  v15[1] = "md::ls::FlyoverCommonTransformConstantDataHandle]";
  v15[2] = 48;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7D9191A7B57B7B35, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69EA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x48075849379D7E1DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x48075849379D7E1DLL;
      if (*(_QWORD *)&v3 <= 0x48075849379D7E1DuLL)
        v5 = 0x48075849379D7E1DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x48075849379D7E1DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x48075849379D7E1DLL)
            {
              if (v7[2] == 0x48075849379D7E1DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x48075849379D7E1DLL)
          {
            if (v7[2] == 0x48075849379D7E1DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>]";
  *(_QWORD *)(v11 + 24) = 91;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273608;
  *(_QWORD *)(v11 + 8) = 0x48075849379D7E1DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x48075849379D7E1DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x48075849379D7E1DLL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>]";
  v15[2] = 91;
  gdc::Registry::_registerStorageDataSignals(a1, 0x48075849379D7E1DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69EC3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTransformConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTransformConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTransformConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTransformConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42838D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42838D8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F69EFC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283920;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283920;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xCBB77B1CBD05D7C5;
  v2[1] = "md::ls::UVsHandle]";
  *(_QWORD *)&result = 17;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3F90;
  v2[4] = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>]";
  v2[5] = 75;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276510;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276510;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned __int8 v66;
  unint64_t v67;
  unint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint8x8_t v77;
  unint64_t v78;
  uint64_t ***v79;
  uint64_t **v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v138;
  md *v139;
  _QWORD *v140;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::UVsHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v142 = v7;
  v143 = v3;
  v144 = (_QWORD *)v4;
  v145 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v146 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v142))
  {
    v10 = v8 + 1;
    do
    {
      v8 = v10;
      v146 = v10;
      if (v10 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v142);
      v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 == v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_179;
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v140 = result;
  do
  {
LABEL_13:
    *result = *v8;
    v13 = *v8;
    v14 = HIDWORD(*v8);
    v15 = *v8 >> 39;
    v16 = v3[4];
    if (v15 < (v3[5] - v16) >> 3
      && (v17 = *(_QWORD *)(v16 + 8 * v15)) != 0
      && (v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)), v20 = v3[7], v19 = v3[8], v18 < (v19 - v20) >> 3)
      && ((v21 = v20 + 8 * v18, v21 != v19) ? (v22 = *(_DWORD *)(v21 + 4) == (_DWORD)v14) : (v22 = 0), v22))
    {
      v23 = (unint64_t *)(v3[10] + 8 * v18);
    }
    else
    {
      v23 = (unint64_t *)v3[11];
    }
    v24 = v6[4];
    if (v15 < (v6[5] - v24) >> 3
      && (v25 = *(_QWORD *)(v24 + 8 * v15)) != 0
      && (v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v13) & 0x7F)), v28 = v6[7], v27 = v6[8], v26 < (v27 - v28) >> 3)
      && ((v29 = v28 + 8 * v26, v29 != v27) ? (v30 = *(_DWORD *)(v29 + 4) == (_DWORD)v14) : (v30 = 0), v30))
    {
      v31 = v6[11];
      v32 = v6[10] + 8 * v26;
    }
    else
    {
      v31 = v6[11];
      v32 = v31;
    }
    if (v32 == v31)
      v33 = 0;
    else
      v33 = (unint64_t *)v32;
    v34 = **(_QWORD **)(a1 + 8);
    v35 = *(_QWORD **)v34;
    v36 = *(_QWORD **)(v34 + 8);
    if (v35 != v36)
    {
      while (*v35 != 0x41D4E9297E100630)
      {
        v35 += 5;
        if (v35 == v36)
          goto LABEL_43;
      }
    }
    if (v35 == v36)
    {
LABEL_43:
      v37 = 0;
    }
    else
    {
      v37 = (_QWORD *)v35[3];
      v38 = (std::__shared_weak_count *)v35[4];
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    v42 = *v33;
    v43 = *v33;
    v44 = v37[50];
    v45 = (v37[51] - v44) >> 3;
    if (v43 < v45
      && (v46 = *(_QWORD *)(v44 + 8 * v43)) != 0
      && HIDWORD(v42) == HIDWORD(v46)
      && ((v47 = v37[53], v47 + 16 * v46 != v37[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
    {
      v56 = *(_QWORD *)(v44 + 8 * v43);
      v57 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v33);
      ++v57[3];
      v49 = *(_QWORD **)(v47 + 16 * v56 + 8);
      v42 = *v33;
      v44 = v37[50];
      v43 = *v33;
      if (v43 >= (v37[51] - v44) >> 3)
        goto LABEL_63;
    }
    else
    {
      v49 = 0;
      if (v43 >= v45)
        goto LABEL_63;
    }
    v50 = *(_QWORD *)(v44 + 8 * v43);
    if (!v50
      || HIDWORD(v42) != HIDWORD(v50)
      || ((v51 = v37[53], v52 = (_QWORD *)(v51 + 16 * v50), v52 != (_QWORD *)v37[54])
        ? (v53 = v51 == 0)
        : (v53 = 1),
          v53))
    {
LABEL_63:
      v55 = 0;
      goto LABEL_64;
    }
    v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v33);
    ++v54[3];
    v55 = (_QWORD *)*v52;
LABEL_64:
    v58 = *v23;
    v147 = v58;
    v59 = v37[1298];
    if (v58 < (unint64_t)((v37[1299] - v59) >> 3)
      && ((v60 = *(_QWORD *)(v59 + 8 * v58)) != 0 ? (v61 = HIDWORD(v58) == HIDWORD(v60)) : (v61 = 0), v61))
    {
      v63 = (uint64_t *)(v37[1301] + 8 * v60);
      v62 = (uint64_t *)v37[1302];
    }
    else
    {
      v62 = (uint64_t *)v37[1302];
      v63 = v62;
    }
    v64 = std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>((uint64_t)(v37 + 1290), v58, &v147);
    v65 = 0;
    ++v64[3];
    if (v63 != v62 && v63)
      v65 = *v63;
    if ((v66 & 1) == 0
    {
      do
        v138 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v138 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index = v138;
    }
    v67 = v49[1];
    if (!v67)
      goto LABEL_141;
    v68 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index;
    v69 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
    v69.i16[0] = vaddlv_u8(v69);
    if (v69.u32[0] > 1uLL)
    {
      v70 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index;
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index >= v67)
        v70 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index % v67;
    }
    else
    {
      v70 = (v67 - 1) & gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index;
    }
    v71 = *(_QWORD **)(*v49 + 8 * v70);
    if (!v71)
      goto LABEL_141;
    v72 = (_QWORD *)*v71;
    if (!v72)
      goto LABEL_141;
    if (v69.u32[0] < 2uLL)
    {
      v73 = v67 - 1;
      while (1)
      {
        v75 = v72[1];
        if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index == v75)
        {
          if (v72[2] == gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index)
            goto LABEL_96;
        }
        else if ((v75 & v73) != v70)
        {
          goto LABEL_141;
        }
        v72 = (_QWORD *)*v72;
        if (!v72)
          goto LABEL_141;
      }
    }
    while (1)
    {
      v74 = v72[1];
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index == v74)
        break;
      if (v74 >= v67)
        v74 %= v67;
      if (v74 != v70)
        goto LABEL_141;
LABEL_84:
      v72 = (_QWORD *)*v72;
      if (!v72)
        goto LABEL_141;
    }
    if (v72[2] != gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index)
      goto LABEL_84;
LABEL_96:
    if ((v76 & 1) == 0)
    {
      if ((_DWORD)v139)
      {
        md::typeToIntMap(v139);
      }
    }
    if (!qword_1EE5779D0)
      goto LABEL_180;
    v77 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
    v77.i16[0] = vaddlv_u8(v77);
    if (v77.u32[0] > 1uLL)
    {
      v78 = v68;
      if (v68 >= qword_1EE5779D0)
        v78 = v68 % qword_1EE5779D0;
    }
    else
    {
      v78 = (qword_1EE5779D0 - 1) & v68;
    }
    v79 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v78);
    if (!v79 || (v80 = *v79) == 0)
LABEL_180:
      abort();
    if (v77.u32[0] < 2uLL)
    {
      while (1)
      {
        v82 = v80[1];
        if ((uint64_t *)v68 == v82)
        {
          if (v80[2] == (uint64_t *)v68)
            goto LABEL_117;
        }
        else if (((unint64_t)v82 & (qword_1EE5779D0 - 1)) != v78)
        {
          goto LABEL_180;
        }
        v80 = (uint64_t **)*v80;
        if (!v80)
          goto LABEL_180;
      }
    }
    while (2)
    {
      v81 = (unint64_t)v80[1];
      if (v68 != v81)
      {
        if (v81 >= qword_1EE5779D0)
          v81 %= (unint64_t)qword_1EE5779D0;
        if (v81 != v78)
          goto LABEL_180;
LABEL_107:
        v80 = (uint64_t **)*v80;
        if (!v80)
          goto LABEL_180;
        continue;
      }
      break;
    }
    if (v80[2] != (uint64_t *)v68)
      goto LABEL_107;
LABEL_117:
    v83 = *((int *)v80 + 6);
    v84 = *((int *)v80 + 7);
    if ((_DWORD)v83 != -1)
    {
      v85 = v55[2];
      if (v85
        && (v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 48) + 72) + 8), (v87 = *(_QWORD *)(v86 + 56)) != 0))
      {
        v88 = 0;
        v89 = *(_QWORD *)(v86 + 48);
        v90 = (unsigned __int8 *)(v89 + 1);
        while (1)
        {
          v91 = *v90;
          v90 += 2;
          if (v91 == v83)
            break;
          if (v87 == ++v88)
            goto LABEL_123;
        }
        v92 = *(unsigned __int8 *)(v89 + 2 * v88);
      }
      else
      {
LABEL_123:
        v92 = -1;
      }
      v93 = 16 * v92;
      v94 = (_QWORD *)(v55[4] + v93);
      *v94 = v65;
      v94[1] = 0;
      v95 = (_QWORD *)(v55[16] + v93);
      v96 = (std::__shared_weak_count *)v95[1];
      *v95 = 0;
      v95[1] = 0;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
    }
    if ((_DWORD)v84 != -1)
    {
      v99 = v55[2];
      if (v99
        && (v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v99 + 48) + 72) + 24), (v101 = *(_QWORD *)(v100 + 56)) != 0))
      {
        v102 = 0;
        v103 = *(_QWORD *)(v100 + 48);
        v104 = (unsigned __int8 *)(v103 + 1);
        while (1)
        {
          v105 = *v104;
          v104 += 2;
          if (v105 == v84)
            break;
          if (v101 == ++v102)
            goto LABEL_135;
        }
        v106 = *(unsigned __int8 *)(v103 + 2 * v102);
      }
      else
      {
LABEL_135:
        v106 = -1;
      }
      v107 = 16 * v106;
      v108 = (_QWORD *)(v55[4] + v107);
      *v108 = v65;
      v108[1] = 0;
      v109 = (_QWORD *)(v55[16] + v107);
      v110 = (std::__shared_weak_count *)v109[1];
      *v109 = 0;
      v109[1] = 0;
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
    }
LABEL_141:
    v8 = (_QWORD *)v142[4];
    v113 = v146 + 1;
    v146 = v113;
    if (v113 == v8)
    {
      result = v140;
      if (v9 == v8)
        break;
      goto LABEL_13;
    }
    v114 = v143[4];
    result = v140;
    do
    {
      v115 = *((unsigned int *)v113 + 1);
      v116 = v115 >> 7;
      if (v115 >> 7 < (v143[5] - v114) >> 3)
      {
        v117 = *(_QWORD *)(v114 + 8 * v116);
        if (v117)
        {
          v118 = v115 & 0x7F;
          v119 = *(unsigned __int16 *)(v117 + 2 * v118);
          v120 = v143[7];
          v121 = v143[8];
          if (v119 < (v121 - v120) >> 3)
          {
            v122 = v120 + 8 * v119;
            if (v122 != v121 && *(_DWORD *)(v122 + 4) == (_DWORD)v115)
            {
              v124 = v144[4];
              if (v116 < (v144[5] - v124) >> 3)
              {
                v125 = *(_QWORD *)(v124 + 8 * v116);
                if (v125)
                {
                  v126 = *(unsigned __int16 *)(v125 + 2 * v118);
                  v127 = v144[7];
                  v128 = v144[8];
                  if (v126 < (v128 - v127) >> 3)
                  {
                    v129 = v127 + 8 * v126;
                    if (v129 != v128 && *(_DWORD *)(v129 + 4) == (_DWORD)v115)
                    {
                      v131 = v145[4];
                      if (v116 < (v145[5] - v131) >> 3)
                      {
                        v132 = *(_QWORD *)(v131 + 8 * v116);
                        if (v132)
                        {
                          v133 = *(unsigned __int16 *)(v132 + 2 * v118);
                          v135 = v145[7];
                          v134 = v145[8];
                          if (v133 < (v134 - v135) >> 3)
                          {
                            v136 = v135 + 8 * v133;
                            if (*(_DWORD *)(v136 + 4) == (_DWORD)v115 && v136 != v134)
                            {
                              v8 = v113;
                              goto LABEL_169;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v113;
    }
    while (v113 != v8);
    v113 = v8;
LABEL_169:
    v146 = v113;
  }
  while (v9 != v8);
LABEL_179:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F69F9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::UVsHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCBB77B1CBD05D7C5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCBB77B1CBD05D7C5;
      if (*(_QWORD *)&v3 <= 0xCBB77B1CBD05D7C5)
        v5 = 0xCBB77B1CBD05D7C5 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCBB77B1CBD05D7C5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCBB77B1CBD05D7C5)
            {
              if (v7[2] == 0xCBB77B1CBD05D7C5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCBB77B1CBD05D7C5)
          {
            if (v7[2] == 0xCBB77B1CBD05D7C5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::UVsHandle]";
  *(_QWORD *)(v11 + 24) = 17;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274478;
  *(_QWORD *)(v11 + 8) = 0xCBB77B1CBD05D7C5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCBB77B1CBD05D7C5, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCBB77B1CBD05D7C5;
  v15[1] = "md::ls::UVsHandle]";
  v15[2] = 17;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCBB77B1CBD05D7C5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69FBEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD68EAE6708C7203BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD68EAE6708C7203BLL;
      if (*(_QWORD *)&v3 <= 0xD68EAE6708C7203BLL)
        v5 = 0xD68EAE6708C7203BLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD68EAE6708C7203BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD68EAE6708C7203BLL)
            {
              if (v7[2] == 0xD68EAE6708C7203BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD68EAE6708C7203BLL)
          {
            if (v7[2] == 0xD68EAE6708C7203BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>]";
  *(_QWORD *)(v11 + 24) = 75;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42731E8;
  *(_QWORD *)(v11 + 8) = 0xD68EAE6708C7203BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD68EAE6708C7203BLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD68EAE6708C7203BLL;
  v15[1] = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>]";
  v15[2] = 75;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD68EAE6708C7203BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F69FE14(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::UVsHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UVsHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UVsHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UVsHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284A48;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284A48;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6A019C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284A90;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284A90;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x3218EFD67197A145;
  v2[1] = "md::ls::NormalsHandle]";
  *(_QWORD *)&result = 21;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3FA0;
  v2[4] = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>]";
  v2[5] = 79;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276DC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276DC8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned __int8 v66;
  unint64_t v67;
  unint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint8x8_t v77;
  unint64_t v78;
  uint64_t ***v79;
  uint64_t **v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v138;
  md *v139;
  _QWORD *v140;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::NormalsHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v142 = v7;
  v143 = v3;
  v144 = (_QWORD *)v4;
  v145 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v146 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v142))
  {
    v10 = v8 + 1;
    do
    {
      v8 = v10;
      v146 = v10;
      if (v10 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v142);
      v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 == v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_179;
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v140 = result;
  do
  {
LABEL_13:
    *result = *v8;
    v13 = *v8;
    v14 = HIDWORD(*v8);
    v15 = *v8 >> 39;
    v16 = v3[4];
    if (v15 < (v3[5] - v16) >> 3
      && (v17 = *(_QWORD *)(v16 + 8 * v15)) != 0
      && (v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)), v20 = v3[7], v19 = v3[8], v18 < (v19 - v20) >> 3)
      && ((v21 = v20 + 8 * v18, v21 != v19) ? (v22 = *(_DWORD *)(v21 + 4) == (_DWORD)v14) : (v22 = 0), v22))
    {
      v23 = (unint64_t *)(v3[10] + 8 * v18);
    }
    else
    {
      v23 = (unint64_t *)v3[11];
    }
    v24 = v6[4];
    if (v15 < (v6[5] - v24) >> 3
      && (v25 = *(_QWORD *)(v24 + 8 * v15)) != 0
      && (v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v13) & 0x7F)), v28 = v6[7], v27 = v6[8], v26 < (v27 - v28) >> 3)
      && ((v29 = v28 + 8 * v26, v29 != v27) ? (v30 = *(_DWORD *)(v29 + 4) == (_DWORD)v14) : (v30 = 0), v30))
    {
      v31 = v6[11];
      v32 = v6[10] + 8 * v26;
    }
    else
    {
      v31 = v6[11];
      v32 = v31;
    }
    if (v32 == v31)
      v33 = 0;
    else
      v33 = (unint64_t *)v32;
    v34 = **(_QWORD **)(a1 + 8);
    v35 = *(_QWORD **)v34;
    v36 = *(_QWORD **)(v34 + 8);
    if (v35 != v36)
    {
      while (*v35 != 0x41D4E9297E100630)
      {
        v35 += 5;
        if (v35 == v36)
          goto LABEL_43;
      }
    }
    if (v35 == v36)
    {
LABEL_43:
      v37 = 0;
    }
    else
    {
      v37 = (_QWORD *)v35[3];
      v38 = (std::__shared_weak_count *)v35[4];
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    v42 = *v33;
    v43 = *v33;
    v44 = v37[50];
    v45 = (v37[51] - v44) >> 3;
    if (v43 < v45
      && (v46 = *(_QWORD *)(v44 + 8 * v43)) != 0
      && HIDWORD(v42) == HIDWORD(v46)
      && ((v47 = v37[53], v47 + 16 * v46 != v37[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
    {
      v56 = *(_QWORD *)(v44 + 8 * v43);
      v57 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v33);
      ++v57[3];
      v49 = *(_QWORD **)(v47 + 16 * v56 + 8);
      v42 = *v33;
      v44 = v37[50];
      v43 = *v33;
      if (v43 >= (v37[51] - v44) >> 3)
        goto LABEL_63;
    }
    else
    {
      v49 = 0;
      if (v43 >= v45)
        goto LABEL_63;
    }
    v50 = *(_QWORD *)(v44 + 8 * v43);
    if (!v50
      || HIDWORD(v42) != HIDWORD(v50)
      || ((v51 = v37[53], v52 = (_QWORD *)(v51 + 16 * v50), v52 != (_QWORD *)v37[54])
        ? (v53 = v51 == 0)
        : (v53 = 1),
          v53))
    {
LABEL_63:
      v55 = 0;
      goto LABEL_64;
    }
    v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v33);
    ++v54[3];
    v55 = (_QWORD *)*v52;
LABEL_64:
    v58 = *v23;
    v147 = v58;
    v59 = v37[1298];
    if (v58 < (unint64_t)((v37[1299] - v59) >> 3)
      && ((v60 = *(_QWORD *)(v59 + 8 * v58)) != 0 ? (v61 = HIDWORD(v58) == HIDWORD(v60)) : (v61 = 0), v61))
    {
      v63 = (uint64_t *)(v37[1301] + 8 * v60);
      v62 = (uint64_t *)v37[1302];
    }
    else
    {
      v62 = (uint64_t *)v37[1302];
      v63 = v62;
    }
    v64 = std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>((uint64_t)(v37 + 1290), v58, &v147);
    v65 = 0;
    ++v64[3];
    if (v63 != v62 && v63)
      v65 = *v63;
    if ((v66 & 1) == 0
    {
      do
        v138 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v138 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index = v138;
    }
    v67 = v49[1];
    if (!v67)
      goto LABEL_141;
    v68 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index;
    v69 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
    v69.i16[0] = vaddlv_u8(v69);
    if (v69.u32[0] > 1uLL)
    {
      v70 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index;
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index >= v67)
        v70 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index % v67;
    }
    else
    {
      v70 = (v67 - 1) & gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index;
    }
    v71 = *(_QWORD **)(*v49 + 8 * v70);
    if (!v71)
      goto LABEL_141;
    v72 = (_QWORD *)*v71;
    if (!v72)
      goto LABEL_141;
    if (v69.u32[0] < 2uLL)
    {
      v73 = v67 - 1;
      while (1)
      {
        v75 = v72[1];
        if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index == v75)
        {
          if (v72[2] == gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index)
            goto LABEL_96;
        }
        else if ((v75 & v73) != v70)
        {
          goto LABEL_141;
        }
        v72 = (_QWORD *)*v72;
        if (!v72)
          goto LABEL_141;
      }
    }
    while (1)
    {
      v74 = v72[1];
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index == v74)
        break;
      if (v74 >= v67)
        v74 %= v67;
      if (v74 != v70)
        goto LABEL_141;
LABEL_84:
      v72 = (_QWORD *)*v72;
      if (!v72)
        goto LABEL_141;
    }
    if (v72[2] != gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index)
      goto LABEL_84;
LABEL_96:
    if ((v76 & 1) == 0)
    {
      if ((_DWORD)v139)
      {
        md::typeToIntMap(v139);
      }
    }
    if (!qword_1EE5779D0)
      goto LABEL_180;
    v77 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
    v77.i16[0] = vaddlv_u8(v77);
    if (v77.u32[0] > 1uLL)
    {
      v78 = v68;
      if (v68 >= qword_1EE5779D0)
        v78 = v68 % qword_1EE5779D0;
    }
    else
    {
      v78 = (qword_1EE5779D0 - 1) & v68;
    }
    v79 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v78);
    if (!v79 || (v80 = *v79) == 0)
LABEL_180:
      abort();
    if (v77.u32[0] < 2uLL)
    {
      while (1)
      {
        v82 = v80[1];
        if ((uint64_t *)v68 == v82)
        {
          if (v80[2] == (uint64_t *)v68)
            goto LABEL_117;
        }
        else if (((unint64_t)v82 & (qword_1EE5779D0 - 1)) != v78)
        {
          goto LABEL_180;
        }
        v80 = (uint64_t **)*v80;
        if (!v80)
          goto LABEL_180;
      }
    }
    while (2)
    {
      v81 = (unint64_t)v80[1];
      if (v68 != v81)
      {
        if (v81 >= qword_1EE5779D0)
          v81 %= (unint64_t)qword_1EE5779D0;
        if (v81 != v78)
          goto LABEL_180;
LABEL_107:
        v80 = (uint64_t **)*v80;
        if (!v80)
          goto LABEL_180;
        continue;
      }
      break;
    }
    if (v80[2] != (uint64_t *)v68)
      goto LABEL_107;
LABEL_117:
    v83 = *((int *)v80 + 6);
    v84 = *((int *)v80 + 7);
    if ((_DWORD)v83 != -1)
    {
      v85 = v55[2];
      if (v85
        && (v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 48) + 72) + 8), (v87 = *(_QWORD *)(v86 + 56)) != 0))
      {
        v88 = 0;
        v89 = *(_QWORD *)(v86 + 48);
        v90 = (unsigned __int8 *)(v89 + 1);
        while (1)
        {
          v91 = *v90;
          v90 += 2;
          if (v91 == v83)
            break;
          if (v87 == ++v88)
            goto LABEL_123;
        }
        v92 = *(unsigned __int8 *)(v89 + 2 * v88);
      }
      else
      {
LABEL_123:
        v92 = -1;
      }
      v93 = 16 * v92;
      v94 = (_QWORD *)(v55[4] + v93);
      *v94 = v65;
      v94[1] = 0;
      v95 = (_QWORD *)(v55[16] + v93);
      v96 = (std::__shared_weak_count *)v95[1];
      *v95 = 0;
      v95[1] = 0;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
    }
    if ((_DWORD)v84 != -1)
    {
      v99 = v55[2];
      if (v99
        && (v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v99 + 48) + 72) + 24), (v101 = *(_QWORD *)(v100 + 56)) != 0))
      {
        v102 = 0;
        v103 = *(_QWORD *)(v100 + 48);
        v104 = (unsigned __int8 *)(v103 + 1);
        while (1)
        {
          v105 = *v104;
          v104 += 2;
          if (v105 == v84)
            break;
          if (v101 == ++v102)
            goto LABEL_135;
        }
        v106 = *(unsigned __int8 *)(v103 + 2 * v102);
      }
      else
      {
LABEL_135:
        v106 = -1;
      }
      v107 = 16 * v106;
      v108 = (_QWORD *)(v55[4] + v107);
      *v108 = v65;
      v108[1] = 0;
      v109 = (_QWORD *)(v55[16] + v107);
      v110 = (std::__shared_weak_count *)v109[1];
      *v109 = 0;
      v109[1] = 0;
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
    }
LABEL_141:
    v8 = (_QWORD *)v142[4];
    v113 = v146 + 1;
    v146 = v113;
    if (v113 == v8)
    {
      result = v140;
      if (v9 == v8)
        break;
      goto LABEL_13;
    }
    v114 = v143[4];
    result = v140;
    do
    {
      v115 = *((unsigned int *)v113 + 1);
      v116 = v115 >> 7;
      if (v115 >> 7 < (v143[5] - v114) >> 3)
      {
        v117 = *(_QWORD *)(v114 + 8 * v116);
        if (v117)
        {
          v118 = v115 & 0x7F;
          v119 = *(unsigned __int16 *)(v117 + 2 * v118);
          v120 = v143[7];
          v121 = v143[8];
          if (v119 < (v121 - v120) >> 3)
          {
            v122 = v120 + 8 * v119;
            if (v122 != v121 && *(_DWORD *)(v122 + 4) == (_DWORD)v115)
            {
              v124 = v144[4];
              if (v116 < (v144[5] - v124) >> 3)
              {
                v125 = *(_QWORD *)(v124 + 8 * v116);
                if (v125)
                {
                  v126 = *(unsigned __int16 *)(v125 + 2 * v118);
                  v127 = v144[7];
                  v128 = v144[8];
                  if (v126 < (v128 - v127) >> 3)
                  {
                    v129 = v127 + 8 * v126;
                    if (v129 != v128 && *(_DWORD *)(v129 + 4) == (_DWORD)v115)
                    {
                      v131 = v145[4];
                      if (v116 < (v145[5] - v131) >> 3)
                      {
                        v132 = *(_QWORD *)(v131 + 8 * v116);
                        if (v132)
                        {
                          v133 = *(unsigned __int16 *)(v132 + 2 * v118);
                          v135 = v145[7];
                          v134 = v145[8];
                          if (v133 < (v134 - v135) >> 3)
                          {
                            v136 = v135 + 8 * v133;
                            if (*(_DWORD *)(v136 + 4) == (_DWORD)v115 && v136 != v134)
                            {
                              v8 = v113;
                              goto LABEL_169;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v113;
    }
    while (v113 != v8);
    v113 = v8;
LABEL_169:
    v146 = v113;
  }
  while (v9 != v8);
LABEL_179:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6A0BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::NormalsHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3218EFD67197A145;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3218EFD67197A145;
      if (*(_QWORD *)&v3 <= 0x3218EFD67197A145uLL)
        v5 = 0x3218EFD67197A145uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3218EFD67197A145;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3218EFD67197A145)
            {
              if (v7[2] == 0x3218EFD67197A145)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3218EFD67197A145)
          {
            if (v7[2] == 0x3218EFD67197A145)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::NormalsHandle]";
  *(_QWORD *)(v11 + 24) = 21;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42715F8;
  *(_QWORD *)(v11 + 8) = 0x3218EFD67197A145;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3218EFD67197A145uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3218EFD67197A145;
  v15[1] = "md::ls::NormalsHandle]";
  v15[2] = 21;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3218EFD67197A145, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A0DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE913BA7B7D110BFBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE913BA7B7D110BFBLL;
      if (*(_QWORD *)&v3 <= 0xE913BA7B7D110BFBLL)
        v5 = 0xE913BA7B7D110BFBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE913BA7B7D110BFBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE913BA7B7D110BFBLL)
            {
              if (v7[2] == 0xE913BA7B7D110BFBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE913BA7B7D110BFBLL)
          {
            if (v7[2] == 0xE913BA7B7D110BFBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>]";
  *(_QWORD *)(v11 + 24) = 79;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273218;
  *(_QWORD *)(v11 + 8) = 0xE913BA7B7D110BFBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE913BA7B7D110BFBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE913BA7B7D110BFBLL;
  v15[1] = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>]";
  v15[2] = 79;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE913BA7B7D110BFBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A0FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::NormalsHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NormalsHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NormalsHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NormalsHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42858E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42858E8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6A1374(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285930;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285930;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xD443D3DCBB78491ALL;
  v2[1] = "md::ls::ElevationHandle]";
  *(_QWORD *)&result = 23;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3FB0;
  v2[4] = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>]";
  v2[5] = 82;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277518;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277518;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned __int8 v66;
  unint64_t v67;
  unint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint8x8_t v77;
  unint64_t v78;
  uint64_t ***v79;
  uint64_t **v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v138;
  md *v139;
  _QWORD *v140;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::ElevationHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v142 = v7;
  v143 = v3;
  v144 = (_QWORD *)v4;
  v145 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v146 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v142))
  {
    v10 = v8 + 1;
    do
    {
      v8 = v10;
      v146 = v10;
      if (v10 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v142);
      v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 == v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_179;
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v140 = result;
  do
  {
LABEL_13:
    *result = *v8;
    v13 = *v8;
    v14 = HIDWORD(*v8);
    v15 = *v8 >> 39;
    v16 = v3[4];
    if (v15 < (v3[5] - v16) >> 3
      && (v17 = *(_QWORD *)(v16 + 8 * v15)) != 0
      && (v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)), v20 = v3[7], v19 = v3[8], v18 < (v19 - v20) >> 3)
      && ((v21 = v20 + 8 * v18, v21 != v19) ? (v22 = *(_DWORD *)(v21 + 4) == (_DWORD)v14) : (v22 = 0), v22))
    {
      v23 = (unint64_t *)(v3[10] + 8 * v18);
    }
    else
    {
      v23 = (unint64_t *)v3[11];
    }
    v24 = v6[4];
    if (v15 < (v6[5] - v24) >> 3
      && (v25 = *(_QWORD *)(v24 + 8 * v15)) != 0
      && (v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v13) & 0x7F)), v28 = v6[7], v27 = v6[8], v26 < (v27 - v28) >> 3)
      && ((v29 = v28 + 8 * v26, v29 != v27) ? (v30 = *(_DWORD *)(v29 + 4) == (_DWORD)v14) : (v30 = 0), v30))
    {
      v31 = v6[11];
      v32 = v6[10] + 8 * v26;
    }
    else
    {
      v31 = v6[11];
      v32 = v31;
    }
    if (v32 == v31)
      v33 = 0;
    else
      v33 = (unint64_t *)v32;
    v34 = **(_QWORD **)(a1 + 8);
    v35 = *(_QWORD **)v34;
    v36 = *(_QWORD **)(v34 + 8);
    if (v35 != v36)
    {
      while (*v35 != 0x41D4E9297E100630)
      {
        v35 += 5;
        if (v35 == v36)
          goto LABEL_43;
      }
    }
    if (v35 == v36)
    {
LABEL_43:
      v37 = 0;
    }
    else
    {
      v37 = (_QWORD *)v35[3];
      v38 = (std::__shared_weak_count *)v35[4];
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    v42 = *v33;
    v43 = *v33;
    v44 = v37[50];
    v45 = (v37[51] - v44) >> 3;
    if (v43 < v45
      && (v46 = *(_QWORD *)(v44 + 8 * v43)) != 0
      && HIDWORD(v42) == HIDWORD(v46)
      && ((v47 = v37[53], v47 + 16 * v46 != v37[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
    {
      v56 = *(_QWORD *)(v44 + 8 * v43);
      v57 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v33);
      ++v57[3];
      v49 = *(_QWORD **)(v47 + 16 * v56 + 8);
      v42 = *v33;
      v44 = v37[50];
      v43 = *v33;
      if (v43 >= (v37[51] - v44) >> 3)
        goto LABEL_63;
    }
    else
    {
      v49 = 0;
      if (v43 >= v45)
        goto LABEL_63;
    }
    v50 = *(_QWORD *)(v44 + 8 * v43);
    if (!v50
      || HIDWORD(v42) != HIDWORD(v50)
      || ((v51 = v37[53], v52 = (_QWORD *)(v51 + 16 * v50), v52 != (_QWORD *)v37[54])
        ? (v53 = v51 == 0)
        : (v53 = 1),
          v53))
    {
LABEL_63:
      v55 = 0;
      goto LABEL_64;
    }
    v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v33);
    ++v54[3];
    v55 = (_QWORD *)*v52;
LABEL_64:
    v58 = *v23;
    v147 = v58;
    v59 = v37[1298];
    if (v58 < (unint64_t)((v37[1299] - v59) >> 3)
      && ((v60 = *(_QWORD *)(v59 + 8 * v58)) != 0 ? (v61 = HIDWORD(v58) == HIDWORD(v60)) : (v61 = 0), v61))
    {
      v63 = (uint64_t *)(v37[1301] + 8 * v60);
      v62 = (uint64_t *)v37[1302];
    }
    else
    {
      v62 = (uint64_t *)v37[1302];
      v63 = v62;
    }
    v64 = std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>((uint64_t)(v37 + 1290), v58, &v147);
    v65 = 0;
    ++v64[3];
    if (v63 != v62 && v63)
      v65 = *v63;
    if ((v66 & 1) == 0
    {
      do
        v138 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v138 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index = v138;
    }
    v67 = v49[1];
    if (!v67)
      goto LABEL_141;
    v68 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index;
    v69 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
    v69.i16[0] = vaddlv_u8(v69);
    if (v69.u32[0] > 1uLL)
    {
      v70 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index;
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index >= v67)
        v70 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index % v67;
    }
    else
    {
      v70 = (v67 - 1) & gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index;
    }
    v71 = *(_QWORD **)(*v49 + 8 * v70);
    if (!v71)
      goto LABEL_141;
    v72 = (_QWORD *)*v71;
    if (!v72)
      goto LABEL_141;
    if (v69.u32[0] < 2uLL)
    {
      v73 = v67 - 1;
      while (1)
      {
        v75 = v72[1];
        if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index == v75)
        {
          if (v72[2] == gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index)
            goto LABEL_96;
        }
        else if ((v75 & v73) != v70)
        {
          goto LABEL_141;
        }
        v72 = (_QWORD *)*v72;
        if (!v72)
          goto LABEL_141;
      }
    }
    while (1)
    {
      v74 = v72[1];
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index == v74)
        break;
      if (v74 >= v67)
        v74 %= v67;
      if (v74 != v70)
        goto LABEL_141;
LABEL_84:
      v72 = (_QWORD *)*v72;
      if (!v72)
        goto LABEL_141;
    }
    if (v72[2] != gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index)
      goto LABEL_84;
LABEL_96:
    if ((v76 & 1) == 0)
    {
      if ((_DWORD)v139)
      {
        md::typeToIntMap(v139);
      }
    }
    if (!qword_1EE5779D0)
      goto LABEL_180;
    v77 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
    v77.i16[0] = vaddlv_u8(v77);
    if (v77.u32[0] > 1uLL)
    {
      v78 = v68;
      if (v68 >= qword_1EE5779D0)
        v78 = v68 % qword_1EE5779D0;
    }
    else
    {
      v78 = (qword_1EE5779D0 - 1) & v68;
    }
    v79 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v78);
    if (!v79 || (v80 = *v79) == 0)
LABEL_180:
      abort();
    if (v77.u32[0] < 2uLL)
    {
      while (1)
      {
        v82 = v80[1];
        if ((uint64_t *)v68 == v82)
        {
          if (v80[2] == (uint64_t *)v68)
            goto LABEL_117;
        }
        else if (((unint64_t)v82 & (qword_1EE5779D0 - 1)) != v78)
        {
          goto LABEL_180;
        }
        v80 = (uint64_t **)*v80;
        if (!v80)
          goto LABEL_180;
      }
    }
    while (2)
    {
      v81 = (unint64_t)v80[1];
      if (v68 != v81)
      {
        if (v81 >= qword_1EE5779D0)
          v81 %= (unint64_t)qword_1EE5779D0;
        if (v81 != v78)
          goto LABEL_180;
LABEL_107:
        v80 = (uint64_t **)*v80;
        if (!v80)
          goto LABEL_180;
        continue;
      }
      break;
    }
    if (v80[2] != (uint64_t *)v68)
      goto LABEL_107;
LABEL_117:
    v83 = *((int *)v80 + 6);
    v84 = *((int *)v80 + 7);
    if ((_DWORD)v83 != -1)
    {
      v85 = v55[2];
      if (v85
        && (v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 48) + 72) + 8), (v87 = *(_QWORD *)(v86 + 56)) != 0))
      {
        v88 = 0;
        v89 = *(_QWORD *)(v86 + 48);
        v90 = (unsigned __int8 *)(v89 + 1);
        while (1)
        {
          v91 = *v90;
          v90 += 2;
          if (v91 == v83)
            break;
          if (v87 == ++v88)
            goto LABEL_123;
        }
        v92 = *(unsigned __int8 *)(v89 + 2 * v88);
      }
      else
      {
LABEL_123:
        v92 = -1;
      }
      v93 = 16 * v92;
      v94 = (_QWORD *)(v55[4] + v93);
      *v94 = v65;
      v94[1] = 0;
      v95 = (_QWORD *)(v55[16] + v93);
      v96 = (std::__shared_weak_count *)v95[1];
      *v95 = 0;
      v95[1] = 0;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
    }
    if ((_DWORD)v84 != -1)
    {
      v99 = v55[2];
      if (v99
        && (v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v99 + 48) + 72) + 24), (v101 = *(_QWORD *)(v100 + 56)) != 0))
      {
        v102 = 0;
        v103 = *(_QWORD *)(v100 + 48);
        v104 = (unsigned __int8 *)(v103 + 1);
        while (1)
        {
          v105 = *v104;
          v104 += 2;
          if (v105 == v84)
            break;
          if (v101 == ++v102)
            goto LABEL_135;
        }
        v106 = *(unsigned __int8 *)(v103 + 2 * v102);
      }
      else
      {
LABEL_135:
        v106 = -1;
      }
      v107 = 16 * v106;
      v108 = (_QWORD *)(v55[4] + v107);
      *v108 = v65;
      v108[1] = 0;
      v109 = (_QWORD *)(v55[16] + v107);
      v110 = (std::__shared_weak_count *)v109[1];
      *v109 = 0;
      v109[1] = 0;
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
    }
LABEL_141:
    v8 = (_QWORD *)v142[4];
    v113 = v146 + 1;
    v146 = v113;
    if (v113 == v8)
    {
      result = v140;
      if (v9 == v8)
        break;
      goto LABEL_13;
    }
    v114 = v143[4];
    result = v140;
    do
    {
      v115 = *((unsigned int *)v113 + 1);
      v116 = v115 >> 7;
      if (v115 >> 7 < (v143[5] - v114) >> 3)
      {
        v117 = *(_QWORD *)(v114 + 8 * v116);
        if (v117)
        {
          v118 = v115 & 0x7F;
          v119 = *(unsigned __int16 *)(v117 + 2 * v118);
          v120 = v143[7];
          v121 = v143[8];
          if (v119 < (v121 - v120) >> 3)
          {
            v122 = v120 + 8 * v119;
            if (v122 != v121 && *(_DWORD *)(v122 + 4) == (_DWORD)v115)
            {
              v124 = v144[4];
              if (v116 < (v144[5] - v124) >> 3)
              {
                v125 = *(_QWORD *)(v124 + 8 * v116);
                if (v125)
                {
                  v126 = *(unsigned __int16 *)(v125 + 2 * v118);
                  v127 = v144[7];
                  v128 = v144[8];
                  if (v126 < (v128 - v127) >> 3)
                  {
                    v129 = v127 + 8 * v126;
                    if (v129 != v128 && *(_DWORD *)(v129 + 4) == (_DWORD)v115)
                    {
                      v131 = v145[4];
                      if (v116 < (v145[5] - v131) >> 3)
                      {
                        v132 = *(_QWORD *)(v131 + 8 * v116);
                        if (v132)
                        {
                          v133 = *(unsigned __int16 *)(v132 + 2 * v118);
                          v135 = v145[7];
                          v134 = v145[8];
                          if (v133 < (v134 - v135) >> 3)
                          {
                            v136 = v135 + 8 * v133;
                            if (*(_DWORD *)(v136 + 4) == (_DWORD)v115 && v136 != v134)
                            {
                              v8 = v113;
                              goto LABEL_169;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v113;
    }
    while (v113 != v8);
    v113 = v8;
LABEL_169:
    v146 = v113;
  }
  while (v9 != v8);
LABEL_179:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6A1D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::ElevationHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD443D3DCBB78491ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD443D3DCBB78491ALL;
      if (*(_QWORD *)&v3 <= 0xD443D3DCBB78491ALL)
        v5 = 0xD443D3DCBB78491ALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD443D3DCBB78491ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD443D3DCBB78491ALL)
            {
              if (v7[2] == 0xD443D3DCBB78491ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD443D3DCBB78491ALL)
          {
            if (v7[2] == 0xD443D3DCBB78491ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ElevationHandle]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4271958;
  *(_QWORD *)(v11 + 8) = 0xD443D3DCBB78491ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD443D3DCBB78491ALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD443D3DCBB78491ALL;
  v15[1] = "md::ls::ElevationHandle]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD443D3DCBB78491ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A1F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5FEC906E580C2ACDLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5FEC906E580C2ACDLL;
      if (*(_QWORD *)&v3 <= 0x5FEC906E580C2ACDuLL)
        v5 = 0x5FEC906E580C2ACDuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5FEC906E580C2ACDLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5FEC906E580C2ACDLL)
            {
              if (v7[2] == 0x5FEC906E580C2ACDLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5FEC906E580C2ACDLL)
          {
            if (v7[2] == 0x5FEC906E580C2ACDLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>]";
  *(_QWORD *)(v11 + 24) = 82;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273188;
  *(_QWORD *)(v11 + 8) = 0x5FEC906E580C2ACDLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5FEC906E580C2ACDuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5FEC906E580C2ACDLL;
  v15[1] = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>]";
  v15[2] = 82;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5FEC906E580C2ACDLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A21C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::ElevationHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ElevationHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ElevationHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ElevationHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287BC8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287BC8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6A254C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287C10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287C10;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xAF179EFD8A4C83D4;
  v2[1] = "md::ls::InstanceTransformHandle]";
  *(_QWORD *)&result = 31;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3FC0;
  v2[4] = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>]";
  v2[5] = 89;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278688;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278688;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned __int8 v66;
  unint64_t v67;
  unint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint8x8_t v77;
  unint64_t v78;
  uint64_t ***v79;
  uint64_t **v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v138;
  md *v139;
  _QWORD *v140;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::InstanceTransformHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v142 = v7;
  v143 = v3;
  v144 = (_QWORD *)v4;
  v145 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v146 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v142))
  {
    v10 = v8 + 1;
    do
    {
      v8 = v10;
      v146 = v10;
      if (v10 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v142);
      v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 == v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_179;
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v140 = result;
  do
  {
LABEL_13:
    *result = *v8;
    v13 = *v8;
    v14 = HIDWORD(*v8);
    v15 = *v8 >> 39;
    v16 = v3[4];
    if (v15 < (v3[5] - v16) >> 3
      && (v17 = *(_QWORD *)(v16 + 8 * v15)) != 0
      && (v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F)), v20 = v3[7], v19 = v3[8], v18 < (v19 - v20) >> 3)
      && ((v21 = v20 + 8 * v18, v21 != v19) ? (v22 = *(_DWORD *)(v21 + 4) == (_DWORD)v14) : (v22 = 0), v22))
    {
      v23 = (unint64_t *)(v3[10] + 8 * v18);
    }
    else
    {
      v23 = (unint64_t *)v3[11];
    }
    v24 = v6[4];
    if (v15 < (v6[5] - v24) >> 3
      && (v25 = *(_QWORD *)(v24 + 8 * v15)) != 0
      && (v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v13) & 0x7F)), v28 = v6[7], v27 = v6[8], v26 < (v27 - v28) >> 3)
      && ((v29 = v28 + 8 * v26, v29 != v27) ? (v30 = *(_DWORD *)(v29 + 4) == (_DWORD)v14) : (v30 = 0), v30))
    {
      v31 = v6[11];
      v32 = v6[10] + 8 * v26;
    }
    else
    {
      v31 = v6[11];
      v32 = v31;
    }
    if (v32 == v31)
      v33 = 0;
    else
      v33 = (unint64_t *)v32;
    v34 = **(_QWORD **)(a1 + 8);
    v35 = *(_QWORD **)v34;
    v36 = *(_QWORD **)(v34 + 8);
    if (v35 != v36)
    {
      while (*v35 != 0x41D4E9297E100630)
      {
        v35 += 5;
        if (v35 == v36)
          goto LABEL_43;
      }
    }
    if (v35 == v36)
    {
LABEL_43:
      v37 = 0;
    }
    else
    {
      v37 = (_QWORD *)v35[3];
      v38 = (std::__shared_weak_count *)v35[4];
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    v42 = *v33;
    v43 = *v33;
    v44 = v37[50];
    v45 = (v37[51] - v44) >> 3;
    if (v43 < v45
      && (v46 = *(_QWORD *)(v44 + 8 * v43)) != 0
      && HIDWORD(v42) == HIDWORD(v46)
      && ((v47 = v37[53], v47 + 16 * v46 != v37[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
    {
      v56 = *(_QWORD *)(v44 + 8 * v43);
      v57 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v33);
      ++v57[3];
      v49 = *(_QWORD **)(v47 + 16 * v56 + 8);
      v42 = *v33;
      v44 = v37[50];
      v43 = *v33;
      if (v43 >= (v37[51] - v44) >> 3)
        goto LABEL_63;
    }
    else
    {
      v49 = 0;
      if (v43 >= v45)
        goto LABEL_63;
    }
    v50 = *(_QWORD *)(v44 + 8 * v43);
    if (!v50
      || HIDWORD(v42) != HIDWORD(v50)
      || ((v51 = v37[53], v52 = (_QWORD *)(v51 + 16 * v50), v52 != (_QWORD *)v37[54])
        ? (v53 = v51 == 0)
        : (v53 = 1),
          v53))
    {
LABEL_63:
      v55 = 0;
      goto LABEL_64;
    }
    v54 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v33);
    ++v54[3];
    v55 = (_QWORD *)*v52;
LABEL_64:
    v58 = *v23;
    v147 = v58;
    v59 = v37[1298];
    if (v58 < (unint64_t)((v37[1299] - v59) >> 3)
      && ((v60 = *(_QWORD *)(v59 + 8 * v58)) != 0 ? (v61 = HIDWORD(v58) == HIDWORD(v60)) : (v61 = 0), v61))
    {
      v63 = (uint64_t *)(v37[1301] + 8 * v60);
      v62 = (uint64_t *)v37[1302];
    }
    else
    {
      v62 = (uint64_t *)v37[1302];
      v63 = v62;
    }
    v64 = std::__hash_table<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::hash<geo::handle<md::DeviceDataResource>>,std::equal_to<geo::handle<md::DeviceDataResource>>,true>,std::__unordered_map_equal<geo::handle<md::DeviceDataResource>,std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>,std::equal_to<geo::handle<md::DeviceDataResource>>,std::hash<geo::handle<md::DeviceDataResource>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::DeviceDataResource>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::DeviceDataResource>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::DeviceDataResource> const&>,std::tuple<>>((uint64_t)(v37 + 1290), v58, &v147);
    v65 = 0;
    ++v64[3];
    if (v63 != v62 && v63)
      v65 = *v63;
    if ((v66 & 1) == 0
    {
      do
        v138 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v138 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index = v138;
    }
    v67 = v49[1];
    if (!v67)
      goto LABEL_141;
    v68 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index;
    v69 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
    v69.i16[0] = vaddlv_u8(v69);
    if (v69.u32[0] > 1uLL)
    {
      v70 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index;
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index >= v67)
        v70 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index % v67;
    }
    else
    {
      v70 = (v67 - 1) & gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index;
    }
    v71 = *(_QWORD **)(*v49 + 8 * v70);
    if (!v71)
      goto LABEL_141;
    v72 = (_QWORD *)*v71;
    if (!v72)
      goto LABEL_141;
    if (v69.u32[0] < 2uLL)
    {
      v73 = v67 - 1;
      while (1)
      {
        v75 = v72[1];
        if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index == v75)
        {
          if (v72[2] == gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index)
            goto LABEL_96;
        }
        else if ((v75 & v73) != v70)
        {
          goto LABEL_141;
        }
        v72 = (_QWORD *)*v72;
        if (!v72)
          goto LABEL_141;
      }
    }
    while (1)
    {
      v74 = v72[1];
      if (gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index == v74)
        break;
      if (v74 >= v67)
        v74 %= v67;
      if (v74 != v70)
        goto LABEL_141;
LABEL_84:
      v72 = (_QWORD *)*v72;
      if (!v72)
        goto LABEL_141;
    }
    if (v72[2] != gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index)
      goto LABEL_84;
LABEL_96:
    if ((v76 & 1) == 0)
    {
      if ((_DWORD)v139)
      {
        md::typeToIntMap(v139);
      }
    }
    if (!qword_1EE5779D0)
      goto LABEL_180;
    v77 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
    v77.i16[0] = vaddlv_u8(v77);
    if (v77.u32[0] > 1uLL)
    {
      v78 = v68;
      if (v68 >= qword_1EE5779D0)
        v78 = v68 % qword_1EE5779D0;
    }
    else
    {
      v78 = (qword_1EE5779D0 - 1) & v68;
    }
    v79 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v78);
    if (!v79 || (v80 = *v79) == 0)
LABEL_180:
      abort();
    if (v77.u32[0] < 2uLL)
    {
      while (1)
      {
        v82 = v80[1];
        if ((uint64_t *)v68 == v82)
        {
          if (v80[2] == (uint64_t *)v68)
            goto LABEL_117;
        }
        else if (((unint64_t)v82 & (qword_1EE5779D0 - 1)) != v78)
        {
          goto LABEL_180;
        }
        v80 = (uint64_t **)*v80;
        if (!v80)
          goto LABEL_180;
      }
    }
    while (2)
    {
      v81 = (unint64_t)v80[1];
      if (v68 != v81)
      {
        if (v81 >= qword_1EE5779D0)
          v81 %= (unint64_t)qword_1EE5779D0;
        if (v81 != v78)
          goto LABEL_180;
LABEL_107:
        v80 = (uint64_t **)*v80;
        if (!v80)
          goto LABEL_180;
        continue;
      }
      break;
    }
    if (v80[2] != (uint64_t *)v68)
      goto LABEL_107;
LABEL_117:
    v83 = *((int *)v80 + 6);
    v84 = *((int *)v80 + 7);
    if ((_DWORD)v83 != -1)
    {
      v85 = v55[2];
      if (v85
        && (v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 48) + 72) + 8), (v87 = *(_QWORD *)(v86 + 56)) != 0))
      {
        v88 = 0;
        v89 = *(_QWORD *)(v86 + 48);
        v90 = (unsigned __int8 *)(v89 + 1);
        while (1)
        {
          v91 = *v90;
          v90 += 2;
          if (v91 == v83)
            break;
          if (v87 == ++v88)
            goto LABEL_123;
        }
        v92 = *(unsigned __int8 *)(v89 + 2 * v88);
      }
      else
      {
LABEL_123:
        v92 = -1;
      }
      v93 = 16 * v92;
      v94 = (_QWORD *)(v55[4] + v93);
      *v94 = v65;
      v94[1] = 0;
      v95 = (_QWORD *)(v55[16] + v93);
      v96 = (std::__shared_weak_count *)v95[1];
      *v95 = 0;
      v95[1] = 0;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
    }
    if ((_DWORD)v84 != -1)
    {
      v99 = v55[2];
      if (v99
        && (v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v99 + 48) + 72) + 24), (v101 = *(_QWORD *)(v100 + 56)) != 0))
      {
        v102 = 0;
        v103 = *(_QWORD *)(v100 + 48);
        v104 = (unsigned __int8 *)(v103 + 1);
        while (1)
        {
          v105 = *v104;
          v104 += 2;
          if (v105 == v84)
            break;
          if (v101 == ++v102)
            goto LABEL_135;
        }
        v106 = *(unsigned __int8 *)(v103 + 2 * v102);
      }
      else
      {
LABEL_135:
        v106 = -1;
      }
      v107 = 16 * v106;
      v108 = (_QWORD *)(v55[4] + v107);
      *v108 = v65;
      v108[1] = 0;
      v109 = (_QWORD *)(v55[16] + v107);
      v110 = (std::__shared_weak_count *)v109[1];
      *v109 = 0;
      v109[1] = 0;
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
    }
LABEL_141:
    v8 = (_QWORD *)v142[4];
    v113 = v146 + 1;
    v146 = v113;
    if (v113 == v8)
    {
      result = v140;
      if (v9 == v8)
        break;
      goto LABEL_13;
    }
    v114 = v143[4];
    result = v140;
    do
    {
      v115 = *((unsigned int *)v113 + 1);
      v116 = v115 >> 7;
      if (v115 >> 7 < (v143[5] - v114) >> 3)
      {
        v117 = *(_QWORD *)(v114 + 8 * v116);
        if (v117)
        {
          v118 = v115 & 0x7F;
          v119 = *(unsigned __int16 *)(v117 + 2 * v118);
          v120 = v143[7];
          v121 = v143[8];
          if (v119 < (v121 - v120) >> 3)
          {
            v122 = v120 + 8 * v119;
            if (v122 != v121 && *(_DWORD *)(v122 + 4) == (_DWORD)v115)
            {
              v124 = v144[4];
              if (v116 < (v144[5] - v124) >> 3)
              {
                v125 = *(_QWORD *)(v124 + 8 * v116);
                if (v125)
                {
                  v126 = *(unsigned __int16 *)(v125 + 2 * v118);
                  v127 = v144[7];
                  v128 = v144[8];
                  if (v126 < (v128 - v127) >> 3)
                  {
                    v129 = v127 + 8 * v126;
                    if (v129 != v128 && *(_DWORD *)(v129 + 4) == (_DWORD)v115)
                    {
                      v131 = v145[4];
                      if (v116 < (v145[5] - v131) >> 3)
                      {
                        v132 = *(_QWORD *)(v131 + 8 * v116);
                        if (v132)
                        {
                          v133 = *(unsigned __int16 *)(v132 + 2 * v118);
                          v135 = v145[7];
                          v134 = v145[8];
                          if (v133 < (v134 - v135) >> 3)
                          {
                            v136 = v135 + 8 * v133;
                            if (*(_DWORD *)(v136 + 4) == (_DWORD)v115 && v136 != v134)
                            {
                              v8 = v113;
                              goto LABEL_169;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v113;
    }
    while (v113 != v8);
    v113 = v8;
LABEL_169:
    v146 = v113;
  }
  while (v9 != v8);
LABEL_179:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6A2F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::InstanceTransformHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xAF179EFD8A4C83D4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xAF179EFD8A4C83D4;
      if (*(_QWORD *)&v3 <= 0xAF179EFD8A4C83D4)
        v5 = 0xAF179EFD8A4C83D4 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xAF179EFD8A4C83D4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xAF179EFD8A4C83D4)
            {
              if (v7[2] == 0xAF179EFD8A4C83D4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xAF179EFD8A4C83D4)
          {
            if (v7[2] == 0xAF179EFD8A4C83D4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::InstanceTransformHandle]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272AC8;
  *(_QWORD *)(v11 + 8) = 0xAF179EFD8A4C83D4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xAF179EFD8A4C83D4, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xAF179EFD8A4C83D4;
  v15[1] = "md::ls::InstanceTransformHandle]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0xAF179EFD8A4C83D4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A3174(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF2AA04C63467A586;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF2AA04C63467A586;
      if (*(_QWORD *)&v3 <= 0xF2AA04C63467A586)
        v5 = 0xF2AA04C63467A586 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF2AA04C63467A586;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF2AA04C63467A586)
            {
              if (v7[2] == 0xF2AA04C63467A586)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF2AA04C63467A586)
          {
            if (v7[2] == 0xF2AA04C63467A586)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>]";
  *(_QWORD *)(v11 + 24) = 89;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42731B8;
  *(_QWORD *)(v11 + 8) = 0xF2AA04C63467A586;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF2AA04C63467A586, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF2AA04C63467A586;
  v15[1] = "md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>]";
  v15[2] = 89;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF2AA04C63467A586, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A339C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::InstanceTransformHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::InstanceTransformHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::InstanceTransformHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::InstanceTransformHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285588;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285588;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6A3724(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42855D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42855D0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x3BD94B5787965DA7;
  v2[1] = "md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>]";
  *(_QWORD *)&result = 56;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3FD0;
  v2[4] = "md::ls::TextureHandleForType<DaVinci::DiffuseTexture>]";
  v2[5] = 53;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277368;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277368;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned __int8 v81;
  unint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint8x8_t v92;
  unint64_t v93;
  uint64_t ***v94;
  uint64_t **v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  int v128;
  unsigned __int8 *v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v155;
  md *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  unint64_t v166;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>(v3);
  v5 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(v3);
  v6 = v3;
  v7 = (_QWORD *)v5;
  v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  v9 = (_QWORD *)v8;
  v10 = (_QWORD *)(v4 + 32);
  if (v7[8] - v7[7] < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v10 = v7 + 4;
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < v10[4] - v10[3])
    v10 = (_QWORD *)(v8 + 32);
  v161 = v10;
  v162 = (_QWORD *)v4;
  v163 = v7;
  v164 = (_QWORD *)v8;
  v12 = (_QWORD *)v10[3];
  v11 = (_QWORD *)v10[4];
  v165 = v12;
  v160 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v161))
  {
    v13 = v12 + 1;
    do
    {
      v12 = v13;
      v165 = v13;
      if (v13 == v160)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v161);
      v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v160 != v12)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v157 = v7;
    v158 = result;
    v159 = v9;
    while (1)
    {
      *result = *v12;
      v16 = *v12;
      v17 = HIDWORD(*v12);
      v18 = *v12 >> 39;
      v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
        && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            v23 = v7[7],
            v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v17) : (v25 = 0), v25))
      {
        v26 = (unint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        v26 = (unint64_t *)v7[11];
      }
      v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v18)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            v31 = v9[7],
            v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v17) : (v33 = 0), v33))
      {
        v34 = v9[11];
        v35 = v9[10] + 8 * v29;
      }
      else
      {
        v34 = v9[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = (unint64_t *)v35;
      v37 = **(_QWORD **)(v2 + 8);
      v38 = *(_QWORD **)v37;
      v39 = *(_QWORD **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39)
            goto LABEL_44;
        }
      }
      if (v38 == v39)
      {
LABEL_44:
        v41 = 0;
      }
      else
      {
        v41 = (_QWORD *)v38[3];
        v40 = (std::__shared_weak_count *)v38[4];
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      v45 = **(_QWORD **)(v2 + 8);
      v46 = *(_QWORD **)v45;
      v47 = *(_QWORD **)(v45 + 8);
      if (v46 != v47)
      {
        while (*v46 != 0x348A0B0E758C07C2)
        {
          v46 += 5;
          if (v46 == v47)
            goto LABEL_56;
        }
      }
      if (v46 == v47)
      {
LABEL_56:
        v48 = 0;
      }
      else
      {
        v48 = v46[3];
        v49 = (std::__shared_weak_count *)v46[4];
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          do
            v52 = __ldaxr(v50);
          while (__stlxr(v52 - 1, v50));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      v53 = (uint64_t)(v41 + 37);
      v54 = *v36;
      v55 = *v36;
      v56 = v41[50];
      v57 = (v41[51] - v56) >> 3;
      if (v55 < v57
        && (v58 = *(_QWORD *)(v56 + 8 * v55)) != 0
        && HIDWORD(v54) == HIDWORD(v58)
        && ((v59 = v41[53], v59 + 16 * v58 != v41[54]) ? (v60 = v59 == 0) : (v60 = 1), !v60))
      {
        v69 = v2;
        v70 = *(_QWORD *)(v56 + 8 * v55);
        v71 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v41 + 37), v54, v36);
        ++v71[3];
        v72 = v59 + 16 * v70;
        v2 = v69;
        v7 = v157;
        v61 = *(_QWORD **)(v72 + 8);
        v54 = *v36;
        v56 = v41[50];
        v55 = *v36;
        if (v55 >= (v41[51] - v56) >> 3)
          goto LABEL_76;
      }
      else
      {
        v61 = 0;
        if (v55 >= v57)
          goto LABEL_76;
      }
      v62 = *(_QWORD *)(v56 + 8 * v55);
      if (!v62
        || HIDWORD(v54) != HIDWORD(v62)
        || ((v63 = v41[53], v64 = (uint64_t *)v41[54], v65 = (uint64_t *)(v63 + 16 * v62), v65 != v64)
          ? (v66 = v63 == 0)
          : (v66 = 1),
            v66))
      {
LABEL_76:
        v68 = 0;
        goto LABEL_77;
      }
      v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v53, v54, v36);
      ++v67[3];
      v68 = *v65;
LABEL_77:
      v73 = *v26;
      v166 = v73;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v48 + 104));
      v74 = *(_QWORD *)(v48 + 504);
      if (v73 < (unint64_t)((*(_QWORD *)(v48 + 512) - v74) >> 3)
        && ((v75 = *(_QWORD *)(v74 + 8 * v73)) != 0 ? (v76 = HIDWORD(v73) == HIDWORD(v75)) : (v76 = 0),
            v76))
      {
        v78 = (uint64_t *)(*(_QWORD *)(v48 + 528) + 40 * v75);
        v77 = *(uint64_t **)(v48 + 536);
      }
      else
      {
        v77 = *(uint64_t **)(v48 + 536);
        v78 = v77;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v48 + 104));
      v79 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v48 + 440), v166, &v166);
      v80 = 0;
      ++v79[3];
      if (v78 != v77 && v78)
        v80 = *v78;
      if ((v81 & 1) == 0
      {
        do
          v155 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v155 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index = v155;
        v7 = v157;
      }
      v82 = v61[1];
      if (!v82)
        goto LABEL_158;
      v83 = gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index;
      v84 = (uint8x8_t)vcnt_s8((int8x8_t)v82);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        v85 = gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index >= v82)
          v85 = gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index % v82;
      }
      else
      {
        v85 = (v82 - 1) & gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index;
      }
      v86 = *(_QWORD **)(*v61 + 8 * v85);
      if (!v86)
        goto LABEL_158;
      v87 = (_QWORD *)*v86;
      if (!v87)
        goto LABEL_158;
      if (v84.u32[0] < 2uLL)
      {
        v88 = v82 - 1;
        while (1)
        {
          v90 = v87[1];
          if (gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index == v90)
          {
            if (v87[2] == gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index)
              goto LABEL_109;
          }
          else if ((v90 & v88) != v85)
          {
            goto LABEL_158;
          }
          v87 = (_QWORD *)*v87;
          if (!v87)
            goto LABEL_158;
        }
      }
      while (1)
      {
        v89 = v87[1];
        if (gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index == v89)
          break;
        if (v89 >= v82)
          v89 %= v82;
        if (v89 != v85)
          goto LABEL_158;
LABEL_97:
        v87 = (_QWORD *)*v87;
        if (!v87)
          goto LABEL_158;
      }
      if (v87[2] != gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index)
        goto LABEL_97;
LABEL_109:
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v156)
        {
          md::typeToIntMap(v156);
          v7 = v157;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_194;
      v92 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v92.i16[0] = vaddlv_u8(v92);
      if (v92.u32[0] > 1uLL)
      {
        v93 = v83;
        if (v83 >= qword_1EE5779D0)
          v93 = v83 % qword_1EE5779D0;
      }
      else
      {
        v93 = (qword_1EE5779D0 - 1) & v83;
      }
      v94 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v93);
      if (!v94 || (v95 = *v94) == 0)
LABEL_194:
        abort();
      if (v92.u32[0] < 2uLL)
      {
        while (1)
        {
          v97 = v95[1];
          if ((uint64_t *)v83 == v97)
          {
            if (v95[2] == (uint64_t *)v83)
              goto LABEL_130;
          }
          else if (((unint64_t)v97 & (qword_1EE5779D0 - 1)) != v93)
          {
            goto LABEL_194;
          }
          v95 = (uint64_t **)*v95;
          if (!v95)
            goto LABEL_194;
        }
      }
      while (2)
      {
        v96 = (unint64_t)v95[1];
        if (v83 != v96)
        {
          if (v96 >= qword_1EE5779D0)
            v96 %= (unint64_t)qword_1EE5779D0;
          if (v96 != v93)
            goto LABEL_194;
LABEL_120:
          v95 = (uint64_t **)*v95;
          if (!v95)
            goto LABEL_194;
          continue;
        }
        break;
      }
      if (v95[2] != (uint64_t *)v83)
        goto LABEL_120;
LABEL_130:
      v99 = *((int *)v95 + 6);
      v98 = *((int *)v95 + 7);
      if ((_DWORD)v99 != -1)
      {
        v100 = *(_QWORD *)(v68 + 16);
        if (v100)
        {
          v101 = *(_QWORD *)(*(_QWORD *)(v100 + 48) + 72);
          v102 = *(_QWORD *)(v101 + 8);
          v103 = *(_QWORD *)(v102 + 72);
          if (v103)
          {
            v104 = 0;
            v105 = *(_QWORD *)(v102 + 64);
            v106 = (unsigned __int8 *)(v105 + 1);
            while (1)
            {
              v107 = *v106;
              v106 += 2;
              if (v107 == v99)
                break;
              if (v103 == ++v104)
                goto LABEL_136;
            }
            v114 = (unsigned __int8 *)(v105 + 2 * v104);
LABEL_143:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v114) = v80;
          }
          else
          {
LABEL_136:
            v108 = *(_QWORD *)(v101 + 24);
            v109 = *(_QWORD *)(v108 + 72);
            if (v109)
            {
              v110 = 0;
              v111 = *(_QWORD *)(v108 + 64);
              v112 = (unsigned __int8 *)(v111 + 1);
              while (1)
              {
                v113 = *v112;
                v112 += 2;
                if (v113 == v99)
                  break;
                if (v109 == ++v110)
                  goto LABEL_144;
              }
              v114 = (unsigned __int8 *)(v111 + 2 * v110);
              goto LABEL_143;
            }
          }
        }
      }
LABEL_144:
      if ((_DWORD)v98 != -1)
      {
        v115 = *(_QWORD *)(v68 + 16);
        if (v115)
        {
          v116 = *(_QWORD *)(*(_QWORD *)(v115 + 48) + 72);
          v117 = *(_QWORD *)(v116 + 8);
          v118 = *(_QWORD *)(v117 + 72);
          if (v118)
          {
            v119 = 0;
            v120 = *(_QWORD *)(v117 + 64);
            v121 = (unsigned __int8 *)(v120 + 1);
            while (1)
            {
              v122 = *v121;
              v121 += 2;
              if (v122 == v98)
                break;
              if (v118 == ++v119)
                goto LABEL_150;
            }
            v129 = (unsigned __int8 *)(v120 + 2 * v119);
LABEL_157:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v129) = v80;
          }
          else
          {
LABEL_150:
            v123 = *(_QWORD *)(v116 + 24);
            v124 = *(_QWORD *)(v123 + 72);
            if (v124)
            {
              v125 = 0;
              v126 = *(_QWORD *)(v123 + 64);
              v127 = (unsigned __int8 *)(v126 + 1);
              while (1)
              {
                v128 = *v127;
                v127 += 2;
                if (v128 == v98)
                  break;
                if (v124 == ++v125)
                  goto LABEL_158;
              }
              v129 = (unsigned __int8 *)(v126 + 2 * v125);
              goto LABEL_157;
            }
          }
        }
      }
LABEL_158:
      v12 = (_QWORD *)v161[4];
      v130 = v165 + 1;
      v165 = v130;
      if (v130 == v12)
      {
        result = v158;
        v9 = v159;
      }
      else
      {
        v131 = v162[4];
        result = v158;
        v9 = v159;
        do
        {
          v132 = *((unsigned int *)v130 + 1);
          v133 = v132 >> 7;
          if (v132 >> 7 < (v162[5] - v131) >> 3)
          {
            v134 = *(_QWORD *)(v131 + 8 * v133);
            if (v134)
            {
              v135 = v132 & 0x7F;
              v136 = *(unsigned __int16 *)(v134 + 2 * v135);
              v137 = v162[7];
              v138 = v162[8];
              if (v136 < (v138 - v137) >> 3)
              {
                v139 = v137 + 8 * v136;
                if (v139 != v138 && *(_DWORD *)(v139 + 4) == (_DWORD)v132)
                {
                  v141 = v163[4];
                  if (v133 < (v163[5] - v141) >> 3)
                  {
                    v142 = *(_QWORD *)(v141 + 8 * v133);
                    if (v142)
                    {
                      v143 = *(unsigned __int16 *)(v142 + 2 * v135);
                      v144 = v163[7];
                      v145 = v163[8];
                      if (v143 < (v145 - v144) >> 3)
                      {
                        v146 = v144 + 8 * v143;
                        if (v146 != v145 && *(_DWORD *)(v146 + 4) == (_DWORD)v132)
                        {
                          v148 = v164[4];
                          if (v133 < (v164[5] - v148) >> 3)
                          {
                            v149 = *(_QWORD *)(v148 + 8 * v133);
                            if (v149)
                            {
                              v150 = *(unsigned __int16 *)(v149 + 2 * v135);
                              v152 = v164[7];
                              v151 = v164[8];
                              if (v150 < (v151 - v152) >> 3)
                              {
                                v153 = v152 + 8 * v150;
                                if (*(_DWORD *)(v153 + 4) == (_DWORD)v132 && v153 != v151)
                                {
                                  v12 = v130;
                                  goto LABEL_186;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v130;
        }
        while (v130 != v12);
        v130 = v12;
LABEL_186:
        v165 = v130;
      }
      if (v160 == v12)
        goto LABEL_193;
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_193:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6A41C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3BD94B5787965DA7;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3BD94B5787965DA7;
      if (*(_QWORD *)&v3 <= 0x3BD94B5787965DA7uLL)
        v5 = 0x3BD94B5787965DA7uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3BD94B5787965DA7;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3BD94B5787965DA7)
            {
              if (v7[2] == 0x3BD94B5787965DA7)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3BD94B5787965DA7)
          {
            if (v7[2] == 0x3BD94B5787965DA7)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>]";
  *(_QWORD *)(v11 + 24) = 56;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272C48;
  *(_QWORD *)(v11 + 8) = 0x3BD94B5787965DA7;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3BD94B5787965DA7uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3BD94B5787965DA7;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>]";
  v15[2] = 56;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3BD94B5787965DA7, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A43EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDD9825BCFA7911B2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDD9825BCFA7911B2;
      if (*(_QWORD *)&v3 <= 0xDD9825BCFA7911B2)
        v5 = 0xDD9825BCFA7911B2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDD9825BCFA7911B2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDD9825BCFA7911B2)
            {
              if (v7[2] == 0xDD9825BCFA7911B2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDD9825BCFA7911B2)
          {
            if (v7[2] == 0xDD9825BCFA7911B2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TextureHandleForType<DaVinci::DiffuseTexture>]";
  *(_QWORD *)(v11 + 24) = 53;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272618;
  *(_QWORD *)(v11 + 8) = 0xDD9825BCFA7911B2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDD9825BCFA7911B2, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDD9825BCFA7911B2;
  v15[1] = "md::ls::TextureHandleForType<DaVinci::DiffuseTexture>]";
  v15[2] = 53;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDD9825BCFA7911B2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A4614(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285DF8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285DF8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6A499C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285E40;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285E40;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xC55E4C6C5DFCA74ALL;
  v2[1] = "md::ls::TextureHandleForType<DaVinci::Gradient2Texture>]";
  *(_QWORD *)&result = 55;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3FE0;
  v2[4] = "md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>]";
  v2[5] = 58;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42777A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42777A0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned __int8 v80;
  unint64_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint8x8_t v91;
  unint64_t v92;
  uint64_t ***v93;
  uint64_t **v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  int v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  int v127;
  unsigned __int8 *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v154;
  md *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(v3);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>(v3);
  v6 = v3;
  v7 = (_QWORD *)v4;
  v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  v9 = (_QWORD *)v8;
  v10 = v4 + 32;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v10 = v5 + 32;
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < *(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24))
    v10 = v8 + 32;
  v160 = v10;
  v161 = (_QWORD *)v4;
  v162 = (_QWORD *)v5;
  v163 = (_QWORD *)v8;
  v12 = *(_QWORD **)(v10 + 24);
  v11 = *(_QWORD **)(v10 + 32);
  v164 = v12;
  v159 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v160))
  {
    v13 = v12 + 1;
    do
    {
      v12 = v13;
      v164 = v13;
      if (v13 == v159)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v160);
      v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v159 != v12)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v156 = v7;
    v157 = result;
    v158 = v9;
    while (1)
    {
      *result = *v12;
      v16 = *v12;
      v17 = HIDWORD(*v12);
      v18 = *v12 >> 39;
      v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
        && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            v23 = v7[7],
            v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v17) : (v25 = 0), v25))
      {
        v26 = (uint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        v26 = (uint64_t *)v7[11];
      }
      v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v18)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            v31 = v9[7],
            v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v17) : (v33 = 0), v33))
      {
        v34 = v9[11];
        v35 = v9[10] + 8 * v29;
      }
      else
      {
        v34 = v9[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = (unint64_t *)v35;
      v37 = **(_QWORD **)(v2 + 8);
      v38 = *(_QWORD **)v37;
      v39 = *(_QWORD **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39)
            goto LABEL_44;
        }
      }
      if (v38 == v39)
      {
LABEL_44:
        v40 = 0;
      }
      else
      {
        v40 = (_QWORD *)v38[3];
        v41 = (std::__shared_weak_count *)v38[4];
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      v45 = **(_QWORD **)(v2 + 8);
      v46 = *(_QWORD **)v45;
      v47 = *(_QWORD **)(v45 + 8);
      if (v46 != v47)
      {
        while (*v46 != 0x348A0B0E758C07C2)
        {
          v46 += 5;
          if (v46 == v47)
            goto LABEL_56;
        }
      }
      if (v46 == v47)
      {
LABEL_56:
        v49 = 0;
      }
      else
      {
        v49 = v46[3];
        v48 = (std::__shared_weak_count *)v46[4];
        if (v48)
        {
          v50 = (unint64_t *)&v48->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          do
            v52 = __ldaxr(v50);
          while (__stlxr(v52 - 1, v50));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
      v53 = (uint64_t)(v40 + 37);
      v54 = *v36;
      v55 = *v36;
      v56 = v40[50];
      v57 = (v40[51] - v56) >> 3;
      if (v55 < v57
        && (v58 = *(_QWORD *)(v56 + 8 * v55)) != 0
        && HIDWORD(v54) == HIDWORD(v58)
        && ((v59 = v40[53], v59 + 16 * v58 != v40[54]) ? (v60 = v59 == 0) : (v60 = 1), !v60))
      {
        v69 = v2;
        v70 = *(_QWORD *)(v56 + 8 * v55);
        v71 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v54, v36);
        ++v71[3];
        v72 = v59 + 16 * v70;
        v2 = v69;
        v7 = v156;
        v61 = *(_QWORD **)(v72 + 8);
        v54 = *v36;
        v56 = v40[50];
        v55 = *v36;
        if (v55 >= (v40[51] - v56) >> 3)
          goto LABEL_76;
      }
      else
      {
        v61 = 0;
        if (v55 >= v57)
          goto LABEL_76;
      }
      v62 = *(_QWORD *)(v56 + 8 * v55);
      if (!v62
        || HIDWORD(v54) != HIDWORD(v62)
        || ((v63 = v40[53], v64 = (uint64_t *)v40[54], v65 = (uint64_t *)(v63 + 16 * v62), v65 != v64)
          ? (v66 = v63 == 0)
          : (v66 = 1),
            v66))
      {
LABEL_76:
        v68 = 0;
        goto LABEL_77;
      }
      v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v53, v54, v36);
      ++v67[3];
      v68 = *v65;
LABEL_77:
      v73 = *v26;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v49 + 104));
      v74 = *(_QWORD *)(v49 + 600);
      if (v73 < (unint64_t)((*(_QWORD *)(v49 + 608) - v74) >> 3)
        && ((v75 = *(_QWORD *)(v74 + 8 * v73)) != 0 ? (v76 = HIDWORD(v73) == HIDWORD(v75)) : (v76 = 0),
            v76))
      {
        v78 = (uint64_t *)(*(_QWORD *)(v49 + 624) + 40 * v75);
        v77 = *(uint64_t **)(v49 + 632);
      }
      else
      {
        v77 = *(uint64_t **)(v49 + 632);
        v78 = v77;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v49 + 104));
      v79 = 0;
      if (v78 != v77 && v78)
        v79 = *v78;
      if ((v80 & 1) == 0
      {
        do
          v154 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v154 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index = v154;
        v7 = v156;
      }
      v81 = v61[1];
      if (!v81)
        goto LABEL_158;
      v82 = gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index;
      v83 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
      v83.i16[0] = vaddlv_u8(v83);
      if (v83.u32[0] > 1uLL)
      {
        v84 = gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index;
        if (gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index >= v81)
          v84 = gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index % v81;
      }
      else
      {
        v84 = (v81 - 1) & gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index;
      }
      v85 = *(_QWORD **)(*v61 + 8 * v84);
      if (!v85)
        goto LABEL_158;
      v86 = (_QWORD *)*v85;
      if (!v86)
        goto LABEL_158;
      if (v83.u32[0] < 2uLL)
      {
        v87 = v81 - 1;
        while (1)
        {
          v89 = v86[1];
          if (gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index == v89)
          {
            if (v86[2] == gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index)
              goto LABEL_109;
          }
          else if ((v89 & v87) != v84)
          {
            goto LABEL_158;
          }
          v86 = (_QWORD *)*v86;
          if (!v86)
            goto LABEL_158;
        }
      }
      while (1)
      {
        v88 = v86[1];
        if (gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index == v88)
          break;
        if (v88 >= v81)
          v88 %= v81;
        if (v88 != v84)
          goto LABEL_158;
LABEL_97:
        v86 = (_QWORD *)*v86;
        if (!v86)
          goto LABEL_158;
      }
      if (v86[2] != gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index)
        goto LABEL_97;
LABEL_109:
      if ((v90 & 1) == 0)
      {
        if ((_DWORD)v155)
        {
          md::typeToIntMap(v155);
          v7 = v156;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_194;
      v91 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v91.i16[0] = vaddlv_u8(v91);
      if (v91.u32[0] > 1uLL)
      {
        v92 = v82;
        if (v82 >= qword_1EE5779D0)
          v92 = v82 % qword_1EE5779D0;
      }
      else
      {
        v92 = (qword_1EE5779D0 - 1) & v82;
      }
      v93 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v92);
      if (!v93 || (v94 = *v93) == 0)
LABEL_194:
        abort();
      if (v91.u32[0] < 2uLL)
      {
        while (1)
        {
          v96 = v94[1];
          if ((uint64_t *)v82 == v96)
          {
            if (v94[2] == (uint64_t *)v82)
              goto LABEL_130;
          }
          else if (((unint64_t)v96 & (qword_1EE5779D0 - 1)) != v92)
          {
            goto LABEL_194;
          }
          v94 = (uint64_t **)*v94;
          if (!v94)
            goto LABEL_194;
        }
      }
      while (2)
      {
        v95 = (unint64_t)v94[1];
        if (v82 != v95)
        {
          if (v95 >= qword_1EE5779D0)
            v95 %= (unint64_t)qword_1EE5779D0;
          if (v95 != v92)
            goto LABEL_194;
LABEL_120:
          v94 = (uint64_t **)*v94;
          if (!v94)
            goto LABEL_194;
          continue;
        }
        break;
      }
      if (v94[2] != (uint64_t *)v82)
        goto LABEL_120;
LABEL_130:
      v98 = *((int *)v94 + 6);
      v97 = *((int *)v94 + 7);
      if ((_DWORD)v98 != -1)
      {
        v99 = *(_QWORD *)(v68 + 16);
        if (v99)
        {
          v100 = *(_QWORD *)(*(_QWORD *)(v99 + 48) + 72);
          v101 = *(_QWORD *)(v100 + 8);
          v102 = *(_QWORD *)(v101 + 72);
          if (v102)
          {
            v103 = 0;
            v104 = *(_QWORD *)(v101 + 64);
            v105 = (unsigned __int8 *)(v104 + 1);
            while (1)
            {
              v106 = *v105;
              v105 += 2;
              if (v106 == v98)
                break;
              if (v102 == ++v103)
                goto LABEL_136;
            }
            v113 = (unsigned __int8 *)(v104 + 2 * v103);
LABEL_143:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v113) = v79;
          }
          else
          {
LABEL_136:
            v107 = *(_QWORD *)(v100 + 24);
            v108 = *(_QWORD *)(v107 + 72);
            if (v108)
            {
              v109 = 0;
              v110 = *(_QWORD *)(v107 + 64);
              v111 = (unsigned __int8 *)(v110 + 1);
              while (1)
              {
                v112 = *v111;
                v111 += 2;
                if (v112 == v98)
                  break;
                if (v108 == ++v109)
                  goto LABEL_144;
              }
              v113 = (unsigned __int8 *)(v110 + 2 * v109);
              goto LABEL_143;
            }
          }
        }
      }
LABEL_144:
      if ((_DWORD)v97 != -1)
      {
        v114 = *(_QWORD *)(v68 + 16);
        if (v114)
        {
          v115 = *(_QWORD *)(*(_QWORD *)(v114 + 48) + 72);
          v116 = *(_QWORD *)(v115 + 8);
          v117 = *(_QWORD *)(v116 + 72);
          if (v117)
          {
            v118 = 0;
            v119 = *(_QWORD *)(v116 + 64);
            v120 = (unsigned __int8 *)(v119 + 1);
            while (1)
            {
              v121 = *v120;
              v120 += 2;
              if (v121 == v97)
                break;
              if (v117 == ++v118)
                goto LABEL_150;
            }
            v128 = (unsigned __int8 *)(v119 + 2 * v118);
LABEL_157:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v128) = v79;
          }
          else
          {
LABEL_150:
            v122 = *(_QWORD *)(v115 + 24);
            v123 = *(_QWORD *)(v122 + 72);
            if (v123)
            {
              v124 = 0;
              v125 = *(_QWORD *)(v122 + 64);
              v126 = (unsigned __int8 *)(v125 + 1);
              while (1)
              {
                v127 = *v126;
                v126 += 2;
                if (v127 == v97)
                  break;
                if (v123 == ++v124)
                  goto LABEL_158;
              }
              v128 = (unsigned __int8 *)(v125 + 2 * v124);
              goto LABEL_157;
            }
          }
        }
      }
LABEL_158:
      v12 = *(_QWORD **)(v160 + 32);
      v129 = v164 + 1;
      v164 = v129;
      if (v129 == v12)
      {
        result = v157;
        v9 = v158;
      }
      else
      {
        v130 = v161[4];
        result = v157;
        v9 = v158;
        do
        {
          v131 = *((unsigned int *)v129 + 1);
          v132 = v131 >> 7;
          if (v131 >> 7 < (v161[5] - v130) >> 3)
          {
            v133 = *(_QWORD *)(v130 + 8 * v132);
            if (v133)
            {
              v134 = v131 & 0x7F;
              v135 = *(unsigned __int16 *)(v133 + 2 * v134);
              v136 = v161[7];
              v137 = v161[8];
              if (v135 < (v137 - v136) >> 3)
              {
                v138 = v136 + 8 * v135;
                if (v138 != v137 && *(_DWORD *)(v138 + 4) == (_DWORD)v131)
                {
                  v140 = v162[4];
                  if (v132 < (v162[5] - v140) >> 3)
                  {
                    v141 = *(_QWORD *)(v140 + 8 * v132);
                    if (v141)
                    {
                      v142 = *(unsigned __int16 *)(v141 + 2 * v134);
                      v143 = v162[7];
                      v144 = v162[8];
                      if (v142 < (v144 - v143) >> 3)
                      {
                        v145 = v143 + 8 * v142;
                        if (v145 != v144 && *(_DWORD *)(v145 + 4) == (_DWORD)v131)
                        {
                          v147 = v163[4];
                          if (v132 < (v163[5] - v147) >> 3)
                          {
                            v148 = *(_QWORD *)(v147 + 8 * v132);
                            if (v148)
                            {
                              v149 = *(unsigned __int16 *)(v148 + 2 * v134);
                              v151 = v163[7];
                              v150 = v163[8];
                              if (v149 < (v150 - v151) >> 3)
                              {
                                v152 = v151 + 8 * v149;
                                if (*(_DWORD *)(v152 + 4) == (_DWORD)v131 && v152 != v150)
                                {
                                  v12 = v129;
                                  goto LABEL_186;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v129;
        }
        while (v129 != v12);
        v129 = v12;
LABEL_186:
        v164 = v129;
      }
      if (v159 == v12)
        goto LABEL_193;
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_193:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6A5424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC55E4C6C5DFCA74ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC55E4C6C5DFCA74ALL;
      if (*(_QWORD *)&v3 <= 0xC55E4C6C5DFCA74ALL)
        v5 = 0xC55E4C6C5DFCA74ALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC55E4C6C5DFCA74ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC55E4C6C5DFCA74ALL)
            {
              if (v7[2] == 0xC55E4C6C5DFCA74ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC55E4C6C5DFCA74ALL)
          {
            if (v7[2] == 0xC55E4C6C5DFCA74ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TextureHandleForType<DaVinci::Gradient2Texture>]";
  *(_QWORD *)(v11 + 24) = 55;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42726D8;
  *(_QWORD *)(v11 + 8) = 0xC55E4C6C5DFCA74ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC55E4C6C5DFCA74ALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC55E4C6C5DFCA74ALL;
  v15[1] = "md::ls::TextureHandleForType<DaVinci::Gradient2Texture>]";
  v15[2] = 55;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC55E4C6C5DFCA74ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A5648(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x662527E578BE28E3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x662527E578BE28E3;
      if (*(_QWORD *)&v3 <= 0x662527E578BE28E3uLL)
        v5 = 0x662527E578BE28E3uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x662527E578BE28E3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x662527E578BE28E3)
            {
              if (v7[2] == 0x662527E578BE28E3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x662527E578BE28E3)
          {
            if (v7[2] == 0x662527E578BE28E3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>]";
  *(_QWORD *)(v11 + 24) = 58;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272D08;
  *(_QWORD *)(v11 + 8) = 0x662527E578BE28E3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x662527E578BE28E3uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x662527E578BE28E3;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>]";
  v15[2] = 58;
  gdc::Registry::_registerStorageDataSignals(a1, 0x662527E578BE28E3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A5870(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285D68;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285D68;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6A5BF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285DB0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285DB0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xCAA3A5E853432887;
  v2[1] = "md::ls::TextureHandleForType<DaVinci::Gradient1Texture>]";
  *(_QWORD *)&result = 55;
  *((_OWORD *)v2 + 1) = xmmword_19FFB3FF0;
  v2[4] = "md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>]";
  v2[5] = 58;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277758;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277758;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned __int8 v80;
  unint64_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint8x8_t v91;
  unint64_t v92;
  uint64_t ***v93;
  uint64_t **v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  int v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  int v127;
  unsigned __int8 *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v154;
  md *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(v3);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>(v3);
  v6 = v3;
  v7 = (_QWORD *)v4;
  v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  v9 = (_QWORD *)v8;
  v10 = v4 + 32;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v10 = v5 + 32;
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < *(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24))
    v10 = v8 + 32;
  v160 = v10;
  v161 = (_QWORD *)v4;
  v162 = (_QWORD *)v5;
  v163 = (_QWORD *)v8;
  v12 = *(_QWORD **)(v10 + 24);
  v11 = *(_QWORD **)(v10 + 32);
  v164 = v12;
  v159 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v160))
  {
    v13 = v12 + 1;
    do
    {
      v12 = v13;
      v164 = v13;
      if (v13 == v159)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v160);
      v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v159 != v12)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v156 = v7;
    v157 = result;
    v158 = v9;
    while (1)
    {
      *result = *v12;
      v16 = *v12;
      v17 = HIDWORD(*v12);
      v18 = *v12 >> 39;
      v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
        && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            v23 = v7[7],
            v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v17) : (v25 = 0), v25))
      {
        v26 = (uint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        v26 = (uint64_t *)v7[11];
      }
      v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v18)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            v31 = v9[7],
            v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v17) : (v33 = 0), v33))
      {
        v34 = v9[11];
        v35 = v9[10] + 8 * v29;
      }
      else
      {
        v34 = v9[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = (unint64_t *)v35;
      v37 = **(_QWORD **)(v2 + 8);
      v38 = *(_QWORD **)v37;
      v39 = *(_QWORD **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39)
            goto LABEL_44;
        }
      }
      if (v38 == v39)
      {
LABEL_44:
        v40 = 0;
      }
      else
      {
        v40 = (_QWORD *)v38[3];
        v41 = (std::__shared_weak_count *)v38[4];
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      v45 = **(_QWORD **)(v2 + 8);
      v46 = *(_QWORD **)v45;
      v47 = *(_QWORD **)(v45 + 8);
      if (v46 != v47)
      {
        while (*v46 != 0x348A0B0E758C07C2)
        {
          v46 += 5;
          if (v46 == v47)
            goto LABEL_56;
        }
      }
      if (v46 == v47)
      {
LABEL_56:
        v49 = 0;
      }
      else
      {
        v49 = v46[3];
        v48 = (std::__shared_weak_count *)v46[4];
        if (v48)
        {
          v50 = (unint64_t *)&v48->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          do
            v52 = __ldaxr(v50);
          while (__stlxr(v52 - 1, v50));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
      v53 = (uint64_t)(v40 + 37);
      v54 = *v36;
      v55 = *v36;
      v56 = v40[50];
      v57 = (v40[51] - v56) >> 3;
      if (v55 < v57
        && (v58 = *(_QWORD *)(v56 + 8 * v55)) != 0
        && HIDWORD(v54) == HIDWORD(v58)
        && ((v59 = v40[53], v59 + 16 * v58 != v40[54]) ? (v60 = v59 == 0) : (v60 = 1), !v60))
      {
        v69 = v2;
        v70 = *(_QWORD *)(v56 + 8 * v55);
        v71 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v54, v36);
        ++v71[3];
        v72 = v59 + 16 * v70;
        v2 = v69;
        v7 = v156;
        v61 = *(_QWORD **)(v72 + 8);
        v54 = *v36;
        v56 = v40[50];
        v55 = *v36;
        if (v55 >= (v40[51] - v56) >> 3)
          goto LABEL_76;
      }
      else
      {
        v61 = 0;
        if (v55 >= v57)
          goto LABEL_76;
      }
      v62 = *(_QWORD *)(v56 + 8 * v55);
      if (!v62
        || HIDWORD(v54) != HIDWORD(v62)
        || ((v63 = v40[53], v64 = (uint64_t *)v40[54], v65 = (uint64_t *)(v63 + 16 * v62), v65 != v64)
          ? (v66 = v63 == 0)
          : (v66 = 1),
            v66))
      {
LABEL_76:
        v68 = 0;
        goto LABEL_77;
      }
      v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v53, v54, v36);
      ++v67[3];
      v68 = *v65;
LABEL_77:
      v73 = *v26;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v49 + 104));
      v74 = *(_QWORD *)(v49 + 600);
      if (v73 < (unint64_t)((*(_QWORD *)(v49 + 608) - v74) >> 3)
        && ((v75 = *(_QWORD *)(v74 + 8 * v73)) != 0 ? (v76 = HIDWORD(v73) == HIDWORD(v75)) : (v76 = 0),
            v76))
      {
        v78 = (uint64_t *)(*(_QWORD *)(v49 + 624) + 40 * v75);
        v77 = *(uint64_t **)(v49 + 632);
      }
      else
      {
        v77 = *(uint64_t **)(v49 + 632);
        v78 = v77;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v49 + 104));
      v79 = 0;
      if (v78 != v77 && v78)
        v79 = *v78;
      if ((v80 & 1) == 0
      {
        do
          v154 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v154 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index = v154;
        v7 = v156;
      }
      v81 = v61[1];
      if (!v81)
        goto LABEL_158;
      v82 = gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index;
      v83 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
      v83.i16[0] = vaddlv_u8(v83);
      if (v83.u32[0] > 1uLL)
      {
        v84 = gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index;
        if (gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index >= v81)
          v84 = gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index % v81;
      }
      else
      {
        v84 = (v81 - 1) & gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index;
      }
      v85 = *(_QWORD **)(*v61 + 8 * v84);
      if (!v85)
        goto LABEL_158;
      v86 = (_QWORD *)*v85;
      if (!v86)
        goto LABEL_158;
      if (v83.u32[0] < 2uLL)
      {
        v87 = v81 - 1;
        while (1)
        {
          v89 = v86[1];
          if (gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index == v89)
          {
            if (v86[2] == gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index)
              goto LABEL_109;
          }
          else if ((v89 & v87) != v84)
          {
            goto LABEL_158;
          }
          v86 = (_QWORD *)*v86;
          if (!v86)
            goto LABEL_158;
        }
      }
      while (1)
      {
        v88 = v86[1];
        if (gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index == v88)
          break;
        if (v88 >= v81)
          v88 %= v81;
        if (v88 != v84)
          goto LABEL_158;
LABEL_97:
        v86 = (_QWORD *)*v86;
        if (!v86)
          goto LABEL_158;
      }
      if (v86[2] != gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index)
        goto LABEL_97;
LABEL_109:
      if ((v90 & 1) == 0)
      {
        if ((_DWORD)v155)
        {
          md::typeToIntMap(v155);
          v7 = v156;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_194;
      v91 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v91.i16[0] = vaddlv_u8(v91);
      if (v91.u32[0] > 1uLL)
      {
        v92 = v82;
        if (v82 >= qword_1EE5779D0)
          v92 = v82 % qword_1EE5779D0;
      }
      else
      {
        v92 = (qword_1EE5779D0 - 1) & v82;
      }
      v93 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v92);
      if (!v93 || (v94 = *v93) == 0)
LABEL_194:
        abort();
      if (v91.u32[0] < 2uLL)
      {
        while (1)
        {
          v96 = v94[1];
          if ((uint64_t *)v82 == v96)
          {
            if (v94[2] == (uint64_t *)v82)
              goto LABEL_130;
          }
          else if (((unint64_t)v96 & (qword_1EE5779D0 - 1)) != v92)
          {
            goto LABEL_194;
          }
          v94 = (uint64_t **)*v94;
          if (!v94)
            goto LABEL_194;
        }
      }
      while (2)
      {
        v95 = (unint64_t)v94[1];
        if (v82 != v95)
        {
          if (v95 >= qword_1EE5779D0)
            v95 %= (unint64_t)qword_1EE5779D0;
          if (v95 != v92)
            goto LABEL_194;
LABEL_120:
          v94 = (uint64_t **)*v94;
          if (!v94)
            goto LABEL_194;
          continue;
        }
        break;
      }
      if (v94[2] != (uint64_t *)v82)
        goto LABEL_120;
LABEL_130:
      v98 = *((int *)v94 + 6);
      v97 = *((int *)v94 + 7);
      if ((_DWORD)v98 != -1)
      {
        v99 = *(_QWORD *)(v68 + 16);
        if (v99)
        {
          v100 = *(_QWORD *)(*(_QWORD *)(v99 + 48) + 72);
          v101 = *(_QWORD *)(v100 + 8);
          v102 = *(_QWORD *)(v101 + 72);
          if (v102)
          {
            v103 = 0;
            v104 = *(_QWORD *)(v101 + 64);
            v105 = (unsigned __int8 *)(v104 + 1);
            while (1)
            {
              v106 = *v105;
              v105 += 2;
              if (v106 == v98)
                break;
              if (v102 == ++v103)
                goto LABEL_136;
            }
            v113 = (unsigned __int8 *)(v104 + 2 * v103);
LABEL_143:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v113) = v79;
          }
          else
          {
LABEL_136:
            v107 = *(_QWORD *)(v100 + 24);
            v108 = *(_QWORD *)(v107 + 72);
            if (v108)
            {
              v109 = 0;
              v110 = *(_QWORD *)(v107 + 64);
              v111 = (unsigned __int8 *)(v110 + 1);
              while (1)
              {
                v112 = *v111;
                v111 += 2;
                if (v112 == v98)
                  break;
                if (v108 == ++v109)
                  goto LABEL_144;
              }
              v113 = (unsigned __int8 *)(v110 + 2 * v109);
              goto LABEL_143;
            }
          }
        }
      }
LABEL_144:
      if ((_DWORD)v97 != -1)
      {
        v114 = *(_QWORD *)(v68 + 16);
        if (v114)
        {
          v115 = *(_QWORD *)(*(_QWORD *)(v114 + 48) + 72);
          v116 = *(_QWORD *)(v115 + 8);
          v117 = *(_QWORD *)(v116 + 72);
          if (v117)
          {
            v118 = 0;
            v119 = *(_QWORD *)(v116 + 64);
            v120 = (unsigned __int8 *)(v119 + 1);
            while (1)
            {
              v121 = *v120;
              v120 += 2;
              if (v121 == v97)
                break;
              if (v117 == ++v118)
                goto LABEL_150;
            }
            v128 = (unsigned __int8 *)(v119 + 2 * v118);
LABEL_157:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v128) = v79;
          }
          else
          {
LABEL_150:
            v122 = *(_QWORD *)(v115 + 24);
            v123 = *(_QWORD *)(v122 + 72);
            if (v123)
            {
              v124 = 0;
              v125 = *(_QWORD *)(v122 + 64);
              v126 = (unsigned __int8 *)(v125 + 1);
              while (1)
              {
                v127 = *v126;
                v126 += 2;
                if (v127 == v97)
                  break;
                if (v123 == ++v124)
                  goto LABEL_158;
              }
              v128 = (unsigned __int8 *)(v125 + 2 * v124);
              goto LABEL_157;
            }
          }
        }
      }
LABEL_158:
      v12 = *(_QWORD **)(v160 + 32);
      v129 = v164 + 1;
      v164 = v129;
      if (v129 == v12)
      {
        result = v157;
        v9 = v158;
      }
      else
      {
        v130 = v161[4];
        result = v157;
        v9 = v158;
        do
        {
          v131 = *((unsigned int *)v129 + 1);
          v132 = v131 >> 7;
          if (v131 >> 7 < (v161[5] - v130) >> 3)
          {
            v133 = *(_QWORD *)(v130 + 8 * v132);
            if (v133)
            {
              v134 = v131 & 0x7F;
              v135 = *(unsigned __int16 *)(v133 + 2 * v134);
              v136 = v161[7];
              v137 = v161[8];
              if (v135 < (v137 - v136) >> 3)
              {
                v138 = v136 + 8 * v135;
                if (v138 != v137 && *(_DWORD *)(v138 + 4) == (_DWORD)v131)
                {
                  v140 = v162[4];
                  if (v132 < (v162[5] - v140) >> 3)
                  {
                    v141 = *(_QWORD *)(v140 + 8 * v132);
                    if (v141)
                    {
                      v142 = *(unsigned __int16 *)(v141 + 2 * v134);
                      v143 = v162[7];
                      v144 = v162[8];
                      if (v142 < (v144 - v143) >> 3)
                      {
                        v145 = v143 + 8 * v142;
                        if (v145 != v144 && *(_DWORD *)(v145 + 4) == (_DWORD)v131)
                        {
                          v147 = v163[4];
                          if (v132 < (v163[5] - v147) >> 3)
                          {
                            v148 = *(_QWORD *)(v147 + 8 * v132);
                            if (v148)
                            {
                              v149 = *(unsigned __int16 *)(v148 + 2 * v134);
                              v151 = v163[7];
                              v150 = v163[8];
                              if (v149 < (v150 - v151) >> 3)
                              {
                                v152 = v151 + 8 * v149;
                                if (*(_DWORD *)(v152 + 4) == (_DWORD)v131 && v152 != v150)
                                {
                                  v12 = v129;
                                  goto LABEL_186;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v129;
        }
        while (v129 != v12);
        v129 = v12;
LABEL_186:
        v164 = v129;
      }
      if (v159 == v12)
        goto LABEL_193;
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_193:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6A6680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCAA3A5E853432887;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCAA3A5E853432887;
      if (*(_QWORD *)&v3 <= 0xCAA3A5E853432887)
        v5 = 0xCAA3A5E853432887 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCAA3A5E853432887;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCAA3A5E853432887)
            {
              if (v7[2] == 0xCAA3A5E853432887)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCAA3A5E853432887)
          {
            if (v7[2] == 0xCAA3A5E853432887)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TextureHandleForType<DaVinci::Gradient1Texture>]";
  *(_QWORD *)(v11 + 24) = 55;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42726A8;
  *(_QWORD *)(v11 + 8) = 0xCAA3A5E853432887;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCAA3A5E853432887, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCAA3A5E853432887;
  v15[1] = "md::ls::TextureHandleForType<DaVinci::Gradient1Texture>]";
  v15[2] = 55;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCAA3A5E853432887, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A68A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF8B8367F26B933A6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF8B8367F26B933A6;
      if (*(_QWORD *)&v3 <= 0xF8B8367F26B933A6)
        v5 = 0xF8B8367F26B933A6 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF8B8367F26B933A6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF8B8367F26B933A6)
            {
              if (v7[2] == 0xF8B8367F26B933A6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF8B8367F26B933A6)
          {
            if (v7[2] == 0xF8B8367F26B933A6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>]";
  *(_QWORD *)(v11 + 24) = 58;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272CD8;
  *(_QWORD *)(v11 + 8) = 0xF8B8367F26B933A6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF8B8367F26B933A6, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF8B8367F26B933A6;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>]";
  v15[2] = 58;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF8B8367F26B933A6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A6ACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286A58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286A58;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6A6E54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286AA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286AA0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x985FB09D9DF9959FLL;
  v2[1] = "md::ls::HasStyleAttributeRasterSet]";
  *(_QWORD *)&result = 34;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4000;
  v2[4] = "md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>]";
  v2[5] = 60;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277DD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277DD0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *HasStyleAttributeRaster;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t *v48;
  int8x8_t v49;
  VKDebugSettings *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  _QWORD *v73;
  uint64_t v74;
  int8x8_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  int8x8_t v79;
  uint8x8_t v80;
  uint64_t v81;
  int8x8_t **v82;
  int8x8_t *v83;
  uint64_t v84;
  int8x8_t v85;
  int8x8_t v86;
  unsigned __int8 v87;
  unint64_t v88;
  unint64_t v89;
  uint8x8_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint8x8_t v98;
  unint64_t v99;
  uint64_t ***v100;
  uint64_t **v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  unsigned __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  int v134;
  unsigned __int8 *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v161;
  md *v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  char v172[3];
  char v173;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  HasStyleAttributeRaster = (_QWORD *)gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(v3);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>(v3);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v7 = (_QWORD *)v6;
  v8 = HasStyleAttributeRaster + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < HasStyleAttributeRaster[8] - HasStyleAttributeRaster[7])
    v8 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v167 = v8;
  v168 = HasStyleAttributeRaster;
  v169 = (_QWORD *)v5;
  v170 = (_QWORD *)v6;
  v10 = (_QWORD *)v8[3];
  v9 = (_QWORD *)v8[4];
  v171 = v10;
  v166 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v167))
  {
    v11 = v10 + 1;
    do
    {
      v10 = v11;
      v171 = v11;
      if (v11 == v166)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v167);
      v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v166 != v10)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v164 = result;
    v165 = v2;
    v163 = HasStyleAttributeRaster;
    while (1)
    {
      *result = *v10;
      v14 = *v10;
      v15 = HIDWORD(*v10);
      v16 = *v10 >> 39;
      v17 = HasStyleAttributeRaster[4];
      if (v16 < (HasStyleAttributeRaster[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = HasStyleAttributeRaster[7],
            v20 = HasStyleAttributeRaster[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = HasStyleAttributeRaster[10] + 8 * v19;
      }
      else
      {
        v24 = HasStyleAttributeRaster[11];
      }
      v25 = v7[4];
      if (v16 < (v7[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v7[7],
            v28 = v7[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v7[11];
        v33 = v7[10] + 8 * v27;
      }
      else
      {
        v32 = v7[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = ***(uint64_t ****)(v2 + 8);
      if (v35 != *(uint64_t **)(**(_QWORD **)(v2 + 8) + 8) && *v35 != 0xC94DD89A7B09BE9CLL)
      {
        v36 = v35 + 5;
        do
        {
          v37 = *v36;
          v36 += 5;
        }
        while (v37 != 0xC94DD89A7B09BE9CLL);
        v35 = v36 - 5;
      }
      v38 = v35[3];
      v39 = (std::__shared_weak_count *)v35[4];
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(p_shared_owners);
        while (__stxr(v41 + 1, p_shared_owners));
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
      v44 = *(_QWORD *)(v43 + 2680);
      if (!v44)
        goto LABEL_55;
      v45 = v43 + 2680;
      do
      {
        v46 = *(_DWORD *)(v44 + 32);
        v47 = v46 >= 0x99;
        if (v46 >= 0x99)
          v48 = (uint64_t *)v44;
        else
          v48 = (uint64_t *)(v44 + 8);
        if (v47)
          v45 = v44;
        v44 = *v48;
      }
      while (*v48);
      if (v45 != v43 + 2680 && *(_DWORD *)(v45 + 32) <= 0x99u)
        v49 = *(int8x8_t *)(v45 + 40);
      else
LABEL_55:
        v49 = 0;
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v50 = (VKDebugSettings *)objc_claimAutoreleasedReturnValue();
      md::TerrainDebugOptions::TerrainDebugOptions((md::TerrainDebugOptions *)v172, v50);

      v51 = **(_QWORD **)(v2 + 8);
      v52 = *(_QWORD **)v51;
      v53 = *(_QWORD **)(v51 + 8);
      if (v52 != v53)
      {
        while (*v52 != 0x41D4E9297E100630)
        {
          v52 += 5;
          if (v52 == v53)
            goto LABEL_67;
        }
      }
      if (v52 == v53)
      {
LABEL_67:
        v54 = 0;
      }
      else
      {
        v54 = (_QWORD *)v52[3];
        v55 = (std::__shared_weak_count *)v52[4];
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
          do
            v58 = __ldaxr(v56);
          while (__stlxr(v58 - 1, v56));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
      }
      v59 = (uint64_t)(v54 + 37);
      v60 = *v34;
      v61 = *v34;
      v62 = v54[50];
      v63 = (v54[51] - v62) >> 3;
      if (v61 < v63
        && (v64 = *(_QWORD *)(v62 + 8 * v61)) != 0
        && HIDWORD(v60) == HIDWORD(v64)
        && ((v65 = v54[53], v65 + 16 * v64 != v54[54]) ? (v66 = v65 == 0) : (v66 = 1), !v66))
      {
        v75 = v49;
        v76 = *(_QWORD *)(v62 + 8 * v61);
        v77 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v54 + 37), v60, v34);
        ++v77[3];
        v78 = v65 + 16 * v76;
        v49 = v75;
        HasStyleAttributeRaster = v163;
        v67 = *(_QWORD **)(v78 + 8);
        v60 = *v34;
        v62 = v54[50];
        v61 = *v34;
        if (v61 >= (v54[51] - v62) >> 3)
          goto LABEL_89;
      }
      else
      {
        v67 = 0;
        if (v61 >= v63)
          goto LABEL_89;
      }
      v68 = *(_QWORD *)(v62 + 8 * v61);
      if (v68 && HIDWORD(v60) == HIDWORD(v68))
      {
        v69 = v54[53];
        v70 = (uint64_t *)v54[54];
        v71 = (uint64_t *)(v69 + 16 * v68);
        if (v71 != v70 && v69 != 0)
        {
          v73 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v59, v60, v34);
          ++v73[3];
          v74 = *v71;
          if (v173)
            goto LABEL_90;
          goto LABEL_114;
        }
      }
LABEL_89:
      v74 = 0;
      if (v173)
      {
LABEL_90:
        v79 = *(int8x8_t *)(*(_QWORD *)v24 + 8);
        if (v79)
        {
          v80 = (uint8x8_t)vcnt_s8(v79);
          v80.i16[0] = vaddlv_u8(v80);
          if (v80.u32[0] > 1uLL)
          {
            if (*(_QWORD *)&v79 <= 0x99uLL)
              v81 = 0x99uLL % *(_QWORD *)&v79;
            else
              v81 = 153;
          }
          else
          {
            v81 = (v79.i32[0] - 1) & 0x99;
          }
          v82 = *(int8x8_t ***)(**(_QWORD **)v24 + 8 * v81);
          if (v82)
          {
            v83 = *v82;
            if (v83)
            {
              if (v80.u32[0] < 2uLL)
              {
                v84 = *(_QWORD *)&v79 - 1;
                while (1)
                {
                  v86 = v83[1];
                  if (*(_QWORD *)&v86 == 153)
                  {
                    if (v83[2].i32[0] == 153)
                      goto LABEL_140;
                  }
                  else if ((*(_QWORD *)&v86 & v84) != v81)
                  {
                    goto LABEL_111;
                  }
                  v83 = (int8x8_t *)*v83;
                  if (!v83)
                    goto LABEL_111;
                }
              }
              do
              {
                v85 = v83[1];
                if (*(_QWORD *)&v85 == 153)
                {
                  if (v83[2].i32[0] == 153)
                  {
LABEL_140:
                    v79 = v83[3];
                    goto LABEL_112;
                  }
                }
                else
                {
                  if (*(_QWORD *)&v85 >= *(_QWORD *)&v79)
                    *(_QWORD *)&v85 %= *(_QWORD *)&v79;
                  if (*(_QWORD *)&v85 != v81)
                    break;
                }
                v83 = (int8x8_t *)*v83;
              }
              while (v83);
            }
          }
LABEL_111:
          v79 = 0;
        }
LABEL_112:
        if (v79)
          v49 = v79;
      }
LABEL_114:
      if ((v87 & 1) == 0
      {
        do
          v161 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v161 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index = v161;
        HasStyleAttributeRaster = v163;
      }
      v88 = v67[1];
      if (!v88)
        goto LABEL_186;
      v89 = gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index;
      v90 = (uint8x8_t)vcnt_s8((int8x8_t)v88);
      v90.i16[0] = vaddlv_u8(v90);
      if (v90.u32[0] > 1uLL)
      {
        v91 = gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index >= v88)
          v91 = gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index % v88;
      }
      else
      {
        v91 = (v88 - 1) & gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index;
      }
      v92 = *(_QWORD **)(*v67 + 8 * v91);
      if (!v92)
        goto LABEL_186;
      v93 = (_QWORD *)*v92;
      if (!v93)
        goto LABEL_186;
      if (v90.u32[0] < 2uLL)
      {
        v94 = v88 - 1;
        while (1)
        {
          v96 = v93[1];
          if (gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index == v96)
          {
            if (v93[2] == gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index)
              goto LABEL_136;
          }
          else if ((v96 & v94) != v91)
          {
            goto LABEL_186;
          }
          v93 = (_QWORD *)*v93;
          if (!v93)
            goto LABEL_186;
        }
      }
      while (1)
      {
        v95 = v93[1];
        if (gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index == v95)
          break;
        if (v95 >= v88)
          v95 %= v88;
        if (v95 != v91)
          goto LABEL_186;
LABEL_125:
        v93 = (_QWORD *)*v93;
        if (!v93)
          goto LABEL_186;
      }
      if (v93[2] != gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index)
        goto LABEL_125;
LABEL_136:
      if ((v97 & 1) == 0)
      {
        if ((_DWORD)v162)
        {
          md::typeToIntMap(v162);
          HasStyleAttributeRaster = v163;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_222;
      v98 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v98.i16[0] = vaddlv_u8(v98);
      if (v98.u32[0] > 1uLL)
      {
        v99 = v89;
        if (v89 >= qword_1EE5779D0)
          v99 = v89 % qword_1EE5779D0;
      }
      else
      {
        v99 = (qword_1EE5779D0 - 1) & v89;
      }
      v100 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v99);
      if (!v100 || (v101 = *v100) == 0)
LABEL_222:
        abort();
      if (v98.u32[0] < 2uLL)
      {
        while (1)
        {
          v103 = v101[1];
          if ((uint64_t *)v89 == v103)
          {
            if (v101[2] == (uint64_t *)v89)
              goto LABEL_158;
          }
          else if (((unint64_t)v103 & (qword_1EE5779D0 - 1)) != v99)
          {
            goto LABEL_222;
          }
          v101 = (uint64_t **)*v101;
          if (!v101)
            goto LABEL_222;
        }
      }
      while (2)
      {
        v102 = (unint64_t)v101[1];
        if (v89 != v102)
        {
          if (v102 >= qword_1EE5779D0)
            v102 %= (unint64_t)qword_1EE5779D0;
          if (v102 != v99)
            goto LABEL_222;
LABEL_148:
          v101 = (uint64_t **)*v101;
          if (!v101)
            goto LABEL_222;
          continue;
        }
        break;
      }
      if (v101[2] != (uint64_t *)v89)
        goto LABEL_148;
LABEL_158:
      v105 = *((int *)v101 + 6);
      v104 = *((int *)v101 + 7);
      if ((_DWORD)v105 != -1)
      {
        v106 = *(_QWORD *)(v74 + 16);
        if (v106)
        {
          v107 = *(_QWORD *)(*(_QWORD *)(v106 + 48) + 72);
          v108 = *(_QWORD *)(v107 + 8);
          v109 = *(_QWORD *)(v108 + 72);
          if (v109)
          {
            v110 = 0;
            v111 = *(_QWORD *)(v108 + 64);
            v112 = (unsigned __int8 *)(v111 + 1);
            while (1)
            {
              v113 = *v112;
              v112 += 2;
              if (v113 == v105)
                break;
              if (v109 == ++v110)
                goto LABEL_164;
            }
            v120 = (unsigned __int8 *)(v111 + 2 * v110);
LABEL_171:
            *(int8x8_t *)(*(_QWORD *)(v74 + 96) + 8 * *v120) = v49;
          }
          else
          {
LABEL_164:
            v114 = *(_QWORD *)(v107 + 24);
            v115 = *(_QWORD *)(v114 + 72);
            if (v115)
            {
              v116 = 0;
              v117 = *(_QWORD *)(v114 + 64);
              v118 = (unsigned __int8 *)(v117 + 1);
              while (1)
              {
                v119 = *v118;
                v118 += 2;
                if (v119 == v105)
                  break;
                if (v115 == ++v116)
                  goto LABEL_172;
              }
              v120 = (unsigned __int8 *)(v117 + 2 * v116);
              goto LABEL_171;
            }
          }
        }
      }
LABEL_172:
      if ((_DWORD)v104 != -1)
      {
        v121 = *(_QWORD *)(v74 + 16);
        if (v121)
        {
          v122 = *(_QWORD *)(*(_QWORD *)(v121 + 48) + 72);
          v123 = *(_QWORD *)(v122 + 8);
          v124 = *(_QWORD *)(v123 + 72);
          if (v124)
          {
            v125 = 0;
            v126 = *(_QWORD *)(v123 + 64);
            v127 = (unsigned __int8 *)(v126 + 1);
            while (1)
            {
              v128 = *v127;
              v127 += 2;
              if (v128 == v104)
                break;
              if (v124 == ++v125)
                goto LABEL_178;
            }
            v135 = (unsigned __int8 *)(v126 + 2 * v125);
LABEL_185:
            *(int8x8_t *)(*(_QWORD *)(v74 + 96) + 8 * *v135) = v49;
          }
          else
          {
LABEL_178:
            v129 = *(_QWORD *)(v122 + 24);
            v130 = *(_QWORD *)(v129 + 72);
            if (v130)
            {
              v131 = 0;
              v132 = *(_QWORD *)(v129 + 64);
              v133 = (unsigned __int8 *)(v132 + 1);
              while (1)
              {
                v134 = *v133;
                v133 += 2;
                if (v134 == v104)
                  break;
                if (v130 == ++v131)
                  goto LABEL_186;
              }
              v135 = (unsigned __int8 *)(v132 + 2 * v131);
              goto LABEL_185;
            }
          }
        }
      }
LABEL_186:
      v10 = (_QWORD *)v167[4];
      v136 = v171 + 1;
      v171 = v136;
      if (v136 == v10)
      {
        result = v164;
        v2 = v165;
      }
      else
      {
        v137 = v168[4];
        result = v164;
        v2 = v165;
        do
        {
          v138 = *((unsigned int *)v136 + 1);
          v139 = v138 >> 7;
          if (v138 >> 7 < (v168[5] - v137) >> 3)
          {
            v140 = *(_QWORD *)(v137 + 8 * v139);
            if (v140)
            {
              v141 = v138 & 0x7F;
              v142 = *(unsigned __int16 *)(v140 + 2 * v141);
              v143 = v168[7];
              v144 = v168[8];
              if (v142 < (v144 - v143) >> 3)
              {
                v145 = v143 + 8 * v142;
                if (v145 != v144 && *(_DWORD *)(v145 + 4) == (_DWORD)v138)
                {
                  v147 = v169[4];
                  if (v139 < (v169[5] - v147) >> 3)
                  {
                    v148 = *(_QWORD *)(v147 + 8 * v139);
                    if (v148)
                    {
                      v149 = *(unsigned __int16 *)(v148 + 2 * v141);
                      v150 = v169[7];
                      v151 = v169[8];
                      if (v149 < (v151 - v150) >> 3)
                      {
                        v152 = v150 + 8 * v149;
                        if (v152 != v151 && *(_DWORD *)(v152 + 4) == (_DWORD)v138)
                        {
                          v154 = v170[4];
                          if (v139 < (v170[5] - v154) >> 3)
                          {
                            v155 = *(_QWORD *)(v154 + 8 * v139);
                            if (v155)
                            {
                              v156 = *(unsigned __int16 *)(v155 + 2 * v141);
                              v158 = v170[7];
                              v157 = v170[8];
                              if (v156 < (v157 - v158) >> 3)
                              {
                                v159 = v158 + 8 * v156;
                                if (*(_DWORD *)(v159 + 4) == (_DWORD)v138 && v159 != v157)
                                {
                                  v10 = v136;
                                  goto LABEL_214;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v136;
        }
        while (v136 != v10);
        v136 = v10;
LABEL_214:
        v171 = v136;
      }
      if (v166 == v10)
        goto LABEL_221;
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_221:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6A79D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19F6A79F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x985FB09D9DF9959FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x985FB09D9DF9959FLL;
      if (*(_QWORD *)&v3 <= 0x985FB09D9DF9959FLL)
        v5 = 0x985FB09D9DF9959FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x985FB09D9DF9959FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x985FB09D9DF9959FLL)
            {
              if (v7[2] == 0x985FB09D9DF9959FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x985FB09D9DF9959FLL)
          {
            if (v7[2] == 0x985FB09D9DF9959FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::HasStyleAttributeRasterSet]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42730F8;
  *(_QWORD *)(v11 + 8) = 0x985FB09D9DF9959FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x985FB09D9DF9959FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x985FB09D9DF9959FLL;
  v15[1] = "md::ls::HasStyleAttributeRasterSet]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0x985FB09D9DF9959FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A7C0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9FD60998017D8C7FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9FD60998017D8C7FLL;
      if (*(_QWORD *)&v3 <= 0x9FD60998017D8C7FLL)
        v5 = 0x9FD60998017D8C7FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9FD60998017D8C7FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9FD60998017D8C7FLL)
            {
              if (v7[2] == 0x9FD60998017D8C7FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9FD60998017D8C7FLL)
          {
            if (v7[2] == 0x9FD60998017D8C7FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>]";
  *(_QWORD *)(v11 + 24) = 60;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272DC8;
  *(_QWORD *)(v11 + 8) = 0x9FD60998017D8C7FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9FD60998017D8C7FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9FD60998017D8C7FLL;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>]";
  v15[2] = 60;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9FD60998017D8C7FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A7E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::HasStyleAttributeRasterSet>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasStyleAttributeRasterSet>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasStyleAttributeRasterSet>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasStyleAttributeRasterSet>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42854F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42854F8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6A81BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285540;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285540;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x985FB09D9DF9959FLL;
  v2[1] = "md::ls::HasStyleAttributeRasterSet]";
  *(_QWORD *)&result = 34;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4010;
  v2[4] = "md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>]";
  v2[5] = 56;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277320;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277320;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *HasStyleAttributeRaster;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t *v48;
  int8x8_t v49;
  VKDebugSettings *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  _QWORD *v73;
  uint64_t v74;
  int8x8_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  int8x8_t v79;
  uint8x8_t v80;
  uint64_t v81;
  int8x8_t **v82;
  int8x8_t *v83;
  uint64_t v84;
  int8x8_t v85;
  int8x8_t v86;
  unsigned __int8 v87;
  unint64_t v88;
  unint64_t v89;
  uint8x8_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint8x8_t v98;
  unint64_t v99;
  uint64_t ***v100;
  uint64_t **v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  int v119;
  unsigned __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  int v134;
  unsigned __int8 *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v161;
  md *v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  char v172[2];
  char v173;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  HasStyleAttributeRaster = (_QWORD *)gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(v3);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>(v3);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v7 = (_QWORD *)v6;
  v8 = HasStyleAttributeRaster + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < HasStyleAttributeRaster[8] - HasStyleAttributeRaster[7])
    v8 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v6 + 32);
  v167 = v8;
  v168 = HasStyleAttributeRaster;
  v169 = (_QWORD *)v5;
  v170 = (_QWORD *)v6;
  v10 = (_QWORD *)v8[3];
  v9 = (_QWORD *)v8[4];
  v171 = v10;
  v166 = v9;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v167))
  {
    v11 = v10 + 1;
    do
    {
      v10 = v11;
      v171 = v11;
      if (v11 == v166)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v167);
      v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v166 != v10)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v164 = result;
    v165 = v2;
    v163 = HasStyleAttributeRaster;
    while (1)
    {
      *result = *v10;
      v14 = *v10;
      v15 = HIDWORD(*v10);
      v16 = *v10 >> 39;
      v17 = HasStyleAttributeRaster[4];
      if (v16 < (HasStyleAttributeRaster[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = HasStyleAttributeRaster[7],
            v20 = HasStyleAttributeRaster[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = HasStyleAttributeRaster[10] + 8 * v19;
      }
      else
      {
        v24 = HasStyleAttributeRaster[11];
      }
      v25 = v7[4];
      if (v16 < (v7[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v7[7],
            v28 = v7[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v7[11];
        v33 = v7[10] + 8 * v27;
      }
      else
      {
        v32 = v7[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = ***(uint64_t ****)(v2 + 8);
      if (v35 != *(uint64_t **)(**(_QWORD **)(v2 + 8) + 8) && *v35 != 0xC94DD89A7B09BE9CLL)
      {
        v36 = v35 + 5;
        do
        {
          v37 = *v36;
          v36 += 5;
        }
        while (v37 != 0xC94DD89A7B09BE9CLL);
        v35 = v36 - 5;
      }
      v38 = v35[3];
      v39 = (std::__shared_weak_count *)v35[4];
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(p_shared_owners);
        while (__stxr(v41 + 1, p_shared_owners));
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
      v44 = *(_QWORD *)(v43 + 2680);
      if (!v44)
        goto LABEL_55;
      v45 = v43 + 2680;
      do
      {
        v46 = *(_DWORD *)(v44 + 32);
        v47 = v46 >= 0x9A;
        if (v46 >= 0x9A)
          v48 = (uint64_t *)v44;
        else
          v48 = (uint64_t *)(v44 + 8);
        if (v47)
          v45 = v44;
        v44 = *v48;
      }
      while (*v48);
      if (v45 != v43 + 2680 && *(_DWORD *)(v45 + 32) <= 0x9Au)
        v49 = *(int8x8_t *)(v45 + 40);
      else
LABEL_55:
        v49 = 0;
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v50 = (VKDebugSettings *)objc_claimAutoreleasedReturnValue();
      md::TerrainDebugOptions::TerrainDebugOptions((md::TerrainDebugOptions *)v172, v50);

      v51 = **(_QWORD **)(v2 + 8);
      v52 = *(_QWORD **)v51;
      v53 = *(_QWORD **)(v51 + 8);
      if (v52 != v53)
      {
        while (*v52 != 0x41D4E9297E100630)
        {
          v52 += 5;
          if (v52 == v53)
            goto LABEL_67;
        }
      }
      if (v52 == v53)
      {
LABEL_67:
        v54 = 0;
      }
      else
      {
        v54 = (_QWORD *)v52[3];
        v55 = (std::__shared_weak_count *)v52[4];
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
          do
            v58 = __ldaxr(v56);
          while (__stlxr(v58 - 1, v56));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
      }
      v59 = (uint64_t)(v54 + 37);
      v60 = *v34;
      v61 = *v34;
      v62 = v54[50];
      v63 = (v54[51] - v62) >> 3;
      if (v61 < v63
        && (v64 = *(_QWORD *)(v62 + 8 * v61)) != 0
        && HIDWORD(v60) == HIDWORD(v64)
        && ((v65 = v54[53], v65 + 16 * v64 != v54[54]) ? (v66 = v65 == 0) : (v66 = 1), !v66))
      {
        v75 = v49;
        v76 = *(_QWORD *)(v62 + 8 * v61);
        v77 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v54 + 37), v60, v34);
        ++v77[3];
        v78 = v65 + 16 * v76;
        v49 = v75;
        HasStyleAttributeRaster = v163;
        v67 = *(_QWORD **)(v78 + 8);
        v60 = *v34;
        v62 = v54[50];
        v61 = *v34;
        if (v61 >= (v54[51] - v62) >> 3)
          goto LABEL_89;
      }
      else
      {
        v67 = 0;
        if (v61 >= v63)
          goto LABEL_89;
      }
      v68 = *(_QWORD *)(v62 + 8 * v61);
      if (v68 && HIDWORD(v60) == HIDWORD(v68))
      {
        v69 = v54[53];
        v70 = (uint64_t *)v54[54];
        v71 = (uint64_t *)(v69 + 16 * v68);
        if (v71 != v70 && v69 != 0)
        {
          v73 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v59, v60, v34);
          ++v73[3];
          v74 = *v71;
          if (v173)
            goto LABEL_90;
          goto LABEL_114;
        }
      }
LABEL_89:
      v74 = 0;
      if (v173)
      {
LABEL_90:
        v79 = *(int8x8_t *)(*(_QWORD *)v24 + 8);
        if (v79)
        {
          v80 = (uint8x8_t)vcnt_s8(v79);
          v80.i16[0] = vaddlv_u8(v80);
          if (v80.u32[0] > 1uLL)
          {
            if (*(_QWORD *)&v79 <= 0x9AuLL)
              v81 = 0x9AuLL % *(_QWORD *)&v79;
            else
              v81 = 154;
          }
          else
          {
            v81 = (v79.i32[0] - 1) & 0x9ALL;
          }
          v82 = *(int8x8_t ***)(**(_QWORD **)v24 + 8 * v81);
          if (v82)
          {
            v83 = *v82;
            if (v83)
            {
              if (v80.u32[0] < 2uLL)
              {
                v84 = *(_QWORD *)&v79 - 1;
                while (1)
                {
                  v86 = v83[1];
                  if (*(_QWORD *)&v86 == 154)
                  {
                    if (v83[2].i32[0] == 154)
                      goto LABEL_140;
                  }
                  else if ((*(_QWORD *)&v86 & v84) != v81)
                  {
                    goto LABEL_111;
                  }
                  v83 = (int8x8_t *)*v83;
                  if (!v83)
                    goto LABEL_111;
                }
              }
              do
              {
                v85 = v83[1];
                if (*(_QWORD *)&v85 == 154)
                {
                  if (v83[2].i32[0] == 154)
                  {
LABEL_140:
                    v79 = v83[3];
                    goto LABEL_112;
                  }
                }
                else
                {
                  if (*(_QWORD *)&v85 >= *(_QWORD *)&v79)
                    *(_QWORD *)&v85 %= *(_QWORD *)&v79;
                  if (*(_QWORD *)&v85 != v81)
                    break;
                }
                v83 = (int8x8_t *)*v83;
              }
              while (v83);
            }
          }
LABEL_111:
          v79 = 0;
        }
LABEL_112:
        if (v79)
          v49 = v79;
      }
LABEL_114:
      if ((v87 & 1) == 0
      {
        do
          v161 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v161 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<DaVinci::AridityTexture>(void)::index = v161;
        HasStyleAttributeRaster = v163;
      }
      v88 = v67[1];
      if (!v88)
        goto LABEL_186;
      v89 = gdc::typeIndex<DaVinci::AridityTexture>(void)::index;
      v90 = (uint8x8_t)vcnt_s8((int8x8_t)v88);
      v90.i16[0] = vaddlv_u8(v90);
      if (v90.u32[0] > 1uLL)
      {
        v91 = gdc::typeIndex<DaVinci::AridityTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::AridityTexture>(void)::index >= v88)
          v91 = gdc::typeIndex<DaVinci::AridityTexture>(void)::index % v88;
      }
      else
      {
        v91 = (v88 - 1) & gdc::typeIndex<DaVinci::AridityTexture>(void)::index;
      }
      v92 = *(_QWORD **)(*v67 + 8 * v91);
      if (!v92)
        goto LABEL_186;
      v93 = (_QWORD *)*v92;
      if (!v93)
        goto LABEL_186;
      if (v90.u32[0] < 2uLL)
      {
        v94 = v88 - 1;
        while (1)
        {
          v96 = v93[1];
          if (gdc::typeIndex<DaVinci::AridityTexture>(void)::index == v96)
          {
            if (v93[2] == gdc::typeIndex<DaVinci::AridityTexture>(void)::index)
              goto LABEL_136;
          }
          else if ((v96 & v94) != v91)
          {
            goto LABEL_186;
          }
          v93 = (_QWORD *)*v93;
          if (!v93)
            goto LABEL_186;
        }
      }
      while (1)
      {
        v95 = v93[1];
        if (gdc::typeIndex<DaVinci::AridityTexture>(void)::index == v95)
          break;
        if (v95 >= v88)
          v95 %= v88;
        if (v95 != v91)
          goto LABEL_186;
LABEL_125:
        v93 = (_QWORD *)*v93;
        if (!v93)
          goto LABEL_186;
      }
      if (v93[2] != gdc::typeIndex<DaVinci::AridityTexture>(void)::index)
        goto LABEL_125;
LABEL_136:
      if ((v97 & 1) == 0)
      {
        if ((_DWORD)v162)
        {
          md::typeToIntMap(v162);
          HasStyleAttributeRaster = v163;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_222;
      v98 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v98.i16[0] = vaddlv_u8(v98);
      if (v98.u32[0] > 1uLL)
      {
        v99 = v89;
        if (v89 >= qword_1EE5779D0)
          v99 = v89 % qword_1EE5779D0;
      }
      else
      {
        v99 = (qword_1EE5779D0 - 1) & v89;
      }
      v100 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v99);
      if (!v100 || (v101 = *v100) == 0)
LABEL_222:
        abort();
      if (v98.u32[0] < 2uLL)
      {
        while (1)
        {
          v103 = v101[1];
          if ((uint64_t *)v89 == v103)
          {
            if (v101[2] == (uint64_t *)v89)
              goto LABEL_158;
          }
          else if (((unint64_t)v103 & (qword_1EE5779D0 - 1)) != v99)
          {
            goto LABEL_222;
          }
          v101 = (uint64_t **)*v101;
          if (!v101)
            goto LABEL_222;
        }
      }
      while (2)
      {
        v102 = (unint64_t)v101[1];
        if (v89 != v102)
        {
          if (v102 >= qword_1EE5779D0)
            v102 %= (unint64_t)qword_1EE5779D0;
          if (v102 != v99)
            goto LABEL_222;
LABEL_148:
          v101 = (uint64_t **)*v101;
          if (!v101)
            goto LABEL_222;
          continue;
        }
        break;
      }
      if (v101[2] != (uint64_t *)v89)
        goto LABEL_148;
LABEL_158:
      v105 = *((int *)v101 + 6);
      v104 = *((int *)v101 + 7);
      if ((_DWORD)v105 != -1)
      {
        v106 = *(_QWORD *)(v74 + 16);
        if (v106)
        {
          v107 = *(_QWORD *)(*(_QWORD *)(v106 + 48) + 72);
          v108 = *(_QWORD *)(v107 + 8);
          v109 = *(_QWORD *)(v108 + 72);
          if (v109)
          {
            v110 = 0;
            v111 = *(_QWORD *)(v108 + 64);
            v112 = (unsigned __int8 *)(v111 + 1);
            while (1)
            {
              v113 = *v112;
              v112 += 2;
              if (v113 == v105)
                break;
              if (v109 == ++v110)
                goto LABEL_164;
            }
            v120 = (unsigned __int8 *)(v111 + 2 * v110);
LABEL_171:
            *(int8x8_t *)(*(_QWORD *)(v74 + 96) + 8 * *v120) = v49;
          }
          else
          {
LABEL_164:
            v114 = *(_QWORD *)(v107 + 24);
            v115 = *(_QWORD *)(v114 + 72);
            if (v115)
            {
              v116 = 0;
              v117 = *(_QWORD *)(v114 + 64);
              v118 = (unsigned __int8 *)(v117 + 1);
              while (1)
              {
                v119 = *v118;
                v118 += 2;
                if (v119 == v105)
                  break;
                if (v115 == ++v116)
                  goto LABEL_172;
              }
              v120 = (unsigned __int8 *)(v117 + 2 * v116);
              goto LABEL_171;
            }
          }
        }
      }
LABEL_172:
      if ((_DWORD)v104 != -1)
      {
        v121 = *(_QWORD *)(v74 + 16);
        if (v121)
        {
          v122 = *(_QWORD *)(*(_QWORD *)(v121 + 48) + 72);
          v123 = *(_QWORD *)(v122 + 8);
          v124 = *(_QWORD *)(v123 + 72);
          if (v124)
          {
            v125 = 0;
            v126 = *(_QWORD *)(v123 + 64);
            v127 = (unsigned __int8 *)(v126 + 1);
            while (1)
            {
              v128 = *v127;
              v127 += 2;
              if (v128 == v104)
                break;
              if (v124 == ++v125)
                goto LABEL_178;
            }
            v135 = (unsigned __int8 *)(v126 + 2 * v125);
LABEL_185:
            *(int8x8_t *)(*(_QWORD *)(v74 + 96) + 8 * *v135) = v49;
          }
          else
          {
LABEL_178:
            v129 = *(_QWORD *)(v122 + 24);
            v130 = *(_QWORD *)(v129 + 72);
            if (v130)
            {
              v131 = 0;
              v132 = *(_QWORD *)(v129 + 64);
              v133 = (unsigned __int8 *)(v132 + 1);
              while (1)
              {
                v134 = *v133;
                v133 += 2;
                if (v134 == v104)
                  break;
                if (v130 == ++v131)
                  goto LABEL_186;
              }
              v135 = (unsigned __int8 *)(v132 + 2 * v131);
              goto LABEL_185;
            }
          }
        }
      }
LABEL_186:
      v10 = (_QWORD *)v167[4];
      v136 = v171 + 1;
      v171 = v136;
      if (v136 == v10)
      {
        result = v164;
        v2 = v165;
      }
      else
      {
        v137 = v168[4];
        result = v164;
        v2 = v165;
        do
        {
          v138 = *((unsigned int *)v136 + 1);
          v139 = v138 >> 7;
          if (v138 >> 7 < (v168[5] - v137) >> 3)
          {
            v140 = *(_QWORD *)(v137 + 8 * v139);
            if (v140)
            {
              v141 = v138 & 0x7F;
              v142 = *(unsigned __int16 *)(v140 + 2 * v141);
              v143 = v168[7];
              v144 = v168[8];
              if (v142 < (v144 - v143) >> 3)
              {
                v145 = v143 + 8 * v142;
                if (v145 != v144 && *(_DWORD *)(v145 + 4) == (_DWORD)v138)
                {
                  v147 = v169[4];
                  if (v139 < (v169[5] - v147) >> 3)
                  {
                    v148 = *(_QWORD *)(v147 + 8 * v139);
                    if (v148)
                    {
                      v149 = *(unsigned __int16 *)(v148 + 2 * v141);
                      v150 = v169[7];
                      v151 = v169[8];
                      if (v149 < (v151 - v150) >> 3)
                      {
                        v152 = v150 + 8 * v149;
                        if (v152 != v151 && *(_DWORD *)(v152 + 4) == (_DWORD)v138)
                        {
                          v154 = v170[4];
                          if (v139 < (v170[5] - v154) >> 3)
                          {
                            v155 = *(_QWORD *)(v154 + 8 * v139);
                            if (v155)
                            {
                              v156 = *(unsigned __int16 *)(v155 + 2 * v141);
                              v158 = v170[7];
                              v157 = v170[8];
                              if (v156 < (v157 - v158) >> 3)
                              {
                                v159 = v158 + 8 * v156;
                                if (*(_DWORD *)(v159 + 4) == (_DWORD)v138 && v159 != v157)
                                {
                                  v10 = v136;
                                  goto LABEL_214;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v136;
        }
        while (v136 != v10);
        v136 = v10;
LABEL_214:
        v171 = v136;
      }
      if (v166 == v10)
        goto LABEL_221;
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_221:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6A8D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19F6A8D58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x563FF6883E9740F7;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x563FF6883E9740F7;
      if (*(_QWORD *)&v3 <= 0x563FF6883E9740F7uLL)
        v5 = 0x563FF6883E9740F7uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x563FF6883E9740F7;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x563FF6883E9740F7)
            {
              if (v7[2] == 0x563FF6883E9740F7)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x563FF6883E9740F7)
          {
            if (v7[2] == 0x563FF6883E9740F7)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>]";
  *(_QWORD *)(v11 + 24) = 56;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272C18;
  *(_QWORD *)(v11 + 8) = 0x563FF6883E9740F7;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x563FF6883E9740F7uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x563FF6883E9740F7;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>]";
  v15[2] = 56;
  gdc::Registry::_registerStorageDataSignals(a1, 0x563FF6883E9740F7, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A8F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284C88;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284C88;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6A9188(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284CD0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284CD0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xD5B48B62BD07EF80;
  v2[1] = "md::ls::HasMaterialRasterRenderItem]";
  *(_QWORD *)&result = 35;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4020;
  v2[4] = "md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>]";
  v2[5] = 54;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276EE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276EE8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *HasMaterialRasterRender;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  unint64_t v66;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned __int8 v75;
  uint8x8_t v76;
  unint64_t v77;
  uint64_t ***v78;
  uint64_t **v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  int v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  int v112;
  unsigned __int8 *v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v139;
  md *v140;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  HasMaterialRasterRender = (_QWORD *)gdc::Registry::storage<md::ls::HasMaterialRasterRenderItem>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = HasMaterialRasterRender + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < HasMaterialRasterRender[8] - HasMaterialRasterRender[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v143 = v7;
  v144 = HasMaterialRasterRender;
  v145 = (_QWORD *)v4;
  v146 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v147 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v143))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v147 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v143);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 == v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_176;
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v142 = result;
  do
  {
LABEL_15:
    *result = *v8;
    v14 = *v8;
    v15 = HIDWORD(*v8);
    v16 = *v8 >> 39;
    v17 = HasMaterialRasterRender[4];
    if (v16 < (HasMaterialRasterRender[5] - v17) >> 3
      && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
      && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
          v21 = HasMaterialRasterRender[7],
          v20 = HasMaterialRasterRender[8],
          v19 < (v20 - v21) >> 3)
      && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
    {
      v24 = HasMaterialRasterRender[10] + 8 * v19;
    }
    else
    {
      v24 = HasMaterialRasterRender[11];
    }
    v25 = v6[4];
    if (v16 < (v6[5] - v25) >> 3
      && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
      && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)), v29 = v6[7], v28 = v6[8], v27 < (v28 - v29) >> 3)
      && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
    {
      v32 = v6[11];
      v33 = v6[10] + 8 * v27;
    }
    else
    {
      v32 = v6[11];
      v33 = v32;
    }
    if (v33 == v32)
      v34 = 0;
    else
      v34 = (unint64_t *)v33;
    v35 = **(_QWORD **)(v10 + 8);
    v36 = *(_QWORD **)v35;
    v37 = *(_QWORD **)(v35 + 8);
    if (v36 != v37)
    {
      while (*v36 != 0x41D4E9297E100630)
      {
        v36 += 5;
        if (v36 == v37)
          goto LABEL_45;
      }
    }
    if (v36 == v37)
    {
LABEL_45:
      v38 = 0;
    }
    else
    {
      v38 = (_QWORD *)v36[3];
      v39 = (std::__shared_weak_count *)v36[4];
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(p_shared_owners);
        while (__stxr(v41 + 1, p_shared_owners));
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
    v43 = (uint64_t)(v38 + 37);
    v44 = *v34;
    v45 = *v34;
    v46 = v38[50];
    v47 = (v38[51] - v46) >> 3;
    if (v45 < v47
      && (v48 = *(_QWORD *)(v46 + 8 * v45)) != 0
      && HIDWORD(v44) == HIDWORD(v48)
      && ((v49 = v38[53], v49 + 16 * v48 != v38[54]) ? (v50 = v49 == 0) : (v50 = 1), !v50))
    {
      v59 = *(_QWORD *)(v46 + 8 * v45);
      v60 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v44, v34);
      ++v60[3];
      v61 = v49 + 16 * v59;
      v10 = a1;
      v51 = *(_QWORD **)(v61 + 8);
      v44 = *v34;
      v46 = v38[50];
      v45 = *v34;
      if (v45 >= (v38[51] - v46) >> 3)
        goto LABEL_65;
    }
    else
    {
      v51 = 0;
      if (v45 >= v47)
        goto LABEL_65;
    }
    v52 = *(_QWORD *)(v46 + 8 * v45);
    if (v52 && HIDWORD(v44) == HIDWORD(v52))
    {
      v53 = v38[53];
      v54 = (uint64_t *)v38[54];
      v55 = (uint64_t *)(v53 + 16 * v52);
      if (v55 != v54 && v53 != 0)
      {
        v57 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v43, v44, v34);
        ++v57[3];
        v58 = *v55;
        goto LABEL_66;
      }
    }
LABEL_65:
    v58 = 0;
LABEL_66:
    v62 = *(_QWORD *)v24;
    if (*(_BYTE *)(*(_QWORD *)v24 + 122))
    {
      v63 = *(_QWORD *)(v62 + 32);
      md::StyleTexture<md::LowZoomClimateStyle>::_processStylePixelsIfNecessary(v63);
    }
    else
    {
      v63 = *(_QWORD *)(v62 + 16);
      md::StyleTexture<md::LowZoomStyle>::_processStylePixelsIfNecessary(v63);
    }
    v64 = *(_QWORD *)(v63 + 24);
    if ((v65 & 1) == 0
    {
      do
        v139 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v139 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::StyleTexture>(void)::index = v139;
      v10 = a1;
    }
    v66 = v51[1];
    if (!v66)
      goto LABEL_140;
    v67 = gdc::typeIndex<DaVinci::StyleTexture>(void)::index;
    v68 = (uint8x8_t)vcnt_s8((int8x8_t)v66);
    v68.i16[0] = vaddlv_u8(v68);
    if (v68.u32[0] > 1uLL)
    {
      v69 = gdc::typeIndex<DaVinci::StyleTexture>(void)::index;
      if (gdc::typeIndex<DaVinci::StyleTexture>(void)::index >= v66)
        v69 = gdc::typeIndex<DaVinci::StyleTexture>(void)::index % v66;
    }
    else
    {
      v69 = (v66 - 1) & gdc::typeIndex<DaVinci::StyleTexture>(void)::index;
    }
    v70 = *(_QWORD **)(*v51 + 8 * v69);
    if (!v70)
      goto LABEL_140;
    v71 = (_QWORD *)*v70;
    if (!v71)
      goto LABEL_140;
    if (v68.u32[0] < 2uLL)
    {
      v72 = v66 - 1;
      while (1)
      {
        v74 = v71[1];
        if (gdc::typeIndex<DaVinci::StyleTexture>(void)::index == v74)
        {
          if (v71[2] == gdc::typeIndex<DaVinci::StyleTexture>(void)::index)
            goto LABEL_91;
        }
        else if ((v74 & v72) != v69)
        {
          goto LABEL_140;
        }
        v71 = (_QWORD *)*v71;
        if (!v71)
          goto LABEL_140;
      }
    }
    while (1)
    {
      v73 = v71[1];
      if (gdc::typeIndex<DaVinci::StyleTexture>(void)::index == v73)
        break;
      if (v73 >= v66)
        v73 %= v66;
      if (v73 != v69)
        goto LABEL_140;
LABEL_80:
      v71 = (_QWORD *)*v71;
      if (!v71)
        goto LABEL_140;
    }
    if (v71[2] != gdc::typeIndex<DaVinci::StyleTexture>(void)::index)
      goto LABEL_80;
LABEL_91:
    if ((v75 & 1) == 0)
    {
      if ((_DWORD)v140)
      {
        md::typeToIntMap(v140);
        v10 = a1;
      }
    }
    if (!qword_1EE5779D0)
      goto LABEL_177;
    v76 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
    v76.i16[0] = vaddlv_u8(v76);
    if (v76.u32[0] > 1uLL)
    {
      v77 = v67;
      if (v67 >= qword_1EE5779D0)
        v77 = v67 % qword_1EE5779D0;
    }
    else
    {
      v77 = (qword_1EE5779D0 - 1) & v67;
    }
    v78 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v77);
    if (!v78 || (v79 = *v78) == 0)
LABEL_177:
      abort();
    if (v76.u32[0] < 2uLL)
    {
      while (1)
      {
        v81 = v79[1];
        if ((uint64_t *)v67 == v81)
        {
          if (v79[2] == (uint64_t *)v67)
            goto LABEL_112;
        }
        else if (((unint64_t)v81 & (qword_1EE5779D0 - 1)) != v77)
        {
          goto LABEL_177;
        }
        v79 = (uint64_t **)*v79;
        if (!v79)
          goto LABEL_177;
      }
    }
    while (2)
    {
      v80 = (unint64_t)v79[1];
      if (v67 != v80)
      {
        if (v80 >= qword_1EE5779D0)
          v80 %= (unint64_t)qword_1EE5779D0;
        if (v80 != v77)
          goto LABEL_177;
LABEL_102:
        v79 = (uint64_t **)*v79;
        if (!v79)
          goto LABEL_177;
        continue;
      }
      break;
    }
    if (v79[2] != (uint64_t *)v67)
      goto LABEL_102;
LABEL_112:
    v83 = *((int *)v79 + 6);
    v82 = *((int *)v79 + 7);
    if ((_DWORD)v83 != -1)
    {
      v84 = *(_QWORD *)(v58 + 16);
      if (v84)
      {
        v85 = *(_QWORD *)(*(_QWORD *)(v84 + 48) + 72);
        v86 = *(_QWORD *)(v85 + 8);
        v87 = *(_QWORD *)(v86 + 72);
        if (v87)
        {
          v88 = 0;
          v89 = *(_QWORD *)(v86 + 64);
          v90 = (unsigned __int8 *)(v89 + 1);
          while (1)
          {
            v91 = *v90;
            v90 += 2;
            if (v91 == v83)
              break;
            if (v87 == ++v88)
              goto LABEL_118;
          }
          v98 = (unsigned __int8 *)(v89 + 2 * v88);
LABEL_125:
          *(_QWORD *)(*(_QWORD *)(v58 + 96) + 8 * *v98) = v64;
        }
        else
        {
LABEL_118:
          v92 = *(_QWORD *)(v85 + 24);
          v93 = *(_QWORD *)(v92 + 72);
          if (v93)
          {
            v94 = 0;
            v95 = *(_QWORD *)(v92 + 64);
            v96 = (unsigned __int8 *)(v95 + 1);
            while (1)
            {
              v97 = *v96;
              v96 += 2;
              if (v97 == v83)
                break;
              if (v93 == ++v94)
                goto LABEL_126;
            }
            v98 = (unsigned __int8 *)(v95 + 2 * v94);
            goto LABEL_125;
          }
        }
      }
    }
LABEL_126:
    if ((_DWORD)v82 != -1)
    {
      v99 = *(_QWORD *)(v58 + 16);
      if (v99)
      {
        v100 = *(_QWORD *)(*(_QWORD *)(v99 + 48) + 72);
        v101 = *(_QWORD *)(v100 + 8);
        v102 = *(_QWORD *)(v101 + 72);
        if (v102)
        {
          v103 = 0;
          v104 = *(_QWORD *)(v101 + 64);
          v105 = (unsigned __int8 *)(v104 + 1);
          while (1)
          {
            v106 = *v105;
            v105 += 2;
            if (v106 == v82)
              break;
            if (v102 == ++v103)
              goto LABEL_132;
          }
          v113 = (unsigned __int8 *)(v104 + 2 * v103);
LABEL_139:
          *(_QWORD *)(*(_QWORD *)(v58 + 96) + 8 * *v113) = v64;
        }
        else
        {
LABEL_132:
          v107 = *(_QWORD *)(v100 + 24);
          v108 = *(_QWORD *)(v107 + 72);
          if (v108)
          {
            v109 = 0;
            v110 = *(_QWORD *)(v107 + 64);
            v111 = (unsigned __int8 *)(v110 + 1);
            while (1)
            {
              v112 = *v111;
              v111 += 2;
              if (v112 == v82)
                break;
              if (v108 == ++v109)
                goto LABEL_140;
            }
            v113 = (unsigned __int8 *)(v110 + 2 * v109);
            goto LABEL_139;
          }
        }
      }
    }
LABEL_140:
    v8 = (_QWORD *)v143[4];
    v114 = v147 + 1;
    v147 = v114;
    if (v114 == v8)
    {
      result = v142;
      if (v9 == v8)
        break;
      goto LABEL_15;
    }
    v115 = v144[4];
    result = v142;
    do
    {
      v116 = *((unsigned int *)v114 + 1);
      v117 = v116 >> 7;
      if (v116 >> 7 < (v144[5] - v115) >> 3)
      {
        v118 = *(_QWORD *)(v115 + 8 * v117);
        if (v118)
        {
          v119 = v116 & 0x7F;
          v120 = *(unsigned __int16 *)(v118 + 2 * v119);
          v121 = v144[7];
          v122 = v144[8];
          if (v120 < (v122 - v121) >> 3)
          {
            v123 = v121 + 8 * v120;
            if (v123 != v122 && *(_DWORD *)(v123 + 4) == (_DWORD)v116)
            {
              v125 = v145[4];
              if (v117 < (v145[5] - v125) >> 3)
              {
                v126 = *(_QWORD *)(v125 + 8 * v117);
                if (v126)
                {
                  v127 = *(unsigned __int16 *)(v126 + 2 * v119);
                  v128 = v145[7];
                  v129 = v145[8];
                  if (v127 < (v129 - v128) >> 3)
                  {
                    v130 = v128 + 8 * v127;
                    if (v130 != v129 && *(_DWORD *)(v130 + 4) == (_DWORD)v116)
                    {
                      v132 = v146[4];
                      if (v117 < (v146[5] - v132) >> 3)
                      {
                        v133 = *(_QWORD *)(v132 + 8 * v117);
                        if (v133)
                        {
                          v134 = *(unsigned __int16 *)(v133 + 2 * v119);
                          v136 = v146[7];
                          v135 = v146[8];
                          if (v134 < (v135 - v136) >> 3)
                          {
                            v137 = v136 + 8 * v134;
                            if (*(_DWORD *)(v137 + 4) == (_DWORD)v116 && v137 != v135)
                            {
                              v8 = v114;
                              goto LABEL_168;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v114;
    }
    while (v114 != v8);
    v114 = v8;
LABEL_168:
    v147 = v114;
  }
  while (v9 != v8);
LABEL_176:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6A9B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::HasMaterialRasterRenderItem>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD5B48B62BD07EF80;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD5B48B62BD07EF80;
      if (*(_QWORD *)&v3 <= 0xD5B48B62BD07EF80)
        v5 = 0xD5B48B62BD07EF80 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD5B48B62BD07EF80;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD5B48B62BD07EF80)
            {
              if (v7[2] == 0xD5B48B62BD07EF80)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD5B48B62BD07EF80)
          {
            if (v7[2] == 0xD5B48B62BD07EF80)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::HasMaterialRasterRenderItem]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42733C8;
  *(_QWORD *)(v11 + 8) = 0xD5B48B62BD07EF80;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD5B48B62BD07EF80, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD5B48B62BD07EF80;
  v15[1] = "md::ls::HasMaterialRasterRenderItem]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD5B48B62BD07EF80, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A9D3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x57EF686AEB2B6CD0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x57EF686AEB2B6CD0;
      if (*(_QWORD *)&v3 <= 0x57EF686AEB2B6CD0uLL)
        v5 = 0x57EF686AEB2B6CD0uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x57EF686AEB2B6CD0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x57EF686AEB2B6CD0)
            {
              if (v7[2] == 0x57EF686AEB2B6CD0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x57EF686AEB2B6CD0)
          {
            if (v7[2] == 0x57EF686AEB2B6CD0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>]";
  *(_QWORD *)(v11 + 24) = 54;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272B88;
  *(_QWORD *)(v11 + 8) = 0x57EF686AEB2B6CD0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x57EF686AEB2B6CD0uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x57EF686AEB2B6CD0;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>]";
  v15[2] = 54;
  gdc::Registry::_registerStorageDataSignals(a1, 0x57EF686AEB2B6CD0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6A9F64(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::HasMaterialRasterRenderItem>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasMaterialRasterRenderItem>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasMaterialRasterRenderItem>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasMaterialRasterRenderItem>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286428;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286428;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6AA2EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286470;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286470;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xD5B48B62BD07EF80;
  v2[1] = "md::ls::HasMaterialRasterRenderItem]";
  *(_QWORD *)&result = 35;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4030;
  v2[4] = "md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>]";
  v2[5] = 59;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277AB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277AB8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *HasMaterialRasterRender;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unsigned __int8 v68;
  unint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint8x8_t v79;
  unint64_t v80;
  uint64_t ***v81;
  uint64_t **v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  int v100;
  unsigned __int8 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  int v115;
  unsigned __int8 *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v143;
  md *v144;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  HasMaterialRasterRender = (_QWORD *)gdc::Registry::storage<md::ls::HasMaterialRasterRenderItem>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = HasMaterialRasterRender + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < HasMaterialRasterRender[8] - HasMaterialRasterRender[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v147 = v7;
  v148 = HasMaterialRasterRender;
  v149 = (_QWORD *)v4;
  v150 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v151 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v147))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v151 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v147);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v146 = v13;
    while (1)
    {
      *v13 = *v8;
      v15 = *v8;
      v16 = HIDWORD(*v8);
      v17 = *v8 >> 39;
      v18 = HasMaterialRasterRender[4];
      if (v17 < (HasMaterialRasterRender[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = HasMaterialRasterRender[7],
            v21 = HasMaterialRasterRender[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = (uint64_t **)(HasMaterialRasterRender[10] + 8 * v20);
      }
      else
      {
        v25 = (uint64_t **)HasMaterialRasterRender[11];
      }
      v26 = v6[4];
      if (v17 < (v6[5] - v26) >> 3
        && (v27 = *(_QWORD *)(v26 + 8 * v17)) != 0
        && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)),
            v30 = v6[7],
            v29 = v6[8],
            v28 < (v29 - v30) >> 3)
        && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v16) : (v32 = 0), v32))
      {
        v33 = v6[11];
        v34 = v6[10] + 8 * v28;
      }
      else
      {
        v33 = v6[11];
        v34 = v33;
      }
      if (v34 == v33)
        v35 = 0;
      else
        v35 = (unint64_t *)v34;
      v36 = **(_QWORD **)(v10 + 8);
      v37 = *(_QWORD **)v36;
      v38 = *(_QWORD **)(v36 + 8);
      if (v37 != v38)
      {
        while (*v37 != 0x41D4E9297E100630)
        {
          v37 += 5;
          if (v37 == v38)
            goto LABEL_47;
        }
      }
      if (v37 == v38)
      {
LABEL_47:
        v39 = 0;
      }
      else
      {
        v39 = (_QWORD *)v37[3];
        v40 = (std::__shared_weak_count *)v37[4];
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(p_shared_owners);
          while (__stxr(v42 + 1, p_shared_owners));
          do
            v43 = __ldaxr(p_shared_owners);
          while (__stlxr(v43 - 1, p_shared_owners));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      v44 = (uint64_t)(v39 + 37);
      v45 = *v35;
      v46 = *v35;
      v47 = v39[50];
      v48 = (v39[51] - v47) >> 3;
      if (v46 < v48
        && (v49 = *(_QWORD *)(v47 + 8 * v46)) != 0
        && HIDWORD(v45) == HIDWORD(v49)
        && ((v50 = v39[53], v50 + 16 * v49 != v39[54]) ? (v51 = v50 == 0) : (v51 = 1), !v51))
      {
        v60 = *(_QWORD *)(v47 + 8 * v46);
        v61 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v39 + 37), v45, v35);
        ++v61[3];
        v62 = v50 + 16 * v60;
        v10 = a1;
        v52 = *(_QWORD **)(v62 + 8);
        v45 = *v35;
        v47 = v39[50];
        v46 = *v35;
        if (v46 >= (v39[51] - v47) >> 3)
          goto LABEL_67;
      }
      else
      {
        v52 = 0;
        if (v46 >= v48)
          goto LABEL_67;
      }
      v53 = *(_QWORD *)(v47 + 8 * v46);
      if (v53 && HIDWORD(v45) == HIDWORD(v53))
      {
        v54 = v39[53];
        v55 = (uint64_t *)v39[54];
        v56 = (uint64_t *)(v54 + 16 * v53);
        if (v56 != v55 && v54 != 0)
        {
          v58 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v44, v45, v35);
          ++v58[3];
          v59 = *v56;
          goto LABEL_68;
        }
      }
LABEL_67:
      v59 = 0;
LABEL_68:
      v63 = *v25;
      v65 = **v25;
      v64 = (std::__shared_weak_count *)v63[1];
      if (v64)
      {
        v66 = (unint64_t *)&v64->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      if ((v68 & 1) == 0
      {
        do
          v143 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v143 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index = v143;
        v10 = a1;
      }
      v69 = v52[1];
      if (!v69)
        goto LABEL_142;
      v70 = gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index;
      v71 = (uint8x8_t)vcnt_s8((int8x8_t)v69);
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        v72 = gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index >= v69)
          v72 = gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index % v69;
      }
      else
      {
        v72 = (v69 - 1) & gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index;
      }
      v73 = *(_QWORD **)(*v52 + 8 * v72);
      if (!v73)
        goto LABEL_142;
      v74 = (_QWORD *)*v73;
      if (!v74)
        goto LABEL_142;
      if (v71.u32[0] < 2uLL)
      {
        v75 = v69 - 1;
        while (1)
        {
          v77 = v74[1];
          if (gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index == v77)
          {
            if (v74[2] == gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index)
              goto LABEL_93;
          }
          else if ((v77 & v75) != v72)
          {
            goto LABEL_142;
          }
          v74 = (_QWORD *)*v74;
          if (!v74)
            goto LABEL_142;
        }
      }
      while (1)
      {
        v76 = v74[1];
        if (gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index == v76)
          break;
        if (v76 >= v69)
          v76 %= v69;
        if (v76 != v72)
          goto LABEL_142;
LABEL_82:
        v74 = (_QWORD *)*v74;
        if (!v74)
          goto LABEL_142;
      }
      if (v74[2] != gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index)
        goto LABEL_82;
LABEL_93:
      if ((v78 & 1) == 0)
      {
        if ((_DWORD)v144)
        {
          md::typeToIntMap(v144);
          v10 = a1;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_181;
      v79 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v79.i16[0] = vaddlv_u8(v79);
      if (v79.u32[0] > 1uLL)
      {
        v80 = v70;
        if (v70 >= qword_1EE5779D0)
          v80 = v70 % qword_1EE5779D0;
      }
      else
      {
        v80 = (qword_1EE5779D0 - 1) & v70;
      }
      v81 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v80);
      if (!v81 || (v82 = *v81) == 0)
LABEL_181:
        abort();
      if (v79.u32[0] < 2uLL)
      {
        while (1)
        {
          v84 = v82[1];
          if ((uint64_t *)v70 == v84)
          {
            if (v82[2] == (uint64_t *)v70)
              goto LABEL_114;
          }
          else if (((unint64_t)v84 & (qword_1EE5779D0 - 1)) != v80)
          {
            goto LABEL_181;
          }
          v82 = (uint64_t **)*v82;
          if (!v82)
            goto LABEL_181;
        }
      }
      while (2)
      {
        v83 = (unint64_t)v82[1];
        if (v70 != v83)
        {
          if (v83 >= qword_1EE5779D0)
            v83 %= (unint64_t)qword_1EE5779D0;
          if (v83 != v80)
            goto LABEL_181;
LABEL_104:
          v82 = (uint64_t **)*v82;
          if (!v82)
            goto LABEL_181;
          continue;
        }
        break;
      }
      if (v82[2] != (uint64_t *)v70)
        goto LABEL_104;
LABEL_114:
      v86 = *((int *)v82 + 6);
      v85 = *((int *)v82 + 7);
      if ((_DWORD)v86 != -1)
      {
        v87 = *(_QWORD *)(v59 + 16);
        if (v87)
        {
          v88 = *(_QWORD *)(*(_QWORD *)(v87 + 48) + 72);
          v89 = *(_QWORD *)(v88 + 8);
          v90 = *(_QWORD *)(v89 + 72);
          if (v90)
          {
            v91 = 0;
            v92 = *(_QWORD *)(v89 + 64);
            v93 = (unsigned __int8 *)(v92 + 1);
            while (1)
            {
              v94 = *v93;
              v93 += 2;
              if (v94 == v86)
                break;
              if (v90 == ++v91)
                goto LABEL_120;
            }
            v101 = (unsigned __int8 *)(v92 + 2 * v91);
LABEL_127:
            *(_QWORD *)(*(_QWORD *)(v59 + 96) + 8 * *v101) = v65;
          }
          else
          {
LABEL_120:
            v95 = *(_QWORD *)(v88 + 24);
            v96 = *(_QWORD *)(v95 + 72);
            if (v96)
            {
              v97 = 0;
              v98 = *(_QWORD *)(v95 + 64);
              v99 = (unsigned __int8 *)(v98 + 1);
              while (1)
              {
                v100 = *v99;
                v99 += 2;
                if (v100 == v86)
                  break;
                if (v96 == ++v97)
                  goto LABEL_128;
              }
              v101 = (unsigned __int8 *)(v98 + 2 * v97);
              goto LABEL_127;
            }
          }
        }
      }
LABEL_128:
      if ((_DWORD)v85 != -1)
      {
        v102 = *(_QWORD *)(v59 + 16);
        if (v102)
        {
          v103 = *(_QWORD *)(*(_QWORD *)(v102 + 48) + 72);
          v104 = *(_QWORD *)(v103 + 8);
          v105 = *(_QWORD *)(v104 + 72);
          if (v105)
          {
            v106 = 0;
            v107 = *(_QWORD *)(v104 + 64);
            v108 = (unsigned __int8 *)(v107 + 1);
            while (1)
            {
              v109 = *v108;
              v108 += 2;
              if (v109 == v85)
                break;
              if (v105 == ++v106)
                goto LABEL_134;
            }
            v116 = (unsigned __int8 *)(v107 + 2 * v106);
LABEL_141:
            *(_QWORD *)(*(_QWORD *)(v59 + 96) + 8 * *v116) = v65;
          }
          else
          {
LABEL_134:
            v110 = *(_QWORD *)(v103 + 24);
            v111 = *(_QWORD *)(v110 + 72);
            if (v111)
            {
              v112 = 0;
              v113 = *(_QWORD *)(v110 + 64);
              v114 = (unsigned __int8 *)(v113 + 1);
              while (1)
              {
                v115 = *v114;
                v114 += 2;
                if (v115 == v85)
                  break;
                if (v111 == ++v112)
                  goto LABEL_142;
              }
              v116 = (unsigned __int8 *)(v113 + 2 * v112);
              goto LABEL_141;
            }
          }
        }
      }
LABEL_142:
      v13 = v146;
      if (v64)
      {
        v117 = (unint64_t *)&v64->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v8 = (_QWORD *)v147[4];
      v14 = v151 + 1;
      v151 = v14;
      if (v14 != v8)
      {
        v119 = v148[4];
        while (1)
        {
          v120 = *((unsigned int *)v14 + 1);
          v121 = v120 >> 7;
          if (v120 >> 7 < (v148[5] - v119) >> 3)
          {
            v122 = *(_QWORD *)(v119 + 8 * v121);
            if (v122)
            {
              v123 = v120 & 0x7F;
              v124 = *(unsigned __int16 *)(v122 + 2 * v123);
              v126 = v148[7];
              v125 = v148[8];
              if (v124 < (v125 - v126) >> 3)
              {
                v127 = v126 + 8 * v124;
                if (v127 != v125 && *(_DWORD *)(v127 + 4) == (_DWORD)v120)
                {
                  v129 = v149[4];
                  if (v121 < (v149[5] - v129) >> 3)
                  {
                    v130 = *(_QWORD *)(v129 + 8 * v121);
                    if (v130)
                    {
                      v131 = *(unsigned __int16 *)(v130 + 2 * v123);
                      v133 = v149[7];
                      v132 = v149[8];
                      if (v131 < (v132 - v133) >> 3)
                      {
                        v134 = v133 + 8 * v131;
                        if (v134 != v132 && *(_DWORD *)(v134 + 4) == (_DWORD)v120)
                        {
                          v136 = v150[4];
                          if (v121 < (v150[5] - v136) >> 3)
                          {
                            v137 = *(_QWORD *)(v136 + 8 * v121);
                            if (v137)
                            {
                              v138 = *(unsigned __int16 *)(v137 + 2 * v123);
                              v140 = v150[7];
                              v139 = v150[8];
                              if (v138 < (v139 - v140) >> 3)
                              {
                                v141 = v140 + 8 * v138;
                                if (*(_DWORD *)(v141 + 4) == (_DWORD)v120 && v141 != v139)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v8)
          {
            v14 = v8;
            goto LABEL_15;
          }
        }
        v8 = v14;
LABEL_15:
        v151 = v14;
      }
      if (v9 == v8)
        goto LABEL_180;
    }
  }
  v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_180:
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
}

void sub_19F6AACA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC69E45AA7591636ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC69E45AA7591636ELL;
      if (*(_QWORD *)&v3 <= 0xC69E45AA7591636ELL)
        v5 = 0xC69E45AA7591636ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC69E45AA7591636ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC69E45AA7591636ELL)
            {
              if (v7[2] == 0xC69E45AA7591636ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC69E45AA7591636ELL)
          {
            if (v7[2] == 0xC69E45AA7591636ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>]";
  *(_QWORD *)(v11 + 24) = 59;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272D98;
  *(_QWORD *)(v11 + 8) = 0xC69E45AA7591636ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC69E45AA7591636ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC69E45AA7591636ELL;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>]";
  v15[2] = 59;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC69E45AA7591636ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6AAF04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285618;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285618;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6AB118(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285660;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285660;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xD2D99CA7D5B116C8;
  v2[1] = "md::ls::TextureHandleForType<DaVinci::OverlayTexture>]";
  *(_QWORD *)&result = 53;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4040;
  v2[4] = "md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>]";
  v2[5] = 56;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42773B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42773B0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned __int8 v80;
  unint64_t v81;
  unint64_t v82;
  uint8x8_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint8x8_t v91;
  unint64_t v92;
  uint64_t ***v93;
  uint64_t **v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  int v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  int v127;
  unsigned __int8 *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v154;
  md *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(v3);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>(v3);
  v6 = v3;
  v7 = (_QWORD *)v4;
  v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  v9 = (_QWORD *)v8;
  v10 = v4 + 32;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v10 = v5 + 32;
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < *(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24))
    v10 = v8 + 32;
  v160 = v10;
  v161 = (_QWORD *)v4;
  v162 = (_QWORD *)v5;
  v163 = (_QWORD *)v8;
  v12 = *(_QWORD **)(v10 + 24);
  v11 = *(_QWORD **)(v10 + 32);
  v164 = v12;
  v159 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v160))
  {
    v13 = v12 + 1;
    do
    {
      v12 = v13;
      v164 = v13;
      if (v13 == v159)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v160);
      v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v159 != v12)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v156 = v7;
    v157 = result;
    v158 = v9;
    while (1)
    {
      *result = *v12;
      v16 = *v12;
      v17 = HIDWORD(*v12);
      v18 = *v12 >> 39;
      v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
        && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            v23 = v7[7],
            v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v17) : (v25 = 0), v25))
      {
        v26 = (uint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        v26 = (uint64_t *)v7[11];
      }
      v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v18)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            v31 = v9[7],
            v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v17) : (v33 = 0), v33))
      {
        v34 = v9[11];
        v35 = v9[10] + 8 * v29;
      }
      else
      {
        v34 = v9[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = (unint64_t *)v35;
      v37 = **(_QWORD **)(v2 + 8);
      v38 = *(_QWORD **)v37;
      v39 = *(_QWORD **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39)
            goto LABEL_44;
        }
      }
      if (v38 == v39)
      {
LABEL_44:
        v40 = 0;
      }
      else
      {
        v40 = (_QWORD *)v38[3];
        v41 = (std::__shared_weak_count *)v38[4];
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      v45 = **(_QWORD **)(v2 + 8);
      v46 = *(_QWORD **)v45;
      v47 = *(_QWORD **)(v45 + 8);
      if (v46 != v47)
      {
        while (*v46 != 0x348A0B0E758C07C2)
        {
          v46 += 5;
          if (v46 == v47)
            goto LABEL_56;
        }
      }
      if (v46 == v47)
      {
LABEL_56:
        v49 = 0;
      }
      else
      {
        v49 = v46[3];
        v48 = (std::__shared_weak_count *)v46[4];
        if (v48)
        {
          v50 = (unint64_t *)&v48->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          do
            v52 = __ldaxr(v50);
          while (__stlxr(v52 - 1, v50));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
      v53 = (uint64_t)(v40 + 37);
      v54 = *v36;
      v55 = *v36;
      v56 = v40[50];
      v57 = (v40[51] - v56) >> 3;
      if (v55 < v57
        && (v58 = *(_QWORD *)(v56 + 8 * v55)) != 0
        && HIDWORD(v54) == HIDWORD(v58)
        && ((v59 = v40[53], v59 + 16 * v58 != v40[54]) ? (v60 = v59 == 0) : (v60 = 1), !v60))
      {
        v69 = v2;
        v70 = *(_QWORD *)(v56 + 8 * v55);
        v71 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v54, v36);
        ++v71[3];
        v72 = v59 + 16 * v70;
        v2 = v69;
        v7 = v156;
        v61 = *(_QWORD **)(v72 + 8);
        v54 = *v36;
        v56 = v40[50];
        v55 = *v36;
        if (v55 >= (v40[51] - v56) >> 3)
          goto LABEL_76;
      }
      else
      {
        v61 = 0;
        if (v55 >= v57)
          goto LABEL_76;
      }
      v62 = *(_QWORD *)(v56 + 8 * v55);
      if (!v62
        || HIDWORD(v54) != HIDWORD(v62)
        || ((v63 = v40[53], v64 = (uint64_t *)v40[54], v65 = (uint64_t *)(v63 + 16 * v62), v65 != v64)
          ? (v66 = v63 == 0)
          : (v66 = 1),
            v66))
      {
LABEL_76:
        v68 = 0;
        goto LABEL_77;
      }
      v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v53, v54, v36);
      ++v67[3];
      v68 = *v65;
LABEL_77:
      v73 = *v26;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v49 + 104));
      v74 = *(_QWORD *)(v49 + 600);
      if (v73 < (unint64_t)((*(_QWORD *)(v49 + 608) - v74) >> 3)
        && ((v75 = *(_QWORD *)(v74 + 8 * v73)) != 0 ? (v76 = HIDWORD(v73) == HIDWORD(v75)) : (v76 = 0),
            v76))
      {
        v78 = (uint64_t *)(*(_QWORD *)(v49 + 624) + 40 * v75);
        v77 = *(uint64_t **)(v49 + 632);
      }
      else
      {
        v77 = *(uint64_t **)(v49 + 632);
        v78 = v77;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v49 + 104));
      v79 = 0;
      if (v78 != v77 && v78)
        v79 = *v78;
      if ((v80 & 1) == 0
      {
        do
          v154 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v154 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<DaVinci::OverlayTexture>(void)::index = v154;
        v7 = v156;
      }
      v81 = v61[1];
      if (!v81)
        goto LABEL_158;
      v82 = gdc::typeIndex<DaVinci::OverlayTexture>(void)::index;
      v83 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
      v83.i16[0] = vaddlv_u8(v83);
      if (v83.u32[0] > 1uLL)
      {
        v84 = gdc::typeIndex<DaVinci::OverlayTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::OverlayTexture>(void)::index >= v81)
          v84 = gdc::typeIndex<DaVinci::OverlayTexture>(void)::index % v81;
      }
      else
      {
        v84 = (v81 - 1) & gdc::typeIndex<DaVinci::OverlayTexture>(void)::index;
      }
      v85 = *(_QWORD **)(*v61 + 8 * v84);
      if (!v85)
        goto LABEL_158;
      v86 = (_QWORD *)*v85;
      if (!v86)
        goto LABEL_158;
      if (v83.u32[0] < 2uLL)
      {
        v87 = v81 - 1;
        while (1)
        {
          v89 = v86[1];
          if (gdc::typeIndex<DaVinci::OverlayTexture>(void)::index == v89)
          {
            if (v86[2] == gdc::typeIndex<DaVinci::OverlayTexture>(void)::index)
              goto LABEL_109;
          }
          else if ((v89 & v87) != v84)
          {
            goto LABEL_158;
          }
          v86 = (_QWORD *)*v86;
          if (!v86)
            goto LABEL_158;
        }
      }
      while (1)
      {
        v88 = v86[1];
        if (gdc::typeIndex<DaVinci::OverlayTexture>(void)::index == v88)
          break;
        if (v88 >= v81)
          v88 %= v81;
        if (v88 != v84)
          goto LABEL_158;
LABEL_97:
        v86 = (_QWORD *)*v86;
        if (!v86)
          goto LABEL_158;
      }
      if (v86[2] != gdc::typeIndex<DaVinci::OverlayTexture>(void)::index)
        goto LABEL_97;
LABEL_109:
      if ((v90 & 1) == 0)
      {
        if ((_DWORD)v155)
        {
          md::typeToIntMap(v155);
          v7 = v156;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_194;
      v91 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v91.i16[0] = vaddlv_u8(v91);
      if (v91.u32[0] > 1uLL)
      {
        v92 = v82;
        if (v82 >= qword_1EE5779D0)
          v92 = v82 % qword_1EE5779D0;
      }
      else
      {
        v92 = (qword_1EE5779D0 - 1) & v82;
      }
      v93 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v92);
      if (!v93 || (v94 = *v93) == 0)
LABEL_194:
        abort();
      if (v91.u32[0] < 2uLL)
      {
        while (1)
        {
          v96 = v94[1];
          if ((uint64_t *)v82 == v96)
          {
            if (v94[2] == (uint64_t *)v82)
              goto LABEL_130;
          }
          else if (((unint64_t)v96 & (qword_1EE5779D0 - 1)) != v92)
          {
            goto LABEL_194;
          }
          v94 = (uint64_t **)*v94;
          if (!v94)
            goto LABEL_194;
        }
      }
      while (2)
      {
        v95 = (unint64_t)v94[1];
        if (v82 != v95)
        {
          if (v95 >= qword_1EE5779D0)
            v95 %= (unint64_t)qword_1EE5779D0;
          if (v95 != v92)
            goto LABEL_194;
LABEL_120:
          v94 = (uint64_t **)*v94;
          if (!v94)
            goto LABEL_194;
          continue;
        }
        break;
      }
      if (v94[2] != (uint64_t *)v82)
        goto LABEL_120;
LABEL_130:
      v98 = *((int *)v94 + 6);
      v97 = *((int *)v94 + 7);
      if ((_DWORD)v98 != -1)
      {
        v99 = *(_QWORD *)(v68 + 16);
        if (v99)
        {
          v100 = *(_QWORD *)(*(_QWORD *)(v99 + 48) + 72);
          v101 = *(_QWORD *)(v100 + 8);
          v102 = *(_QWORD *)(v101 + 72);
          if (v102)
          {
            v103 = 0;
            v104 = *(_QWORD *)(v101 + 64);
            v105 = (unsigned __int8 *)(v104 + 1);
            while (1)
            {
              v106 = *v105;
              v105 += 2;
              if (v106 == v98)
                break;
              if (v102 == ++v103)
                goto LABEL_136;
            }
            v113 = (unsigned __int8 *)(v104 + 2 * v103);
LABEL_143:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v113) = v79;
          }
          else
          {
LABEL_136:
            v107 = *(_QWORD *)(v100 + 24);
            v108 = *(_QWORD *)(v107 + 72);
            if (v108)
            {
              v109 = 0;
              v110 = *(_QWORD *)(v107 + 64);
              v111 = (unsigned __int8 *)(v110 + 1);
              while (1)
              {
                v112 = *v111;
                v111 += 2;
                if (v112 == v98)
                  break;
                if (v108 == ++v109)
                  goto LABEL_144;
              }
              v113 = (unsigned __int8 *)(v110 + 2 * v109);
              goto LABEL_143;
            }
          }
        }
      }
LABEL_144:
      if ((_DWORD)v97 != -1)
      {
        v114 = *(_QWORD *)(v68 + 16);
        if (v114)
        {
          v115 = *(_QWORD *)(*(_QWORD *)(v114 + 48) + 72);
          v116 = *(_QWORD *)(v115 + 8);
          v117 = *(_QWORD *)(v116 + 72);
          if (v117)
          {
            v118 = 0;
            v119 = *(_QWORD *)(v116 + 64);
            v120 = (unsigned __int8 *)(v119 + 1);
            while (1)
            {
              v121 = *v120;
              v120 += 2;
              if (v121 == v97)
                break;
              if (v117 == ++v118)
                goto LABEL_150;
            }
            v128 = (unsigned __int8 *)(v119 + 2 * v118);
LABEL_157:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v128) = v79;
          }
          else
          {
LABEL_150:
            v122 = *(_QWORD *)(v115 + 24);
            v123 = *(_QWORD *)(v122 + 72);
            if (v123)
            {
              v124 = 0;
              v125 = *(_QWORD *)(v122 + 64);
              v126 = (unsigned __int8 *)(v125 + 1);
              while (1)
              {
                v127 = *v126;
                v126 += 2;
                if (v127 == v97)
                  break;
                if (v123 == ++v124)
                  goto LABEL_158;
              }
              v128 = (unsigned __int8 *)(v125 + 2 * v124);
              goto LABEL_157;
            }
          }
        }
      }
LABEL_158:
      v12 = *(_QWORD **)(v160 + 32);
      v129 = v164 + 1;
      v164 = v129;
      if (v129 == v12)
      {
        result = v157;
        v9 = v158;
      }
      else
      {
        v130 = v161[4];
        result = v157;
        v9 = v158;
        do
        {
          v131 = *((unsigned int *)v129 + 1);
          v132 = v131 >> 7;
          if (v131 >> 7 < (v161[5] - v130) >> 3)
          {
            v133 = *(_QWORD *)(v130 + 8 * v132);
            if (v133)
            {
              v134 = v131 & 0x7F;
              v135 = *(unsigned __int16 *)(v133 + 2 * v134);
              v136 = v161[7];
              v137 = v161[8];
              if (v135 < (v137 - v136) >> 3)
              {
                v138 = v136 + 8 * v135;
                if (v138 != v137 && *(_DWORD *)(v138 + 4) == (_DWORD)v131)
                {
                  v140 = v162[4];
                  if (v132 < (v162[5] - v140) >> 3)
                  {
                    v141 = *(_QWORD *)(v140 + 8 * v132);
                    if (v141)
                    {
                      v142 = *(unsigned __int16 *)(v141 + 2 * v134);
                      v143 = v162[7];
                      v144 = v162[8];
                      if (v142 < (v144 - v143) >> 3)
                      {
                        v145 = v143 + 8 * v142;
                        if (v145 != v144 && *(_DWORD *)(v145 + 4) == (_DWORD)v131)
                        {
                          v147 = v163[4];
                          if (v132 < (v163[5] - v147) >> 3)
                          {
                            v148 = *(_QWORD *)(v147 + 8 * v132);
                            if (v148)
                            {
                              v149 = *(unsigned __int16 *)(v148 + 2 * v134);
                              v151 = v163[7];
                              v150 = v163[8];
                              if (v149 < (v150 - v151) >> 3)
                              {
                                v152 = v151 + 8 * v149;
                                if (*(_DWORD *)(v152 + 4) == (_DWORD)v131 && v152 != v150)
                                {
                                  v12 = v129;
                                  goto LABEL_186;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v129;
        }
        while (v129 != v12);
        v129 = v12;
LABEL_186:
        v164 = v129;
      }
      if (v159 == v12)
        goto LABEL_193;
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_193:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6ABBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD2D99CA7D5B116C8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD2D99CA7D5B116C8;
      if (*(_QWORD *)&v3 <= 0xD2D99CA7D5B116C8)
        v5 = 0xD2D99CA7D5B116C8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD2D99CA7D5B116C8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD2D99CA7D5B116C8)
            {
              if (v7[2] == 0xD2D99CA7D5B116C8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD2D99CA7D5B116C8)
          {
            if (v7[2] == 0xD2D99CA7D5B116C8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TextureHandleForType<DaVinci::OverlayTexture>]";
  *(_QWORD *)(v11 + 24) = 53;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272648;
  *(_QWORD *)(v11 + 8) = 0xD2D99CA7D5B116C8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD2D99CA7D5B116C8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD2D99CA7D5B116C8;
  v15[1] = "md::ls::TextureHandleForType<DaVinci::OverlayTexture>]";
  v15[2] = 53;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD2D99CA7D5B116C8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6ABDC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x954EA3109050D2A9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x954EA3109050D2A9;
      if (*(_QWORD *)&v3 <= 0x954EA3109050D2A9)
        v5 = 0x954EA3109050D2A9 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x954EA3109050D2A9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x954EA3109050D2A9)
            {
              if (v7[2] == 0x954EA3109050D2A9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x954EA3109050D2A9)
          {
            if (v7[2] == 0x954EA3109050D2A9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>]";
  *(_QWORD *)(v11 + 24) = 56;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272C78;
  *(_QWORD *)(v11 + 8) = 0x954EA3109050D2A9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x954EA3109050D2A9, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x954EA3109050D2A9;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>]";
  v15[2] = 56;
  gdc::Registry::_registerStorageDataSignals(a1, 0x954EA3109050D2A9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6ABFEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285978;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285978;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6AC374(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42859C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42859C0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xCE03281732FA0019;
  v2[1] = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
  *(_QWORD *)&result = 54;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4050;
  v2[4] = "md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>]";
  v2[5] = 57;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277560;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277560;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned __int8 v81;
  unint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint8x8_t v92;
  unint64_t v93;
  uint64_t ***v94;
  uint64_t **v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  int v128;
  unsigned __int8 *v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v155;
  md *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  unint64_t v166;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v3);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>(v3);
  v6 = v3;
  v7 = (_QWORD *)v4;
  v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  v9 = (_QWORD *)v8;
  v10 = v4 + 32;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v10 = v5 + 32;
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < *(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24))
    v10 = v8 + 32;
  v161 = v10;
  v162 = (_QWORD *)v4;
  v163 = (_QWORD *)v5;
  v164 = (_QWORD *)v8;
  v12 = *(_QWORD **)(v10 + 24);
  v11 = *(_QWORD **)(v10 + 32);
  v165 = v12;
  v160 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v161))
  {
    v13 = v12 + 1;
    do
    {
      v12 = v13;
      v165 = v13;
      if (v13 == v160)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v161);
      v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v160 != v12)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v157 = v7;
    v158 = result;
    v159 = v9;
    while (1)
    {
      *result = *v12;
      v16 = *v12;
      v17 = HIDWORD(*v12);
      v18 = *v12 >> 39;
      v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
        && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            v23 = v7[7],
            v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v17) : (v25 = 0), v25))
      {
        v26 = (unint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        v26 = (unint64_t *)v7[11];
      }
      v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v18)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            v31 = v9[7],
            v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v17) : (v33 = 0), v33))
      {
        v34 = v9[11];
        v35 = v9[10] + 8 * v29;
      }
      else
      {
        v34 = v9[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = (unint64_t *)v35;
      v37 = **(_QWORD **)(v2 + 8);
      v38 = *(_QWORD **)v37;
      v39 = *(_QWORD **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39)
            goto LABEL_44;
        }
      }
      if (v38 == v39)
      {
LABEL_44:
        v41 = 0;
      }
      else
      {
        v41 = (_QWORD *)v38[3];
        v40 = (std::__shared_weak_count *)v38[4];
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      v45 = **(_QWORD **)(v2 + 8);
      v46 = *(_QWORD **)v45;
      v47 = *(_QWORD **)(v45 + 8);
      if (v46 != v47)
      {
        while (*v46 != 0x348A0B0E758C07C2)
        {
          v46 += 5;
          if (v46 == v47)
            goto LABEL_56;
        }
      }
      if (v46 == v47)
      {
LABEL_56:
        v48 = 0;
      }
      else
      {
        v48 = v46[3];
        v49 = (std::__shared_weak_count *)v46[4];
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          do
            v52 = __ldaxr(v50);
          while (__stlxr(v52 - 1, v50));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      v53 = (uint64_t)(v41 + 37);
      v54 = *v36;
      v55 = *v36;
      v56 = v41[50];
      v57 = (v41[51] - v56) >> 3;
      if (v55 < v57
        && (v58 = *(_QWORD *)(v56 + 8 * v55)) != 0
        && HIDWORD(v54) == HIDWORD(v58)
        && ((v59 = v41[53], v59 + 16 * v58 != v41[54]) ? (v60 = v59 == 0) : (v60 = 1), !v60))
      {
        v69 = v2;
        v70 = *(_QWORD *)(v56 + 8 * v55);
        v71 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v41 + 37), v54, v36);
        ++v71[3];
        v72 = v59 + 16 * v70;
        v2 = v69;
        v7 = v157;
        v61 = *(_QWORD **)(v72 + 8);
        v54 = *v36;
        v56 = v41[50];
        v55 = *v36;
        if (v55 >= (v41[51] - v56) >> 3)
          goto LABEL_76;
      }
      else
      {
        v61 = 0;
        if (v55 >= v57)
          goto LABEL_76;
      }
      v62 = *(_QWORD *)(v56 + 8 * v55);
      if (!v62
        || HIDWORD(v54) != HIDWORD(v62)
        || ((v63 = v41[53], v64 = (uint64_t *)v41[54], v65 = (uint64_t *)(v63 + 16 * v62), v65 != v64)
          ? (v66 = v63 == 0)
          : (v66 = 1),
            v66))
      {
LABEL_76:
        v68 = 0;
        goto LABEL_77;
      }
      v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v53, v54, v36);
      ++v67[3];
      v68 = *v65;
LABEL_77:
      v73 = *v26;
      v166 = v73;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v48 + 104));
      v74 = *(_QWORD *)(v48 + 504);
      if (v73 < (unint64_t)((*(_QWORD *)(v48 + 512) - v74) >> 3)
        && ((v75 = *(_QWORD *)(v74 + 8 * v73)) != 0 ? (v76 = HIDWORD(v73) == HIDWORD(v75)) : (v76 = 0),
            v76))
      {
        v78 = (uint64_t *)(*(_QWORD *)(v48 + 528) + 40 * v75);
        v77 = *(uint64_t **)(v48 + 536);
      }
      else
      {
        v77 = *(uint64_t **)(v48 + 536);
        v78 = v77;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v48 + 104));
      v79 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v48 + 440), v166, &v166);
      v80 = 0;
      ++v79[3];
      if (v78 != v77 && v78)
        v80 = *v78;
      if ((v81 & 1) == 0
      {
        do
          v155 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v155 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index = v155;
        v7 = v157;
      }
      v82 = v61[1];
      if (!v82)
        goto LABEL_158;
      v83 = gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index;
      v84 = (uint8x8_t)vcnt_s8((int8x8_t)v82);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        v85 = gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index >= v82)
          v85 = gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index % v82;
      }
      else
      {
        v85 = (v82 - 1) & gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index;
      }
      v86 = *(_QWORD **)(*v61 + 8 * v85);
      if (!v86)
        goto LABEL_158;
      v87 = (_QWORD *)*v86;
      if (!v87)
        goto LABEL_158;
      if (v84.u32[0] < 2uLL)
      {
        v88 = v82 - 1;
        while (1)
        {
          v90 = v87[1];
          if (gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index == v90)
          {
            if (v87[2] == gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index)
              goto LABEL_109;
          }
          else if ((v90 & v88) != v85)
          {
            goto LABEL_158;
          }
          v87 = (_QWORD *)*v87;
          if (!v87)
            goto LABEL_158;
        }
      }
      while (1)
      {
        v89 = v87[1];
        if (gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index == v89)
          break;
        if (v89 >= v82)
          v89 %= v82;
        if (v89 != v85)
          goto LABEL_158;
LABEL_97:
        v87 = (_QWORD *)*v87;
        if (!v87)
          goto LABEL_158;
      }
      if (v87[2] != gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index)
        goto LABEL_97;
LABEL_109:
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v156)
        {
          md::typeToIntMap(v156);
          v7 = v157;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_194;
      v92 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v92.i16[0] = vaddlv_u8(v92);
      if (v92.u32[0] > 1uLL)
      {
        v93 = v83;
        if (v83 >= qword_1EE5779D0)
          v93 = v83 % qword_1EE5779D0;
      }
      else
      {
        v93 = (qword_1EE5779D0 - 1) & v83;
      }
      v94 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v93);
      if (!v94 || (v95 = *v94) == 0)
LABEL_194:
        abort();
      if (v92.u32[0] < 2uLL)
      {
        while (1)
        {
          v97 = v95[1];
          if ((uint64_t *)v83 == v97)
          {
            if (v95[2] == (uint64_t *)v83)
              goto LABEL_130;
          }
          else if (((unint64_t)v97 & (qword_1EE5779D0 - 1)) != v93)
          {
            goto LABEL_194;
          }
          v95 = (uint64_t **)*v95;
          if (!v95)
            goto LABEL_194;
        }
      }
      while (2)
      {
        v96 = (unint64_t)v95[1];
        if (v83 != v96)
        {
          if (v96 >= qword_1EE5779D0)
            v96 %= (unint64_t)qword_1EE5779D0;
          if (v96 != v93)
            goto LABEL_194;
LABEL_120:
          v95 = (uint64_t **)*v95;
          if (!v95)
            goto LABEL_194;
          continue;
        }
        break;
      }
      if (v95[2] != (uint64_t *)v83)
        goto LABEL_120;
LABEL_130:
      v99 = *((int *)v95 + 6);
      v98 = *((int *)v95 + 7);
      if ((_DWORD)v99 != -1)
      {
        v100 = *(_QWORD *)(v68 + 16);
        if (v100)
        {
          v101 = *(_QWORD *)(*(_QWORD *)(v100 + 48) + 72);
          v102 = *(_QWORD *)(v101 + 8);
          v103 = *(_QWORD *)(v102 + 72);
          if (v103)
          {
            v104 = 0;
            v105 = *(_QWORD *)(v102 + 64);
            v106 = (unsigned __int8 *)(v105 + 1);
            while (1)
            {
              v107 = *v106;
              v106 += 2;
              if (v107 == v99)
                break;
              if (v103 == ++v104)
                goto LABEL_136;
            }
            v114 = (unsigned __int8 *)(v105 + 2 * v104);
LABEL_143:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v114) = v80;
          }
          else
          {
LABEL_136:
            v108 = *(_QWORD *)(v101 + 24);
            v109 = *(_QWORD *)(v108 + 72);
            if (v109)
            {
              v110 = 0;
              v111 = *(_QWORD *)(v108 + 64);
              v112 = (unsigned __int8 *)(v111 + 1);
              while (1)
              {
                v113 = *v112;
                v112 += 2;
                if (v113 == v99)
                  break;
                if (v109 == ++v110)
                  goto LABEL_144;
              }
              v114 = (unsigned __int8 *)(v111 + 2 * v110);
              goto LABEL_143;
            }
          }
        }
      }
LABEL_144:
      if ((_DWORD)v98 != -1)
      {
        v115 = *(_QWORD *)(v68 + 16);
        if (v115)
        {
          v116 = *(_QWORD *)(*(_QWORD *)(v115 + 48) + 72);
          v117 = *(_QWORD *)(v116 + 8);
          v118 = *(_QWORD *)(v117 + 72);
          if (v118)
          {
            v119 = 0;
            v120 = *(_QWORD *)(v117 + 64);
            v121 = (unsigned __int8 *)(v120 + 1);
            while (1)
            {
              v122 = *v121;
              v121 += 2;
              if (v122 == v98)
                break;
              if (v118 == ++v119)
                goto LABEL_150;
            }
            v129 = (unsigned __int8 *)(v120 + 2 * v119);
LABEL_157:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v129) = v80;
          }
          else
          {
LABEL_150:
            v123 = *(_QWORD *)(v116 + 24);
            v124 = *(_QWORD *)(v123 + 72);
            if (v124)
            {
              v125 = 0;
              v126 = *(_QWORD *)(v123 + 64);
              v127 = (unsigned __int8 *)(v126 + 1);
              while (1)
              {
                v128 = *v127;
                v127 += 2;
                if (v128 == v98)
                  break;
                if (v124 == ++v125)
                  goto LABEL_158;
              }
              v129 = (unsigned __int8 *)(v126 + 2 * v125);
              goto LABEL_157;
            }
          }
        }
      }
LABEL_158:
      v12 = *(_QWORD **)(v161 + 32);
      v130 = v165 + 1;
      v165 = v130;
      if (v130 == v12)
      {
        result = v158;
        v9 = v159;
      }
      else
      {
        v131 = v162[4];
        result = v158;
        v9 = v159;
        do
        {
          v132 = *((unsigned int *)v130 + 1);
          v133 = v132 >> 7;
          if (v132 >> 7 < (v162[5] - v131) >> 3)
          {
            v134 = *(_QWORD *)(v131 + 8 * v133);
            if (v134)
            {
              v135 = v132 & 0x7F;
              v136 = *(unsigned __int16 *)(v134 + 2 * v135);
              v137 = v162[7];
              v138 = v162[8];
              if (v136 < (v138 - v137) >> 3)
              {
                v139 = v137 + 8 * v136;
                if (v139 != v138 && *(_DWORD *)(v139 + 4) == (_DWORD)v132)
                {
                  v141 = v163[4];
                  if (v133 < (v163[5] - v141) >> 3)
                  {
                    v142 = *(_QWORD *)(v141 + 8 * v133);
                    if (v142)
                    {
                      v143 = *(unsigned __int16 *)(v142 + 2 * v135);
                      v144 = v163[7];
                      v145 = v163[8];
                      if (v143 < (v145 - v144) >> 3)
                      {
                        v146 = v144 + 8 * v143;
                        if (v146 != v145 && *(_DWORD *)(v146 + 4) == (_DWORD)v132)
                        {
                          v148 = v164[4];
                          if (v133 < (v164[5] - v148) >> 3)
                          {
                            v149 = *(_QWORD *)(v148 + 8 * v133);
                            if (v149)
                            {
                              v150 = *(unsigned __int16 *)(v149 + 2 * v135);
                              v152 = v164[7];
                              v151 = v164[8];
                              if (v150 < (v151 - v152) >> 3)
                              {
                                v153 = v152 + 8 * v150;
                                if (*(_DWORD *)(v153 + 4) == (_DWORD)v132 && v153 != v151)
                                {
                                  v12 = v130;
                                  goto LABEL_186;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v130;
        }
        while (v130 != v12);
        v130 = v12;
LABEL_186:
        v165 = v130;
      }
      if (v160 == v12)
        goto LABEL_193;
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_193:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6ACE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCE03281732FA0019;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCE03281732FA0019;
      if (*(_QWORD *)&v3 <= 0xCE03281732FA0019)
        v5 = 0xCE03281732FA0019 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCE03281732FA0019;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCE03281732FA0019)
            {
              if (v7[2] == 0xCE03281732FA0019)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCE03281732FA0019)
          {
            if (v7[2] == 0xCE03281732FA0019)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
  *(_QWORD *)(v11 + 24) = 54;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272678;
  *(_QWORD *)(v11 + 8) = 0xCE03281732FA0019;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCE03281732FA0019, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCE03281732FA0019;
  v15[1] = "md::ls::TextureHandleForType<DaVinci::EmissiveTexture>]";
  v15[2] = 54;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCE03281732FA0019, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6AD03C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x19CB8E83B6F501F6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x19CB8E83B6F501F6;
      if (*(_QWORD *)&v3 <= 0x19CB8E83B6F501F6uLL)
        v5 = 0x19CB8E83B6F501F6uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x19CB8E83B6F501F6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x19CB8E83B6F501F6)
            {
              if (v7[2] == 0x19CB8E83B6F501F6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x19CB8E83B6F501F6)
          {
            if (v7[2] == 0x19CB8E83B6F501F6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>]";
  *(_QWORD *)(v11 + 24) = 57;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272CA8;
  *(_QWORD *)(v11 + 8) = 0x19CB8E83B6F501F6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x19CB8E83B6F501F6uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x19CB8E83B6F501F6;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>]";
  v15[2] = 57;
  gdc::Registry::_registerStorageDataSignals(a1, 0x19CB8E83B6F501F6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6AD264(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285F18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285F18;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6AD5EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285F60;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285F60;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x3B44468EF6722590;
  result[1] = "md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>]";
  result[2] = 58;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277830;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277830;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275478;
  v4[1] = a2;
  v29 = 0;
  v5 = ***(uint64_t ****)(a1 + 8);
  if (v5 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v5 != 0xD369A4D92C8FFE6CLL)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0xD369A4D92C8FFE6CLL);
    v5 = v6 - 5;
  }
  v8 = v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v29 = v13;
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 160);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 32);
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 96);
      if (v15 < (*(_QWORD *)(*(_QWORD *)(v13 + 8) + 104) - v16) >> 3)
      {
        if (*(_QWORD *)(*(_QWORD *)(v16 + 8 * v15) + 16))
        {
          v28 = 0;
          v17 = **(_QWORD **)(a1 + 8);
          v18 = *(_QWORD **)v17;
          v19 = *(_QWORD **)(v17 + 8);
          if (v18 != v19)
          {
            while (*v18 != 0x41D4E9297E100630)
            {
              v18 += 5;
              if (v18 == v19)
                goto LABEL_27;
            }
          }
          if (v18 == v19)
          {
LABEL_27:
            v21 = 0;
          }
          else
          {
            v21 = v18[3];
            v20 = (std::__shared_weak_count *)v18[4];
            if (v20)
            {
              v22 = (unint64_t *)&v20->__shared_owners_;
              do
                v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
              do
                v24 = __ldaxr(v22);
              while (__stlxr(v24 - 1, v22));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
          }
          v28 = v21;
          v30[0] = &off_1E427BC40;
          v30[1] = &v28;
          v30[2] = &v29;
          v31 = v30;
          (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v30);
          v25 = v31;
          if (v31 == v30)
          {
            v26 = 4;
            v25 = v30;
            goto LABEL_32;
          }
          if (v31)
          {
            v26 = 5;
LABEL_32:
            (*(void (**)(void))(*v25 + 8 * v26))();
          }
        }
      }
    }
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6AD998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3B44468EF6722590;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3B44468EF6722590;
      if (*(_QWORD *)&v3 <= 0x3B44468EF6722590uLL)
        v5 = 0x3B44468EF6722590uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3B44468EF6722590;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3B44468EF6722590)
            {
              if (v7[2] == 0x3B44468EF6722590)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3B44468EF6722590)
          {
            if (v7[2] == 0x3B44468EF6722590)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>]";
  *(_QWORD *)(v11 + 24) = 58;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272D68;
  *(_QWORD *)(v11 + 8) = 0x3B44468EF6722590;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3B44468EF6722590uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3B44468EF6722590;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>]";
  v15[2] = 58;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3B44468EF6722590, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6ADF84(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285E88;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285E88;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6AE198(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285ED0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285ED0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x561A1640388A2320;
  result[1] = "md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>]";
  result[2] = 58;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42777E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42777E8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  _QWORD *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275448;
  v4[1] = a2;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0xC94DD89A7B09BE9CLL)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v8 = 0;
  }
  else
  {
    v8 = v6[3];
    v9 = (std::__shared_weak_count *)v6[4];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v13 = ***(uint64_t ****)(a1 + 8);
  if (v13 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v13 != 0xD369A4D92C8FFE6CLL)
  {
    v14 = v13 + 5;
    do
    {
      v15 = *v14;
      v14 += 5;
    }
    while (v15 != 0xD369A4D92C8FFE6CLL);
    v13 = v14 - 5;
  }
  v16 = v13[3];
  v17 = (std::__shared_weak_count *)v13[4];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!v21)
    goto LABEL_62;
  v54 = 0;
  v22 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8) + 2560);
  v24 = *v22;
  v23 = (std::__shared_weak_count *)v22[1];
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    do
      v27 = __ldaxr(v25);
    while (__stlxr(v27 - 1, v25));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v54 = v24;
  v28 = (_QWORD *)v21[1];
  v29 = v28[3];
  v30 = v28[4];
  v31 = v30 - v29;
  if (v30 != v29)
  {
    v32 = 0;
    v33 = v31 >> 3;
    while (1)
    {
      v34 = *(_QWORD *)(v29 + 8 * v32);
      if (*(_BYTE *)v34 == 3)
      {
        v35 = *(_QWORD *)(v34 + 8);
        v36 = v28[15];
        if (v35 < (v28[16] - v36) >> 3)
          break;
      }
      if (++v32 >= v33)
        goto LABEL_45;
    }
    if (*(_QWORD *)(v36 + 8 * v35))
    {
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(v37, "daVinciSSAODepthAwareUpsampleEnabled");

      if (v38)
      {
        v39 = v21[19];
        if (!v39)
          goto LABEL_44;
      }
      else
      {
        v39 = v21[17];
        if (!v39)
        {
LABEL_44:
          v54 = v39;
          goto LABEL_45;
        }
      }
      v40 = *(_QWORD *)(v39 + 32);
      v41 = *(_QWORD *)(v21[1] + 96);
      if (v40 >= (*(_QWORD *)(v21[1] + 104) - v41) >> 3)
        v39 = 0;
      else
        v39 = *(_QWORD *)(*(_QWORD *)(v41 + 8 * v40) + 16);
      goto LABEL_44;
    }
  }
LABEL_45:
  v53 = 0;
  v42 = **(_QWORD **)(a1 + 8);
  v43 = *(_QWORD **)v42;
  v44 = *(_QWORD **)(v42 + 8);
  if (v43 != v44)
  {
    while (*v43 != 0x41D4E9297E100630)
    {
      v43 += 5;
      if (v43 == v44)
        goto LABEL_56;
    }
  }
  if (v43 == v44)
  {
LABEL_56:
    v46 = 0;
  }
  else
  {
    v46 = v43[3];
    v45 = (std::__shared_weak_count *)v43[4];
    if (v45)
    {
      v47 = (unint64_t *)&v45->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      do
        v49 = __ldaxr(v47);
      while (__stlxr(v49 - 1, v47));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  v53 = v46;
  v55[0] = &off_1E427BBF8;
  v55[1] = &v53;
  v55[2] = &v54;
  v56 = v55;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v55);
  v50 = v56;
  if (v56 == v55)
  {
    v51 = 4;
    v50 = v55;
    goto LABEL_61;
  }
  if (v56)
  {
    v51 = 5;
LABEL_61:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
LABEL_62:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6AE6D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x561A1640388A2320;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x561A1640388A2320;
      if (*(_QWORD *)&v3 <= 0x561A1640388A2320uLL)
        v5 = 0x561A1640388A2320uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x561A1640388A2320;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x561A1640388A2320)
            {
              if (v7[2] == 0x561A1640388A2320)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x561A1640388A2320)
          {
            if (v7[2] == 0x561A1640388A2320)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>]";
  *(_QWORD *)(v11 + 24) = 58;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272D38;
  *(_QWORD *)(v11 + 8) = 0x561A1640388A2320;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x561A1640388A2320uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x561A1640388A2320;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>]";
  v15[2] = 58;
  gdc::Registry::_registerStorageDataSignals(a1, 0x561A1640388A2320, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6AECC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283F08;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283F08;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6AEEDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283F50;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283F50;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x1D932F2BF291491;
  v2[1] = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
  *(_QWORD *)&result = 49;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4060;
  v2[4] = "md::ls::RequiresShaderTextureID<DaVinci::TexTexture>]";
  v2[5] = 52;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276828;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276828;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned __int8 v81;
  unint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint8x8_t v92;
  unint64_t v93;
  uint64_t ***v94;
  uint64_t **v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  int v128;
  unsigned __int8 *v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v155;
  md *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  unint64_t v166;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v3);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>(v3);
  v6 = v3;
  v7 = (_QWORD *)v4;
  v8 = gdc::Registry::storage<md::ls::PipelineSetup>(v6);
  v9 = (_QWORD *)v8;
  v10 = v4 + 32;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < *(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56))
    v10 = v5 + 32;
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) < *(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24))
    v10 = v8 + 32;
  v161 = v10;
  v162 = (_QWORD *)v4;
  v163 = (_QWORD *)v5;
  v164 = (_QWORD *)v8;
  v12 = *(_QWORD **)(v10 + 24);
  v11 = *(_QWORD **)(v10 + 32);
  v165 = v12;
  v160 = v11;
  if (v11 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v161))
  {
    v13 = v12 + 1;
    do
    {
      v12 = v13;
      v165 = v13;
      if (v13 == v160)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v161);
      v13 = v12 + 1;
    }
    while (!isValid);
  }
  if (v160 != v12)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v157 = v7;
    v158 = result;
    v159 = v9;
    while (1)
    {
      *result = *v12;
      v16 = *v12;
      v17 = HIDWORD(*v12);
      v18 = *v12 >> 39;
      v19 = v7[4];
      if (v18 < (v7[5] - v19) >> 3
        && (v20 = *(_QWORD *)(v19 + 8 * v18)) != 0
        && (v21 = *(unsigned __int16 *)(v20 + 2 * (HIDWORD(v16) & 0x7F)),
            v23 = v7[7],
            v22 = v7[8],
            v21 < (v22 - v23) >> 3)
        && ((v24 = v23 + 8 * v21, v24 != v22) ? (v25 = *(_DWORD *)(v24 + 4) == (_DWORD)v17) : (v25 = 0), v25))
      {
        v26 = (unint64_t *)(v7[10] + 8 * v21);
      }
      else
      {
        v26 = (unint64_t *)v7[11];
      }
      v27 = v9[4];
      if (v18 < (v9[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v18)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v16) & 0x7F)),
            v31 = v9[7],
            v30 = v9[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v17) : (v33 = 0), v33))
      {
        v34 = v9[11];
        v35 = v9[10] + 8 * v29;
      }
      else
      {
        v34 = v9[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = (unint64_t *)v35;
      v37 = **(_QWORD **)(v2 + 8);
      v38 = *(_QWORD **)v37;
      v39 = *(_QWORD **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39)
            goto LABEL_44;
        }
      }
      if (v38 == v39)
      {
LABEL_44:
        v41 = 0;
      }
      else
      {
        v41 = (_QWORD *)v38[3];
        v40 = (std::__shared_weak_count *)v38[4];
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
      v45 = **(_QWORD **)(v2 + 8);
      v46 = *(_QWORD **)v45;
      v47 = *(_QWORD **)(v45 + 8);
      if (v46 != v47)
      {
        while (*v46 != 0x348A0B0E758C07C2)
        {
          v46 += 5;
          if (v46 == v47)
            goto LABEL_56;
        }
      }
      if (v46 == v47)
      {
LABEL_56:
        v48 = 0;
      }
      else
      {
        v48 = v46[3];
        v49 = (std::__shared_weak_count *)v46[4];
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          do
            v52 = __ldaxr(v50);
          while (__stlxr(v52 - 1, v50));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      v53 = (uint64_t)(v41 + 37);
      v54 = *v36;
      v55 = *v36;
      v56 = v41[50];
      v57 = (v41[51] - v56) >> 3;
      if (v55 < v57
        && (v58 = *(_QWORD *)(v56 + 8 * v55)) != 0
        && HIDWORD(v54) == HIDWORD(v58)
        && ((v59 = v41[53], v59 + 16 * v58 != v41[54]) ? (v60 = v59 == 0) : (v60 = 1), !v60))
      {
        v69 = v2;
        v70 = *(_QWORD *)(v56 + 8 * v55);
        v71 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v41 + 37), v54, v36);
        ++v71[3];
        v72 = v59 + 16 * v70;
        v2 = v69;
        v7 = v157;
        v61 = *(_QWORD **)(v72 + 8);
        v54 = *v36;
        v56 = v41[50];
        v55 = *v36;
        if (v55 >= (v41[51] - v56) >> 3)
          goto LABEL_76;
      }
      else
      {
        v61 = 0;
        if (v55 >= v57)
          goto LABEL_76;
      }
      v62 = *(_QWORD *)(v56 + 8 * v55);
      if (!v62
        || HIDWORD(v54) != HIDWORD(v62)
        || ((v63 = v41[53], v64 = (uint64_t *)v41[54], v65 = (uint64_t *)(v63 + 16 * v62), v65 != v64)
          ? (v66 = v63 == 0)
          : (v66 = 1),
            v66))
      {
LABEL_76:
        v68 = 0;
        goto LABEL_77;
      }
      v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v53, v54, v36);
      ++v67[3];
      v68 = *v65;
LABEL_77:
      v73 = *v26;
      v166 = v73;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v48 + 104));
      v74 = *(_QWORD *)(v48 + 504);
      if (v73 < (unint64_t)((*(_QWORD *)(v48 + 512) - v74) >> 3)
        && ((v75 = *(_QWORD *)(v74 + 8 * v73)) != 0 ? (v76 = HIDWORD(v73) == HIDWORD(v75)) : (v76 = 0),
            v76))
      {
        v78 = (uint64_t *)(*(_QWORD *)(v48 + 528) + 40 * v75);
        v77 = *(uint64_t **)(v48 + 536);
      }
      else
      {
        v77 = *(uint64_t **)(v48 + 536);
        v78 = v77;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v48 + 104));
      v79 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v48 + 440), v166, &v166);
      v80 = 0;
      ++v79[3];
      if (v78 != v77 && v78)
        v80 = *v78;
      if ((v81 & 1) == 0
      {
        do
          v155 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v155 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<DaVinci::TexTexture>(void)::index = v155;
        v7 = v157;
      }
      v82 = v61[1];
      if (!v82)
        goto LABEL_158;
      v83 = gdc::typeIndex<DaVinci::TexTexture>(void)::index;
      v84 = (uint8x8_t)vcnt_s8((int8x8_t)v82);
      v84.i16[0] = vaddlv_u8(v84);
      if (v84.u32[0] > 1uLL)
      {
        v85 = gdc::typeIndex<DaVinci::TexTexture>(void)::index;
        if (gdc::typeIndex<DaVinci::TexTexture>(void)::index >= v82)
          v85 = gdc::typeIndex<DaVinci::TexTexture>(void)::index % v82;
      }
      else
      {
        v85 = (v82 - 1) & gdc::typeIndex<DaVinci::TexTexture>(void)::index;
      }
      v86 = *(_QWORD **)(*v61 + 8 * v85);
      if (!v86)
        goto LABEL_158;
      v87 = (_QWORD *)*v86;
      if (!v87)
        goto LABEL_158;
      if (v84.u32[0] < 2uLL)
      {
        v88 = v82 - 1;
        while (1)
        {
          v90 = v87[1];
          if (gdc::typeIndex<DaVinci::TexTexture>(void)::index == v90)
          {
            if (v87[2] == gdc::typeIndex<DaVinci::TexTexture>(void)::index)
              goto LABEL_109;
          }
          else if ((v90 & v88) != v85)
          {
            goto LABEL_158;
          }
          v87 = (_QWORD *)*v87;
          if (!v87)
            goto LABEL_158;
        }
      }
      while (1)
      {
        v89 = v87[1];
        if (gdc::typeIndex<DaVinci::TexTexture>(void)::index == v89)
          break;
        if (v89 >= v82)
          v89 %= v82;
        if (v89 != v85)
          goto LABEL_158;
LABEL_97:
        v87 = (_QWORD *)*v87;
        if (!v87)
          goto LABEL_158;
      }
      if (v87[2] != gdc::typeIndex<DaVinci::TexTexture>(void)::index)
        goto LABEL_97;
LABEL_109:
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v156)
        {
          md::typeToIntMap(v156);
          v7 = v157;
        }
      }
      if (!qword_1EE5779D0)
        goto LABEL_194;
      v92 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
      v92.i16[0] = vaddlv_u8(v92);
      if (v92.u32[0] > 1uLL)
      {
        v93 = v83;
        if (v83 >= qword_1EE5779D0)
          v93 = v83 % qword_1EE5779D0;
      }
      else
      {
        v93 = (qword_1EE5779D0 - 1) & v83;
      }
      v94 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v93);
      if (!v94 || (v95 = *v94) == 0)
LABEL_194:
        abort();
      if (v92.u32[0] < 2uLL)
      {
        while (1)
        {
          v97 = v95[1];
          if ((uint64_t *)v83 == v97)
          {
            if (v95[2] == (uint64_t *)v83)
              goto LABEL_130;
          }
          else if (((unint64_t)v97 & (qword_1EE5779D0 - 1)) != v93)
          {
            goto LABEL_194;
          }
          v95 = (uint64_t **)*v95;
          if (!v95)
            goto LABEL_194;
        }
      }
      while (2)
      {
        v96 = (unint64_t)v95[1];
        if (v83 != v96)
        {
          if (v96 >= qword_1EE5779D0)
            v96 %= (unint64_t)qword_1EE5779D0;
          if (v96 != v93)
            goto LABEL_194;
LABEL_120:
          v95 = (uint64_t **)*v95;
          if (!v95)
            goto LABEL_194;
          continue;
        }
        break;
      }
      if (v95[2] != (uint64_t *)v83)
        goto LABEL_120;
LABEL_130:
      v99 = *((int *)v95 + 6);
      v98 = *((int *)v95 + 7);
      if ((_DWORD)v99 != -1)
      {
        v100 = *(_QWORD *)(v68 + 16);
        if (v100)
        {
          v101 = *(_QWORD *)(*(_QWORD *)(v100 + 48) + 72);
          v102 = *(_QWORD *)(v101 + 8);
          v103 = *(_QWORD *)(v102 + 72);
          if (v103)
          {
            v104 = 0;
            v105 = *(_QWORD *)(v102 + 64);
            v106 = (unsigned __int8 *)(v105 + 1);
            while (1)
            {
              v107 = *v106;
              v106 += 2;
              if (v107 == v99)
                break;
              if (v103 == ++v104)
                goto LABEL_136;
            }
            v114 = (unsigned __int8 *)(v105 + 2 * v104);
LABEL_143:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v114) = v80;
          }
          else
          {
LABEL_136:
            v108 = *(_QWORD *)(v101 + 24);
            v109 = *(_QWORD *)(v108 + 72);
            if (v109)
            {
              v110 = 0;
              v111 = *(_QWORD *)(v108 + 64);
              v112 = (unsigned __int8 *)(v111 + 1);
              while (1)
              {
                v113 = *v112;
                v112 += 2;
                if (v113 == v99)
                  break;
                if (v109 == ++v110)
                  goto LABEL_144;
              }
              v114 = (unsigned __int8 *)(v111 + 2 * v110);
              goto LABEL_143;
            }
          }
        }
      }
LABEL_144:
      if ((_DWORD)v98 != -1)
      {
        v115 = *(_QWORD *)(v68 + 16);
        if (v115)
        {
          v116 = *(_QWORD *)(*(_QWORD *)(v115 + 48) + 72);
          v117 = *(_QWORD *)(v116 + 8);
          v118 = *(_QWORD *)(v117 + 72);
          if (v118)
          {
            v119 = 0;
            v120 = *(_QWORD *)(v117 + 64);
            v121 = (unsigned __int8 *)(v120 + 1);
            while (1)
            {
              v122 = *v121;
              v121 += 2;
              if (v122 == v98)
                break;
              if (v118 == ++v119)
                goto LABEL_150;
            }
            v129 = (unsigned __int8 *)(v120 + 2 * v119);
LABEL_157:
            *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8 * *v129) = v80;
          }
          else
          {
LABEL_150:
            v123 = *(_QWORD *)(v116 + 24);
            v124 = *(_QWORD *)(v123 + 72);
            if (v124)
            {
              v125 = 0;
              v126 = *(_QWORD *)(v123 + 64);
              v127 = (unsigned __int8 *)(v126 + 1);
              while (1)
              {
                v128 = *v127;
                v127 += 2;
                if (v128 == v98)
                  break;
                if (v124 == ++v125)
                  goto LABEL_158;
              }
              v129 = (unsigned __int8 *)(v126 + 2 * v125);
              goto LABEL_157;
            }
          }
        }
      }
LABEL_158:
      v12 = *(_QWORD **)(v161 + 32);
      v130 = v165 + 1;
      v165 = v130;
      if (v130 == v12)
      {
        result = v158;
        v9 = v159;
      }
      else
      {
        v131 = v162[4];
        result = v158;
        v9 = v159;
        do
        {
          v132 = *((unsigned int *)v130 + 1);
          v133 = v132 >> 7;
          if (v132 >> 7 < (v162[5] - v131) >> 3)
          {
            v134 = *(_QWORD *)(v131 + 8 * v133);
            if (v134)
            {
              v135 = v132 & 0x7F;
              v136 = *(unsigned __int16 *)(v134 + 2 * v135);
              v137 = v162[7];
              v138 = v162[8];
              if (v136 < (v138 - v137) >> 3)
              {
                v139 = v137 + 8 * v136;
                if (v139 != v138 && *(_DWORD *)(v139 + 4) == (_DWORD)v132)
                {
                  v141 = v163[4];
                  if (v133 < (v163[5] - v141) >> 3)
                  {
                    v142 = *(_QWORD *)(v141 + 8 * v133);
                    if (v142)
                    {
                      v143 = *(unsigned __int16 *)(v142 + 2 * v135);
                      v144 = v163[7];
                      v145 = v163[8];
                      if (v143 < (v145 - v144) >> 3)
                      {
                        v146 = v144 + 8 * v143;
                        if (v146 != v145 && *(_DWORD *)(v146 + 4) == (_DWORD)v132)
                        {
                          v148 = v164[4];
                          if (v133 < (v164[5] - v148) >> 3)
                          {
                            v149 = *(_QWORD *)(v148 + 8 * v133);
                            if (v149)
                            {
                              v150 = *(unsigned __int16 *)(v149 + 2 * v135);
                              v152 = v164[7];
                              v151 = v164[8];
                              if (v150 < (v151 - v152) >> 3)
                              {
                                v153 = v152 + 8 * v150;
                                if (*(_DWORD *)(v153 + 4) == (_DWORD)v132 && v153 != v151)
                                {
                                  v12 = v130;
                                  goto LABEL_186;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v130;
        }
        while (v130 != v12);
        v130 = v12;
LABEL_186:
        v165 = v130;
      }
      if (v160 == v12)
        goto LABEL_193;
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_193:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6AF980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1D932F2BF291491;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1D932F2BF291491;
      if (*(_QWORD *)&v3 <= 0x1D932F2BF291491uLL)
        v5 = 0x1D932F2BF291491uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1D932F2BF291491;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1D932F2BF291491)
            {
              if (v7[2] == 0x1D932F2BF291491)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1D932F2BF291491)
          {
            if (v7[2] == 0x1D932F2BF291491)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
  *(_QWORD *)(v11 + 24) = 49;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42725E8;
  *(_QWORD *)(v11 + 8) = 0x1D932F2BF291491;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1D932F2BF291491uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1D932F2BF291491;
  v15[1] = "md::ls::TextureHandleForType<DaVinci::TexTexture>]";
  v15[2] = 49;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1D932F2BF291491, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6AFBA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC5F6E84B67A27720;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC5F6E84B67A27720;
      if (*(_QWORD *)&v3 <= 0xC5F6E84B67A27720)
        v5 = 0xC5F6E84B67A27720 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC5F6E84B67A27720;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC5F6E84B67A27720)
            {
              if (v7[2] == 0xC5F6E84B67A27720)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC5F6E84B67A27720)
          {
            if (v7[2] == 0xC5F6E84B67A27720)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::TexTexture>]";
  *(_QWORD *)(v11 + 24) = 52;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272B58;
  *(_QWORD *)(v11 + 8) = 0xC5F6E84B67A27720;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC5F6E84B67A27720, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC5F6E84B67A27720;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::TexTexture>]";
  v15[2] = 52;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC5F6E84B67A27720, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6AFDCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::TexTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::TexTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::TexTexture>>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::TexTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285078;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285078;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6B0154(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42850C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42850C0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x4B2419C7BBAFEE01;
  result[1] = "md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>]";
  result[2] = 55;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42770E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42770E0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4275418;
  v4[1] = a2;
  v5 = ***(uint64_t ****)(a1 + 8);
  if (v5 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v5 != 0xD369A4D92C8FFE6CLL)
  {
    v6 = v5 + 5;
    do
    {
      v7 = *v6;
      v6 += 5;
    }
    while (v7 != 0xD369A4D92C8FFE6CLL);
    v5 = v6 - 5;
  }
  v8 = v5[3];
  v9 = (std::__shared_weak_count *)v5[4];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v13)
    goto LABEL_60;
  v53 = 0;
  v14 = **(_QWORD **)(a1 + 8);
  v15 = *(_QWORD **)v14;
  v16 = *(_QWORD **)(v14 + 8);
  if (v15 != v16)
  {
    while (*v15 != 0x41D4E9297E100630)
    {
      v15 += 5;
      if (v15 == v16)
        goto LABEL_24;
    }
  }
  if (v15 == v16)
  {
LABEL_24:
    v18 = 0;
  }
  else
  {
    v18 = v15[3];
    v17 = (std::__shared_weak_count *)v15[4];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v53 = v18;
  v22 = *(_QWORD **)(v13 + 8);
  v23 = v22[3];
  v24 = v22[4];
  v25 = v24 - v23;
  if (v24 == v23)
    goto LABEL_60;
  v26 = 0;
  v27 = v25 >> 3;
  while (1)
  {
    v28 = *(_QWORD *)(v23 + 8 * v26);
    if (!*(_BYTE *)v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      v30 = v22[15];
      if (v29 < (v22[16] - v30) >> 3)
        break;
    }
    if (++v26 >= v27)
      goto LABEL_60;
  }
  if (!*(_QWORD *)(v30 + 8 * v29))
    goto LABEL_60;
  v31 = *(_QWORD *)(v13 + 96);
  if (!v31 || (v32 = *(_QWORD *)(v31 + 32), v34 = v22 + 12, v33 = v22[12], v32 >= (v34[1] - v33) >> 3))
  {
    v52 = 0;
    goto LABEL_36;
  }
  v52 = *(_QWORD *)(*(_QWORD *)(v33 + 8 * v32) + 16);
  if (!v52)
  {
LABEL_36:
    v35 = ***(uint64_t ****)(a1 + 8);
    if (v35 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v35 != 0xC94DD89A7B09BE9CLL)
    {
      v36 = v35 + 5;
      do
      {
        v37 = *v36;
        v36 += 5;
      }
      while (v37 != 0xC94DD89A7B09BE9CLL);
      v35 = v36 - 5;
    }
    v38 = v35[3];
    v39 = (std::__shared_weak_count *)v35[4];
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v43 = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38) + 2560);
    v44 = *v43;
    v45 = (std::__shared_weak_count *)v43[1];
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      v52 = v44;
      do
        v48 = __ldaxr(v46);
      while (__stlxr(v48 - 1, v46));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    else
    {
      v52 = *v43;
    }
  }
  v54[0] = &off_1E427BA90;
  v54[1] = &v53;
  v54[2] = &v52;
  v55 = v54;
  (*(void (**)(_QWORD *, _QWORD *))(*v4 + 16))(v4, v54);
  v49 = v55;
  if (v55 == v54)
  {
    v50 = 4;
    v49 = v54;
    goto LABEL_59;
  }
  if (v55)
  {
    v50 = 5;
LABEL_59:
    (*(void (**)(void))(*v49 + 8 * v50))();
  }
LABEL_60:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6B0658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(void);
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56[4];
  unint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t *v61;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(_QWORD *)(v9 + 32));
  v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61)
    goto LABEL_55;
  v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v12 = *v11;
    v13 = *v11;
    v14 = HIDWORD(*v11);
    v15 = v13 >> 39;
    v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3)
      goto LABEL_17;
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
      goto LABEL_17;
    v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    v20 = v4[7];
    v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3)
      goto LABEL_17;
    v21 = v20 + 8 * v18;
    v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == (_DWORD)v14;
    if (v22)
    {
      v23 = v4[11];
      v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      v23 = v4[11];
      v24 = v23;
    }
    v25 = v24 == v23 ? 0 : v24;
    v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      v27 = *(_QWORD *)(v26 + 8 * v15);
      if (v27)
      {
        v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        v30 = v6[7];
        v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == (_DWORD)v14)
            break;
        }
      }
    }
    v33 = v6[11];
    v34 = v33;
    v35 = *(_QWORD *)(a2 + 24);
    if (!v35)
      goto LABEL_54;
LABEL_29:
    if (v34 == v33)
      v36 = 0;
    else
      v36 = v34;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v35 + 48))(v35, v25, v36);
    v38 = v61;
    v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      v39 = v59[4];
      v40 = (v59[5] - v39) >> 3;
      v41 = v38 + 2;
      while (1)
      {
        v42 = *((unsigned int *)v41 - 1);
        v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          v44 = *(_QWORD *)(v39 + 8 * v43);
          if (v44)
          {
            v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            v46 = v59[7];
            result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == (_DWORD)v42)
              {
                v49 = v60[4];
                result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  v50 = *(_QWORD *)(v49 + 8 * v43);
                  if (v50)
                  {
                    v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    v53 = v60[7];
                    v52 = v60[8];
                    result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == (_DWORD)v42)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v61 = v41;
        v22 = v41++ == v11;
        if (v22)
          goto LABEL_9;
      }
      v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11)
      goto LABEL_56;
  }
  v33 = v6[11];
  v34 = v6[10] + 8 * v28;
  v35 = *(_QWORD *)(a2 + 24);
  if (v35)
    goto LABEL_29;
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  result = (*v10)();
  v12 = (_QWORD *)result;
LABEL_56:
  *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>>::empty(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  _QWORD v10[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  v4 = v3;
  v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7])
    v6 = (uint64_t)(v2 + 4);
  else
    v6 = (uint64_t)(v3 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(_QWORD *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7])
    v7 = (uint64_t)(v2 + 4);
  else
    v7 = (uint64_t)v5;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(_QWORD *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4B2419C7BBAFEE01;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4B2419C7BBAFEE01;
      if (*(_QWORD *)&v3 <= 0x4B2419C7BBAFEE01uLL)
        v5 = 0x4B2419C7BBAFEE01uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4B2419C7BBAFEE01;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4B2419C7BBAFEE01)
            {
              if (v7[2] == 0x4B2419C7BBAFEE01)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4B2419C7BBAFEE01)
          {
            if (v7[2] == 0x4B2419C7BBAFEE01)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>]";
  *(_QWORD *)(v11 + 24) = 55;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272BB8;
  *(_QWORD *)(v11 + 8) = 0x4B2419C7BBAFEE01;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4B2419C7BBAFEE01uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4B2419C7BBAFEE01;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>]";
  v15[2] = 55;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4B2419C7BBAFEE01, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B0C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285468;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285468;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6B0E58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42854B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42854B0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xAEACE637C9751345;
  result[1] = "md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>]";
  result[2] = 56;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42772D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42772D8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _UNKNOWN **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (***v28)(_QWORD);
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int8x8_t v35;
  md::LayoutContext *v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  double v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  int v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  float v70;
  unint64_t *v71;
  unint64_t v72;
  md::SharedResource *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  _QWORD *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  BOOL v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unsigned __int8 v105;
  unint64_t v106;
  unint64_t v107;
  uint8x8_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint8x8_t v116;
  unint64_t v117;
  uint64_t ***v118;
  uint64_t **v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 *v136;
  int v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  int v152;
  unsigned __int8 *v153;
  unint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v173;
  md *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178[4];
  unint64_t *v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  unint64_t *v183;
  _QWORD v184[2];
  md::SharedResource *v185;
  std::__shared_weak_count *v186;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v180, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v178, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v179 == v183)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    goto LABEL_224;
  }
  v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v12 = &off_1E426D000;
  while (2)
  {
    *v11 = *v10;
    v13 = *v10;
    v14 = v6[4];
    if (v13 >> 39 < (v6[5] - v14) >> 3
      && (v15 = *(_QWORD *)(v14 + 8 * (v13 >> 39))) != 0
      && (v16 = *(unsigned __int16 *)(v15 + 2 * (HIDWORD(v13) & 0x7F)), v18 = v6[7], v17 = v6[8], v16 < (v17 - v18) >> 3)
      && ((v19 = HIDWORD(v13), v20 = v18 + 8 * v16, v20 != v17)
        ? (v21 = *(_DWORD *)(v20 + 4) == (_DWORD)v19)
        : (v21 = 0),
          v21))
    {
      v22 = v6[11];
      v23 = v6[10] + 8 * v16;
    }
    else
    {
      v22 = v6[11];
      v23 = v22;
    }
    if (v23 == v22)
      v24 = 0;
    else
      v24 = (unint64_t *)v23;
    v25 = ***(uint64_t ****)(a1 + 8);
    if (v25 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v25 != 0x22D45F5AAD4BF408)
    {
      v26 = v25 + 5;
      do
      {
        v27 = *v26;
        v26 += 5;
      }
      while (v27 != 0x22D45F5AAD4BF408);
      v25 = v26 - 5;
    }
    v28 = (uint64_t (***)(_QWORD))v25[3];
    v29 = (std::__shared_weak_count *)v25[4];
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v33 = (**v28)(v28);
    v34 = *(_QWORD **)(v33 + 8);
    v35 = (int8x8_t)v34[1];
    if (!*(_QWORD *)&v35)
      goto LABEL_198;
    v36 = (md::LayoutContext *)v33;
    v37 = (uint8x8_t)vcnt_s8(v35);
    v37.i16[0] = vaddlv_u8(v37);
    if (v37.u32[0] > 1uLL)
    {
      v38 = 0x41E8D6E445F4145;
      if (*(_QWORD *)&v35 <= 0x41E8D6E445F4145uLL)
        v38 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v35;
    }
    else
    {
      v38 = (*(_QWORD *)&v35 - 1) & 0x41E8D6E445F4145;
    }
    v39 = *(_QWORD **)(*v34 + 8 * v38);
    if (!v39)
      goto LABEL_198;
    v40 = (_QWORD *)*v39;
    if (!v40)
      goto LABEL_198;
    if (v37.u32[0] < 2uLL)
    {
      v41 = *(_QWORD *)&v35 - 1;
      while (1)
      {
        v43 = v40[1];
        if (v43 == 0x41E8D6E445F4145)
        {
          if (v40[2] == 0x41E8D6E445F4145)
            goto LABEL_54;
        }
        else if ((v43 & v41) != v38)
        {
          goto LABEL_198;
        }
        v40 = (_QWORD *)*v40;
        if (!v40)
          goto LABEL_198;
      }
    }
    while (1)
    {
      v42 = v40[1];
      if (v42 == 0x41E8D6E445F4145)
        break;
      if (v42 >= *(_QWORD *)&v35)
        v42 %= *(_QWORD *)&v35;
      if (v42 != v38)
        goto LABEL_198;
LABEL_42:
      v40 = (_QWORD *)*v40;
      if (!v40)
        goto LABEL_198;
    }
    if (v40[2] != 0x41E8D6E445F4145)
      goto LABEL_42;
LABEL_54:
    v44 = v40[5];
    if (*(_QWORD *)(v44 + 8) != 0x41E8D6E445F4145)
      goto LABEL_198;
    v45 = *(_QWORD *)(v44 + 32);
    if (!v45)
      goto LABEL_198;
    v46 = ***(uint64_t ****)(a1 + 8);
    v176 = v45;
    if (v46 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v46 != 0xD369A4D92C8FFE6CLL)
    {
      v47 = v46 + 5;
      do
      {
        v48 = *v47;
        v47 += 5;
      }
      while (v48 != 0xD369A4D92C8FFE6CLL);
      v46 = v47 - 5;
    }
    v49 = v46[3];
    v50 = (std::__shared_weak_count *)v46[4];
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      do
        v53 = __ldaxr(v51);
      while (__stlxr(v53 - 1, v51));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    objc_msgSend(*(id *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49) + 104), "contentScale");
    v55 = v54;
    v56 = ***(uint64_t ****)(a1 + 8);
    if (v56 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v56 != 0xC94DD89A7B09BE9CLL)
    {
      v57 = v56 + 5;
      do
      {
        v58 = *v57;
        v57 += 5;
      }
      while (v58 != 0xC94DD89A7B09BE9CLL);
      v56 = v57 - 5;
    }
    v59 = v56[3];
    v60 = (std::__shared_weak_count *)v56[4];
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      do
        v63 = __ldaxr(v61);
      while (__stlxr(v63 - 1, v61));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v177 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 32))(v59) + 2560) + 32);
    objc_msgSend(v12[132], "sharedSettings");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend(v64, "lightingEnableAmbient");

    if (v65 && *(_BYTE *)(v176 + 96))
    {
      v175 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 32))(v59) + 2560);
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 32))(v59);
      v67 = *(std::__shared_weak_count **)(v66 + 1488);
      v184[0] = *(_QWORD *)(v66 + 1480);
      v184[1] = v67;
      v12 = &off_1E426D000;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v70 = v55;
      md::TextureManager::cubeTexture(&v185, v175, v176 + 104, v184, v70);
      if (v67)
      {
        v71 = (unint64_t *)&v67->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v73 = v185;
      if (v185)
      {
        md::LayoutContext::frameState(v36);
        md::SharedResource::addFrameRef(v73, *(_QWORD *)(v74 + 624));
        v177 = *((_QWORD *)v73 + 4);
      }
      v75 = v186;
      if (v186)
      {
        v76 = (unint64_t *)&v186->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
    }
    else
    {
      v12 = &off_1E426D000;
    }
    v78 = **(_QWORD **)(a1 + 8);
    v79 = *(_QWORD **)v78;
    v80 = *(_QWORD **)(v78 + 8);
    if (v79 != v80)
    {
      while (*v79 != 0x41D4E9297E100630)
      {
        v79 += 5;
        if (v79 == v80)
          goto LABEL_107;
      }
    }
    if (v79 == v80)
    {
LABEL_107:
      v82 = 0;
    }
    else
    {
      v82 = (_QWORD *)v79[3];
      v81 = (std::__shared_weak_count *)v79[4];
      if (v81)
      {
        v83 = (unint64_t *)&v81->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
        do
          v85 = __ldaxr(v83);
        while (__stlxr(v85 - 1, v83));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
    }
    if (!v177)
      goto LABEL_198;
    v86 = (uint64_t)(v82 + 37);
    v87 = *v24;
    v88 = *v24;
    v89 = v82[50];
    v90 = (v82[51] - v89) >> 3;
    if (v88 < v90
      && (v91 = *(_QWORD *)(v89 + 8 * v88)) != 0
      && HIDWORD(v87) == HIDWORD(v91)
      && ((v92 = v82[53], v92 + 16 * v91 != v82[54]) ? (v93 = v92 == 0) : (v93 = 1), !v93))
    {
      v102 = *(_QWORD *)(v89 + 8 * v88);
      v103 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v82 + 37), v87, v24);
      ++v103[3];
      v104 = v92 + 16 * v102;
      v12 = &off_1E426D000;
      v94 = *(_QWORD **)(v104 + 8);
      v87 = *v24;
      v89 = v82[50];
      v88 = *v24;
      if (v88 >= (v82[51] - v89) >> 3)
        goto LABEL_126;
    }
    else
    {
      v94 = 0;
      if (v88 >= v90)
        goto LABEL_126;
    }
    v95 = *(_QWORD *)(v89 + 8 * v88);
    if (v95
      && HIDWORD(v87) == HIDWORD(v95)
      && ((v96 = v82[53], v97 = (uint64_t *)v82[54], v98 = (uint64_t *)(v96 + 16 * v95), v98 != v97)
        ? (v99 = v96 == 0)
        : (v99 = 1),
          !v99))
    {
      v100 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v86, v87, v24);
      ++v100[3];
      v101 = *v98;
    }
    else
    {
LABEL_126:
      v101 = 0;
    }
    if ((v105 & 1) == 0
    {
      do
        v173 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v173 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::AmbientTexture>(void)::index = v173;
      v12 = &off_1E426D000;
    }
    v106 = v94[1];
    if (!v106)
      goto LABEL_198;
    v107 = gdc::typeIndex<DaVinci::AmbientTexture>(void)::index;
    v108 = (uint8x8_t)vcnt_s8((int8x8_t)v106);
    v108.i16[0] = vaddlv_u8(v108);
    if (v108.u32[0] > 1uLL)
    {
      v109 = gdc::typeIndex<DaVinci::AmbientTexture>(void)::index;
      if (gdc::typeIndex<DaVinci::AmbientTexture>(void)::index >= v106)
        v109 = gdc::typeIndex<DaVinci::AmbientTexture>(void)::index % v106;
    }
    else
    {
      v109 = (v106 - 1) & gdc::typeIndex<DaVinci::AmbientTexture>(void)::index;
    }
    v110 = *(_QWORD **)(*v94 + 8 * v109);
    if (!v110)
      goto LABEL_198;
    v111 = (_QWORD *)*v110;
    if (!v111)
      goto LABEL_198;
    if (v108.u32[0] < 2uLL)
    {
      v112 = v106 - 1;
      while (1)
      {
        v114 = v111[1];
        if (gdc::typeIndex<DaVinci::AmbientTexture>(void)::index == v114)
        {
          if (v111[2] == gdc::typeIndex<DaVinci::AmbientTexture>(void)::index)
            goto LABEL_149;
        }
        else if ((v114 & v112) != v109)
        {
          goto LABEL_198;
        }
        v111 = (_QWORD *)*v111;
        if (!v111)
          goto LABEL_198;
      }
    }
    while (2)
    {
      v113 = v111[1];
      if (gdc::typeIndex<DaVinci::AmbientTexture>(void)::index != v113)
      {
        if (v113 >= v106)
          v113 %= v106;
        if (v113 != v109)
          goto LABEL_198;
        goto LABEL_138;
      }
      if (v111[2] != gdc::typeIndex<DaVinci::AmbientTexture>(void)::index)
      {
LABEL_138:
        v111 = (_QWORD *)*v111;
        if (!v111)
          goto LABEL_198;
        continue;
      }
      break;
    }
LABEL_149:
    if ((v115 & 1) == 0)
    {
      if ((_DWORD)v174)
      {
        md::typeToIntMap(v174);
        v12 = &off_1E426D000;
      }
    }
    if (!qword_1EE5779D0)
      goto LABEL_225;
    v116 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
    v116.i16[0] = vaddlv_u8(v116);
    if (v116.u32[0] > 1uLL)
    {
      v117 = v107;
      if (v107 >= qword_1EE5779D0)
        v117 = v107 % qword_1EE5779D0;
    }
    else
    {
      v117 = (qword_1EE5779D0 - 1) & v107;
    }
    v118 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v117);
    if (!v118 || (v119 = *v118) == 0)
LABEL_225:
      abort();
    if (v116.u32[0] < 2uLL)
    {
      while (1)
      {
        v121 = v119[1];
        if ((uint64_t *)v107 == v121)
        {
          if (v119[2] == (uint64_t *)v107)
            goto LABEL_170;
        }
        else if (((unint64_t)v121 & (qword_1EE5779D0 - 1)) != v117)
        {
          goto LABEL_225;
        }
        v119 = (uint64_t **)*v119;
        if (!v119)
          goto LABEL_225;
      }
    }
    while (2)
    {
      v120 = (unint64_t)v119[1];
      if (v107 != v120)
      {
        if (v120 >= qword_1EE5779D0)
          v120 %= (unint64_t)qword_1EE5779D0;
        if (v120 != v117)
          goto LABEL_225;
        goto LABEL_160;
      }
      if (v119[2] != (uint64_t *)v107)
      {
LABEL_160:
        v119 = (uint64_t **)*v119;
        if (!v119)
          goto LABEL_225;
        continue;
      }
      break;
    }
LABEL_170:
    v123 = *((int *)v119 + 6);
    v122 = *((int *)v119 + 7);
    if ((_DWORD)v123 != -1)
    {
      v124 = *(_QWORD *)(v101 + 16);
      if (v124)
      {
        v125 = *(_QWORD *)(*(_QWORD *)(v124 + 48) + 72);
        v126 = *(_QWORD *)(v125 + 8);
        v127 = *(_QWORD *)(v126 + 72);
        if (v127)
        {
          v128 = 0;
          v129 = *(_QWORD *)(v126 + 64);
          v130 = (unsigned __int8 *)(v129 + 1);
          while (1)
          {
            v131 = *v130;
            v130 += 2;
            if (v131 == v123)
              break;
            if (v127 == ++v128)
              goto LABEL_176;
          }
          v138 = (unsigned __int8 *)(v129 + 2 * v128);
LABEL_183:
          *(_QWORD *)(*(_QWORD *)(v101 + 96) + 8 * *v138) = v177;
        }
        else
        {
LABEL_176:
          v132 = *(_QWORD *)(v125 + 24);
          v133 = *(_QWORD *)(v132 + 72);
          if (v133)
          {
            v134 = 0;
            v135 = *(_QWORD *)(v132 + 64);
            v136 = (unsigned __int8 *)(v135 + 1);
            while (1)
            {
              v137 = *v136;
              v136 += 2;
              if (v137 == v123)
                break;
              if (v133 == ++v134)
                goto LABEL_184;
            }
            v138 = (unsigned __int8 *)(v135 + 2 * v134);
            goto LABEL_183;
          }
        }
      }
    }
LABEL_184:
    if ((_DWORD)v122 != -1)
    {
      v139 = *(_QWORD *)(v101 + 16);
      if (v139)
      {
        v140 = *(_QWORD *)(*(_QWORD *)(v139 + 48) + 72);
        v141 = *(_QWORD *)(v140 + 8);
        v142 = *(_QWORD *)(v141 + 72);
        if (v142)
        {
          v143 = 0;
          v144 = *(_QWORD *)(v141 + 64);
          v145 = (unsigned __int8 *)(v144 + 1);
          while (1)
          {
            v146 = *v145;
            v145 += 2;
            if (v146 == v122)
              break;
            if (v142 == ++v143)
              goto LABEL_190;
          }
          v153 = (unsigned __int8 *)(v144 + 2 * v143);
LABEL_197:
          *(_QWORD *)(*(_QWORD *)(v101 + 96) + 8 * *v153) = v177;
        }
        else
        {
LABEL_190:
          v147 = *(_QWORD *)(v140 + 24);
          v148 = *(_QWORD *)(v147 + 72);
          if (v148)
          {
            v149 = 0;
            v150 = *(_QWORD *)(v147 + 64);
            v151 = (unsigned __int8 *)(v150 + 1);
            while (1)
            {
              v152 = *v151;
              v151 += 2;
              if (v152 == v122)
                break;
              if (v148 == ++v149)
                goto LABEL_198;
            }
            v153 = (unsigned __int8 *)(v150 + 2 * v149);
            goto LABEL_197;
          }
        }
      }
    }
LABEL_198:
    v154 = v183;
    v10 = *(unint64_t **)(v180 + 32);
    if (++v183 != v10)
    {
      v155 = v181[4];
      v156 = (v181[5] - v155) >> 3;
      v157 = v154 + 2;
      while (1)
      {
        v158 = *((unsigned int *)v157 - 1);
        v159 = v158 >> 7;
        if (v158 >> 7 < v156)
        {
          v160 = *(_QWORD *)(v155 + 8 * v159);
          if (v160)
          {
            v161 = *(unsigned __int16 *)(v160 + 2 * (v158 & 0x7F));
            v163 = v181[7];
            v162 = v181[8];
            if (v161 < (v162 - v163) >> 3)
            {
              v164 = v163 + 8 * v161;
              if (v164 != v162 && *(_DWORD *)(v164 + 4) == (_DWORD)v158)
              {
                v166 = v182[4];
                if (v159 < (v182[5] - v166) >> 3)
                {
                  v167 = *(_QWORD *)(v166 + 8 * v159);
                  if (v167)
                  {
                    v168 = *(unsigned __int16 *)(v167 + 2 * (v158 & 0x7F));
                    v170 = v182[7];
                    v169 = v182[8];
                    if (v168 < (v169 - v170) >> 3)
                    {
                      v171 = v170 + 8 * v168;
                      if (v171 != v169 && *(_DWORD *)(v171 + 4) == (_DWORD)v158)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v183 = v157;
        v21 = v157++ == v10;
        if (v21)
          goto LABEL_9;
      }
      v10 = v157 - 1;
    }
LABEL_9:
    if (v179 != v10)
      continue;
    break;
  }
LABEL_224:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6B1B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19F6B1B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xAEACE637C9751345;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xAEACE637C9751345;
      if (*(_QWORD *)&v3 <= 0xAEACE637C9751345)
        v5 = 0xAEACE637C9751345 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xAEACE637C9751345;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xAEACE637C9751345)
            {
              if (v7[2] == 0xAEACE637C9751345)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xAEACE637C9751345)
          {
            if (v7[2] == 0xAEACE637C9751345)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>]";
  *(_QWORD *)(v11 + 24) = 56;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272BE8;
  *(_QWORD *)(v11 + 8) = 0xAEACE637C9751345;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xAEACE637C9751345, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xAEACE637C9751345;
  v15[1] = "md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>]";
  v15[2] = 56;
  gdc::Registry::_registerStorageDataSignals(a1, 0xAEACE637C9751345, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B1DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42883A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42883A8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6B1FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42883F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42883F0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0x8963537098E96576;
  v2[1] = "md::ls::GradientConstantDataHandle1]";
  *(_QWORD *)&result = 35;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4070;
  v2[4] = "md::ls::GradientConstantDataHandle2]";
  v2[5] = 35;
  v2[6] = 0x7B8C320EC5754EB9;
  v2[7] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>]";
  v2[8] = 94;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278A78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278A78;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  _QWORD *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD **v64;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  BOOL v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::GradientConstantDataHandle1>(v3);
  v5 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>(v3);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::GradientConstantDataHandle2>(v3);
  v7 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v8 = (_QWORD *)v7;
  v9 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v4[8] - v4[7])
    v9 = (_QWORD *)(v5 + 32);
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) < v9[4] - v9[3])
    v9 = (_QWORD *)(v7 + 32);
  v117 = v9;
  v118 = v4;
  v119 = (_QWORD *)v5;
  v120 = (_QWORD *)v7;
  v11 = (_QWORD *)v9[3];
  v10 = (_QWORD *)v9[4];
  v121 = v11;
  v116 = v10;
  if (v10 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
  {
    v12 = v11 + 1;
    do
    {
      v11 = v12;
      v121 = v12;
      if (v12 == v116)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
      v12 = v11 + 1;
    }
    while (!isValid);
  }
  if (v116 != v11)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v113 = v2;
    v114 = result;
    v115 = v6;
    while (1)
    {
      *result = *v11;
      v15 = *v11;
      v16 = HIDWORD(*v11);
      v17 = *v11 >> 39;
      v18 = v4[4];
      if (v17 < (v4[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v4[7],
            v21 = v4[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = (unint64_t *)(v4[10] + 8 * v20);
      }
      else
      {
        v25 = (unint64_t *)v4[11];
      }
      v26 = v6[4];
      if (v17 < (v6[5] - v26) >> 3
        && (v27 = *(_QWORD *)(v26 + 8 * v17)) != 0
        && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)),
            v30 = v6[7],
            v29 = v6[8],
            v28 < (v29 - v30) >> 3)
        && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v16) : (v32 = 0), v32))
      {
        v33 = v6[11];
        v34 = v6[10] + 8 * v28;
      }
      else
      {
        v33 = v6[11];
        v34 = v33;
      }
      if (v34 == v33)
        v35 = 0;
      else
        v35 = (unint64_t *)v34;
      v36 = v8[4];
      if (v17 < (v8[5] - v36) >> 3
        && (v37 = *(_QWORD *)(v36 + 8 * v17)) != 0
        && (v38 = *(unsigned __int16 *)(v37 + 2 * (HIDWORD(v15) & 0x7F)),
            v40 = v8[7],
            v39 = v8[8],
            v38 < (v39 - v40) >> 3)
        && ((v41 = v40 + 8 * v38, v41 != v39) ? (v42 = *(_DWORD *)(v41 + 4) == (_DWORD)v16) : (v42 = 0), v42))
      {
        v43 = v8[11];
        v44 = v8[10] + 8 * v38;
      }
      else
      {
        v43 = v8[11];
        v44 = v43;
      }
      if (v44 == v43)
        v45 = 0;
      else
        v45 = (unint64_t *)v44;
      v46 = **(_QWORD **)(v2 + 8);
      v47 = *(_QWORD **)v46;
      v48 = *(_QWORD **)(v46 + 8);
      if (v47 != v48)
      {
        while (*v47 != 0x41D4E9297E100630)
        {
          v47 += 5;
          if (v47 == v48)
            goto LABEL_55;
        }
      }
      if (v47 == v48)
      {
LABEL_55:
        v50 = 0;
      }
      else
      {
        v50 = (_QWORD *)v47[3];
        v49 = (std::__shared_weak_count *)v47[4];
        if (v49)
        {
          p_shared_owners = (unint64_t *)&v49->__shared_owners_;
          do
            v52 = __ldxr(p_shared_owners);
          while (__stxr(v52 + 1, p_shared_owners));
          do
            v53 = __ldaxr(p_shared_owners);
          while (__stlxr(v53 - 1, p_shared_owners));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      v54 = *v45;
      v55 = *v45;
      v56 = v50[50];
      v57 = (v50[51] - v56) >> 3;
      if (v55 < v57
        && (v58 = *(_QWORD *)(v56 + 8 * v55)) != 0
        && HIDWORD(v54) == HIDWORD(v58)
        && ((v59 = v50[53], v59 + 16 * v58 != v50[54]) ? (v60 = v59 == 0) : (v60 = 1), !v60))
      {
        v66 = *(_QWORD *)(v56 + 8 * v55);
        v67 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v50 + 37), v54, v45);
        ++v67[3];
        v68 = v59 + 16 * v66;
        v2 = v113;
        v61 = *(_QWORD **)(v68 + 8);
        v54 = *v45;
        v56 = v50[50];
        v55 = *v45;
        if (v55 >= (v50[51] - v56) >> 3)
        {
LABEL_77:
          v112 = 0;
          goto LABEL_78;
        }
      }
      else
      {
        v61 = 0;
        if (v55 >= v57)
          goto LABEL_77;
      }
      v62 = *(_QWORD *)(v56 + 8 * v55);
      if (!v62 || HIDWORD(v54) != HIDWORD(v62))
        goto LABEL_77;
      v63 = v50[53];
      v64 = (_QWORD **)(v63 + 16 * v62);
      if (v64 == (_QWORD **)v50[54] || v63 == 0)
      {
        v112 = 0;
      }
      else
      {
        v111 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v50 + 37), v54, v45);
        ++v111[3];
        v112 = *v64;
      }
      v2 = v113;
LABEL_78:
      v69 = *v25;
      v122 = v69;
      v70 = v50[930];
      if (v69 >= (unint64_t)((v50[931] - v70) >> 3)
        || ((v71 = *(_QWORD *)(v70 + 8 * v69)) != 0 ? (v72 = HIDWORD(v69) == HIDWORD(v71)) : (v72 = 0),
            !v72
         || ((v82 = v50[933], v83 = (uint64_t *)(v82 + 24 * v71), v83 != (uint64_t *)v50[934])
           ? (v84 = v82 == 0)
           : (v84 = 1),
             v84)))
      {
        v73 = 0;
        if (!v35)
          goto LABEL_97;
      }
      else
      {
        v85 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>> const&>,std::tuple<>>((uint64_t)(v50 + 917), v69, &v122);
        ++v85[3];
        v73 = *v83;
        if (!v35)
          goto LABEL_97;
      }
      v74 = *v35;
      v122 = v74;
      v75 = v50[930];
      if (v74 >= (unint64_t)((v50[931] - v75) >> 3)
        || (v76 = *(_QWORD *)(v75 + 8 * v74)) == 0
        || HIDWORD(v74) != HIDWORD(v76)
        || ((v77 = v50[933], v78 = (uint64_t *)(v77 + 24 * v76), v78 != (uint64_t *)v50[934])
          ? (v79 = v77 == 0)
          : (v79 = 1),
            v79))
      {
LABEL_97:
        v81 = 0;
        goto LABEL_98;
      }
      v80 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::GradientParameters>> const&>,std::tuple<>>((uint64_t)(v50 + 917), v74, &v122);
      ++v80[3];
      v81 = *v78;
LABEL_98:
      md::setConstantDataForPipeline<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(v61, v112, v73, 0);
      md::setConstantDataForPipeline<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(v61, v112, v81, 1);
      v11 = (_QWORD *)v117[4];
      v86 = v121 + 1;
      v121 = v86;
      if (v86 == v11)
      {
        result = v114;
        v6 = v115;
      }
      else
      {
        v87 = v118[4];
        do
        {
          v88 = *((unsigned int *)v86 + 1);
          v89 = v88 >> 7;
          if (v88 >> 7 < (v118[5] - v87) >> 3)
          {
            v90 = *(_QWORD *)(v87 + 8 * v89);
            if (v90)
            {
              v91 = v88 & 0x7F;
              v92 = *(unsigned __int16 *)(v90 + 2 * v91);
              v94 = v118[7];
              v93 = v118[8];
              if (v92 < (v93 - v94) >> 3)
              {
                v95 = v94 + 8 * v92;
                if (v95 != v93 && *(_DWORD *)(v95 + 4) == (_DWORD)v88)
                {
                  v97 = v119[4];
                  if (v89 < (v119[5] - v97) >> 3)
                  {
                    v98 = *(_QWORD *)(v97 + 8 * v89);
                    if (v98)
                    {
                      v99 = *(unsigned __int16 *)(v98 + 2 * v91);
                      v101 = v119[7];
                      v100 = v119[8];
                      if (v99 < (v100 - v101) >> 3)
                      {
                        v102 = v101 + 8 * v99;
                        if (v102 != v100 && *(_DWORD *)(v102 + 4) == (_DWORD)v88)
                        {
                          v104 = v120[4];
                          if (v89 < (v120[5] - v104) >> 3)
                          {
                            v105 = *(_QWORD *)(v104 + 8 * v89);
                            if (v105)
                            {
                              v106 = *(unsigned __int16 *)(v105 + 2 * v91);
                              v108 = v120[7];
                              v107 = v120[8];
                              if (v106 < (v107 - v108) >> 3)
                              {
                                v109 = v108 + 8 * v106;
                                if (*(_DWORD *)(v109 + 4) == (_DWORD)v88 && v109 != v107)
                                {
                                  v11 = v86;
                                  goto LABEL_126;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v86;
        }
        while (v86 != v11);
        v86 = v11;
LABEL_126:
        result = v114;
        v6 = v115;
        v121 = v86;
      }
      if (v116 == v11)
        goto LABEL_129;
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_129:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::GradientConstantDataHandle1>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8963537098E96576;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8963537098E96576;
      if (*(_QWORD *)&v3 <= 0x8963537098E96576)
        v5 = 0x8963537098E96576 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8963537098E96576;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8963537098E96576)
            {
              if (v7[2] == 0x8963537098E96576)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8963537098E96576)
          {
            if (v7[2] == 0x8963537098E96576)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::GradientConstantDataHandle1]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273368;
  *(_QWORD *)(v11 + 8) = 0x8963537098E96576;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8963537098E96576, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8963537098E96576;
  v15[1] = "md::ls::GradientConstantDataHandle1]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8963537098E96576, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B29B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7B8C320EC5754EB9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7B8C320EC5754EB9;
      if (*(_QWORD *)&v3 <= 0x7B8C320EC5754EB9uLL)
        v5 = 0x7B8C320EC5754EB9uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7B8C320EC5754EB9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7B8C320EC5754EB9)
            {
              if (v7[2] == 0x7B8C320EC5754EB9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7B8C320EC5754EB9)
          {
            if (v7[2] == 0x7B8C320EC5754EB9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>]";
  *(_QWORD *)(v11 + 24) = 94;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273938;
  *(_QWORD *)(v11 + 8) = 0x7B8C320EC5754EB9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7B8C320EC5754EB9uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7B8C320EC5754EB9;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>]";
  v15[2] = 94;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7B8C320EC5754EB9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B2BD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::GradientConstantDataHandle2>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8963527098E963C3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8963527098E963C3;
      if (*(_QWORD *)&v3 <= 0x8963527098E963C3)
        v5 = 0x8963527098E963C3 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8963527098E963C3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8963527098E963C3)
            {
              if (v7[2] == 0x8963527098E963C3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8963527098E963C3)
          {
            if (v7[2] == 0x8963527098E963C3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::GradientConstantDataHandle2]";
  *(_QWORD *)(v11 + 24) = 35;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273398;
  *(_QWORD *)(v11 + 8) = 0x8963527098E963C3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8963527098E963C3, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8963527098E963C3;
  v15[1] = "md::ls::GradientConstantDataHandle2]";
  v15[2] = 35;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8963527098E963C3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B2E00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle2>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle2>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle2>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle2>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle1>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle1>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle1>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle1>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287478;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287478;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6B32FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42874C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42874C0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x8DB28088BB3C2FE3;
  v2[1] = "md::ls::MaterialStyleConstantDataHandle]";
  *(_QWORD *)&result = 39;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4080;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>]";
  v2[5] = 89;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42782E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42782E0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t ***v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  md *v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::MaterialStyleConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v117 = v7;
  v118 = v3;
  v119 = (_QWORD *)v4;
  v120 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v121 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v121 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v98 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v98 = 0;
      }
      else
      {
        v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v97[3];
        v98 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = *v24;
      v122 = v58;
      v59 = v38[967];
      if (v58 < (unint64_t)((v38[968] - v59) >> 3))
      {
        v60 = *(_QWORD *)(v59 + 8 * v58);
        if (v60 && HIDWORD(v58) == HIDWORD(v60))
        {
          v87 = v38[970];
          v88 = (uint64_t *)(v87 + 24 * v60);
          if (v88 != (uint64_t *)v38[971] && v87 != 0)
          {
            v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::MaterialStyle>> const&>,std::tuple<>>((uint64_t)(v38 + 954), v58, &v122);
            ++v90[3];
            v91 = *v88;
            if (v91)
            {
              if ((v92 & 1) == 0
              {
                do
                  v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index = v113;
                v10 = a1;
              }
              v93 = v50[1];
              if (v93)
              {
                v94 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index;
                v95 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index >= v93)
                    v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index % v93;
                }
                else
                {
                  v96 = (v93 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index;
                }
                v99 = *(_QWORD **)(*v50 + 8 * v96);
                if (v99)
                {
                  v100 = (_QWORD *)*v99;
                  if (v100)
                  {
                    if (v95.u32[0] < 2uLL)
                    {
                      v101 = v93 - 1;
                      while (1)
                      {
                        v103 = v100[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index == v103)
                        {
                          if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index)
                            goto LABEL_130;
                        }
                        else if ((v103 & v101) != v96)
                        {
                          goto LABEL_72;
                        }
                        v100 = (_QWORD *)*v100;
                        if (!v100)
                          goto LABEL_72;
                      }
                    }
                    do
                    {
                      v102 = v100[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index == v102)
                      {
                        if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index)
                        {
LABEL_130:
                          if ((v104 & 1) == 0)
                          {
                            if ((_DWORD)v114)
                            {
                              md::typeToIntMap(v114);
                              v10 = a1;
                            }
                          }
                          if (!qword_1EE5779D0)
                            goto LABEL_162;
                          v105 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                          v105.i16[0] = vaddlv_u8(v105);
                          if (v105.u32[0] > 1uLL)
                          {
                            v106 = v94;
                            if (v94 >= qword_1EE5779D0)
                              v106 = v94 % qword_1EE5779D0;
                          }
                          else
                          {
                            v106 = (qword_1EE5779D0 - 1) & v94;
                          }
                          v107 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v106);
                          if (!v107 || (v108 = *v107) == 0)
LABEL_162:
                            abort();
                          if (v105.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v110 = v108[1];
                              if ((uint64_t *)v94 == v110)
                              {
                                if (v108[2] == (uint64_t *)v94)
                                  goto LABEL_151;
                              }
                              else if (((unint64_t)v110 & (qword_1EE5779D0 - 1)) != v106)
                              {
                                goto LABEL_162;
                              }
                              v108 = (uint64_t **)*v108;
                              if (!v108)
                                goto LABEL_162;
                            }
                          }
                          while (1)
                          {
                            v109 = (unint64_t)v108[1];
                            if (v94 == v109)
                            {
                              if (v108[2] == (uint64_t *)v94)
                              {
LABEL_151:
                                v111 = *((int *)v108 + 6);
                                v112 = *((int *)v108 + 7);
                                if ((_DWORD)v111 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v111, v91, 1);
                                if ((_DWORD)v112 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v112, v91, 2);
                                goto LABEL_72;
                              }
                            }
                            else
                            {
                              if (v109 >= qword_1EE5779D0)
                                v109 %= (unint64_t)qword_1EE5779D0;
                              if (v109 != v106)
                                goto LABEL_162;
                            }
                            v108 = (uint64_t **)*v108;
                            if (!v108)
                              goto LABEL_162;
                          }
                        }
                      }
                      else
                      {
                        if (v102 >= v93)
                          v102 %= v93;
                        if (v102 != v96)
                          break;
                      }
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v8 = (_QWORD *)v117[4];
      v62 = v121 + 1;
      v121 = v62;
      if (v62 == v8)
      {
        result = v116;
        if (v9 == v8)
          goto LABEL_161;
      }
      else
      {
        v63 = v118[4];
        result = v116;
        do
        {
          v64 = *((unsigned int *)v62 + 1);
          v65 = v64 >> 7;
          if (v64 >> 7 < (v118[5] - v63) >> 3)
          {
            v66 = *(_QWORD *)(v63 + 8 * v65);
            if (v66)
            {
              v67 = v64 & 0x7F;
              v68 = *(unsigned __int16 *)(v66 + 2 * v67);
              v69 = v118[7];
              v70 = v118[8];
              if (v68 < (v70 - v69) >> 3)
              {
                v71 = v69 + 8 * v68;
                if (v71 != v70 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
                {
                  v73 = v119[4];
                  if (v65 < (v119[5] - v73) >> 3)
                  {
                    v74 = *(_QWORD *)(v73 + 8 * v65);
                    if (v74)
                    {
                      v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                      v76 = v119[7];
                      v77 = v119[8];
                      if (v75 < (v77 - v76) >> 3)
                      {
                        v78 = v76 + 8 * v75;
                        if (v78 != v77 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                        {
                          v80 = v120[4];
                          if (v65 < (v120[5] - v80) >> 3)
                          {
                            v81 = *(_QWORD *)(v80 + 8 * v65);
                            if (v81)
                            {
                              v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                              v84 = v120[7];
                              v83 = v120[8];
                              if (v82 < (v83 - v84) >> 3)
                              {
                                v85 = v84 + 8 * v82;
                                if (*(_DWORD *)(v85 + 4) == (_DWORD)v64 && v85 != v83)
                                {
                                  v8 = v62;
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
        }
        while (v62 != v8);
        v62 = v8;
LABEL_100:
        v121 = v62;
        if (v9 == v8)
          goto LABEL_161;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_161:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6B3BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4B8054294B8B9B55;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4B8054294B8B9B55;
      if (*(_QWORD *)&v3 <= 0x4B8054294B8B9B55uLL)
        v5 = 0x4B8054294B8B9B55uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4B8054294B8B9B55;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4B8054294B8B9B55)
            {
              if (v7[2] == 0x4B8054294B8B9B55)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4B8054294B8B9B55)
          {
            if (v7[2] == 0x4B8054294B8B9B55)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>]";
  *(_QWORD *)(v11 + 24) = 89;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42737B8;
  *(_QWORD *)(v11 + 8) = 0x4B8054294B8B9B55;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4B8054294B8B9B55uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4B8054294B8B9B55;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>]";
  v15[2] = 89;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4B8054294B8B9B55, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B3E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42889D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42889D8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6B4030(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288A20;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288A20;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xD5AD9B8C3FE62EE8;
  v2[1] = "md::ls::StyleGroundOcclusionConstantDataHandle]";
  *(_QWORD *)&result = 46;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4090;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>]";
  v2[5] = 96;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278D90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278D90;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t ***v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  md *v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v117 = v7;
  v118 = v3;
  v119 = (_QWORD *)v4;
  v120 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v121 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v121 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v98 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v98 = 0;
      }
      else
      {
        v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v97[3];
        v98 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = *v24;
      v122 = v58;
      v59 = v38[893];
      if (v58 < (unint64_t)((v38[894] - v59) >> 3))
      {
        v60 = *(_QWORD *)(v59 + 8 * v58);
        if (v60 && HIDWORD(v58) == HIDWORD(v60))
        {
          v87 = v38[896];
          v88 = (uint64_t *)(v87 + 24 * v60);
          if (v88 != (uint64_t *)v38[897] && v87 != 0)
          {
            v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>> const&>,std::tuple<>>((uint64_t)(v38 + 885), v58, &v122);
            ++v90[3];
            v91 = *v88;
            if (v91)
            {
              if ((v92 & 1) == 0
              {
                do
                  v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index = v113;
                v10 = a1;
              }
              v93 = v50[1];
              if (v93)
              {
                v94 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index;
                v95 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index >= v93)
                    v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index % v93;
                }
                else
                {
                  v96 = (v93 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index;
                }
                v99 = *(_QWORD **)(*v50 + 8 * v96);
                if (v99)
                {
                  v100 = (_QWORD *)*v99;
                  if (v100)
                  {
                    if (v95.u32[0] < 2uLL)
                    {
                      v101 = v93 - 1;
                      while (1)
                      {
                        v103 = v100[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index == v103)
                        {
                          if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index)
                            goto LABEL_130;
                        }
                        else if ((v103 & v101) != v96)
                        {
                          goto LABEL_72;
                        }
                        v100 = (_QWORD *)*v100;
                        if (!v100)
                          goto LABEL_72;
                      }
                    }
                    do
                    {
                      v102 = v100[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index == v102)
                      {
                        if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index)
                        {
LABEL_130:
                          if ((v104 & 1) == 0)
                          {
                            if ((_DWORD)v114)
                            {
                              md::typeToIntMap(v114);
                              v10 = a1;
                            }
                          }
                          if (!qword_1EE5779D0)
                            goto LABEL_162;
                          v105 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                          v105.i16[0] = vaddlv_u8(v105);
                          if (v105.u32[0] > 1uLL)
                          {
                            v106 = v94;
                            if (v94 >= qword_1EE5779D0)
                              v106 = v94 % qword_1EE5779D0;
                          }
                          else
                          {
                            v106 = (qword_1EE5779D0 - 1) & v94;
                          }
                          v107 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v106);
                          if (!v107 || (v108 = *v107) == 0)
LABEL_162:
                            abort();
                          if (v105.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v110 = v108[1];
                              if ((uint64_t *)v94 == v110)
                              {
                                if (v108[2] == (uint64_t *)v94)
                                  goto LABEL_151;
                              }
                              else if (((unint64_t)v110 & (qword_1EE5779D0 - 1)) != v106)
                              {
                                goto LABEL_162;
                              }
                              v108 = (uint64_t **)*v108;
                              if (!v108)
                                goto LABEL_162;
                            }
                          }
                          while (1)
                          {
                            v109 = (unint64_t)v108[1];
                            if (v94 == v109)
                            {
                              if (v108[2] == (uint64_t *)v94)
                              {
LABEL_151:
                                v111 = *((int *)v108 + 6);
                                v112 = *((int *)v108 + 7);
                                if ((_DWORD)v111 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v111, v91, 1);
                                if ((_DWORD)v112 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v112, v91, 2);
                                goto LABEL_72;
                              }
                            }
                            else
                            {
                              if (v109 >= qword_1EE5779D0)
                                v109 %= (unint64_t)qword_1EE5779D0;
                              if (v109 != v106)
                                goto LABEL_162;
                            }
                            v108 = (uint64_t **)*v108;
                            if (!v108)
                              goto LABEL_162;
                          }
                        }
                      }
                      else
                      {
                        if (v102 >= v93)
                          v102 %= v93;
                        if (v102 != v96)
                          break;
                      }
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v8 = (_QWORD *)v117[4];
      v62 = v121 + 1;
      v121 = v62;
      if (v62 == v8)
      {
        result = v116;
        if (v9 == v8)
          goto LABEL_161;
      }
      else
      {
        v63 = v118[4];
        result = v116;
        do
        {
          v64 = *((unsigned int *)v62 + 1);
          v65 = v64 >> 7;
          if (v64 >> 7 < (v118[5] - v63) >> 3)
          {
            v66 = *(_QWORD *)(v63 + 8 * v65);
            if (v66)
            {
              v67 = v64 & 0x7F;
              v68 = *(unsigned __int16 *)(v66 + 2 * v67);
              v69 = v118[7];
              v70 = v118[8];
              if (v68 < (v70 - v69) >> 3)
              {
                v71 = v69 + 8 * v68;
                if (v71 != v70 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
                {
                  v73 = v119[4];
                  if (v65 < (v119[5] - v73) >> 3)
                  {
                    v74 = *(_QWORD *)(v73 + 8 * v65);
                    if (v74)
                    {
                      v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                      v76 = v119[7];
                      v77 = v119[8];
                      if (v75 < (v77 - v76) >> 3)
                      {
                        v78 = v76 + 8 * v75;
                        if (v78 != v77 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                        {
                          v80 = v120[4];
                          if (v65 < (v120[5] - v80) >> 3)
                          {
                            v81 = *(_QWORD *)(v80 + 8 * v65);
                            if (v81)
                            {
                              v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                              v84 = v120[7];
                              v83 = v120[8];
                              if (v82 < (v83 - v84) >> 3)
                              {
                                v85 = v84 + 8 * v82;
                                if (*(_DWORD *)(v85 + 4) == (_DWORD)v64 && v85 != v83)
                                {
                                  v8 = v62;
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
        }
        while (v62 != v8);
        v62 = v8;
LABEL_100:
        v121 = v62;
        if (v9 == v8)
          goto LABEL_161;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_161:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6B492C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD5AD9B8C3FE62EE8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD5AD9B8C3FE62EE8;
      if (*(_QWORD *)&v3 <= 0xD5AD9B8C3FE62EE8)
        v5 = 0xD5AD9B8C3FE62EE8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD5AD9B8C3FE62EE8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD5AD9B8C3FE62EE8)
            {
              if (v7[2] == 0xD5AD9B8C3FE62EE8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD5AD9B8C3FE62EE8)
          {
            if (v7[2] == 0xD5AD9B8C3FE62EE8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::StyleGroundOcclusionConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 46;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42742C8;
  *(_QWORD *)(v11 + 8) = 0xD5AD9B8C3FE62EE8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD5AD9B8C3FE62EE8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD5AD9B8C3FE62EE8;
  v15[1] = "md::ls::StyleGroundOcclusionConstantDataHandle]";
  v15[2] = 46;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD5AD9B8C3FE62EE8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B4B50(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCD7B3DB2C2D258CALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCD7B3DB2C2D258CALL;
      if (*(_QWORD *)&v3 <= 0xCD7B3DB2C2D258CALL)
        v5 = 0xCD7B3DB2C2D258CALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCD7B3DB2C2D258CALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCD7B3DB2C2D258CALL)
            {
              if (v7[2] == 0xCD7B3DB2C2D258CALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCD7B3DB2C2D258CALL)
          {
            if (v7[2] == 0xCD7B3DB2C2D258CALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>]";
  *(_QWORD *)(v11 + 24) = 96;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42739F8;
  *(_QWORD *)(v11 + 8) = 0xCD7B3DB2C2D258CALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCD7B3DB2C2D258CALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCD7B3DB2C2D258CALL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>]";
  v15[2] = 96;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCD7B3DB2C2D258CALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B4D78(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::StyleGroundOcclusionConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleGroundOcclusionConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleGroundOcclusionConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleGroundOcclusionConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42884C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42884C8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6B5100(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288510;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288510;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x8E45E81B6E5A8E0ELL;
  v2[1] = "md::ls::StyleRouteLineMaskDataKeyHandle]";
  *(_QWORD *)&result = 39;
  *((_OWORD *)v2 + 1) = xmmword_19FFB40A0;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>]";
  v2[5] = 94;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278B08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278B08;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD **v55;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned __int8 v77;
  unint64_t v78;
  unint64_t v79;
  uint8x8_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint8x8_t v90;
  unint64_t v91;
  uint64_t ***v92;
  uint64_t **v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v123;
  md *v124;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v127 = v7;
  v128 = v3;
  v129 = (_QWORD *)v4;
  v130 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v131 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v127))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v131 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v127);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v126 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = v3[11];
        v25 = v3[10] + 8 * v19;
      }
      else
      {
        v24 = v3[11];
        v25 = v24;
      }
      if (v25 == v24)
        v26 = 0;
      else
        v26 = (unint64_t *)v25;
      v27 = v6[4];
      if (v16 < (v6[5] - v27) >> 3
        && (v28 = *(_QWORD *)(v27 + 8 * v16)) != 0
        && (v29 = *(unsigned __int16 *)(v28 + 2 * (HIDWORD(v14) & 0x7F)),
            v31 = v6[7],
            v30 = v6[8],
            v29 < (v30 - v31) >> 3)
        && ((v32 = v31 + 8 * v29, v32 != v30) ? (v33 = *(_DWORD *)(v32 + 4) == (_DWORD)v15) : (v33 = 0), v33))
      {
        v34 = v6[11];
        v35 = v6[10] + 8 * v29;
      }
      else
      {
        v34 = v6[11];
        v35 = v34;
      }
      if (v35 == v34)
        v36 = 0;
      else
        v36 = (unint64_t *)v35;
      v37 = **(_QWORD **)(v10 + 8);
      v38 = *(_QWORD **)v37;
      v39 = *(_QWORD **)(v37 + 8);
      if (v38 != v39)
      {
        while (*v38 != 0x41D4E9297E100630)
        {
          v38 += 5;
          if (v38 == v39)
            goto LABEL_48;
        }
      }
      if (v38 == v39)
      {
LABEL_48:
        v40 = 0;
      }
      else
      {
        v40 = (_QWORD *)v38[3];
        v41 = (std::__shared_weak_count *)v38[4];
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      v45 = *v36;
      v46 = *v36;
      v47 = v40[50];
      v48 = (v40[51] - v47) >> 3;
      if (v46 < v48
        && (v49 = *(_QWORD *)(v47 + 8 * v46)) != 0
        && HIDWORD(v45) == HIDWORD(v49)
        && ((v50 = v40[53], v50 + 16 * v49 != v40[54]) ? (v51 = v50 == 0) : (v51 = 1), !v51))
      {
        v57 = *(_QWORD *)(v47 + 8 * v46);
        v58 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v45, v36);
        ++v58[3];
        v59 = v50 + 16 * v57;
        v10 = a1;
        v52 = *(_QWORD **)(v59 + 8);
        v45 = *v36;
        v47 = v40[50];
        v46 = *v36;
        if (v46 >= (v40[51] - v47) >> 3)
          goto LABEL_69;
      }
      else
      {
        v52 = 0;
        if (v46 >= v48)
          goto LABEL_69;
      }
      v53 = *(_QWORD *)(v47 + 8 * v46);
      if (v53 && HIDWORD(v45) == HIDWORD(v53))
      {
        v54 = v40[53];
        v55 = (_QWORD **)(v54 + 16 * v53);
        if (v55 == (_QWORD **)v40[54] || v54 == 0)
        {
          v83 = 0;
        }
        else
        {
          v82 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v40 + 37), v45, v36);
          ++v82[3];
          v83 = *v55;
        }
        v10 = a1;
        goto LABEL_70;
      }
LABEL_69:
      v83 = 0;
LABEL_70:
      v60 = *v26;
      v61 = *v26;
      v62 = v40[269];
      if (v61 < (v40[270] - v62) >> 3
        && ((v63 = *(_QWORD *)(v62 + 8 * v61)) != 0 ? (v64 = HIDWORD(v60) == HIDWORD(v63)) : (v64 = 0), v64))
      {
        v66 = v40[272] + 24 * v63;
        v65 = v40[273];
      }
      else
      {
        v65 = v40[273];
        v66 = v65;
      }
      if (v66 == v65)
        v67 = 0;
      else
        v67 = v66;
      if (v67)
      {
        v68 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::ColorStyleCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::ColorStyleCacheKey>> const&>,std::tuple<>>((uint64_t)(v40 + 256), v60, v26);
        ++v68[3];
      }
      v69 = std::__hash_table<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::__unordered_map_hasher<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,md::ColorStyleCacheKeyHasher,std::equal_to<md::ColorStyleCacheKey>,true>,std::__unordered_map_equal<md::ColorStyleCacheKey,std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>,std::equal_to<md::ColorStyleCacheKey>,md::ColorStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::ColorStyleCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleColor>>>>>::find<md::ColorStyleCacheKey>(v40 + 246, v67);
      if (v69)
        v70 = *(_QWORD *)(v69 + 40);
      else
        v70 = 0;
      v132 = v70;
      v71 = v40[232];
      if (v70 < (unint64_t)((v40[233] - v71) >> 3))
      {
        v72 = *(_QWORD *)(v71 + 8 * v70);
        if (v72)
        {
          if (HIDWORD(v70) == HIDWORD(v72))
          {
            v73 = v40[235];
            if (v73)
            {
              v74 = (uint64_t *)(v73 + 24 * v72);
              if (v74 != (uint64_t *)v40[236])
              {
                v75 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleRouteLineMask>> const&>,std::tuple<>>((uint64_t)(v40 + 219), v70, &v132);
                ++v75[3];
                v76 = *v74;
                if (v76)
                {
                  if ((v77 & 1) == 0
                  {
                    do
                      v123 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                    while (__stlxr(v123 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                    gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index = v123;
                    v10 = a1;
                  }
                  v78 = v52[1];
                  if (v78)
                  {
                    v79 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index;
                    v80 = (uint8x8_t)vcnt_s8((int8x8_t)v78);
                    v80.i16[0] = vaddlv_u8(v80);
                    if (v80.u32[0] > 1uLL)
                    {
                      v81 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index;
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index >= v78)
                        v81 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index
                            % v78;
                    }
                    else
                    {
                      v81 = (v78 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index;
                    }
                    v84 = *(_QWORD **)(*v52 + 8 * v81);
                    if (v84)
                    {
                      v85 = (_QWORD *)*v84;
                      if (v85)
                      {
                        if (v80.u32[0] < 2uLL)
                        {
                          v86 = v78 - 1;
                          while (1)
                          {
                            v88 = v85[1];
                            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index == v88)
                            {
                              if (v85[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index)
                                goto LABEL_114;
                            }
                            else if ((v88 & v86) != v81)
                            {
                              goto LABEL_139;
                            }
                            v85 = (_QWORD *)*v85;
                            if (!v85)
                              goto LABEL_139;
                          }
                        }
                        do
                        {
                          v87 = v85[1];
                          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index == v87)
                          {
                            if (v85[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index)
                            {
LABEL_114:
                              if ((v89 & 1) == 0)
                              {
                                if ((_DWORD)v124)
                                {
                                  md::typeToIntMap(v124);
                                  v10 = a1;
                                }
                              }
                              if (!qword_1EE5779D0)
                                goto LABEL_176;
                              v90 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                              v90.i16[0] = vaddlv_u8(v90);
                              if (v90.u32[0] > 1uLL)
                              {
                                v91 = v79;
                                if (v79 >= qword_1EE5779D0)
                                  v91 = v79 % qword_1EE5779D0;
                              }
                              else
                              {
                                v91 = (qword_1EE5779D0 - 1) & v79;
                              }
                              v92 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v91);
                              if (!v92 || (v93 = *v92) == 0)
LABEL_176:
                                abort();
                              if (v90.u32[0] < 2uLL)
                              {
                                while (1)
                                {
                                  v95 = v93[1];
                                  if ((uint64_t *)v79 == v95)
                                  {
                                    if (v93[2] == (uint64_t *)v79)
                                      goto LABEL_135;
                                  }
                                  else if (((unint64_t)v95 & (qword_1EE5779D0 - 1)) != v91)
                                  {
                                    goto LABEL_176;
                                  }
                                  v93 = (uint64_t **)*v93;
                                  if (!v93)
                                    goto LABEL_176;
                                }
                              }
                              while (1)
                              {
                                v94 = (unint64_t)v93[1];
                                if (v79 == v94)
                                {
                                  if (v93[2] == (uint64_t *)v79)
                                  {
LABEL_135:
                                    v96 = *((int *)v93 + 6);
                                    v97 = *((int *)v93 + 7);
                                    if ((_DWORD)v96 != -1)
                                      ggl::PipelineSetup::setConstantData(v83, v96, v76, 1);
                                    if ((_DWORD)v97 != -1)
                                      ggl::PipelineSetup::setConstantData(v83, v97, v76, 2);
                                    goto LABEL_139;
                                  }
                                }
                                else
                                {
                                  if (v94 >= qword_1EE5779D0)
                                    v94 %= (unint64_t)qword_1EE5779D0;
                                  if (v94 != v91)
                                    goto LABEL_176;
                                }
                                v93 = (uint64_t **)*v93;
                                if (!v93)
                                  goto LABEL_176;
                              }
                            }
                          }
                          else
                          {
                            if (v87 >= v78)
                              v87 %= v78;
                            if (v87 != v81)
                              break;
                          }
                          v85 = (_QWORD *)*v85;
                        }
                        while (v85);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_139:
      v8 = (_QWORD *)v127[4];
      v98 = v131 + 1;
      v131 = v98;
      if (v98 == v8)
      {
        result = v126;
        if (v9 == v8)
          goto LABEL_175;
      }
      else
      {
        v99 = v128[4];
        result = v126;
        do
        {
          v100 = *((unsigned int *)v98 + 1);
          v101 = v100 >> 7;
          if (v100 >> 7 < (v128[5] - v99) >> 3)
          {
            v102 = *(_QWORD *)(v99 + 8 * v101);
            if (v102)
            {
              v103 = v100 & 0x7F;
              v104 = *(unsigned __int16 *)(v102 + 2 * v103);
              v105 = v128[7];
              v106 = v128[8];
              if (v104 < (v106 - v105) >> 3)
              {
                v107 = v105 + 8 * v104;
                if (v107 != v106 && *(_DWORD *)(v107 + 4) == (_DWORD)v100)
                {
                  v109 = v129[4];
                  if (v101 < (v129[5] - v109) >> 3)
                  {
                    v110 = *(_QWORD *)(v109 + 8 * v101);
                    if (v110)
                    {
                      v111 = *(unsigned __int16 *)(v110 + 2 * v103);
                      v112 = v129[7];
                      v113 = v129[8];
                      if (v111 < (v113 - v112) >> 3)
                      {
                        v114 = v112 + 8 * v111;
                        if (v114 != v113 && *(_DWORD *)(v114 + 4) == (_DWORD)v100)
                        {
                          v116 = v130[4];
                          if (v101 < (v130[5] - v116) >> 3)
                          {
                            v117 = *(_QWORD *)(v116 + 8 * v101);
                            if (v117)
                            {
                              v118 = *(unsigned __int16 *)(v117 + 2 * v103);
                              v120 = v130[7];
                              v119 = v130[8];
                              if (v118 < (v119 - v120) >> 3)
                              {
                                v121 = v120 + 8 * v118;
                                if (*(_DWORD *)(v121 + 4) == (_DWORD)v100 && v121 != v119)
                                {
                                  v8 = v98;
                                  goto LABEL_167;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v98;
        }
        while (v98 != v8);
        v98 = v8;
LABEL_167:
        v131 = v98;
        if (v9 == v8)
          goto LABEL_175;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_175:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6B5A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8E45E81B6E5A8E0ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8E45E81B6E5A8E0ELL;
      if (*(_QWORD *)&v3 <= 0x8E45E81B6E5A8E0ELL)
        v5 = 0x8E45E81B6E5A8E0ELL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8E45E81B6E5A8E0ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8E45E81B6E5A8E0ELL)
            {
              if (v7[2] == 0x8E45E81B6E5A8E0ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8E45E81B6E5A8E0ELL)
          {
            if (v7[2] == 0x8E45E81B6E5A8E0ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::StyleRouteLineMaskDataKeyHandle]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273FC8;
  *(_QWORD *)(v11 + 8) = 0x8E45E81B6E5A8E0ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8E45E81B6E5A8E0ELL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8E45E81B6E5A8E0ELL;
  v15[1] = "md::ls::StyleRouteLineMaskDataKeyHandle]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8E45E81B6E5A8E0ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B5CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x12E52FADC2088C61;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x12E52FADC2088C61;
      if (*(_QWORD *)&v3 <= 0x12E52FADC2088C61uLL)
        v5 = 0x12E52FADC2088C61uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x12E52FADC2088C61;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x12E52FADC2088C61)
            {
              if (v7[2] == 0x12E52FADC2088C61)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x12E52FADC2088C61)
          {
            if (v7[2] == 0x12E52FADC2088C61)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>]";
  *(_QWORD *)(v11 + 24) = 94;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273998;
  *(_QWORD *)(v11 + 8) = 0x12E52FADC2088C61;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x12E52FADC2088C61uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x12E52FADC2088C61;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>]";
  v15[2] = 94;
  gdc::Registry::_registerStorageDataSignals(a1, 0x12E52FADC2088C61, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B5EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskDataKeyHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskDataKeyHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskDataKeyHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskDataKeyHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288438;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288438;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6B6264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288480;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288480;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xA50DD2A5BD75DBD6;
  v2[1] = "md::ls::StyleEmissiveDataKeyHandle]";
  *(_QWORD *)&result = 34;
  *((_OWORD *)v2 + 1) = xmmword_19FFB40B0;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>]";
  v2[5] = 94;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278AC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278AC0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  int8x8_t *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int8x8_t v45;
  unint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  int8x8_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  int8x8_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  _QWORD *v65;
  uint64_t *v66;
  unint64_t v67;
  int8x8_t v68;
  uint64_t v69;
  int8x8_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned __int8 v74;
  unint64_t v75;
  unint64_t v76;
  uint8x8_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint8x8_t v87;
  unint64_t v88;
  uint64_t ***v89;
  uint64_t **v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v120;
  md *v121;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v124 = v7;
  v125 = v3;
  v126 = (_QWORD *)v4;
  v127 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v128 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v124))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v128 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v124);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v123 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v39 = 0;
      }
      else
      {
        v39 = (int8x8_t *)v36[3];
        v38 = (std::__shared_weak_count *)v36[4];
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v39[50];
      v46 = (uint64_t)(*(_QWORD *)&v39[51] - *(_QWORD *)&v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(*(_QWORD *)&v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v39[53], *(_QWORD *)&v48 + 16 * v47 != *(_QWORD *)&v39[54])
          ? (v49 = *(_QWORD *)&v48 == 0)
          : (v49 = 1),
            !v49))
      {
        v55 = *(_QWORD *)(*(_QWORD *)&v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)&v39[37], v43, v34);
        ++v56[3];
        v57 = *(_QWORD *)&v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v39[50];
        v44 = *v34;
        if (v44 >= (uint64_t)(*(_QWORD *)&v39[51] - *(_QWORD *)&v45) >> 3)
        {
LABEL_66:
          v80 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(*(_QWORD *)&v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v39[53];
      v53 = (_QWORD **)(*(_QWORD *)&v52 + 16 * v51);
      if (v53 == *(_QWORD ***)&v39[54] || *(_QWORD *)&v52 == 0)
      {
        v80 = 0;
      }
      else
      {
        v79 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)&v39[37], v43, v34);
        ++v79[3];
        v80 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = md::getCachedHandle<md::CachedKey<md::StyleEmissiveColorCacheKey>,geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,unsigned long,md::CachedKey<md::StyleEmissiveColorCacheKey>,std::hash<unsigned long>>(v39 + 330, *v24);
      v129 = v58;
      if (v58)
      {
        v59 = v39[343];
        if (v58 < (unint64_t)((uint64_t)(*(_QWORD *)&v39[344] - *(_QWORD *)&v59) >> 3)
          && ((v60 = *(_QWORD *)(*(_QWORD *)&v59 + 8 * v58)) != 0
            ? (v61 = HIDWORD(v58) == HIDWORD(v60))
            : (v61 = 0),
              v61))
        {
          v63 = *(_QWORD *)&v39[346] + 24 * v60;
          v62 = (uint64_t)v39[347];
        }
        else
        {
          v62 = (uint64_t)v39[347];
          v63 = v62;
        }
        if (v63 == v62)
          v64 = 0;
        else
          v64 = (float *)v63;
        if (v64)
        {
          v65 = std::__hash_table<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::__unordered_map_equal<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>,std::equal_to<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,std::hash<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::CachedKey<md::StyleEmissiveColorCacheKey>> const&>,std::tuple<>>((uint64_t)&v39[335], v58, &v129);
          ++v65[3];
        }
        v66 = std::__hash_table<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::__unordered_map_hasher<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,md::StyleEmissiveColorCacheKeyHasher,std::equal_to<md::StyleEmissiveColorCacheKey>,true>,std::__unordered_map_equal<md::StyleEmissiveColorCacheKey,std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<md::StyleEmissiveColorCacheKey>,md::StyleEmissiveColorCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleEmissiveColorCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>>>::find<md::StyleEmissiveColorCacheKey>(&v39[320], v64);
        v67 = v66 ? v66[5] : 0;
        v130 = v67;
        v68 = v39[306];
        if (v67 < (unint64_t)((uint64_t)(*(_QWORD *)&v39[307] - *(_QWORD *)&v68) >> 3))
        {
          v69 = *(_QWORD *)(*(_QWORD *)&v68 + 8 * v67);
          if (v69)
          {
            if (HIDWORD(v67) == HIDWORD(v69))
            {
              v70 = v39[309];
              if (v70)
              {
                v71 = (uint64_t *)(*(_QWORD *)&v70 + 24 * v69);
                if (v71 != (uint64_t *)v39[310])
                {
                  v72 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleEmissiveColor>> const&>,std::tuple<>>((uint64_t)&v39[293], v67, &v130);
                  ++v72[3];
                  v73 = *v71;
                  if (*v71)
                  {
                    if ((v74 & 1) == 0
                    {
                      do
                        v120 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                      while (__stlxr(v120 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index = v120;
                      v10 = a1;
                    }
                    v75 = v50[1];
                    if (v75)
                    {
                      v76 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index;
                      v77 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
                      v77.i16[0] = vaddlv_u8(v77);
                      if (v77.u32[0] > 1uLL)
                      {
                        v78 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index;
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index >= v75)
                          v78 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index
                              % v75;
                      }
                      else
                      {
                        v78 = (v75 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index;
                      }
                      v81 = *(_QWORD **)(*v50 + 8 * v78);
                      if (v81)
                      {
                        v82 = (_QWORD *)*v81;
                        if (v82)
                        {
                          if (v77.u32[0] < 2uLL)
                          {
                            v83 = v75 - 1;
                            while (1)
                            {
                              v85 = v82[1];
                              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index == v85)
                              {
                                if (v82[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index)
                                  goto LABEL_112;
                              }
                              else if ((v85 & v83) != v78)
                              {
                                goto LABEL_137;
                              }
                              v82 = (_QWORD *)*v82;
                              if (!v82)
                                goto LABEL_137;
                            }
                          }
                          do
                          {
                            v84 = v82[1];
                            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index == v84)
                            {
                              if (v82[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index)
                              {
LABEL_112:
                                if ((v86 & 1) == 0)
                                {
                                  if ((_DWORD)v121)
                                  {
                                    md::typeToIntMap(v121);
                                    v10 = a1;
                                  }
                                }
                                if (!qword_1EE5779D0)
                                  goto LABEL_174;
                                v87 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                                v87.i16[0] = vaddlv_u8(v87);
                                if (v87.u32[0] > 1uLL)
                                {
                                  v88 = v76;
                                  if (v76 >= qword_1EE5779D0)
                                    v88 = v76 % qword_1EE5779D0;
                                }
                                else
                                {
                                  v88 = (qword_1EE5779D0 - 1) & v76;
                                }
                                v89 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v88);
                                if (!v89 || (v90 = *v89) == 0)
LABEL_174:
                                  abort();
                                if (v87.u32[0] < 2uLL)
                                {
                                  while (1)
                                  {
                                    v92 = v90[1];
                                    if ((uint64_t *)v76 == v92)
                                    {
                                      if (v90[2] == (uint64_t *)v76)
                                        goto LABEL_133;
                                    }
                                    else if (((unint64_t)v92 & (qword_1EE5779D0 - 1)) != v88)
                                    {
                                      goto LABEL_174;
                                    }
                                    v90 = (uint64_t **)*v90;
                                    if (!v90)
                                      goto LABEL_174;
                                  }
                                }
                                while (1)
                                {
                                  v91 = (unint64_t)v90[1];
                                  if (v76 == v91)
                                  {
                                    if (v90[2] == (uint64_t *)v76)
                                    {
LABEL_133:
                                      v93 = *((int *)v90 + 6);
                                      v94 = *((int *)v90 + 7);
                                      if ((_DWORD)v93 != -1)
                                        ggl::PipelineSetup::setConstantData(v80, v93, v73, 1);
                                      if ((_DWORD)v94 != -1)
                                        ggl::PipelineSetup::setConstantData(v80, v94, v73, 2);
                                      goto LABEL_137;
                                    }
                                  }
                                  else
                                  {
                                    if (v91 >= qword_1EE5779D0)
                                      v91 %= (unint64_t)qword_1EE5779D0;
                                    if (v91 != v88)
                                      goto LABEL_174;
                                  }
                                  v90 = (uint64_t **)*v90;
                                  if (!v90)
                                    goto LABEL_174;
                                }
                              }
                            }
                            else
                            {
                              if (v84 >= v75)
                                v84 %= v75;
                              if (v84 != v78)
                                break;
                            }
                            v82 = (_QWORD *)*v82;
                          }
                          while (v82);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_137:
      v8 = (_QWORD *)v124[4];
      v95 = v128 + 1;
      v128 = v95;
      if (v95 == v8)
      {
        result = v123;
        if (v9 == v8)
          goto LABEL_173;
      }
      else
      {
        v96 = v125[4];
        result = v123;
        do
        {
          v97 = *((unsigned int *)v95 + 1);
          v98 = v97 >> 7;
          if (v97 >> 7 < (v125[5] - v96) >> 3)
          {
            v99 = *(_QWORD *)(v96 + 8 * v98);
            if (v99)
            {
              v100 = v97 & 0x7F;
              v101 = *(unsigned __int16 *)(v99 + 2 * v100);
              v102 = v125[7];
              v103 = v125[8];
              if (v101 < (v103 - v102) >> 3)
              {
                v104 = v102 + 8 * v101;
                if (v104 != v103 && *(_DWORD *)(v104 + 4) == (_DWORD)v97)
                {
                  v106 = v126[4];
                  if (v98 < (v126[5] - v106) >> 3)
                  {
                    v107 = *(_QWORD *)(v106 + 8 * v98);
                    if (v107)
                    {
                      v108 = *(unsigned __int16 *)(v107 + 2 * v100);
                      v109 = v126[7];
                      v110 = v126[8];
                      if (v108 < (v110 - v109) >> 3)
                      {
                        v111 = v109 + 8 * v108;
                        if (v111 != v110 && *(_DWORD *)(v111 + 4) == (_DWORD)v97)
                        {
                          v113 = v127[4];
                          if (v98 < (v127[5] - v113) >> 3)
                          {
                            v114 = *(_QWORD *)(v113 + 8 * v98);
                            if (v114)
                            {
                              v115 = *(unsigned __int16 *)(v114 + 2 * v100);
                              v117 = v127[7];
                              v116 = v127[8];
                              if (v115 < (v116 - v117) >> 3)
                              {
                                v118 = v117 + 8 * v115;
                                if (*(_DWORD *)(v118 + 4) == (_DWORD)v97 && v118 != v116)
                                {
                                  v8 = v95;
                                  goto LABEL_165;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v95;
        }
        while (v95 != v8);
        v95 = v8;
LABEL_165:
        v128 = v95;
        if (v9 == v8)
          goto LABEL_173;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_173:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6B6BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA50DD2A5BD75DBD6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA50DD2A5BD75DBD6;
      if (*(_QWORD *)&v3 <= 0xA50DD2A5BD75DBD6)
        v5 = 0xA50DD2A5BD75DBD6 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA50DD2A5BD75DBD6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA50DD2A5BD75DBD6)
            {
              if (v7[2] == 0xA50DD2A5BD75DBD6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA50DD2A5BD75DBD6)
          {
            if (v7[2] == 0xA50DD2A5BD75DBD6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::StyleEmissiveDataKeyHandle]";
  *(_QWORD *)(v11 + 24) = 34;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42732A8;
  *(_QWORD *)(v11 + 8) = 0xA50DD2A5BD75DBD6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA50DD2A5BD75DBD6, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA50DD2A5BD75DBD6;
  v15[1] = "md::ls::StyleEmissiveDataKeyHandle]";
  v15[2] = 34;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA50DD2A5BD75DBD6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B6E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xB22A7749D4CDB850;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xB22A7749D4CDB850;
      if (*(_QWORD *)&v3 <= 0xB22A7749D4CDB850)
        v5 = 0xB22A7749D4CDB850 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xB22A7749D4CDB850;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xB22A7749D4CDB850)
            {
              if (v7[2] == 0xB22A7749D4CDB850)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xB22A7749D4CDB850)
          {
            if (v7[2] == 0xB22A7749D4CDB850)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>]";
  *(_QWORD *)(v11 + 24) = 94;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273968;
  *(_QWORD *)(v11 + 8) = 0xB22A7749D4CDB850;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xB22A7749D4CDB850, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xB22A7749D4CDB850;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>]";
  v15[2] = 94;
  gdc::Registry::_registerStorageDataSignals(a1, 0xB22A7749D4CDB850, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B7048(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::StyleEmissiveDataKeyHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleEmissiveDataKeyHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleEmissiveDataKeyHandle>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleEmissiveDataKeyHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288168;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288168;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6B73C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42881B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42881B0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xDC98991DB7473274;
  v2[1] = "md::ls::LandCoverSettingsConstantDataHandle]";
  *(_QWORD *)&result = 43;
  *((_OWORD *)v2 + 1) = xmmword_19FFB40C0;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>]";
  v2[5] = 93;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278958;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278958;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t ***v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  md *v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::LandCoverSettingsConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v117 = v7;
  v118 = v3;
  v119 = (_QWORD *)v4;
  v120 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v121 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v121 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v98 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v98 = 0;
      }
      else
      {
        v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v97[3];
        v98 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = *v24;
      v122 = v58;
      v59 = v38[380];
      if (v58 < (unint64_t)((v38[381] - v59) >> 3))
      {
        v60 = *(_QWORD *)(v59 + 8 * v58);
        if (v60 && HIDWORD(v58) == HIDWORD(v60))
        {
          v87 = v38[383];
          v88 = (uint64_t *)(v87 + 24 * v60);
          if (v88 != (uint64_t *)v38[384] && v87 != 0)
          {
            v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::LandCoverSettings>> const&>,std::tuple<>>((uint64_t)(v38 + 372), v58, &v122);
            ++v90[3];
            v91 = *v88;
            if (v91)
            {
              if ((v92 & 1) == 0
              {
                do
                  v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index = v113;
                v10 = a1;
              }
              v93 = v50[1];
              if (v93)
              {
                v94 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index;
                v95 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index >= v93)
                    v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index % v93;
                }
                else
                {
                  v96 = (v93 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index;
                }
                v99 = *(_QWORD **)(*v50 + 8 * v96);
                if (v99)
                {
                  v100 = (_QWORD *)*v99;
                  if (v100)
                  {
                    if (v95.u32[0] < 2uLL)
                    {
                      v101 = v93 - 1;
                      while (1)
                      {
                        v103 = v100[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index == v103)
                        {
                          if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index)
                            goto LABEL_130;
                        }
                        else if ((v103 & v101) != v96)
                        {
                          goto LABEL_72;
                        }
                        v100 = (_QWORD *)*v100;
                        if (!v100)
                          goto LABEL_72;
                      }
                    }
                    do
                    {
                      v102 = v100[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index == v102)
                      {
                        if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index)
                        {
LABEL_130:
                          if ((v104 & 1) == 0)
                          {
                            if ((_DWORD)v114)
                            {
                              md::typeToIntMap(v114);
                              v10 = a1;
                            }
                          }
                          if (!qword_1EE5779D0)
                            goto LABEL_162;
                          v105 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                          v105.i16[0] = vaddlv_u8(v105);
                          if (v105.u32[0] > 1uLL)
                          {
                            v106 = v94;
                            if (v94 >= qword_1EE5779D0)
                              v106 = v94 % qword_1EE5779D0;
                          }
                          else
                          {
                            v106 = (qword_1EE5779D0 - 1) & v94;
                          }
                          v107 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v106);
                          if (!v107 || (v108 = *v107) == 0)
LABEL_162:
                            abort();
                          if (v105.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v110 = v108[1];
                              if ((uint64_t *)v94 == v110)
                              {
                                if (v108[2] == (uint64_t *)v94)
                                  goto LABEL_151;
                              }
                              else if (((unint64_t)v110 & (qword_1EE5779D0 - 1)) != v106)
                              {
                                goto LABEL_162;
                              }
                              v108 = (uint64_t **)*v108;
                              if (!v108)
                                goto LABEL_162;
                            }
                          }
                          while (1)
                          {
                            v109 = (unint64_t)v108[1];
                            if (v94 == v109)
                            {
                              if (v108[2] == (uint64_t *)v94)
                              {
LABEL_151:
                                v111 = *((int *)v108 + 6);
                                v112 = *((int *)v108 + 7);
                                if ((_DWORD)v111 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v111, v91, 1);
                                if ((_DWORD)v112 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v112, v91, 2);
                                goto LABEL_72;
                              }
                            }
                            else
                            {
                              if (v109 >= qword_1EE5779D0)
                                v109 %= (unint64_t)qword_1EE5779D0;
                              if (v109 != v106)
                                goto LABEL_162;
                            }
                            v108 = (uint64_t **)*v108;
                            if (!v108)
                              goto LABEL_162;
                          }
                        }
                      }
                      else
                      {
                        if (v102 >= v93)
                          v102 %= v93;
                        if (v102 != v96)
                          break;
                      }
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v8 = (_QWORD *)v117[4];
      v62 = v121 + 1;
      v121 = v62;
      if (v62 == v8)
      {
        result = v116;
        if (v9 == v8)
          goto LABEL_161;
      }
      else
      {
        v63 = v118[4];
        result = v116;
        do
        {
          v64 = *((unsigned int *)v62 + 1);
          v65 = v64 >> 7;
          if (v64 >> 7 < (v118[5] - v63) >> 3)
          {
            v66 = *(_QWORD *)(v63 + 8 * v65);
            if (v66)
            {
              v67 = v64 & 0x7F;
              v68 = *(unsigned __int16 *)(v66 + 2 * v67);
              v69 = v118[7];
              v70 = v118[8];
              if (v68 < (v70 - v69) >> 3)
              {
                v71 = v69 + 8 * v68;
                if (v71 != v70 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
                {
                  v73 = v119[4];
                  if (v65 < (v119[5] - v73) >> 3)
                  {
                    v74 = *(_QWORD *)(v73 + 8 * v65);
                    if (v74)
                    {
                      v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                      v76 = v119[7];
                      v77 = v119[8];
                      if (v75 < (v77 - v76) >> 3)
                      {
                        v78 = v76 + 8 * v75;
                        if (v78 != v77 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                        {
                          v80 = v120[4];
                          if (v65 < (v120[5] - v80) >> 3)
                          {
                            v81 = *(_QWORD *)(v80 + 8 * v65);
                            if (v81)
                            {
                              v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                              v84 = v120[7];
                              v83 = v120[8];
                              if (v82 < (v83 - v84) >> 3)
                              {
                                v85 = v84 + 8 * v82;
                                if (*(_DWORD *)(v85 + 4) == (_DWORD)v64 && v85 != v83)
                                {
                                  v8 = v62;
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
        }
        while (v62 != v8);
        v62 = v8;
LABEL_100:
        v121 = v62;
        if (v9 == v8)
          goto LABEL_161;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_161:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6B7CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::LandCoverSettingsConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xDC98991DB7473274;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xDC98991DB7473274;
      if (*(_QWORD *)&v3 <= 0xDC98991DB7473274)
        v5 = 0xDC98991DB7473274 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xDC98991DB7473274;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xDC98991DB7473274)
            {
              if (v7[2] == 0xDC98991DB7473274)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xDC98991DB7473274)
          {
            if (v7[2] == 0xDC98991DB7473274)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::LandCoverSettingsConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 43;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4274148;
  *(_QWORD *)(v11 + 8) = 0xDC98991DB7473274;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xDC98991DB7473274, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xDC98991DB7473274;
  v15[1] = "md::ls::LandCoverSettingsConstantDataHandle]";
  v15[2] = 43;
  gdc::Registry::_registerStorageDataSignals(a1, 0xDC98991DB7473274, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B7EE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6635AEA306F3CF3ELL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6635AEA306F3CF3ELL;
      if (*(_QWORD *)&v3 <= 0x6635AEA306F3CF3EuLL)
        v5 = 0x6635AEA306F3CF3EuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6635AEA306F3CF3ELL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6635AEA306F3CF3ELL)
            {
              if (v7[2] == 0x6635AEA306F3CF3ELL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6635AEA306F3CF3ELL)
          {
            if (v7[2] == 0x6635AEA306F3CF3ELL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>]";
  *(_QWORD *)(v11 + 24) = 93;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273908;
  *(_QWORD *)(v11 + 8) = 0x6635AEA306F3CF3ELL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6635AEA306F3CF3EuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6635AEA306F3CF3ELL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>]";
  v15[2] = 93;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6635AEA306F3CF3ELL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B810C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::LandCoverSettingsConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::LandCoverSettingsConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::LandCoverSettingsConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::LandCoverSettingsConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286938;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286938;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6B8494(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286980;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286980;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x1EBB3E0519E8FF9DLL;
  v2[1] = "md::ls::PrepassConstantDataHandle]";
  *(_QWORD *)&result = 33;
  *((_OWORD *)v2 + 1) = xmmword_19FFB40D0;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>]";
  v2[5] = 84;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277D40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277D40;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unsigned __int8 v72;
  uint8x8_t v73;
  unint64_t v74;
  uint64_t ***v75;
  uint64_t **v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v106;
  md *v107;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v110 = v7;
  v111 = v3;
  v112 = (_QWORD *)v4;
  v113 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v114 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v110))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v114 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v110);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v109 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v71 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v71 = 0;
      }
      else
      {
        v70 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v70[3];
        v71 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = md::VKMRenderResourcesStore::getConstantData<ggl::Tile::LinearDepth>((uint64_t)v38, *v24);
      if (v58)
      {
        v59 = v58;
        if ((v60 & 1) == 0
        {
          do
            v106 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
          while (__stlxr(v106 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
          gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index = v106;
          v10 = a1;
        }
        v61 = v50[1];
        if (v61)
        {
          v62 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index;
          v63 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
          v63.i16[0] = vaddlv_u8(v63);
          if (v63.u32[0] > 1uLL)
          {
            v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index;
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index >= v61)
              v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index % v61;
          }
          else
          {
            v64 = (v61 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index;
          }
          v65 = *(_QWORD **)(*v50 + 8 * v64);
          if (v65)
          {
            v66 = (_QWORD *)*v65;
            if (v66)
            {
              if (v63.u32[0] < 2uLL)
              {
                v67 = v61 - 1;
                while (1)
                {
                  v69 = v66[1];
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index == v69)
                  {
                    if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index)
                      goto LABEL_91;
                  }
                  else if ((v69 & v67) != v64)
                  {
                    goto LABEL_116;
                  }
                  v66 = (_QWORD *)*v66;
                  if (!v66)
                    goto LABEL_116;
                }
              }
              do
              {
                v68 = v66[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index == v68)
                {
                  if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index)
                  {
LABEL_91:
                    if ((v72 & 1) == 0)
                    {
                      if ((_DWORD)v107)
                      {
                        md::typeToIntMap(v107);
                        v10 = a1;
                      }
                    }
                    if (!qword_1EE5779D0)
                      goto LABEL_153;
                    v73 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                    v73.i16[0] = vaddlv_u8(v73);
                    if (v73.u32[0] > 1uLL)
                    {
                      v74 = v62;
                      if (v62 >= qword_1EE5779D0)
                        v74 = v62 % qword_1EE5779D0;
                    }
                    else
                    {
                      v74 = (qword_1EE5779D0 - 1) & v62;
                    }
                    v75 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v74);
                    if (!v75 || (v76 = *v75) == 0)
LABEL_153:
                      abort();
                    if (v73.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v78 = v76[1];
                        if ((uint64_t *)v62 == v78)
                        {
                          if (v76[2] == (uint64_t *)v62)
                            goto LABEL_112;
                        }
                        else if (((unint64_t)v78 & (qword_1EE5779D0 - 1)) != v74)
                        {
                          goto LABEL_153;
                        }
                        v76 = (uint64_t **)*v76;
                        if (!v76)
                          goto LABEL_153;
                      }
                    }
                    while (1)
                    {
                      v77 = (unint64_t)v76[1];
                      if (v62 == v77)
                      {
                        if (v76[2] == (uint64_t *)v62)
                        {
LABEL_112:
                          v79 = *((int *)v76 + 6);
                          v80 = *((int *)v76 + 7);
                          if ((_DWORD)v79 != -1)
                            ggl::PipelineSetup::setConstantData(v71, v79, v59, 1);
                          if ((_DWORD)v80 != -1)
                            ggl::PipelineSetup::setConstantData(v71, v80, v59, 2);
                          goto LABEL_116;
                        }
                      }
                      else
                      {
                        if (v77 >= qword_1EE5779D0)
                          v77 %= (unint64_t)qword_1EE5779D0;
                        if (v77 != v74)
                          goto LABEL_153;
                      }
                      v76 = (uint64_t **)*v76;
                      if (!v76)
                        goto LABEL_153;
                    }
                  }
                }
                else
                {
                  if (v68 >= v61)
                    v68 %= v61;
                  if (v68 != v64)
                    break;
                }
                v66 = (_QWORD *)*v66;
              }
              while (v66);
            }
          }
        }
      }
LABEL_116:
      v8 = (_QWORD *)v110[4];
      v81 = v114 + 1;
      v114 = v81;
      if (v81 == v8)
      {
        result = v109;
        if (v9 == v8)
          goto LABEL_152;
      }
      else
      {
        v82 = v111[4];
        result = v109;
        do
        {
          v83 = *((unsigned int *)v81 + 1);
          v84 = v83 >> 7;
          if (v83 >> 7 < (v111[5] - v82) >> 3)
          {
            v85 = *(_QWORD *)(v82 + 8 * v84);
            if (v85)
            {
              v86 = v83 & 0x7F;
              v87 = *(unsigned __int16 *)(v85 + 2 * v86);
              v88 = v111[7];
              v89 = v111[8];
              if (v87 < (v89 - v88) >> 3)
              {
                v90 = v88 + 8 * v87;
                if (v90 != v89 && *(_DWORD *)(v90 + 4) == (_DWORD)v83)
                {
                  v92 = v112[4];
                  if (v84 < (v112[5] - v92) >> 3)
                  {
                    v93 = *(_QWORD *)(v92 + 8 * v84);
                    if (v93)
                    {
                      v94 = *(unsigned __int16 *)(v93 + 2 * v86);
                      v95 = v112[7];
                      v96 = v112[8];
                      if (v94 < (v96 - v95) >> 3)
                      {
                        v97 = v95 + 8 * v94;
                        if (v97 != v96 && *(_DWORD *)(v97 + 4) == (_DWORD)v83)
                        {
                          v99 = v113[4];
                          if (v84 < (v113[5] - v99) >> 3)
                          {
                            v100 = *(_QWORD *)(v99 + 8 * v84);
                            if (v100)
                            {
                              v101 = *(unsigned __int16 *)(v100 + 2 * v86);
                              v103 = v113[7];
                              v102 = v113[8];
                              if (v101 < (v102 - v103) >> 3)
                              {
                                v104 = v103 + 8 * v101;
                                if (*(_DWORD *)(v104 + 4) == (_DWORD)v83 && v104 != v102)
                                {
                                  v8 = v81;
                                  goto LABEL_144;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v81;
        }
        while (v81 != v8);
        v81 = v8;
LABEL_144:
        v114 = v81;
        if (v9 == v8)
          goto LABEL_152;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_152:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6B8D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1EBB3E0519E8FF9DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1EBB3E0519E8FF9DLL;
      if (*(_QWORD *)&v3 <= 0x1EBB3E0519E8FF9DuLL)
        v5 = 0x1EBB3E0519E8FF9DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1EBB3E0519E8FF9DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1EBB3E0519E8FF9DLL)
            {
              if (v7[2] == 0x1EBB3E0519E8FF9DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1EBB3E0519E8FF9DLL)
          {
            if (v7[2] == 0x1EBB3E0519E8FF9DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PrepassConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273098;
  *(_QWORD *)(v11 + 8) = 0x1EBB3E0519E8FF9DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1EBB3E0519E8FF9DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1EBB3E0519E8FF9DLL;
  v15[1] = "md::ls::PrepassConstantDataHandle]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1EBB3E0519E8FF9DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B8F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6CB2880B0A690EDBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6CB2880B0A690EDBLL;
      if (*(_QWORD *)&v3 <= 0x6CB2880B0A690EDBuLL)
        v5 = 0x6CB2880B0A690EDBuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6CB2880B0A690EDBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6CB2880B0A690EDBLL)
            {
              if (v7[2] == 0x6CB2880B0A690EDBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6CB2880B0A690EDBLL)
          {
            if (v7[2] == 0x6CB2880B0A690EDBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>]";
  *(_QWORD *)(v11 + 24) = 84;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273638;
  *(_QWORD *)(v11 + 8) = 0x6CB2880B0A690EDBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6CB2880B0A690EDBuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6CB2880B0A690EDBLL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>]";
  v15[2] = 84;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6CB2880B0A690EDBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6B9170(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PrepassConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PrepassConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PrepassConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PrepassConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42869C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42869C8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6B94F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286A10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286A10;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x5E7EAD35976A86ALL;
  result[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>]";
  result[2] = 87;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277D88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277D88;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *result;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  _QWORD **v54;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned __int8 v61;
  unint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint8x8_t v72;
  unint64_t v73;
  uint64_t ***v74;
  uint64_t **v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v102;
  md *v103;
  unint64_t *v104;
  uint64_t v105;
  uint64_t v106[4];
  unint64_t *v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t *v111;

  v2 = a1;
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v108, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v106, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v107 != v111)
  {
    result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v104 = result;
    v105 = v2;
    while (1)
    {
      *result = *v11;
      v12 = *v11;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 8 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = (unint64_t *)v22;
      v24 = **(_QWORD **)(v2 + 8);
      v25 = *(_QWORD **)v24;
      v26 = *(_QWORD **)(v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != 0xC94DD89A7B09BE9CLL)
        {
          v25 += 5;
          if (v25 == v26)
            goto LABEL_33;
        }
      }
      if (v25 == v26)
      {
LABEL_33:
        v27 = 0;
      }
      else
      {
        v27 = v25[3];
        v28 = (std::__shared_weak_count *)v25[4];
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      v32 = **(_QWORD **)(v2 + 8);
      v33 = *(_QWORD **)v32;
      v34 = *(_QWORD **)(v32 + 8);
      if (v33 != v34)
      {
        while (*v33 != 0x41D4E9297E100630)
        {
          v33 += 5;
          if (v33 == v34)
            goto LABEL_45;
        }
      }
      if (v33 == v34)
      {
LABEL_45:
        v35 = 0;
      }
      else
      {
        v35 = (_QWORD *)v33[3];
        v36 = (std::__shared_weak_count *)v33[4];
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          do
            v39 = __ldaxr(v37);
          while (__stlxr(v39 - 1, v37));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v41 = *(_QWORD *)(v40 + 1328);
      v42 = *(std::__shared_weak_count **)(v40 + 1336);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = *v23;
      v46 = *v23;
      v47 = v35[50];
      v48 = (v35[51] - v47) >> 3;
      if (v46 >= v48)
      {
LABEL_57:
        v49 = 0;
        if (v46 >= v48)
          goto LABEL_71;
        goto LABEL_61;
      }
      v49 = *(_QWORD **)(v47 + 8 * v46);
      if (!v49)
        goto LABEL_60;
      if (HIDWORD(v45) != HIDWORD(v49))
        break;
      v50 = v35[53];
      if (v50 + 16 * v49 == v35[54] || v50 == 0)
        goto LABEL_57;
      v58 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v35 + 37), v45, v23);
      ++v58[3];
      v49 = *(_QWORD **)(v50 + 16 * v49 + 8);
      v45 = *v23;
      v47 = v35[50];
      v46 = *v23;
      if (v46 >= (v35[51] - v47) >> 3)
        goto LABEL_71;
LABEL_61:
      v52 = *(_QWORD *)(v47 + 8 * v46);
      if (v52 && HIDWORD(v45) == HIDWORD(v52))
      {
        v53 = v35[53];
        v54 = (_QWORD **)(v53 + 16 * v52);
        if (v54 != (_QWORD **)v35[54] && v53 != 0)
        {
          v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v35 + 37), v45, v23);
          ++v56[3];
          v57 = *v54;
          if (!v42)
            goto LABEL_74;
          goto LABEL_72;
        }
      }
LABEL_71:
      v57 = 0;
      if (!v42)
        goto LABEL_74;
LABEL_72:
      v59 = (unint64_t *)&v42->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
LABEL_74:
      if (v41)
      {
        if ((v61 & 1) == 0
        {
          do
            v102 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
          while (__stlxr(v102 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
          gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index = v102;
        }
        v62 = v49[1];
        if (v62)
        {
          v63 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index;
          v64 = (uint8x8_t)vcnt_s8((int8x8_t)v62);
          v64.i16[0] = vaddlv_u8(v64);
          if (v64.u32[0] > 1uLL)
          {
            v65 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index;
            if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index >= v62)
              v65 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index % v62;
          }
          else
          {
            v65 = (v62 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index;
          }
          v66 = *(_QWORD **)(*v49 + 8 * v65);
          if (v66)
          {
            v67 = (_QWORD *)*v66;
            if (v67)
            {
              if (v64.u32[0] < 2uLL)
              {
                v68 = v62 - 1;
                while (1)
                {
                  v70 = v67[1];
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index == v70)
                  {
                    if (v67[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index)
                      goto LABEL_97;
                  }
                  else if ((v70 & v68) != v65)
                  {
                    goto LABEL_122;
                  }
                  v67 = (_QWORD *)*v67;
                  if (!v67)
                    goto LABEL_122;
                }
              }
              do
              {
                v69 = v67[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index == v69)
                {
                  if (v67[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index)
                  {
LABEL_97:
                    if ((v71 & 1) == 0)
                    {
                      if ((_DWORD)v103)
                      {
                        md::typeToIntMap(v103);
                      }
                    }
                    if (!qword_1EE5779D0)
                      goto LABEL_157;
                    v72 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                    v72.i16[0] = vaddlv_u8(v72);
                    if (v72.u32[0] > 1uLL)
                    {
                      v73 = v63;
                      if (v63 >= qword_1EE5779D0)
                        v73 = v63 % qword_1EE5779D0;
                    }
                    else
                    {
                      v73 = (qword_1EE5779D0 - 1) & v63;
                    }
                    v74 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v73);
                    if (!v74 || (v75 = *v74) == 0)
LABEL_157:
                      abort();
                    if (v72.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v77 = v75[1];
                        if ((uint64_t *)v63 == v77)
                        {
                          if (v75[2] == (uint64_t *)v63)
                            goto LABEL_118;
                        }
                        else if (((unint64_t)v77 & (qword_1EE5779D0 - 1)) != v73)
                        {
                          goto LABEL_157;
                        }
                        v75 = (uint64_t **)*v75;
                        if (!v75)
                          goto LABEL_157;
                      }
                    }
                    while (1)
                    {
                      v76 = (unint64_t)v75[1];
                      if (v63 == v76)
                      {
                        if (v75[2] == (uint64_t *)v63)
                        {
LABEL_118:
                          v78 = *((int *)v75 + 6);
                          v79 = *((int *)v75 + 7);
                          if ((_DWORD)v78 != -1)
                            ggl::PipelineSetup::setConstantData(v57, v78, v41, 1);
                          if ((_DWORD)v79 != -1)
                            ggl::PipelineSetup::setConstantData(v57, v79, v41, 2);
                          goto LABEL_122;
                        }
                      }
                      else
                      {
                        if (v76 >= qword_1EE5779D0)
                          v76 %= (unint64_t)qword_1EE5779D0;
                        if (v76 != v73)
                          goto LABEL_157;
                      }
                      v75 = (uint64_t **)*v75;
                      if (!v75)
                        goto LABEL_157;
                    }
                  }
                }
                else
                {
                  if (v69 >= v62)
                    v69 %= v62;
                  if (v69 != v65)
                    break;
                }
                v67 = (_QWORD *)*v67;
              }
              while (v67);
            }
          }
        }
      }
LABEL_122:
      v2 = v105;
      if (v42)
      {
        v80 = (unint64_t *)&v42->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
        do
          v82 = __ldaxr(v80);
        while (__stlxr(v82 - 1, v80));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v83 = v111;
      v11 = *(unint64_t **)(v108 + 32);
      if (++v111 == v11)
      {
        result = v104;
      }
      else
      {
        v84 = v109[4];
        v85 = (v109[5] - v84) >> 3;
        v86 = v83 + 2;
        result = v104;
        while (1)
        {
          v87 = *((unsigned int *)v86 - 1);
          v88 = v87 >> 7;
          if (v87 >> 7 < v85)
          {
            v89 = *(_QWORD *)(v84 + 8 * v88);
            if (v89)
            {
              v90 = *(unsigned __int16 *)(v89 + 2 * (v87 & 0x7F));
              v91 = v109[7];
              v92 = v109[8];
              if (v90 < (v92 - v91) >> 3)
              {
                v93 = v91 + 8 * v90;
                if (v93 != v92 && *(_DWORD *)(v93 + 4) == (_DWORD)v87)
                {
                  v95 = v110[4];
                  if (v88 < (v110[5] - v95) >> 3)
                  {
                    v96 = *(_QWORD *)(v95 + 8 * v88);
                    if (v96)
                    {
                      v97 = *(unsigned __int16 *)(v96 + 2 * (v87 & 0x7F));
                      v99 = v110[7];
                      v98 = v110[8];
                      if (v97 < (v98 - v99) >> 3)
                      {
                        v100 = v99 + 8 * v97;
                        if (v100 != v98 && *(_DWORD *)(v100 + 4) == (_DWORD)v87)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v111 = v86;
          v20 = v86++ == v11;
          if (v20)
            goto LABEL_10;
        }
        v11 = v86 - 1;
      }
LABEL_10:
      if (v107 == v11)
        goto LABEL_156;
    }
    v49 = 0;
LABEL_60:
    if (v46 >= v48)
      goto LABEL_71;
    goto LABEL_61;
  }
  result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_156:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v2 + 8) = 0;
  return result;
}

void sub_19F6B9DDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v5 = (unint64_t *)&v1->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x5E7EAD35976A86ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x5E7EAD35976A86ALL;
      if (*(_QWORD *)&v3 <= 0x5E7EAD35976A86AuLL)
        v5 = 0x5E7EAD35976A86AuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x5E7EAD35976A86ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x5E7EAD35976A86ALL)
            {
              if (v7[2] == 0x5E7EAD35976A86ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x5E7EAD35976A86ALL)
          {
            if (v7[2] == 0x5E7EAD35976A86ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>]";
  *(_QWORD *)(v11 + 24) = 87;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273788;
  *(_QWORD *)(v11 + 8) = 0x5E7EAD35976A86ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x5E7EAD35976A86AuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x5E7EAD35976A86ALL;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>]";
  v15[2] = 87;
  gdc::Registry::_registerStorageDataSignals(a1, 0x5E7EAD35976A86ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6BA084(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286FF8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286FF8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6BA298(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287040;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287040;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x70E01531993BB945;
  v2[1] = "md::ls::PrepassShadowConstantDataHandle]";
  *(_QWORD *)&result = 39;
  *((_OWORD *)v2 + 1) = xmmword_19FFB40E0;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>]";
  v2[5] = 82;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42780A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42780A0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v88 = v7;
  v89 = v3;
  v90 = (_QWORD *)v4;
  v91 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v92 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v88))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v92 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v88);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v87 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
          goto LABEL_66;
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (v51 && HIDWORD(v43) == HIDWORD(v51))
      {
        v52 = v38[53];
        v53 = (_QWORD **)(v52 + 16 * v51);
        if (v53 == (_QWORD **)v38[54] || v52 == 0)
        {
          v85 = 0;
        }
        else
        {
          v84 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
          ++v84[3];
          v85 = *v53;
        }
        v10 = a1;
        goto LABEL_67;
      }
LABEL_66:
      v85 = 0;
LABEL_67:
      v58 = md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::Shadow>((uint64_t)v38, *v24);
      md::setConstantDataForPipeline<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(v50, v85, v58);
      v8 = (_QWORD *)v88[4];
      v59 = v92 + 1;
      v92 = v59;
      if (v59 == v8)
      {
        result = v87;
        if (v9 == v8)
          goto LABEL_99;
      }
      else
      {
        v60 = v89[4];
        do
        {
          v61 = *((unsigned int *)v59 + 1);
          v62 = v61 >> 7;
          if (v61 >> 7 < (v89[5] - v60) >> 3)
          {
            v63 = *(_QWORD *)(v60 + 8 * v62);
            if (v63)
            {
              v64 = v61 & 0x7F;
              v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              v67 = v89[7];
              v66 = v89[8];
              if (v65 < (v66 - v67) >> 3)
              {
                v68 = v67 + 8 * v65;
                if (v68 != v66 && *(_DWORD *)(v68 + 4) == (_DWORD)v61)
                {
                  v70 = v90[4];
                  if (v62 < (v90[5] - v70) >> 3)
                  {
                    v71 = *(_QWORD *)(v70 + 8 * v62);
                    if (v71)
                    {
                      v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      v74 = v90[7];
                      v73 = v90[8];
                      if (v72 < (v73 - v74) >> 3)
                      {
                        v75 = v74 + 8 * v72;
                        if (v75 != v73 && *(_DWORD *)(v75 + 4) == (_DWORD)v61)
                        {
                          v77 = v91[4];
                          if (v62 < (v91[5] - v77) >> 3)
                          {
                            v78 = *(_QWORD *)(v77 + 8 * v62);
                            if (v78)
                            {
                              v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              v81 = v91[7];
                              v80 = v91[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == (_DWORD)v61 && v82 != v80)
                                {
                                  v8 = v59;
                                  goto LABEL_95;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        v59 = v8;
LABEL_95:
        result = v87;
        v92 = v59;
        if (v9 == v8)
          goto LABEL_99;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_99:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x70E01531993BB945;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x70E01531993BB945;
      if (*(_QWORD *)&v3 <= 0x70E01531993BB945uLL)
        v5 = 0x70E01531993BB945uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x70E01531993BB945;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x70E01531993BB945)
            {
              if (v7[2] == 0x70E01531993BB945)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x70E01531993BB945)
          {
            if (v7[2] == 0x70E01531993BB945)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PrepassShadowConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 39;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273F68;
  *(_QWORD *)(v11 + 8) = 0x70E01531993BB945;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x70E01531993BB945uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x70E01531993BB945;
  v15[1] = "md::ls::PrepassShadowConstantDataHandle]";
  v15[2] = 39;
  gdc::Registry::_registerStorageDataSignals(a1, 0x70E01531993BB945, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6BAAC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x58EA03DA808C73B1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x58EA03DA808C73B1;
      if (*(_QWORD *)&v3 <= 0x58EA03DA808C73B1uLL)
        v5 = 0x58EA03DA808C73B1uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x58EA03DA808C73B1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x58EA03DA808C73B1)
            {
              if (v7[2] == 0x58EA03DA808C73B1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x58EA03DA808C73B1)
          {
            if (v7[2] == 0x58EA03DA808C73B1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>]";
  *(_QWORD *)(v11 + 24) = 82;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273AB8;
  *(_QWORD *)(v11 + 8) = 0x58EA03DA808C73B1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x58EA03DA808C73B1uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x58EA03DA808C73B1;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>]";
  v15[2] = 82;
  gdc::Registry::_registerStorageDataSignals(a1, 0x58EA03DA808C73B1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6BACEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PrepassShadowConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PrepassShadowConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PrepassShadowConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PrepassShadowConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284FE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284FE8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6BB074(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285030;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285030;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xEAA0B82FC49F7277;
  v2[1] = "md::ls::ShadowConstantDataHandle]";
  *(_QWORD *)&result = 32;
  *((_OWORD *)v2 + 1) = xmmword_19FFB40F0;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>]";
  v2[5] = 82;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277098;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277098;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v88 = v7;
  v89 = v3;
  v90 = (_QWORD *)v4;
  v91 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v92 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v88))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v92 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v88);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v87 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 8 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
          goto LABEL_66;
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (v51 && HIDWORD(v43) == HIDWORD(v51))
      {
        v52 = v38[53];
        v53 = (_QWORD **)(v52 + 16 * v51);
        if (v53 == (_QWORD **)v38[54] || v52 == 0)
        {
          v85 = 0;
        }
        else
        {
          v84 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
          ++v84[3];
          v85 = *v53;
        }
        v10 = a1;
        goto LABEL_67;
      }
LABEL_66:
      v85 = 0;
LABEL_67:
      v58 = md::VKMRenderResourcesStore::getConstantData<ggl::DaVinci::Shadow>((uint64_t)v38, *v24);
      md::setConstantDataForPipeline<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(v50, v85, v58);
      v8 = (_QWORD *)v88[4];
      v59 = v92 + 1;
      v92 = v59;
      if (v59 == v8)
      {
        result = v87;
        if (v9 == v8)
          goto LABEL_99;
      }
      else
      {
        v60 = v89[4];
        do
        {
          v61 = *((unsigned int *)v59 + 1);
          v62 = v61 >> 7;
          if (v61 >> 7 < (v89[5] - v60) >> 3)
          {
            v63 = *(_QWORD *)(v60 + 8 * v62);
            if (v63)
            {
              v64 = v61 & 0x7F;
              v65 = *(unsigned __int16 *)(v63 + 2 * v64);
              v67 = v89[7];
              v66 = v89[8];
              if (v65 < (v66 - v67) >> 3)
              {
                v68 = v67 + 8 * v65;
                if (v68 != v66 && *(_DWORD *)(v68 + 4) == (_DWORD)v61)
                {
                  v70 = v90[4];
                  if (v62 < (v90[5] - v70) >> 3)
                  {
                    v71 = *(_QWORD *)(v70 + 8 * v62);
                    if (v71)
                    {
                      v72 = *(unsigned __int16 *)(v71 + 2 * v64);
                      v74 = v90[7];
                      v73 = v90[8];
                      if (v72 < (v73 - v74) >> 3)
                      {
                        v75 = v74 + 8 * v72;
                        if (v75 != v73 && *(_DWORD *)(v75 + 4) == (_DWORD)v61)
                        {
                          v77 = v91[4];
                          if (v62 < (v91[5] - v77) >> 3)
                          {
                            v78 = *(_QWORD *)(v77 + 8 * v62);
                            if (v78)
                            {
                              v79 = *(unsigned __int16 *)(v78 + 2 * v64);
                              v81 = v91[7];
                              v80 = v91[8];
                              if (v79 < (v80 - v81) >> 3)
                              {
                                v82 = v81 + 8 * v79;
                                if (*(_DWORD *)(v82 + 4) == (_DWORD)v61 && v82 != v80)
                                {
                                  v8 = v59;
                                  goto LABEL_95;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v59;
        }
        while (v59 != v8);
        v59 = v8;
LABEL_95:
        result = v87;
        v92 = v59;
        if (v9 == v8)
          goto LABEL_99;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_99:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xEAA0B82FC49F7277;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xEAA0B82FC49F7277;
      if (*(_QWORD *)&v3 <= 0xEAA0B82FC49F7277)
        v5 = 0xEAA0B82FC49F7277 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xEAA0B82FC49F7277;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xEAA0B82FC49F7277)
            {
              if (v7[2] == 0xEAA0B82FC49F7277)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xEAA0B82FC49F7277)
          {
            if (v7[2] == 0xEAA0B82FC49F7277)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::ShadowConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272F78;
  *(_QWORD *)(v11 + 8) = 0xEAA0B82FC49F7277;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xEAA0B82FC49F7277, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xEAA0B82FC49F7277;
  v15[1] = "md::ls::ShadowConstantDataHandle]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0xEAA0B82FC49F7277, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6BB8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::ShadowConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShadowConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ShadowConstantDataHandle>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShadowConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287FB8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287FB8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6BBAC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4288000;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4288000;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0xA20E903AC8423AE1;
  result[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>]";
  result[2] = 92;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278880;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278880;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  _QWORD **v54;
  BOOL v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned __int8 v61;
  unint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint8x8_t v72;
  unint64_t v73;
  uint64_t ***v74;
  uint64_t **v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v99;
  md *v100;
  unint64_t *v101;
  uint64_t v102[4];
  unint64_t *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t *v107;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v104, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v102, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v103 != v107)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v101 = v11;
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 8 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = (unint64_t *)v22;
      v24 = **(_QWORD **)(a1 + 8);
      v25 = *(_QWORD **)v24;
      v26 = *(_QWORD **)(v24 + 8);
      if (v25 != v26)
      {
        while (*v25 != 0x41D4E9297E100630)
        {
          v25 += 5;
          if (v25 == v26)
            goto LABEL_32;
        }
      }
      if (v25 == v26)
      {
LABEL_32:
        v28 = 0;
      }
      else
      {
        v28 = (_QWORD *)v25[3];
        v27 = (std::__shared_weak_count *)v25[4];
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      v32 = ***(uint64_t ****)(a1 + 8);
      if (v32 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v32 != 0xD369A4D92C8FFE6CLL)
      {
        v33 = v32 + 5;
        do
        {
          v34 = *v33;
          v33 += 5;
        }
        while (v34 != 0xD369A4D92C8FFE6CLL);
        v32 = v33 - 5;
      }
      v35 = v32[3];
      v36 = (std::__shared_weak_count *)v32[4];
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      if (!v40)
        goto LABEL_112;
      v41 = *(_QWORD *)(v40 + 320);
      v42 = (uint64_t)(v28 + 37);
      v43 = *v23;
      v44 = *v23;
      v45 = v28[50];
      v46 = (v28[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v28[53], v48 + 16 * v47 != v28[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v58 = *(_QWORD *)(v45 + 8 * v44);
        v59 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v28 + 37), v43, v23);
        ++v59[3];
        v60 = v48 + 16 * v58;
        v11 = v101;
        v50 = *(_QWORD **)(v60 + 8);
        v43 = *v23;
        v45 = v28[50];
        v44 = *v23;
        if (v44 >= (v28[51] - v45) >> 3)
          goto LABEL_64;
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_64;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51
        || HIDWORD(v43) != HIDWORD(v51)
        || ((v52 = v28[53], v53 = (_QWORD **)v28[54], v54 = (_QWORD **)(v52 + 16 * v51), v54 != v53)
          ? (v55 = v52 == 0)
          : (v55 = 1),
            v55))
      {
LABEL_64:
        v57 = 0;
        if (!v41)
          goto LABEL_112;
        goto LABEL_65;
      }
      v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v42, v43, v23);
      ++v56[3];
      v57 = *v54;
      if (!v41)
        goto LABEL_112;
LABEL_65:
      if ((v61 & 1) == 0
      {
        do
          v99 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v99 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index = v99;
        v11 = v101;
      }
      v62 = v50[1];
      if (v62)
      {
        v63 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index;
        v64 = (uint8x8_t)vcnt_s8((int8x8_t)v62);
        v64.i16[0] = vaddlv_u8(v64);
        if (v64.u32[0] > 1uLL)
        {
          v65 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index >= v62)
            v65 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index % v62;
        }
        else
        {
          v65 = (v62 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index;
        }
        v66 = *(_QWORD **)(*v50 + 8 * v65);
        if (v66)
        {
          v67 = (_QWORD *)*v66;
          if (v67)
          {
            if (v64.u32[0] < 2uLL)
            {
              v68 = v62 - 1;
              while (1)
              {
                v70 = v67[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index == v70)
                {
                  if (v67[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index)
                    goto LABEL_87;
                }
                else if ((v70 & v68) != v65)
                {
                  goto LABEL_112;
                }
                v67 = (_QWORD *)*v67;
                if (!v67)
                  goto LABEL_112;
              }
            }
            do
            {
              v69 = v67[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index == v69)
              {
                if (v67[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index)
                {
LABEL_87:
                  if ((v71 & 1) == 0)
                  {
                    if ((_DWORD)v100)
                    {
                      md::typeToIntMap(v100);
                      v11 = v101;
                    }
                  }
                  if (!qword_1EE5779D0)
                    goto LABEL_139;
                  v72 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                  v72.i16[0] = vaddlv_u8(v72);
                  if (v72.u32[0] > 1uLL)
                  {
                    v73 = v63;
                    if (v63 >= qword_1EE5779D0)
                      v73 = v63 % qword_1EE5779D0;
                  }
                  else
                  {
                    v73 = (qword_1EE5779D0 - 1) & v63;
                  }
                  v74 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v73);
                  if (!v74 || (v75 = *v74) == 0)
LABEL_139:
                    abort();
                  if (v72.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v77 = v75[1];
                      if ((uint64_t *)v63 == v77)
                      {
                        if (v75[2] == (uint64_t *)v63)
                          goto LABEL_108;
                      }
                      else if (((unint64_t)v77 & (qword_1EE5779D0 - 1)) != v73)
                      {
                        goto LABEL_139;
                      }
                      v75 = (uint64_t **)*v75;
                      if (!v75)
                        goto LABEL_139;
                    }
                  }
                  while (1)
                  {
                    v76 = (unint64_t)v75[1];
                    if (v63 == v76)
                    {
                      if (v75[2] == (uint64_t *)v63)
                      {
LABEL_108:
                        v78 = *((int *)v75 + 6);
                        v79 = *((int *)v75 + 7);
                        if ((_DWORD)v78 != -1)
                          ggl::PipelineSetup::setConstantData(v57, v78, v41, 1);
                        if ((_DWORD)v79 != -1)
                          ggl::PipelineSetup::setConstantData(v57, v79, v41, 2);
                        goto LABEL_112;
                      }
                    }
                    else
                    {
                      if (v76 >= qword_1EE5779D0)
                        v76 %= (unint64_t)qword_1EE5779D0;
                      if (v76 != v73)
                        goto LABEL_139;
                    }
                    v75 = (uint64_t **)*v75;
                    if (!v75)
                      goto LABEL_139;
                  }
                }
              }
              else
              {
                if (v69 >= v62)
                  v69 %= v62;
                if (v69 != v65)
                  break;
              }
              v67 = (_QWORD *)*v67;
            }
            while (v67);
          }
        }
      }
LABEL_112:
      v80 = v107;
      v10 = *(unint64_t **)(v104 + 32);
      if (++v107 != v10)
      {
        v81 = v105[4];
        v82 = (v105[5] - v81) >> 3;
        v83 = v80 + 2;
        while (1)
        {
          v84 = *((unsigned int *)v83 - 1);
          v85 = v84 >> 7;
          if (v84 >> 7 < v82)
          {
            v86 = *(_QWORD *)(v81 + 8 * v85);
            if (v86)
            {
              v87 = *(unsigned __int16 *)(v86 + 2 * (v84 & 0x7F));
              v89 = v105[7];
              v88 = v105[8];
              if (v87 < (v88 - v89) >> 3)
              {
                v90 = v89 + 8 * v87;
                if (v90 != v88 && *(_DWORD *)(v90 + 4) == (_DWORD)v84)
                {
                  v92 = v106[4];
                  if (v85 < (v106[5] - v92) >> 3)
                  {
                    v93 = *(_QWORD *)(v92 + 8 * v85);
                    if (v93)
                    {
                      v94 = *(unsigned __int16 *)(v93 + 2 * (v84 & 0x7F));
                      v96 = v106[7];
                      v95 = v106[8];
                      if (v94 < (v95 - v96) >> 3)
                      {
                        v97 = v96 + 8 * v94;
                        if (v97 != v95 && *(_DWORD *)(v97 + 4) == (_DWORD)v84)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v107 = v83;
          v20 = v83++ == v10;
          if (v20)
            goto LABEL_9;
        }
        v10 = v83 - 1;
      }
LABEL_9:
      if (v103 == v10)
        goto LABEL_138;
    }
  }
  v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_138:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6BC308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA20E903AC8423AE1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA20E903AC8423AE1;
      if (*(_QWORD *)&v3 <= 0xA20E903AC8423AE1)
        v5 = 0xA20E903AC8423AE1 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA20E903AC8423AE1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA20E903AC8423AE1)
            {
              if (v7[2] == 0xA20E903AC8423AE1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA20E903AC8423AE1)
          {
            if (v7[2] == 0xA20E903AC8423AE1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>]";
  *(_QWORD *)(v11 + 24) = 92;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42738D8;
  *(_QWORD *)(v11 + 8) = 0xA20E903AC8423AE1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA20E903AC8423AE1, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA20E903AC8423AE1;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>]";
  v15[2] = 92;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA20E903AC8423AE1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6BC52C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285FA8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285FA8;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6BC740(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285FF0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285FF0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x3E8485C60908F920;
  v2[1] = "md::ls::IsMaterial]";
  *(_QWORD *)&result = 18;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4100;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>]";
  v2[5] = 85;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277878;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277878;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (***v32)(_QWORD);
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  int8x8_t v38;
  uint8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t result;
  int v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E4274A58;
  v4[1] = a2;
  v65 = 0;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  if (v6 != v7)
  {
    while (*v6 != 0x41D4E9297E100630)
    {
      v6 += 5;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    v9 = 0;
  }
  else
  {
    v9 = v6[3];
    v8 = (std::__shared_weak_count *)v6[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v64 = 0;
  v65 = v9;
  v13 = **(_QWORD **)(a1 + 8);
  v14 = *(_QWORD **)v13;
  v15 = *(_QWORD **)(v13 + 8);
  if (v14 != v15)
  {
    while (*v14 != 0x4EDAD23DFB014132)
    {
      v14 += 5;
      if (v14 == v15)
        goto LABEL_24;
    }
  }
  if (v14 == v15)
  {
LABEL_24:
    v17 = 0;
  }
  else
  {
    v17 = v14[3];
    v16 = (std::__shared_weak_count *)v14[4];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v64 = v17;
  v21 = ***(uint64_t ****)(a1 + 8);
  if (v21 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v21 != 0xD369A4D92C8FFE6CLL)
  {
    v22 = v21 + 5;
    do
    {
      v23 = *v22;
      v22 += 5;
    }
    while (v23 != 0xD369A4D92C8FFE6CLL);
    v21 = v22 - 5;
  }
  v24 = v21[3];
  v25 = (std::__shared_weak_count *)v21[4];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 - 1, v26));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24))
    goto LABEL_97;
  v29 = ***(uint64_t ****)(a1 + 8);
  if (v29 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v29 != 0x22D45F5AAD4BF408)
  {
    v30 = v29 + 5;
    do
    {
      v31 = *v30;
      v30 += 5;
    }
    while (v31 != 0x22D45F5AAD4BF408);
    v29 = v30 - 5;
  }
  v32 = (uint64_t (***)(_QWORD))v29[3];
  v33 = (std::__shared_weak_count *)v29[4];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v37 = *(uint64_t **)((**v32)(v32) + 8);
  v38 = (int8x8_t)v37[1];
  if (!*(_QWORD *)&v38)
    goto LABEL_97;
  v39 = (uint8x8_t)vcnt_s8(v38);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    v40 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v38 <= 0x41E8D6E445F4145uLL)
      v40 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v38;
  }
  else
  {
    v40 = (*(_QWORD *)&v38 - 1) & 0x41E8D6E445F4145;
  }
  v41 = *v37;
  v42 = *(_QWORD **)(v41 + 8 * v40);
  if (!v42)
    goto LABEL_97;
  v43 = (_QWORD *)*v42;
  if (!*v42)
    goto LABEL_97;
  v44 = *(_QWORD *)&v38 - 1;
  if (v39.u32[0] < 2uLL)
  {
    while (1)
    {
      v45 = v43[1];
      if (v45 == 0x41E8D6E445F4145)
      {
        if (v43[2] == 0x41E8D6E445F4145)
          goto LABEL_69;
      }
      else if ((v45 & v44) != v40)
      {
        goto LABEL_97;
      }
      v43 = (_QWORD *)*v43;
      if (!v43)
        goto LABEL_97;
    }
  }
  while (1)
  {
    v46 = v43[1];
    if (v46 == 0x41E8D6E445F4145)
      break;
    if (v46 >= *(_QWORD *)&v38)
      v46 %= *(_QWORD *)&v38;
    if (v46 != v40)
      goto LABEL_97;
LABEL_63:
    v43 = (_QWORD *)*v43;
    if (!v43)
      goto LABEL_97;
  }
  if (v43[2] != 0x41E8D6E445F4145)
    goto LABEL_63;
LABEL_69:
  v47 = v43[5];
  if (*(_QWORD *)(v47 + 8) == 0x41E8D6E445F4145)
  {
    v63 = *(_QWORD *)(v47 + 32);
    if (v63)
    {
      if (v39.u32[0] >= 2uLL)
      {
        v49 = 0x1AF456233693CD46;
        if (*(_QWORD *)&v38 <= 0x1AF456233693CD46uLL)
          v49 = 0x1AF456233693CD46uLL % *(_QWORD *)&v38;
        v48 = *(_QWORD **)(v41 + 8 * v49);
        do
        {
          do
            v48 = (_QWORD *)*v48;
          while (v48[1] != 0x1AF456233693CD46);
        }
        while (v48[2] != 0x1AF456233693CD46);
      }
      else
      {
        v48 = *(_QWORD **)(v41 + 8 * (v44 & 0x1AF456233693CD46));
        do
        {
          do
            v48 = (_QWORD *)*v48;
          while (v48[1] != 0x1AF456233693CD46);
        }
        while (v48[2] != 0x1AF456233693CD46);
      }
      v62 = fmaxf(*(float *)(*(_QWORD *)(v48[5] + 32) + 3080) + *(float *)(*(_QWORD *)(v48[5] + 32) + 3076), 1.0);
      v61 = 1065353216;
      v50 = **(_QWORD **)(a1 + 8);
      v51 = *(_QWORD **)v50;
      v52 = *(_QWORD **)(v50 + 8);
      if (v51 != v52)
      {
        while (*v51 != 0xC94DD89A7B09BE9CLL)
        {
          v51 += 5;
          if (v51 == v52)
            goto LABEL_92;
        }
      }
      if (v51 != v52)
      {
        v53 = (std::__shared_weak_count *)v51[4];
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
          do
            v56 = __ldaxr(v54);
          while (__stlxr(v56 - 1, v54));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
      }
LABEL_92:
      v57 = operator new(0x30uLL);
      *v57 = &off_1E427BC88;
      v57[1] = &v65;
      v57[2] = &v64;
      v57[3] = &v62;
      v57[4] = &v61;
      v57[5] = &v63;
      v67 = v57;
      (*(void (**)(_QWORD *, _BYTE *))(*v4 + 16))(v4, v66);
      v58 = v67;
      if (v67 == v66)
      {
        v59 = 4;
        v58 = v66;
LABEL_96:
        (*(void (**)(void))(*v58 + 8 * v59))();
      }
      else if (v67)
      {
        v59 = 5;
        goto LABEL_96;
      }
    }
  }
LABEL_97:
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19F6BCE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

void ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>>::~Model()
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 isValid;
  uint64_t (**v17)(_QWORD);
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v82[5];
  _QWORD *v83;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::IsMaterial>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>(v3);
  v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v10 = (_QWORD *)v6;
  v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7])
    v11 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= v11[4] - v11[3])
    v12 = (uint64_t)v11;
  else
    v12 = v6 + 32;
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  v14 = *(_QWORD **)(v12 + 24);
  v13 = *(_QWORD **)(v12 + 32);
  v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    v15 = v14 + 1;
    do
    {
      v14 = v15;
      v83 = v15;
      if (v15 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      v15 = v14 + 1;
    }
    while (!isValid);
  }
  v17 = &ecs2::Runtime::_localEntity;
  v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14)
    goto LABEL_82;
  v19 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *v19 = *v14;
    v21 = *v14;
    v22 = HIDWORD(*v14);
    v23 = *v14 >> 39;
    v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3)
      goto LABEL_23;
    v25 = *(_QWORD *)(v24 + 8 * v23);
    if (!v25)
      goto LABEL_23;
    v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    v28 = v4[7];
    v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3)
      goto LABEL_23;
    v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == (_DWORD)v22)
    {
      v31 = v4[11];
      v32 = v4[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      v31 = v4[11];
      v32 = v31;
    }
    v33 = v32 == v31 ? 0 : v32;
    if ((v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (v35 = *(_QWORD *)(v34 + 8 * v23)) != 0
      && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == (_DWORD)v22) : (v40 = 0), v40))
    {
      v41 = v5[11];
      v42 = v5[10] + v36;
    }
    else
    {
      v41 = v5[11];
      v42 = v41;
    }
    v43 = v42 == v41 ? 0 : v42;
    v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      v45 = *(_QWORD *)(v44 + 8 * v23);
      if (v45)
      {
        v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        v48 = v10[7];
        v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == (_DWORD)v22)
            break;
        }
      }
    }
    v51 = v10[11];
    v52 = v51;
    v53 = *(_QWORD *)(a2 + 24);
    if (!v53)
      goto LABEL_81;
LABEL_46:
    if (v52 == v51)
      v54 = 0;
    else
      v54 = v52;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v53 + 48))(v53, v33, v43, v54);
    v56 = *(_QWORD **)(v12 + 32);
    v20 = v14 + 1;
    v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      v57 = v4[4];
      v59 = v4[7];
      v58 = v4[8];
      v60 = v5[4];
      result = v5[7];
      v61 = v5[8];
      v62 = v10[4];
      v64 = v10[7];
      v63 = v10[8];
      while (1)
      {
        v65 = *((unsigned int *)v20 + 1);
        v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          v67 = *(_QWORD *)(v57 + 8 * v66);
          if (v67)
          {
            v68 = v65 & 0x7F;
            v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              v70 = v59 + 8 * v69;
              v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == (_DWORD)v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                v73 = *(_QWORD *)(v60 + 8 * v66);
                if (v73)
                {
                  v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    v75 = result + 8 * v74;
                    v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == (_DWORD)v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      v78 = *(_QWORD *)(v62 + 8 * v66);
                      if (v78)
                      {
                        v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == (_DWORD)v65 && v80 != v63)
                            break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          v20 = v56;
          goto LABEL_14;
        }
      }
      v56 = v20;
LABEL_14:
      v83 = v20;
    }
    v14 = v56;
    if (v13 == v56)
      goto LABEL_83;
  }
  v51 = v10[11];
  v52 = v10[10] + 8 * v46;
  v53 = *(_QWORD *)(a2 + 24);
  if (v53)
    goto LABEL_46;
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  result = ((uint64_t (*)(uint64_t (**)(_QWORD), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  v19 = (_QWORD *)result;
LABEL_83:
  *v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>>::empty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 isValid;
  _QWORD v11[5];
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v2 = gdc::Registry::storage<md::ls::IsMaterial>(v1);
  v3 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>(v1);
  v4 = gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= *(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56))
    v5 = v2;
  else
    v5 = v3;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < *(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56))
    v5 = v4;
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v7 = *(_QWORD *)(v5 + 56);
  v6 = *(_QWORD *)(v5 + 64);
  v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    v8 = v7 + 8;
    do
    {
      v7 = v8;
      v12 = v8;
      if (v8 == v6)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t gdc::Registry::storage<md::ls::IsMaterial>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3E8485C60908F920;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3E8485C60908F920;
      if (*(_QWORD *)&v3 <= 0x3E8485C60908F920uLL)
        v5 = 0x3E8485C60908F920uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3E8485C60908F920;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3E8485C60908F920)
            {
              if (v7[2] == 0x3E8485C60908F920)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3E8485C60908F920)
          {
            if (v7[2] == 0x3E8485C60908F920)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::IsMaterial]";
  *(_QWORD *)(v11 + 24) = 18;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270ED8;
  *(_QWORD *)(v11 + 8) = 0x3E8485C60908F920;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3E8485C60908F920uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3E8485C60908F920;
  v15[1] = "md::ls::IsMaterial]";
  v15[2] = 18;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3E8485C60908F920, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6BD548(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCDC9872DC17B96C4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCDC9872DC17B96C4;
      if (*(_QWORD *)&v3 <= 0xCDC9872DC17B96C4)
        v5 = 0xCDC9872DC17B96C4 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCDC9872DC17B96C4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCDC9872DC17B96C4)
            {
              if (v7[2] == 0xCDC9872DC17B96C4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCDC9872DC17B96C4)
          {
            if (v7[2] == 0xCDC9872DC17B96C4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>]";
  *(_QWORD *)(v11 + 24) = 85;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273AE8;
  *(_QWORD *)(v11 + 8) = 0xCDC9872DC17B96C4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCDC9872DC17B96C4, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCDC9872DC17B96C4;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>]";
  v15[2] = 85;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCDC9872DC17B96C4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6BD770(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::IsMaterial>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsMaterial>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsMaterial>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsMaterial>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286398;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286398;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6BDAF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42863E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42863E0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x24EEF26FD15B5B85;
  result[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>]";
  result[2] = 86;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277A70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277A70;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD **v52;
  _QWORD **v53;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t ***v73;
  uint64_t **v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v98;
  md *v99;
  unint64_t *v100;
  uint64_t v101[4];
  unint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t *v106;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v103, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v101, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v102 != v106)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v100 = v11;
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 8 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = (unint64_t *)v22;
      v24 = ***(uint64_t ****)(a1 + 8);
      if (v24 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v24 != 0xC94DD89A7B09BE9CLL)
      {
        v25 = v24 + 5;
        do
        {
          v26 = *v25;
          v25 += 5;
        }
        while (v26 != 0xC94DD89A7B09BE9CLL);
        v24 = v25 - 5;
      }
      v27 = v24[3];
      v28 = (std::__shared_weak_count *)v24[4];
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v32 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27) + 1464);
      v33 = **(_QWORD **)(a1 + 8);
      v34 = *(_QWORD **)v33;
      v35 = *(_QWORD **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x41D4E9297E100630)
        {
          v34 += 5;
          if (v34 == v35)
            goto LABEL_43;
        }
      }
      if (v34 == v35)
      {
LABEL_43:
        v37 = 0;
      }
      else
      {
        v37 = (_QWORD *)v34[3];
        v36 = (std::__shared_weak_count *)v34[4];
        if (v36)
        {
          v38 = (unint64_t *)&v36->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
          do
            v40 = __ldaxr(v38);
          while (__stlxr(v40 - 1, v38));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v41 = (uint64_t)(v37 + 37);
      v42 = *v23;
      v43 = *v23;
      v44 = v37[50];
      v45 = (v37[51] - v44) >> 3;
      if (v43 < v45
        && (v46 = *(_QWORD *)(v44 + 8 * v43)) != 0
        && HIDWORD(v42) == HIDWORD(v46)
        && ((v47 = v37[53], v47 + 16 * v46 != v37[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
      {
        v57 = *(_QWORD *)(v44 + 8 * v43);
        v58 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v23);
        ++v58[3];
        v59 = v47 + 16 * v57;
        v11 = v100;
        v49 = *(_QWORD **)(v59 + 8);
        v42 = *v23;
        v44 = v37[50];
        v43 = *v23;
        if (v43 >= (v37[51] - v44) >> 3)
          goto LABEL_63;
      }
      else
      {
        v49 = 0;
        if (v43 >= v45)
          goto LABEL_63;
      }
      v50 = *(_QWORD *)(v44 + 8 * v43);
      if (v50 && HIDWORD(v42) == HIDWORD(v50))
      {
        v51 = v37[53];
        v52 = (_QWORD **)v37[54];
        v53 = (_QWORD **)(v51 + 16 * v50);
        if (v53 != v52 && v51 != 0)
        {
          v55 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v41, v42, v23);
          ++v55[3];
          v56 = *v53;
          if (!v32)
            goto LABEL_111;
          goto LABEL_64;
        }
      }
LABEL_63:
      v56 = 0;
      if (!v32)
        goto LABEL_111;
LABEL_64:
      if ((v60 & 1) == 0
      {
        do
          v98 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v98 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index = v98;
        v11 = v100;
      }
      v61 = v49[1];
      if (v61)
      {
        v62 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index;
        v63 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
        v63.i16[0] = vaddlv_u8(v63);
        if (v63.u32[0] > 1uLL)
        {
          v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index >= v61)
            v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index % v61;
        }
        else
        {
          v64 = (v61 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index;
        }
        v65 = *(_QWORD **)(*v49 + 8 * v64);
        if (v65)
        {
          v66 = (_QWORD *)*v65;
          if (v66)
          {
            if (v63.u32[0] < 2uLL)
            {
              v67 = v61 - 1;
              while (1)
              {
                v69 = v66[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index == v69)
                {
                  if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index)
                    goto LABEL_86;
                }
                else if ((v69 & v67) != v64)
                {
                  goto LABEL_111;
                }
                v66 = (_QWORD *)*v66;
                if (!v66)
                  goto LABEL_111;
              }
            }
            do
            {
              v68 = v66[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index == v68)
              {
                if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index)
                {
LABEL_86:
                  if ((v70 & 1) == 0)
                  {
                    if ((_DWORD)v99)
                    {
                      md::typeToIntMap(v99);
                      v11 = v100;
                    }
                  }
                  if (!qword_1EE5779D0)
                    goto LABEL_138;
                  v71 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                  v71.i16[0] = vaddlv_u8(v71);
                  if (v71.u32[0] > 1uLL)
                  {
                    v72 = v62;
                    if (v62 >= qword_1EE5779D0)
                      v72 = v62 % qword_1EE5779D0;
                  }
                  else
                  {
                    v72 = (qword_1EE5779D0 - 1) & v62;
                  }
                  v73 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v72);
                  if (!v73 || (v74 = *v73) == 0)
LABEL_138:
                    abort();
                  if (v71.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v76 = v74[1];
                      if ((uint64_t *)v62 == v76)
                      {
                        if (v74[2] == (uint64_t *)v62)
                          goto LABEL_107;
                      }
                      else if (((unint64_t)v76 & (qword_1EE5779D0 - 1)) != v72)
                      {
                        goto LABEL_138;
                      }
                      v74 = (uint64_t **)*v74;
                      if (!v74)
                        goto LABEL_138;
                    }
                  }
                  while (1)
                  {
                    v75 = (unint64_t)v74[1];
                    if (v62 == v75)
                    {
                      if (v74[2] == (uint64_t *)v62)
                      {
LABEL_107:
                        v77 = *((int *)v74 + 6);
                        v78 = *((int *)v74 + 7);
                        if ((_DWORD)v77 != -1)
                          ggl::PipelineSetup::setConstantData(v56, v77, v32, 1);
                        if ((_DWORD)v78 != -1)
                          ggl::PipelineSetup::setConstantData(v56, v78, v32, 2);
                        goto LABEL_111;
                      }
                    }
                    else
                    {
                      if (v75 >= qword_1EE5779D0)
                        v75 %= (unint64_t)qword_1EE5779D0;
                      if (v75 != v72)
                        goto LABEL_138;
                    }
                    v74 = (uint64_t **)*v74;
                    if (!v74)
                      goto LABEL_138;
                  }
                }
              }
              else
              {
                if (v68 >= v61)
                  v68 %= v61;
                if (v68 != v64)
                  break;
              }
              v66 = (_QWORD *)*v66;
            }
            while (v66);
          }
        }
      }
LABEL_111:
      v79 = v106;
      v10 = *(unint64_t **)(v103 + 32);
      if (++v106 != v10)
      {
        v80 = v104[4];
        v81 = (v104[5] - v80) >> 3;
        v82 = v79 + 2;
        while (1)
        {
          v83 = *((unsigned int *)v82 - 1);
          v84 = v83 >> 7;
          if (v83 >> 7 < v81)
          {
            v85 = *(_QWORD *)(v80 + 8 * v84);
            if (v85)
            {
              v86 = *(unsigned __int16 *)(v85 + 2 * (v83 & 0x7F));
              v88 = v104[7];
              v87 = v104[8];
              if (v86 < (v87 - v88) >> 3)
              {
                v89 = v88 + 8 * v86;
                if (v89 != v87 && *(_DWORD *)(v89 + 4) == (_DWORD)v83)
                {
                  v91 = v105[4];
                  if (v84 < (v105[5] - v91) >> 3)
                  {
                    v92 = *(_QWORD *)(v91 + 8 * v84);
                    if (v92)
                    {
                      v93 = *(unsigned __int16 *)(v92 + 2 * (v83 & 0x7F));
                      v95 = v105[7];
                      v94 = v105[8];
                      if (v93 < (v94 - v95) >> 3)
                      {
                        v96 = v95 + 8 * v93;
                        if (v96 != v94 && *(_DWORD *)(v96 + 4) == (_DWORD)v83)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v106 = v82;
          v20 = v82++ == v10;
          if (v20)
            goto LABEL_9;
        }
        v10 = v82 - 1;
      }
LABEL_9:
      if (v102 == v10)
        goto LABEL_137;
    }
  }
  v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_137:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6BE338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x24EEF26FD15B5B85;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x24EEF26FD15B5B85;
      if (*(_QWORD *)&v3 <= 0x24EEF26FD15B5B85uLL)
        v5 = 0x24EEF26FD15B5B85uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x24EEF26FD15B5B85;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x24EEF26FD15B5B85)
            {
              if (v7[2] == 0x24EEF26FD15B5B85)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x24EEF26FD15B5B85)
          {
            if (v7[2] == 0x24EEF26FD15B5B85)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>]";
  *(_QWORD *)(v11 + 24) = 86;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273728;
  *(_QWORD *)(v11 + 8) = 0x24EEF26FD15B5B85;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x24EEF26FD15B5B85uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x24EEF26FD15B5B85;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>]";
  v15[2] = 86;
  gdc::Registry::_registerStorageDataSignals(a1, 0x24EEF26FD15B5B85, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6BE55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287E98;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287E98;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6BE770(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287EE0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287EE0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x2E4DB0E7E1795086;
  result[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>]";
  result[2] = 92;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42787F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42787F0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD **v52;
  _QWORD **v53;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t ***v73;
  uint64_t **v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v98;
  md *v99;
  unint64_t *v100;
  uint64_t v101[4];
  unint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t *v106;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v103, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v101, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v102 != v106)
  {
    v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v100 = v11;
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = v6[4];
      if (v12 >> 39 < (v6[5] - v13) >> 3
        && (v14 = *(_QWORD *)(v13 + 8 * (v12 >> 39))) != 0
        && (v15 = *(unsigned __int16 *)(v14 + 2 * (HIDWORD(v12) & 0x7F)),
            v17 = v6[7],
            v16 = v6[8],
            v15 < (v16 - v17) >> 3)
        && ((v18 = HIDWORD(v12), v19 = v17 + 8 * v15, v19 != v16)
          ? (v20 = *(_DWORD *)(v19 + 4) == (_DWORD)v18)
          : (v20 = 0),
            v20))
      {
        v21 = v6[11];
        v22 = v6[10] + 8 * v15;
      }
      else
      {
        v21 = v6[11];
        v22 = v21;
      }
      if (v22 == v21)
        v23 = 0;
      else
        v23 = (unint64_t *)v22;
      v24 = ***(uint64_t ****)(a1 + 8);
      if (v24 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v24 != 0xC94DD89A7B09BE9CLL)
      {
        v25 = v24 + 5;
        do
        {
          v26 = *v25;
          v25 += 5;
        }
        while (v26 != 0xC94DD89A7B09BE9CLL);
        v24 = v25 - 5;
      }
      v27 = v24[3];
      v28 = (std::__shared_weak_count *)v24[4];
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v32 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27) + 1184);
      v33 = **(_QWORD **)(a1 + 8);
      v34 = *(_QWORD **)v33;
      v35 = *(_QWORD **)(v33 + 8);
      if (v34 != v35)
      {
        while (*v34 != 0x41D4E9297E100630)
        {
          v34 += 5;
          if (v34 == v35)
            goto LABEL_43;
        }
      }
      if (v34 == v35)
      {
LABEL_43:
        v37 = 0;
      }
      else
      {
        v37 = (_QWORD *)v34[3];
        v36 = (std::__shared_weak_count *)v34[4];
        if (v36)
        {
          v38 = (unint64_t *)&v36->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
          do
            v40 = __ldaxr(v38);
          while (__stlxr(v40 - 1, v38));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v41 = (uint64_t)(v37 + 37);
      v42 = *v23;
      v43 = *v23;
      v44 = v37[50];
      v45 = (v37[51] - v44) >> 3;
      if (v43 < v45
        && (v46 = *(_QWORD *)(v44 + 8 * v43)) != 0
        && HIDWORD(v42) == HIDWORD(v46)
        && ((v47 = v37[53], v47 + 16 * v46 != v37[54]) ? (v48 = v47 == 0) : (v48 = 1), !v48))
      {
        v57 = *(_QWORD *)(v44 + 8 * v43);
        v58 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v37 + 37), v42, v23);
        ++v58[3];
        v59 = v47 + 16 * v57;
        v11 = v100;
        v49 = *(_QWORD **)(v59 + 8);
        v42 = *v23;
        v44 = v37[50];
        v43 = *v23;
        if (v43 >= (v37[51] - v44) >> 3)
          goto LABEL_63;
      }
      else
      {
        v49 = 0;
        if (v43 >= v45)
          goto LABEL_63;
      }
      v50 = *(_QWORD *)(v44 + 8 * v43);
      if (v50 && HIDWORD(v42) == HIDWORD(v50))
      {
        v51 = v37[53];
        v52 = (_QWORD **)v37[54];
        v53 = (_QWORD **)(v51 + 16 * v50);
        if (v53 != v52 && v51 != 0)
        {
          v55 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>(v41, v42, v23);
          ++v55[3];
          v56 = *v53;
          if (!v32)
            goto LABEL_111;
          goto LABEL_64;
        }
      }
LABEL_63:
      v56 = 0;
      if (!v32)
        goto LABEL_111;
LABEL_64:
      if ((v60 & 1) == 0
      {
        do
          v98 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
        while (__stlxr(v98 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
        gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index = v98;
        v11 = v100;
      }
      v61 = v49[1];
      if (v61)
      {
        v62 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index;
        v63 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
        v63.i16[0] = vaddlv_u8(v63);
        if (v63.u32[0] > 1uLL)
        {
          v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index;
          if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index >= v61)
            v64 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index % v61;
        }
        else
        {
          v64 = (v61 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index;
        }
        v65 = *(_QWORD **)(*v49 + 8 * v64);
        if (v65)
        {
          v66 = (_QWORD *)*v65;
          if (v66)
          {
            if (v63.u32[0] < 2uLL)
            {
              v67 = v61 - 1;
              while (1)
              {
                v69 = v66[1];
                if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index == v69)
                {
                  if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index)
                    goto LABEL_86;
                }
                else if ((v69 & v67) != v64)
                {
                  goto LABEL_111;
                }
                v66 = (_QWORD *)*v66;
                if (!v66)
                  goto LABEL_111;
              }
            }
            do
            {
              v68 = v66[1];
              if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index == v68)
              {
                if (v66[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index)
                {
LABEL_86:
                  if ((v70 & 1) == 0)
                  {
                    if ((_DWORD)v99)
                    {
                      md::typeToIntMap(v99);
                      v11 = v100;
                    }
                  }
                  if (!qword_1EE5779D0)
                    goto LABEL_138;
                  v71 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                  v71.i16[0] = vaddlv_u8(v71);
                  if (v71.u32[0] > 1uLL)
                  {
                    v72 = v62;
                    if (v62 >= qword_1EE5779D0)
                      v72 = v62 % qword_1EE5779D0;
                  }
                  else
                  {
                    v72 = (qword_1EE5779D0 - 1) & v62;
                  }
                  v73 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v72);
                  if (!v73 || (v74 = *v73) == 0)
LABEL_138:
                    abort();
                  if (v71.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v76 = v74[1];
                      if ((uint64_t *)v62 == v76)
                      {
                        if (v74[2] == (uint64_t *)v62)
                          goto LABEL_107;
                      }
                      else if (((unint64_t)v76 & (qword_1EE5779D0 - 1)) != v72)
                      {
                        goto LABEL_138;
                      }
                      v74 = (uint64_t **)*v74;
                      if (!v74)
                        goto LABEL_138;
                    }
                  }
                  while (1)
                  {
                    v75 = (unint64_t)v74[1];
                    if (v62 == v75)
                    {
                      if (v74[2] == (uint64_t *)v62)
                      {
LABEL_107:
                        v77 = *((int *)v74 + 6);
                        v78 = *((int *)v74 + 7);
                        if ((_DWORD)v77 != -1)
                          ggl::PipelineSetup::setConstantData(v56, v77, v32, 1);
                        if ((_DWORD)v78 != -1)
                          ggl::PipelineSetup::setConstantData(v56, v78, v32, 2);
                        goto LABEL_111;
                      }
                    }
                    else
                    {
                      if (v75 >= qword_1EE5779D0)
                        v75 %= (unint64_t)qword_1EE5779D0;
                      if (v75 != v72)
                        goto LABEL_138;
                    }
                    v74 = (uint64_t **)*v74;
                    if (!v74)
                      goto LABEL_138;
                  }
                }
              }
              else
              {
                if (v68 >= v61)
                  v68 %= v61;
                if (v68 != v64)
                  break;
              }
              v66 = (_QWORD *)*v66;
            }
            while (v66);
          }
        }
      }
LABEL_111:
      v79 = v106;
      v10 = *(unint64_t **)(v103 + 32);
      if (++v106 != v10)
      {
        v80 = v104[4];
        v81 = (v104[5] - v80) >> 3;
        v82 = v79 + 2;
        while (1)
        {
          v83 = *((unsigned int *)v82 - 1);
          v84 = v83 >> 7;
          if (v83 >> 7 < v81)
          {
            v85 = *(_QWORD *)(v80 + 8 * v84);
            if (v85)
            {
              v86 = *(unsigned __int16 *)(v85 + 2 * (v83 & 0x7F));
              v88 = v104[7];
              v87 = v104[8];
              if (v86 < (v87 - v88) >> 3)
              {
                v89 = v88 + 8 * v86;
                if (v89 != v87 && *(_DWORD *)(v89 + 4) == (_DWORD)v83)
                {
                  v91 = v105[4];
                  if (v84 < (v105[5] - v91) >> 3)
                  {
                    v92 = *(_QWORD *)(v91 + 8 * v84);
                    if (v92)
                    {
                      v93 = *(unsigned __int16 *)(v92 + 2 * (v83 & 0x7F));
                      v95 = v105[7];
                      v94 = v105[8];
                      if (v93 < (v94 - v95) >> 3)
                      {
                        v96 = v95 + 8 * v93;
                        if (v96 != v94 && *(_DWORD *)(v96 + 4) == (_DWORD)v83)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v106 = v82;
          v20 = v82++ == v10;
          if (v20)
            goto LABEL_9;
        }
        v10 = v82 - 1;
      }
LABEL_9:
      if (v102 == v10)
        goto LABEL_137;
    }
  }
  v11 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_137:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19F6BEFB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2E4DB0E7E1795086;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2E4DB0E7E1795086;
      if (*(_QWORD *)&v3 <= 0x2E4DB0E7E1795086uLL)
        v5 = 0x2E4DB0E7E1795086uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2E4DB0E7E1795086;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2E4DB0E7E1795086)
            {
              if (v7[2] == 0x2E4DB0E7E1795086)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2E4DB0E7E1795086)
          {
            if (v7[2] == 0x2E4DB0E7E1795086)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>]";
  *(_QWORD *)(v11 + 24) = 92;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4273878;
  *(_QWORD *)(v11 + 8) = 0x2E4DB0E7E1795086;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2E4DB0E7E1795086uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2E4DB0E7E1795086;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>]";
  v15[2] = 92;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2E4DB0E7E1795086, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6BF1D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287F28;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287F28;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6BF3E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287F70;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287F70;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x32FFF5E924C6D657;
  v2[1] = "md::ls::PlanarConstantDataHandle]";
  *(_QWORD *)&result = 32;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4110;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>]";
  v2[5] = 92;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4278838;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4278838;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD **v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint8x8_t v105;
  unint64_t v106;
  uint64_t ***v107;
  uint64_t **v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  md *v114;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;

  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(v2);
  v4 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>(v2);
  v5 = gdc::Registry::storage<md::ls::PipelineSetup>(v2);
  v6 = (_QWORD *)v5;
  v7 = v3 + 4;
  if (*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56) < v3[8] - v3[7])
    v7 = (_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v7[4] - v7[3])
    v7 = (_QWORD *)(v5 + 32);
  v117 = v7;
  v118 = v3;
  v119 = (_QWORD *)v4;
  v120 = (_QWORD *)v5;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v121 = v8;
  if (v9 == v8)
  {
    v10 = a1;
  }
  else
  {
    v10 = a1;
    if (!gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117))
    {
      v11 = v8 + 1;
      do
      {
        v8 = v11;
        v121 = v11;
        if (v11 == v9)
          break;
        isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v117);
        v11 = v8 + 1;
      }
      while (!isValid);
    }
  }
  if (v9 != v8)
  {
    result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v116 = result;
    while (1)
    {
      *result = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v3[4];
      if (v16 < (v3[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v3[7],
            v20 = v3[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unint64_t *)(v3[10] + 16 * v19);
      }
      else
      {
        v24 = (unint64_t *)v3[11];
      }
      v25 = v6[4];
      if (v16 < (v6[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v6[7],
            v28 = v6[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = v6[11];
        v33 = v6[10] + 8 * v27;
      }
      else
      {
        v32 = v6[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = (unint64_t *)v33;
      v35 = **(_QWORD **)(v10 + 8);
      v36 = *(_QWORD **)v35;
      v37 = *(_QWORD **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0x41D4E9297E100630)
        {
          v36 += 5;
          if (v36 == v37)
            goto LABEL_45;
        }
      }
      if (v36 == v37)
      {
LABEL_45:
        v38 = 0;
      }
      else
      {
        v38 = (_QWORD *)v36[3];
        v39 = (std::__shared_weak_count *)v36[4];
        if (v39)
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(p_shared_owners);
          while (__stxr(v41 + 1, p_shared_owners));
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      v43 = *v34;
      v44 = *v34;
      v45 = v38[50];
      v46 = (v38[51] - v45) >> 3;
      if (v44 < v46
        && (v47 = *(_QWORD *)(v45 + 8 * v44)) != 0
        && HIDWORD(v43) == HIDWORD(v47)
        && ((v48 = v38[53], v48 + 16 * v47 != v38[54]) ? (v49 = v48 == 0) : (v49 = 1), !v49))
      {
        v55 = *(_QWORD *)(v45 + 8 * v44);
        v56 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v56[3];
        v57 = v48 + 16 * v55;
        v10 = a1;
        v50 = *(_QWORD **)(v57 + 8);
        v43 = *v34;
        v45 = v38[50];
        v44 = *v34;
        if (v44 >= (v38[51] - v45) >> 3)
        {
LABEL_66:
          v98 = 0;
          goto LABEL_67;
        }
      }
      else
      {
        v50 = 0;
        if (v44 >= v46)
          goto LABEL_66;
      }
      v51 = *(_QWORD *)(v45 + 8 * v44);
      if (!v51 || HIDWORD(v43) != HIDWORD(v51))
        goto LABEL_66;
      v52 = v38[53];
      v53 = (_QWORD **)(v52 + 16 * v51);
      if (v53 == (_QWORD **)v38[54] || v52 == 0)
      {
        v98 = 0;
      }
      else
      {
        v97 = std::__hash_table<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::hash<geo::handle<md::PipelineItem>>,std::equal_to<geo::handle<md::PipelineItem>>,true>,std::__unordered_map_equal<geo::handle<md::PipelineItem>,std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>,std::equal_to<geo::handle<md::PipelineItem>>,std::hash<geo::handle<md::PipelineItem>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::PipelineItem>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::PipelineItem>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::PipelineItem> const&>,std::tuple<>>((uint64_t)(v38 + 37), v43, v34);
        ++v97[3];
        v98 = *v53;
      }
      v10 = a1;
LABEL_67:
      v58 = *v24;
      v122 = v58;
      v59 = v38[760];
      if (v58 < (unint64_t)((v38[761] - v59) >> 3))
      {
        v60 = *(_QWORD *)(v59 + 8 * v58);
        if (v60 && HIDWORD(v58) == HIDWORD(v60))
        {
          v87 = v38[763];
          v88 = (uint64_t *)(v87 + 24 * v60);
          if (v88 != (uint64_t *)v38[764] && v87 != 0)
          {
            v90 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>> const&>,std::tuple<>>((uint64_t)(v38 + 747), v58, &v122);
            ++v90[3];
            v91 = *v88;
            if (v91)
            {
              if ((v92 & 1) == 0
              {
                do
                  v113 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
                while (__stlxr(v113 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
                gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index = v113;
                v10 = a1;
              }
              v93 = v50[1];
              if (v93)
              {
                v94 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index;
                v95 = (uint8x8_t)vcnt_s8((int8x8_t)v93);
                v95.i16[0] = vaddlv_u8(v95);
                if (v95.u32[0] > 1uLL)
                {
                  v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index;
                  if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index >= v93)
                    v96 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index % v93;
                }
                else
                {
                  v96 = (v93 - 1) & gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index;
                }
                v99 = *(_QWORD **)(*v50 + 8 * v96);
                if (v99)
                {
                  v100 = (_QWORD *)*v99;
                  if (v100)
                  {
                    if (v95.u32[0] < 2uLL)
                    {
                      v101 = v93 - 1;
                      while (1)
                      {
                        v103 = v100[1];
                        if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index == v103)
                        {
                          if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index)
                            goto LABEL_130;
                        }
                        else if ((v103 & v101) != v96)
                        {
                          goto LABEL_72;
                        }
                        v100 = (_QWORD *)*v100;
                        if (!v100)
                          goto LABEL_72;
                      }
                    }
                    do
                    {
                      v102 = v100[1];
                      if (gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index == v102)
                      {
                        if (v100[2] == gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index)
                        {
LABEL_130:
                          if ((v104 & 1) == 0)
                          {
                            if ((_DWORD)v114)
                            {
                              md::typeToIntMap(v114);
                              v10 = a1;
                            }
                          }
                          if (!qword_1EE5779D0)
                            goto LABEL_162;
                          v105 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE5779D0);
                          v105.i16[0] = vaddlv_u8(v105);
                          if (v105.u32[0] > 1uLL)
                          {
                            v106 = v94;
                            if (v94 >= qword_1EE5779D0)
                              v106 = v94 % qword_1EE5779D0;
                          }
                          else
                          {
                            v106 = (qword_1EE5779D0 - 1) & v94;
                          }
                          v107 = *(uint64_t ****)(md::typeToIntMap(void)::typeToIntMap + 8 * v106);
                          if (!v107 || (v108 = *v107) == 0)
LABEL_162:
                            abort();
                          if (v105.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v110 = v108[1];
                              if ((uint64_t *)v94 == v110)
                              {
                                if (v108[2] == (uint64_t *)v94)
                                  goto LABEL_151;
                              }
                              else if (((unint64_t)v110 & (qword_1EE5779D0 - 1)) != v106)
                              {
                                goto LABEL_162;
                              }
                              v108 = (uint64_t **)*v108;
                              if (!v108)
                                goto LABEL_162;
                            }
                          }
                          while (1)
                          {
                            v109 = (unint64_t)v108[1];
                            if (v94 == v109)
                            {
                              if (v108[2] == (uint64_t *)v94)
                              {
LABEL_151:
                                v111 = *((int *)v108 + 6);
                                v112 = *((int *)v108 + 7);
                                if ((_DWORD)v111 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v111, v91, 1);
                                if ((_DWORD)v112 != -1)
                                  ggl::PipelineSetup::setConstantData(v98, v112, v91, 2);
                                goto LABEL_72;
                              }
                            }
                            else
                            {
                              if (v109 >= qword_1EE5779D0)
                                v109 %= (unint64_t)qword_1EE5779D0;
                              if (v109 != v106)
                                goto LABEL_162;
                            }
                            v108 = (uint64_t **)*v108;
                            if (!v108)
                              goto LABEL_162;
                          }
                        }
                      }
                      else
                      {
                        if (v102 >= v93)
                          v102 %= v93;
                        if (v102 != v96)
                          break;
                      }
                      v100 = (_QWORD *)*v100;
                    }
                    while (v100);
                  }
                }
              }
            }
          }
        }
      }
LABEL_72:
      v8 = (_QWORD *)v117[4];
      v62 = v121 + 1;
      v121 = v62;
      if (v62 == v8)
      {
        result = v116;
        if (v9 == v8)
          goto LABEL_161;
      }
      else
      {
        v63 = v118[4];
        result = v116;
        do
        {
          v64 = *((unsigned int *)v62 + 1);
          v65 = v64 >> 7;
          if (v64 >> 7 < (v118[5] - v63) >> 3)
          {
            v66 = *(_QWORD *)(v63 + 8 * v65);
            if (v66)
            {
              v67 = v64 & 0x7F;
              v68 = *(unsigned __int16 *)(v66 + 2 * v67);
              v69 = v118[7];
              v70 = v118[8];
              if (v68 < (v70 - v69) >> 3)
              {
                v71 = v69 + 8 * v68;
                if (v71 != v70 && *(_DWORD *)(v71 + 4) == (_DWORD)v64)
                {
                  v73 = v119[4];
                  if (v65 < (v119[5] - v73) >> 3)
                  {
                    v74 = *(_QWORD *)(v73 + 8 * v65);
                    if (v74)
                    {
                      v75 = *(unsigned __int16 *)(v74 + 2 * v67);
                      v76 = v119[7];
                      v77 = v119[8];
                      if (v75 < (v77 - v76) >> 3)
                      {
                        v78 = v76 + 8 * v75;
                        if (v78 != v77 && *(_DWORD *)(v78 + 4) == (_DWORD)v64)
                        {
                          v80 = v120[4];
                          if (v65 < (v120[5] - v80) >> 3)
                          {
                            v81 = *(_QWORD *)(v80 + 8 * v65);
                            if (v81)
                            {
                              v82 = *(unsigned __int16 *)(v81 + 2 * v67);
                              v84 = v120[7];
                              v83 = v120[8];
                              if (v82 < (v83 - v84) >> 3)
                              {
                                v85 = v84 + 8 * v82;
                                if (*(_DWORD *)(v85 + 4) == (_DWORD)v64 && v85 != v83)
                                {
                                  v8 = v62;
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
        }
        while (v62 != v8);
        v62 = v8;
LABEL_100:
        v121 = v62;
        if (v9 == v8)
          goto LABEL_161;
      }
    }
  }
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
LABEL_161:
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(v10 + 8) = 0;
  return result;
}

void sub_19F6BFCE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x32FFF5E924C6D657;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x32FFF5E924C6D657;
      if (*(_QWORD *)&v3 <= 0x32FFF5E924C6D657uLL)
        v5 = 0x32FFF5E924C6D657uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x32FFF5E924C6D657;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x32FFF5E924C6D657)
            {
              if (v7[2] == 0x32FFF5E924C6D657)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x32FFF5E924C6D657)
          {
            if (v7[2] == 0x32FFF5E924C6D657)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PlanarConstantDataHandle]";
  *(_QWORD *)(v11 + 24) = 32;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4272F48;
  *(_QWORD *)(v11 + 8) = 0x32FFF5E924C6D657;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x32FFF5E924C6D657uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x32FFF5E924C6D657;
  v15[1] = "md::ls::PlanarConstantDataHandle]";
  v15[2] = 32;
  gdc::Registry::_registerStorageDataSignals(a1, 0x32FFF5E924C6D657, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6BFF08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA14CF6DCDEA3F5F5;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA14CF6DCDEA3F5F5;
      if (*(_QWORD *)&v3 <= 0xA14CF6DCDEA3F5F5)
        v5 = 0xA14CF6DCDEA3F5F5 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA14CF6DCDEA3F5F5;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA14CF6DCDEA3F5F5)
            {
              if (v7[2] == 0xA14CF6DCDEA3F5F5)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA14CF6DCDEA3F5F5)
          {
            if (v7[2] == 0xA14CF6DCDEA3F5F5)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>]";
  *(_QWORD *)(v11 + 24) = 92;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42738A8;
  *(_QWORD *)(v11 + 8) = 0xA14CF6DCDEA3F5F5;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA14CF6DCDEA3F5F5, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA14CF6DCDEA3F5F5;
  v15[1] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>]";
  v15[2] = 92;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA14CF6DCDEA3F5F5, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6C0130(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PlanarConstantDataHandle>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PlanarConstantDataHandle>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 16 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_BYTE *)(v15 - 8);
  *(_QWORD *)v14 = *(_QWORD *)(v15 - 16);
  *(_BYTE *)(v14 + 8) = v16;
  a1[11] -= 16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PlanarConstantDataHandle>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PlanarConstantDataHandle>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4287598;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4287598;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls13PipelineSetupEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19F6C04C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42875E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42875E0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x74DC502726E97929;
  v2[1] = "md::ls::TransformConstantDataHandle]";
  *(_QWORD *)&result = 35;
  *((_OWORD *)v2 + 1) = xmmword_19FFB4120;
  v2[4] = "md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>]";
  v2[5] = 82;
  *a1 = v2;
  return result;
}

