void sub_19F238194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  void *v42;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;

  md::TrafficContext::~TrafficContext((md::TrafficContext *)&a42);
  v44 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v45 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 104);
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 + v44 - a14, v45));
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

char *md::RoadRenderLayer::reserveStencilRange(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 v6;
  char *v7;
  char *v8;
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  char *v17;
  char *v18;
  char *result;
  char *v21;
  unsigned __int8 v23[4];
  int v24;
  uint64_t v25;

  v6 = *(_BYTE *)(a1 + 49) - *(_BYTE *)(a1 + 48) + 1;
  v7 = *(char **)(a1 + 416);
  v8 = *(char **)(a1 + 424);
  if (v7 != v8)
  {
    while (*a3 != *v7 || a3[1] != v7[1])
    {
      v7 += 16;
      if (v7 == v8)
        goto LABEL_9;
    }
  }
  if (v7 == v8)
  {
LABEL_9:
    *(_WORD *)v23 = *(_WORD *)a3;
    v25 = 0;
    v7 = geo::linear_map<md::CommandBufferLocation,ggl::ClearItem *,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>,std::vector<std::pair<md::CommandBufferLocation,ggl::ClearItem *>>>::insert(a1 + 416, v23);
  }
  v10 = *(unsigned __int8 **)(a2 + 24);
  v11 = *v10;
  v12 = v11 + v6;
  v13 = v10[1];
  v14 = v12 > v13;
  if (v12 <= v13)
    v15 = 0;
  else
    v15 = v10 + 4;
  *((_QWORD *)v7 + 1) = v15;
  if (v14)
  {
    v10[1] = v10[2];
    v11 = 1;
  }
  *v10 = v11 + v6;
  v16 = v11 - *(unsigned __int8 *)(a1 + 48);
  v17 = *(char **)(a1 + 368);
  v18 = *(char **)(a1 + 376);
  if (v17 != v18)
  {
    while (*a3 != *v17 || a3[1] != v17[1])
    {
      v17 += 8;
      if (v17 == v18)
        goto LABEL_24;
    }
  }
  if (v17 == v18)
  {
LABEL_24:
    *(_WORD *)v23 = *(_WORD *)a3;
    v24 = 0;
    v17 = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert(a1 + 368, v23);
  }
  *((_DWORD *)v17 + 1) = v16;
  result = *(char **)(a1 + 392);
  v21 = *(char **)(a1 + 400);
  if (result != v21)
  {
    while (*a3 != *result || a3[1] != result[1])
    {
      result += 8;
      if (result == v21)
        goto LABEL_33;
    }
  }
  if (result == v21)
  {
LABEL_33:
    *(_WORD *)v23 = *(_WORD *)a3;
    v24 = 0;
    result = geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert(a1 + 392, v23);
  }
  *((_DWORD *)result + 1) = 0;
  return result;
}

char *geo::linear_map<md::CommandBufferLocation,int,std::equal_to<md::CommandBufferLocation>,std::allocator<std::pair<md::CommandBufferLocation,int>>,std::vector<std::pair<md::CommandBufferLocation,int>>>::insert(uint64_t a1, unsigned __int8 *a2)
{
  char *v4;
  char *v5;
  char *result;
  unint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  result = v4;
  if (v4 != v5)
  {
    result = v4;
    while (*a2 != *result || a2[1] != result[1])
    {
      result += 8;
      if (result == v5)
        goto LABEL_10;
    }
  }
  if (result == v5)
  {
LABEL_10:
    v8 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v5 >= v8)
    {
      v10 = v5 - v4;
      v11 = (v5 - v4) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        abort();
      v13 = v8 - (_QWORD)v4;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v15 = operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *v16 = *(_QWORD *)a2;
      v9 = v16 + 1;
      if (v4 != v5)
      {
        if ((unint64_t)(v10 - 8) < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v4 - v15) < 0x20)
          goto LABEL_38;
        v17 = ((unint64_t)(v10 - 8) >> 3) + 1;
        v18 = &v15[8 * v11 - 16];
        v19 = v5 - 16;
        v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *(_OWORD *)v19;
          *(v18 - 1) = *((_OWORD *)v19 - 1);
          *v18 = v21;
          v18 -= 2;
          v19 -= 32;
          v20 -= 4;
        }
        while (v20);
        v16 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
        v5 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
        if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v22 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *--v16 = v22;
          }
          while (v5 != v4);
          v4 = *(char **)a1;
        }
      }
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = &v15[8 * v14];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)v5 = *(_QWORD *)a2;
      v9 = v5 + 8;
    }
    *(_QWORD *)(a1 + 8) = v9;
    return (char *)(v9 - 1);
  }
  return result;
}

_QWORD *md::CartographicTiledVectorRenderLayer<md::RoadTileDataRenderable>::layoutStencilTiles(uint64_t a1, md::LayoutContext *a2, uint64_t a3, int a4, _BYTE *a5)
{
  _QWORD *result;
  uint64_t *v7;
  int8x8_t v8;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  int v35;
  unsigned __int16 *v37;
  int v38;
  int v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  _QWORD *v58;
  unint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  _QWORD *v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  int8x8_t v131;
  _QWORD *v132;
  uint8x8_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float64x2_t *v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t **v151;
  uint64_t *v152;
  uint64_t *v153;
  unsigned __int8 *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  int v164;
  double v165;
  uint64_t v166;
  int v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  __int128 v191;
  _DWORD *v192;
  _DWORD *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  double v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  int v208;
  double v209;
  double v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  uint64_t *v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  float32x4_t *v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _OWORD *v248;
  __int128 *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  _QWORD *v255;
  int v256;
  int v257;
  unint64_t v258;
  unint64_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  uint64_t *v263;
  ggl::RenderItem *v264;
  uint64_t v265;
  _QWORD *v266;
  unint64_t v267;
  float32x4_t *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  _QWORD *v276;
  __int128 v277;
  int64x2_t v278;
  int64x2_t v279;
  int v280;
  uint64_t v281;
  unint64_t v282;
  unsigned __int8 *v283;
  _QWORD *v285;
  _QWORD *v286;
  _OWORD v287[8];
  __int128 v288;
  uint64_t v289;
  double v290;
  double v291;
  double v292;
  double v293;
  float64x2_t v294;
  double v295;
  double v296;
  double v297;
  double v298;
  _BYTE v299[48];
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  double v315;
  double v316;
  double v317;
  uint64_t v318;
  double v319;
  double v320;
  double v321;
  uint64_t v322;
  double v323;
  double v324;
  double v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  _BYTE v330[80];
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  _QWORD v334[3];
  _QWORD *v335;
  uint64_t v336;

  v336 = *MEMORY[0x1E0C80C00];
  result = v334;
  v334[0] = &off_1E42D3E20;
  v335 = v334;
  v7 = (uint64_t *)*((_QWORD *)a2 + 1);
  v8 = (int8x8_t)v7[1];
  if (!*(_QWORD *)&v8)
  {
    v12 = 4;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v8 <= 0x3070CB6B3C7F21D3uLL)
      v11 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & 0x3070CB6B3C7F21D3;
  }
  v13 = *v7;
  v14 = *(_QWORD **)(v13 + 8 * v11);
  if (!v14)
    goto LABEL_25;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_25;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x3070CB6B3C7F21D3)
      {
        if (v15[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v17 & (*(_QWORD *)&v8 - 1)) != v11)
      {
        goto LABEL_25;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0x3070CB6B3C7F21D3)
      break;
    if (v16 >= *(_QWORD *)&v8)
      v16 %= *(_QWORD *)&v8;
    if (v16 != v11)
      goto LABEL_25;
LABEL_12:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_25;
  }
  if (v15[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v18 = v15[5];
  if (*(_QWORD *)(v18 + 8) == 0x3070CB6B3C7F21D3)
  {
    v281 = *(_QWORD *)(v18 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v281 = 0;
LABEL_26:
  if (v10.u32[0] > 1uLL)
  {
    v19 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v8 <= 0x99BED48DEFBBD82BLL)
      v19 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v8;
  }
  else
  {
    v19 = (*(_QWORD *)&v8 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v20 = *(_QWORD **)(v13 + 8 * v19);
  if (!v20)
    goto LABEL_49;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_49;
  if (v10.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v8 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v24 == 0x99BED48DEFBBD82BLL)
      {
        if (v21[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_46;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_49;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_49;
    }
  }
  while (1)
  {
    v23 = v21[1];
    if (v23 == 0x99BED48DEFBBD82BLL)
      break;
    if (v23 >= *(_QWORD *)&v8)
      v23 %= *(_QWORD *)&v8;
    if (v23 != v19)
      goto LABEL_49;
LABEL_35:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_49;
  }
  if (v21[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_35;
LABEL_46:
  v25 = v21[5];
  if (*(_QWORD *)(v25 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_49:
    v273 = 0;
    if (v281)
      goto LABEL_50;
    goto LABEL_72;
  }
  v273 = *(_QWORD *)(v25 + 32);
  if (!v281)
    goto LABEL_72;
LABEL_50:
  v26 = *(_QWORD **)v273;
  v27 = *(unsigned __int16 **)(*(_QWORD *)v273 + 184);
  v28 = *(unsigned __int16 **)(*(_QWORD *)v273 + 192);
  if (v27 != v28)
  {
    v29 = (unsigned __int16 *)v26[15];
    while (1)
    {
      v30 = (unsigned __int16 *)v26[14];
      if (v30 != v29)
      {
        v30 = (unsigned __int16 *)v26[14];
        while (*v30 != *v27)
        {
          v30 += 56;
          if (v30 == v29)
          {
            v30 = (unsigned __int16 *)v26[15];
            break;
          }
        }
      }
      if (!*((_BYTE *)v30 + 8))
        break;
      if (++v27 == v28)
        goto LABEL_59;
    }
LABEL_73:
    *(_BYTE *)(a1 + 360) = 1;
    goto LABEL_74;
  }
LABEL_59:
  v31 = (unsigned __int16 *)v26[26];
  v32 = (unsigned __int16 *)v26[27];
  if (v31 != v32)
  {
    v34 = (unsigned __int16 *)v26[14];
    v33 = (unsigned __int16 *)v26[15];
    do
    {
      v37 = v34;
      if (v34 != v33)
      {
        v37 = v34;
        while (*v37 != *v31)
        {
          v37 += 56;
          if (v37 == v33)
          {
            v37 = v33;
            break;
          }
        }
      }
      v35 = *((unsigned __int8 *)v37 + 8);
      ++v31;
      if (v35)
        _ZF = v31 == v32;
      else
        _ZF = 1;
    }
    while (!_ZF);
    if (!v35)
      goto LABEL_73;
  }
  v38 = *(unsigned __int8 *)(a1 + 48);
  v39 = *(unsigned __int8 *)(a1 + 49);
  *(_BYTE *)(a1 + 360) = v38 != v39;
  if (v38 == v39)
  {
LABEL_72:
    result = v334;
    v12 = 4;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
LABEL_74:
  v40 = *(_QWORD **)(a1 + 352);
  v41 = v40[14];
  v282 = v40[15];
  v42 = *(uint64_t **)(a1 + 272);
  v43 = *(uint64_t **)(a1 + 280);
  v286 = (_QWORD *)a1;
  if (v42 != v43)
  {
    do
    {
      v44 = *v42;
      if (!v335
        || (*(_QWORD *)v330 = *v42, (*(unsigned int (**)(_QWORD *, _BYTE *))(*v335 + 48))(v335, v330)))
      {
        v45 = *(_QWORD *)(v44 + 384);
        v46 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(*(_QWORD *)v273 + 8), (unsigned __int8 *)(v45 + 16));
        if (v46)
        {
          v47 = 0xAAAAAAAAAAAAAAABLL * (v46[17] - v46[16]);
          if (*(unsigned __int8 *)(v45 + 168) == 255)
            v41 += v47;
          else
            v282 += v47;
        }
      }
      ++v42;
    }
    while (v42 != v43);
    v40 = (_QWORD *)v286[44];
  }
  v48 = v281 + 144;
  v49 = 128;
  if (*(unsigned __int8 *)(v281 + 320) - 1 >= 3)
    v48 = v281 + 128;
  else
    v49 = 144;
  v50 = *(_QWORD *)(v281 + v49);
  v51 = *(std::__shared_weak_count **)(v48 + 8);
  v313 = v50;
  v314 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(p_shared_owners);
    while (__stxr(v53 + 1, p_shared_owners));
  }
  v285 = v40;
  if (v41 > (uint64_t)(v40[8] - v40[7]) >> 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v277 = _Q0;
    v278 = vdupq_n_s64(1uLL);
    do
    {
      v61 = operator new();
      v62 = v61;
      *(_OWORD *)v61 = 0u;
      *(_OWORD *)(v61 + 16) = 0u;
      *(_OWORD *)(v61 + 32) = 0u;
      *(_OWORD *)(v61 + 48) = 0u;
      *(_OWORD *)(v61 + 64) = 0u;
      *(_QWORD *)(v61 + 8) = &off_1E42B59B0;
      *(_QWORD *)(v61 + 24) = "";
      *(_QWORD *)(v61 + 32) = 0;
      *(_DWORD *)(v61 + 48) = 0;
      *(_QWORD *)(v61 + 40) = 0;
      *(_DWORD *)(v61 + 64) = 1065353216;
      *(_OWORD *)(v61 + 88) = 0u;
      *(_OWORD *)(v61 + 72) = 0u;
      *(int64x2_t *)(v61 + 104) = v278;
      *(_QWORD *)(v61 + 120) = 0;
      v40 = v285;
      v64 = (uint64_t *)v285[8];
      v63 = v285[9];
      if ((unint64_t)v64 >= v63)
      {
        v66 = (char *)v285[7];
        v67 = ((char *)v64 - v66) >> 3;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61)
          abort();
        v69 = v63 - (_QWORD)v66;
        if (v69 >> 2 > v68)
          v68 = v69 >> 2;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 >> 61)
LABEL_312:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v71 = (char *)operator new(8 * v70);
        }
        else
        {
          v71 = 0;
        }
        v72 = (uint64_t *)&v71[8 * v67];
        *v72 = v62;
        v65 = v72 + 1;
        if (v64 == (uint64_t *)v66)
        {
          v40 = v285;
        }
        else
        {
          v73 = (char *)(v64 - 1) - v66;
          if (v73 < 0x58)
            goto LABEL_317;
          if ((unint64_t)(v66 - v71) < 0x20)
            goto LABEL_317;
          v74 = (v73 >> 3) + 1;
          v75 = &v71[8 * v67 - 16];
          v76 = v64 - 2;
          v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v78 = *(_OWORD *)v76;
            *((_OWORD *)v75 - 1) = *((_OWORD *)v76 - 1);
            *(_OWORD *)v75 = v78;
            v75 -= 32;
            v76 -= 4;
            v77 -= 4;
          }
          while (v77);
          v72 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
          v64 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_317:
            do
            {
              v79 = *--v64;
              *--v72 = v79;
            }
            while (v64 != (uint64_t *)v66);
          }
          v40 = v285;
          v64 = (uint64_t *)v285[7];
        }
        v40[7] = v72;
        v40[8] = v65;
        v40[9] = &v71[8 * v70];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *v64 = v61;
        v65 = v64 + 1;
      }
      v40[8] = v65;
      v80 = (_QWORD *)*(v65 - 1);
      v81 = (_QWORD *)operator new();
      v82 = v286[44];
      v83 = operator new(0xE8uLL);
      v83[1] = 0;
      v83[2] = 0;
      *v83 = &off_1E42E2278;
      v84 = ggl::BufferData::BufferData((uint64_t)(v83 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v83[28] = ggl::Tile::View::reflection(void)::reflection;
      v83[3] = &off_1E42B97B0;
      *(_QWORD *)v330 = v84;
      *(_QWORD *)&v330[8] = v83;
      v316 = 0.0;
      v315 = 0.0;
      v85 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v85->__shared_owners_ = 0;
      v86 = (unint64_t *)&v85->__shared_owners_;
      v85->__shared_weak_owners_ = 0;
      v85->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
      v87 = ggl::BufferData::BufferData((uint64_t)&v85[1], qword_1EE55CC40, 2, 1, 6, 1);
      v85[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
      v85[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
      *(_QWORD *)&v305.f64[0] = v87;
      *(_QWORD *)&v305.f64[1] = v85;
      ggl::PolygonSolidFill::MeshPipelineSetup::MeshPipelineSetup(v81, *(_QWORD *)(v82 + 24), *(std::__shared_weak_count **)(v82 + 32), (uint64_t *)v330, (uint64_t *)&v315, (uint64_t *)&v305);
      *v80 = v81;
      do
        v88 = __ldaxr(v86);
      while (__stlxr(v88 - 1, v86));
      if (v88)
      {
        v89 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_127;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
        v89 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_127;
      }
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (v91)
      {
LABEL_127:
        v92 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
          goto LABEL_128;
        goto LABEL_92;
      }
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
      v92 = *(std::__shared_weak_count **)&v330[8];
      if (*(_QWORD *)&v330[8])
      {
LABEL_128:
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
LABEL_92:
      v58 = *(_QWORD **)(*(_QWORD *)(*v80 + 64) + 32);
      v59 = v58[1];
      v60 = (_OWORD *)v58[9];
      *v60 = v277;
      v60[1] = xmmword_19FFB3480;
      v80[9] = v313;
      if (v58[8] > v59)
        v59 = v58[8];
      v58[7] = 0;
      v58[8] = v59;
    }
    while (v41 > (uint64_t)(v40[8] - v40[7]) >> 3);
  }
  if (v282 > (uint64_t)(v40[11] - v40[10]) >> 3)
  {
    v279 = vdupq_n_s64(1uLL);
    do
    {
      v95 = operator new();
      v96 = v95;
      *(_OWORD *)v95 = 0u;
      *(_OWORD *)(v95 + 16) = 0u;
      *(_OWORD *)(v95 + 32) = 0u;
      *(_OWORD *)(v95 + 48) = 0u;
      *(_OWORD *)(v95 + 64) = 0u;
      *(_QWORD *)(v95 + 8) = &off_1E42B59B0;
      *(_QWORD *)(v95 + 24) = "";
      *(_QWORD *)(v95 + 32) = 0;
      *(_DWORD *)(v95 + 48) = 0;
      *(_QWORD *)(v95 + 40) = 0;
      *(_DWORD *)(v95 + 64) = 1065353216;
      *(_OWORD *)(v95 + 88) = 0u;
      *(_OWORD *)(v95 + 72) = 0u;
      *(int64x2_t *)(v95 + 104) = v279;
      *(_QWORD *)(v95 + 120) = 0;
      v40 = v285;
      v98 = (uint64_t *)v285[11];
      v97 = v285[12];
      if ((unint64_t)v98 >= v97)
      {
        v101 = (char *)v285[10];
        v102 = ((char *)v98 - v101) >> 3;
        v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 61)
          abort();
        v104 = v97 - (_QWORD)v101;
        if (v104 >> 2 > v103)
          v103 = v104 >> 2;
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v103;
        if (v105)
        {
          if (v105 >> 61)
            goto LABEL_312;
          v106 = (char *)operator new(8 * v105);
        }
        else
        {
          v106 = 0;
        }
        v107 = (uint64_t *)&v106[8 * v102];
        *v107 = v96;
        v99 = v107 + 1;
        if (v98 == (uint64_t *)v101)
        {
          v40 = v285;
        }
        else
        {
          v108 = (char *)(v98 - 1) - v101;
          if (v108 < 0x58)
            goto LABEL_318;
          if ((unint64_t)(v101 - v106) < 0x20)
            goto LABEL_318;
          v109 = (v108 >> 3) + 1;
          v110 = &v106[8 * v102 - 16];
          v111 = v98 - 2;
          v112 = v109 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v113 = *(_OWORD *)v111;
            *((_OWORD *)v110 - 1) = *((_OWORD *)v111 - 1);
            *(_OWORD *)v110 = v113;
            v110 -= 32;
            v111 -= 4;
            v112 -= 4;
          }
          while (v112);
          v107 -= v109 & 0x3FFFFFFFFFFFFFFCLL;
          v98 -= v109 & 0x3FFFFFFFFFFFFFFCLL;
          if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_318:
            do
            {
              v114 = *--v98;
              *--v107 = v114;
            }
            while (v98 != (uint64_t *)v101);
          }
          v40 = v285;
          v98 = (uint64_t *)v285[10];
        }
        v40[10] = v107;
        v40[11] = v99;
        v40[12] = &v106[8 * v105];
        v100 = v286;
        if (v98)
          operator delete(v98);
      }
      else
      {
        *v98 = v95;
        v99 = v98 + 1;
        v100 = v286;
      }
      v40[11] = v99;
      v115 = (_QWORD *)*(v99 - 1);
      v116 = (_QWORD *)operator new();
      v117 = v100[44];
      v118 = operator new(0xE8uLL);
      v118[1] = 0;
      v118[2] = 0;
      *v118 = &off_1E42E2278;
      v119 = ggl::BufferData::BufferData((uint64_t)(v118 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v118[28] = ggl::Tile::View::reflection(void)::reflection;
      v118[3] = &off_1E42B97B0;
      *(_QWORD *)v330 = v119;
      *(_QWORD *)&v330[8] = v118;
      v316 = 0.0;
      v315 = 0.0;
      v120 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v120->__shared_owners_ = 0;
      v121 = (unint64_t *)&v120->__shared_owners_;
      v120->__shared_weak_owners_ = 0;
      v120->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
      v122 = ggl::BufferData::BufferData((uint64_t)&v120[1], qword_1EE55CC40, 2, 1, 6, 1);
      v120[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
      v120[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
      *(_QWORD *)&v305.f64[0] = v122;
      *(_QWORD *)&v305.f64[1] = v120;
      ggl::PolygonSolidFill::S2MeshPipelineSetup::S2MeshPipelineSetup(v116, *(_QWORD *)(v117 + 40), *(std::__shared_weak_count **)(v117 + 48), (uint64_t *)v330, (uint64_t *)&v315, (uint64_t *)&v305);
      *v115 = v116;
      do
        v123 = __ldaxr(v121);
      while (__stlxr(v123 - 1, v121));
      if (v123)
      {
        v124 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_169;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
        v124 = *(std::__shared_weak_count **)&v316;
        if (v316 == 0.0)
          goto LABEL_169;
      }
      v125 = (unint64_t *)&v124->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (v126)
      {
LABEL_169:
        v127 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
          goto LABEL_170;
        goto LABEL_136;
      }
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      v127 = *(std::__shared_weak_count **)&v330[8];
      if (*(_QWORD *)&v330[8])
      {
LABEL_170:
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
LABEL_136:
      v115[9] = v313;
    }
    while (v282 > (uint64_t)(v40[11] - v40[10]) >> 3);
  }
  v130 = (_QWORD *)*((_QWORD *)a2 + 1);
  v131 = (int8x8_t)v130[1];
  v132 = v286;
  if (!*(_QWORD *)&v131)
    goto LABEL_199;
  v133 = (uint8x8_t)vcnt_s8(v131);
  v133.i16[0] = vaddlv_u8(v133);
  if (v133.u32[0] > 1uLL)
  {
    v134 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v131 <= 0x1AF456233693CD46uLL)
      v134 = 0x1AF456233693CD46uLL % *(_QWORD *)&v131;
  }
  else
  {
    v134 = (*(_QWORD *)&v131 - 1) & 0x1AF456233693CD46;
  }
  v135 = *(_QWORD **)(*v130 + 8 * v134);
  if (!v135)
    goto LABEL_199;
  v136 = (_QWORD *)*v135;
  if (!v136)
    goto LABEL_199;
  if (v133.u32[0] < 2uLL)
  {
    v137 = *(_QWORD *)&v131 - 1;
    while (1)
    {
      v139 = v136[1];
      if (v139 == 0x1AF456233693CD46)
      {
        if (v136[2] == 0x1AF456233693CD46)
          goto LABEL_197;
      }
      else if ((v139 & v137) != v134)
      {
        goto LABEL_199;
      }
      v136 = (_QWORD *)*v136;
      if (!v136)
        goto LABEL_199;
    }
  }
  while (1)
  {
    v138 = v136[1];
    if (v138 == 0x1AF456233693CD46)
      break;
    if (v138 >= *(_QWORD *)&v131)
      v138 %= *(_QWORD *)&v131;
    if (v138 != v134)
      goto LABEL_199;
LABEL_186:
    v136 = (_QWORD *)*v136;
    if (!v136)
      goto LABEL_199;
  }
  if (v136[2] != 0x1AF456233693CD46)
    goto LABEL_186;
LABEL_197:
  v140 = v136[5];
  if (*(_QWORD *)(v140 + 8) == 0x1AF456233693CD46)
  {
    v141 = *(_QWORD *)(v140 + 32);
    goto LABEL_200;
  }
LABEL_199:
  v141 = 0;
LABEL_200:
  md::LayoutContext::frameState(a2);
  v280 = *(unsigned __int8 *)(v142 + 128);
  v143 = (float64x2_t *)(v141 + 808);
  if (*a5)
    v143 = (float64x2_t *)(a5 + 8);
  v144 = v143[5];
  v309 = v143[4];
  v310 = v144;
  v145 = v143[7];
  v311 = v143[6];
  v312 = v145;
  v146 = v143[1];
  v305 = *v143;
  v306 = v146;
  v147 = v143[3];
  v307 = v143[2];
  v308 = v147;
  v148 = (_QWORD *)v286[34];
  v272 = (_QWORD *)v286[35];
  if (v148 != v272)
  {
    while (1)
    {
      v276 = v148;
      v149 = *v148;
      if (!v335
        || (*(_QWORD *)v330 = *v148, ((*(uint64_t (**)(_QWORD *, _BYTE *))(*v335 + 48))(v335, v330) & 1) != 0))
      {
        v150 = *(_QWORD *)(v149 + 384);
        v151 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(*(_QWORD *)v273 + 8), (unsigned __int8 *)(v150 + 16));
        if (v151)
        {
          v152 = v151[16];
          v153 = v151[17];
          if (v153 != v152)
            break;
        }
      }
LABEL_204:
      v148 = v276 + 1;
      if (v276 + 1 == v272)
        goto LABEL_300;
    }
    v283 = (unsigned __int8 *)(v150 + 168);
    while (2)
    {
      v154 = *(unsigned __int8 **)(v149 + 384);
      v155 = (_QWORD *)v132[44];
      if (v154[168] != 255)
      {
        v156 = v155[15];
        v157 = v40[10];
        v158 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v157 + 8 * v156) + 64) + 32);
        *(_OWORD *)v330 = 0uLL;
        v159 = *(_QWORD *)(v158 + 8);
        if (v159)
          v160 = *(_DWORD **)(v158 + 72);
        else
          v160 = 0;
        *(_QWORD *)&v191 = 0;
        *((_QWORD *)&v191 + 1) = v158;
        *(_OWORD *)v330 = v191;
        *(_QWORD *)&v330[16] = 0;
        *(_QWORD *)&v330[24] = v159;
        *(_QWORD *)&v330[40] = v160;
        *(_WORD *)&v330[32] = 1;
        v192 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v154 + 32))(v154);
        v160[8] = *v192;
        v160[9] = v192[1];
        v160[10] = v192[2];
        v193 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v149 + 384) + 32))(*(_QWORD *)(v149 + 384));
        v160[12] = v193[3];
        v160[13] = v193[4];
        v160[14] = v193[5];
        *(_QWORD *)(*(_QWORD *)(v157 + 8 * v156) + 32) = *(_QWORD *)v286[44];
        *(_QWORD *)(*(_QWORD *)(v157 + 8 * v156) + 40) = **(_QWORD **)(v157 + 8 * v156);
        v194 = *(uint64_t **)(v157 + 8 * v156);
        v194[7] = 0;
        *((_DWORD *)v194 + 12) = *(unsigned __int8 *)(v150 + 169) + a4;
        v195 = *v194;
        md::GeometryContext::transformConstantData(&v315, (uint64_t *)v281, v283, v280, 0.0, 0.0);
        v196 = *(_QWORD *)(v195 + 64);
        v197 = v315;
        v198 = v316;
        *(double *)(v196 + 16) = v315;
        *(_QWORD *)(v196 + 24) = 0;
        v199 = *(_QWORD *)(v195 + 160);
        if (v198 != 0.0)
        {
          v200 = (unint64_t *)(*(_QWORD *)&v198 + 8);
          do
            v201 = __ldxr(v200);
          while (__stxr(v201 + 1, v200));
        }
        v202 = *(std::__shared_weak_count **)(v199 + 24);
        *(double *)(v199 + 16) = v197;
        *(double *)(v199 + 24) = v198;
        if (!v202)
          goto LABEL_237;
        v203 = (unint64_t *)&v202->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
          v205 = *(std::__shared_weak_count **)&v316;
          if (v316 != 0.0)
          {
LABEL_238:
            v206 = (unint64_t *)&v205->__shared_owners_;
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
              std::__shared_weak_count::__release_weak(v205);
            }
          }
        }
        else
        {
LABEL_237:
          v205 = *(std::__shared_weak_count **)&v316;
          if (v316 != 0.0)
            goto LABEL_238;
        }
        v222 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v307), v308);
        v223 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v309), v310);
        v224 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v311), v312);
        v225 = *(uint64_t **)(v157 + 8 * v156);
        v227 = *v225;
        v226 = v225 + 1;
        v228 = **(_QWORD ***)(v227 + 64);
        v229 = v228[1];
        v230 = (float32x4_t *)v228[9];
        *v230 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v305), v306);
        v230[1] = v222;
        v230[2] = v223;
        v230[3] = v224;
        if (v228[8] > v229)
          v229 = v228[8];
        v228[7] = 0;
        v228[8] = v229;
        v231 = *(_QWORD **)(a3 + 80);
        v232 = *(_QWORD *)(a3 + 88);
        if ((unint64_t)v231 < v232)
        {
          if (v231)
            *v231 = v226;
          v233 = v231 + 1;
          goto LABEL_280;
        }
        v234 = *(_QWORD *)(a3 + 72);
        v235 = ((uint64_t)v231 - v234) >> 3;
        v236 = v235 + 1;
        if ((unint64_t)(v235 + 1) >> 61)
          abort();
        v237 = v232 - v234;
        if (v237 >> 2 > v236)
          v236 = v237 >> 2;
        if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF8)
          v238 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v238 = v236;
        if (v238)
        {
          v239 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 16))(*(_QWORD *)(a3 + 96), 8 * v238, 8);
          v240 = (_QWORD *)(v239 + 8 * v235);
          v241 = v239 + 8 * v238;
          if (v239)
            *v240 = v226;
        }
        else
        {
          v241 = 0;
          v240 = (_QWORD *)(8 * v235);
        }
        v243 = *(_QWORD *)(a3 + 72);
        v242 = *(_QWORD *)(a3 + 80);
        v244 = v242 - v243;
        if (v242 == v243)
        {
          v246 = v240;
          goto LABEL_278;
        }
        v245 = v244 - 8;
        if ((unint64_t)(v244 - 8) < 0x38)
        {
          v246 = v240;
        }
        else
        {
          v246 = v240;
          if ((unint64_t)(v242 - (_QWORD)v240) >= 0x20)
          {
            v247 = (v245 >> 3) + 1;
            v248 = v240 - 2;
            v249 = (__int128 *)(v242 - 16);
            v250 = v247 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v251 = *v249;
              *(v248 - 1) = *(v249 - 1);
              *v248 = v251;
              v248 -= 2;
              v249 -= 2;
              v250 -= 4;
            }
            while (v250);
            v246 = &v240[-(v247 & 0x3FFFFFFFFFFFFFFCLL)];
            v242 -= 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
            if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_277:
              v242 = *(_QWORD *)(a3 + 72);
LABEL_278:
              v233 = v240 + 1;
              *(_QWORD *)(a3 + 72) = v246;
              *(_QWORD *)(a3 + 80) = v240 + 1;
              v253 = *(_QWORD *)(a3 + 88);
              *(_QWORD *)(a3 + 88) = v241;
              if (v242)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 40))(*(_QWORD *)(a3 + 96), v242, v253 - v242);
LABEL_280:
              *(_QWORD *)(a3 + 80) = v233;
              ++*(_QWORD *)(v286[44] + 120);
              if (*(_QWORD *)&v330[40])
              {
                v254 = *(_OWORD *)&v330[16];
                if (*(_QWORD *)&v330[24] != *(_QWORD *)&v330[16])
                {
                  v255 = *(_QWORD **)&v330[8];
                  v256 = v330[32];
                  v257 = v330[33];
                  if (*(_QWORD *)v330 && *(_BYTE *)(*(_QWORD *)&v330[8] + 17) != 2)
                    (*(void (**)(void))(**(_QWORD **)v330 + 64))();
                  if (v256 && !v257)
                  {
                    v258 = v255[7];
                    v259 = v255[8];
                    if (v259 == v258)
                      v258 = v255[10] - v255[9];
                    if ((unint64_t)v254 < v258)
                      v258 = v254;
                    if (v259 <= *((_QWORD *)&v254 + 1))
                      v259 = *((_QWORD *)&v254 + 1);
                    if (v259 == v258)
                      v259 = v258 + v255[10] - v255[9];
                    v255[7] = v258;
                    v255[8] = v259;
                  }
                }
              }
              v132 = v286;
LABEL_212:
              v40 = v285;
              v152 += 3;
              if (v152 == v153)
                goto LABEL_204;
              continue;
            }
          }
        }
        do
        {
          v252 = *(_QWORD *)(v242 - 8);
          v242 -= 8;
          *--v246 = v252;
        }
        while (v242 != v243);
        goto LABEL_277;
      }
      break;
    }
    v161 = v155[14];
    v162 = v40[7];
    *(_QWORD *)(*(_QWORD *)(v162 + 8 * v161) + 32) = *v155;
    *(_QWORD *)(*(_QWORD *)(v162 + 8 * v161) + 40) = **(_QWORD **)(v162 + 8 * v161);
    v163 = *(uint64_t **)(v162 + 8 * v161);
    v163[7] = 0;
    *((_DWORD *)v163 + 12) = *(unsigned __int8 *)(v150 + 169) + a4;
    if ((v280 - 1) > 2u)
    {
      v208 = 1 << *((_BYTE *)v152 + 1);
      v209 = 1.0 / (double)v208;
      v210 = v209 * (double)*((int *)v152 + 2);
      v211 = v209 * (double)(v208 + ~*((_DWORD *)v152 + 1));
      memset(&v299[8], 0, 32);
      *(double *)v299 = v209;
      *(double *)&v299[40] = v209;
      v300 = 0u;
      v301 = 0u;
      v302 = *(unint64_t *)&v209;
      *(double *)&v303 = v210;
      *((double *)&v303 + 1) = v211;
      v304 = xmmword_19FFB33A0;
      v212 = *v163;
      v213 = *(_QWORD *)(*v163 + 64);
      *(_QWORD *)(v213 + 24) = 0;
      v214 = v155[1];
      *(_QWORD *)(v213 + 16) = v214;
      v215 = *(_QWORD *)(v212 + 160);
      v216 = v155[2];
      if (v216)
      {
        v217 = (unint64_t *)(v216 + 8);
        do
          v218 = __ldxr(v217);
        while (__stxr(v218 + 1, v217));
      }
      v219 = *(std::__shared_weak_count **)(v215 + 24);
      *(_QWORD *)(v215 + 16) = v214;
      *(_QWORD *)(v215 + 24) = v216;
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
    }
    else
    {
      v164 = 1 << *(_BYTE *)(v150 + 169);
      v165 = 1.0 / (double)v164;
      v166 = *(int *)(v150 + 176);
      v167 = v164 + ~*(_DWORD *)(v150 + 172);
      *(double *)v330 = v165 * (double)v166;
      *(double *)&v330[8] = v165 * (double)v167;
      *(double *)&v330[16] = v165 + (double)v166 * v165;
      *(double *)&v330[24] = v165 + (double)v167 * v165;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v288, (double *)v330, 0.0, 0.0);
      v331.f64[1] = 0.0;
      memset(&v330[8], 0, 72);
      v333.f64[1] = 1.0;
      v332 = v294;
      v333.f64[0] = v295;
      *(double *)v330 = v296 - v294.f64[0];
      *(double *)&v330[40] = v297 - v294.f64[1];
      v331.f64[0] = v298 - v295;
      v168 = v291;
      v169 = v292;
      v170 = v168 + v168;
      v171 = (v168 + v168) * v168;
      v172 = (v169 + v169) * v169;
      v173 = v290;
      v174 = v173 + v173;
      v175 = (v173 + v173) * v291;
      v176 = (v169 + v169) * v293;
      v177 = v292 * (v173 + v173);
      v178 = 1.0 - (v173 + v173) * v173;
      v315 = 1.0 - (v171 + v172);
      v316 = v176 + v175;
      v319 = v175 - v176;
      v320 = v178 - v172;
      v323 = v293 * v170 + v177;
      v324 = v170 * v292 - v293 * v174;
      v317 = v177 - v293 * v170;
      v321 = v293 * v174 + v170 * v292;
      v325 = v178 - v171;
      v318 = 0;
      v322 = 0;
      v326 = 0;
      v327 = v288;
      v328 = v289;
      v329 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v287, &v315, (double *)v330);
      *(_OWORD *)v299 = v287[0];
      *(_OWORD *)&v299[16] = v287[1];
      *(_OWORD *)&v299[32] = v287[2];
      v300 = v287[3];
      v301 = v287[4];
      v302 = v287[5];
      v303 = v287[6];
      v304 = v287[7];
      v179 = **(_QWORD **)(v162 + 8 * v161);
      md::GeometryContext::transformConstantData((double *)v330, (uint64_t *)v281, v283, v280, 0.0, 0.0);
      v180 = *(_QWORD *)(v179 + 64);
      v181 = *(_OWORD *)v330;
      *(_QWORD *)(v180 + 16) = *(_QWORD *)v330;
      *(_QWORD *)(v180 + 24) = 0;
      v182 = *(_QWORD *)(v179 + 160);
      if (*((_QWORD *)&v181 + 1))
      {
        v183 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
      }
      v185 = *(std::__shared_weak_count **)(v182 + 24);
      *(_OWORD *)(v182 + 16) = v181;
      if (!v185)
        goto LABEL_224;
      v186 = (unint64_t *)&v185->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
        v188 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
        {
LABEL_225:
          v189 = (unint64_t *)&v188->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
      }
      else
      {
LABEL_224:
        v188 = *(std::__shared_weak_count **)&v330[8];
        if (*(_QWORD *)&v330[8])
          goto LABEL_225;
      }
      v132 = v286;
    }
    gm::operator*<double,4,4,4>((double *)v330, v305.f64, (double *)v299);
    v260 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v330[32]), *(float64x2_t *)&v330[48]);
    v261 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v330[64]), v331);
    v262 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v332), v333);
    v263 = *(uint64_t **)(v162 + 8 * v161);
    v265 = *v263;
    v264 = (ggl::RenderItem *)(v263 + 1);
    v266 = **(_QWORD ***)(v265 + 64);
    v267 = v266[1];
    v268 = (float32x4_t *)v266[9];
    *v268 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v330), *(float64x2_t *)&v330[16]);
    v268[1] = v260;
    v268[2] = v261;
    v268[3] = v262;
    if (v266[8] > v267)
      v267 = v266[8];
    v266[7] = 0;
    v266[8] = v267;
    ggl::CommandBuffer::pushRenderItem(a3, v264);
    ++*(_QWORD *)(v132[44] + 112);
    goto LABEL_212;
  }
LABEL_300:
  v269 = v314;
  if (v314)
  {
    v270 = (unint64_t *)&v314->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  result = v335;
  if (v335 == v334)
  {
    v12 = 4;
    result = v334;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  else if (v335)
  {
    v12 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  return result;
}

void sub_19F23A09C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A0]);
  v3 = *(_QWORD **)(v1 - 120);
  if (v3 == (_QWORD *)(v1 - 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t md::CoastlineRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned __int8 *v8;

  v2 = *(_BYTE *)(result + 49) - *(_BYTE *)(result + 48) + 1;
  v3 = *(unsigned __int8 **)(a2 + 24);
  v4 = *v3;
  v5 = v4 + v2;
  v6 = v3[1];
  v7 = v5 > v6;
  if (v5 <= v6)
    v8 = 0;
  else
    v8 = v3 + 4;
  *(_QWORD *)(*(_QWORD *)(result + 368) + 280) = v8;
  if (v7)
  {
    v3[1] = v3[2];
    v4 = 1;
  }
  *v3 = v4 + v2;
  *(_DWORD *)(*(_QWORD *)(result + 368) + 288) = v4 - *(unsigned __int8 *)(result + 48);
  return result;
}

void ggl::LinearDepthShader::typedReflection(ggl::LinearDepthShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::LinearDepthShader::typedReflection(void)::ref = (uint64_t)"LinearDepthShader";
      ggl::linearDepthShaderVertexFunctionDescriptor(v2);
      qword_1ECE344B0 = (uint64_t)&ggl::linearDepthShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<24ul>("LinearDepthShaderVertex");
      dword_1ECE344B8 = (int)v3;
      ggl::linearDepthShaderFragmentFunctionDescriptor(v3);
      qword_1ECE344C0 = (uint64_t)&ggl::linearDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE344C8 = ggl::crc32::compute<26ul>("LinearDepthShaderFragment");
      qword_1ECE344D0 = (uint64_t)ggl::linearDepthShaderShaderConstants(void)::ref;
      unk_1ECE344D8 = 6;
      qword_1ECE344E0 = (uint64_t)&ggl::linearDepthShaderShaderTextures(void)::ref;
      unk_1ECE344E8 = 0;
      qword_1ECE344F0 = (uint64_t)&ggl::linearDepthShaderShaderSamplers(void)::ref;
      unk_1ECE344F8 = 0;
    }
  }
}

void ggl::linearDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::linearDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("LinearDepthShaderFragment");
      *(_DWORD *)algn_1ECE34E54 = 1;
      qword_1ECE34E58 = (uint64_t)"LinearDepthShader";
      unk_1ECE34E60 = 0;
      qword_1ECE34E68 = 0;
      unk_1ECE34E70 = &ggl::linearDepthShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE34E78 = 2;
      unk_1ECE34E80 = &ggl::linearDepthShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE34E88 = 0;
      unk_1ECE34E90 = &ggl::linearDepthShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE34E98 = 0;
      unk_1ECE34EA0 = &ggl::linearDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE34EB0 = 0;
      unk_1ECE34EB8 = 0;
      qword_1ECE34EA8 = 0;
    }
  }
}

void ggl::linearDepthShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::linearDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("LinearDepthShaderVertex");
      *(_DWORD *)algn_1ECE34DDC = 0;
      qword_1ECE34DE0 = (uint64_t)"LinearDepthShader";
      unk_1ECE34DE8 = ggl::linearDepthShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE34DF0 = 3;
      unk_1ECE34DF8 = &ggl::linearDepthShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE34E00 = 6;
      unk_1ECE34E08 = &ggl::linearDepthShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE34E10 = 2;
      unk_1ECE34E18 = &ggl::linearDepthShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE34E20 = 0;
      unk_1ECE34E28 = &ggl::linearDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE34E38 = 0;
      unk_1ECE34E40 = 0;
      qword_1ECE34E30 = 0;
    }
  }
}

_QWORD *std::__function::__func<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::DaVinciGroundRenderResources::DaVinciGroundRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::DaVinci::GroundPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)operator new();
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v22, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1u, 0, 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0);
  v3 = v22;
  v4 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v3, (uint64_t)v4);
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v2, (uint64_t)v22, 0);
  }
  *v2 = &off_1E42BC4E0;
  v9 = v23;
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v2[8];
  *(_QWORD *)(v12 + 136) = 0;
  v13 = *(_QWORD *)(v1 + 1184);
  *(_QWORD *)(v12 + 128) = v13;
  v14 = v2[20];
  v15 = *(_QWORD *)(v1 + 1192);
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(std::__shared_weak_count **)(v14 + 136);
  *(_QWORD *)(v14 + 128) = v13;
  *(_QWORD *)(v14 + 136) = v15;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v2;
}

void sub_19F23A594(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  BYTE4(v5) = a3[10];
  LODWORD(v5) = *(_DWORD *)(a3 + 29);
  v4 = *(_DWORD *)(a3 + 25);
  v3 = *(_QWORD *)(a3 + 11);
  md::DaVinciPipelineStateManager<ggl::DaVinci::GroundPipelineState,std::shared_ptr<ggl::DaVinciGroundShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(a1, a2, *a3, a3[1], a3[2], a3[3], a3[4], a3[5], *(_DWORD *)(a3 + 6), HIWORD(*(_DWORD *)(a3 + 6)), v3, BYTE2(v3), BYTE3(v3), BYTE4(v3), BYTE5(v3), SBYTE6(v3), HIBYTE(v3), *(_DWORD *)(a3 + 19), BYTE1(*(_DWORD *)(a3 + 19)),
    BYTE2(*(_DWORD *)(a3 + 19)),
    HIBYTE(*(_DWORD *)(a3 + 19)),
    a3[24],
    v4,
    BYTE1(v4),
    BYTE2(v4),
    HIBYTE(v4),
    v5,
    v5 >> 8,
    *(unsigned __int16 *)((char *)&v5 + 3));
}

void ggl::DaVinciGroundShader::typedReflection(ggl::DaVinciGroundShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DaVinciGroundShader::typedReflection(void)::ref = (uint64_t)"DaVinciGroundShader";
      ggl::daVinciGroundShaderVertexFunctionDescriptor(v2);
      qword_1ECE441C0 = (uint64_t)&ggl::daVinciGroundShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("DaVinciGroundShaderVertex");
      dword_1ECE441C8 = (int)v3;
      ggl::daVinciGroundShaderFragmentFunctionDescriptor(v3);
      qword_1ECE441D0 = (uint64_t)&ggl::daVinciGroundShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE441D8 = ggl::crc32::compute<28ul>("DaVinciGroundShaderFragment");
      qword_1ECE441E0 = (uint64_t)ggl::daVinciGroundShaderShaderConstants(void)::ref;
      unk_1ECE441E8 = 30;
      qword_1ECE441F0 = (uint64_t)ggl::daVinciGroundShaderShaderTextures(void)::ref;
      unk_1ECE441F8 = 13;
      qword_1ECE44200 = (uint64_t)ggl::daVinciGroundShaderShaderSamplers(void)::ref;
      unk_1ECE44208 = 13;
    }
  }
}

void ggl::daVinciGroundShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciGroundShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DaVinciGroundShaderFragment");
      *(_DWORD *)algn_1ECE4497C = 1;
      qword_1ECE44980 = (uint64_t)"DaVinciGroundShader";
      unk_1ECE44988 = 0;
      qword_1ECE44990 = 0;
      unk_1ECE44998 = &ggl::daVinciGroundShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE449A0 = 21;
      unk_1ECE449A8 = &ggl::daVinciGroundShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE449B0 = 0;
      unk_1ECE449B8 = &ggl::daVinciGroundShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE449C0 = 12;
      unk_1ECE449C8 = &ggl::daVinciGroundShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE449D8 = 0;
      unk_1ECE449E0 = 0;
      qword_1ECE449D0 = 12;
    }
  }
}

void ggl::daVinciGroundShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::daVinciGroundShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("DaVinciGroundShaderVertex");
      *(_DWORD *)algn_1ECE446C4 = 0;
      qword_1ECE446C8 = (uint64_t)"DaVinciGroundShader";
      unk_1ECE446D0 = ggl::daVinciGroundShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE446D8 = 5;
      unk_1ECE446E0 = &ggl::daVinciGroundShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE446E8 = 12;
      unk_1ECE446F0 = &ggl::daVinciGroundShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE446F8 = 4;
      unk_1ECE44700 = &ggl::daVinciGroundShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44708 = 1;
      unk_1ECE44710 = &ggl::daVinciGroundShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44720 = 0;
      unk_1ECE44728 = 0;
      qword_1ECE44718 = 1;
    }
  }
}

void sub_19F23A8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id VKAnimationCurveSpring(float a1, float a2, float a3, float a4)
{
  float v4;
  float v5;
  float v6;
  _QWORD *v7;
  _QWORD v9[4];
  int v10;
  float v11;
  float v12;
  _QWORD v13[4];
  float v14;
  float v15;
  float v16;
  int v17;
  float v18;

  v4 = sqrtf(a2 / a1);
  v5 = sqrtf(a2 * a1);
  v6 = a3 / (float)(v5 + v5);
  if (v6 >= 1.0)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __VKAnimationCurveSpring_block_invoke_2;
    v9[3] = &__block_descriptor_44_e8_f12__0f8l;
    v10 = 1065353216;
    v11 = v4 - a4;
    v12 = v4;
    v7 = v9;
  }
  else
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __VKAnimationCurveSpring_block_invoke;
    v13[3] = &__block_descriptor_52_e8_f12__0f8l;
    v14 = sqrtf(-(float)((float)(v6 * v6) + -1.0)) * v4;
    v15 = v6;
    v16 = v4;
    v17 = 1065353216;
    v18 = (float)-(float)(a4 - (float)(v6 * v4)) / v14;
    v7 = v13;
  }
  return (id)objc_msgSend(v7, "copy");
}

void sub_19F23AA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void VKTrafficIncidentSetTitleBlock(void *a1)
{
  unsigned __int8 v1;
  std::__shared_mutex_base *v2;
  uint64_t v3;
  void *v4;
  std::__shared_mutex_base *v5;
  id v6;

  v6 = a1;
  {
    v5 = (std::__shared_mutex_base *)operator new();
    std::__shared_mutex_base::__shared_mutex_base(v5);
    blockMutex(void)::lock = (uint64_t)v5;
  }
  v2 = (std::__shared_mutex_base *)blockMutex(void)::lock;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)blockMutex(void)::lock);
  v3 = objc_msgSend(v6, "copy");
  v4 = (void *)_titleBlock;
  _titleBlock = v3;

  std::__shared_mutex_base::unlock(v2);
}

void sub_19F23AB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1A1AF4E00](v10, 0x1000C40B98A05D4);

  _Unwind_Resume(a1);
}

void VKTrafficIncidentSetSubtitleBlock(void *a1)
{
  unsigned __int8 v1;
  std::__shared_mutex_base *v2;
  uint64_t v3;
  void *v4;
  std::__shared_mutex_base *v5;
  id v6;

  v6 = a1;
  {
    v5 = (std::__shared_mutex_base *)operator new();
    std::__shared_mutex_base::__shared_mutex_base(v5);
    blockMutex(void)::lock = (uint64_t)v5;
  }
  v2 = (std::__shared_mutex_base *)blockMutex(void)::lock;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)blockMutex(void)::lock);
  v3 = objc_msgSend(v6, "copy");
  v4 = (void *)_subtitleBlock;
  _subtitleBlock = v3;

  std::__shared_mutex_base::unlock(v2);
}

void sub_19F23AC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1A1AF4E00](v10, 0x1000C40B98A05D4);

  _Unwind_Resume(a1);
}

void std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::destroy_deallocate(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_1E42B55F0;

  operator delete((void *)a1);
}

_QWORD *std::__function::__func<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1},std::allocator<geo::TaskQueue::apply_b(unsigned long,void({block_pointer})(unsigned long))::{lambda(unsigned long)#1}>,void ()(unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x20uLL);
  *v2 = &off_1E42D5ED0;
  geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(v2 + 1, v1);
  return v2;
}

void sub_19F23ACEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *geo::_retain_ptr<void({block_pointer} {__strong})(unsigned long),geo::_copy_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_release_block_arc<void({block_pointer} {__strong})(unsigned long)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  *a1 = &off_1E42B55F0;
  a1[1] = 0;
  v3 = (void *)MEMORY[0x1A1AF5730](*(_QWORD *)(a2 + 8));
  if (v3)
  {
    v4 = v3;
    v5 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v5 = 0;
  }
  v6 = MEMORY[0x1A1AF5730](v5);
  v7 = (void *)a1[1];
  a1[1] = v6;

  return a1;
}

void sub_19F23AD70(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F23ADC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *md::PolylineOverlaySharedPipelineStates<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlaySharedPipelineStates(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;

  v2 = a1[7];
  a1[7] = 0;
  if (v2)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v2 + 104));
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C40AD78EA61);
  }
  v6 = a1[6];
  a1[6] = 0;
  if (v6)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v6 + 104));
    v7 = *(std::__shared_weak_count **)(v6 + 8);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    MEMORY[0x1A1AF4E00](v6, 0x1020C40AD78EA61);
  }
  v10 = a1[5];
  a1[5] = 0;
  if (v10)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v10 + 104));
    v11 = *(std::__shared_weak_count **)(v10 + 8);
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    MEMORY[0x1A1AF4E00](v10, 0x1020C40AD78EA61);
  }
  v14 = a1[4];
  a1[4] = 0;
  if (v14)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v14 + 104));
    v15 = *(std::__shared_weak_count **)(v14 + 8);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    MEMORY[0x1A1AF4E00](v14, 0x1020C40AD78EA61);
  }
  v18 = a1[3];
  a1[3] = 0;
  if (v18)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v18 + 104));
    v19 = *(std::__shared_weak_count **)(v18 + 8);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    MEMORY[0x1A1AF4E00](v18, 0x1020C40AD78EA61);
  }
  v22 = a1[2];
  a1[2] = 0;
  if (v22)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v22 + 104));
    v23 = *(std::__shared_weak_count **)(v22 + 8);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    MEMORY[0x1A1AF4E00](v22, 0x1020C40AD78EA61);
  }
  v26 = a1[1];
  a1[1] = 0;
  if (v26)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v26 + 104));
    v27 = *(std::__shared_weak_count **)(v26 + 8);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    MEMORY[0x1A1AF4E00](v26, 0x1020C40AD78EA61);
  }
  v30 = *a1;
  *a1 = 0;
  if (v30)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v30 + 104));
    v31 = *(std::__shared_weak_count **)(v30 + 8);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    MEMORY[0x1A1AF4E00](v30, 0x1020C40AD78EA61);
  }
  return a1;
}

void md::DaVinciMapEngineMode::~DaVinciMapEngineMode(md::DaVinciMapEngineMode *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0578;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0578;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapEngineMode::~MapEngineMode(this);
}

void md::InitialMapEngineMode::~InitialMapEngineMode(md::InitialMapEngineMode *this)
{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
}

uint64_t *geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert(uint64_t *result, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t **v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t *v29;

  v3 = result;
  if (result[2])
  {
    v4 = (uint64_t **)(result + 1);
    if ((uint64_t *)*result == result + 1)
    {
      v10 = (uint64_t **)*result;
    }
    else
    {
      v5 = 0;
      v6 = (uint64_t *)*result;
      do
      {
        v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            v8 = (uint64_t **)v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t **)v6[2];
            v9 = *v8 == v6;
            v6 = (uint64_t *)v8;
          }
          while (!v9);
        }
        ++v5;
        v6 = (uint64_t *)v8;
      }
      while (v8 != v4);
      v10 = (uint64_t **)*result;
      do
      {
        v11 = v5 >> 1;
        v12 = (uint64_t *)v10;
        if (v5 != 1)
        {
          v14 = v5 >> 1;
          v15 = v10;
          do
          {
            v17 = v15[1];
            if (v17)
            {
              do
              {
                v12 = v17;
                v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v12 = v15[2];
                v9 = *v12 == (_QWORD)v15;
                v15 = (uint64_t **)v12;
              }
              while (!v9);
            }
            v15 = (uint64_t **)v12;
          }
          while (v14-- > 1);
        }
        if (*((unsigned __int8 *)v12 + 33) < a2[1])
        {
          v13 = (uint64_t *)v12[1];
          if (v13)
          {
            do
            {
              v10 = (uint64_t **)v13;
              v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v10 = (uint64_t **)v12[2];
              v9 = *v10 == v12;
              v12 = (uint64_t *)v10;
            }
            while (!v9);
          }
          v11 = v5 + ~v11;
        }
        v5 = v11;
      }
      while (v11);
    }
    if (v10 != v4 && *((unsigned __int8 *)v10 + 32) < a2[1])
      return result;
    if (v10 != (uint64_t **)*result)
    {
      v22 = *v10;
      if (*v10)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = v10[2];
          v9 = *v23 == (_QWORD)v10;
          v10 = (uint64_t **)v23;
        }
        while (v9);
      }
      if (*a2 < *((unsigned __int8 *)v23 + 33))
        return result;
    }
    v24 = *v4;
    v20 = (uint64_t **)(result + 1);
    if (*v4)
    {
      v25 = a2[1];
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v24;
          v26 = *((unsigned __int8 *)v24 + 33);
          if (v25 >= v26)
            break;
          v24 = *v20;
          v4 = v20;
          if (!*v20)
            goto LABEL_54;
        }
        if (v26 >= v25)
          return result;
        v24 = v20[1];
        if (!v24)
          goto LABEL_52;
      }
    }
LABEL_54:
    v27 = operator new(0x30uLL);
    v27[16] = *(_WORD *)a2;
    *((_QWORD *)v27 + 5) = *((_QWORD *)a2 + 1);
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = v20;
    *v4 = (uint64_t *)v27;
    v28 = *(_QWORD *)*v3;
    if (v28)
    {
      *v3 = v28;
      v29 = *v4;
    }
    else
    {
      v29 = (uint64_t *)v27;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[1], v29);
    ++v3[2];
    return result;
  }
  v4 = (uint64_t **)(result + 1);
  v18 = result[1];
  if (!v18)
  {
    v20 = (uint64_t **)(result + 1);
    goto LABEL_54;
  }
  v19 = a2[1];
  while (1)
  {
    while (1)
    {
      v20 = (uint64_t **)v18;
      v21 = *(unsigned __int8 *)(v18 + 33);
      if (v19 >= v21)
        break;
      v18 = (uint64_t)*v20;
      v4 = v20;
      if (!*v20)
        goto LABEL_54;
    }
    if (v21 >= v19)
      return result;
    v18 = (uint64_t)v20[1];
    if (!v18)
    {
LABEL_52:
      v4 = v20 + 1;
      goto LABEL_54;
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  *((_BYTE *)v10 + 17) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F23B8B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(uint64_t a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  *((_BYTE *)v10 + 18) = 1;
  *((_WORD *)v10 + 10) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F23BB9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicMapEngineMode::CartographicMapEngineMode(uint64_t a1, char a2)
{
  uint64_t v3;
  void *v4;
  int v5;
  _QWORD v7[2];
  __int128 v8;
  uint64_t v9;
  _QWORD v10[2];
  __int128 v11;
  uint64_t v12;
  char v13;
  unint64_t v14[3];

  v3 = md::MapEngineMode::MapEngineMode(a1, a2);
  *(_QWORD *)v3 = &off_1E42A1BF8;
  *(_QWORD *)(v3 + 536) = 0;
  *(_BYTE *)(v3 + 544) = 0;
  *(_BYTE *)(v3 + 548) = 0;
  *(_BYTE *)(v3 + 225) = 0;
  objc_msgSend(MEMORY[0x1E0D27368], "sharedPlatform");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isInternalInstall");

  if (v5)
  {
    v14[0] = 0x3A3A2962B4F0D965;
    v14[1] = (unint64_t)"md::DisplayLinkVerificationLogic]";
    v14[2] = 32;
    *(_QWORD *)&v11 = 0x42BE82C40F9A8F80;
    *((_QWORD *)&v11 + 1) = "md::DisplayLinkVerificationContext]";
    v12 = 34;
    v13 = 1;
    v10[0] = &v11;
    v10[1] = 0;
    v7[0] = &v8;
    v7[1] = 1;
    v8 = xmmword_1E42F7A80;
    v9 = 17;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, v14, &v11, 0, (uint64_t)v10, (uint64_t)v7);
  }
  return a1;
}

void sub_19F23BCC0(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;
  void *v2;
  void *v3;

  v3 = v2;

  if (*((_BYTE *)v1 + 548))
    *((_BYTE *)v1 + 548) = 0;
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void md::MapEngineMode::~MapEngineMode(md::MapEngineMode *this)
{
  md::MapEngineMode *v2;
  uint64_t v3;
  md::MapEngineMode *v4;
  uint64_t v5;
  md::MapEngineMode *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;

  *(_QWORD *)this = &off_1E428DC60;
  if (*((_BYTE *)this + 528))
  {
    v2 = (md::MapEngineMode *)*((_QWORD *)this + 65);
    if (v2 == (md::MapEngineMode *)((char *)this + 496))
    {
      v3 = 4;
      v2 = (md::MapEngineMode *)((char *)this + 496);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
LABEL_7:
  if (!*((_BYTE *)this + 488))
    goto LABEL_13;
  v4 = (md::MapEngineMode *)*((_QWORD *)this + 60);
  if (v4 == (md::MapEngineMode *)((char *)this + 456))
  {
    v5 = 4;
    v4 = (md::MapEngineMode *)((char *)this + 456);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_13:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 55));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 52));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 49));
  v6 = (md::MapEngineMode *)*((_QWORD *)this + 46);
  if (v6 == (md::MapEngineMode *)((char *)this + 344))
  {
    v7 = 4;
    v6 = (md::MapEngineMode *)((char *)this + 344);
  }
  else
  {
    if (!v6)
      goto LABEL_18;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_18:
  std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(*((_QWORD **)this + 41));
  std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(*((_QWORD **)this + 38));
  v8 = (_QWORD *)*((_QWORD *)this + 34);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v10)
    operator delete(v10);
  std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::destroy(*((_QWORD **)this + 30));
  v11 = (_QWORD *)*((_QWORD *)this + 25);
  if (v11)
  {
    do
    {
      v12 = (_QWORD *)*v11;
      operator delete(v11);
      v11 = v12;
    }
    while (v12);
  }
  v13 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v13)
    operator delete(v13);
  v14 = (_QWORD *)*((_QWORD *)this + 20);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v16)
    operator delete(v16);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 16));
  v17 = (_QWORD *)*((_QWORD *)this + 12);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v19)
    operator delete(v19);
  if (*((_BYTE *)this + 64))
    *((_BYTE *)this + 64) = 0;
  v20 = (_QWORD *)*((_QWORD *)this + 3);
  if (v20)
  {
    do
    {
      v21 = (_QWORD *)*v20;
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
  v22 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v22)
    operator delete(v22);
}

{
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::destroy(*a1);
    std::__tree<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,std::__map_value_compare<gdc::LogicExecutionNode,std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>,gdc::LogicExecutionNodeCompare,true>,std::allocator<std::__value_type<gdc::LogicExecutionNode,geo::linear_set<gdc::LogicExecutionNode,gdc::LogicExecutionNodeCompare,std::allocator<gdc::LogicExecutionNode>,std::vector<gdc::LogicExecutionNode>>>>>::destroy(a1[1]);
    v2 = (void *)a1[8];
    if (v2)
    {
      a1[9] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t md::MapEngineMode::MapEngineMode(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t (**v4)();
  uint64_t (***v5)();
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  uint64_t (***v13)();
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E428DC60;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = a2;
  *(_BYTE *)(a1 + 49) = 1;
  *(_DWORD *)(a1 + 52) = 21;
  *(_QWORD *)(a1 + 56) = 0x3FE0C152382D7365;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_WORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = 1065353216;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  v3 = (_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = a1 + 416;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = a1 + 440;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  v4 = &off_1E42CB0A8;
  v10[0] = &off_1E42CB0A8;
  v11 = v10;
  v12[0] = &off_1E42CB0A8;
  v13 = (uint64_t (***)())v12;
  if ((_QWORD *)(a1 + 344) == v12)
    goto LABEL_6;
  std::__function::__func<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0,std::allocator<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0>,std::string ()(gdc::TypeInfo)>::__clone((uint64_t)v12, v3);
  v13 = *(uint64_t (****)())(a1 + 368);
  v5 = v13;
  *(_QWORD *)(a1 + 368) = v3;
  if (v5 == v12)
  {
    v4 = &off_1E42CB0A8;
LABEL_6:
    v6 = 4;
    v5 = (uint64_t (***)())v12;
    goto LABEL_7;
  }
  if (!v5)
  {
    v7 = v10;
    v8 = 4;
    goto LABEL_12;
  }
  v4 = *v5;
  v6 = 5;
LABEL_7:
  ((void (*)(uint64_t (***)()))v4[v6])(v5);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_12;
  }
  if (v11)
  {
    v8 = 5;
LABEL_12:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void std::__function::__func<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0,std::allocator<md::MapEngineMode::MapEngineMode(md::MapEngineModeType)::$_0>,std::string ()(gdc::TypeInfo)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CB0A8;
}

void md::LabelText::~LabelText(md::LabelText *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  *(_QWORD *)this = &off_1E42AFC50;
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v3 = *((_QWORD *)this + 13);
    v4 = *((_QWORD *)this + 12);
    if (v3 == v2)
    {
LABEL_17:
      *((_QWORD *)this + 13) = v2;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), v4, *((_QWORD *)this + 14) - v4);
      goto LABEL_18;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 64);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
        std::__shared_weak_count::__release_weak(v5);
        v8 = *(std::__shared_weak_count **)(v3 - 80);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v4);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = *(std::__shared_weak_count **)(v3 - 80);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 88;
      if (v3 == v2)
      {
        v4 = *((_QWORD *)this + 12);
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v11)
    goto LABEL_22;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_22:
    v14 = *((_QWORD *)this + 4);
    if (!v14)
      goto LABEL_39;
LABEL_23:
    v15 = *((_QWORD *)this + 5);
    v16 = v14;
    if (v15 == v14)
    {
LABEL_38:
      *((_QWORD *)this + 5) = v14;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v16, *((_QWORD *)this + 6) - v16);
      goto LABEL_39;
    }
    while (1)
    {
      v17 = *(std::__shared_weak_count **)(v15 - 64);
      if (!v17)
        goto LABEL_30;
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v17->__on_zero_shared)(v17, v16);
        std::__shared_weak_count::__release_weak(v17);
        v20 = *(std::__shared_weak_count **)(v15 - 80);
        if (v20)
        {
LABEL_31:
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v20->__on_zero_shared)(v20, v16);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      else
      {
LABEL_30:
        v20 = *(std::__shared_weak_count **)(v15 - 80);
        if (v20)
          goto LABEL_31;
      }
      v15 -= 88;
      if (v15 == v14)
      {
        v16 = *((_QWORD *)this + 4);
        goto LABEL_38;
      }
    }
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v14 = *((_QWORD *)this + 4);
  if (v14)
    goto LABEL_23;
LABEL_39:
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

{
  md::LabelText::~LabelText(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::RenderTransaction>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = a1 + 11;
  v3 = (_QWORD *)a1[14];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[10];
  if (v5 == a1 + 7)
  {
    v6 = 4;
    v5 = a1 + 7;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

ggl::MetalDeviceContextPass *ggl::MetalDeviceContext::beginPass(ggl::MetalDeviceContextPass *result, uint64_t a2, uint64_t a3)
{
  ggl::MetalDeviceContextPass *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  __int128 v9;
  id v10;
  uint64_t v11;
  uint64_t *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  if (*((_QWORD *)result + 6))
    return result;
  v5 = result;
  v6 = operator new();
  v7 = *((_QWORD *)v5 + 2);
  v8 = *((id *)v5 + 3);
  *(_QWORD *)v6 = v7;
  *(_QWORD *)(v6 + 8) = a2;
  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 32) = v9;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a3 + 32);
  *(_BYTE *)(v6 + 64) = 0;
  if (*(_BYTE *)(a3 + 48))
  {
    *(_DWORD *)(v6 + 68) = *(_DWORD *)(a3 + 52);
    *(_BYTE *)(v6 + 64) = 1;
  }
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(a3 + 56);
  *(_DWORD *)(v6 + 80) = *(_DWORD *)(a3 + 64);
  *(_BYTE *)(v6 + 84) = 0;
  v10 = v8;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 88) = v10;
  if (a2)
  {
    v11 = *(_QWORD *)(a2 + 72);
    if (v11)
    {
      v12 = (uint64_t *)(a2 + 184);
      v13 = (int *)(v6 + 20);
      do
      {
        v14 = *v12;
        if (*v12)
        {
          v15 = *v12;
          if (*(_DWORD *)(v14 + 56))
            goto LABEL_12;
        }
        else
        {
          v15 = *(v12 - 12);
          if (*(_DWORD *)(v15 + 56))
          {
LABEL_12:
            v16 = 0;
            goto LABEL_15;
          }
        }
        v16 = *(_DWORD *)(v15 + 76);
LABEL_15:
        v18 = *v13;
        v13 += 2;
        v17 = v18;
        if (v18 == 3)
        {
          if (v14)
            goto LABEL_19;
        }
        else if (!v17 && v14 && !v16)
        {
LABEL_19:
          *(_BYTE *)(v6 + 84) = 1;
          break;
        }
        v12 += 3;
        --v11;
      }
      while (v11);
    }
  }

  result = (ggl::MetalDeviceContextPass *)*((_QWORD *)v5 + 6);
  *((_QWORD *)v5 + 6) = v6;
  if (result)
  {
    ggl::MetalDeviceContextPass::~MetalDeviceContextPass(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void `anonymous namespace'::extractPasses(__int128 *a1, char **a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *i;
  unint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v4 = *((_QWORD *)a1 + 1);
  v5 = *(__int128 **)(v4 + 72);
  for (i = *(__int128 **)(v4 + 80); v5 != i; v5 = (__int128 *)((char *)v5 + 24))
  {
    v19 = *v5;
    v20 = *((_QWORD *)v5 + 2);
  }
  v8 = a2[1];
  v7 = (unint64_t)a2[2];
  if ((unint64_t)v8 >= v7)
  {
    v11 = *a2;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a2) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = (char *)operator new(24 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[24 * v12];
    *(_OWORD *)v17 = *a1;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a1 + 2);
    v10 = v17 + 24;
    if (v8 != v11)
    {
      do
      {
        v18 = *(_OWORD *)(v8 - 24);
        *(v17 - 8) = *(v8 - 8);
        *(_OWORD *)(v17 - 24) = v18;
        v17 -= 24;
        v8 -= 24;
      }
      while (v8 != v11);
      v8 = *a2;
    }
    *a2 = v17;
    a2[1] = v10;
    a2[2] = &v16[24 * v15];
    if (v8)
      operator delete(v8);
  }
  else
  {
    v9 = *a1;
    *((_QWORD *)v8 + 2) = *((_QWORD *)a1 + 2);
    *(_OWORD *)v8 = v9;
    v10 = v8 + 24;
  }
  a2[1] = v10;
  *(_QWORD *)(*((_QWORD *)a1 + 1) + 80) = *(_QWORD *)(*((_QWORD *)a1 + 1) + 72);
}

void ggl::MetalBindingManager::resetBindingCache(ggl::MetalBindingManager *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)*((_QWORD *)this + 2);
  v4 = v3 - v2;
  if (v3 != v2)
  {
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    goto LABEL_33;
  }
  v43 = 0;
  if ((unint64_t)v4 > 0xFF)
  {
    if (v4 == 256)
      goto LABEL_33;
    v20 = v3 + 256;
    goto LABEL_32;
  }
  v5 = v4 >> 3;
  v6 = 32 - (v4 >> 3);
  v7 = *((_QWORD *)this + 3);
  if (v6 <= (v7 - (uint64_t)v3) >> 3)
  {
    v20 = &v3[8 * v6];
    v21 = (31 - v5) & 0x1FFFFFFFFFFFFFFFLL;
    if (v21 >= 0xF && (v3 >= (char *)&v44 || v20 <= (char *)&v43))
    {
      v22 = v21 + 1;
      v23 = v3;
      v24 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        *(_OWORD *)v23 = 0uLL;
        *((_OWORD *)v23 + 1) = 0uLL;
        v23 += 32;
        v24 -= 4;
      }
      while (v24);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_32;
      v3 += 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    }
    do
    {
      *(_QWORD *)v3 = 0;
      v3 += 8;
    }
    while (v3 != v20);
LABEL_32:
    *((_QWORD *)this + 2) = v20;
    goto LABEL_33;
  }
  v8 = v7 - (_QWORD)v2;
  v9 = v8 >> 2;
  if ((unint64_t)(v8 >> 2) <= 0x20)
    v9 = 32;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v5];
  v13 = v11 + 256;
  v14 = (31 - v5) & 0x1FFFFFFFFFFFFFFFLL;
  v15 = v12;
  if (v14 < 0x13)
    goto LABEL_18;
  if (v12 < (char *)&v44)
  {
    v15 = &v11[8 * v5];
    if (&v11[8 * v6 + v4] > (char *)&v43)
      goto LABEL_18;
  }
  v16 = (v14 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v17 = &v11[8 * v5];
  v18 = v16;
  do
  {
    *(_OWORD *)v17 = 0uLL;
    *((_OWORD *)v17 + 1) = 0uLL;
    v17 += 32;
    v18 -= 4;
  }
  while (v18);
  if (v14 + 1 != v16)
  {
    v15 = &v12[8 * v16];
LABEL_18:
    v19 = v43;
    do
    {
      *(_QWORD *)v15 = v19;
      v15 += 8;
    }
    while (v15 != v13);
  }
  *((_QWORD *)this + 1) = v12;
  *((_QWORD *)this + 2) = v13;
  *((_QWORD *)this + 3) = &v11[8 * v10];
  if (v3)
    operator delete(v3);
LABEL_33:
  v25 = (char *)*((_QWORD *)this + 20);
  v26 = (char *)*((_QWORD *)this + 21);
  v27 = v26 - v25;
  if (v26 == v25)
  {
    v43 = 0;
    if ((unint64_t)v27 > 0xFF)
    {
      if (v27 != 256)
        *((_QWORD *)this + 21) = v26 + 256;
    }
    else
    {
      std::vector<__CVBuffer *>::__append((unint64_t *)this + 20, 32 - (v27 >> 3), (const double *)&v43);
    }
  }
  else
  {
    *((_OWORD *)v25 + 14) = 0u;
    *((_OWORD *)v25 + 15) = 0u;
    *((_OWORD *)v25 + 12) = 0u;
    *((_OWORD *)v25 + 13) = 0u;
    *((_OWORD *)v25 + 10) = 0u;
    *((_OWORD *)v25 + 11) = 0u;
    *((_OWORD *)v25 + 8) = 0u;
    *((_OWORD *)v25 + 9) = 0u;
    *((_OWORD *)v25 + 6) = 0u;
    *((_OWORD *)v25 + 7) = 0u;
    *((_OWORD *)v25 + 4) = 0u;
    *((_OWORD *)v25 + 5) = 0u;
    *((_OWORD *)v25 + 2) = 0u;
    *((_OWORD *)v25 + 3) = 0u;
    *(_OWORD *)v25 = 0u;
    *((_OWORD *)v25 + 1) = 0u;
  }
  v28 = (char *)*((_QWORD *)this + 23);
  v29 = (char *)*((_QWORD *)this + 24);
  v30 = v29 - v28;
  if (v29 == v28)
  {
    v43 = 0;
    if ((unint64_t)v30 > 0xFF)
    {
      if (v30 != 256)
        *((_QWORD *)this + 24) = v29 + 256;
    }
    else
    {
      std::vector<__CVBuffer *>::__append((unint64_t *)this + 23, 32 - (v30 >> 3), (const double *)&v43);
    }
  }
  else
  {
    *((_OWORD *)v28 + 14) = 0u;
    *((_OWORD *)v28 + 15) = 0u;
    *((_OWORD *)v28 + 12) = 0u;
    *((_OWORD *)v28 + 13) = 0u;
    *((_OWORD *)v28 + 10) = 0u;
    *((_OWORD *)v28 + 11) = 0u;
    *((_OWORD *)v28 + 8) = 0u;
    *((_OWORD *)v28 + 9) = 0u;
    *((_OWORD *)v28 + 6) = 0u;
    *((_OWORD *)v28 + 7) = 0u;
    *((_OWORD *)v28 + 4) = 0u;
    *((_OWORD *)v28 + 5) = 0u;
    *((_OWORD *)v28 + 2) = 0u;
    *((_OWORD *)v28 + 3) = 0u;
    *(_OWORD *)v28 = 0u;
    *((_OWORD *)v28 + 1) = 0u;
  }
  v32 = (char *)*((_QWORD *)this + 26);
  v31 = (char *)*((_QWORD *)this + 27);
  v33 = v31 - v32;
  if (v31 == v32)
  {
    v43 = 0;
    if ((unint64_t)v33 > 0x6F)
    {
      if (v33 != 112)
        *((_QWORD *)this + 27) = v31 + 112;
    }
    else
    {
      std::vector<__CVBuffer *>::__append((unint64_t *)this + 26, 14 - (v33 >> 3), (const double *)&v43);
    }
  }
  else
  {
    *((_OWORD *)v32 + 5) = 0u;
    *((_OWORD *)v32 + 6) = 0u;
    *((_OWORD *)v32 + 3) = 0u;
    *((_OWORD *)v32 + 4) = 0u;
    *((_OWORD *)v32 + 1) = 0u;
    *((_OWORD *)v32 + 2) = 0u;
    *(_OWORD *)v32 = 0u;
  }
  v35 = (char *)*((_QWORD *)this + 32);
  v34 = (char *)*((_QWORD *)this + 33);
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v43 = 0;
    if ((unint64_t)v36 > 0x6F)
    {
      if (v36 != 112)
        *((_QWORD *)this + 33) = v34 + 112;
    }
    else
    {
      std::vector<__CVBuffer *>::__append((unint64_t *)this + 32, 14 - (v36 >> 3), (const double *)&v43);
    }
  }
  else
  {
    *((_OWORD *)v35 + 5) = 0u;
    *((_OWORD *)v35 + 6) = 0u;
    *((_OWORD *)v35 + 3) = 0u;
    *((_OWORD *)v35 + 4) = 0u;
    *((_OWORD *)v35 + 1) = 0u;
    *((_OWORD *)v35 + 2) = 0u;
    *(_OWORD *)v35 = 0u;
  }
  v38 = (char *)*((_QWORD *)this + 29);
  v37 = (char *)*((_QWORD *)this + 30);
  v39 = v37 - v38;
  if (v37 == v38)
  {
    v43 = 0;
    if ((unint64_t)v39 > 0x6F)
    {
      if (v39 != 112)
        *((_QWORD *)this + 30) = v37 + 112;
    }
    else
    {
      std::vector<__CVBuffer *>::__append((unint64_t *)this + 29, 14 - (v39 >> 3), (const double *)&v43);
    }
  }
  else
  {
    *((_OWORD *)v38 + 5) = 0u;
    *((_OWORD *)v38 + 6) = 0u;
    *((_OWORD *)v38 + 3) = 0u;
    *((_OWORD *)v38 + 4) = 0u;
    *((_OWORD *)v38 + 1) = 0u;
    *((_OWORD *)v38 + 2) = 0u;
    *(_OWORD *)v38 = 0u;
  }
  v41 = (char *)*((_QWORD *)this + 35);
  v40 = (char *)*((_QWORD *)this + 36);
  v42 = v40 - v41;
  if (v40 == v41)
  {
    v43 = 0;
    if ((unint64_t)v42 > 0x6F)
    {
      if (v42 != 112)
        *((_QWORD *)this + 36) = v40 + 112;
    }
    else
    {
      std::vector<__CVBuffer *>::__append((unint64_t *)this + 35, 14 - (v42 >> 3), (const double *)&v43);
    }
  }
  else
  {
    *((_OWORD *)v41 + 5) = 0u;
    *((_OWORD *)v41 + 6) = 0u;
    *((_OWORD *)v41 + 3) = 0u;
    *((_OWORD *)v41 + 4) = 0u;
    *((_OWORD *)v41 + 1) = 0u;
    *((_OWORD *)v41 + 2) = 0u;
    *(_OWORD *)v41 = 0u;
  }
}

void ggl::MetalDeviceContext::endFrame(ggl::MetalDeviceContext *this, const ggl::EndFrameParams *a2)
{
  uint64_t v2;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _DWORD *v40;
  unint64_t *v41;
  id *v42;
  id v43;
  void *v44;
  id v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unsigned int *v59;
  unint64_t *v60;
  unint64_t v61;
  id v62;
  void *v63;
  id *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  id *v70;
  id *v71;
  id *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  NSObject *v78;
  os_signpost_id_t v79;
  NSObject *v80;
  NSObject *v81;
  os_signpost_id_t v82;
  id v83;
  NSObject *v84;
  NSObject *v85;
  os_signpost_id_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  id *v99;
  id *j;
  void *v101;
  void *v102;
  void *v103;
  id v104;
  id v105;
  _QWORD v106[4];
  id v107;
  _QWORD *v108;
  _BYTE *v109;
  _QWORD v110[8];
  std::__shared_weak_count *v111;
  _QWORD v112[5];
  _QWORD v113[5];
  _QWORD v114[7];
  std::__shared_weak_count *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[3];
  BOOL v121;
  unsigned int *v122;
  std::__shared_weak_count *v123;
  id *v124;
  id *v125;
  _QWORD *v126;
  int v127;
  uint64_t v128;
  uint8_t v129[16];
  _BYTE buf[24];
  __n128 (*v131)(__n128 *, __n128 *);
  void (*v132)(uint64_t);
  const char *v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (!v2)
  {
    if (GEOGetGeoGLMetalDeviceContextLog(void)::onceToken != -1)
      dispatch_once(&GEOGetGeoGLMetalDeviceContextLog(void)::onceToken, &__block_literal_global_40435);
    v36 = GEOGetGeoGLMetalDeviceContextLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoGLMetalDeviceContextLog(void)::log, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "false";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalDeviceContext.mm";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v131) = 169;
      _os_log_impl(&dword_19F029000, v36, OS_LOG_TYPE_FAULT, "No active frame to end: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
    return;
  }
  v5 = (id *)operator new(0x18uLL);
  v124 = v5;
  v125 = v5;
  v126 = v5 + 3;
  v6 = (uint64_t)*(id *)(v2 + 144);
  v105 = *(id *)(*((_QWORD *)this + 5) + 152);
  v102 = (void *)v6;
  if (v6)
  {
    *v5 = *(id *)(*((_QWORD *)this + 5) + 128);
    v125 = v5 + 1;
    objc_msgSend((id)v6, "endEncoding");
    v6 = 1;
  }
  v7 = *((_QWORD *)this + 5);
  if (*(_BYTE *)(v7 + 50))
  {
    v5[v6++] = *(id *)(v7 + 120);
    v125 = &v5[v6];
  }
  if (v105)
  {
    v8 = &v5[v6];
    *v8 = *(id *)(*((_QWORD *)this + 5) + 136);
    v125 = v8 + 1;
    objc_msgSend(v105, "endEncoding");
  }
  v9 = *((_QWORD *)a2 + 8);
  for (i = *((_QWORD *)a2 + 9); v9 != i; v9 += 32)
  {
    v11 = *((_QWORD *)this + 5);
    *(_OWORD *)buf = *(_OWORD *)(v11 + 24);
    if (*(_BYTE *)(v11 + 50))
    {
      v12 = *(id *)(v11 + 120);
      *(_QWORD *)&buf[16] = v12;
    }
    else
    {
      v12 = 0;
      *(_QWORD *)&buf[16] = 0;
    }

    v13 = *(_QWORD *)(v9 + 24);
    if (v13)
    {
      v114[0] = buf;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 48))(v13, v114);
    }

  }
  v14 = *((_QWORD *)this + 5);
  v16 = *(uint64_t **)(v14 + 8);
  v15 = *(std::__shared_weak_count **)(v14 + 16);
  v122 = (unsigned int *)v16;
  v123 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = atomic_load((unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 2) + 80) + 312));
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  atomic_store(v19, (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 64));
  v20 = (_DWORD *)*((_QWORD *)this + 4);
  v21 = *v20;
  v22 = v16[2];
  if (v22 != *(_QWORD *)&v20[4 * v21 + 2])
  {
    v23 = ((int)v21 + 1) % 3u;
    *v20 = v23;
    v24 = &v20[4 * v23];
    v27 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
    v25 = v24 + 2;
    v26 = v27;
    if (v27)
    {
      atomic_load(v26);
      v28 = &v20[4 * *v20];
      v30 = v16[2];
      v29 = v16[3];
      if (v29)
      {
        v31 = (unint64_t *)(v29 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      *((_QWORD *)v28 + 1) = v30;
      v33 = (std::__shared_weak_count *)*((_QWORD *)v28 + 2);
      *((_QWORD *)v28 + 2) = v29;
      if (!v33)
        goto LABEL_41;
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
    }
    else
    {
      v37 = v16[3];
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      *v25 = v22;
      v40 = &v20[4 * v23];
      v33 = (std::__shared_weak_count *)*((_QWORD *)v40 + 2);
      *((_QWORD *)v40 + 2) = v37;
      if (!v33)
        goto LABEL_41;
      v41 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v41);
      while (__stlxr(v35 - 1, v41));
    }
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
LABEL_41:
  v42 = v125;
  if (v124 == v125)
  {
    v43 = 0;
    v44 = 0;
  }
  else
  {
    v43 = *v124;
    v44 = *(v42 - 1);
  }
  v45 = v44;
  v120[0] = 0;
  v120[1] = v120;
  v120[2] = 0x2020000000;
  v104 = v45;
  v121 = v43 == v45;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4012000000;
  v131 = __Block_byref_object_copy__40439;
  v132 = __Block_byref_object_dispose__40440;
  v133 = "";
  v46 = (std::__shared_weak_count *)operator new(0x20uLL);
  v46->__shared_owners_ = 0;
  v46->__shared_weak_owners_ = 0;
  v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E66B8;
  v46[1].__vftable = 0;
  v134 = &v46[1].__vftable;
  v135 = v46;
  v116 = 0;
  v117 = &v116;
  v118 = 0x2020000000;
  v119 = *(_QWORD *)(*((_QWORD *)this + 5) + 40);
  v114[0] = 0;
  v114[1] = v114;
  v114[2] = 0x4012000000;
  v114[3] = __Block_byref_object_copy__2;
  v114[4] = __Block_byref_object_dispose__3;
  v114[5] = "";
  v48 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v48 + 8) = 0u;
  *(_QWORD *)v48 = &off_1E42E67D0;
  *((_QWORD *)v48 + 3) = 0;
  *((_OWORD *)v48 + 2) = 0u;
  v49 = *((_QWORD *)a2 + 19);
  *((_QWORD *)v48 + 6) = v49;
  v50 = *((_QWORD *)a2 + 16);
  v51 = *((_QWORD *)a2 + 17);
  v52 = v51 - v50;
  if (v51 != v50)
  {
    if (v52 < 0)
      abort();
    v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, v51 - v50, 8);
    v54 = 0;
    *((_QWORD *)v48 + 3) = v53;
    *((_QWORD *)v48 + 4) = v53;
    *((_QWORD *)v48 + 5) = v53 + 32 * (v52 >> 5);
    while (1)
    {
      v47 = v53 + v54;
      if (v53 + v54)
      {
        v56 = v50 + v54;
        v55 = *(_QWORD *)(v50 + v54 + 24);
        if (v55)
        {
          if (v56 == v55)
          {
            *(_QWORD *)(v53 + v54 + 24) = v47;
            (*(void (**)(_QWORD))(**(_QWORD **)(v56 + 24) + 24))(*(_QWORD *)(v56 + 24));
            goto LABEL_49;
          }
          v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
        }
        *(_QWORD *)(v53 + v54 + 24) = v55;
      }
LABEL_49:
      v54 += 32;
      if (v50 + v54 == v51)
      {
        *((_QWORD *)v48 + 4) = v53 + v54;
        break;
      }
    }
  }
  v114[6] = v48 + 24;
  v115 = (std::__shared_weak_count *)v48;
  v57 = MEMORY[0x1E0C809B0];
  v113[0] = MEMORY[0x1E0C809B0];
  v113[1] = 3221225472;
  v113[2] = ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke;
  v113[3] = &unk_1E42FA7F0;
  v113[4] = buf;
  v103 = (void *)MEMORY[0x1A1AF5730](v113, v47);
  v112[0] = v57;
  v112[1] = 3221225472;
  v112[2] = ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke_2;
  v112[3] = &unk_1E42FA7F0;
  v112[4] = &v116;
  v58 = (void *)MEMORY[0x1A1AF5730](v112);
  v110[0] = v57;
  v110[1] = 3321888768;
  v110[2] = ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke_6;
  v110[3] = &unk_1E42E9CE8;
  v59 = v122;
  v110[6] = this;
  v110[7] = v122;
  v111 = v123;
  if (v123)
  {
    v60 = (unint64_t *)&v123->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  v110[4] = &v116;
  v110[5] = v114;
  v106[0] = v57;
  v106[1] = 3221225472;
  v106[2] = ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke_8;
  v106[3] = &unk_1E42FA818;
  v108 = v120;
  v109 = buf;
  v62 = (id)MEMORY[0x1A1AF5730](v110);
  v107 = v62;
  v63 = (void *)MEMORY[0x1A1AF5730](v106);
  if (v43)
  {
    objc_msgSend(v43, "addScheduledHandler:", v58);
    if (v43 != v104)
      objc_msgSend(v43, "addCompletedHandler:", v103);
    objc_msgSend(v104, "addCompletedHandler:", v63);
  }
  else
  {
    (*((void (**)(id, _QWORD, _QWORD, double))v62 + 2))(v62, 0, 0, 0.0);
  }
  v64 = (id *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v64)
  {
    ggl::MetalDeviceContextFrame::~MetalDeviceContextFrame(v64);
    MEMORY[0x1A1AF4E00]();
  }
  atomic_store(1u, v59 + 2);
  v65 = atomic_load(v59 + 2);
  if (v65 == 2 && (v66 = *((_QWORD *)v59 + 7)) != 0)
  {
    v67 = *(_QWORD *)v59;
    v128 = 0;
    *(_QWORD *)v129 = v67;
    v127 = 0;
    (*(void (**)(uint64_t, uint8_t *, uint64_t *, int *))(*(_QWORD *)v66 + 48))(v66, v129, &v128, &v127);
  }
  else
  {
    v68 = atomic_load(v59 + 2);
    if (v68 == 1)
    {
      v69 = *((_QWORD *)v59 + 11);
      if (v69)
        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 48))(v69);
    }
  }
  v70 = v124;
  v71 = v125;
  if (v124 != v125)
  {
    v72 = v124;
    do
    {
      v73 = *v72;
      objc_msgSend(v73, "commit");

      ++v72;
    }
    while (v72 != v71);
  }
  v74 = *((_QWORD *)a2 + 12);
  v75 = *((_QWORD *)a2 + 13);
  while (v74 != v75)
  {
    v76 = *(_QWORD *)(v74 + 24);
    if (v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 48))(v76);
    v74 += 32;
  }
  if (GEOGetGeoGLPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_4_40479);
  v77 = (id)GEOGetGeoGLPerformanceLog_log;
  v78 = v77;
  v79 = v117[3];
  if (v79 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v77))
  {
    *(_WORD *)v129 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v78, OS_SIGNPOST_INTERVAL_BEGIN, v79, "GPUFrameScheduled", (const char *)&unk_1A0189141, v129, 2u);
  }

  if (GEOGetGeoGLPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_4_40479);
  v80 = (id)GEOGetGeoGLPerformanceLog_log;
  v81 = v80;
  v82 = v117[3];
  if (v82 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v80))
  {
    *(_WORD *)v129 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v81, OS_SIGNPOST_INTERVAL_BEGIN, v82, "WaitUntilScheduled", (const char *)&unk_1A0189141, v129, 2u);
  }

  for (; v70 != v71; ++v70)
  {
    v83 = *v70;
    objc_msgSend(v83, "waitUntilScheduled");

  }
  if (GEOGetGeoGLPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_4_40479);
  v84 = (id)GEOGetGeoGLPerformanceLog_log;
  v85 = v84;
  v86 = v117[3];
  if (v86 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v84))
  {
    *(_WORD *)v129 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v85, OS_SIGNPOST_INTERVAL_END, v86, "WaitUntilScheduled", (const char *)&unk_1A0189141, v129, 2u);
  }

  v87 = v111;
  if (v111)
  {
    v88 = (unint64_t *)&v111->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }

  _Block_object_dispose(v114, 8);
  v90 = v115;
  if (v115)
  {
    v91 = (unint64_t *)&v115->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  _Block_object_dispose(&v116, 8);
  _Block_object_dispose(buf, 8);
  v93 = v135;
  if (v135)
  {
    v94 = (unint64_t *)&v135->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  _Block_object_dispose(v120, 8);

  v96 = v123;
  if (v123)
  {
    v97 = (unint64_t *)&v123->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }

  v99 = v124;
  if (v124)
  {
    for (j = v125; j != v99; --j)
    {
      v101 = *(j - 1);

    }
    operator delete(v99);
  }
}

void sub_19F23D62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Block_object_dispose(&a40, 8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose((const void *)(v60 - 192), 8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v60 - 144);
  _Block_object_dispose(&a52, 8);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::vector<VKTransitLineMarker * {__strong}>::~vector[abi:nn180100]((void **)(v60 - 248));
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<ggl::RenderTransaction *,std::shared_ptr<ggl::RenderTransaction>::__shared_ptr_default_delete<ggl::RenderTransaction,ggl::RenderTransaction>,std::allocator<ggl::RenderTransaction>>::__on_zero_shared(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = *(_QWORD **)(result + 24);
  if (v1)
  {
    v2 = (_QWORD *)v1[11];
    if (v2 == v1 + 8)
    {
      v3 = 4;
      v2 = v1 + 8;
    }
    else
    {
      if (!v2)
        goto LABEL_8;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_8:
    v4 = (_QWORD *)v1[7];
    if (v4 == v1 + 4)
    {
      v5 = 4;
      v4 = v1 + 4;
    }
    else
    {
      if (!v4)
        goto LABEL_13;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
    v6 = (std::__shared_weak_count *)v1[3];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void ggl::MetalDeviceContext::beginFrame(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int64_t v55;
  char *v56;
  char *v57;
  size_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  __int128 *v82;
  _OWORD *v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  __int128 *v90;
  _OWORD *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  char *v95;
  size_t v96;
  uint64_t v97;
  geo::read_write_lock *v98;
  const char *v99;
  malloc_zone_t *zone;
  uint64_t v101;
  geo::read_write_lock *v102;
  const char *v103;
  malloc_zone_t *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  std::__shared_weak_count *v109;
  uint8_t buf[4];
  const char *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  int v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 64), 0xFFFFFFFFFFFFFFFFLL);
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = operator new();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = a2[24];
    v10 = (_QWORD *)*((_QWORD *)a2 + 1);
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v108 = v10;
    v109 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *a2;
    v14 = a2[1];
    *(_QWORD *)v5 = v7;
    *(_QWORD *)(v5 + 8) = v10;
    *(_QWORD *)(v5 + 16) = v9;
    if (v9)
    {
      v15 = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_BYTE *)(v5 + 48) = v13;
    *(_BYTE *)(v5 + 49) = v14;
    *(_BYTE *)(v5 + 50) = 0;
    *(_QWORD *)(v5 + 64) = 0;
    *(_QWORD *)(v5 + 72) = 0;
    {
      v97 = operator new();
      *(_QWORD *)(v97 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v97 + 24) = "GeoGL";
      *(_OWORD *)(v97 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v97 = &off_1E42B5668;
      *(_QWORD *)(v97 + 8) = "GeoGL";
      *(_OWORD *)(v97 + 72) = 0u;
      *(_OWORD *)(v97 + 88) = 0u;
      *(_OWORD *)(v97 + 104) = 0u;
      *(_OWORD *)(v97 + 120) = 0u;
      *(_OWORD *)(v97 + 136) = 0u;
      *(_OWORD *)(v97 + 152) = 0u;
      *(_OWORD *)(v97 + 168) = 0u;
      *(_OWORD *)(v97 + 184) = 0u;
      *(_OWORD *)(v97 + 200) = 0u;
      *(_OWORD *)(v97 + 216) = 0u;
      *(_OWORD *)(v97 + 232) = 0u;
      *(_QWORD *)(v97 + 248) = 0;
      *(_OWORD *)(v97 + 56) = 0u;
      v98 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v97 + 56), 0);
      if ((_DWORD)v98)
        geo::read_write_lock::logFailure(v98, (uint64_t)"initialization", v99);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v97 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v97 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v97;
    }
    v18 = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 80) = v18;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 104) = 0;
    {
      v101 = operator new();
      *(_QWORD *)(v101 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v101 + 24) = "GeoGL";
      *(_OWORD *)(v101 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v101 = &off_1E42B5668;
      *(_QWORD *)(v101 + 8) = "GeoGL";
      *(_OWORD *)(v101 + 72) = 0u;
      *(_OWORD *)(v101 + 88) = 0u;
      *(_OWORD *)(v101 + 104) = 0u;
      *(_OWORD *)(v101 + 120) = 0u;
      *(_OWORD *)(v101 + 136) = 0u;
      *(_OWORD *)(v101 + 152) = 0u;
      *(_OWORD *)(v101 + 168) = 0u;
      *(_OWORD *)(v101 + 184) = 0u;
      *(_OWORD *)(v101 + 200) = 0u;
      *(_OWORD *)(v101 + 216) = 0u;
      *(_OWORD *)(v101 + 232) = 0u;
      *(_QWORD *)(v101 + 248) = 0;
      *(_OWORD *)(v101 + 56) = 0u;
      v102 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v101 + 56), 0);
      if ((_DWORD)v102)
        geo::read_write_lock::logFailure(v102, (uint64_t)"initialization", v103);
      v104 = malloc_create_zone(0, 0);
      *(_QWORD *)(v101 + 48) = v104;
      malloc_set_zone_name(v104, "GeoGL");
      *(_QWORD *)(v101 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v101;
    }
    v19 = ggl::Allocator::instance(void)::alloc;
    *(_OWORD *)(v6 + 120) = 0u;
    v20 = (void **)(v6 + 120);
    *(_QWORD *)(v6 + 112) = v19;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_QWORD *)(v6 + 152) = 0;
    v21 = *v108 % 3uLL;
    *(_QWORD *)(v6 + 24) = *v108;
    *(_QWORD *)(v6 + 32) = v21;
    v22 = objc_alloc_init(MEMORY[0x1E0CC6A58]);
    objc_msgSend(v22, "setRetainedReferences:", 0);
    objc_msgSend(v22, "setErrorOptions:", v8);
    if (v13)
    {
      v23 = *(id *)(*(_QWORD *)v6 + 112);
      objc_msgSend(v23, "commandBufferWithDescriptor:", v22);
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = *(void **)(v6 + 128);
      *(_QWORD *)(v6 + 128) = v24;

    }
    v26 = *(id *)(*(_QWORD *)v6 + 112);
    objc_msgSend(v26, "commandBufferWithDescriptor:", v22);
    v27 = objc_claimAutoreleasedReturnValue();
    v28 = *v20;
    *v20 = (void *)v27;

    if (v14)
    {
      v29 = *(id *)(*(_QWORD *)v6 + 112);
      objc_msgSend(v29, "commandBufferWithDescriptor:", v22);
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = *(void **)(v6 + 136);
      *(_QWORD *)(v6 + 136) = v30;

    }
    std::mutex::lock((std::mutex *)(v7 + 144));
    v32 = *(_QWORD *)(v7 + 208) + 1;
    *(_QWORD *)(v7 + 208) = v32;
    std::mutex::unlock((std::mutex *)(v7 + 144));
    *(_QWORD *)(v6 + 40) = v32;

    v33 = *(id **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v6;
    if (v33)
    {
      ggl::MetalDeviceContextFrame::~MetalDeviceContextFrame(v33);
      MEMORY[0x1A1AF4E00]();
    }
    if (v109)
    {
      v34 = (unint64_t *)&v109->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    v36 = *(_QWORD *)(a1 + 112) + 24 * *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
    v37 = *(char **)v36;
    v39 = (_QWORD *)(v36 + 8);
    v38 = *(char **)(v36 + 8);
    v40 = (uint64_t)&v38[-*(_QWORD *)v36];
    if (v40 < 1)
      goto LABEL_79;
    v41 = v40 >> 2;
    v43 = *(_QWORD *)(a1 + 88);
    v42 = *(char **)(a1 + 96);
    v44 = (int64_t)&v42[-v43];
    v45 = (uint64_t)&v42[-v43] >> 2;
    v46 = (_BYTE *)(v43 + ((unint64_t)&v42[-v43] & 0xFFFFFFFFFFFFFFFCLL));
    v47 = *(_QWORD *)(a1 + 104);
    if (v41 <= (v47 - (uint64_t)v42) >> 2)
    {
      v52 = v42 - v46;
      v53 = (v42 - v46) >> 2;
      if (v53 >= v41)
      {
        v54 = &v37[4 * v41];
        v56 = *(char **)(a1 + 96);
      }
      else
      {
        v107 = *(_QWORD *)(a1 + 112) + 24 * *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
        v54 = &v37[4 * v53];
        v55 = v38 - v54;
        if (v38 != v54)
        {
          v105 = &v37[4 * v53];
          memmove(v42, v105, v38 - v54);
          v45 = (uint64_t)&v42[-v43] >> 2;
          v54 = v105;
          v46 = (_BYTE *)(v43 + ((unint64_t)&v42[-v43] & 0xFFFFFFFFFFFFFFFCLL));
        }
        v56 = &v42[v55];
        *(_QWORD *)(a1 + 96) = &v42[v55];
        v36 = v107;
        if (v52 < 1)
          goto LABEL_79;
      }
      v57 = &v46[4 * v41];
      v58 = v56 - v57;
      v59 = (v56 - v57) >> 2;
      v60 = &v56[-4 * v41];
      v61 = v56;
      if (v60 < v42)
      {
        v62 = (v44 & 0xFFFFFFFFFFFFFFFCLL) + v58;
        v63 = (char *)(v62 + v43);
        v64 = v62 + v43 + 4;
        if ((unint64_t)v42 > v64)
          v64 = (unint64_t)v42;
        v65 = v64 + ~v43 - v62;
        v66 = v56 - v63;
        v67 = v65 >= 0x2C && v66 > 0x1F;
        v61 = v56;
        if (!v67)
          goto LABEL_93;
        v68 = (v65 >> 2) + 1;
        v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
        v60 += v69;
        v70 = v56 + 16;
        v71 = (__int128 *)(4 * v59 + 4 * v45 + v43 + 16);
        v72 = v68 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v73 = *v71;
          *(v70 - 1) = *(v71 - 1);
          *v70 = v73;
          v70 += 2;
          v71 += 2;
          v72 -= 8;
        }
        while (v72);
        v61 = &v56[v69];
        if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_93:
          do
          {
            v74 = *(_DWORD *)v60;
            v60 += 4;
            *(_DWORD *)v61 = v74;
            v61 += 4;
          }
          while (v60 < v42);
        }
      }
      *(_QWORD *)(a1 + 96) = v61;
      if (v56 != v57)
      {
        v75 = v46;
        memmove(&v56[-4 * v59], v46, v58);
        v46 = v75;
      }
      if (v54 != v37)
        memmove(v46, v37, v54 - v37);
LABEL_79:
      *v39 = *(_QWORD *)v36;
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 64) = 0;
      return;
    }
    v106 = *(_QWORD *)(a1 + 112) + 24 * *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
    v48 = v45 + v41;
    if ((unint64_t)(v45 + v41) >> 62)
      abort();
    v49 = v47 - v43;
    if (v49 >> 1 > v48)
      v48 = v49 >> 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
      v50 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v51 = operator new(4 * v50);
      v46 = (_BYTE *)(v43 + ((unint64_t)&v42[-v43] & 0xFFFFFFFFFFFFFFFCLL));
      v45 = (uint64_t)&v42[-v43] >> 2;
    }
    else
    {
      v51 = 0;
    }
    v76 = &v51[4 * v45];
    v77 = &v76[4 * v41];
    v78 = (v41 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v78 >= 7)
    {
      v79 = &v51[4 * v45];
      if ((unint64_t)(&v51[v44 & 0xFFFFFFFFFFFFFFFCLL] - v37) >= 0x20)
      {
        v80 = v78 + 1;
        v81 = 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
        v79 = &v76[v81];
        v82 = (__int128 *)(v37 + 16);
        v83 = &v51[4 * v45 + 16];
        v84 = v80 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v85 = *v82;
          *(v83 - 1) = *(v82 - 1);
          *v83 = v85;
          v82 += 2;
          v83 += 2;
          v84 -= 8;
        }
        while (v84);
        if (v80 == (v80 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_67:
          if ((char *)v43 != v42)
          {
            if ((unint64_t)(v44 - 4) >= 0x3C)
            {
              v87 = v46;
              if ((v44 & 0xFFFFFFFFFFFFFFFCLL) + v43 - (unint64_t)&v51[v44 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
              {
                v88 = ((unint64_t)(v44 - 4) >> 2) + 1;
                v87 = &v46[-4 * (v88 & 0x7FFFFFFFFFFFFFF8)];
                v89 = 4 * v45 - 16;
                v90 = (__int128 *)(v43 + v89);
                v91 = &v51[v89];
                v92 = v88 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v93 = *v90;
                  *(v91 - 1) = *(v90 - 1);
                  *v91 = v93;
                  v90 -= 2;
                  v91 -= 2;
                  v92 -= 8;
                }
                while (v92);
                v76 -= 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
                if (v88 == (v88 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_75;
              }
            }
            else
            {
              v87 = v46;
            }
            do
            {
              v94 = *((_DWORD *)v87 - 1);
              v87 -= 4;
              *((_DWORD *)v76 - 1) = v94;
              v76 -= 4;
            }
            while (v87 != (char *)v43);
          }
LABEL_75:
          v95 = &v51[4 * v50];
          v96 = v42 - v46;
          if (v96)
            memmove(v77, v46, v96);
          *(_QWORD *)(a1 + 88) = v76;
          *(_QWORD *)(a1 + 96) = &v77[v96];
          *(_QWORD *)(a1 + 104) = v95;
          v36 = v106;
          if (v43)
            operator delete((void *)v43);
          goto LABEL_79;
        }
        v37 += v81;
      }
    }
    else
    {
      v79 = &v51[4 * v45];
    }
    do
    {
      v86 = *(_DWORD *)v37;
      v37 += 4;
      *(_DWORD *)v79 = v86;
      v79 += 4;
    }
    while (v79 != v77);
    goto LABEL_67;
  }
  if (GEOGetGeoGLMetalDeviceContextLog(void)::onceToken != -1)
    dispatch_once(&GEOGetGeoGLMetalDeviceContextLog(void)::onceToken, &__block_literal_global_40435);
  v4 = GEOGetGeoGLMetalDeviceContextLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoGLMetalDeviceContextLog(void)::log, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315650;
    v111 = "false";
    v112 = 2080;
    v113 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoGL/GeoGL/MetalDeviceContext.mm";
    v114 = 1024;
    v115 = 144;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_FAULT, "Frame already active: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
  }
}

void std::vector<__CVBuffer *>::__append(unint64_t *a1, unint64_t a2, const double *a3)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (_QWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (!a2)
    {
LABEL_21:
      a1[1] = (unint64_t)v8;
      return;
    }
    v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v16 >= 0xF && (v7 >= (unint64_t)(a3 + 1) || v7 + 8 * a2 <= (unint64_t)a3))
    {
      v17 = v16 + 1;
      v18 = vld1q_dup_f64(a3);
      v19 = (float64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_20;
      v8 = (_QWORD *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
    }
    do
      *v8++ = *(_QWORD *)a3;
    while (v8 != (_QWORD *)(v7 + 8 * a2));
LABEL_20:
    v8 = (_QWORD *)(v7 + 8 * a2);
    goto LABEL_21;
  }
  v9 = (_QWORD *)*a1;
  v10 = v7 - *a1;
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + a2;
  if (v12 >> 61)
    abort();
  v13 = v6 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = (char *)operator new(8 * v14);
  }
  else
  {
    v15 = 0;
  }
  v21 = (unint64_t)&v15[8 * v11];
  v22 = (char *)(v21 + 8 * a2);
  v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v24 = (char *)v21;
  if (v23 < 0x13)
    goto LABEL_30;
  if (v21 < (unint64_t)(a3 + 1))
  {
    v24 = &v15[8 * v11];
    if (&v15[8 * a2 + v10] > (char *)a3)
      goto LABEL_30;
  }
  v25 = v23 + 1;
  v26 = vld1q_dup_f64(a3);
  v27 = (float64x2_t *)&v15[8 * v11 + 16];
  v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v27[-1] = v26;
    *v27 = v26;
    v27 += 2;
    v28 -= 4;
  }
  while (v28);
  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v24 = (char *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    do
    {
LABEL_30:
      *(double *)v24 = *a3;
      v24 += 8;
    }
    while (v24 != v22);
    v9 = (_QWORD *)*a1;
  }
  if ((_QWORD *)v7 != v9)
  {
    v29 = v7 - (_QWORD)v9 - 8;
    if (v29 < 0x58)
      goto LABEL_48;
    if (v7 - (unint64_t)&v15[v10] < 0x20)
      goto LABEL_48;
    v30 = (v29 >> 3) + 1;
    v8 = (_QWORD *)(v7 - 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL));
    v31 = &v15[8 * v11 - 16];
    v32 = (__int128 *)(v7 - 16);
    v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v34 = *v32;
      *((_OWORD *)v31 - 1) = *(v32 - 1);
      *(_OWORD *)v31 = v34;
      v31 -= 32;
      v32 -= 2;
      v33 -= 4;
    }
    while (v33);
    v21 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v8 = v9;
    }
    else
    {
LABEL_48:
      do
      {
        v35 = *--v8;
        *(_QWORD *)(v21 - 8) = v35;
        v21 -= 8;
      }
      while (v8 != v9);
      v8 = (_QWORD *)*a1;
    }
  }
  *a1 = v21;
  a1[1] = (unint64_t)v22;
  a1[2] = (unint64_t)&v15[8 * v14];
  if (v8)
    operator delete(v8);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,float>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,float>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[3] = 0;
  *((_BYTE *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  v11 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = (_BYTE *)*((_QWORD *)a3 + 2);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    v13 = result;
    if (v12 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v10 - v11);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[8 * (v12 >> 3)];
    result = memcpy(v14, v11, v12 & 0xFFFFFFFFFFFFFFF8);
    v13[4] = &v14[v12 & 0xFFFFFFFFFFFFFFF8];
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_19F23E5D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_19F23E6F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addZIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 9u, 265);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11F0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1420;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 104);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addZIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 152);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 9u, 265);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11F0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1420;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 152);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addZIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 120);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 9u, 265);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11F0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1420;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 120);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::NonZoomablePropertyStore<unsigned int>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  int v4;

  v4 = *a4;
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = v4;
  return result;
}

float md::LabelAnimator::setupIconMorphAnimation(uint64_t *a1, char a2, float *a3, char a4, float *a5, uint64_t a6, float result)
{
  uint64_t v11;
  BOOL v12;
  __int128 *v13;
  __n128 v14;
  __int128 *v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if ((a2 & 1) == 0 || (a4 & 1) == 0)
    return result;
  (*(void (**)(__int128 *__return_ptr, float *))(*(_QWORD *)a3 + 200))(&v17, a3);
  v11 = v17;
  if ((_QWORD)v17 == *((_QWORD *)&v17 + 1))
  {
    (*(void (**)(uint64_t *__return_ptr, float *))(*(_QWORD *)a5 + 200))(&v22, a5);
    v12 = v22 != v23;
    if (v22)
    {
      v23 = v22;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 40))(v25, v22, v24 - v22);
    }
    v11 = v17;
    if (!(_QWORD)v17)
      goto LABEL_6;
  }
  else
  {
    v12 = 1;
    if (!(_QWORD)v17)
      goto LABEL_6;
  }
  *((_QWORD *)&v17 + 1) = v11;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v18 + 1) + 40))(*((_QWORD *)&v18 + 1), v11, v18 - v11);
LABEL_6:
  if (!v12)
  {
    v13 = md::LabelAnimator::resolveParams(a1, 0, 4u, 0, 0);
    v18 = v13[1];
    v19 = v13[2];
    v20 = v13[3];
    if ((a6 & 0xFF00000000) != 0)
    {
      v14 = (__n128)*v13;
      v17 = *v13;
      LODWORD(v18) = a6;
      LODWORD(v19) = a6;
      LODWORD(v20) = a6;
      v21 = a6;
    }
    else
    {
      v21 = *((_DWORD *)v13 + 16);
      v14 = (__n128)*v13;
      v17 = *v13;
    }
    md::LabelAnimator::createMorphAnimation(a1, (uint64_t)a3, a5, 0, (uint64_t)&v17, (float *)&v22, v14);
    v15 = md::LabelAnimator::resolveParams(a1, 1, 4u, 0, 0);
    v18 = v15[1];
    v19 = v15[2];
    v20 = v15[3];
    if ((a6 & 0xFF00000000) != 0)
    {
      v16 = (__n128)*v15;
      v17 = *v15;
      LODWORD(v18) = a6;
      LODWORD(v19) = a6;
      LODWORD(v20) = a6;
      v21 = a6;
    }
    else
    {
      v21 = *((_DWORD *)v15 + 16);
      v16 = (__n128)*v15;
      v17 = *v15;
    }
    return md::LabelAnimator::createMorphAnimation(a1, (uint64_t)a5, a3, 1, (uint64_t)&v17, (float *)&v22, v16);
  }
  return result;
}

void sub_19F23EBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 - a9);
  _Unwind_Resume(exception_object);
}

uint64_t md::CompositeLabeler::synchStagingWithDisplay(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 8);
  for (i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3))
    v3 = *v1++;
  return this;
}

void md::StandardLabeler::synchStagingWithDisplay(md::StandardLabeler *this)
{
  md::StandardLabeler *v1;
  uint64_t v2;
  unsigned __int8 v3;
  float *v4;
  __int128 *v5;
  __int128 *v6;
  char *v7;
  __int128 *v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  __int128 v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  char *v65;
  char v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  __int128 *v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  _OWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  md::StandardLabeler *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  md::LabelAnimator *v105;
  uint64_t v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unsigned __int8 v138;
  uint64_t v139;
  unsigned __int8 v140;
  int v141;
  md::LabelPart *v142;
  uint64_t v143;
  unsigned __int8 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  md::CrossFadeLabelPart *v150;
  uint64_t v151;
  int v152;
  unsigned __int8 v153;
  uint64_t (*v154)(void);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  unsigned __int8 v169;
  char v170;
  float v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  geo::read_write_lock *v199;
  const char *v200;
  malloc_zone_t *v201;
  uint64_t v202;
  geo::read_write_lock *v203;
  const char *v204;
  malloc_zone_t *v205;
  uint64_t v206;
  geo::read_write_lock *v207;
  const char *v208;
  malloc_zone_t *v209;
  uint64_t v210;
  geo::read_write_lock *v211;
  const char *v212;
  malloc_zone_t *v213;
  uint64_t v214;
  geo::read_write_lock *v215;
  const char *v216;
  malloc_zone_t *v217;
  uint64_t v218;
  geo::read_write_lock *v219;
  const char *v220;
  malloc_zone_t *v221;
  uint64_t v222;
  geo::read_write_lock *v223;
  const char *v224;
  malloc_zone_t *v225;
  uint64_t v226;
  geo::read_write_lock *v227;
  const char *v228;
  malloc_zone_t *v229;
  md::Label *v230;
  __int128 *v231;
  __int128 *v232;
  __int128 *v233;
  md::Label *v234;
  unsigned __int8 v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *p_shared_owners;
  unint64_t v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  float *v247;
  __int128 *v248;
  uint64_t v249;
  __int128 v250;
  unint64_t *v251;
  unint64_t v252;
  __int128 *v253;
  __int128 *v254;
  __int128 v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  char *v259;
  md::Label *v260;
  uint64_t v261;
  geo::read_write_lock *v262;
  const char *v263;
  malloc_zone_t *zone;
  uint64_t v265;
  geo::read_write_lock *v266;
  const char *v267;
  malloc_zone_t *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  _QWORD *v272;
  uint64_t v273;
  char *v274;
  __int128 *v275;
  unint64_t v276;

  v1 = this;
  v2 = *((_QWORD *)this + 6);
  v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v261 = operator new();
    *(_QWORD *)(v261 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v261 + 24) = "VectorKitLabels";
    *(_OWORD *)(v261 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v261 = &off_1E42B5668;
    *(_QWORD *)(v261 + 8) = "VectorKitLabels";
    *(_OWORD *)(v261 + 72) = 0u;
    *(_OWORD *)(v261 + 88) = 0u;
    *(_OWORD *)(v261 + 104) = 0u;
    *(_OWORD *)(v261 + 120) = 0u;
    *(_OWORD *)(v261 + 136) = 0u;
    *(_OWORD *)(v261 + 152) = 0u;
    *(_OWORD *)(v261 + 168) = 0u;
    *(_OWORD *)(v261 + 184) = 0u;
    *(_OWORD *)(v261 + 200) = 0u;
    *(_OWORD *)(v261 + 216) = 0u;
    *(_OWORD *)(v261 + 232) = 0u;
    *(_QWORD *)(v261 + 248) = 0;
    *(_OWORD *)(v261 + 56) = 0u;
    v262 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v261 + 56), 0);
    if ((_DWORD)v262)
      geo::read_write_lock::logFailure(v262, (uint64_t)"initialization", v263);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v261 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v261 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v261;
    v1 = this;
  }
  v270 = mdm::Allocator::instance(void)::alloc;
  v6 = (__int128 *)*((_QWORD *)v1 + 13);
  v5 = (__int128 *)*((_QWORD *)v1 + 14);
  if (v6 != v5)
  {
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)v6 + 820) != 2)
      {
        v9 = atomic_load((unsigned __int8 *)(*(_QWORD *)v6 + 1243));
        if ((v9 & 1) == 0)
        {
          v10 = *(_QWORD *)v6;
          *(_BYTE *)(v10 + 1252) = 0;
          if (!*(_BYTE *)(v10 + 1072))
            break;
        }
      }
      if (++v6 == v5)
      {
        v7 = 0;
        v271 = 0;
        v8 = 0;
        goto LABEL_14;
      }
    }
    v11 = (__int128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v270 + 16))(v270, 16, 8);
    v271 = (char *)(v11 + 1);
    if (v11)
    {
      v12 = *v6;
      *v11 = *v6;
      if (*((_QWORD *)&v12 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v8 = v11;
    }
    else
    {
      v8 = 0;
    }
    v7 = (char *)(v8 + 1);
    v230 = *(md::Label **)v6;
    if (*(_BYTE *)(*(_QWORD *)v6 + 1251))
    {
      *((_BYTE *)v230 + 1251) = 0;
      md::Label::clearAnimation(v230);
    }
    if (v6 == v5)
    {
LABEL_14:
      v6 = v5;
      goto LABEL_15;
    }
    v231 = v6 + 1;
    if (v6 + 1 == v5)
      goto LABEL_15;
    v232 = v6;
    while (1)
    {
      v233 = v232;
      v232 = v231;
      v234 = (md::Label *)*((_QWORD *)v233 + 2);
      if (*((_BYTE *)v234 + 820) != 2)
      {
        v235 = atomic_load((unsigned __int8 *)v234 + 1243);
        v234 = *(md::Label **)v232;
        if ((v235 & 1) == 0)
        {
          *((_BYTE *)v234 + 1252) = 0;
          if (!*((_BYTE *)v234 + 1072))
            break;
        }
      }
      v236 = *((_QWORD *)v233 + 3);
      *(_QWORD *)v232 = 0;
      *((_QWORD *)v232 + 1) = 0;
      v237 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
      *(_QWORD *)v6 = v234;
      *((_QWORD *)v6 + 1) = v236;
      if (v237)
      {
        p_shared_owners = (unint64_t *)&v237->__shared_owners_;
        do
          v239 = __ldaxr(p_shared_owners);
        while (__stlxr(v239 - 1, p_shared_owners));
        if (!v239)
        {
          ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
          std::__shared_weak_count::__release_weak(v237);
        }
      }
      ++v6;
LABEL_388:
      v231 = v232 + 1;
      if (v232 + 1 == v5)
        goto LABEL_15;
    }
    if (v7 < v271)
    {
      if (v7)
      {
        v240 = *((_QWORD *)v233 + 3);
        *(_QWORD *)v7 = v234;
        *((_QWORD *)v7 + 1) = v240;
        if (v240)
        {
          v241 = (unint64_t *)(v240 + 8);
          do
            v242 = __ldxr(v241);
          while (__stxr(v242 + 1, v241));
        }
      }
      v7 += 16;
      goto LABEL_422;
    }
    v243 = (v7 - (char *)v8) >> 4;
    v244 = v243 + 1;
    v275 = v8;
    if ((unint64_t)(v243 + 1) >> 60)
      abort();
    if ((v271 - (char *)v8) >> 3 > v244)
      v244 = (v271 - (char *)v8) >> 3;
    if ((unint64_t)(v271 - (char *)v8) >= 0x7FFFFFFFFFFFFFF0)
      v245 = 0xFFFFFFFFFFFFFFFLL;
    else
      v245 = v244;
    if (v245)
    {
      v246 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v270 + 16))(v270, 16 * v245, 8);
      v247 = v4;
      v248 = (__int128 *)(v246 + 16 * v243);
      v249 = v246 + 16 * v245;
      if (v246)
      {
        v250 = *v232;
        *v248 = *v232;
        if (*((_QWORD *)&v250 + 1))
        {
          v251 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
          do
            v252 = __ldxr(v251);
          while (__stxr(v252 + 1, v251));
        }
      }
    }
    else
    {
      v247 = v4;
      v249 = 0;
      v248 = (__int128 *)(16 * v243);
    }
    if (v7 == (char *)v275)
    {
      v254 = v248;
      v259 = v7;
      v7 = (char *)(v248 + 1);
      if (!v259)
        goto LABEL_421;
    }
    else
    {
      v253 = (__int128 *)v7;
      v254 = v248;
      do
      {
        v255 = *--v253;
        *--v254 = v255;
        *(_QWORD *)v253 = 0;
        *((_QWORD *)v253 + 1) = 0;
      }
      while (v253 != v275);
      do
      {
        v256 = (std::__shared_weak_count *)*((_QWORD *)v7 - 1);
        if (v256)
        {
          v257 = (unint64_t *)&v256->__shared_owners_;
          do
            v258 = __ldaxr(v257);
          while (__stlxr(v258 - 1, v257));
          if (!v258)
          {
            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
            std::__shared_weak_count::__release_weak(v256);
          }
        }
        v7 -= 16;
      }
      while (v7 != (char *)v275);
      v259 = (char *)v275;
      v7 = (char *)(v248 + 1);
      if (!v275)
        goto LABEL_421;
    }
    (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v270 + 40))(v270, v259, v271 - v259);
LABEL_421:
    v271 = (char *)v249;
    v4 = v247;
    v8 = v254;
    v1 = this;
LABEL_422:
    v260 = *(md::Label **)v232;
    if (*(_BYTE *)(*(_QWORD *)v232 + 1251))
    {
      *((_BYTE *)v260 + 1251) = 0;
      md::Label::clearAnimation(v260);
    }
    goto LABEL_388;
  }
  v7 = 0;
  v271 = 0;
  v8 = 0;
LABEL_15:
  v274 = (char *)v8;
  v272 = (_QWORD *)((char *)v1 + 104);
  std::vector<std::shared_ptr<md::Label>,geo::StdAllocator<std::shared_ptr<md::Label>,mdm::Allocator>>::erase((uint64_t)v1 + 104, v6, *((__int128 **)v1 + 14));
  {
    v265 = operator new();
    *(_QWORD *)(v265 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v265 + 24) = "VectorKitLabels";
    *(_OWORD *)(v265 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v265 = &off_1E42B5668;
    *(_QWORD *)(v265 + 8) = "VectorKitLabels";
    *(_OWORD *)(v265 + 72) = 0u;
    *(_OWORD *)(v265 + 88) = 0u;
    *(_OWORD *)(v265 + 104) = 0u;
    *(_OWORD *)(v265 + 120) = 0u;
    *(_OWORD *)(v265 + 136) = 0u;
    *(_OWORD *)(v265 + 152) = 0u;
    *(_OWORD *)(v265 + 168) = 0u;
    *(_OWORD *)(v265 + 184) = 0u;
    *(_OWORD *)(v265 + 200) = 0u;
    *(_OWORD *)(v265 + 216) = 0u;
    *(_OWORD *)(v265 + 232) = 0u;
    *(_QWORD *)(v265 + 248) = 0;
    *(_OWORD *)(v265 + 56) = 0u;
    v266 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v265 + 56), 0);
    if ((_DWORD)v266)
      geo::read_write_lock::logFailure(v266, (uint64_t)"initialization", v267);
    v268 = malloc_create_zone(0, 0);
    *(_QWORD *)(v265 + 48) = v268;
    malloc_set_zone_name(v268, "VectorKitLabels");
    *(_QWORD *)(v265 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    *((_QWORD *)v4 + 299) = v265;
    v1 = this;
  }
  v273 = *((_QWORD *)v4 + 299);
  v16 = (_QWORD *)*((_QWORD *)v1 + 9);
  v17 = (_QWORD *)*((_QWORD *)v1 + 10);
  if (v16 != v17)
  {
    v18 = 0;
    v19 = 0;
    v276 = 0;
    while (1)
    {
      v20 = *v16;
      if (*(_BYTE *)(*v16 + 820) == 2)
        break;
LABEL_18:
      v16 += 2;
      if (v16 == v17)
        goto LABEL_95;
    }
    if (*(_BYTE *)(v20 + 1251))
    {
LABEL_88:
      v63 = *(unsigned __int8 *)(v20 + 1252);
      *(_BYTE *)(v20 + 1252) = 1;
      if (!v63)
      {
        md::Label::clearAnimation((md::Label *)v20);
        if (!*(_BYTE *)(v20 + 1283))
        {
          v64 = *(_QWORD *)(v20 + 272);
          if (v64)
            *(_BYTE *)(v64 + 560) = 1;
        }
      }
      goto LABEL_18;
    }
    if ((unint64_t)v19 >= v276)
    {
      v24 = (v19 - v18) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        abort();
      v26 = v276 - (_QWORD)v18;
      if ((uint64_t)(v276 - (_QWORD)v18) >> 3 > v25)
        v25 = (uint64_t)(v276 - (_QWORD)v18) >> 3;
      if (v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v273 + 16))(v273, 16 * v27, 8);
        v29 = (char *)(v28 + 16 * v24);
        v276 = v28 + 16 * v27;
        if (v28)
        {
          v30 = *(_OWORD *)v16;
          *(_OWORD *)v29 = *(_OWORD *)v16;
          if (*((_QWORD *)&v30 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
        }
      }
      else
      {
        v276 = 0;
        v29 = (char *)(16 * v24);
      }
      v33 = v29;
      if (v19 != v18)
      {
        v34 = v19;
        v33 = v29;
        do
        {
          v35 = *((_OWORD *)v34 - 1);
          v34 -= 16;
          *((_OWORD *)v33 - 1) = v35;
          v33 -= 16;
          *(_QWORD *)v34 = 0;
          *((_QWORD *)v34 + 1) = 0;
        }
        while (v34 != v18);
        do
        {
          v36 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          v19 -= 16;
        }
        while (v19 != v18);
      }
      v19 = v29 + 16;
      if (v18)
        (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v273 + 40))(v273, v18, v26);
      v18 = v33;
    }
    else
    {
      if (v19)
      {
        v21 = v16[1];
        *(_QWORD *)v19 = v20;
        *((_QWORD *)v19 + 1) = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
      }
      v19 += 16;
    }
    if (!*(_BYTE *)(*v16 + 1251))
      *(_BYTE *)(*v16 + 1251) = 1;
    v39 = (_QWORD *)*((_QWORD *)this + 14);
    v40 = *((_QWORD *)this + 15);
    if ((unint64_t)v39 < v40)
    {
      if (v39)
      {
        v41 = v16[1];
        *v39 = *v16;
        v39[1] = v41;
        if (v41)
        {
          v42 = (unint64_t *)(v41 + 8);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
      }
      v44 = v39 + 2;
      goto LABEL_87;
    }
    v45 = ((uint64_t)v39 - *v272) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      abort();
    v47 = v40 - *v272;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      v49 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 16 * v48, 8);
      v50 = (_OWORD *)(v49 + 16 * v45);
      v51 = v49 + 16 * v48;
      if (v49)
      {
        v52 = *(_OWORD *)v16;
        *v50 = *(_OWORD *)v16;
        if (*((_QWORD *)&v52 + 1))
        {
          v53 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
      }
    }
    else
    {
      v51 = 0;
      v50 = (_OWORD *)(16 * v45);
    }
    v44 = v50 + 1;
    v55 = (_QWORD *)*((_QWORD *)this + 13);
    v56 = (_QWORD *)*((_QWORD *)this + 14);
    if (v56 == v55)
    {
      *((_QWORD *)this + 13) = v50;
      *((_QWORD *)this + 14) = v44;
      v59 = *((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v51;
      if (!v56)
        goto LABEL_87;
    }
    else
    {
      do
      {
        v57 = *((_OWORD *)v56 - 1);
        v56 -= 2;
        *--v50 = v57;
        *v56 = 0;
        v56[1] = 0;
      }
      while (v56 != v55);
      v56 = (_QWORD *)*((_QWORD *)this + 13);
      v58 = (_QWORD *)*((_QWORD *)this + 14);
      *((_QWORD *)this + 13) = v50;
      *((_QWORD *)this + 14) = v44;
      v59 = *((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v51;
      if (v58 != v56)
      {
        v269 = v59;
        do
        {
          v60 = (std::__shared_weak_count *)*(v58 - 1);
          if (v60)
          {
            v61 = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v58 -= 2;
        }
        while (v58 != v56);
        v59 = v269;
      }
      if (!v56)
        goto LABEL_87;
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v56, v59 - (_QWORD)v56);
LABEL_87:
    *((_QWORD *)this + 14) = v44;
    v20 = *v16;
    goto LABEL_88;
  }
  v18 = 0;
  v19 = 0;
  v276 = 0;
LABEL_95:
  v65 = v274;
  if (v274 == v7)
  {
    v66 = 0;
  }
  else
  {
    v66 = 0;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v65 + 1254))
      {
        v67 = *(__int128 **)(v2 + 576);
        v68 = *(__int128 **)(v2 + 584);
        if (v67 != v68)
        {
          while (*(_QWORD *)v67 != *(_QWORD *)v65)
          {
            if (++v67 == v68)
            {
              v67 = *(__int128 **)(v2 + 584);
              break;
            }
          }
        }
        v69 = v67 + 1;
        if (v67 == v68 || v69 == v68)
        {
          v71 = v67;
        }
        else
        {
          v71 = v67;
          do
          {
            v72 = v69;
            v73 = *((_QWORD *)v67 + 2);
            if (v73 != *(_QWORD *)v65)
            {
              v74 = *((_QWORD *)v67 + 3);
              *(_QWORD *)v72 = 0;
              *((_QWORD *)v72 + 1) = 0;
              v75 = (std::__shared_weak_count *)*((_QWORD *)v71 + 1);
              *(_QWORD *)v71 = v73;
              *((_QWORD *)v71 + 1) = v74;
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              ++v71;
            }
            v69 = v72 + 1;
            v67 = v72;
          }
          while (v72 + 1 != v68);
          v68 = *(__int128 **)(v2 + 584);
        }
        std::vector<std::shared_ptr<md::Label>,geo::StdAllocator<std::shared_ptr<md::Label>,mdm::Allocator>>::erase(v2 + 576, v71, v68);
        v66 = 1;
      }
      v65 += 16;
    }
    while (v65 != v7);
  }
  if (v18 != v19)
  {
    v78 = v18;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v78 + 1254))
      {
        v80 = *(_QWORD **)(v2 + 584);
        if ((unint64_t)v80 >= *(_QWORD *)(v2 + 592))
        {
          v79 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(v2 + 576, (__int128 *)v78);
        }
        else
        {
          if (v80)
          {
            v81 = *((_QWORD *)v78 + 1);
            *v80 = *(_QWORD *)v78;
            v80[1] = v81;
            if (v81)
            {
              v82 = (unint64_t *)(v81 + 8);
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
          }
          v79 = v80 + 2;
        }
        *(_QWORD *)(v2 + 584) = v79;
        v66 = 1;
      }
      v78 += 16;
    }
    while (v78 != v19);
  }
  v84 = this;
  if ((v66 & 1) != 0)
    goto LABEL_133;
  v85 = *(_QWORD *)(v2 + 576);
  v86 = *(_QWORD *)(v2 + 584);
  if (v85 != v86)
  {
    while (!*(_BYTE *)(*(_QWORD *)v85 + 1286))
    {
      v85 += 16;
      if (v85 == v86)
        goto LABEL_137;
    }
LABEL_133:
    ++*(_DWORD *)(v2 + 748);
  }
LABEL_137:
  if (*(_DWORD *)(v2 + 744) >= 0x14u)
  {
    *(_DWORD *)(v2 + 744) = 0;
    md::LabelPool::pruneCustomFeatureLabels(v2);
  }
  if (v18)
  {
    for (; v19 != v18; v19 -= 16)
    {
      v87 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
    }
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v273 + 40))(v273, v18, v276 - (_QWORD)v18);
  }
  if (v274)
  {
    if (v274 != v7)
    {
      do
      {
        v90 = (std::__shared_weak_count *)*((_QWORD *)v7 - 1);
        if (v90)
        {
          v91 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v7 -= 16;
      }
      while (v7 != v274);
      v7 = v274;
    }
    (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v270 + 40))(v270, v7, v271 - v7);
  }
  v93 = (uint64_t *)*((_QWORD *)this + 13);
  v94 = (uint64_t *)*((_QWORD *)this + 14);
  if (v93 != v94)
  {
    v95 = &jpt_19F23F810;
    do
    {
      v96 = *v93;
      v97 = *v93 + 840;
      v98 = *((_QWORD *)v84 + 3);
      if (*(_BYTE *)(*v93 + 1283))
      {
        if (!*(_BYTE *)(v96 + 1285))
        {
          v99 = *(_QWORD *)(v96 + 296);
          if (!v99 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v99 + 624))(v99))
          {
            *(_BYTE *)(v96 + 1283) = 0;
            *(_BYTE *)(v96 + 1286) = *(_BYTE *)(v96 + 1254);
            v100 = *(_BYTE *)(v96 + 820) == 2 || *(_BYTE *)(v96 + 834) != 0;
            v101 = *(_BYTE **)(v96 + 264);
            v101[560] = v100;
            v102 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v101 + 96))(v101);
            if (*(_BYTE *)(v96 + 1082))
            {
              *(_BYTE *)(v96 + 1082) = 0;
              atomic_store(0, (unsigned __int8 *)(v96 + 1243));
            }
            if (*(_BYTE *)(v96 + 1081))
            {
              *(_BYTE *)(v96 + 1081) = 0;
              atomic_store(0, (unsigned __int8 *)(v96 + 1244));
              *(_DWORD *)(v96 + 1120) = 0;
              *(float *)(v96 + 1124) = (*(float (**)(uint64_t, float))(v96 + 1144))(v102, 0.0);
              md::Label::updateStateMachineForDisplay(v96, 8, *(_BYTE *)(v96 + 1073), 0);
            }
            v103 = *(_QWORD *)(v96 + 296);
            *(_QWORD *)(v96 + 296) = 0;
            if (v103)
              (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
            v104 = *(_QWORD *)(v96 + 280);
            *(_QWORD *)(v96 + 280) = 0;
            if (v104)
              (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
            v105 = *(md::LabelAnimator **)(v96 + 1184);
            if (v105)
            {
              *(_QWORD *)(v96 + 1184) = 0;
              md::LabelAnimator::~LabelAnimator(v105);
              MEMORY[0x1A1AF4E00]();
              v106 = *(_QWORD *)(v96 + 272);
              if (v106)
                (*(void (**)(uint64_t))(*(_QWORD *)v106 + 192))(v106);
            }
            if (*(_BYTE *)(v96 + 833))
            {
              *(_BYTE *)(v96 + 833) = 0;
              atomic_store(1u, (unsigned __int8 *)(v96 + 1243));
            }
            else if (*(_BYTE *)(v96 + 834))
            {
              *(_BYTE *)(v96 + 834) = 0;
              *(_BYTE *)(v96 + 1082) = 1;
            }
            v109 = *(_QWORD *)(v96 + 688);
            v110 = *(_QWORD *)(v96 + 696);
            if (v110)
            {
              v111 = (unint64_t *)(v110 + 8);
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
            *(_QWORD *)(v96 + 1008) = v109;
            v113 = *(std::__shared_weak_count **)(v96 + 1016);
            *(_QWORD *)(v96 + 1016) = v110;
            if (v113)
            {
              v114 = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            *(_BYTE *)(v96 + 1247) = 1;
            v116 = atomic_load((unsigned __int8 *)(v96 + 1240));
            if ((v116 & 1) == 0)
              *(_BYTE *)(v96 + 1220) = *(_BYTE *)(*(_QWORD *)(v96 + 264) + 561);
            if (!*(_BYTE *)(v98 + 3382) || *(_BYTE *)(v96 + 1255))
              *(_BYTE *)(v96 + 1287) = 1;
            if (!*(_BYTE *)(v96 + 1072))
            {
              v117 = *(_QWORD *)(v96 + 272);
              *(_QWORD *)(v96 + 272) = 0;
              if (v117)
                v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
              if (*(_BYTE *)(v96 + 1082))
              {
                *(_BYTE *)(v96 + 1082) = 0;
                atomic_store(0, (unsigned __int8 *)(v96 + 1243));
              }
              if (*(_BYTE *)(v96 + 1081))
              {
                *(_BYTE *)(v96 + 1081) = 0;
                atomic_store(0, (unsigned __int8 *)(v96 + 1244));
                *(_DWORD *)(v96 + 1120) = 0;
                *(float *)(v96 + 1124) = (*(float (**)(uint64_t, float))(v96 + 1144))(v117, 0.0);
                md::Label::updateStateMachineForDisplay(v96, 8, *(_BYTE *)(v96 + 1073), 0);
              }
              v118 = *(_QWORD *)(v96 + 296);
              *(_QWORD *)(v96 + 296) = 0;
              if (v118)
                (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
              v119 = *(_QWORD *)(v96 + 280);
              *(_QWORD *)(v96 + 280) = 0;
              if (v119)
                (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
              if (*(_BYTE *)(v96 + 1287) == 2)
                *(_BYTE *)(v96 + 1287) = 1;
            }
            if (*(_BYTE *)(v98 + 3375))
            {
              v120 = *(unsigned __int8 *)(v96 + 1287);
LABEL_234:
              switch(v120)
              {
                case 0:
                case 1:
                  goto LABEL_235;
                case 2:
                  v136 = *(_QWORD *)(v96 + 296);
                  if (v136 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v136 + 680))(v136))
                  {
                    v137 = v95;
                  }
                  else
                  {
                    v159 = *(_QWORD *)(v96 + 272);
                    if (!v159)
                    {
                      if ((v160 & 1) == 0
                      {
                        v226 = operator new();
                        *(_QWORD *)(v226 + 16) = 0x5ED09DD50000000FLL;
                        *(_QWORD *)(v226 + 24) = "VectorKitLabels";
                        *(_OWORD *)(v226 + 32) = xmmword_19FFB2E80;
                        *(_QWORD *)v226 = &off_1E42B5668;
                        *(_QWORD *)(v226 + 8) = "VectorKitLabels";
                        *(_OWORD *)(v226 + 72) = 0u;
                        *(_OWORD *)(v226 + 88) = 0u;
                        *(_OWORD *)(v226 + 104) = 0u;
                        *(_OWORD *)(v226 + 120) = 0u;
                        *(_OWORD *)(v226 + 136) = 0u;
                        *(_OWORD *)(v226 + 152) = 0u;
                        *(_OWORD *)(v226 + 168) = 0u;
                        *(_OWORD *)(v226 + 184) = 0u;
                        *(_OWORD *)(v226 + 200) = 0u;
                        *(_OWORD *)(v226 + 216) = 0u;
                        *(_OWORD *)(v226 + 232) = 0u;
                        *(_QWORD *)(v226 + 248) = 0;
                        *(_OWORD *)(v226 + 56) = 0u;
                        v227 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v226 + 56), 0);
                        if ((_DWORD)v227)
                          geo::read_write_lock::logFailure(v227, (uint64_t)"initialization", v228);
                        v229 = malloc_create_zone(0, 0);
                        *(_QWORD *)(v226 + 48) = v229;
                        malloc_set_zone_name(v229, "VectorKitLabels");
                        *(_QWORD *)(v226 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                        mdm::Allocator::instance(void)::alloc = v226;
                      }
                      v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 16))(mdm::Allocator::instance(void)::alloc, 576, 8);
                      bzero((void *)(v159 + 8), 0x238uLL);
                      *(_DWORD *)(v159 + 8) = 1065353216;
                      *(_QWORD *)(v159 + 24) = v159;
                      *(_OWORD *)(v159 + 32) = 0u;
                      *(_OWORD *)(v159 + 48) = 0u;
                      *(_OWORD *)(v159 + 72) = xmmword_19FFB2E30;
                      *(_QWORD *)(v159 + 64) = 0;
                      *(_QWORD *)(v159 + 88) = 1065353216;
                      *(_DWORD *)(v159 + 96) = 1065353216;
                      *(_QWORD *)(v159 + 108) = 0;
                      *(_QWORD *)(v159 + 100) = 0;
                      *(_DWORD *)(v159 + 116) = 0;
                      *(_OWORD *)(v159 + 120) = xmmword_19FFB2E30;
                      *(_OWORD *)(v159 + 136) = xmmword_19FFB2E30;
                      *(_OWORD *)(v159 + 152) = xmmword_19FFB2E30;
                      *(_OWORD *)(v159 + 168) = xmmword_19FFB3480;
                      *(_QWORD *)(v159 + 184) = 0;
                      *(_QWORD *)(v159 + 192) = 0;
                      *(_BYTE *)(v159 + 200) = 0;
                      *(_OWORD *)(v159 + 232) = 0u;
                      *(_OWORD *)(v159 + 248) = 0u;
                      *(_OWORD *)(v159 + 257) = 0u;
                      *(_OWORD *)(v159 + 280) = xmmword_19FFB3580;
                      *(_OWORD *)(v159 + 296) = xmmword_19FFB3590;
                      *(_OWORD *)(v159 + 312) = xmmword_19FFB2E30;
                      *(_QWORD *)(v159 + 328) = 1065353216;
                      *(_DWORD *)(v159 + 336) = 1065353216;
                      *(_DWORD *)(v159 + 356) = 0;
                      *(_QWORD *)(v159 + 340) = 0;
                      *(_QWORD *)(v159 + 348) = 0;
                      *(_OWORD *)(v159 + 360) = xmmword_19FFB2E30;
                      *(_OWORD *)(v159 + 376) = xmmword_19FFB2E30;
                      *(_OWORD *)(v159 + 392) = xmmword_19FFB2E30;
                      *(_OWORD *)(v159 + 408) = xmmword_19FFB3480;
                      *(_QWORD *)(v159 + 424) = 0;
                      *(_QWORD *)(v159 + 432) = 0;
                      *(_BYTE *)(v159 + 440) = 0;
                      *(_OWORD *)(v159 + 472) = 0u;
                      *(_OWORD *)(v159 + 488) = 0u;
                      *(_OWORD *)(v159 + 497) = 0u;
                      *(_OWORD *)(v159 + 520) = xmmword_19FFB3580;
                      *(_DWORD *)(v159 + 536) = 1065353216;
                      *(_WORD *)(v159 + 556) = 512;
                      *(_QWORD *)(v159 + 540) = 0;
                      *(_QWORD *)(v159 + 548) = 0;
                      *(_BYTE *)(v159 + 562) = 0;
                      *(_DWORD *)(v159 + 558) = 0;
                      *(_WORD *)(v159 + 563) = -1;
                      *(_QWORD *)v159 = off_1E428E118;
                      v161 = *(_QWORD *)(v96 + 272);
                      *(_QWORD *)(v96 + 272) = v159;
                      if (v161)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
                        v159 = *(_QWORD *)(v96 + 272);
                      }
                    }
                    v137 = v95;
                    v162 = *(_QWORD *)(v96 + 280);
                    *(_QWORD *)(v96 + 272) = 0;
                    *(_QWORD *)(v96 + 280) = v159;
                    if (!v162)
                    {
                      v165 = *(_QWORD *)(v96 + 264);
                      *(_QWORD *)(v96 + 264) = 0;
                      *(_QWORD *)(v96 + 272) = v165;
                      goto LABEL_288;
                    }
                    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
                  }
                  v164 = *(_QWORD *)(v96 + 264);
                  v163 = *(_QWORD *)(v96 + 272);
                  *(_QWORD *)(v96 + 264) = 0;
                  *(_QWORD *)(v96 + 272) = v164;
                  if (v163)
                    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
LABEL_288:
                  v166 = *(_QWORD *)(v96 + 272);
                  v167 = *(_QWORD *)(v96 + 280);
                  v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v166 + 224))(v166);
                  if (v168 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v167 + 224))(v167)
                    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v166 + 224))(v166)
                    || !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v166 + 232))(v166, v167))
                  {
                    v95 = v137;
                    if ((v169 & 1) == 0
                    {
                      v210 = operator new();
                      *(_QWORD *)(v210 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v210 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v210 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v210 = &off_1E42B5668;
                      *(_QWORD *)(v210 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v210 + 72) = 0u;
                      *(_OWORD *)(v210 + 88) = 0u;
                      *(_OWORD *)(v210 + 104) = 0u;
                      *(_OWORD *)(v210 + 120) = 0u;
                      *(_OWORD *)(v210 + 136) = 0u;
                      *(_OWORD *)(v210 + 152) = 0u;
                      *(_OWORD *)(v210 + 168) = 0u;
                      *(_OWORD *)(v210 + 184) = 0u;
                      *(_OWORD *)(v210 + 200) = 0u;
                      *(_OWORD *)(v210 + 216) = 0u;
                      *(_OWORD *)(v210 + 232) = 0u;
                      *(_QWORD *)(v210 + 248) = 0;
                      *(_OWORD *)(v210 + 56) = 0u;
                      v211 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v210 + 56), 0);
                      if ((_DWORD)v211)
                        geo::read_write_lock::logFailure(v211, (uint64_t)"initialization", v212);
                      v213 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v210 + 48) = v213;
                      malloc_set_zone_name(v213, "VectorKitLabels");
                      *(_QWORD *)(v210 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v210;
                    }
                    v150 = (md::CrossFadeLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 640, 8);
                    md::CrossFadeLabelPart::CrossFadeLabelPart(v150, *(md::LabelPart **)(v96 + 280), *(md::LabelPart **)(v96 + 272), 0);
                    *(_QWORD *)v150 = off_1E42961C8;
                    goto LABEL_299;
                  }
                  v84 = this;
                  if (*(_BYTE *)(v96 + 1082))
                  {
                    *(_BYTE *)(v96 + 1082) = 0;
                    atomic_store(0, (unsigned __int8 *)(v96 + 1243));
                  }
                  v95 = v137;
                  if (*(_BYTE *)(v96 + 1081))
                  {
                    *(_BYTE *)(v96 + 1081) = 0;
                    atomic_store(0, (unsigned __int8 *)(v96 + 1244));
                    *(_DWORD *)(v96 + 1120) = 0;
                    *(float *)(v96 + 1124) = (*(float (**)(float))(v96 + 1144))(0.0);
                    md::Label::updateStateMachineForDisplay(v96, 8, *(_BYTE *)(v96 + 1073), 0);
                  }
                  v128 = *(_QWORD *)(v96 + 296);
                  *(_QWORD *)(v96 + 296) = 0;
                  if (v128)
                    goto LABEL_242;
                  goto LABEL_243;
                case 3:
                case 4:
                  v130 = *(_QWORD *)(v96 + 272);
                  if (!v130)
                  {
                    if ((v131 & 1) == 0
                    {
                      v214 = operator new();
                      *(_QWORD *)(v214 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v214 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v214 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v214 = &off_1E42B5668;
                      *(_QWORD *)(v214 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v214 + 72) = 0u;
                      *(_OWORD *)(v214 + 88) = 0u;
                      *(_OWORD *)(v214 + 104) = 0u;
                      *(_OWORD *)(v214 + 120) = 0u;
                      *(_OWORD *)(v214 + 136) = 0u;
                      *(_OWORD *)(v214 + 152) = 0u;
                      *(_OWORD *)(v214 + 168) = 0u;
                      *(_OWORD *)(v214 + 184) = 0u;
                      *(_OWORD *)(v214 + 200) = 0u;
                      *(_OWORD *)(v214 + 216) = 0u;
                      *(_OWORD *)(v214 + 232) = 0u;
                      *(_QWORD *)(v214 + 248) = 0;
                      *(_OWORD *)(v214 + 56) = 0u;
                      v215 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v214 + 56), 0);
                      if ((_DWORD)v215)
                        geo::read_write_lock::logFailure(v215, (uint64_t)"initialization", v216);
                      v217 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v214 + 48) = v217;
                      malloc_set_zone_name(v217, "VectorKitLabels");
                      *(_QWORD *)(v214 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v214;
                    }
                    v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 576, 8);
                    bzero((void *)(v130 + 8), 0x238uLL);
                    *(_DWORD *)(v130 + 8) = 1065353216;
                    *(_QWORD *)(v130 + 24) = v130;
                    *(_OWORD *)(v130 + 32) = 0u;
                    *(_OWORD *)(v130 + 48) = 0u;
                    *(_OWORD *)(v130 + 72) = xmmword_19FFB2E30;
                    *(_QWORD *)(v130 + 64) = 0;
                    *(_QWORD *)(v130 + 88) = 1065353216;
                    *(_DWORD *)(v130 + 96) = 1065353216;
                    *(_QWORD *)(v130 + 108) = 0;
                    *(_QWORD *)(v130 + 100) = 0;
                    *(_DWORD *)(v130 + 116) = 0;
                    *(_OWORD *)(v130 + 120) = xmmword_19FFB2E30;
                    *(_OWORD *)(v130 + 136) = xmmword_19FFB2E30;
                    *(_OWORD *)(v130 + 152) = xmmword_19FFB2E30;
                    *(_OWORD *)(v130 + 168) = xmmword_19FFB3480;
                    *(_QWORD *)(v130 + 184) = 0;
                    *(_QWORD *)(v130 + 192) = 0;
                    *(_BYTE *)(v130 + 200) = 0;
                    *(_OWORD *)(v130 + 232) = 0u;
                    *(_OWORD *)(v130 + 248) = 0u;
                    *(_OWORD *)(v130 + 257) = 0u;
                    *(_OWORD *)(v130 + 280) = xmmword_19FFB3580;
                    *(_OWORD *)(v130 + 296) = xmmword_19FFB3590;
                    *(_OWORD *)(v130 + 312) = xmmword_19FFB2E30;
                    *(_QWORD *)(v130 + 328) = 1065353216;
                    *(_DWORD *)(v130 + 336) = 1065353216;
                    *(_DWORD *)(v130 + 356) = 0;
                    *(_QWORD *)(v130 + 340) = 0;
                    *(_QWORD *)(v130 + 348) = 0;
                    *(_OWORD *)(v130 + 360) = xmmword_19FFB2E30;
                    *(_OWORD *)(v130 + 376) = xmmword_19FFB2E30;
                    *(_OWORD *)(v130 + 392) = xmmword_19FFB2E30;
                    *(_OWORD *)(v130 + 408) = xmmword_19FFB3480;
                    *(_QWORD *)(v130 + 424) = 0;
                    *(_QWORD *)(v130 + 432) = 0;
                    *(_BYTE *)(v130 + 440) = 0;
                    *(_OWORD *)(v130 + 472) = 0u;
                    *(_OWORD *)(v130 + 488) = 0u;
                    *(_OWORD *)(v130 + 497) = 0u;
                    *(_OWORD *)(v130 + 520) = xmmword_19FFB3580;
                    *(_DWORD *)(v130 + 536) = 1065353216;
                    *(_WORD *)(v130 + 556) = 512;
                    *(_QWORD *)(v130 + 540) = 0;
                    *(_QWORD *)(v130 + 548) = 0;
                    *(_BYTE *)(v130 + 562) = 0;
                    *(_DWORD *)(v130 + 558) = 0;
                    *(_WORD *)(v130 + 563) = -1;
                    *(_QWORD *)v130 = off_1E428E118;
                    v132 = *(_QWORD *)(v96 + 272);
                    *(_QWORD *)(v96 + 272) = v130;
                    if (v132)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
                      v130 = *(_QWORD *)(v96 + 272);
                    }
                  }
                  v133 = *(_QWORD *)(v96 + 280);
                  *(_QWORD *)(v96 + 272) = 0;
                  *(_QWORD *)(v96 + 280) = v130;
                  if (v133)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
                    v135 = *(_QWORD *)(v96 + 264);
                    v134 = *(_QWORD *)(v96 + 272);
                    *(_QWORD *)(v96 + 264) = 0;
                    *(_QWORD *)(v96 + 272) = v135;
                    if (v134)
                      (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
                  }
                  else
                  {
                    v151 = *(_QWORD *)(v96 + 264);
                    *(_QWORD *)(v96 + 264) = 0;
                    *(_QWORD *)(v96 + 272) = v151;
                  }
                  v152 = *(unsigned __int8 *)(v96 + 1287);
                  if ((v153 & 1) == 0
                  {
                    v198 = operator new();
                    *(_QWORD *)(v198 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v198 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v198 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v198 = &off_1E42B5668;
                    *(_QWORD *)(v198 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v198 + 72) = 0u;
                    *(_OWORD *)(v198 + 88) = 0u;
                    *(_OWORD *)(v198 + 104) = 0u;
                    *(_OWORD *)(v198 + 120) = 0u;
                    *(_OWORD *)(v198 + 136) = 0u;
                    *(_OWORD *)(v198 + 152) = 0u;
                    *(_OWORD *)(v198 + 168) = 0u;
                    *(_OWORD *)(v198 + 184) = 0u;
                    *(_OWORD *)(v198 + 200) = 0u;
                    *(_OWORD *)(v198 + 216) = 0u;
                    *(_OWORD *)(v198 + 232) = 0u;
                    *(_QWORD *)(v198 + 248) = 0;
                    *(_OWORD *)(v198 + 56) = 0u;
                    v199 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v198 + 56), 0);
                    if ((_DWORD)v199)
                      geo::read_write_lock::logFailure(v199, (uint64_t)"initialization", v200);
                    v201 = malloc_create_zone(0, 0);
                    *(_QWORD *)(v198 + 48) = v201;
                    malloc_set_zone_name(v201, "VectorKitLabels");
                    *(_QWORD *)(v198 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v198;
                  }
                  v154 = *(uint64_t (**)(void))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16);
                  if (v152 != 3)
                  {
                    v155 = v154();
                    md::AnimatedCrossFadeLabelPart::AnimatedCrossFadeLabelPart(v155, (md::LabelManager *)v98, (md::Label *)v96, *(unsigned __int8 *)(v96 + 1288), *(md::LabelPart **)(v96 + 280), *(md::LabelPart **)(v96 + 272), 0);
                    v156 = *(_QWORD *)(v96 + 296);
                    *(_QWORD *)(v96 + 296) = v155;
                    if (v156)
                      (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
                    v157 = *(_QWORD *)(v96 + 1192);
                    v84 = this;
                    if (v157)
                    {
                      v158 = *(unsigned __int8 *)(v157 + 52);
                      if (v158 == 1)
                      {
                        *(_BYTE *)(v96 + 1084) = 1;
                        goto LABEL_301;
                      }
                      if (v158 == 2)
                      {
                        *(_BYTE *)(v96 + 1084) = *(double *)(*(_QWORD *)(*(_QWORD *)v157 + 432) + 336)
                                               - *(double *)(v157 + 104) < 0.5;
                        goto LABEL_301;
                      }
                      LOBYTE(v157) = 0;
                    }
                    *(_BYTE *)(v96 + 1084) = v157;
                    goto LABEL_301;
                  }
                  v150 = (md::CrossFadeLabelPart *)v154();
                  md::CrossFadeLabelPart::CrossFadeLabelPart(v150, *(md::LabelPart **)(v96 + 280), *(md::LabelPart **)(v96 + 272), 0);
                  *(_QWORD *)v150 = off_1E429F518;
                  *((_BYTE *)v150 + 638) = 1;
LABEL_299:
                  v129 = *(_QWORD *)(v96 + 296);
                  *(_QWORD *)(v96 + 296) = v150;
                  v84 = this;
                  if (!v129)
                    goto LABEL_301;
                  break;
                case 5:
                  if (*(_QWORD *)(v96 + 272) && (*(_BYTE *)(v96 + 1072) & 0xFD) == 1)
                  {
                    if ((v138 & 1) == 0
                    {
                      v218 = operator new();
                      *(_QWORD *)(v218 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v218 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v218 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v218 = &off_1E42B5668;
                      *(_QWORD *)(v218 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v218 + 72) = 0u;
                      *(_OWORD *)(v218 + 88) = 0u;
                      *(_OWORD *)(v218 + 104) = 0u;
                      *(_OWORD *)(v218 + 120) = 0u;
                      *(_OWORD *)(v218 + 136) = 0u;
                      *(_OWORD *)(v218 + 152) = 0u;
                      *(_OWORD *)(v218 + 168) = 0u;
                      *(_OWORD *)(v218 + 184) = 0u;
                      *(_OWORD *)(v218 + 200) = 0u;
                      *(_OWORD *)(v218 + 216) = 0u;
                      *(_OWORD *)(v218 + 232) = 0u;
                      *(_QWORD *)(v218 + 248) = 0;
                      *(_OWORD *)(v218 + 56) = 0u;
                      v219 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v218 + 56), 0);
                      if ((_DWORD)v219)
                        geo::read_write_lock::logFailure(v219, (uint64_t)"initialization", v220);
                      v221 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v218 + 48) = v221;
                      malloc_set_zone_name(v221, "VectorKitLabels");
                      *(_QWORD *)(v218 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v218;
                    }
                    v139 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 576, 8);
                    bzero((void *)(v139 + 8), 0x238uLL);
                    *(_DWORD *)(v139 + 8) = 1065353216;
                    *(_QWORD *)(v139 + 24) = v139;
                    *(_OWORD *)(v139 + 32) = 0u;
                    *(_OWORD *)(v139 + 48) = 0u;
                    *(_QWORD *)(v139 + 64) = 0;
                    *(_OWORD *)(v139 + 72) = xmmword_19FFB2E30;
                    *(_QWORD *)(v139 + 88) = 1065353216;
                    *(_DWORD *)(v139 + 96) = 1065353216;
                    *(_QWORD *)(v139 + 108) = 0;
                    *(_QWORD *)(v139 + 100) = 0;
                    *(_DWORD *)(v139 + 116) = 0;
                    *(_OWORD *)(v139 + 120) = xmmword_19FFB2E30;
                    *(_OWORD *)(v139 + 136) = xmmword_19FFB2E30;
                    *(_OWORD *)(v139 + 152) = xmmword_19FFB2E30;
                    *(_OWORD *)(v139 + 168) = xmmword_19FFB3480;
                    *(_QWORD *)(v139 + 184) = 0;
                    *(_QWORD *)(v139 + 192) = 0;
                    *(_BYTE *)(v139 + 200) = 0;
                    *(_OWORD *)(v139 + 232) = 0u;
                    *(_OWORD *)(v139 + 248) = 0u;
                    *(_OWORD *)(v139 + 257) = 0u;
                    *(_OWORD *)(v139 + 280) = xmmword_19FFB3580;
                    *(_OWORD *)(v139 + 296) = xmmword_19FFB3590;
                    *(_OWORD *)(v139 + 312) = xmmword_19FFB2E30;
                    *(_QWORD *)(v139 + 328) = 1065353216;
                    *(_DWORD *)(v139 + 336) = 1065353216;
                    *(_DWORD *)(v139 + 356) = 0;
                    *(_QWORD *)(v139 + 340) = 0;
                    *(_QWORD *)(v139 + 348) = 0;
                    *(_OWORD *)(v139 + 360) = xmmword_19FFB2E30;
                    *(_OWORD *)(v139 + 376) = xmmword_19FFB2E30;
                    *(_OWORD *)(v139 + 392) = xmmword_19FFB2E30;
                    *(_OWORD *)(v139 + 408) = xmmword_19FFB3480;
                    *(_QWORD *)(v139 + 424) = 0;
                    *(_QWORD *)(v139 + 432) = 0;
                    *(_BYTE *)(v139 + 440) = 0;
                    *(_OWORD *)(v139 + 472) = 0u;
                    *(_OWORD *)(v139 + 488) = 0u;
                    *(_OWORD *)(v139 + 497) = 0u;
                    *(_OWORD *)(v139 + 520) = xmmword_19FFB3580;
                    *(_DWORD *)(v139 + 536) = 1065353216;
                    *(_QWORD *)(v139 + 540) = 0;
                    *(_QWORD *)(v139 + 548) = 0;
                    *(_WORD *)(v139 + 556) = 512;
                    *(_BYTE *)(v139 + 562) = 0;
                    *(_DWORD *)(v139 + 558) = 0;
                    *(_WORD *)(v139 + 563) = -1;
                    *(_QWORD *)v139 = off_1E428E118;
                    if ((v140 & 1) == 0
                    {
                      v222 = operator new();
                      *(_QWORD *)(v222 + 16) = 0x5ED09DD50000000FLL;
                      *(_QWORD *)(v222 + 24) = "VectorKitLabels";
                      *(_OWORD *)(v222 + 32) = xmmword_19FFB2E80;
                      *(_QWORD *)v222 = &off_1E42B5668;
                      *(_QWORD *)(v222 + 8) = "VectorKitLabels";
                      *(_OWORD *)(v222 + 72) = 0u;
                      *(_OWORD *)(v222 + 88) = 0u;
                      *(_OWORD *)(v222 + 104) = 0u;
                      *(_OWORD *)(v222 + 120) = 0u;
                      *(_OWORD *)(v222 + 136) = 0u;
                      *(_OWORD *)(v222 + 152) = 0u;
                      *(_OWORD *)(v222 + 168) = 0u;
                      *(_OWORD *)(v222 + 184) = 0u;
                      *(_OWORD *)(v222 + 200) = 0u;
                      *(_OWORD *)(v222 + 216) = 0u;
                      *(_OWORD *)(v222 + 232) = 0u;
                      *(_QWORD *)(v222 + 248) = 0;
                      *(_OWORD *)(v222 + 56) = 0u;
                      v223 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v222 + 56), 0);
                      if ((_DWORD)v223)
                        geo::read_write_lock::logFailure(v223, (uint64_t)"initialization", v224);
                      v225 = malloc_create_zone(0, 0);
                      *(_QWORD *)(v222 + 48) = v225;
                      malloc_set_zone_name(v225, "VectorKitLabels");
                      *(_QWORD *)(v222 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                      mdm::Allocator::instance(void)::alloc = v222;
                    }
                    v95 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 744, 8);
                    v141 = *(unsigned __int8 *)(v96 + 1288);
                    v142 = *(md::LabelPart **)(v96 + 272);
                    *(_QWORD *)(v96 + 272) = 0;
                    md::AnimatedCrossFadeLabelPart::AnimatedCrossFadeLabelPart((uint64_t)v95, (md::LabelManager *)v98, (md::Label *)v96, v141, v142, (md::LabelPart *)v139, 1);
                    v143 = *(_QWORD *)(v96 + 304);
                    *(_QWORD *)(v96 + 304) = v95;
                    if (v143)
                      (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
                    *(_OWORD *)(v97 + 96) = *(_OWORD *)(v96 + 912);
                    *(_QWORD *)(v96 + 952) = *(_QWORD *)(v96 + 928);
                    *(_DWORD *)(v96 + 1060) = *(_DWORD *)(v96 + 1056);
                  }
                  if ((v144 & 1) == 0
                  {
                    v202 = operator new();
                    *(_QWORD *)(v202 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v202 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v202 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v202 = &off_1E42B5668;
                    *(_QWORD *)(v202 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v202 + 72) = 0u;
                    *(_OWORD *)(v202 + 88) = 0u;
                    *(_OWORD *)(v202 + 104) = 0u;
                    *(_OWORD *)(v202 + 120) = 0u;
                    *(_OWORD *)(v202 + 136) = 0u;
                    *(_OWORD *)(v202 + 152) = 0u;
                    *(_OWORD *)(v202 + 168) = 0u;
                    *(_OWORD *)(v202 + 184) = 0u;
                    *(_OWORD *)(v202 + 200) = 0u;
                    *(_OWORD *)(v202 + 216) = 0u;
                    *(_OWORD *)(v202 + 232) = 0u;
                    *(_QWORD *)(v202 + 248) = 0;
                    *(_OWORD *)(v202 + 56) = 0u;
                    v203 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v202 + 56), 0);
                    if ((_DWORD)v203)
                      geo::read_write_lock::logFailure(v203, (uint64_t)"initialization", v204);
                    v205 = malloc_create_zone(0, 0);
                    *(_QWORD *)(v202 + 48) = v205;
                    malloc_set_zone_name(v205, "VectorKitLabels");
                    *(_QWORD *)(v202 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v202;
                  }
                  v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 576, 8);
                  bzero((void *)(v145 + 8), 0x238uLL);
                  *(_DWORD *)(v145 + 8) = 1065353216;
                  *(_QWORD *)(v145 + 24) = v145;
                  *(_OWORD *)(v145 + 32) = 0u;
                  *(_OWORD *)(v145 + 48) = 0u;
                  *(_OWORD *)(v145 + 72) = xmmword_19FFB2E30;
                  *(_QWORD *)(v145 + 64) = 0;
                  *(_QWORD *)(v145 + 88) = 1065353216;
                  *(_DWORD *)(v145 + 96) = 1065353216;
                  *(_QWORD *)(v145 + 108) = 0;
                  *(_QWORD *)(v145 + 100) = 0;
                  *(_DWORD *)(v145 + 116) = 0;
                  *(_OWORD *)(v145 + 120) = xmmword_19FFB2E30;
                  *(_OWORD *)(v145 + 136) = xmmword_19FFB2E30;
                  *(_OWORD *)(v145 + 152) = xmmword_19FFB2E30;
                  *(_OWORD *)(v145 + 168) = xmmword_19FFB3480;
                  *(_QWORD *)(v145 + 184) = 0;
                  *(_QWORD *)(v145 + 192) = 0;
                  *(_BYTE *)(v145 + 200) = 0;
                  *(_OWORD *)(v145 + 232) = 0u;
                  *(_OWORD *)(v145 + 248) = 0u;
                  *(_OWORD *)(v145 + 257) = 0u;
                  *(_OWORD *)(v145 + 280) = xmmword_19FFB3580;
                  *(_OWORD *)(v145 + 296) = xmmword_19FFB3590;
                  *(_OWORD *)(v145 + 312) = xmmword_19FFB2E30;
                  *(_QWORD *)(v145 + 328) = 1065353216;
                  *(_DWORD *)(v145 + 336) = 1065353216;
                  *(_DWORD *)(v145 + 356) = 0;
                  *(_QWORD *)(v145 + 340) = 0;
                  *(_QWORD *)(v145 + 348) = 0;
                  *(_OWORD *)(v145 + 360) = xmmword_19FFB2E30;
                  *(_OWORD *)(v145 + 376) = xmmword_19FFB2E30;
                  *(_OWORD *)(v145 + 392) = xmmword_19FFB2E30;
                  *(_OWORD *)(v145 + 408) = xmmword_19FFB3480;
                  *(_QWORD *)(v145 + 424) = 0;
                  *(_QWORD *)(v145 + 432) = 0;
                  *(_BYTE *)(v145 + 440) = 0;
                  *(_OWORD *)(v145 + 472) = 0u;
                  *(_OWORD *)(v145 + 488) = 0u;
                  *(_OWORD *)(v145 + 497) = 0u;
                  *(_OWORD *)(v145 + 520) = xmmword_19FFB3580;
                  *(_DWORD *)(v145 + 536) = 1065353216;
                  *(_WORD *)(v145 + 556) = 512;
                  *(_QWORD *)(v145 + 540) = 0;
                  *(_QWORD *)(v145 + 548) = 0;
                  *(_BYTE *)(v145 + 562) = 0;
                  *(_DWORD *)(v145 + 558) = 0;
                  *(_WORD *)(v145 + 563) = -1;
                  *(_QWORD *)v145 = off_1E428E118;
                  v146 = *(_QWORD *)(v96 + 280);
                  *(_QWORD *)(v96 + 280) = v145;
                  if (v146)
                    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
                  v148 = *(_QWORD *)(v96 + 264);
                  v147 = *(_QWORD *)(v96 + 272);
                  *(_QWORD *)(v96 + 264) = 0;
                  *(_QWORD *)(v96 + 272) = v148;
                  if (v147)
                    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
                  if ((v149 & 1) == 0
                  {
                    v206 = operator new();
                    *(_QWORD *)(v206 + 16) = 0x5ED09DD50000000FLL;
                    *(_QWORD *)(v206 + 24) = "VectorKitLabels";
                    *(_OWORD *)(v206 + 32) = xmmword_19FFB2E80;
                    *(_QWORD *)v206 = &off_1E42B5668;
                    *(_QWORD *)(v206 + 8) = "VectorKitLabels";
                    *(_OWORD *)(v206 + 72) = 0u;
                    *(_OWORD *)(v206 + 88) = 0u;
                    *(_OWORD *)(v206 + 104) = 0u;
                    *(_OWORD *)(v206 + 120) = 0u;
                    *(_OWORD *)(v206 + 136) = 0u;
                    *(_OWORD *)(v206 + 152) = 0u;
                    *(_OWORD *)(v206 + 168) = 0u;
                    *(_OWORD *)(v206 + 184) = 0u;
                    *(_OWORD *)(v206 + 200) = 0u;
                    *(_OWORD *)(v206 + 216) = 0u;
                    *(_OWORD *)(v206 + 232) = 0u;
                    *(_QWORD *)(v206 + 248) = 0;
                    *(_OWORD *)(v206 + 56) = 0u;
                    v207 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v206 + 56), 0);
                    if ((_DWORD)v207)
                      geo::read_write_lock::logFailure(v207, (uint64_t)"initialization", v208);
                    v209 = malloc_create_zone(0, 0);
                    *(_QWORD *)(v206 + 48) = v209;
                    malloc_set_zone_name(v209, "VectorKitLabels");
                    *(_QWORD *)(v206 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                    mdm::Allocator::instance(void)::alloc = v206;
                  }
                  v150 = (md::CrossFadeLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 744, 8);
                  md::AnimatedCrossFadeLabelPart::AnimatedCrossFadeLabelPart((uint64_t)v150, (md::LabelManager *)v98, (md::Label *)v96, *(unsigned __int8 *)(v96 + 1288), *(md::LabelPart **)(v96 + 280), *(md::LabelPart **)(v96 + 272), 0);
                  goto LABEL_299;
                default:
                  goto LABEL_301;
              }
LABEL_300:
              (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
              goto LABEL_301;
            }
            v121 = *(_QWORD *)(v96 + 296);
            if (v121 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v121 + 680))(v121))
            {
              v122 = *(_QWORD *)(v96 + 296);
              if (v122 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v122 + 680))(v122))
              {
                if (*(_BYTE *)(v96 + 1082))
                {
                  *(_BYTE *)(v96 + 1082) = 0;
                  atomic_store(0, (unsigned __int8 *)(v96 + 1243));
                }
                if (*(_BYTE *)(v96 + 1081))
                {
                  *(_BYTE *)(v96 + 1081) = 0;
                  atomic_store(0, (unsigned __int8 *)(v96 + 1244));
                  *(_DWORD *)(v96 + 1120) = 0;
                  *(float *)(v96 + 1124) = (*(float (**)(float))(v96 + 1144))(0.0);
                  md::Label::updateStateMachineForDisplay(v96, 8, *(_BYTE *)(v96 + 1073), 0);
                }
                v123 = *(_QWORD *)(v96 + 296);
                *(_QWORD *)(v96 + 296) = 0;
                if (v123)
                  (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
                v124 = *(_QWORD *)(v96 + 280);
                *(_QWORD *)(v96 + 280) = 0;
                if (v124)
                  (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
              }
              v125 = *(_QWORD *)(v96 + 272);
              if (v125)
                (*(void (**)(uint64_t))(*(_QWORD *)v125 + 552))(v125);
            }
            v120 = *(unsigned __int8 *)(v96 + 1287);
            if (v120 != 2)
              goto LABEL_234;
            *(_BYTE *)(v96 + 1287) = 1;
LABEL_235:
            v127 = *(_QWORD *)(v96 + 264);
            v126 = *(_QWORD *)(v96 + 272);
            *(_QWORD *)(v96 + 264) = 0;
            *(_QWORD *)(v96 + 272) = v127;
            if (v126)
              v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
            if (*(_BYTE *)(v96 + 1082))
            {
              *(_BYTE *)(v96 + 1082) = 0;
              atomic_store(0, (unsigned __int8 *)(v96 + 1243));
            }
            if (*(_BYTE *)(v96 + 1081))
            {
              *(_BYTE *)(v96 + 1081) = 0;
              atomic_store(0, (unsigned __int8 *)(v96 + 1244));
              *(_DWORD *)(v96 + 1120) = 0;
              *(float *)(v96 + 1124) = (*(float (**)(uint64_t, float))(v96 + 1144))(v126, 0.0);
              md::Label::updateStateMachineForDisplay(v96, 8, *(_BYTE *)(v96 + 1073), 0);
            }
            v128 = *(_QWORD *)(v96 + 296);
            *(_QWORD *)(v96 + 296) = 0;
            if (v128)
LABEL_242:
              (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
LABEL_243:
            v129 = *(_QWORD *)(v96 + 280);
            *(_QWORD *)(v96 + 280) = 0;
            if (v129)
              goto LABEL_300;
          }
        }
      }
      else if (*(_BYTE *)(v96 + 820) != 2)
      {
        if (*(_BYTE *)(v96 + 834)
          || (v107 = atomic_load((unsigned __int8 *)(v96 + 1240)), (v107 & 1) == 0)
          && (v108 = atomic_load((unsigned __int8 *)(v96 + 1243)), (v108 & 1) != 0))
        {
          *(_BYTE *)(v96 + 1250) = 0;
          *(_BYTE *)(v96 + 834) = 0;
          *(_BYTE *)(v96 + 1252) = 0;
        }
      }
LABEL_301:
      *(_BYTE *)(v96 + 1085) = *(_BYTE *)(v96 + 836);
      *(_QWORD *)(v97 + 204) = *(_QWORD *)(v96 + 744);
      if (*(_BYTE *)(v96 + 752))
      {
        if (*(_QWORD *)(v98 + 3592))
        {
          v170 = *(_BYTE *)(v96 + 1278);
          if (v170)
            v170 = *(_DWORD *)(v96 + 104) == *(_DWORD *)(v98 + 3600);
        }
        else
        {
          v170 = 1;
        }
        *(_BYTE *)(v96 + 1076) = v170;
      }
      else
      {
        *(_BYTE *)(v96 + 1076) = 0;
      }
      *(_WORD *)(v96 + 1074) = *(_WORD *)(v96 + 822);
      if (*(_BYTE *)(v96 + 816))
        v171 = *(float *)(v96 + 812);
      else
        v171 = 1.0;
      *(float *)(v96 + 1064) = v171;
      *(_BYTE *)(v96 + 1080) = *(_BYTE *)(v96 + 827);
      v172 = *(_QWORD *)(v96 + 704);
      v173 = *(_QWORD *)(v96 + 712);
      if (v173)
      {
        v174 = (unint64_t *)(v173 + 8);
        do
          v175 = __ldxr(v174);
        while (__stxr(v175 + 1, v174));
      }
      *(_QWORD *)(v96 + 1024) = v172;
      v176 = *(std::__shared_weak_count **)(v96 + 1032);
      *(_QWORD *)(v96 + 1032) = v173;
      if (v176)
      {
        v177 = (unint64_t *)&v176->__shared_owners_;
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      *(_BYTE *)(v96 + 1078) |= *(_BYTE *)(v96 + 826);
      *(_BYTE *)(v96 + 826) = 0;
      *(_BYTE *)(v96 + 1083) = *(_BYTE *)(v96 + 835);
      v179 = *(_OWORD *)(v96 + 512);
      *(_OWORD *)v97 = *(_OWORD *)(v96 + 496);
      *(_OWORD *)(v97 + 16) = v179;
      v180 = *(_OWORD *)(v96 + 544);
      *(_OWORD *)(v97 + 32) = *(_OWORD *)(v96 + 528);
      *(_OWORD *)(v97 + 48) = v180;
      *(_QWORD *)(v96 + 904) = *(_QWORD *)(v96 + 560);
      *(_QWORD *)(v96 + 984) = *(_QWORD *)(v96 + 656);
      if (!*(_BYTE *)(v96 + 1284))
      {
        *(_OWORD *)(v96 + 912) = *(_OWORD *)(v96 + 568);
        *(_QWORD *)(v96 + 928) = *(_QWORD *)(v96 + 584);
        *(_DWORD *)(v96 + 1056) = *(_DWORD *)(v96 + 772);
      }
      *(_OWORD *)(v96 + 112) = *(_OWORD *)(v96 + 640);
      if (*(_BYTE *)(v96 + 1294))
      {
        *(_BYTE *)(v96 + 1294) = 0;
        v181 = *(_QWORD *)(v96 + 1000);
        if (*(_QWORD *)(v96 + 680))
        {
          if (!v181)
          {
            v181 = operator new();
            *(_OWORD *)v181 = 0u;
            *(_OWORD *)(v181 + 16) = 0u;
            *(_OWORD *)(v181 + 32) = 0u;
            v182 = *(_QWORD *)(v96 + 1000);
            *(_QWORD *)(v96 + 1000) = v181;
            if (v182)
            {
              MEMORY[0x1A1AF4E00](v182, 0x1000C40C179455ELL);
              v181 = *(_QWORD *)(v96 + 1000);
            }
          }
          v183 = *(_QWORD *)(v96 + 680);
          *(_QWORD *)v181 = *(_QWORD *)v183;
          *(_QWORD *)(v181 + 8) = *(_QWORD *)(v183 + 8);
          *(_QWORD *)(v181 + 16) = *(_QWORD *)(v183 + 16);
          *(_QWORD *)(v181 + 24) = *(_QWORD *)(v183 + 24);
          *(_QWORD *)(v181 + 32) = *(_QWORD *)(v183 + 32);
          *(_BYTE *)(v181 + 40) = *(_BYTE *)(v183 + 40);
        }
        else
        {
          *(_QWORD *)(v96 + 1000) = 0;
          if (v181)
            MEMORY[0x1A1AF4E00](v181, 0x1000C40C179455ELL);
        }
      }
      if (!*(_BYTE *)(v96 + 1293))
        goto LABEL_333;
      *(_BYTE *)(v96 + 1293) = 0;
      if (!*(_QWORD *)(v96 + 672))
      {
        v196 = *(_QWORD *)(v96 + 992);
        *(_QWORD *)(v96 + 992) = 0;
        if (!v196)
          goto LABEL_333;
LABEL_332:
        MEMORY[0x1A1AF4E00](v196, 0x1000C4015B1EB14);
        goto LABEL_333;
      }
      v184 = operator new();
      v185 = *(_QWORD *)(v96 + 672);
      v186 = *(_OWORD *)(v185 + 16);
      *(_OWORD *)v184 = *(_OWORD *)v185;
      *(_OWORD *)(v184 + 16) = v186;
      v187 = *(_OWORD *)(v185 + 32);
      v188 = *(_OWORD *)(v185 + 48);
      v189 = *(_OWORD *)(v185 + 80);
      *(_OWORD *)(v184 + 64) = *(_OWORD *)(v185 + 64);
      *(_OWORD *)(v184 + 80) = v189;
      *(_OWORD *)(v184 + 32) = v187;
      *(_OWORD *)(v184 + 48) = v188;
      v190 = *(_OWORD *)(v185 + 96);
      v191 = *(_OWORD *)(v185 + 112);
      v192 = *(_OWORD *)(v185 + 144);
      *(_OWORD *)(v184 + 128) = *(_OWORD *)(v185 + 128);
      *(_OWORD *)(v184 + 144) = v192;
      *(_OWORD *)(v184 + 96) = v190;
      *(_OWORD *)(v184 + 112) = v191;
      v193 = *(_OWORD *)(v185 + 160);
      v194 = *(_OWORD *)(v185 + 176);
      v195 = *(_OWORD *)(v185 + 192);
      *(_QWORD *)(v184 + 208) = *(_QWORD *)(v185 + 208);
      *(_OWORD *)(v184 + 176) = v194;
      *(_OWORD *)(v184 + 192) = v195;
      *(_OWORD *)(v184 + 160) = v193;
      v196 = *(_QWORD *)(v96 + 992);
      *(_QWORD *)(v96 + 992) = v184;
      if (v196)
        goto LABEL_332;
LABEL_333:
      v197 = *(_QWORD *)(v96 + 272);
      if (v197)
        (*(void (**)(uint64_t))(*(_QWORD *)v197 + 112))(v197);
      v93 += 2;
    }
    while (v93 != v94);
  }
}

void sub_19F241034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (!a16)
    _Unwind_Resume(exception_object);
  if (v18 != a16)
  {
    do
    {
      v20 = *(std::__shared_weak_count **)(v18 - 8);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v18 -= 16;
    }
    while (v18 != a16);
    v18 = a16;
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a10 + 40))(a10, v18, a11 - v18);
  _Unwind_Resume(exception_object);
}

float md::CurvedTextLabelPart::updateForDisplay(md::CurvedTextLabelPart *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  float result;

  v2 = *((_QWORD *)this + 76);
  v3 = *((_QWORD *)this + 77);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 90) = v2;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = v3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *((_DWORD *)this + 189) = *((_DWORD *)this + 161);
  *(_OWORD *)((char *)this + 809) = *(_OWORD *)((char *)this + 697);
  v9 = *((_OWORD *)this + 41);
  v10 = *((_OWORD *)this + 42);
  *((_OWORD *)this + 48) = v9;
  *(_DWORD *)((char *)this + 825) = *(_DWORD *)((char *)this + 713);
  *((_BYTE *)this + 829) = *((_BYTE *)this + 717);
  *((_OWORD *)this + 49) = v10;
  if (*(float *)&v9 > 0.0 && !*((_BYTE *)this + 565))
  {
    *((_DWORD *)this + 192) = 0;
    LODWORD(v9) = 0;
  }
  *((_DWORD *)this + 227) = v9;
  *((_BYTE *)this + 866) = *(float *)&v9 >= 0.0001;
  *(_DWORD *)(*((_QWORD *)this + 74) + 8) = *(_DWORD *)(*((_QWORD *)this + 72) + 8);
  if (*((_BYTE *)this + 1463))
  {
    *((_BYTE *)this + 1463) = 0;
    *((_BYTE *)this + 1331) = 1;
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 134) + 24))(*((_QWORD *)this + 134), (char *)this + 1264);
    *((_BYTE *)this + 1334) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 158) + 80))(*((_QWORD *)this + 158));
    if (!*((_BYTE *)this + 1336))
    {
      *((_BYTE *)this + 1328) = *((_BYTE *)this + 1136);
      *((_BYTE *)this + 1333) = *((_BYTE *)this + 1141);
    }
  }
  *((_DWORD *)this + 335) = *((_DWORD *)this + 287);
  v11 = *((_QWORD *)this + 121);
  *((_DWORD *)this + 292) = *((_DWORD *)this + 244);
  *((_QWORD *)this + 145) = v11;
  result = *((float *)this + 246);
  *((float *)this + 294) = result;
  *((_BYTE *)this + 556) = 4 * *((_BYTE *)this + 1138);
  return result;
}

void md::TextLabelPart::updateForDisplay(md::TextLabelPart *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  v2 = *((_QWORD *)this + 76);
  v3 = *((_QWORD *)this + 77);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 90) = v2;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = v3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *((_DWORD *)this + 189) = *((_DWORD *)this + 161);
  *(_OWORD *)((char *)this + 809) = *(_OWORD *)((char *)this + 697);
  v9 = *((_OWORD *)this + 41);
  v10 = *((_OWORD *)this + 42);
  *((_OWORD *)this + 48) = v9;
  *(_DWORD *)((char *)this + 825) = *(_DWORD *)((char *)this + 713);
  *((_BYTE *)this + 829) = *((_BYTE *)this + 717);
  *((_OWORD *)this + 49) = v10;
  if (*(float *)&v9 > 0.0 && !*((_BYTE *)this + 565))
  {
    *((_DWORD *)this + 192) = 0;
    LODWORD(v9) = 0;
  }
  *((_DWORD *)this + 227) = v9;
  *((_BYTE *)this + 866) = *(float *)&v9 >= 0.0001;
  *(_DWORD *)(*((_QWORD *)this + 74) + 8) = *(_DWORD *)(*((_QWORD *)this + 72) + 8);
}

void md::CaptionedIconLabelPart::updateForDisplay(md::CaptionedIconLabelPart *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v2 = (uint64_t *)*((_QWORD *)this + 72);
  v3 = (uint64_t *)*((_QWORD *)this + 73);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  }
  *(_QWORD *)((char *)this + 700) = *((_QWORD *)this + 81);
  *(_OWORD *)((char *)this + 684) = *(_OWORD *)((char *)this + 632);
  *((_BYTE *)this + 732) = *((_BYTE *)this + 680);
  v5 = (*(float (**)(md::CaptionedIconLabelPart *))(*(_QWORD *)this + 264))(this);
  if (v7 < v5 || v8 < v6)
  {
    v13 = 3.4028e38;
    v15 = -3.4028e38;
    v14 = -3.4028e38;
    v11 = 3.4028e38;
  }
  else
  {
    v10 = *((float *)this + 70);
    v11 = v5 - v10;
    v12 = *((float *)this + 71);
    v13 = v6 - v12;
    v14 = v7 - v10;
    v15 = v8 - v12;
  }
  *((float *)this + 179) = v11;
  *((float *)this + 180) = v13;
  *((float *)this + 181) = v14;
  *((float *)this + 182) = v15;
}

void md::HorizontalTextLabelPart::updateForDisplay(md::HorizontalTextLabelPart *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  float v14;

  v2 = *((_QWORD *)this + 76);
  v3 = *((_QWORD *)this + 77);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 90) = v2;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = v3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *((_DWORD *)this + 189) = *((_DWORD *)this + 161);
  *(_OWORD *)((char *)this + 809) = *(_OWORD *)((char *)this + 697);
  v9 = *((_OWORD *)this + 41);
  v10 = *((_OWORD *)this + 42);
  *((_OWORD *)this + 48) = v9;
  *(_DWORD *)((char *)this + 825) = *(_DWORD *)((char *)this + 713);
  *((_BYTE *)this + 829) = *((_BYTE *)this + 717);
  *((_OWORD *)this + 49) = v10;
  if (*(float *)&v9 > 0.0 && !*((_BYTE *)this + 565))
  {
    *((_DWORD *)this + 192) = 0;
    LODWORD(v9) = 0;
  }
  *((_DWORD *)this + 227) = v9;
  *((_BYTE *)this + 866) = *(float *)&v9 >= 0.0001;
  *(_DWORD *)(*((_QWORD *)this + 74) + 8) = *(_DWORD *)(*((_QWORD *)this + 72) + 8);
  v11 = *((unsigned __int8 *)this + 1026);
  if (*((unsigned __int8 *)this + 1098) != v11)
  {
    *((_BYTE *)this + 1098) = v11;
    *((_BYTE *)this + 1099) = 1;
  }
  v12 = *((_DWORD *)this + 244);
  if (*((_DWORD *)this + 262) != v12)
  {
    *((_DWORD *)this + 262) = v12;
    *((_BYTE *)this + 1099) = 1;
  }
  v13 = *((_DWORD *)this + 245);
  if (*((_DWORD *)this + 263) != v13)
  {
    *((_DWORD *)this + 263) = v13;
    *((_BYTE *)this + 1099) = 1;
  }
  v14 = *((float *)this + 241);
  if (*((float *)this + 259) != v14)
  {
    *((float *)this + 259) = v14;
    *((_BYTE *)this + 1099) = 1;
  }
  *((_BYTE *)this + 556) = 4 * *((_BYTE *)this + 1029);
}

uint64_t md::PointIconLabelPart::updateForDisplay(md::PointIconLabelPart *this)
{
  float v2;
  uint64_t v3;
  char v4;
  int v5;
  char v6;
  float v7;
  uint64_t result;

  v2 = *((float *)this + 147);
  *((float *)this + 153) = v2;
  v3 = *(_QWORD *)((char *)this + 572);
  *((_DWORD *)this + 151) = *((_DWORD *)this + 145);
  *(_QWORD *)((char *)this + 596) = v3;
  *((_BYTE *)this + 617) = *((_BYTE *)this + 593);
  v4 = *((_BYTE *)this + 633) + 4 * *((_BYTE *)this + 594);
  *((_BYTE *)this + 556) = v4;
  *((_BYTE *)this + 658) = v4;
  v5 = *((unsigned __int8 *)this + 592);
  *((_BYTE *)this + 657) = v5;
  *((_BYTE *)this + 765) = v5 == 4;
  if (v5 == 4)
    v6 = 2;
  else
    v6 = 1;
  v7 = *((float *)this + 188);
  *((_BYTE *)this + 685) = v6;
  if (v2 != v7)
  {
    *((float *)this + 188) = v2;
    (*(void (**)(md::PointIconLabelPart *, uint64_t, char *, char *))(*(_QWORD *)this + 912))(this, 1, (char *)this + 640, (char *)this + 312);
  }
  result = *((_QWORD *)this + 104);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

uint64_t md::IconLabelPart::updateForDisplay(uint64_t this)
{
  float v1;
  uint64_t v2;
  char v3;
  int v4;
  char v5;
  float v6;

  v1 = *(float *)(this + 588);
  *(float *)(this + 612) = v1;
  v2 = *(_QWORD *)(this + 572);
  *(_DWORD *)(this + 604) = *(_DWORD *)(this + 580);
  *(_QWORD *)(this + 596) = v2;
  *(_BYTE *)(this + 617) = *(_BYTE *)(this + 593);
  v3 = *(_BYTE *)(this + 633) + 4 * *(_BYTE *)(this + 594);
  *(_BYTE *)(this + 556) = v3;
  *(_BYTE *)(this + 658) = v3;
  v4 = *(unsigned __int8 *)(this + 592);
  *(_BYTE *)(this + 657) = v4;
  *(_BYTE *)(this + 765) = v4 == 4;
  if (v4 == 4)
    v5 = 2;
  else
    v5 = 1;
  v6 = *(float *)(this + 752);
  *(_BYTE *)(this + 685) = v5;
  if (v1 != v6)
  {
    *(float *)(this + 752) = v1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 912))(this, 1, this + 640, this + 312);
  }
  return this;
}

void md::StyleCrossFadeLabelPart::~StyleCrossFadeLabelPart(md::StyleCrossFadeLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::StyleCrossFadeLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 40))(mdm::Allocator::instance(void)::alloc, this, 640);
}

void md::AnimatedCrossFadeLabelPart::~AnimatedCrossFadeLabelPart(md::AnimatedCrossFadeLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::AnimatedCrossFadeLabelPart::~AnimatedCrossFadeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::AnimatedCrossFadeLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, this, 744);
}

{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  *(_QWORD *)this = off_1E42A2D18;
  if (*((_BYTE *)this + 738))
  {
    *((_BYTE *)this + 738) = 0;
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v2 = (id)GEOGetVectorKitPerformanceLog_log;
    v3 = v2;
    v4 = *((unsigned __int8 *)this + 736);
    if (*((_BYTE *)this + 736) && os_signpost_enabled(v2))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LabelsPickAnimation", (const char *)&unk_1A0189141, v5, 2u);
    }

  }
  md::LabelAnimator::~LabelAnimator((md::AnimatedCrossFadeLabelPart *)((char *)this + 640));
  md::CompositeLabelPart::~CompositeLabelPart(this);
}

uint64_t md::CompositeLabelPart::resolveForDisplay(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::LabelPartContent::parsePartContent(uint64_t result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      result = *v2;
      switch(*(_BYTE *)(*v2 + 562))
      {
        case 1:
          *(_QWORD *)(v4 + 16) = result;
          v6 = *(_DWORD *)v4 | 1;
          goto LABEL_5;
        case 5:
          *(_QWORD *)(v4 + 32) = result;
          v6 = *(_DWORD *)v4 | 2;
          goto LABEL_5;
        case 6:
          *(_QWORD *)(v4 + 24) = result;
          (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)result + 200))(v8);
          result = md::LabelPartContent::parsePartContent(v4, v8);
          if (v8[0])
          {
            v8[1] = v8[0];
            result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, v8[0], v8[2] - v8[0]);
          }
          break;
        case 7:
        case 8:
        case 9:
        case 0xB:
          v7 = (*(_BYTE *)(*v2 + 562) - 7);
          if (*(_QWORD *)(v4 + 40))
          {
            *(_QWORD *)(v4 + 48) = result;
            v5 = dword_19FFB8D0C[v7];
          }
          else
          {
            *(_QWORD *)(v4 + 40) = result;
            v5 = dword_19FFB8CF8[v7];
          }
          v6 = *(_DWORD *)v4 | v5;
LABEL_5:
          *(_DWORD *)v4 = v6;
          break;
        default:
          break;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_19F241FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a12 + 40))(a12, a9, a11 - a9);
  _Unwind_Resume(exception_object);
}

void md::LabelPart::children(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;
  _QWORD *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((v2 & 1) == 0)
  {
    v8 = a1;
    a1 = v8;
    if (v3)
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
      a1 = v8;
    }
  }
  a1[3] = mdm::Allocator::instance(void)::alloc;
}

__int128 *md::LabelAnimator::resolveParams(_QWORD *a1, int a2, unsigned int a3, int a4, int a5)
{
  char *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  void *v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v5 = (char *)&animationParams + 140 * a3;
  v6 = (__int128 *)(v5 + 4);
  v7 = (__int128 *)(v5 + 72);
  if (a2 == 1)
    v8 = v6;
  else
    v8 = v7;
  if (*(_BYTE *)(*a1 + 3656))
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v13, "tuneForwardLabelAnimation") == a4
      && a5 == objc_msgSend(v13, "labelAnimationTuningElement"))
    {
      v14 = v8[3];
      xmmword_1EE58B980 = v8[2];
      *(_OWORD *)&dword_1EE58B990 = v14;
      dword_1EE58B9A0 = *((_DWORD *)v8 + 16);
      v15 = v8[1];
      debugAnimationParams = *v8;
      *(_OWORD *)&dword_1EE58B970 = v15;
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      if (a2 == 1)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "showLabelAnimationParams");
      }
      else
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "hideLabelAnimationParams");
      }
      v18 = v17;

      v19 = atomic_load((unsigned __int8 *)(a1[1] + 1242));
      v20 = BYTE4(debugAnimationParams);
      if ((v19 & 1) != 0)
      {
        v25 = *((_QWORD *)&debugAnimationParams + 1);
        *(_DWORD *)(v18 + 8) = dword_1EE58B970;
        *(_QWORD *)v18 = v25;
        v26 = byte_1EE58B974;
        v27 = qword_1EE58B978;
        *(_DWORD *)(v18 + 32) = xmmword_1EE58B980;
        *(_QWORD *)(v18 + 16) = v20;
        *(_QWORD *)(v18 + 24) = v27;
        v28 = BYTE4(xmmword_1EE58B980);
        v29 = dword_1EE58B990;
        v30 = *((_QWORD *)&xmmword_1EE58B980 + 1);
        *(_QWORD *)(v18 + 40) = v26;
        *(_QWORD *)(v18 + 48) = v30;
        *(_DWORD *)(v18 + 56) = v29;
        *(_QWORD *)(v18 + 88) = byte_1EE58B994;
        v31 = qword_1EE58B998;
        *(_DWORD *)(v18 + 80) = dword_1EE58B9A0;
        *(_QWORD *)(v18 + 64) = v28;
        *(_QWORD *)(v18 + 72) = v31;
      }
      else
      {
        if (BYTE4(debugAnimationParams))
        {
          if (*(_QWORD *)(v18 + 16))
            BYTE4(debugAnimationParams) = *(_QWORD *)(v18 + 16);
          v21 = *(_QWORD *)v18;
          dword_1EE58B970 = *(_DWORD *)(v18 + 8);
          *((_QWORD *)&debugAnimationParams + 1) = v21;
        }
        if (byte_1EE58B974)
        {
          if (*(_QWORD *)(v18 + 40))
            byte_1EE58B974 = *(_QWORD *)(v18 + 40);
          v22 = *(_QWORD *)(v18 + 24);
          LODWORD(xmmword_1EE58B980) = *(_DWORD *)(v18 + 32);
          qword_1EE58B978 = v22;
        }
        if (BYTE4(xmmword_1EE58B980))
        {
          if (*(_QWORD *)(v18 + 64))
            BYTE4(xmmword_1EE58B980) = *(_QWORD *)(v18 + 64);
          v23 = *(_DWORD *)(v18 + 56);
          *((_QWORD *)&xmmword_1EE58B980 + 1) = *(_QWORD *)(v18 + 48);
          dword_1EE58B990 = v23;
        }
        if (byte_1EE58B994)
        {
          if (*(_QWORD *)(v18 + 88))
            byte_1EE58B994 = *(_QWORD *)(v18 + 88);
          v24 = *(_QWORD *)(v18 + 72);
          dword_1EE58B9A0 = *(_DWORD *)(v18 + 80);
          qword_1EE58B998 = v24;
        }
      }
      v8 = &debugAnimationParams;
    }

  }
  return v8;
}

void sub_19F242334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabelPart::children@<X0>(md::CompositeLabelPart *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  result = *((_QWORD *)this + 75);
  a2[2] = 0;
  a2[3] = result;
  v4 = (char *)*((_QWORD *)this + 72);
  v5 = (char *)*((_QWORD *)this + 73);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0)
      abort();
    v8 = v6 >> 3;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    *a2 = result;
    a2[2] = result + 8 * v8;
    do
    {
      if (result)
        *(_QWORD *)result = *(_QWORD *)v4;
      v4 += 8;
      result += 8;
    }
    while (v4 != v5);
    a2[1] = result;
  }
  return result;
}

uint64_t md::CompositeLabelPart::clearAnimationIDs(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  *(_BYTE *)(this + 563) = -1;
  v1 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 184))(v3))
    v3 = *v1++;
  return this;
}

uint64_t md::LabelPart::clearAnimationIDs(uint64_t this)
{
  *(_BYTE *)(this + 563) = -1;
  return this;
}

md::LabelAnimator *md::Label::clearAnimation(md::Label *this)
{
  uint64_t v2;
  uint64_t v3;
  md::LabelAnimator *result;

  if (*((_BYTE *)this + 1082))
  {
    *((_BYTE *)this + 1082) = 0;
    atomic_store(0, (unsigned __int8 *)this + 1243);
  }
  if (*((_BYTE *)this + 1081))
  {
    *((_BYTE *)this + 1081) = 0;
    atomic_store(0, (unsigned __int8 *)this + 1244);
    *((_DWORD *)this + 280) = 0;
    *((float *)this + 281) = (*((float (**)(float))this + 143))(0.0);
    md::Label::updateStateMachineForDisplay((uint64_t)this, 8, *((_BYTE *)this + 1073), 0);
  }
  v2 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  atomic_store(0, (unsigned __int8 *)this + 1244);
  result = (md::LabelAnimator *)*((_QWORD *)this + 148);
  if (result)
  {
    *((_QWORD *)this + 148) = 0;
    md::LabelAnimator::~LabelAnimator(result);
    result = (md::LabelAnimator *)MEMORY[0x1A1AF4E00]();
    *((_BYTE *)this + 1106) = *((_BYTE *)this + 1108);
  }
  return result;
}

uint64_t md::ArrowLabelPart::updateForDisplay(uint64_t this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  char v4;
  int v5;
  BOOL v6;
  char v7;
  float v8;

  v1 = this;
  *(_QWORD *)(this + 888) = *(_QWORD *)(this + 816);
  v2 = *(float *)(this + 588);
  *(float *)(this + 612) = v2;
  v3 = *(_QWORD *)(this + 572);
  *(_DWORD *)(this + 604) = *(_DWORD *)(this + 580);
  *(_QWORD *)(this + 596) = v3;
  *(_BYTE *)(this + 617) = *(_BYTE *)(this + 593);
  v4 = *(_BYTE *)(this + 633) + 4 * *(_BYTE *)(this + 594);
  *(_BYTE *)(this + 556) = v4;
  *(_BYTE *)(this + 658) = v4;
  v5 = *(unsigned __int8 *)(this + 592);
  *(_BYTE *)(this + 657) = v5;
  v6 = v5 == 4;
  if (v6)
    v7 = 2;
  else
    v7 = 1;
  *(_BYTE *)(this + 765) = v6;
  v8 = *(float *)(this + 752);
  *(_BYTE *)(this + 685) = v7;
  if (v2 != v8)
  {
    *(float *)(this + 752) = v2;
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 912))(this, 1, this + 640, this + 312);
  }
  if (*(_BYTE *)(v1 + 917))
  {
    *(_BYTE *)(v1 + 917) = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 768) + 24))(*(_QWORD *)(v1 + 768), v1 + 840);
  }
  return this;
}

BOOL md::AnimatedCrossFadeLabelPart::isInterruptibleAnimation(md::AnimatedCrossFadeLabelPart *this)
{
  return *((float *)this + 165) >= *((float *)this + 164);
}

void md::AnchorLogic::_resetExternalAnchors(md::AnchorLogic *this)
{
  md::AnchorLogic *v1;
  id v2;

  if (this)
  {
    v1 = this;
    do
    {
      v2 = *((id *)v1 + 3);
      objc_msgSend(v2, "destroyAnchor");

      v1 = *(md::AnchorLogic **)v1;
    }
    while (v1);
  }
}

void sub_19F24263C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ggl::MetalResourceManager::deleteResource(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5;
  const char *v6;
  unint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned __int8 v29;
  uint64_t (*v30)(void);
  unsigned __int8 v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v4 = *(unsigned __int8 *)(a2 + 9);
  switch(*(_BYTE *)(a2 + 9))
  {
    case 0:
      v8 = *(void **)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;

      v9 = (unsigned int *)(a1 + 312);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_3;
    case 1:
      v11 = *(_QWORD *)(a2 + 32);
      for (i = *(_QWORD *)(a2 + 40); i != v11; i -= 8)
      {
        v13 = *(void **)(i - 8);

      }
      *(_QWORD *)(a2 + 40) = v11;
      goto LABEL_3;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
      v5 = *(void **)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;

LABEL_3:
      v4 = *(unsigned __int8 *)(a2 + 9);
      break;
    default:
      break;
  }
  v6 = "Buffer";
  v7 = 0x36F6F5C400000006;
  switch(v4)
  {
    case 0:
      break;
    case 1:
      v6 = "Texture";
      v7 = 0x4DDB34EE00000007;
      break;
    case 2:
      v6 = "SamplerState";
      v7 = 0xC9803BE00000000CLL;
      break;
    case 3:
      v6 = "Library";
      v7 = 0x6E3DA12000000007;
      break;
    case 4:
      v6 = "Function";
      v7 = 0x33D8746B00000008;
      break;
    case 5:
      v6 = "PipelineState";
      v7 = 0x28DAD03E0000000DLL;
      break;
    case 6:
      v6 = "ComputePipelineState";
      v7 = 0xCB8C155300000014;
      break;
    case 7:
      v6 = "DepthStencilState";
      v7 = 0x38AB5BF400000011;
      break;
    case 8:
      v6 = "Drawable";
      v7 = 0x7010C0800000008;
      break;
    case 9:
      v6 = "RasterizationRateMap";
      v7 = 0x62578FE100000014;
      break;
    default:
      v6 = "Uknown";
      v7 = 0x5165D1F800000006;
      break;
  }
  v14 = *(_QWORD *)(a2 + 24);
  v35[0] = v6;
  v35[1] = v7;
  std::mutex::lock((std::mutex *)(a1 + 192));
  v15 = std::__hash_table<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::__unordered_map_hasher<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::hash<geo::StringLiteral>,std::equal_to<geo::StringLiteral>,true>,std::__unordered_map_equal<geo::StringLiteral,std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>,std::equal_to<geo::StringLiteral>,std::hash<geo::StringLiteral>,true>,std::allocator<std::__hash_value_type<geo::StringLiteral,ggl::ResourceStats>>>::find<geo::StringLiteral>((_QWORD *)(a1 + 152), (uint64_t)v35);
  if (v15)
  {
    --v15[4];
    if (v14)
      v15[5] -= v14;
  }
  std::mutex::unlock((std::mutex *)(a1 + 192));
  if (*(_BYTE *)(a2 + 9) == 1)
  {
    v16 = *(std::__shared_weak_count **)(a2 + 112);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(std::__shared_weak_count **)(a2 + 96);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(std::__shared_weak_count **)(a2 + 80);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = *(_QWORD *)(a2 + 32);
    if (v25)
    {
      v26 = *(_QWORD *)(a2 + 40);
      v27 = *(_QWORD *)(a2 + 32);
      if (v26 != v25)
      {
        do
        {
          v28 = *(void **)(v26 - 8);
          v26 -= 8;

        }
        while (v26 != v25);
        v27 = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 40) = v25;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 56) + 40))(*(_QWORD *)(a2 + 56), v27, *(_QWORD *)(a2 + 48) - v27);
    }
    {
      v33 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "GeoGL", 0xA3D02C1100000005);
    }
    v30 = *(uint64_t (**)(void))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40);
  }
  else
  {
    {
      v34 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v34, "GeoGL", 0xA3D02C1100000005);
    }
    v30 = *(uint64_t (**)(void))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40);
  }
  return v30();
}

void `non-virtual thunk to'md::StandardLabeler::setLabelExclusionRegions(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v3 = a2;
  *(_BYTE *)(a1 + 352) = 1;
  v4 = v3;
  v7 = v4;
  if (v4)
  {
    v5 = v4;
    v4 = v7;
  }
  v6 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v4;

}

void sub_19F242E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

md::LabelPoint *md::LabelPoint::geocentricPoint(md::LabelPoint *this)
{
  long double v2;
  long double v3;
  double v4;
  long double v5;
  double v6;
  __double2 v7;
  double v8;
  __double2 v9;

  if (!*((_BYTE *)this + 44))
  {
    v2 = *((double *)this + 3) * 6.28318531;
    v3 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
    v4 = atan(v3) * 2.0 + -1.57079633;
    v5 = fmod(v2, 6.28318531);
    v6 = fmod(v5 + 6.28318531, 6.28318531) + -3.14159265;
    v7 = __sincos_stret(v4);
    v8 = 6378137.0 / sqrt(v7.__sinval * v7.__sinval * -0.00669437999 + 1.0);
    v9 = __sincos_stret(v6);
    *(double *)this = v8 * v7.__cosval * v9.__cosval;
    *((double *)this + 1) = v8 * v7.__cosval * v9.__sinval;
    *((double *)this + 2) = v7.__sinval * 0.99330562 * v8;
    *((_BYTE *)this + 44) = 1;
  }
  return this;
}

_QWORD *md::PostchainRenderLayer::layout(md::PostchainRenderLayer *this, const md::LayoutContext *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  int v21;
  float64x2_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  ggl::CommandBuffer *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  ggl::CommandBuffer *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  ggl::CommandBuffer *v51;
  double v52;
  float64x2_t v53;
  _QWORD *v54;
  unint64_t v55;
  __int128 v56;
  float32x2_t *v57;
  void *v58;
  float v59;
  void *v60;
  float v61;
  void *v62;
  float v63;
  float32_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  int8x8_t v103;
  uint8x8_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  float64x2_t *v114;
  unsigned int v115;
  void *v116;
  unsigned int v117;
  void *v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unsigned __int8 *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unsigned __int8 *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  float32x2_t *v158;
  float32x2_t *v159;
  void *v160;
  __int32 v161;
  void *v162;
  __int32 v163;
  void *v164;
  __int32 v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  float32x2_t *v177;
  float32_t v178;
  float32x2_t *v179;
  void *v180;
  __int32 v181;
  void *v182;
  __int32 v183;
  void *v184;
  __int32 v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  float32x2_t *v191;
  uint64_t v192;
  uint64_t v193;
  float v194;
  float32x2_t *v195;
  double v196;
  double v197;
  double v198;
  float v199;
  float v200;
  float v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float32x2_t v205;
  double v206;
  double v207;
  long double v208;
  long double v209;
  long double v210;
  double v211;
  long double v212;
  double v213;
  long double v214;
  float v215;
  void *v216;
  __int32 v217;
  float32x2_t *v218;
  void *v224;
  __int32 v225;
  void *v226;
  __int32 v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  unint64_t v234;
  float32x2_t *v235;
  void *v236;
  __int32 v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *result;
  uint64_t v247;
  ggl::CommandBuffer *v248;
  ggl::CommandBuffer *v249;
  ggl::CommandBuffer *v250;
  ggl::CommandBuffer *v251;
  ggl::CommandBuffer *v252;
  ggl::CommandBuffer *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  float32x2_t *v257;
  __int128 v258;
  uint64_t v259;
  unint64_t v260;
  __int16 v261;
  float32x2_t *v262;
  _QWORD v263[3];
  _QWORD *v264;
  _QWORD v265[3];
  _QWORD *v266;
  _QWORD v267[3];
  _QWORD *v268;
  uint64_t v269;

  v269 = *MEMORY[0x1E0C80C00];
  v265[0] = &off_1E42D06B8;
  v265[1] = a2;
  v266 = v265;
  v263[0] = &off_1E42D0700;
  v263[1] = a2;
  v264 = v263;
  v268 = v267;
  v267[0] = &off_1E42D0700;
  v267[1] = a2;
  std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v265);
  v4 = v264;
  if (v264 == v263)
  {
    v5 = 4;
    v4 = v263;
  }
  else
  {
    if (!v264)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v266;
  if (v266 == v265)
  {
    v7 = 4;
    v6 = v265;
  }
  else
  {
    if (!v266)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (_QWORD *)*((_QWORD *)a2 + 1);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_34;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v9 <= 0x1AF456233693CD46uLL)
      v11 = 0x1AF456233693CD46uLL % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & 0x1AF456233693CD46;
  }
  v12 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v12)
    goto LABEL_34;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_34;
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == 0x1AF456233693CD46)
      {
        if (v13[2] == 0x1AF456233693CD46)
          goto LABEL_32;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_34;
      }
      v13 = (_QWORD *)*v13;
      if (!v13)
        goto LABEL_34;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == 0x1AF456233693CD46)
      break;
    if (v15 >= *(_QWORD *)&v9)
      v15 %= *(_QWORD *)&v9;
    if (v15 != v11)
      goto LABEL_34;
LABEL_21:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_34;
  }
  if (v13[2] != 0x1AF456233693CD46)
    goto LABEL_21;
LABEL_32:
  v17 = v13[5];
  if (*(_QWORD *)(v17 + 8) == 0x1AF456233693CD46)
  {
    v18 = *(_QWORD *)(v17 + 32);
    goto LABEL_35;
  }
LABEL_34:
  v18 = 0;
LABEL_35:
  v19 = *(_QWORD **)(*((_QWORD *)this + 5) + 24);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v254 = v18;
  v21 = objc_msgSend(v20, "enableDOF");

  v22 = (float64x2_t *)(v254 + 968);
  if (!v21)
    goto LABEL_129;
  v23 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v24 = v23[3];
  v25 = v23[4];
  if (v25 == v24)
  {
    v250 = 0;
    v252 = 0;
    v248 = 0;
    v31 = 0;
LABEL_69:
    v253 = 0;
LABEL_70:
    v251 = 0;
LABEL_71:
    v249 = 0;
    goto LABEL_72;
  }
  v26 = 0;
  while (1)
  {
    v27 = *(unsigned __int8 **)(v24 + 8 * v26);
    if (*v27 == *((unsigned __int8 *)this + 48))
    {
      v28 = *((_QWORD *)v27 + 1);
      v29 = v23[15];
      if (v28 < (v23[16] - v29) >> 3)
        break;
    }
    if (++v26 >= (unint64_t)((v25 - v24) >> 3))
      goto LABEL_44;
  }
  v30 = *(_QWORD *)(v29 + 8 * v28);
  if (!v30)
  {
LABEL_44:
    v31 = 0;
    v32 = v25 - v24;
    if (v25 != v24)
      goto LABEL_45;
LABEL_43:
    v250 = 0;
    v252 = 0;
    v248 = 0;
    goto LABEL_69;
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v30 + 24) + 8 * *((unsigned __int8 *)this + 49));
  v32 = v25 - v24;
  if (v25 == v24)
    goto LABEL_43;
LABEL_45:
  v33 = 0;
  v34 = v32 >> 3;
  while (1)
  {
    v35 = *(unsigned __int8 **)(v24 + 8 * v33);
    if (*v35 == *((unsigned __int8 *)this + 60))
    {
      v36 = *((_QWORD *)v35 + 1);
      v37 = v23[15];
      if (v36 < (v23[16] - v37) >> 3)
        break;
    }
    if (++v33 >= v34)
      goto LABEL_52;
  }
  v38 = *(_QWORD *)(v37 + 8 * v36);
  if (v38)
  {
    v39 = *(ggl::CommandBuffer **)(*(_QWORD *)(v38 + 24) + 8 * *((unsigned __int8 *)this + 61));
    goto LABEL_53;
  }
LABEL_52:
  v39 = 0;
LABEL_53:
  v248 = v39;
  if (v25 == v24)
  {
    v250 = 0;
    v252 = 0;
    goto LABEL_69;
  }
  v40 = 0;
  while (1)
  {
    v41 = *(unsigned __int8 **)(v24 + 8 * v40);
    if (*v41 == *((unsigned __int8 *)this + 50))
    {
      v42 = *((_QWORD *)v41 + 1);
      v43 = v23[15];
      if (v42 < (v23[16] - v43) >> 3)
        break;
    }
    if (++v40 >= (unint64_t)((v25 - v24) >> 3))
      goto LABEL_60;
  }
  v44 = *(_QWORD *)(v43 + 8 * v42);
  if (v44)
  {
    v45 = *(ggl::CommandBuffer **)(*(_QWORD *)(v44 + 24) + 8 * *((unsigned __int8 *)this + 51));
    goto LABEL_61;
  }
LABEL_60:
  v45 = 0;
LABEL_61:
  v253 = v45;
  if (v25 == v24)
  {
    v250 = 0;
    v252 = 0;
    goto LABEL_70;
  }
  v46 = 0;
  while (1)
  {
    v47 = *(unsigned __int8 **)(v24 + 8 * v46);
    if (*v47 == *((unsigned __int8 *)this + 52))
    {
      v48 = *((_QWORD *)v47 + 1);
      v49 = v23[15];
      if (v48 < (v23[16] - v49) >> 3)
        break;
    }
    if (++v46 >= (unint64_t)((v25 - v24) >> 3))
      goto LABEL_156;
  }
  v50 = *(_QWORD *)(v49 + 8 * v48);
  if (v50)
  {
    v51 = *(ggl::CommandBuffer **)(*(_QWORD *)(v50 + 24) + 8 * *((unsigned __int8 *)this + 53));
    goto LABEL_157;
  }
LABEL_156:
  v51 = 0;
LABEL_157:
  v252 = v51;
  if (v25 == v24)
  {
    v250 = 0;
    goto LABEL_70;
  }
  v123 = 0;
  while (1)
  {
    v124 = *(unsigned __int8 **)(v24 + 8 * v123);
    if (*v124 == *((unsigned __int8 *)this + 54))
    {
      v125 = *((_QWORD *)v124 + 1);
      v126 = v23[15];
      if (v125 < (v23[16] - v126) >> 3)
        break;
    }
    if (++v123 >= (unint64_t)((v25 - v24) >> 3))
      goto LABEL_166;
  }
  v127 = *(_QWORD *)(v126 + 8 * v125);
  if (v127)
  {
    v251 = *(ggl::CommandBuffer **)(*(_QWORD *)(v127 + 24) + 8 * *((unsigned __int8 *)this + 55));
    v128 = v25 - v24;
    if (v25 == v24)
    {
LABEL_164:
      v249 = 0;
      v250 = 0;
      goto LABEL_72;
    }
  }
  else
  {
LABEL_166:
    v251 = 0;
    v128 = v25 - v24;
    if (v25 == v24)
      goto LABEL_164;
  }
  v129 = 0;
  v130 = v128 >> 3;
  while (1)
  {
    v131 = *(unsigned __int8 **)(v24 + 8 * v129);
    if (*v131 == *((unsigned __int8 *)this + 56))
    {
      v132 = *((_QWORD *)v131 + 1);
      v133 = v23[15];
      if (v132 < (v23[16] - v133) >> 3)
        break;
    }
    if (++v129 >= v130)
      goto LABEL_175;
  }
  v134 = *(_QWORD *)(v133 + 8 * v132);
  if (v134)
  {
    v250 = *(ggl::CommandBuffer **)(*(_QWORD *)(v134 + 24) + 8 * *((unsigned __int8 *)this + 57));
    v135 = v25 - v24;
    if (v25 == v24)
      goto LABEL_71;
    goto LABEL_176;
  }
LABEL_175:
  v250 = 0;
  v135 = v25 - v24;
  if (v25 == v24)
    goto LABEL_71;
LABEL_176:
  v136 = 0;
  v137 = v135 >> 3;
  while (1)
  {
    v138 = *(unsigned __int8 **)(v24 + 8 * v136);
    if (*v138 == *((unsigned __int8 *)this + 58))
    {
      v139 = *((_QWORD *)v138 + 1);
      v140 = v23[15];
      if (v139 < (v23[16] - v140) >> 3)
        break;
    }
    if (++v136 >= v137)
      goto LABEL_71;
  }
  v141 = *(_QWORD *)(v140 + 8 * v139);
  if (!v141)
    goto LABEL_71;
  v249 = *(ggl::CommandBuffer **)(*(_QWORD *)(v141 + 24) + 8 * *((unsigned __int8 *)this + 59));
LABEL_72:
  v52 = *(double *)(v254 + 32);
  v53 = *v22;
  v54 = (_QWORD *)*((_QWORD *)this + 9);
  v258 = 0uLL;
  v55 = v54[1];
  *(_QWORD *)&v56 = 0;
  *((_QWORD *)&v56 + 1) = v54;
  v57 = (float32x2_t *)v54[9];
  v258 = v56;
  v259 = 0;
  v260 = v55;
  v262 = v57;
  v261 = 1;
  *v57 = vcvt_f32_f64(v53);
  *(float *)&v52 = v52;
  v57[1].i32[0] = LODWORD(v52);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "dofStrength");
  v57[1].f32[1] = v59 * 6.0;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v60, "dofStrength");
  if (v61 <= 0.1)
  {
    v57[2].i32[0] = 1065353216;
  }
  else
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "dofStrength");
    v64 = 0.1 / v63;
    v57[2].f32[0] = v64;

  }
  if (v55)
  {
    v65 = v54[8];
    if (v65 <= v55)
      v65 = v55;
    v54[7] = 0;
    v54[8] = v65;
  }
  v66 = v19[27];
  if (v66)
  {
    v67 = *(_QWORD *)(v66 + 32);
    v68 = *(_QWORD *)(v19[1] + 96);
    v22 = (float64x2_t *)(v254 + 968);
    if (v67 >= (*(_QWORD *)(v19[1] + 104) - v68) >> 3)
      v66 = 0;
    else
      v66 = *(_QWORD *)(*(_QWORD *)(v68 + 8 * v67) + 16);
  }
  else
  {
    v22 = (float64x2_t *)(v254 + 968);
  }
  **(_QWORD **)(*((_QWORD *)this + 32) + 96) = v66;
  v69 = v19[13];
  if (v69)
  {
    v70 = *(_QWORD *)(v69 + 32);
    v71 = *(_QWORD *)(v19[1] + 96);
    if (v70 >= (*(_QWORD *)(v19[1] + 104) - v71) >> 3)
      v69 = 0;
    else
      v69 = *(_QWORD *)(*(_QWORD *)(v71 + 8 * v70) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 96) + 8) = v69;
  ggl::CommandBuffer::pushRenderItem(v31, *((ggl::RenderItem **)this + 34));
  v72 = v19[30];
  if (v72)
  {
    v73 = *(_QWORD *)(v72 + 32);
    v74 = *(_QWORD *)(v19[1] + 96);
    if (v73 >= (*(_QWORD *)(v19[1] + 104) - v74) >> 3)
      v72 = 0;
    else
      v72 = *(_QWORD *)(*(_QWORD *)(v74 + 8 * v73) + 16);
  }
  **(_QWORD **)(*((_QWORD *)this + 39) + 96) = v72;
  ggl::CommandBuffer::pushRenderItem((uint64_t)v253, *((ggl::RenderItem **)this + 41));
  v75 = v19[30];
  if (v75)
  {
    v76 = *(_QWORD *)(v75 + 32);
    v77 = *(_QWORD *)(v19[1] + 96);
    if (v76 >= (*(_QWORD *)(v19[1] + 104) - v77) >> 3)
      v75 = 0;
    else
      v75 = *(_QWORD *)(*(_QWORD *)(v77 + 8 * v76) + 16);
  }
  **(_QWORD **)(*((_QWORD *)this + 48) + 96) = v75;
  v78 = v19[29];
  if (v78)
  {
    v79 = *(_QWORD *)(v78 + 32);
    v80 = *(_QWORD *)(v19[1] + 96);
    if (v79 >= (*(_QWORD *)(v19[1] + 104) - v80) >> 3)
      v78 = 0;
    else
      v78 = *(_QWORD *)(*(_QWORD *)(v80 + 8 * v79) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 48) + 96) + 8) = v78;
  ggl::CommandBuffer::pushRenderItem((uint64_t)v252, *((ggl::RenderItem **)this + 52));
  v81 = v19[31];
  if (v81)
  {
    v82 = *(_QWORD *)(v81 + 32);
    v83 = *(_QWORD *)(v19[1] + 96);
    if (v82 >= (*(_QWORD *)(v19[1] + 104) - v83) >> 3)
      v81 = 0;
    else
      v81 = *(_QWORD *)(*(_QWORD *)(v83 + 8 * v82) + 16);
  }
  **(_QWORD **)(*((_QWORD *)this + 50) + 96) = v81;
  ggl::CommandBuffer::pushRenderItem((uint64_t)v251, *((ggl::RenderItem **)this + 53));
  v84 = v19[32];
  if (v84)
  {
    v85 = *(_QWORD *)(v84 + 32);
    v86 = *(_QWORD *)(v19[1] + 96);
    if (v85 >= (*(_QWORD *)(v19[1] + 104) - v86) >> 3)
      v84 = 0;
    else
      v84 = *(_QWORD *)(*(_QWORD *)(v86 + 8 * v85) + 16);
  }
  **(_QWORD **)(*((_QWORD *)this + 60) + 96) = v84;
  ggl::CommandBuffer::pushRenderItem((uint64_t)v250, *((ggl::RenderItem **)this + 64));
  v87 = v19[33];
  if (v87)
  {
    v88 = *(_QWORD *)(v87 + 32);
    v89 = *(_QWORD *)(v19[1] + 96);
    if (v88 >= (*(_QWORD *)(v19[1] + 104) - v89) >> 3)
      v87 = 0;
    else
      v87 = *(_QWORD *)(*(_QWORD *)(v89 + 8 * v88) + 16);
  }
  **(_QWORD **)(*((_QWORD *)this + 62) + 96) = v87;
  ggl::CommandBuffer::pushRenderItem((uint64_t)v249, *((ggl::RenderItem **)this + 65));
  v90 = v19[27];
  if (v90)
  {
    v91 = *(_QWORD *)(v90 + 32);
    v92 = *(_QWORD *)(v19[1] + 96);
    if (v91 >= (*(_QWORD *)(v19[1] + 104) - v92) >> 3)
      v90 = 0;
    else
      v90 = *(_QWORD *)(*(_QWORD *)(v92 + 8 * v91) + 16);
  }
  **(_QWORD **)(*((_QWORD *)this + 23) + 96) = v90;
  v93 = v19[13];
  if (v93)
  {
    v94 = *(_QWORD *)(v93 + 32);
    v95 = *(_QWORD *)(v19[1] + 96);
    if (v94 >= (*(_QWORD *)(v19[1] + 104) - v95) >> 3)
      v93 = 0;
    else
      v93 = *(_QWORD *)(*(_QWORD *)(v95 + 8 * v94) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 96) + 8) = v93;
  v96 = v19[34];
  if (v96)
  {
    v97 = *(_QWORD *)(v96 + 32);
    v98 = *(_QWORD *)(v19[1] + 96);
    if (v97 >= (*(_QWORD *)(v19[1] + 104) - v98) >> 3)
      v96 = 0;
    else
      v96 = *(_QWORD *)(*(_QWORD *)(v98 + 8 * v97) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 96) + 16) = v96;
  v99 = v19[35];
  if (v99)
  {
    v100 = *(_QWORD *)(v99 + 32);
    v101 = *(_QWORD *)(v19[1] + 96);
    if (v100 >= (*(_QWORD *)(v19[1] + 104) - v101) >> 3)
      v99 = 0;
    else
      v99 = *(_QWORD *)(*(_QWORD *)(v101 + 8 * v100) + 16);
  }
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 23) + 96) + 24) = v99;
  ggl::CommandBuffer::pushRenderItem((uint64_t)v248, *((ggl::RenderItem **)this + 27));
LABEL_129:
  v102 = (_QWORD *)*((_QWORD *)a2 + 1);
  v103 = (int8x8_t)v102[1];
  if (!*(_QWORD *)&v103)
    goto LABEL_237;
  v104 = (uint8x8_t)vcnt_s8(v103);
  v104.i16[0] = vaddlv_u8(v104);
  if (v104.u32[0] > 1uLL)
  {
    v105 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v103 <= 0x41E8D6E445F4145uLL)
      v105 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v103;
  }
  else
  {
    v105 = (*(_QWORD *)&v103 - 1) & 0x41E8D6E445F4145;
  }
  v106 = *(_QWORD **)(*v102 + 8 * v105);
  if (!v106)
    goto LABEL_237;
  v107 = (_QWORD *)*v106;
  if (!v107)
    goto LABEL_237;
  if (v104.u32[0] < 2uLL)
  {
    v108 = *(_QWORD *)&v103 - 1;
    while (1)
    {
      v110 = v107[1];
      if (v110 == 0x41E8D6E445F4145)
      {
        if (v107[2] == 0x41E8D6E445F4145)
          goto LABEL_150;
      }
      else if ((v110 & v108) != v105)
      {
        goto LABEL_237;
      }
      v107 = (_QWORD *)*v107;
      if (!v107)
        goto LABEL_237;
    }
  }
  while (2)
  {
    v109 = v107[1];
    if (v109 != 0x41E8D6E445F4145)
    {
      if (v109 >= *(_QWORD *)&v103)
        v109 %= *(_QWORD *)&v103;
      if (v109 != v105)
        goto LABEL_237;
      goto LABEL_139;
    }
    if (v107[2] != 0x41E8D6E445F4145)
    {
LABEL_139:
      v107 = (_QWORD *)*v107;
      if (!v107)
        goto LABEL_237;
      continue;
    }
    break;
  }
LABEL_150:
  v111 = v107[5];
  if (*(_QWORD *)(v111 + 8) == 0x41E8D6E445F4145)
  {
    v112 = *(_QWORD *)(v111 + 32);
    if (v112)
    {
      if (*(_BYTE *)(v112 + 227))
      {
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        v114 = v22;
        v115 = objc_msgSend(v113, "daVinciSSAOHighSampleCountEnabled");

        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v116 = (void *)objc_claimAutoreleasedReturnValue();
        v117 = objc_msgSend(v116, "daVinciSSAODepthAwareBlurEnabled");

        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        v119 = objc_msgSend(v118, "daVinciSSAODepthAwareUpsampleEnabled");

        v120 = v19[21];
        if (v120)
        {
          v121 = *(_QWORD *)(v120 + 32);
          v122 = *(_QWORD *)(v19[1] + 96);
          if (v121 >= (*(_QWORD *)(v19[1] + 104) - v122) >> 3)
            v120 = 0;
          else
            v120 = *(_QWORD *)(*(_QWORD *)(v122 + 8 * v121) + 16);
        }
        **(_QWORD **)(*((_QWORD *)this + 82) + 96) = v120;
        v142 = md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), *((_BYTE *)this + 64), *((_BYTE *)this + 65));
        ggl::CommandBuffer::pushRenderItem(v142, *((ggl::RenderItem **)this + 84));
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v143 = (void *)objc_claimAutoreleasedReturnValue();
        v144 = objc_msgSend(v143, "daVinciSSAOEnableBlur");

        if (v144)
        {
          v145 = v117;
          v146 = v19[15];
          if (v146
            && (v147 = *(_QWORD *)(v146 + 32),
                v148 = *(_QWORD *)(v19[1] + 96),
                v147 < (*(_QWORD *)(v19[1] + 104) - v148) >> 3))
          {
            v149 = *(_QWORD *)(*(_QWORD *)(v148 + 8 * v147) + 16);
          }
          else
          {
            v149 = 0;
          }
          v152 = (char *)this + 16 * v117 + 728;
          **(_QWORD **)(*(_QWORD *)v152 + 96) = v149;
          v153 = v19[18];
          if (v153)
          {
            v154 = *(_QWORD *)(v153 + 32);
            v155 = *(_QWORD *)(v19[1] + 96);
            if (v154 >= (*(_QWORD *)(v19[1] + 104) - v155) >> 3)
              v153 = 0;
            else
              v153 = *(_QWORD *)(*(_QWORD *)(v155 + 8 * v154) + 16);
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v152 + 96) + 8) = v153;
          v156 = *((_QWORD *)this + 13);
          v257 = 0;
          *(_QWORD *)&v258 = 0;
          v255 = 0;
          v256 = 0;
          v157 = *(_QWORD *)(v156 + 8);
          *((_QWORD *)&v258 + 1) = v156;
          v259 = 0;
          v260 = v157;
          v261 = 1;
          if (v157)
            v158 = *(float32x2_t **)(v156 + 72);
          else
            v158 = 0;
          v262 = v158;
          ggl::BufferMemory::operator=(&v255, (uint64_t)&v258);
          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v258);
          v159 = v257;
          v257->f32[0] = 1.0
                       / (float)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19[1] + 96)
                                                                        + 8 * *(_QWORD *)(v19[15] + 32))
                                                            + 16)
                                                + 80);
          v159->i32[1] = 0;
          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
          v160 = (void *)objc_claimAutoreleasedReturnValue();
          v161 = objc_msgSend(v160, "daVinciSSAOBlurSize");
          v257[1].i32[0] = v161;

          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
          v162 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v162, "daVinciSSAOBlurriness");
          v257[1].i32[1] = v163;

          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v164, "daVinciSSAODepthBlurriness");
          v257[2].i32[0] = v165;

          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v255);
          v166 = md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), *((_BYTE *)this + 66), *((_BYTE *)this + 67));
          ggl::CommandBuffer::pushRenderItem(v166, *((ggl::RenderItem **)this + v145 + 99));
          v167 = v19[16];
          if (v167
            && (v168 = *(_QWORD *)(v167 + 32),
                v169 = *(_QWORD *)(v19[1] + 96),
                v168 < (*(_QWORD *)(v19[1] + 104) - v169) >> 3))
          {
            v170 = *(_QWORD *)(*(_QWORD *)(v169 + 8 * v168) + 16);
          }
          else
          {
            v170 = 0;
          }
          v171 = (char *)this + 16 * v145 + 760;
          **(_QWORD **)(*(_QWORD *)v171 + 96) = v170;
          v172 = v19[18];
          if (v172)
          {
            v173 = *(_QWORD *)(v172 + 32);
            v174 = *(_QWORD *)(v19[1] + 96);
            if (v173 >= (*(_QWORD *)(v19[1] + 104) - v174) >> 3)
              v172 = 0;
            else
              v172 = *(_QWORD *)(*(_QWORD *)(v174 + 8 * v173) + 16);
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v171 + 96) + 8) = v172;
          v175 = *((_QWORD *)this + 15);
          v257 = 0;
          *(_QWORD *)&v258 = 0;
          v255 = 0;
          v256 = 0;
          v176 = *(_QWORD *)(v175 + 8);
          *((_QWORD *)&v258 + 1) = v175;
          v259 = 0;
          v260 = v176;
          v261 = 1;
          if (v176)
            v177 = *(float32x2_t **)(v175 + 72);
          else
            v177 = 0;
          v262 = v177;
          ggl::BufferMemory::operator=(&v255, (uint64_t)&v258);
          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v258);
          v178 = 1.0
               / (float)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19[1] + 96)
                                                                + 8 * *(_QWORD *)(v19[15] + 32))
                                                    + 16)
                                        + 84);
          v179 = v257;
          v257->i32[0] = 0;
          v179->f32[1] = v178;
          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
          v180 = (void *)objc_claimAutoreleasedReturnValue();
          v181 = objc_msgSend(v180, "daVinciSSAOBlurSize");
          v257[1].i32[0] = v181;

          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
          v182 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v182, "daVinciSSAOBlurriness");
          v257[1].i32[1] = v183;

          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
          v184 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v184, "daVinciSSAODepthBlurriness");
          v257[2].i32[0] = v185;

          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v255);
          v186 = md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), *((_BYTE *)this + 68), *((_BYTE *)this + 69));
          ggl::CommandBuffer::pushRenderItem(v186, *((ggl::RenderItem **)this + v145 + 101));
          v150 = v254;
          if (v119)
          {
            v151 = v19[17];
            if (v151)
              goto LABEL_211;
            goto LABEL_214;
          }
        }
        else
        {
          v150 = v254;
          if (v119)
          {
            v151 = v19[15];
            if (v151)
            {
LABEL_211:
              v187 = *(_QWORD *)(v151 + 32);
              v188 = *(_QWORD *)(v19[1] + 96);
              if (v187 >= (*(_QWORD *)(v19[1] + 104) - v188) >> 3)
                v151 = 0;
              else
                v151 = *(_QWORD *)(*(_QWORD *)(v188 + 8 * v187) + 16);
            }
LABEL_214:
            *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 96) + 16) = v151;
          }
        }
        v189 = *((_QWORD *)this + 11);
        v257 = 0;
        *(_QWORD *)&v258 = 0;
        v255 = 0;
        v256 = 0;
        v190 = *(_QWORD *)(v189 + 8);
        *((_QWORD *)&v258 + 1) = v189;
        v259 = 0;
        v260 = v190;
        v261 = 1;
        if (v190)
          v191 = *(float32x2_t **)(v189 + 72);
        else
          v191 = 0;
        v262 = v191;
        ggl::BufferMemory::operator=(&v255, (uint64_t)&v258);
        ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v258);
        v192 = v19[36];
        v193 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19[1] + 96) + 8 * *(_QWORD *)(v19[15] + 32)) + 16);
        v194 = (float)(*(_DWORD *)(v193 + 84) / *(_DWORD *)(v192 + 84));
        v195 = v257;
        v257[3].f32[0] = (float)(*(_DWORD *)(v193 + 80) / *(_DWORD *)(v192 + 80));
        v195[3].f32[1] = v194;
        v196 = *(double *)(v150 + 1248);
        v197 = *(double *)(v150 + 1256);
        v198 = *(double *)(v150 + 1264);
        v199 = *(double *)(v150 + 3272)
             + *(double *)(v150 + 3176) * v196
             + *(double *)(v150 + 3208) * v197
             + *(double *)(v150 + 3240) * v198;
        v200 = *(double *)(v150 + 1008) + *(double *)(v150 + 1040);
        v201 = -v200;
        v202 = *(float64x2_t *)(v150 + 3192);
        v203 = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v150 + 3256), *(float64x2_t *)(v150 + 3160), v196), v202, v197);
        v204 = *(float64x2_t *)(v150 + 3224);
        v205 = vcvt_f32_f64(vmlaq_n_f64(v203, v204, v198));
        *v195 = vdiv_f32(v205, vsub_f32(vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v150 + 3256), *(float64x2_t *)(v150 + 3160), *(double *)(v150 + 1296)), v202, v114[21].f64[0]), v204, *(double *)(v150 + 1312))), v205));
        v195[1].f32[0] = v199 / (float)-v200;
        v206 = 1.0;
        if (!*(_BYTE *)(v150 + 3776))
        {
          v207 = *(double *)(v150 + 8);
          v208 = cos(v207 + v207) * -559.82 + 111132.92;
          v209 = v208 + cos(v207 * 4.0) * 1.175;
          v210 = v209 + cos(v207 * 6.0) * -0.0023;
          v211 = v207 * 0.5;
          v212 = tan(v207 * 0.5 + 0.78103484);
          v213 = log(v212);
          v214 = tan(v211 + 0.789761487);
          v206 = fabs((log(v214) - v213) * 0.159154943) / v210;
        }
        v215 = v206;
        v195[4].f32[0] = v215 / v201;
        v195[5].i32[0] = 1017370378;
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v216 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v216, "daVinciSSAODepthThreshold");
        v257[6].i32[0] = v217;

        v218 = v257;
        __asm { FMOV            V1.2S, #1.0 }
        v257[2] = vdiv_f32(_D1, vcvt_f32_u32(*(uint32x2_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19[1] + 96)+ 8 * *(_QWORD *)(v19[15] + 32))+ 16)+ 80)));
        v218[6].i32[1] = *(_DWORD *)(v112 + 220);
        v218[5].i32[1] = *(_DWORD *)(v112 + 204);
        v218[4].f32[1] = *(float *)(v112 + 208) * 20.0;
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v224 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v224, "ssaoFalloffScale");
        v257[7].i32[0] = v225;

        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v226 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v226, "ssaoMaxDistance");
        v257[7].i32[1] = v227;

        ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v255);
        v228 = v115;
        v229 = v19[18];
        if (v229)
        {
          v230 = *(_QWORD *)(v229 + 32);
          v231 = *(_QWORD *)(v19[1] + 96);
          if (v230 >= (*(_QWORD *)(v19[1] + 104) - v231) >> 3)
            v229 = 0;
          else
            v229 = *(_QWORD *)(*(_QWORD *)(v231 + 8 * v230) + 16);
        }
        v232 = (char *)this + 16 * v115;
        **(_QWORD **)(*((_QWORD *)v232 + 72) + 96) = v229;
        *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v232 + 72) + 96) + 8) = v19[36];
        v233 = *((_QWORD *)this + 17);
        v257 = 0;
        *(_QWORD *)&v258 = 0;
        v255 = 0;
        v256 = 0;
        v234 = *(_QWORD *)(v233 + 8);
        *((_QWORD *)&v258 + 1) = v233;
        v259 = 0;
        v260 = v234;
        v261 = 1;
        if (v234)
          v235 = *(float32x2_t **)(v233 + 72);
        else
          v235 = 0;
        v262 = v235;
        ggl::BufferMemory::operator=(&v255, (uint64_t)&v258);
        ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v258);
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v236 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v236, "daVinciSSAOUpsampleDepthThreshold");
        v257->i32[0] = v237;

        ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v255);
        v238 = md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), *((_BYTE *)this + 62), *((_BYTE *)this + 63));
        ggl::CommandBuffer::pushRenderItem(v238, *((ggl::RenderItem **)this + v228 + 76));
        if (v119)
        {
          v239 = v19[18];
          if (v239)
          {
            v240 = *(_QWORD *)(v239 + 32);
            v241 = *(_QWORD *)(v19[1] + 96);
            if (v240 >= (*(_QWORD *)(v19[1] + 104) - v241) >> 3)
              v239 = 0;
            else
              v239 = *(_QWORD *)(*(_QWORD *)(v241 + 8 * v240) + 16);
          }
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 107) + 96) + 8) = v239;
          v242 = v19[21];
          if (v242)
          {
            v243 = *(_QWORD *)(v242 + 32);
            v244 = *(_QWORD *)(v19[1] + 96);
            if (v243 >= (*(_QWORD *)(v19[1] + 104) - v244) >> 3)
              v242 = 0;
            else
              v242 = *(_QWORD *)(*(_QWORD *)(v244 + 8 * v243) + 16);
          }
          **(_QWORD **)(*((_QWORD *)this + 107) + 96) = v242;
          v245 = md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), *((_BYTE *)this + 70), *((_BYTE *)this + 71));
          ggl::CommandBuffer::pushRenderItem(v245, *((ggl::RenderItem **)this + 109));
        }
      }
    }
  }
LABEL_237:
  if (!v268)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v268 + 48))(v268);
  result = v268;
  if (v268 == v267)
  {
    v247 = 4;
    result = v267;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v247))();
  }
  else if (v268)
  {
    v247 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v247))();
  }
  return result;
}

void sub_19F2444EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 160));
  _Unwind_Resume(a1);
}

void md::StandardPassList::buildFrameGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  int8x8_t v10;
  uint8x8_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  int8x8_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  int v36;
  int v37;
  void *v38;
  char v39;
  _DWORD *v40;
  uint64_t *v41;
  int8x8_t v42;
  uint8x8_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  __int32 v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint8x8_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void *v72;
  int v73;
  int v74;
  _DWORD *v75;
  id v76;
  void *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t (***v91)();
  uint64_t v92;
  uint64_t (***v93)();
  uint64_t v94;
  uint64_t (***v95)();
  uint64_t v96;
  uint64_t (***v97)();
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  int8x8_t v104;
  uint8x8_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int8x8_t *v118;
  char v119;
  void *v120;
  char v121;
  _QWORD *v122;
  int32x2_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  uint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  _DWORD *v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t Resource;
  _BYTE *v149;
  __int128 v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  __int128 v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  __int128 v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t (**v182)();
  _QWORD *v183;
  ggl::RenderQueue *v184;
  uint64_t (*v185)();
  ggl::CommandBuffer *v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t (***v193)();
  uint64_t v194;
  uint64_t (**v195)();
  _QWORD *v196;
  ggl::RenderQueue *v197;
  _QWORD *v198;
  char *v199;
  uint64_t v200;
  ggl::CommandBuffer *v201;
  ggl::CommandBuffer *v202;
  const char *v203;
  double v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t (***v210)();
  uint64_t v211;
  uint64_t (**v212)();
  _QWORD *v213;
  ggl::RenderQueue *v214;
  uint64_t (*v215)();
  ggl::CommandBuffer *v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t (***v223)();
  uint64_t v224;
  _QWORD *v225;
  uint64_t *v226;
  _QWORD *v227;
  ggl::RenderQueue *v228;
  _QWORD *v229;
  _OWORD *v230;
  ggl::CommandBuffer *v231;
  double v232;
  uint64_t v233;
  ggl::CommandBuffer *v234;
  double v235;
  uint64_t v236;
  ggl::CommandBuffer *v237;
  double v238;
  uint64_t v239;
  ggl::CommandBuffer *v240;
  double v241;
  uint64_t v242;
  ggl::CommandBuffer *v243;
  double v244;
  uint64_t v245;
  ggl::CommandBuffer *v246;
  double v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t (***v252)();
  uint64_t v253;
  id v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _BYTE v259[48];
  __int128 v260;
  uint64_t v261;
  char v262;
  __int128 v263;
  int v264;
  _BYTE v265[48];
  __int128 v266;
  uint64_t v267;
  char v268;
  __int128 v269;
  int v270;
  _BYTE v271[32];
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  char v275;
  __int128 v276;
  int v277;
  char v278;
  __int8 v279;
  BOOL v280;
  char v281;
  _QWORD v282[3];
  _QWORD *v283;
  uint64_t v284[3];
  uint64_t *v285;
  uint64_t (**v286)();
  _QWORD *v287;
  _BYTE *v288;
  uint64_t *v289;
  uint64_t (**v290)();
  _QWORD *v291;
  int32x2_t *v292;
  uint64_t *v293;
  uint64_t (**v294)();
  _QWORD *v295;
  _BYTE *v296;
  uint64_t *v297;
  uint64_t (**v298)();
  _QWORD *v299;
  int32x2_t *v300;
  uint64_t (***v301)();
  _QWORD v302[3];
  _QWORD *v303;
  _BYTE v304[12];
  uint64_t v305;
  __int128 v306;
  char v307;
  uint64_t v308;
  int v309;
  char v310;
  int32x2_t v311[4];
  __int128 v312;
  _DWORD v313[14];
  uint64_t v314;

  v314 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a2 + 8);
  v10 = (int8x8_t)v9[1];
  if (!*(_QWORD *)&v10)
    goto LABEL_29;
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v10 <= 0x41E8D6E445F4145uLL)
      v12 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v10;
  }
  else
  {
    v12 = (*(_QWORD *)&v10 - 1) & 0x41E8D6E445F4145;
  }
  v13 = *(_QWORD **)(*v9 + 8 * v12);
  if (!v13 || (v14 = (_QWORD *)*v13) == 0)
  {
LABEL_29:
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    goto LABEL_30;
  }
  if (v11.u32[0] < 2uLL)
  {
    v15 = *(_QWORD *)&v10 - 1;
    while (1)
    {
      v17 = v14[1];
      if (v17 == 0x41E8D6E445F4145)
      {
        if (v14[2] == 0x41E8D6E445F4145)
          goto LABEL_22;
      }
      else if ((v17 & v15) != v12)
      {
        goto LABEL_29;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_29;
    }
  }
  while (1)
  {
    v16 = v14[1];
    if (v16 == 0x41E8D6E445F4145)
      break;
    if (v16 >= *(_QWORD *)&v10)
      v16 %= *(_QWORD *)&v10;
    if (v16 != v12)
      goto LABEL_29;
LABEL_11:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_29;
  }
  if (v14[2] != 0x41E8D6E445F4145)
    goto LABEL_11;
LABEL_22:
  v18 = v14[5];
  if (*(_QWORD *)(v18 + 8) != 0x41E8D6E445F4145)
    goto LABEL_29;
  v19 = *(_QWORD *)(v18 + 32);
  if (!v19)
    goto LABEL_29;
  v20 = *(unsigned __int8 *)(v19 + 227);
  v271[0] = *(_BYTE *)(v19 + 227);
  if (*(_BYTE *)(v19 + 224))
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "enableDOF");

  }
  else
  {
    v22 = 0;
  }
  if (!v20 && (v22 & 1) == 0)
    goto LABEL_29;
  v311[0].i32[0] = 1065353216;
  if (v20)
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "daVinciSSAODepthTextureScale");
    v311[0].i32[0] = v54;

  }
  md::StandardPassList::_buildSSAODOFCommonFrameGraph((_QWORD *)a1, v271, (const BOOL *)v22, (const float *)v311, (unsigned __int8 ***)a5);
LABEL_30:
  v23 = *(_QWORD **)(a2 + 8);
  v24 = (int8x8_t)v23[1];
  if (!*(_QWORD *)&v24)
    goto LABEL_54;
  v25 = (uint8x8_t)vcnt_s8(v24);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    v26 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v24 <= 0x41E8D6E445F4145uLL)
      v26 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v24;
  }
  else
  {
    v26 = (*(_QWORD *)&v24 - 1) & 0x41E8D6E445F4145;
  }
  v27 = *(_QWORD **)(*v23 + 8 * v26);
  if (!v27)
    goto LABEL_54;
  v28 = (_QWORD *)*v27;
  if (!v28)
    goto LABEL_54;
  if (v25.u32[0] < 2uLL)
  {
    v29 = *(_QWORD *)&v24 - 1;
    while (1)
    {
      v31 = v28[1];
      if (v31 == 0x41E8D6E445F4145)
      {
        if (v28[2] == 0x41E8D6E445F4145)
          goto LABEL_51;
      }
      else if ((v31 & v29) != v26)
      {
        goto LABEL_54;
      }
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_54;
    }
  }
  while (1)
  {
    v30 = v28[1];
    if (v30 == 0x41E8D6E445F4145)
      break;
    if (v30 >= *(_QWORD *)&v24)
      v30 %= *(_QWORD *)&v24;
    if (v30 != v26)
      goto LABEL_54;
LABEL_40:
    v28 = (_QWORD *)*v28;
    if (!v28)
      goto LABEL_54;
  }
  if (v28[2] != 0x41E8D6E445F4145)
    goto LABEL_40;
LABEL_51:
  v32 = v28[5];
  if (*(_QWORD *)(v32 + 8) != 0x41E8D6E445F4145 || (v33 = *(_QWORD *)(v32 + 32)) == 0)
  {
LABEL_54:
    v34 = 0;
    goto LABEL_55;
  }
  v34 = *(_BYTE *)(v33 + 227) != 0;
LABEL_55:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "daVinciSSAOTextureScale");
  v37 = v36;

  *(_DWORD *)v271 = v37;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = objc_msgSend(v38, "daVinciSSAOEnableBlur");

  v265[0] = v39;
  if (*((_BYTE *)a4 + 72))
    v40 = (_DWORD *)a4 + 19;
  else
    v40 = &md::FrameGraphRenderTarget::size(void)const::fallback;
  v311[0] = (int32x2_t)__PAIR64__(v40[3], v40[1]);
  md::StandardPassList::_buildSSAOFrameGraph(a1, v34, (float *)v271, v265, v311, a5);
  v41 = *(uint64_t **)(a2 + 8);
  v42 = (int8x8_t)v41[1];
  if (!*(_QWORD *)&v42)
    goto LABEL_133;
  v43 = (uint8x8_t)vcnt_s8(v42);
  v43.i16[0] = vaddlv_u8(v43);
  if (v43.u32[0] > 1uLL)
  {
    v44 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v42 <= 0x41E8D6E445F4145uLL)
      v44 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v42;
  }
  else
  {
    v44 = (*(_QWORD *)&v42 - 1) & 0x41E8D6E445F4145;
  }
  v45 = *v41;
  v46 = *(_QWORD **)(*v41 + 8 * v44);
  if (!v46)
    goto LABEL_110;
  v47 = (_QWORD *)*v46;
  if (!*v46)
    goto LABEL_110;
  v48 = *(_QWORD *)&v42 - 1;
  if (v43.u32[0] < 2uLL)
  {
    while (1)
    {
      v49 = v47[1];
      if (v49 == 0x41E8D6E445F4145)
      {
        if (v47[2] == 0x41E8D6E445F4145)
          goto LABEL_79;
      }
      else if ((v49 & v48) != v44)
      {
        goto LABEL_109;
      }
      v47 = (_QWORD *)*v47;
      if (!v47)
        goto LABEL_109;
    }
  }
  while (2)
  {
    v50 = v47[1];
    if (v50 != 0x41E8D6E445F4145)
    {
      if (v50 >= *(_QWORD *)&v42)
        v50 %= *(_QWORD *)&v42;
      if (v50 != v44)
        goto LABEL_109;
LABEL_73:
      v47 = (_QWORD *)*v47;
      if (!v47)
        goto LABEL_109;
      continue;
    }
    break;
  }
  if (v47[2] != 0x41E8D6E445F4145)
    goto LABEL_73;
LABEL_79:
  v51 = v47[5];
  if (*(_QWORD *)(v51 + 8) != 0x41E8D6E445F4145 || !*(_QWORD *)(v51 + 32))
    goto LABEL_109;
  if (v43.u32[0] > 1uLL)
  {
    v52 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v42 <= 0x41E8D6E445F4145uLL)
      v52 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v42;
  }
  else
  {
    v52 = v48 & 0x41E8D6E445F4145;
  }
  v55 = *(_QWORD **)(v45 + 8 * v52);
  if (!v55)
    goto LABEL_107;
  v56 = (_QWORD *)*v55;
  if (!v56)
    goto LABEL_107;
  if (v43.u32[0] < 2uLL)
  {
    while (1)
    {
      v57 = v56[1];
      if (v57 == 0x41E8D6E445F4145)
      {
        if (v56[2] == 0x41E8D6E445F4145)
          goto LABEL_104;
      }
      else if ((v57 & v48) != v52)
      {
        goto LABEL_107;
      }
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_107;
    }
  }
  while (2)
  {
    v58 = v56[1];
    if (v58 != 0x41E8D6E445F4145)
    {
      if (v58 >= *(_QWORD *)&v42)
        v58 %= *(_QWORD *)&v42;
      if (v58 != v52)
        goto LABEL_107;
      goto LABEL_98;
    }
    if (v56[2] != 0x41E8D6E445F4145)
    {
LABEL_98:
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_107;
      continue;
    }
    break;
  }
LABEL_104:
  v59 = v56[5];
  if (*(_QWORD *)(v59 + 8) == 0x41E8D6E445F4145)
  {
    v60 = *(_QWORD *)(v59 + 32);
    if (v60)
    {
      v61 = *(unsigned __int8 *)(v60 + 225) != 0;
      goto LABEL_108;
    }
  }
LABEL_107:
  v61 = 0;
LABEL_108:
  md::StandardPassList::_buildShadowFrameGraph((_QWORD *)a1, (const BOOL *)v61, (unsigned __int8 ***)a5);
  v41 = *(uint64_t **)(a2 + 8);
  v42 = (int8x8_t)v41[1];
LABEL_109:
  if (!*(_QWORD *)&v42)
    goto LABEL_133;
LABEL_110:
  v62 = (uint8x8_t)vcnt_s8(v42);
  v62.i16[0] = vaddlv_u8(v62);
  if (v62.u32[0] > 1uLL)
  {
    v63 = 0xDFC317497CF9A4BFLL;
    if (*(_QWORD *)&v42 <= 0xDFC317497CF9A4BFLL)
      v63 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v42;
  }
  else
  {
    v63 = (*(_QWORD *)&v42 - 1) & 0xDFC317497CF9A4BFLL;
  }
  v64 = *(_QWORD **)(*v41 + 8 * v63);
  if (!v64)
    goto LABEL_133;
  v65 = (_QWORD *)*v64;
  if (!v65)
    goto LABEL_133;
  if (v62.u32[0] < 2uLL)
  {
    v66 = *(_QWORD *)&v42 - 1;
    while (1)
    {
      v68 = v65[1];
      if (v68 == 0xDFC317497CF9A4BFLL)
      {
        if (v65[2] == 0xDFC317497CF9A4BFLL)
          goto LABEL_130;
      }
      else if ((v68 & v66) != v63)
      {
        goto LABEL_133;
      }
      v65 = (_QWORD *)*v65;
      if (!v65)
        goto LABEL_133;
    }
  }
  while (2)
  {
    v67 = v65[1];
    if (v67 != 0xDFC317497CF9A4BFLL)
    {
      if (v67 >= *(_QWORD *)&v42)
        v67 %= *(_QWORD *)&v42;
      if (v67 != v63)
        goto LABEL_133;
      goto LABEL_119;
    }
    if (v65[2] != 0xDFC317497CF9A4BFLL)
    {
LABEL_119:
      v65 = (_QWORD *)*v65;
      if (!v65)
        goto LABEL_133;
      continue;
    }
    break;
  }
LABEL_130:
  v69 = v65[5];
  if (*(_QWORD *)(v69 + 8) == 0xDFC317497CF9A4BFLL)
  {
    v70 = *(_QWORD *)(v69 + 32);
    if (v70)
    {
      v71 = *(_BYTE *)(v70 + 64) != 0;
      goto LABEL_134;
    }
  }
LABEL_133:
  v71 = 0;
LABEL_134:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v72, "daVinciRouteLineMaskScale");
  v74 = v73;

  *(_DWORD *)v271 = v74;
  v265[0] = objc_msgSend(*(id *)(a3 + 104), "supportsFramebufferFetch");
  v75 = (_DWORD *)a4 + 19;
  if (!*((_BYTE *)a4 + 72))
    v75 = &md::FrameGraphRenderTarget::size(void)const::fallback;
  v311[0] = (int32x2_t)__PAIR64__(v75[3], v75[1]);
  md::StandardPassList::_buildRouteLineMaskFrameGraph((_QWORD *)a1, v71, (float *)v271, v265, v311, a5);
  v76 = *(id *)(a3 + 104);
  if ((objc_msgSend(v76, "supportsFramebufferFetch") & 1) == 0)
  {

    goto LABEL_143;
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = objc_msgSend(v77, "enableDOF");

  if (!v78)
  {
LABEL_143:
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    goto LABEL_195;
  }
  v79 = *a4;
  if (*a4 && *(_BYTE *)(v79 + 112) && (v80 = *(unsigned int *)(v79 + 108), (_DWORD)v80))
    v81 = v80 | 0x100000000;
  else
    v81 = 0;
  v311[0].i16[0] = 1;
  *(int32x2_t *)((char *)v311 + 4) = (int32x2_t)0x3F00000000000000;
  *(int32x2_t *)((char *)&v311[1] + 4) = (int32x2_t)0x3F00000000000000;
  *(int32x2_t *)((char *)&v311[2] + 4) = (int32x2_t)v81;
  v311[3].i8[4] = 0;
  BYTE4(v312) = 0;
  *((_QWORD *)&v312 + 1) = 0x100000000;
  v313[0] = 1;
  LOBYTE(v313[1]) = 0;
  if (v79 && *(_BYTE *)(v79 + 112) && (v82 = *(unsigned int *)(v79 + 108), (_DWORD)v82))
    v83 = v82 | 0x100000000;
  else
    v83 = 0;
  *(_WORD *)v271 = 1;
  *(_QWORD *)&v271[4] = 0x3F80000000000000;
  *(_QWORD *)&v271[12] = 0x3F80000000000000;
  *(_QWORD *)&v271[20] = v83;
  v271[28] = 0;
  BYTE4(v272) = 0;
  *((_QWORD *)&v272 + 1) = 0x100000001;
  LODWORD(v273) = 4;
  BYTE4(v273) = 0;
  if (v79 && *(_BYTE *)(v79 + 112) && (v84 = *(unsigned int *)(v79 + 108), (_DWORD)v84))
    v85 = v84 | 0x100000000;
  else
    v85 = 0;
  *(_WORD *)v265 = 1;
  *(_QWORD *)&v265[4] = 0x3F80000000000000;
  *(_QWORD *)&v265[12] = 0x3F80000000000000;
  *(_QWORD *)&v265[20] = v85;
  v265[28] = 0;
  v265[36] = 0;
  *(_QWORD *)&v265[40] = 0x100000000;
  LODWORD(v266) = 1;
  BYTE4(v266) = 2;
  v86 = a4[8];
  if (v86 && *(_BYTE *)(v86 + 112) && (v87 = *(unsigned int *)(v86 + 108), (_DWORD)v87))
    v88 = v87 | 0x100000000;
  else
    v88 = 0;
  *(_WORD *)v259 = 1;
  *(_QWORD *)&v259[4] = 0x3F80000000000000;
  *(_QWORD *)&v259[12] = 0x3F80000000000000;
  *(_QWORD *)&v259[20] = v88;
  v259[28] = 0;
  v259[36] = 0;
  *(_QWORD *)&v259[40] = 0x100000001;
  LODWORD(v260) = 4;
  BYTE4(v260) = 1;
  *(_WORD *)v304 = 1;
  *(_QWORD *)&v304[4] = 0x3E00000000000000;
  v305 = 0x3E00000000000000;
  *(_QWORD *)&v306 = 0x100000002;
  BYTE8(v306) = 0;
  v307 = 0;
  v308 = 0x100000000;
  v309 = 1;
  v310 = 0;
  *(_QWORD *)(a1 + 208) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v271, "Primary Scene Color", 0x8BC3D4C00000013uLL, 0);
  *(_QWORD *)(a1 + 224) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v259, "Primary Scene Depth", 0x944969CC00000013, 0);
  *(_QWORD *)(a1 + 216) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v265, "Primary Scene Color Resolve", 0x429E541E0000001BuLL, 0);
  *(_QWORD *)(a1 + 240) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v311, "FG Color CoC", 0x138985420000000CuLL, 0);
  *(_QWORD *)(a1 + 248) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v311, "BG Color CoC", 0x108FBE3D0000000CuLL, 0);
  *(_QWORD *)(a1 + 232) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v304, "FG Color Downsampled CoC", 0x4C9E23D800000018uLL, 0);
  *(_QWORD *)(a1 + 256) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v311, "FG Blur", 0xF5B8B5BC00000007, 0);
  *(_QWORD *)(a1 + 264) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v311, "BG Blur", 0x1F791AF00000007uLL, 0);
  *(_QWORD *)(a1 + 272) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v311, "FG Tent Blur", 0xB5780D5C0000000CLL, 0);
  *(_QWORD *)(a1 + 280) = md::FrameGraphBuilder::createResource(a5, (uint64_t)v311, "BG Tent Blur", 0xB67E36230000000CLL, 0);
  v302[0] = &off_1E42CDB20;
  v302[1] = a1;
  v303 = v302;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a5, 17, v302);
  v89 = v303;
  if (v303 == v302)
  {
    v90 = 4;
    v89 = v302;
LABEL_164:
    (*(void (**)(void))(*v89 + 8 * v90))();
  }
  else if (v303)
  {
    v90 = 5;
    goto LABEL_164;
  }
  v298 = &off_1E42CDB68;
  v299 = (_QWORD *)a1;
  v301 = &v298;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a5, 18, &v298);
  v91 = v301;
  if (v301 == &v298)
  {
    v92 = 4;
    v91 = &v298;
LABEL_169:
    (*v91)[v92]();
  }
  else if (v301)
  {
    v92 = 5;
    goto LABEL_169;
  }
  v294 = &off_1E42CDBB0;
  v295 = (_QWORD *)a1;
  v297 = (uint64_t *)&v294;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a5, 19, &v294);
  v93 = (uint64_t (***)())v297;
  if (v297 == (uint64_t *)&v294)
  {
    v94 = 4;
    v93 = &v294;
LABEL_174:
    (*v93)[v94]();
  }
  else if (v297)
  {
    v94 = 5;
    goto LABEL_174;
  }
  v290 = &off_1E42CDBF8;
  v291 = (_QWORD *)a1;
  v293 = (uint64_t *)&v290;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a5, 20, &v290);
  v95 = (uint64_t (***)())v293;
  if (v293 == (uint64_t *)&v290)
  {
    v96 = 4;
    v95 = &v290;
LABEL_179:
    (*v95)[v96]();
  }
  else if (v293)
  {
    v96 = 5;
    goto LABEL_179;
  }
  v286 = &off_1E42CDC40;
  v287 = (_QWORD *)a1;
  v289 = (uint64_t *)&v286;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a5, 21, &v286);
  v97 = (uint64_t (***)())v289;
  if (v289 == (uint64_t *)&v286)
  {
    v98 = 4;
    v97 = &v286;
LABEL_184:
    (*v97)[v98]();
  }
  else if (v289)
  {
    v98 = 5;
    goto LABEL_184;
  }
  v284[0] = (uint64_t)&off_1E42CDC88;
  v284[1] = a1;
  v285 = v284;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a5, 22, v284);
  v99 = v285;
  if (v285 == v284)
  {
    v100 = 4;
    v99 = v284;
LABEL_189:
    (*(void (**)(void))(*v99 + 8 * v100))();
  }
  else if (v285)
  {
    v100 = 5;
    goto LABEL_189;
  }
  v282[0] = &off_1E42CDCD0;
  v282[1] = a4;
  v283 = v282;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a5, 23, v282);
  v101 = v283;
  if (v283 == v282)
  {
    v102 = 4;
    v101 = v282;
LABEL_194:
    (*(void (**)(void))(*v101 + 8 * v102))();
  }
  else if (v283)
  {
    v102 = 5;
    goto LABEL_194;
  }
LABEL_195:
  v103 = *(uint64_t **)(a2 + 8);
  v104 = (int8x8_t)v103[1];
  if (!*(_QWORD *)&v104)
    goto LABEL_241;
  v105 = (uint8x8_t)vcnt_s8(v104);
  v105.i16[0] = vaddlv_u8(v105);
  if (v105.u32[0] > 1uLL)
  {
    v106 = 0x41E8D6E445F4145;
    if (*(_QWORD *)&v104 <= 0x41E8D6E445F4145uLL)
      v106 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v104;
  }
  else
  {
    v106 = (*(_QWORD *)&v104 - 1) & 0x41E8D6E445F4145;
  }
  v107 = *v103;
  v108 = *(uint64_t **)(*v103 + 8 * v106);
  if (!v108 || (v108 = (uint64_t *)*v108) == 0)
  {
LABEL_218:
    if (v105.u32[0] > 1uLL)
      goto LABEL_221;
    goto LABEL_219;
  }
  if (v105.u32[0] < 2uLL)
  {
    while (1)
    {
      v110 = v108[1];
      if (v110 == 0x41E8D6E445F4145)
      {
        if (v108[2] == 0x41E8D6E445F4145)
          goto LABEL_216;
      }
      else if ((v110 & (*(_QWORD *)&v104 - 1)) != v106)
      {
        goto LABEL_220;
      }
      v108 = (uint64_t *)*v108;
      if (!v108)
        goto LABEL_218;
    }
  }
  while (1)
  {
    v109 = v108[1];
    if (v109 == 0x41E8D6E445F4145)
      break;
    if (v109 >= *(_QWORD *)&v104)
      v109 %= *(_QWORD *)&v104;
    if (v109 != v106)
      goto LABEL_220;
LABEL_205:
    v108 = (uint64_t *)*v108;
    if (!v108)
      goto LABEL_218;
  }
  if (v108[2] != 0x41E8D6E445F4145)
    goto LABEL_205;
LABEL_216:
  v111 = v108[5];
  if (*(_QWORD *)(v111 + 8) == 0x41E8D6E445F4145)
  {
    v108 = *(uint64_t **)(v111 + 32);
    goto LABEL_218;
  }
LABEL_220:
  v108 = 0;
  if (v105.u32[0] <= 1uLL)
  {
LABEL_219:
    v112 = (*(_QWORD *)&v104 - 1) & 0xDFC317497CF9A4BFLL;
    goto LABEL_223;
  }
LABEL_221:
  v112 = 0xDFC317497CF9A4BFLL;
  if (*(_QWORD *)&v104 <= 0xDFC317497CF9A4BFLL)
    v112 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v104;
LABEL_223:
  v113 = *(_QWORD **)(v107 + 8 * v112);
  if (!v113)
    goto LABEL_251;
  v114 = (_QWORD *)*v113;
  if (!v114)
    goto LABEL_251;
  if (v105.u32[0] < 2uLL)
  {
    v115 = *(_QWORD *)&v104 - 1;
    while (1)
    {
      v117 = v114[1];
      if (v117 == 0xDFC317497CF9A4BFLL)
      {
        if (v114[2] == 0xDFC317497CF9A4BFLL)
          goto LABEL_239;
      }
      else if ((v117 & v115) != v112)
      {
        goto LABEL_251;
      }
      v114 = (_QWORD *)*v114;
      if (!v114)
        goto LABEL_251;
    }
  }
  while (2)
  {
    v116 = v114[1];
    if (v116 != 0xDFC317497CF9A4BFLL)
    {
      if (v116 >= *(_QWORD *)&v104)
        v116 %= *(_QWORD *)&v104;
      if (v116 != v112)
        goto LABEL_251;
      goto LABEL_228;
    }
    if (v114[2] != 0xDFC317497CF9A4BFLL)
    {
LABEL_228:
      v114 = (_QWORD *)*v114;
      if (!v114)
        goto LABEL_251;
      continue;
    }
    break;
  }
LABEL_239:
  v118 = (int8x8_t *)v114[5];
  if (*(_QWORD *)&v118[1] == 0xDFC317497CF9A4BFLL)
  {
    v104 = v118[4];
    if (!v108)
      goto LABEL_241;
LABEL_252:
    v119 = 0;
    v281 = *((_BYTE *)v108 + 227);
    v280 = *((_BYTE *)v108 + 225) != 0;
    if (!*(_QWORD *)&v104)
      goto LABEL_243;
LABEL_242:
    v104.i8[0] = *(_BYTE *)(*(_QWORD *)&v104 + 64) != 0;
    goto LABEL_243;
  }
LABEL_251:
  v104 = 0;
  if (v108)
    goto LABEL_252;
LABEL_241:
  v108 = 0;
  v281 = 0;
  v119 = 1;
  v280 = 0;
  if (v104)
    goto LABEL_242;
LABEL_243:
  v279 = v104.i8[0];
  if ((v119 & 1) != 0 || !*((_BYTE *)v108 + 224))
  {
    v121 = 0;
  }
  else
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    v121 = objc_msgSend(v120, "enableDOF");

  }
  v278 = v121;
  if (!objc_msgSend(*(id *)(a3 + 104), "supportsFramebufferFetch"))
  {
    v255 = *(id *)(a3 + 104);
    v125 = objc_msgSend(v255, "finalRenderTarget");
    v126 = objc_msgSend(v255, "linearRenderTarget");
    if (!v126)
      goto LABEL_282;
    v128 = *(_QWORD *)(a1 + 24);
    v129 = *(_DWORD **)(v126 + 336);
    if (v129)
    {
      LODWORD(v130) = v129[9];
      LODWORD(v129) = v129[10];
LABEL_281:
      *(_DWORD *)(v128 + 40) = v130;
      *(_DWORD *)(v128 + 44) = (_DWORD)v129;
      v139 = *(_OWORD *)(v126 + 72);
      *(_OWORD *)(v128 + 48) = *(_OWORD *)(v126 + 56);
      *(_OWORD *)(v128 + 64) = v139;
LABEL_282:
      memset(v313, 0, 25);
      v312 = 0u;
      memset(v311, 0, sizeof(v311));
      md::FrameGraphUtils::prepareGraphBuilderForRenderTarget((uint64_t)v311, a5, (_QWORD *)v126, "renderTarget_linearColorBuffer", 0x6F1219E0000001EuLL, "renderTarget_linearDepthStencilBuffer", 0xE3A8F65400000025, v127, "renderTarget_linearMsaaResolveBuffer", 0xEECC3D6200000024);
      v140 = *((_OWORD *)a4 + 3);
      v272 = *((_OWORD *)a4 + 2);
      v273 = v140;
      v274 = a4[8];
      v141 = *((_OWORD *)a4 + 1);
      *(_OWORD *)v271 = *(_OWORD *)a4;
      *(_OWORD *)&v271[16] = v141;
      v275 = 0;
      if (*((_BYTE *)a4 + 72))
      {
        v276 = *(_OWORD *)((char *)a4 + 76);
        v277 = *((_DWORD *)a4 + 23);
        v275 = 1;
      }
      v142 = *(unsigned int **)(v125 + 88);
      v143 = v142[20];
      v144 = v142[21];
      v145 = v142[17];
      v146 = v142[18];
      if ((_DWORD)v145)
        v147 = v145 | 0x100000000;
      else
        v147 = 0;
      *(_WORD *)v265 = 0;
      *(_QWORD *)&v265[4] = v143;
      *(_DWORD *)&v265[12] = v144;
      *(_DWORD *)&v265[16] = 0;
      *(_QWORD *)&v265[20] = v147;
      *(_QWORD *)&v265[40] = 0x100000000;
      LODWORD(v266) = v146;
      BYTE4(v266) = 0;
      v265[36] = 1;
      *(_QWORD *)&v265[28] = 0x200000001;
      Resource = md::FrameGraphBuilder::createResource(a5, (uint64_t)v265, "renderTarget_colorBuffer_first", 0xE22C27790000001ELL, 0);
      v149 = (_BYTE *)Resource;
      *(_QWORD *)v271 = Resource;
      if (!v275)
      {
        v150 = *(_OWORD *)(Resource + 88);
        v277 = *(_DWORD *)(Resource + 104);
        v276 = v150;
        v275 = 1;
      }
      *(_QWORD *)v259 = Resource;
      v151 = operator new();
      *(_BYTE *)(v151 + 8) = *v149;
      *(_QWORD *)(v151 + 16) = v142;
      *(_QWORD *)v151 = &off_1E42A8F38;
      v152 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a5 + 88), (unint64_t)v149, v259);
      v153 = v152[3];
      v152[3] = v151;
      if (v153)
        (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
      *(_OWORD *)&v265[16] = *(_OWORD *)&v271[16];
      *(_OWORD *)&v265[32] = v272;
      v266 = v273;
      v267 = v274;
      *(_OWORD *)v265 = *(_OWORD *)v271;
      v268 = 0;
      if (v275)
      {
        v269 = v276;
        v270 = v277;
        v268 = 1;
      }
      v154 = *(unsigned int **)(v125 + 88);
      v155 = v154[20];
      v156 = v154[21];
      v157 = v154[17];
      v158 = v154[18];
      if ((_DWORD)v157)
        v159 = v157 | 0x100000000;
      else
        v159 = 0;
      *(_WORD *)v259 = 0;
      *(_QWORD *)&v259[4] = v155;
      *(_DWORD *)&v259[12] = v156;
      *(_DWORD *)&v259[16] = 0;
      *(_QWORD *)&v259[20] = v159;
      *(_QWORD *)&v259[40] = 0x100000000;
      LODWORD(v260) = v158;
      BYTE4(v260) = 0;
      v259[36] = 1;
      *(_QWORD *)&v259[28] = 0x200000002;
      v160 = md::FrameGraphBuilder::createResource(a5, (uint64_t)v259, "renderTarget_colorBuffer_intermediate", 0x6E2CAE8D00000025uLL, 0);
      v161 = (_BYTE *)v160;
      *(_QWORD *)v265 = v160;
      if (!v268)
      {
        v162 = *(_OWORD *)(v160 + 88);
        v270 = *(_DWORD *)(v160 + 104);
        v269 = v162;
        v268 = 1;
      }
      *(_QWORD *)v304 = v160;
      v163 = operator new();
      *(_BYTE *)(v163 + 8) = *v161;
      *(_QWORD *)(v163 + 16) = v154;
      *(_QWORD *)v163 = &off_1E42A8F38;
      v164 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a5 + 88), (unint64_t)v161, v304);
      v165 = v164[3];
      v164[3] = v163;
      if (v165)
        (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
      *(_OWORD *)&v259[32] = v272;
      v260 = v273;
      v261 = v274;
      *(_OWORD *)v259 = *(_OWORD *)v271;
      *(_OWORD *)&v259[16] = *(_OWORD *)&v271[16];
      v262 = 0;
      if (v275)
      {
        v263 = v276;
        v264 = v277;
        v262 = 1;
      }
      v166 = *(unsigned int **)(v125 + 88);
      v167 = v166[20];
      v168 = v166[21];
      v169 = v166[17];
      v170 = v166[18];
      if ((_DWORD)v169)
        v171 = v169 | 0x100000000;
      else
        v171 = 0;
      *(_WORD *)v304 = 0;
      *(_DWORD *)&v304[4] = v167;
      *(_DWORD *)&v304[8] = 0;
      v305 = v168;
      *(_QWORD *)&v306 = v171;
      v308 = 0x100000000;
      v309 = v170;
      v310 = 0;
      v307 = 1;
      *((_QWORD *)&v306 + 1) = 0x300000002;
      v172 = md::FrameGraphBuilder::createResource(a5, (uint64_t)v304, "renderTarget_colorBuffer_last", 0x7DE608A50000001DuLL, 0);
      v173 = (_BYTE *)v172;
      *(_QWORD *)v259 = v172;
      if (!v262)
      {
        v174 = *(_OWORD *)(v172 + 88);
        v264 = *(_DWORD *)(v172 + 104);
        v263 = v174;
        v262 = 1;
      }
      v302[0] = v172;
      v175 = operator new();
      *(_BYTE *)(v175 + 8) = *v173;
      *(_QWORD *)(v175 + 16) = v166;
      *(_QWORD *)v175 = &off_1E42A8F38;
      v176 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)(a5 + 88), (unint64_t)v173, v302);
      v177 = v176[3];
      v176[3] = v175;
      if (v177)
        (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
      v282[0] = 0;
      v303 = 0;
      v178 = operator new(0x30uLL);
      *v178 = &off_1E42CDF58;
      v178[1] = &v280;
      v178[2] = a1;
      v178[3] = &v281;
      v178[4] = &v279;
      v178[5] = v271;
      v303 = v178;
      v179 = md::FrameGraphBuilder::addRenderPass<md::StandardBelowOverlaysCommandBufferIdInfo>((unsigned __int8 ***)a5, 10, v302);
      v180 = v303;
      if (v303 == v302)
      {
        v181 = 4;
        v180 = v302;
      }
      else
      {
        if (!v303)
          goto LABEL_314;
        v181 = 5;
      }
      (*(void (**)(void))(*v180 + 8 * v181))();
LABEL_314:
      v282[0] = v179;
      v258 = 0;
      v298 = &off_1E42CDFA0;
      v299 = v282;
      v300 = v311;
      v301 = &v298;
      v182 = (uint64_t (**)())operator new();
      *v182 = (uint64_t (*)())&off_1E4290AA0;
      v183 = operator new(0x150uLL);
      v183[1] = 0;
      v183[2] = 0;
      *v183 = &off_1E42DE9D0;
      v184 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v183 + 3), 1);
      v182[3] = 0;
      v182[1] = (uint64_t (*)())v184;
      v182[2] = (uint64_t (*)())v183;
      v182[4] = 0;
      v182[5] = 0;
      v185 = (uint64_t (*)())operator new(8uLL);
      v182[3] = v185;
      *(_QWORD *)v185 = 0;
      v185 = (uint64_t (*)())((char *)v185 + 8);
      v182[4] = v185;
      v182[5] = v185;
      *v182 = (uint64_t (*)())&off_1E428C5E0;
      v186 = (ggl::CommandBuffer *)operator new();
      v187 = ggl::CommandBuffer::CommandBuffer(v186, 0, "OverlaysBeneath");
      v188 = *(_QWORD *)v182[3];
      *(_QWORD *)v182[3] = v186;
      if (v188)
        (*(void (**)(uint64_t, double))(*(_QWORD *)v188 + 8))(v188, v187);
      ggl::RenderQueue::setBufferForLayer((uint64_t)v182[1], 0, v186);
      v294 = v182;
      if (v301)
      {
        if (v301 == &v298)
        {
          *(_QWORD *)((char *)&v306 + 4) = v304;
          ((void (*)(uint64_t, uint64_t))v298[3])((uint64_t)&v298, (uint64_t)v304);
          v189 = *(_QWORD *)((char *)&v306 + 4);
LABEL_322:
          v190 = md::FrameGraphBuilder::addRenderPass((unsigned __int8 ***)a5, 11, (uint64_t *)&v294, v189);
          v191 = *(_QWORD **)((char *)&v306 + 4);
          if (*(_BYTE **)((char *)&v306 + 4) == v304)
          {
            v192 = 4;
            v191 = v304;
          }
          else
          {
            if (!*(_QWORD *)((char *)&v306 + 4))
              goto LABEL_327;
            v192 = 5;
          }
          (*(void (**)(void))(*v191 + 8 * v192))();
LABEL_327:
          if (v294)
            (*((void (**)(uint64_t (**)()))*v294 + 1))(v294);
          v193 = v301;
          if (v301 == &v298)
          {
            v194 = 4;
            v193 = &v298;
          }
          else
          {
            if (!v301)
            {
LABEL_334:
              v257 = 0;
              v258 = v190;
              v294 = &off_1E42CDFE8;
              v295 = &v258;
              v296 = v265;
              v297 = (uint64_t *)&v294;
              v195 = (uint64_t (**)())operator new();
              *v195 = (uint64_t (*)())&off_1E4290AA0;
              v196 = operator new(0x150uLL);
              v196[2] = 0;
              *v196 = &off_1E42DE9D0;
              v196[1] = 0;
              v197 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v196 + 3), 17);
              v195[3] = 0;
              v198 = v195 + 3;
              v195[1] = (uint64_t (*)())v197;
              v195[2] = (uint64_t (*)())v196;
              v195[4] = 0;
              v195[5] = 0;
              v199 = (char *)operator new(0x88uLL);
              v200 = 0;
              v195[4] = (uint64_t (*)())(v199 + 136);
              v195[5] = (uint64_t (*)())(v199 + 136);
              *(_OWORD *)v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
              *((_OWORD *)v199 + 2) = 0u;
              *((_OWORD *)v199 + 3) = 0u;
              *((_OWORD *)v199 + 4) = 0u;
              *((_OWORD *)v199 + 5) = 0u;
              *((_OWORD *)v199 + 6) = 0u;
              *((_OWORD *)v199 + 7) = 0u;
              *((_QWORD *)v199 + 16) = 0;
              v195[3] = (uint64_t (*)())v199;
              *v195 = (uint64_t (*)())&off_1E428C680;
              do
              {
                v201 = (ggl::CommandBuffer *)operator new();
                v202 = v201;
                v203 = "<Invalid>";
                if (v200 <= 0x10u)
                  v203 = off_1E42F60D0[v200];
                v204 = ggl::CommandBuffer::CommandBuffer(v201, v200, v203);
                v205 = *(_QWORD *)(*v198 + 8 * v200);
                *(_QWORD *)(*v198 + 8 * v200) = v202;
                if (v205)
                  (*(void (**)(uint64_t, double))(*(_QWORD *)v205 + 8))(v205, v204);
                ggl::RenderQueue::setBufferForLayer((uint64_t)v195[1], v200++, v202);
              }
              while (v200 != 17);
              v290 = v195;
              if (v297)
              {
                if (v297 == (uint64_t *)&v294)
                {
                  *(_QWORD *)((char *)&v306 + 4) = v304;
                  ((void (*)(uint64_t (***)(), _BYTE *))v294[3])(&v294, v304);
                  v206 = *(_QWORD *)((char *)&v306 + 4);
LABEL_346:
                  v207 = md::FrameGraphBuilder::addRenderPass((unsigned __int8 ***)a5, 12, (uint64_t *)&v290, v206);
                  v208 = *(_QWORD **)((char *)&v306 + 4);
                  if (*(_BYTE **)((char *)&v306 + 4) == v304)
                  {
                    v209 = 4;
                    v208 = v304;
                  }
                  else
                  {
                    if (!*(_QWORD *)((char *)&v306 + 4))
                      goto LABEL_351;
                    v209 = 5;
                  }
                  (*(void (**)(void))(*v208 + 8 * v209))();
LABEL_351:
                  if (v290)
                    (*((void (**)(uint64_t (**)()))*v290 + 1))(v290);
                  v210 = (uint64_t (***)())v297;
                  if (v297 == (uint64_t *)&v294)
                  {
                    v211 = 4;
                    v210 = &v294;
                  }
                  else
                  {
                    if (!v297)
                      goto LABEL_358;
                    v211 = 5;
                  }
                  (*v210)[v211]();
LABEL_358:
                  v256 = 0;
                  v257 = v207;
                  v290 = &off_1E42CE030;
                  v291 = &v257;
                  v292 = v311;
                  v293 = (uint64_t *)&v290;
                  v212 = (uint64_t (**)())operator new();
                  *v212 = (uint64_t (*)())&off_1E4290AA0;
                  v213 = operator new(0x150uLL);
                  v213[2] = 0;
                  *v213 = &off_1E42DE9D0;
                  v213[1] = 0;
                  v214 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v213 + 3), 1);
                  v212[3] = 0;
                  v212[1] = (uint64_t (*)())v214;
                  v212[2] = (uint64_t (*)())v213;
                  v212[4] = 0;
                  v212[5] = 0;
                  v215 = (uint64_t (*)())operator new(8uLL);
                  v212[3] = v215;
                  *(_QWORD *)v215 = 0;
                  v215 = (uint64_t (*)())((char *)v215 + 8);
                  v212[4] = v215;
                  v212[5] = v215;
                  *v212 = (uint64_t (*)())&off_1E428C5C0;
                  v216 = (ggl::CommandBuffer *)operator new();
                  v217 = ggl::CommandBuffer::CommandBuffer(v216, 0, "OverlaysAbove");
                  v218 = *(_QWORD *)v212[3];
                  *(_QWORD *)v212[3] = v216;
                  if (v218)
                    (*(void (**)(uint64_t, double))(*(_QWORD *)v218 + 8))(v218, v217);
                  ggl::RenderQueue::setBufferForLayer((uint64_t)v212[1], 0, v216);
                  v286 = v212;
                  if (v293)
                  {
                    if (v293 == (uint64_t *)&v290)
                    {
                      *(_QWORD *)((char *)&v306 + 4) = v304;
                      ((void (*)(uint64_t (***)(), _BYTE *))v290[3])(&v290, v304);
                      v219 = *(_QWORD *)((char *)&v306 + 4);
LABEL_366:
                      v220 = md::FrameGraphBuilder::addRenderPass((unsigned __int8 ***)a5, 13, (uint64_t *)&v286, v219);
                      v221 = *(_QWORD **)((char *)&v306 + 4);
                      if (*(_BYTE **)((char *)&v306 + 4) == v304)
                      {
                        v222 = 4;
                        v221 = v304;
                      }
                      else
                      {
                        if (!*(_QWORD *)((char *)&v306 + 4))
                          goto LABEL_371;
                        v222 = 5;
                      }
                      (*(void (**)(void))(*v221 + 8 * v222))();
LABEL_371:
                      if (v286)
                        (*((void (**)(uint64_t (**)()))*v286 + 1))(v286);
                      v223 = (uint64_t (***)())v293;
                      if (v293 == (uint64_t *)&v290)
                      {
                        v224 = 4;
                        v223 = &v290;
                      }
                      else
                      {
                        if (!v293)
                          goto LABEL_378;
                        v224 = 5;
                      }
                      (*v223)[v224]();
LABEL_378:
                      v256 = v220;
                      v286 = &off_1E42CE078;
                      v287 = &v256;
                      v288 = v259;
                      v289 = (uint64_t *)&v286;
                      v225 = (_QWORD *)operator new();
                      *v225 = &off_1E4290AA0;
                      v226 = v225 + 1;
                      v227 = operator new(0x150uLL);
                      v227[2] = 0;
                      *v227 = &off_1E42DE9D0;
                      v227[1] = 0;
                      v228 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v227 + 3), 6);
                      v225[3] = 0;
                      v229 = v225 + 3;
                      v225[1] = v228;
                      v225[2] = v227;
                      v225[4] = 0;
                      v225[5] = 0;
                      v230 = operator new(0x30uLL);
                      v225[4] = v230 + 3;
                      v225[5] = v230 + 3;
                      *v230 = 0u;
                      v230[1] = 0u;
                      v230[2] = 0u;
                      v225[3] = v230;
                      *v225 = &off_1E428C580;
                      v231 = (ggl::CommandBuffer *)operator new();
                      v232 = ggl::CommandBuffer::CommandBuffer(v231, 0, "LabelsAboveExternalOverlays");
                      v233 = *(_QWORD *)v225[3];
                      *(_QWORD *)v225[3] = v231;
                      if (v233)
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v233 + 8))(v233, v232);
                      ggl::RenderQueue::setBufferForLayer(*v226, 0, v231);
                      v234 = (ggl::CommandBuffer *)operator new();
                      v235 = ggl::CommandBuffer::CommandBuffer(v234, 1, "NavigationPuck");
                      v236 = *(_QWORD *)(*v229 + 8);
                      *(_QWORD *)(*v229 + 8) = v234;
                      if (v236)
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v236 + 8))(v236, v235);
                      ggl::RenderQueue::setBufferForLayer(*v226, 1, v234);
                      v237 = (ggl::CommandBuffer *)operator new();
                      v238 = ggl::CommandBuffer::CommandBuffer(v237, 2, "LabelsAbovePuck");
                      v239 = *(_QWORD *)(*v229 + 16);
                      *(_QWORD *)(*v229 + 16) = v237;
                      if (v239)
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v239 + 8))(v239, v238);
                      ggl::RenderQueue::setBufferForLayer(*v226, 2, v237);
                      v240 = (ggl::CommandBuffer *)operator new();
                      v241 = ggl::CommandBuffer::CommandBuffer(v240, 3, "GridLast");
                      v242 = *(_QWORD *)(*v229 + 24);
                      *(_QWORD *)(*v229 + 24) = v240;
                      if (v242)
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v242 + 8))(v242, v241);
                      ggl::RenderQueue::setBufferForLayer(*v226, 3, v240);
                      v243 = (ggl::CommandBuffer *)operator new();
                      v244 = ggl::CommandBuffer::CommandBuffer(v243, 4, "Postchain");
                      v245 = *(_QWORD *)(*v229 + 32);
                      *(_QWORD *)(*v229 + 32) = v243;
                      if (v245)
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v245 + 8))(v245, v244);
                      ggl::RenderQueue::setBufferForLayer(*v226, 4, v243);
                      v246 = (ggl::CommandBuffer *)operator new();
                      v247 = ggl::CommandBuffer::CommandBuffer(v246, 5, "Debug");
                      v248 = *(_QWORD *)(*v229 + 40);
                      *(_QWORD *)(*v229 + 40) = v246;
                      if (v248)
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v248 + 8))(v248, v247);
                      ggl::RenderQueue::setBufferForLayer(v225[1], 5, v246);
                      v284[0] = (uint64_t)v225;
                      if (v289)
                      {
                        if (v289 == (uint64_t *)&v286)
                        {
                          *(_QWORD *)((char *)&v306 + 4) = v304;
                          ((void (*)(uint64_t (***)(), _BYTE *))v286[3])(&v286, v304);
                          v249 = *(_QWORD *)((char *)&v306 + 4);
LABEL_396:
                          md::FrameGraphBuilder::addRenderPass((unsigned __int8 ***)a5, 14, v284, v249);
                          v250 = *(_QWORD **)((char *)&v306 + 4);
                          if (*(_BYTE **)((char *)&v306 + 4) == v304)
                          {
                            v251 = 4;
                            v250 = v304;
                          }
                          else
                          {
                            if (!*(_QWORD *)((char *)&v306 + 4))
                              goto LABEL_401;
                            v251 = 5;
                          }
                          (*(void (**)(void))(*v250 + 8 * v251))();
LABEL_401:
                          if (v284[0])
                            (*(void (**)(uint64_t))(*(_QWORD *)v284[0] + 8))(v284[0]);
                          v252 = (uint64_t (***)())v289;
                          if (v289 == (uint64_t *)&v286)
                          {
                            v253 = 4;
                            v252 = &v286;
                          }
                          else
                          {
                            if (!v289)
                            {
LABEL_408:

                              return;
                            }
                            v253 = 5;
                          }
                          (*v252)[v253]();
                          goto LABEL_408;
                        }
                        v249 = (*(uint64_t (**)(void))(*v289 + 16))();
                      }
                      else
                      {
                        v249 = 0;
                      }
                      *(_QWORD *)((char *)&v306 + 4) = v249;
                      goto LABEL_396;
                    }
                    v219 = (*(uint64_t (**)(void))(*v293 + 16))();
                  }
                  else
                  {
                    v219 = 0;
                  }
                  *(_QWORD *)((char *)&v306 + 4) = v219;
                  goto LABEL_366;
                }
                v206 = (*(uint64_t (**)(void))(*v297 + 16))();
              }
              else
              {
                v206 = 0;
              }
              *(_QWORD *)((char *)&v306 + 4) = v206;
              goto LABEL_346;
            }
            v194 = 5;
          }
          (*v193)[v194]();
          goto LABEL_334;
        }
        v189 = (*v301)[2]();
      }
      else
      {
        v189 = 0;
      }
      *(_QWORD *)((char *)&v306 + 4) = v189;
      goto LABEL_322;
    }
    v130 = *(_QWORD *)(v126 + 88);
    if (v130)
    {
      v131 = (_DWORD *)(v126 + 96);
    }
    else
    {
      v130 = *(_QWORD *)(v126 + 280);
      if (!v130)
        goto LABEL_270;
      v131 = (_DWORD *)(v126 + 288);
    }
    v132 = 80;
    if (*(_DWORD *)(v130 + 56) == 3)
      v132 = 196;
    v133 = *(_DWORD *)(v130 + v132);
    v134 = v133 >> *v131;
    if (v134 <= 1)
      v134 = 1;
    if (v133)
      LODWORD(v130) = v134;
    else
      LODWORD(v130) = 0;
LABEL_270:
    v129 = *(_DWORD **)(v126 + 88);
    if (v129)
    {
      v135 = (_DWORD *)(v126 + 96);
    }
    else
    {
      v129 = *(_DWORD **)(v126 + 280);
      if (!v129)
        goto LABEL_281;
      v135 = (_DWORD *)(v126 + 288);
    }
    v136 = 21;
    if (v129[14] == 3)
      v136 = 49;
    v137 = v129[v136];
    v138 = v137 >> *v135;
    if (v138 <= 1)
      v138 = 1;
    if (v137)
      LODWORD(v129) = v138;
    else
      LODWORD(v129) = 0;
    goto LABEL_281;
  }
  v122 = operator new(0x38uLL);
  *v122 = &off_1E42CDF10;
  v122[1] = &v280;
  v122[2] = a1;
  v122[3] = &v281;
  v122[4] = &v279;
  v122[5] = &v278;
  v122[6] = a4;
  v311[3] = (int32x2_t)v122;
  md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>((unsigned __int8 ***)a5, 9, v311);
  v123 = (int32x2_t *)v311[3];
  if ((int32x2_t *)v311[3] == v311)
  {
    v124 = 4;
    v123 = v311;
LABEL_258:
    (*(void (**)(void))(*(_QWORD *)v123 + 8 * v124))();
  }
  else if (v311[3])
  {
    v124 = 5;
    goto LABEL_258;
  }
}

void sub_19F246544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F246838()
{
  md::RenderQueueBase *v0;

  md::RenderQueueBase::~RenderQueueBase(v0);
  JUMPOUT(0x19F246844);
}

void sub_19F246878()
{
  md::RenderQueueBase *v0;

  md::RenderQueueBase::~RenderQueueBase(v0);
  JUMPOUT(0x19F246884);
}

uint64_t md::FrameGraphBuilder::addRenderPass<md::DaVinciShadowCommandBufferIdInfo>(unsigned __int8 ***a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  ggl::RenderQueue *v9;
  _QWORD *v10;
  _OWORD *v11;
  ggl::CommandBuffer *v12;
  double v13;
  uint64_t v14;
  ggl::CommandBuffer *v15;
  double v16;
  uint64_t v17;
  ggl::CommandBuffer *v18;
  double v19;
  uint64_t v20;
  ggl::CommandBuffer *v21;
  double v22;
  uint64_t v23;
  ggl::CommandBuffer *v24;
  double v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E4290AA0;
  v7 = v6 + 1;
  v8 = operator new(0x150uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42DE9D0;
  v9 = ggl::RenderQueue::RenderQueue((ggl::RenderQueue *)(v8 + 3), 5);
  v6[3] = 0;
  v10 = v6 + 3;
  v6[1] = v9;
  v6[2] = v8;
  v6[4] = 0;
  v6[5] = 0;
  v11 = operator new(0x28uLL);
  v6[4] = (char *)v11 + 40;
  v6[5] = (char *)v11 + 40;
  *v11 = 0u;
  v11[1] = 0u;
  *((_QWORD *)v11 + 4) = 0;
  v6[3] = v11;
  *v6 = &off_1E428C560;
  v12 = (ggl::CommandBuffer *)operator new();
  v13 = ggl::CommandBuffer::CommandBuffer(v12, 0, "ClearBuffers");
  v14 = *(_QWORD *)v6[3];
  *(_QWORD *)v6[3] = v12;
  if (v14)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v14 + 8))(v14, v13);
  ggl::RenderQueue::setBufferForLayer(*v7, 0, v12);
  v15 = (ggl::CommandBuffer *)operator new();
  v16 = ggl::CommandBuffer::CommandBuffer(v15, 1, "ClearLM");
  v17 = *(_QWORD *)(*v10 + 8);
  *(_QWORD *)(*v10 + 8) = v15;
  if (v17)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v17 + 8))(v17, v16);
  ggl::RenderQueue::setBufferForLayer(*v7, 1, v15);
  v18 = (ggl::CommandBuffer *)operator new();
  v19 = ggl::CommandBuffer::CommandBuffer(v18, 2, "DaVinciGroundCover");
  v20 = *(_QWORD *)(*v10 + 16);
  *(_QWORD *)(*v10 + 16) = v18;
  if (v20)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v20 + 8))(v20, v19);
  ggl::RenderQueue::setBufferForLayer(*v7, 2, v18);
  v21 = (ggl::CommandBuffer *)operator new();
  v22 = ggl::CommandBuffer::CommandBuffer(v21, 3, "DaVinciBuildings");
  v23 = *(_QWORD *)(*v10 + 24);
  *(_QWORD *)(*v10 + 24) = v21;
  if (v23)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v23 + 8))(v23, v22);
  ggl::RenderQueue::setBufferForLayer(*v7, 3, v21);
  v24 = (ggl::CommandBuffer *)operator new();
  v25 = ggl::CommandBuffer::CommandBuffer(v24, 4, "NonTiledEntities");
  v26 = *(_QWORD *)(*v10 + 32);
  *(_QWORD *)(*v10 + 32) = v24;
  if (v26)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v26 + 8))(v26, v25);
  ggl::RenderQueue::setBufferForLayer(v6[1], 4, v24);
  v32 = v6;
  v27 = (_QWORD *)a3[3];
  if (!v27)
  {
    v28 = 0;
    goto LABEL_15;
  }
  if (v27 != a3)
  {
    v28 = (*(uint64_t (**)(_QWORD *))(*v27 + 16))(v27);
LABEL_15:
    v34 = (_BYTE *)v28;
    goto LABEL_17;
  }
  v34 = v33;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v33);
  v28 = (uint64_t)v34;
LABEL_17:
  md::FrameGraphBuilder::addRenderPass(a1, a2, (uint64_t *)&v32, v28);
  v29 = v34;
  if (v34 == v33)
  {
    v30 = 4;
    v29 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_22;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_22:
  result = (uint64_t)v32;
  if (v32)
    return (*(uint64_t (**)(_QWORD *))(*v32 + 8))(v32);
  return result;
}

void sub_19F246C60(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19F246C7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  MEMORY[0x1A1AF4E00](v1, 0xA1C4084DA3AFDLL);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::needsDebugDraw(md::CompositeLabeler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = v1 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 296))(*(_QWORD *)(v3 - 8));
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

BOOL md::MapStandardLabeler::needsDebugDraw(md::MapStandardLabeler *this)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    v3 = atomic_load((unsigned __int8 *)(v2 + 1242));
    if ((v3 & 1) == 0)
      (*(void (**)(md::MapStandardLabeler *))(*(_QWORD *)this + 272))(this);
  }
  v4 = *((_QWORD *)this + 3);
  return *(_BYTE *)(v4 + 3616)
      || *(_BYTE *)(v4 + 3623)
      || *((_QWORD *)this + 23)
      || *((_QWORD *)this + 25)
      || *((_BYTE *)this + 452) != 0;
}

BOOL md::StandardLabeler::needsDebugDraw(md::StandardLabeler *this)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    v3 = atomic_load((unsigned __int8 *)(v2 + 1242));
    if ((v3 & 1) == 0)
      (*(void (**)(md::StandardLabeler *))(*(_QWORD *)this + 272))(this);
  }
  v4 = *((_QWORD *)this + 3);
  return *(_BYTE *)(v4 + 3616) || *(_BYTE *)(v4 + 3623) || *((_QWORD *)this + 23) || *((_QWORD *)this + 25) != 0;
}

uint64_t md::MapNavLabeler::needsDebugDraw(md::MapNavLabeler *this)
{
  uint64_t result;

  if (*(_BYTE *)(*((_QWORD *)this + 9) + 232) || *(_BYTE *)(*((_QWORD *)this + 8) + 249))
    return 1;
  result = (*(uint64_t (**)(md::MapNavLabeler *))(*(_QWORD *)this + 352))(this);
  if ((_DWORD)result)
    return objc_msgSend(*((id *)this + 7), "needsDebugDraw");
  return result;
}

void sub_19F247198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F2473CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F247720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F247C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);

  _Unwind_Resume(a1);
}

_QWORD *md::RouteRenderLayer::layout(uint64_t **this, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int8 *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL4 v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *result;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  _QWORD v116[3];
  _QWORD *v117;
  _QWORD v118[3];
  _QWORD *v119;
  _QWORD v120[3];
  _QWORD *v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v118[0] = &off_1E42CDA90;
  v118[1] = a2;
  v119 = v118;
  v116[0] = &off_1E42CDAD8;
  v116[1] = a2;
  v117 = v116;
  v121 = v120;
  v120[0] = &off_1E42CDAD8;
  v120[1] = a2;
  std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v118);
  v4 = v117;
  if (v117 == v116)
  {
    v5 = 4;
    v4 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v119;
  if (v119 == v118)
  {
    v7 = 4;
    v6 = v118;
    goto LABEL_10;
  }
  if (v119)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  md::RouteRenderLayer::runLayoutLogic((md::RouteRenderLayer *)this, (const md::LayoutContext *)a2);
  v8 = a2[1];
  v9 = (int8x8_t)v8[1];
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] >= 2uLL)
  {
    v14 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v9 <= 0x8BD499FBD96FBB9ELL)
      v14 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v9;
    v12 = *v8;
    v13 = *(_QWORD **)(*v8 + 8 * v14);
    do
    {
      do
        v13 = (_QWORD *)*v13;
      while (v13[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v13[2] != 0x8BD499FBD96FBB9ELL);
    v11 = *(_QWORD *)&v9 - 1;
  }
  else
  {
    v11 = *(_QWORD *)&v9 - 1;
    v12 = *v8;
    v13 = *(_QWORD **)(*v8 + 8 * ((*(_QWORD *)&v9 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        v13 = (_QWORD *)*v13;
      while (v13[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v13[2] != 0x8BD499FBD96FBB9ELL);
  }
  v15 = v13[5];
  if (v10.u32[0] > 1uLL)
  {
    v16 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v9 <= 0xC97B9E962ADF4AD4)
      v16 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v9;
  }
  else
  {
    v16 = v11 & 0xC97B9E962ADF4AD4;
  }
  v17 = *(unsigned __int8 **)(v15 + 32);
  v18 = *(_QWORD **)(v12 + 8 * v16);
  if (!v18)
    goto LABEL_44;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_44;
  if (v10.u32[0] < 2uLL)
  {
    while (1)
    {
      v20 = v19[1];
      if (v20 == 0xC97B9E962ADF4AD4)
      {
        if (v19[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_42;
      }
      else if ((v20 & v11) != v16)
      {
        goto LABEL_44;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_44;
    }
  }
  while (1)
  {
    v21 = v19[1];
    if (v21 == 0xC97B9E962ADF4AD4)
      break;
    if (v21 >= *(_QWORD *)&v9)
      v21 %= *(_QWORD *)&v9;
    if (v21 != v16)
      goto LABEL_44;
LABEL_36:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_44;
  }
  if (v19[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_36;
LABEL_42:
  v22 = v19[5];
  if (*(_QWORD *)(v22 + 8) == 0xC97B9E962ADF4AD4)
  {
    v23 = *(uint64_t **)(v22 + 32);
    goto LABEL_45;
  }
LABEL_44:
  v23 = 0;
LABEL_45:
  v24 = *v17;
  v25 = *(_QWORD **)(this[5][3] + 8);
  v26 = v25[3];
  v27 = v25[4];
  if (v27 == v26)
  {
    v35 = 0;
    v36 = 0;
    v33 = 0;
LABEL_62:
    v44 = 0;
    goto LABEL_63;
  }
  v28 = 0;
  while (1)
  {
    v29 = *(unsigned __int8 **)(v26 + 8 * v28);
    if (*v29 == *((unsigned __int8 *)this + 104))
    {
      v30 = *((_QWORD *)v29 + 1);
      v31 = v25[15];
      if (v30 < (v25[16] - v31) >> 3)
        break;
    }
    if (++v28 >= (unint64_t)((v27 - v26) >> 3))
      goto LABEL_53;
  }
  v32 = *(_QWORD *)(v31 + 8 * v30);
  if (!v32)
  {
LABEL_53:
    v33 = 0;
    v34 = v27 - v26;
    if (v27 != v26)
      goto LABEL_54;
LABEL_52:
    v35 = 0;
    v36 = 0;
    goto LABEL_62;
  }
  v33 = *(_QWORD *)(*(_QWORD *)(v32 + 24) + 8 * *((unsigned __int8 *)this + 105));
  v34 = v27 - v26;
  if (v27 == v26)
    goto LABEL_52;
LABEL_54:
  v37 = 0;
  v38 = v34 >> 3;
  while (1)
  {
    v39 = *(unsigned __int8 **)(v26 + 8 * v37);
    if (*v39 == *((unsigned __int8 *)this + 96))
    {
      v40 = *((_QWORD *)v39 + 1);
      v41 = v25[15];
      if (v40 < (v25[16] - v41) >> 3)
        break;
    }
    if (++v37 >= v38)
      goto LABEL_78;
  }
  v42 = *(_QWORD *)(v41 + 8 * v40);
  if (!v42)
  {
LABEL_78:
    v36 = 0;
    v43 = v27 - v26;
    if (v27 != v26)
      goto LABEL_79;
LABEL_60:
    v35 = 0;
    goto LABEL_62;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v42 + 24) + 8 * *((unsigned __int8 *)this + 97));
  v43 = v27 - v26;
  if (v27 == v26)
    goto LABEL_60;
LABEL_79:
  v51 = 0;
  v52 = v43 >> 3;
  while (1)
  {
    v53 = *(unsigned __int8 **)(v26 + 8 * v51);
    if (*v53 == *((unsigned __int8 *)this + 102))
    {
      v54 = *((_QWORD *)v53 + 1);
      v55 = v25[15];
      if (v54 < (v25[16] - v55) >> 3)
        break;
    }
    if (++v51 >= v52)
      goto LABEL_88;
  }
  v56 = *(_QWORD *)(v55 + 8 * v54);
  if (v56)
  {
    v44 = *(_QWORD **)(*(_QWORD *)(v56 + 24) + 8 * *((unsigned __int8 *)this + 103));
    v57 = v27 - v26;
    if (v27 == v26)
    {
LABEL_85:
      v35 = 0;
      goto LABEL_63;
    }
  }
  else
  {
LABEL_88:
    v44 = 0;
    v57 = v27 - v26;
    if (v27 == v26)
      goto LABEL_85;
  }
  v58 = 0;
  v59 = v57 >> 3;
  while (1)
  {
    v60 = *(unsigned __int8 **)(v26 + 8 * v58);
    if (*v60 == *((unsigned __int8 *)this + 98))
    {
      v61 = *((_QWORD *)v60 + 1);
      v62 = v25[15];
      if (v61 < (v25[16] - v62) >> 3)
        break;
    }
    if (++v58 >= v59)
      goto LABEL_96;
  }
  v63 = *(_QWORD *)(v62 + 8 * v61);
  if (v63)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v63 + 24) + 8 * *((unsigned __int8 *)this + 99));
    v64 = v27 - v26;
    if (v27 == v26)
      goto LABEL_63;
    goto LABEL_97;
  }
LABEL_96:
  v35 = 0;
  v64 = v27 - v26;
  if (v27 == v26)
    goto LABEL_63;
LABEL_97:
  v65 = 0;
  v66 = v64 >> 3;
  while (1)
  {
    v67 = *(unsigned __int8 **)(v26 + 8 * v65);
    if (*v67 == *((unsigned __int8 *)this + 100))
    {
      v68 = *((_QWORD *)v67 + 1);
      v69 = v25[15];
      if (v68 < (v25[16] - v69) >> 3)
        break;
    }
    if (++v65 >= v66)
      goto LABEL_63;
  }
  v70 = *(_QWORD *)(v69 + 8 * v68);
  if (!v70)
  {
LABEL_63:
    v45 = 0;
    if (!v23)
      goto LABEL_103;
    goto LABEL_64;
  }
  v45 = *(_QWORD *)(*(_QWORD *)(v70 + 24) + 8 * *((unsigned __int8 *)this + 101));
  if (!v23)
  {
LABEL_103:
    v49 = 0;
    goto LABEL_104;
  }
LABEL_64:
  v46 = *v23;
  v47 = v23[1];
  v48 = *v23;
  if (*v23 != v47)
  {
    v48 = *v23;
    while (*(_BYTE *)v48 != 2)
    {
      v48 += 16;
      if (v48 == v47)
        goto LABEL_72;
    }
  }
  if (v48 == v47 || !*(_QWORD *)(v48 + 8))
  {
LABEL_72:
    if (v46 != v47)
    {
      while (*(_BYTE *)v46 != 4)
      {
        v46 += 16;
        if (v46 == v47)
          goto LABEL_86;
      }
    }
    if (v46 == v47)
LABEL_86:
      v50 = 0;
    else
      v50 = *(_QWORD *)(v46 + 8);
    v49 = v50 != 0;
  }
  else
  {
    v49 = 1;
  }
LABEL_104:
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v36 + 32) = 0;
  v44[4] = 0;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)(v45 + 32) = 0;
  v71 = this[7][2];
  if (v71)
  {
    *(_QWORD *)(v36 + 32) = v71;
    v44[4] = this[7][2];
  }
  if (*((_BYTE *)this + 109))
  {
    if (this[8][1] != *this[8])
      v49 = 1;
    if (v49)
    {
      if (!v23)
        goto LABEL_117;
      v73 = *v23;
      v72 = v23[1];
      if (v73 != v72)
      {
        while (*(_BYTE *)v73 != 23)
        {
          v73 += 16;
          if (v73 == v72)
            goto LABEL_117;
        }
      }
      if (v73 == v72)
LABEL_117:
        v74 = 1;
      else
        v74 = *(_QWORD *)(v73 + 8) == 0;
      v75 = this[7];
      v76 = *v75;
      if (!*v75)
      {
        v77 = operator new();
        *(_BYTE *)v77 = 0;
        *(_QWORD *)(v77 + 12) = 0;
        *(_QWORD *)(v77 + 4) = 0;
        *(_BYTE *)(v77 + 20) = 0;
        *(_DWORD *)(v77 + 24) = 1065353216;
        *(_BYTE *)(v77 + 28) = 0;
        *(_DWORD *)(v77 + 32) = 0;
        v78 = *v75;
        *v75 = v77;
        if (v78)
          MEMORY[0x1A1AF4E00](v78, 0x1000C4049ECCB0CLL);
        v76 = *this[7];
        *(_BYTE *)v76 = 8;
        *(_QWORD *)(v76 + 12) = 0;
        *(_QWORD *)(v76 + 4) = 0;
      }
      *(_QWORD *)(v33 + 32) = v76;
      *(_QWORD *)(v36 + 32) = *this[7];
      v44[4] = *this[7];
      *(_QWORD *)(v35 + 32) = *this[7];
      *(_QWORD *)(v45 + 32) = *this[7];
      if (v74)
        *(_QWORD *)(v33 + 32) = 0;
    }
  }
  v113 = v45;
  v79 = v35;
  v80 = v36;
  v81 = v33;
  v82 = this[8];
  v84 = (uint64_t *)*v82;
  v83 = (uint64_t *)v82[1];
  while (v84 != v83)
  {
    v85 = (std::__shared_weak_count *)v84[1];
    v114 = *v84;
    v115 = v85;
    if (v85)
    {
      p_shared_owners = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldxr(p_shared_owners);
      while (__stxr(v87 + 1, p_shared_owners));
    }
    md::RouteRenderLayer::layoutOverlay((uint64_t)this, (uint64_t)a2, &v114, v24 != 0, (uint64_t)v44);
    v88 = v115;
    if (v115)
    {
      v89 = (unint64_t *)&v115->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v84 += 2;
  }
  v91 = *(_QWORD *)(v81 + 72);
  v92 = *(uint64_t **)(v81 + 80);
  v93 = 126 - 2 * __clz((uint64_t)((uint64_t)v92 - v91) >> 3);
  if (v92 == (uint64_t *)v91)
    v94 = 0;
  else
    v94 = v93;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v91, v92, v94, 1);
  v95 = *(_QWORD *)(v80 + 72);
  v96 = *(uint64_t **)(v80 + 80);
  v97 = 126 - 2 * __clz((uint64_t)((uint64_t)v96 - v95) >> 3);
  if (v96 == (uint64_t *)v95)
    v98 = 0;
  else
    v98 = v97;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v95, v96, v98, 1);
  v99 = v44[9];
  v100 = (uint64_t *)v44[10];
  v101 = 126 - 2 * __clz((uint64_t)((uint64_t)v100 - v99) >> 3);
  if (v100 == (uint64_t *)v99)
    v102 = 0;
  else
    v102 = v101;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v99, v100, v102, 1);
  v103 = *(_QWORD *)(v79 + 72);
  v104 = *(uint64_t **)(v79 + 80);
  v105 = 126 - 2 * __clz((uint64_t)((uint64_t)v104 - v103) >> 3);
  if (v104 == (uint64_t *)v103)
    v106 = 0;
  else
    v106 = v105;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v103, v104, v106, 1);
  v107 = *(_QWORD *)(v113 + 72);
  v108 = *(uint64_t **)(v113 + 80);
  v109 = 126 - 2 * __clz((uint64_t)((uint64_t)v108 - v107) >> 3);
  if (v108 == (uint64_t *)v107)
    v110 = 0;
  else
    v110 = v109;
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v107, v108, v110, 1);
  this[7][2] = 0;
  if (!v121)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v121 + 48))(v121);
  result = v121;
  if (v121 == v120)
  {
    v112 = 4;
    result = v120;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v112))();
  }
  else if (v121)
  {
    v112 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v112))();
  }
  return result;
}

void sub_19F2486A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

void md::RouteRenderLayer::runLayoutLogic(md::RouteRenderLayer *this, const md::LayoutContext *a2)
{
  unint64_t v2;
  uint64_t *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  int8x8_t v24;
  uint8x8_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  __double2 v49;
  double v50;
  __double2 v51;
  double v52;
  id v53;
  double v54;
  double v55;
  uint64_t *v56;
  int8x8_t v57;
  uint8x8_t v58;
  unint64_t v59;
  int v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  char v78;
  uint64_t *v79;
  uint8x8_t v80;
  _QWORD *v81;
  int8x8_t v82;
  uint8x8_t v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  BOOL v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  int8x8_t *v102;
  float v103;
  float v104;
  int8x8_t v105;
  uint8x8_t v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  double v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  BOOL v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  void *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  float *v152;
  float v153;
  BOOL v154;
  unsigned int v155;
  float *v156;
  float v157;
  BOOL v158;
  float v159;
  int v160;
  float *v161;
  unint64_t v162;
  float *v163;
  float v164;
  BOOL v165;
  unsigned int v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  char v170;
  uint64_t *v171;
  int8x8_t v172;
  uint8x8_t v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  unsigned __int8 *v192;
  _BOOL4 v193;
  uint64_t *v194;
  void *v195;
  int v196;
  int v197;
  uint64_t *v198;
  int v199;
  unsigned int v200;
  double v201;
  double v202;
  double v203;
  uint64_t v204;
  void *v205;
  id v206;
  void *v207;
  int v208;
  int64x2_t v209;
  int64x2_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 v213;
  _WORD *v214;
  _WORD *v215;
  _WORD *v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  _WORD *v222;
  _WORD *v223;
  std::__shared_weak_count *v224;
  double v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  double v229;
  double v230;
  int v231;
  double *v232;
  double **v233;
  double **v234;
  unint64_t v235;
  double *v236;
  unint64_t *v237;
  unint64_t v238;
  double *v239;
  uint64_t v240;
  double *v241;
  uint64_t v242;
  _BYTE *v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  double *v250;
  uint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  unsigned __int8 v256;
  _WORD *v257;
  _WORD *v258;
  _WORD *v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t *v262;
  uint64_t *v263;
  id v264;
  id v265;
  int v266;
  _QWORD *v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  double v272;
  double v273;
  uint64_t *v274;
  uint64_t *v275;
  unint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  unsigned __int8 *v282;
  double v283;
  int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  unsigned __int8 *v288;
  char v289;
  _QWORD *v290;
  int8x8_t v291;
  uint8x8_t v292;
  uint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  float v302;
  void *v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  int64_t v312;
  unint64_t v313;
  uint64_t v314;
  id v315;
  int64_t v316;
  char *v317;
  unint64_t v318;
  unint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  double v327;
  uint64_t v328;
  uint64_t v329;
  double v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t v334;
  float v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  BOOL v341;
  uint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  __int128 v346;
  __int128 v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  float v353;
  float *v354;
  float v355;
  BOOL v356;
  unsigned int v357;
  float v358;
  float v359;
  float v360;
  float v361;
  void *v362;
  _BYTE *v364;
  _BYTE *v365;
  int64_t v366;
  uint64_t v367;
  _QWORD *v368;
  unint64_t v369;
  _QWORD *v370;
  unint64_t v371;
  unsigned int v372;
  int v373;
  uint64_t *v375;
  void *v376;
  void *v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  void *v382;
  _QWORD *v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  void *v387;
  double v388;
  double v389;
  double v390;
  double v391;
  uint64_t v392;
  unsigned int v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  double v412;
  __int128 v413;
  double v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  __int128 v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  uint64_t v430;
  _QWORD *v431;
  int8x8_t v432;
  uint8x8_t v433;
  float *v434;
  unint64_t v435;
  uint64_t v436;
  _QWORD *v437;
  _QWORD *v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  _QWORD *v442;
  unint64_t v443;
  uint64_t v444;
  unsigned __int16 *v445;
  unsigned __int16 *v446;
  int v447;
  float *v448;
  int v449;
  _BOOL4 v450;
  unsigned int v451;
  _BOOL4 v452;
  void *v453;
  void *v454;
  int64x2_t v455;
  int64x2_t v456;
  uint64_t v457;
  id *v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  double *v462;
  uint64_t *v464;
  BOOL v465;
  uint64_t v466;
  unsigned int v467;
  uint64_t *v468;
  uint64_t *v470;
  _QWORD v471[7];
  float v472;
  BOOL v473;
  void *v474[2];
  void *v475;
  _QWORD *v476;
  double **v477;
  double *v478;
  uint64_t v479;
  uint64_t *v480;
  _QWORD *v481;
  uint64_t v482;
  int64x2_t v483;
  int64x2_t v484;
  double *v485;
  _QWORD *v486[2];
  int64x2_t v487;
  int64x2_t v488;
  int64x2_t v489;
  int64x2_t v490;
  uint64_t v491;
  _OWORD v492[2];
  uint64_t v493;
  __int128 v494;
  __int128 v495;
  uint64_t v496;
  uint64_t v497;
  double v498;
  __int128 v499;
  double v500;
  double v501[4];
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  uint64_t v506;
  double v507;
  double v508;
  double v509;
  double v510;
  __int128 v511;
  double v512;
  double v513;
  double v514;
  double v515;
  double v516;
  double v517;
  double v518;
  uint64_t v519;
  double v520;
  double v521;
  double v522;
  uint64_t v523;
  double v524;
  double v525;
  double v526;
  uint64_t v527;
  __int128 v528;
  uint64_t v529;
  uint64_t v530;
  _BYTE v531[56];
  __int128 v532;
  uint64_t v533;
  double v534;
  uint64_t v535;
  __int128 v536;
  double v537;
  uint64_t v538;
  _QWORD v539[3];
  _QWORD *v540;
  uint64_t v541;

  v541 = *MEMORY[0x1E0C80C00];
  v2 = 0x8BD499FBD96FBB9ELL;
  v3 = (uint64_t *)*((_QWORD *)a2 + 1);
  v4 = (int8x8_t)v3[1];
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] < 2uLL)
  {
    v6 = *(_QWORD *)&v4 - 1;
    v7 = (*(_QWORD *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
    v8 = *v3;
    v9 = **(_QWORD ***)(v8 + 8 * v7);
    while (1)
    {
      v10 = v9[1];
      if (v10 == 0x8BD499FBD96FBB9ELL)
      {
        if (v9[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_18;
      }
      else if ((v10 & v6) != v7)
      {
        goto LABEL_20;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_20;
    }
  }
  v11 = 0x8BD499FBD96FBB9ELL;
  if (*(_QWORD *)&v4 <= 0x8BD499FBD96FBB9ELL)
    v11 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v4;
  v8 = *v3;
  v9 = **(_QWORD ***)(v8 + 8 * v11);
  v6 = *(_QWORD *)&v4 - 1;
  while (1)
  {
    v12 = v9[1];
    if (v12 == 0x8BD499FBD96FBB9ELL)
      break;
    if (v12 >= *(_QWORD *)&v4)
      v12 %= *(_QWORD *)&v4;
    if (v12 != v11)
      goto LABEL_20;
LABEL_12:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_20;
  }
  if (v9[2] != 0x8BD499FBD96FBB9ELL)
    goto LABEL_12;
LABEL_18:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v14 = *(float **)(v13 + 32);
    goto LABEL_21;
  }
LABEL_20:
  v14 = 0;
LABEL_21:
  v461 = *(unsigned __int8 *)v14;
  if (v5.u32[0] >= 2uLL)
  {
    v16 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v4 <= 0xE42D19AFCA302E68)
      v16 = 0xE42D19AFCA302E68 % *(_QWORD *)&v4;
    v15 = *(_QWORD **)(v8 + 8 * v16);
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0xE42D19AFCA302E68);
    }
    while (v15[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v15 = *(_QWORD **)(v8 + 8 * (v6 & 0xE42D19AFCA302E68));
    do
    {
      do
        v15 = (_QWORD *)*v15;
      while (v15[1] != 0xE42D19AFCA302E68);
    }
    while (v15[2] != 0xE42D19AFCA302E68);
  }
  v17 = *(_QWORD *)(v15[5] + 32);
  v539[0] = &off_1E42CD898;
  v539[1] = this;
  v18 = v539;
  v539[2] = v17;
  v540 = v539;
  v19 = *(_BYTE **)(v17 + 48);
  v20 = *(_BYTE **)(v17 + 56);
  if (v19 == v20)
  {
    v21 = 4;
LABEL_39:
    (*(void (**)(void))(*v18 + 8 * v21))();
    goto LABEL_40;
  }
  do
  {
    v531[0] = *v19;
    if (!v540)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
    }
    (*(void (**)(_QWORD *, _BYTE *))(*v540 + 48))(v540, v531);
    ++v19;
  }
  while (v19 != v20);
  v18 = v540;
  if (v540 == v539)
  {
    v21 = 4;
    v18 = v539;
    goto LABEL_39;
  }
  if (v540)
  {
    v21 = 5;
    goto LABEL_39;
  }
LABEL_40:
  v22 = (uint64_t **)*((_QWORD *)this + 8);
  v23 = (uint64_t *)*((_QWORD *)a2 + 1);
  v24 = (int8x8_t)v23[1];
  v448 = v14;
  if (!*(_QWORD *)&v24)
  {
    v27 = 0;
    goto LABEL_87;
  }
  v25 = (uint8x8_t)vcnt_s8(v24);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    v26 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v24 <= 0x1AF456233693CD46uLL)
      v26 = 0x1AF456233693CD46uLL % *(_QWORD *)&v24;
  }
  else
  {
    v26 = (*(_QWORD *)&v24 - 1) & 0x1AF456233693CD46;
  }
  v28 = *v23;
  v29 = *(_QWORD **)(v28 + 8 * v26);
  if (!v29)
    goto LABEL_68;
  v30 = (_QWORD *)*v29;
  if (!v30)
    goto LABEL_68;
  if (v25.u32[0] < 2uLL)
  {
    while (1)
    {
      v32 = v30[1];
      if (v32 == 0x1AF456233693CD46)
      {
        if (v30[2] == 0x1AF456233693CD46)
          goto LABEL_62;
      }
      else if ((v32 & (*(_QWORD *)&v24 - 1)) != v26)
      {
        goto LABEL_68;
      }
      v30 = (_QWORD *)*v30;
      if (!v30)
        goto LABEL_68;
    }
  }
  while (1)
  {
    v31 = v30[1];
    if (v31 == 0x1AF456233693CD46)
      break;
    if (v31 >= *(_QWORD *)&v24)
      v31 %= *(_QWORD *)&v24;
    if (v31 != v26)
      goto LABEL_68;
LABEL_51:
    v30 = (_QWORD *)*v30;
    if (!v30)
      goto LABEL_68;
  }
  if (v30[2] != 0x1AF456233693CD46)
    goto LABEL_51;
LABEL_62:
  v33 = v30[5];
  if (*(_QWORD *)(v33 + 8) != 0x1AF456233693CD46)
  {
LABEL_68:
    v27 = 0;
    if (v25.u32[0] > 1uLL)
      goto LABEL_64;
    goto LABEL_69;
  }
  v27 = *(double **)(v33 + 32);
  if (v25.u32[0] > 1uLL)
  {
LABEL_64:
    if (*(_QWORD *)&v24 <= 0x8BD499FBD96FBB9ELL)
      v2 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v24;
    v34 = *(_QWORD **)(v28 + 8 * v2);
    if (!v34)
      goto LABEL_87;
    goto LABEL_70;
  }
LABEL_69:
  v2 = (*(_QWORD *)&v24 - 1) & 0x8BD499FBD96FBB9ELL;
  v34 = *(_QWORD **)(v28 + 8 * v2);
  if (!v34)
    goto LABEL_87;
LABEL_70:
  v35 = (_QWORD *)*v34;
  if (!v35)
    goto LABEL_87;
  if (v25.u32[0] < 2uLL)
  {
    v36 = *(_QWORD *)&v24 - 1;
    while (1)
    {
      v38 = v35[1];
      if (v38 == 0x8BD499FBD96FBB9ELL)
      {
        if (v35[2] == 0x8BD499FBD96FBB9ELL)
          goto LABEL_85;
      }
      else if ((v38 & v36) != v2)
      {
        goto LABEL_87;
      }
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_87;
    }
  }
  while (2)
  {
    v37 = v35[1];
    if (v37 != 0x8BD499FBD96FBB9ELL)
    {
      if (v37 >= *(_QWORD *)&v24)
        v37 %= *(_QWORD *)&v24;
      if (v37 != v2)
        goto LABEL_87;
      goto LABEL_74;
    }
    if (v35[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_74:
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_87;
      continue;
    }
    break;
  }
LABEL_85:
  v39 = v35[5];
  if (*(_QWORD *)(v39 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    v40 = *(_QWORD *)(v39 + 32);
    goto LABEL_88;
  }
LABEL_87:
  v40 = 0;
LABEL_88:
  v41 = *((unsigned __int8 *)this + 108);
  v466 = v40;
  v42 = *(unsigned __int8 *)(v40 + 5);
  *((_BYTE *)this + 108) = v42;
  v43 = v27[62];
  v44 = v27[63];
  v462 = v27;
  v45 = v27[64];
  md::LayoutContext::frameState(a2);
  if (*(unsigned __int8 *)(v46 + 128) - 1 <= 2)
  {
    v47 = sqrt(v43 * v43 + v44 * v44);
    v48 = atan2(v45, v47 * 0.996647189);
    v49 = __sincos_stret(v48);
    v50 = atan2(v45 + v49.__sinval * v49.__sinval * 42841.3115 * v49.__sinval, v47 + v49.__cosval * v49.__cosval * -42697.6727 * v49.__cosval);
    v51 = __sincos_stret(v50);
    v45 = (v47 / v51.__cosval + -6378137.0 / sqrt(v51.__sinval * v51.__sinval * -0.00669437999 + 1.0))
        * 0.0000000249532021;
  }
  v52 = v462[470];
  v53 = *(id *)a2;
  objc_msgSend(v53, "size");
  v55 = v54;

  v56 = (uint64_t *)*((_QWORD *)a2 + 1);
  v57 = (int8x8_t)v56[1];
  if (!*(_QWORD *)&v57)
  {
    v459 = 0;
    v60 = 0;
    v61 = 0;
    v62 = *(unsigned __int8 *)(*((_QWORD *)this + 8) + 72);
    goto LABEL_147;
  }
  v58 = (uint8x8_t)vcnt_s8(v57);
  v58.i16[0] = vaddlv_u8(v58);
  if (v58.u32[0] > 1uLL)
  {
    v59 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v57 <= 0xE42D19AFCA302E68)
      v59 = 0xE42D19AFCA302E68 % *(_QWORD *)&v57;
  }
  else
  {
    v59 = (*(_QWORD *)&v57 - 1) & 0xE42D19AFCA302E68;
  }
  v63 = *v56;
  v64 = *(_QWORD **)(v63 + 8 * v59);
  if (!v64)
    goto LABEL_116;
  v65 = (_QWORD *)*v64;
  if (!v65)
    goto LABEL_116;
  if (v58.u32[0] < 2uLL)
  {
    while (1)
    {
      v66 = v65[1];
      if (v66 == 0xE42D19AFCA302E68)
      {
        if (v65[2] == 0xE42D19AFCA302E68)
          goto LABEL_113;
      }
      else if ((v66 & (*(_QWORD *)&v57 - 1)) != v59)
      {
        goto LABEL_116;
      }
      v65 = (_QWORD *)*v65;
      if (!v65)
        goto LABEL_116;
    }
  }
  while (2)
  {
    v67 = v65[1];
    if (v67 != 0xE42D19AFCA302E68)
    {
      if (v67 >= *(_QWORD *)&v57)
        v67 %= *(_QWORD *)&v57;
      if (v67 != v59)
        goto LABEL_116;
      goto LABEL_107;
    }
    if (v65[2] != 0xE42D19AFCA302E68)
    {
LABEL_107:
      v65 = (_QWORD *)*v65;
      if (!v65)
        goto LABEL_116;
      continue;
    }
    break;
  }
LABEL_113:
  v68 = v65[5];
  if (*(_QWORD *)(v68 + 8) == 0xE42D19AFCA302E68)
  {
    v69 = *(_QWORD *)(v68 + 32);
    if (v69)
    {
      v60 = *(unsigned __int8 *)(v69 + 84) == 3;
      goto LABEL_117;
    }
  }
LABEL_116:
  v60 = 0;
LABEL_117:
  v62 = *(unsigned __int8 *)(*((_QWORD *)this + 8) + 72);
  if (v58.u32[0] > 1uLL)
  {
    v70 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v57 <= 0x1B8B241A8D896A1DuLL)
      v70 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v57;
  }
  else
  {
    v70 = (*(_QWORD *)&v57 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v71 = *(_QWORD **)(v63 + 8 * v70);
  if (!v71)
    goto LABEL_145;
  v72 = (_QWORD *)*v71;
  if (!v72)
    goto LABEL_145;
  if (v58.u32[0] < 2uLL)
  {
    v73 = *(_QWORD *)&v57 - 1;
    while (1)
    {
      v75 = v72[1];
      if (v75 == 0x1B8B241A8D896A1DLL)
      {
        if (v72[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_137;
      }
      else if ((v75 & v73) != v70)
      {
        goto LABEL_145;
      }
      v72 = (_QWORD *)*v72;
      if (!v72)
        goto LABEL_145;
    }
  }
  while (1)
  {
    v74 = v72[1];
    if (v74 == 0x1B8B241A8D896A1DLL)
      break;
    if (v74 >= *(_QWORD *)&v57)
      v74 %= *(_QWORD *)&v57;
    if (v74 != v70)
      goto LABEL_145;
LABEL_126:
    v72 = (_QWORD *)*v72;
    if (!v72)
      goto LABEL_145;
  }
  if (v72[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_126;
LABEL_137:
  v76 = v72[5];
  if (*(_QWORD *)(v76 + 8) != 0x1B8B241A8D896A1DLL || (v459 = *(_QWORD *)(v76 + 32)) == 0)
  {
LABEL_145:
    v459 = 0;
    goto LABEL_146;
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = objc_msgSend(v77, "showStaticRouteWidth");

  if ((v78 & 1) != 0)
  {
LABEL_146:
    v61 = 0;
    goto LABEL_147;
  }
  std::unordered_set<md::NavigationLogicEvent>::unordered_set((uint64_t)v531, v459 + 104);
  if (*(_QWORD *)&v531[8])
  {
    v79 = **(uint64_t ***)v531;
    if (**(_QWORD **)v531)
    {
      v79 = (uint64_t *)*v79;
      if (v79)
      {
        v80 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v531[8]);
        v80.i16[0] = vaddlv_u8(v80);
        if (v80.u32[0] < 2uLL)
        {
          while (1)
          {
            v130 = v79[1];
            if (v130)
            {
              if ((v130 & (*(_QWORD *)&v531[8] - 1)) != 0)
                goto LABEL_254;
            }
            else if (!*((_DWORD *)v79 + 4))
            {
              goto LABEL_255;
            }
            v79 = (uint64_t *)*v79;
            if (!v79)
              goto LABEL_255;
          }
        }
        do
        {
          v131 = v79[1];
          if (v131)
          {
            if (v131 < *(_QWORD *)&v531[8] || v131 % *(_QWORD *)&v531[8])
              goto LABEL_254;
          }
          else if (!*((_DWORD *)v79 + 4))
          {
            break;
          }
          v79 = (uint64_t *)*v79;
        }
        while (v79);
      }
    }
  }
  else
  {
LABEL_254:
    v79 = 0;
  }
LABEL_255:
  v61 = v79 != 0;
  v132 = *(_QWORD **)&v531[16];
  if (*(_QWORD *)&v531[16])
  {
    do
    {
      v133 = (_QWORD *)*v132;
      operator delete(v132);
      v132 = v133;
    }
    while (v133);
  }
  v134 = *(void **)v531;
  *(_QWORD *)v531 = 0;
  if (v134)
    operator delete(v134);
LABEL_147:
  v81 = (_QWORD *)*((_QWORD *)a2 + 1);
  v82 = (int8x8_t)v81[1];
  if (!*(_QWORD *)&v82)
    goto LABEL_171;
  v83 = (uint8x8_t)vcnt_s8(v82);
  v83.i16[0] = vaddlv_u8(v83);
  if (v83.u32[0] > 1uLL)
  {
    v84 = 0x8E4587A431F9C696;
    if (*(_QWORD *)&v82 <= 0x8E4587A431F9C696)
      v84 = 0x8E4587A431F9C696 % *(_QWORD *)&v82;
  }
  else
  {
    v84 = (*(_QWORD *)&v82 - 1) & 0x8E4587A431F9C696;
  }
  v85 = *(_QWORD **)(*v81 + 8 * v84);
  if (!v85)
    goto LABEL_171;
  v86 = (_QWORD *)*v85;
  if (!v86)
    goto LABEL_171;
  if (v83.u32[0] < 2uLL)
  {
    while (1)
    {
      v88 = v86[1];
      if (v88 == 0x8E4587A431F9C696)
      {
        if (v86[2] == 0x8E4587A431F9C696)
          goto LABEL_168;
      }
      else if ((v88 & (*(_QWORD *)&v82 - 1)) != v84)
      {
        goto LABEL_171;
      }
      v86 = (_QWORD *)*v86;
      if (!v86)
        goto LABEL_171;
    }
  }
  while (1)
  {
    v87 = v86[1];
    if (v87 == 0x8E4587A431F9C696)
      break;
    if (v87 >= *(_QWORD *)&v82)
      v87 %= *(_QWORD *)&v82;
    if (v87 != v84)
      goto LABEL_171;
LABEL_157:
    v86 = (_QWORD *)*v86;
    if (!v86)
      goto LABEL_171;
  }
  if (v86[2] != 0x8E4587A431F9C696)
    goto LABEL_157;
LABEL_168:
  v89 = v86[5];
  if (*(_QWORD *)(v89 + 8) != 0x8E4587A431F9C696)
  {
LABEL_171:
    v460 = 0;
    if (!v61)
      goto LABEL_172;
    goto LABEL_184;
  }
  v460 = *(_QWORD *)(v89 + 32);
  if (v61)
  {
LABEL_184:
    v93 = 1;
    goto LABEL_185;
  }
LABEL_172:
  v90 = *((_QWORD *)this + 8);
  if (*(_BYTE *)(v90 + 48))
    v91 = 0;
  else
    v91 = v62 == v60;
  if (!v91 || *(unsigned __int8 *)(v90 + 73) != v461)
    goto LABEL_184;
  v93 = v41 != v42 || *(_BYTE *)(v460 + 72) != 0;
LABEL_185:
  v465 = v93;
  if ((*(_QWORD *)&v82 & (*(_QWORD *)&v82 - 1)) != 0)
  {
    v95 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v82 <= 0xE42D19AFCA302E68)
      v95 = 0xE42D19AFCA302E68 % *(_QWORD *)&v82;
    v94 = *(_QWORD **)(*v81 + 8 * v95);
    do
    {
      do
        v94 = (_QWORD *)*v94;
      while (v94[1] != 0xE42D19AFCA302E68);
    }
    while (v94[2] != 0xE42D19AFCA302E68);
  }
  else
  {
    v94 = *(_QWORD **)(*v81 + 8 * ((*(_QWORD *)&v82 - 1) & 0xE42D19AFCA302E68));
    do
    {
      do
        v94 = (_QWORD *)*v94;
      while (v94[1] != 0xE42D19AFCA302E68);
    }
    while (v94[2] != 0xE42D19AFCA302E68);
  }
  v457 = *(_QWORD *)(v94[5] + 32);
  v96 = *(_QWORD *)(*(_QWORD *)v457 + 520);
  v97 = *(std::__shared_weak_count **)(*(_QWORD *)v457 + 528);
  *(_QWORD *)v531 = v96;
  *(_QWORD *)&v531[8] = v97;
  if (v97)
  {
    p_shared_owners = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldxr(p_shared_owners);
    while (__stxr(v99 + 1, p_shared_owners));
  }
  v491 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(v96);
  if (v97)
  {
    v100 = (unint64_t *)&v97->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v102 = (int8x8_t *)*((_QWORD *)a2 + 1);
  md::LayoutContext::zoomAtCentrePoint(v102);
  v104 = v103;
  v105 = v102[1];
  if (!*(_QWORD *)&v105)
    goto LABEL_272;
  v106 = (uint8x8_t)vcnt_s8(v105);
  v106.i16[0] = vaddlv_u8(v106);
  if (v106.u32[0] > 1uLL)
  {
    v107 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v105 <= 0xE42D19AFCA302E68)
      v107 = 0xE42D19AFCA302E68 % *(_QWORD *)&v105;
  }
  else
  {
    v107 = (*(_QWORD *)&v105 - 1) & 0xE42D19AFCA302E68;
  }
  v108 = *(_QWORD **)(*(_QWORD *)v102 + 8 * v107);
  if (!v108 || (v109 = (_QWORD *)*v108) == 0)
  {
LABEL_272:
    v139 = *((_QWORD *)this + 8);
    v140 = *(_QWORD *)(v139 + 56);
    if (!v140)
      goto LABEL_279;
    v141 = *(std::__shared_weak_count **)(v139 + 64);
    v516 = *(double *)(v139 + 56);
    v517 = *(double *)&v141;
    if (*(double *)&v141 == 0.0)
    {
      *(_QWORD *)&v531[8] = 0;
    }
    else
    {
      v142 = (unint64_t *)&v141->__shared_owners_;
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
      *(_QWORD *)&v531[8] = v141;
      do
        v144 = __ldxr(v142);
      while (__stxr(v144 + 1, v142));
    }
    *(_QWORD *)v531 = v140;
    memset(&v531[16], 0, 17);
    v145 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v140 + 48))(v140, &v531[16]);
    v531[32] = v145;
    if (*(double *)&v141 != 0.0)
    {
      v146 = (unint64_t *)&v141->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
      v145 = v531[32];
    }
    if (!v145)
    {
      v450 = 0;
      v451 = 0;
LABEL_327:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v531);
      goto LABEL_328;
    }
    LOBYTE(v505) = 1;
    v148 = *(_QWORD *)(*(_QWORD *)v531 + 24);
    if ((int)v104 >= 0x17)
      v149 = 23;
    else
      v149 = (int)v104;
    v150 = *(unsigned __int8 *)(v148 + 12);
    if (v150 == 2)
    {
      LOBYTE(v516) = 1;
      LOBYTE(v492[0]) = 1;
      v451 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v148, 0x1E0u, v149, 0, &v516);
      gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v148, 0x1E0u, v149, 1u, v492);
      if (LOBYTE(v516) | LOBYTE(v492[0]))
        goto LABEL_313;
    }
    else
    {
      v451 = *(unsigned __int8 *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(*(_QWORD *)v531 + 24), 0x1E0u, v149, v150, &v505);
      if ((_BYTE)v505)
        goto LABEL_313;
    }
    v151 = *(_QWORD *)(*(_QWORD *)v531 + 24);
    v152 = *(float **)v151;
    if (*(_QWORD *)v151
      && (v153 = *v152, LODWORD(v152) = *v152 == 1.0, *(_BYTE *)(v151 + 10))
      && (v153 != 0.0 ? (v154 = v153 == 1.0) : (v154 = 1), !v154)
      || (v155 = *(unsigned __int8 *)(v151 + v152 + 11), v153 = 0.0, v155 == 2))
    {
      LOBYTE(v516) = 1;
      LOBYTE(v492[0]) = 1;
      v156 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v151, 0x106u, 0, &v516);
      v157 = *v156
           + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v151, 0x106u, 1u, v492)- *v156)* v153);
      v158 = v104 < v157;
      if (v104 < v157)
        goto LABEL_305;
    }
    else
    {
      v161 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)v531 + 24), 0x106u, v155, 0);
      v158 = v104 < *v161;
      if (v104 < *v161)
      {
LABEL_305:
        if (!v158
          || (gss::QueryableLocker<gss::PropertyID>::value<(gss::PropertyID)263>(*(_QWORD *)(*(_QWORD *)v531 + 24)),
              v104 <= v159))
        {
          v451 = 0;
          goto LABEL_313;
        }
        v160 = 1;
LABEL_312:
        v451 = v160;
LABEL_313:
        v162 = *(_QWORD *)(*(_QWORD *)v531 + 24);
        v163 = *(float **)v162;
        if (*(_QWORD *)v162
          && (v164 = *v163, LODWORD(v163) = *v163 == 1.0, *(_BYTE *)(v162 + 10))
          && (v164 != 0.0 ? (v165 = v164 == 1.0) : (v165 = 1), !v165)
          || (v166 = *(unsigned __int8 *)(v162 + v163 + 11), v164 = 0.0, v166 == 2))
        {
          LOBYTE(v516) = 1;
          LOBYTE(v492[0]) = 1;
          v167 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v162, 0x1E1u, 0, &v516);
          v168 = gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(v162, 0x1E1u, 1u, v492);
          if (v164 >= 1.0)
            v169 = (char *)v168;
          else
            v169 = (char *)v167;
          v170 = *v169;
        }
        else
        {
          v170 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<BOOL>(*(_QWORD *)(*(_QWORD *)v531 + 24), 0x1E1u, v166, 0);
        }
        v450 = v170 != 0;
        goto LABEL_327;
      }
    }
    v160 = 2;
    goto LABEL_312;
  }
  if (v106.u32[0] < 2uLL)
  {
    v110 = *(_QWORD *)&v105 - 1;
    while (1)
    {
      v112 = v109[1];
      if (v112 == 0xE42D19AFCA302E68)
      {
        if (v109[2] == 0xE42D19AFCA302E68)
          goto LABEL_224;
      }
      else if ((v112 & v110) != v107)
      {
        goto LABEL_272;
      }
      v109 = (_QWORD *)*v109;
      if (!v109)
        goto LABEL_272;
    }
  }
  while (1)
  {
    v111 = v109[1];
    if (v111 == 0xE42D19AFCA302E68)
      break;
    if (v111 >= *(_QWORD *)&v105)
      v111 %= *(_QWORD *)&v105;
    if (v111 != v107)
      goto LABEL_272;
LABEL_213:
    v109 = (_QWORD *)*v109;
    if (!v109)
      goto LABEL_272;
  }
  if (v109[2] != 0xE42D19AFCA302E68)
    goto LABEL_213;
LABEL_224:
  v113 = v109[5];
  if (*(_QWORD *)(v113 + 8) != 0xE42D19AFCA302E68)
    goto LABEL_272;
  v114 = *(uint64_t **)(v113 + 32);
  if (!v114)
    goto LABEL_272;
  v115 = *v114;
  v116 = (std::__shared_weak_count *)v114[1];
  *(_QWORD *)v531 = *v114;
  *(_QWORD *)&v531[8] = v116;
  if (v116)
  {
    v117 = (unint64_t *)&v116->__shared_owners_;
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  if (v115)
  {
    v119 = *(double *)(v115 + 520);
    v120 = *(std::__shared_weak_count **)(v115 + 528);
    v516 = v119;
    v517 = *(double *)&v120;
    if (*(double *)&v120 != 0.0)
    {
      v121 = (unint64_t *)&v120->__shared_owners_;
      do
        v122 = __ldxr(v121);
      while (__stxr(v122 + 1, v121));
    }
    if (v119 == 0.0)
    {
      v127 = 0;
    }
    else
    {
      v123 = *(_QWORD *)(v115 + 520);
      v124 = *(std::__shared_weak_count **)(v115 + 528);
      *(_QWORD *)&v492[0] = v123;
      *((_QWORD *)&v492[0] + 1) = v124;
      if (v124)
      {
        v125 = (unint64_t *)&v124->__shared_owners_;
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
      }
      v127 = (gss::ClientStyleState<gss::PropertyID>::sourceMapDisplayStyle(v123) & 0xFF00) == 512;
      if (v124)
      {
        v128 = (unint64_t *)&v124->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      *(double *)&v120 = v517;
    }
    if (*(double *)&v120 != 0.0)
    {
      v135 = (unint64_t *)&v120->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v116 = *(std::__shared_weak_count **)&v531[8];
  }
  else
  {
    v127 = 0;
  }
  if (v116)
  {
    v137 = (unint64_t *)&v116->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (!v127)
    goto LABEL_272;
LABEL_279:
  v450 = 0;
  v451 = 0;
LABEL_328:
  v171 = (uint64_t *)*((_QWORD *)a2 + 1);
  v172 = (int8x8_t)v171[1];
  if (!*(_QWORD *)&v172)
  {
    v175 = 0;
    goto LABEL_375;
  }
  v173 = (uint8x8_t)vcnt_s8(v172);
  v173.i16[0] = vaddlv_u8(v173);
  if (v173.u32[0] > 1uLL)
  {
    v174 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v172 <= 0x99BED48DEFBBD82BLL)
      v174 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v172;
  }
  else
  {
    v174 = (*(_QWORD *)&v172 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v176 = *v171;
  v177 = *(_QWORD **)(v176 + 8 * v174);
  if (!v177)
    goto LABEL_352;
  v178 = (_QWORD *)*v177;
  if (!v178)
    goto LABEL_352;
  if (v173.u32[0] < 2uLL)
  {
    while (1)
    {
      v180 = v178[1];
      if (v180 == 0x99BED48DEFBBD82BLL)
      {
        if (v178[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_350;
      }
      else if ((v180 & (*(_QWORD *)&v172 - 1)) != v174)
      {
        goto LABEL_352;
      }
      v178 = (_QWORD *)*v178;
      if (!v178)
        goto LABEL_352;
    }
  }
  while (2)
  {
    v179 = v178[1];
    if (v179 != 0x99BED48DEFBBD82BLL)
    {
      if (v179 >= *(_QWORD *)&v172)
        v179 %= *(_QWORD *)&v172;
      if (v179 != v174)
        goto LABEL_352;
      goto LABEL_339;
    }
    if (v178[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_339:
      v178 = (_QWORD *)*v178;
      if (!v178)
        goto LABEL_352;
      continue;
    }
    break;
  }
LABEL_350:
  v181 = v178[5];
  if (*(_QWORD *)(v181 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v175 = *(uint64_t **)(v181 + 32);
    goto LABEL_353;
  }
LABEL_352:
  v175 = 0;
LABEL_353:
  if (v173.u32[0] > 1uLL)
  {
    v182 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v172 <= 0xA60DDA5A69582425)
      v182 = 0xA60DDA5A69582425 % *(_QWORD *)&v172;
  }
  else
  {
    v182 = (*(_QWORD *)&v172 - 1) & 0xA60DDA5A69582425;
  }
  v183 = *(_QWORD **)(v176 + 8 * v182);
  if (!v183)
    goto LABEL_375;
  v184 = (_QWORD *)*v183;
  if (!v184)
    goto LABEL_375;
  if (v173.u32[0] < 2uLL)
  {
    v185 = *(_QWORD *)&v172 - 1;
    while (1)
    {
      v187 = v184[1];
      if (v187 == 0xA60DDA5A69582425)
      {
        if (v184[2] == 0xA60DDA5A69582425)
          goto LABEL_373;
      }
      else if ((v187 & v185) != v182)
      {
        goto LABEL_375;
      }
      v184 = (_QWORD *)*v184;
      if (!v184)
        goto LABEL_375;
    }
  }
  while (2)
  {
    v186 = v184[1];
    if (v186 != 0xA60DDA5A69582425)
    {
      if (v186 >= *(_QWORD *)&v172)
        v186 %= *(_QWORD *)&v172;
      if (v186 != v182)
        goto LABEL_375;
      goto LABEL_362;
    }
    if (v184[2] != 0xA60DDA5A69582425)
    {
LABEL_362:
      v184 = (_QWORD *)*v184;
      if (!v184)
        goto LABEL_375;
      continue;
    }
    break;
  }
LABEL_373:
  v188 = v184[5];
  if (*(_QWORD *)(v188 + 8) == 0xA60DDA5A69582425)
  {
    v458 = *(id **)(v188 + 32);
    goto LABEL_376;
  }
LABEL_375:
  v458 = 0;
LABEL_376:
  v190 = *(_QWORD **)(*v175 + 112);
  v189 = *(_QWORD **)(*v175 + 120);
  if (v190 != v189)
  {
    while (*(unsigned __int16 *)v190 != *(unsigned __int16 *)(*v175 + 282))
    {
      v190 += 14;
      if (v190 == v189)
      {
        v190 = *(_QWORD **)(*v175 + 120);
        break;
      }
    }
  }
  v468 = v175;
  v191 = *((_QWORD *)this + 8);
  if (*(_QWORD *)(v191 + 112) == v190[11])
  {
    v192 = (unsigned __int8 *)(v191 + 104);
    while (1)
    {
      v192 = *(unsigned __int8 **)v192;
      v193 = v192 != 0;
      if (!v192)
        break;
      v194 = std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(v190 + 8, v192 + 16);
      if (!v194
        || v192[16] != *((unsigned __int8 *)v194 + 16)
        || v192[17] != *((unsigned __int8 *)v194 + 17)
        || *((_DWORD *)v192 + 5) != *((_DWORD *)v194 + 5)
        || *((_DWORD *)v192 + 6) != *((_DWORD *)v194 + 6))
      {
        goto LABEL_388;
      }
    }
  }
  else
  {
LABEL_388:
    v193 = 1;
  }
  v452 = v193;
  v489 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v490 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v195 = (void *)objc_claimAutoreleasedReturnValue();
  v196 = objc_msgSend(v195, "dontMatchRouteLine");

  v197 = v60 & ~v196;
  v486[0] = 0;
  v486[1] = 0;
  v485 = (double *)v486;
  v487 = v489;
  v488 = v490;
  v198 = (uint64_t *)v190[10];
  if (v198)
  {
    v199 = 0;
    do
    {
      v200 = *((unsigned __int8 *)v198 + 17);
      v201 = 1.0 / (double)(1 << v200);
      v202 = v201 * (double)((1 << v200) + ~*((_DWORD *)v198 + 5));
      *(double *)v531 = v201 * (double)*((int *)v198 + 6);
      *(double *)&v531[8] = v202;
      *(double *)&v531[16] = *(double *)v531 + v201;
      *(double *)&v531[24] = v202 + v201;
      v489.i64[0] = fmin(*(double *)v531, *(double *)v489.i64);
      v489.i64[1] = fmin(v202, *(double *)&v489.i64[1]);
      v490.i64[0] = fmax(*(double *)v490.i64, *(double *)v531 + v201);
      v490.i64[1] = fmax(*(double *)&v490.i64[1], v202 + v201);
      if (v197)
      {
        if (v200 < 0xF)
        {
          v199 |= v200 > 0xE;
        }
        else
        {
          md::MultiRectRegion::addRect(&v485, (double *)v531);
          v199 = 1;
        }
      }
      v198 = (uint64_t *)*v198;
    }
    while (v198);
  }
  else
  {
    v199 = 0;
  }
  v470 = *v22;
  v464 = v22[1];
  if (*v22 != v464)
  {
    v467 = v197 & v199;
    v203 = v45 * (v52 + v52) / v55;
    v455 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v456 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    while (1)
    {
      if (v465)
      {
        v204 = 1;
      }
      else
      {
        v205 = *(void **)(*v470 + 160);
        if (v205)
          v204 = objc_msgSend(v205, "needsUpdateForViewingScale:", v203);
        else
          v204 = 0;
        if (((v452 | v204) & 1) == 0)
        {
          if (*(float *)(*((_QWORD *)this + 8) + 80) != (float)(*(float *)(v466 + 16) * *(float *)(v466 + 20))
            && *(_BYTE *)v466)
          {
            md::RouteRenderLayer::setElevatedRoutelineMatrix(a2, v470);
          }
          goto LABEL_400;
        }
      }
      if ((v467 & 1) == 0)
        break;
      v206 = *(id *)(*v470 + 144);
      objc_msgSend(v206, "composedRoute");
      v207 = (void *)objc_claimAutoreleasedReturnValue();
      v208 = objc_msgSend(v207, "supportsSnapping");

      v481 = 0;
      v482 = 0;
      v480 = (uint64_t *)&v481;
      v483 = v456;
      v484 = v455;
      if (v208)
      {
        std::__tree<gm::Box<double,2>,md::MultiRectSetCompare,std::allocator<gm::Box<double,2>>>::__assign_multi<std::__tree_const_iterator<gm::Box<double,2>,std::__tree_node<gm::Box<double,2>,void *> *,long>>(&v480, v485, (double *)v486);
        v210 = v487;
        v209 = v488;
LABEL_411:
        v483 = v210;
        v484 = v209;
        v211 = v467;
        goto LABEL_416;
      }
      v211 = 0;
LABEL_416:
      v478 = 0;
      v479 = 0;
      v477 = &v478;
      v212 = *v468;
      if ((v213 & 1) == 0
      {
        qword_1ECE2F300 = 0;
        qword_1ECE2F2F8 = 0;
        md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
        __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
      }
      v214 = *(_WORD **)(v212 + 48);
      v215 = *(_WORD **)(v212 + 56);
      if (v214 == v215)
        goto LABEL_427;
      v216 = *(_WORD **)(v212 + 48);
      while (*v216 != 15)
      {
        v216 += 16;
        if (v216 == v215)
          goto LABEL_427;
      }
      if (v216 == v215)
      {
LABEL_427:
        v217 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v214 != 15)
        {
          v214 += 16;
          if (v214 == v215)
          {
            v214 = *(_WORD **)(v212 + 56);
            break;
          }
        }
        v217 = (uint64_t *)(v214 + 4);
      }
      v220 = (uint64_t *)*v217;
      v218 = v217 + 1;
      v219 = v220;
      if (v220 != v218)
      {
        do
        {
          v225 = *((double *)v219 + 4);
          v224 = *((std::__shared_weak_count **)v219 + 5);
          v516 = v225;
          v517 = *(double *)&v224;
          if (*(double *)&v224 != 0.0)
          {
            v226 = (unint64_t *)&v224->__shared_owners_;
            do
              v227 = __ldxr(v226);
            while (__stxr(v227 + 1, v226));
          }
          v228 = *(unsigned __int8 *)(*(_QWORD *)&v225 + 169);
          v158 = v228 > 0xE;
          LODWORD(v228) = 1 << v228;
          v229 = 1.0 / (double)(int)v228;
          v230 = v229 * (double)((int)v228 + ~*(_DWORD *)(*(_QWORD *)&v225 + 172));
          *(double *)v531 = v229 * (double)*(int *)(*(_QWORD *)&v225 + 176);
          *(double *)&v531[8] = v230;
          *(double *)&v531[16] = *(double *)v531 + v229;
          *(double *)&v531[24] = v230 + v229;
          v489.i64[0] = fmin(*(double *)v531, *(double *)v489.i64);
          v489.i64[1] = fmin(v230, *(double *)&v489.i64[1]);
          v490.i64[0] = fmax(*(double *)v490.i64, *(double *)v531 + v229);
          v490.i64[1] = fmax(*(double *)&v490.i64[1], v230 + v229);
          if (v158)
            v231 = v211;
          else
            v231 = 0;
          if (v231 == 1)
            md::MultiRectRegion::addRect((double **)&v480, (double *)v531);
          v232 = v478;
          v233 = &v478;
LABEL_444:
          v234 = v233;
          if (v232)
          {
            do
            {
              v233 = (double **)v232;
              v235 = *((_QWORD *)v232 + 4);
              if (*(_QWORD *)&v225 < v235)
              {
                v232 = *v233;
                goto LABEL_444;
              }
              if (v235 >= *(_QWORD *)&v225)
                goto LABEL_483;
              v232 = v233[1];
            }
            while (v232);
            v234 = v233 + 1;
          }
          v236 = (double *)operator new(0x30uLL);
          v236[4] = v225;
          v236[5] = *(double *)&v224;
          if (*(double *)&v224 != 0.0)
          {
            v237 = (unint64_t *)&v224->__shared_owners_;
            do
              v238 = __ldxr(v237);
            while (__stxr(v238 + 1, v237));
          }
          *v236 = 0.0;
          v236[1] = 0.0;
          *((_QWORD *)v236 + 2) = v233;
          *v234 = v236;
          if (*v477)
          {
            v477 = (double **)*v477;
            v236 = *v234;
          }
          v239 = v478;
          v91 = v236 == v478;
          *((_BYTE *)v236 + 24) = v236 == v478;
          if (!v91)
          {
            do
            {
              v240 = *((_QWORD *)v236 + 2);
              if (*(_BYTE *)(v240 + 24))
                break;
              v241 = *(double **)(v240 + 16);
              v242 = *(_QWORD *)v241;
              if (*(_QWORD *)v241 == v240)
              {
                v245 = *((_QWORD *)v241 + 1);
                if (!v245 || (v246 = *(unsigned __int8 *)(v245 + 24), v243 = (_BYTE *)(v245 + 24), v246))
                {
                  if (*(double **)v240 == v236)
                  {
                    v247 = (uint64_t *)*((_QWORD *)v236 + 2);
                  }
                  else
                  {
                    v247 = *(uint64_t **)(v240 + 8);
                    v248 = *v247;
                    *(_QWORD *)(v240 + 8) = *v247;
                    if (v248)
                    {
                      *(_QWORD *)(v248 + 16) = v240;
                      v241 = *(double **)(v240 + 16);
                    }
                    v247[2] = (uint64_t)v241;
                    *(_QWORD *)(*(_QWORD *)(v240 + 16) + 8 * (**(_QWORD **)(v240 + 16) != v240)) = v247;
                    *v247 = v240;
                    *(_QWORD *)(v240 + 16) = v247;
                    v241 = (double *)v247[2];
                    v240 = *(_QWORD *)v241;
                  }
                  *((_BYTE *)v247 + 24) = 1;
                  *((_BYTE *)v241 + 24) = 0;
                  v251 = *(_QWORD *)(v240 + 8);
                  *(_QWORD *)v241 = v251;
                  if (v251)
                    *(_QWORD *)(v251 + 16) = v241;
                  *(double *)(v240 + 16) = v241[2];
                  *(_QWORD *)(*((_QWORD *)v241 + 2) + 8 * (**((_QWORD **)v241 + 2) != (_QWORD)v241)) = v240;
                  *(_QWORD *)(v240 + 8) = v241;
                  goto LABEL_481;
                }
              }
              else if (!v242 || (v244 = *(unsigned __int8 *)(v242 + 24), v243 = (_BYTE *)(v242 + 24), v244))
              {
                if (*(double **)v240 == v236)
                {
                  v249 = *((_QWORD *)v236 + 1);
                  *(_QWORD *)v240 = v249;
                  if (v249)
                  {
                    *(_QWORD *)(v249 + 16) = v240;
                    v241 = *(double **)(v240 + 16);
                  }
                  *((_QWORD *)v236 + 2) = v241;
                  *(_QWORD *)(*(_QWORD *)(v240 + 16) + 8 * (**(_QWORD **)(v240 + 16) != v240)) = v236;
                  *((_QWORD *)v236 + 1) = v240;
                  *(_QWORD *)(v240 + 16) = v236;
                  v241 = (double *)*((_QWORD *)v236 + 2);
                }
                else
                {
                  v236 = (double *)*((_QWORD *)v236 + 2);
                }
                *((_BYTE *)v236 + 24) = 1;
                *((_BYTE *)v241 + 24) = 0;
                v240 = *((_QWORD *)v241 + 1);
                v250 = *(double **)v240;
                v241[1] = *(double *)v240;
                if (v250)
                  *((_QWORD *)v250 + 2) = v241;
                *(double *)(v240 + 16) = v241[2];
                *(_QWORD *)(*((_QWORD *)v241 + 2) + 8 * (**((_QWORD **)v241 + 2) != (_QWORD)v241)) = v240;
                *(_QWORD *)v240 = v241;
LABEL_481:
                *((_QWORD *)v241 + 2) = v240;
                break;
              }
              *(_BYTE *)(v240 + 24) = 1;
              v236 = v241;
              *((_BYTE *)v241 + 24) = v241 == v239;
              *v243 = 1;
            }
            while (v241 != v239);
          }
          ++v479;
          *(double *)&v224 = v517;
LABEL_483:
          if (*(double *)&v224 == 0.0)
            goto LABEL_487;
          v252 = (unint64_t *)&v224->__shared_owners_;
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (v253)
          {
LABEL_487:
            v254 = (uint64_t *)v219[1];
            if (!v254)
              goto LABEL_491;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
            std::__shared_weak_count::__release_weak(v224);
            v254 = (uint64_t *)v219[1];
            if (!v254)
            {
              do
              {
LABEL_491:
                v255 = (uint64_t *)v219[2];
                v91 = *v255 == (_QWORD)v219;
                v219 = v255;
              }
              while (!v91);
              goto LABEL_433;
            }
          }
          do
          {
            v255 = v254;
            v254 = (uint64_t *)*v254;
          }
          while (v254);
LABEL_433:
          v219 = v255;
        }
        while (v255 != v218);
      }
      v221 = *v468;
      v222 = *(_WORD **)(*v468 + 48);
      v223 = *(_WORD **)(*v468 + 56);
      if (v222 != v223)
      {
        while (*v222 != 13)
        {
          v222 += 16;
          if (v222 == v223)
            goto LABEL_508;
        }
      }
      if (v222 != v223)
      {
        if ((v256 & 1) == 0
        {
          qword_1ECE2F300 = 0;
          qword_1ECE2F2F8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
        }
        v257 = *(_WORD **)(v221 + 48);
        v258 = *(_WORD **)(v221 + 56);
        if (v257 == v258)
          goto LABEL_506;
        v259 = *(_WORD **)(v221 + 48);
        while (*v259 != 13)
        {
          v259 += 16;
          if (v259 == v258)
            goto LABEL_506;
        }
        if (v259 == v258)
        {
LABEL_506:
          v260 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
        }
        else
        {
          while (*v257 != 13)
          {
            v257 += 16;
            if (v257 == v258)
            {
              v257 = *(_WORD **)(v221 + 56);
              break;
            }
          }
          v260 = (uint64_t *)(v257 + 4);
        }
        v263 = (uint64_t *)*v260;
        v261 = v260 + 1;
        v262 = v263;
        if (v263 != v261)
        {
          do
          {
            v270 = v262[4];
            v271 = *(unsigned __int8 *)(v270 + 169);
            v272 = 1.0 / (double)(1 << v271);
            v273 = v272 * (double)((1 << v271) + ~*(_DWORD *)(v270 + 172));
            *(double *)v531 = v272 * (double)*(int *)(v270 + 176);
            *(double *)&v531[8] = v273;
            *(double *)&v531[16] = *(double *)v531 + v272;
            *(double *)&v531[24] = v273 + v272;
            v489.i64[0] = fmin(*(double *)v531, *(double *)v489.i64);
            v489.i64[1] = fmin(v273, *(double *)&v489.i64[1]);
            v490.i64[0] = fmax(*(double *)v490.i64, *(double *)v531 + v272);
            v490.i64[1] = fmax(*(double *)&v490.i64[1], v273 + v272);
            if (v271 >= 0xF)
              md::MultiRectRegion::addRect((double **)&v480, (double *)v531);
            v274 = (uint64_t *)v262[1];
            if (v274)
            {
              do
              {
                v275 = v274;
                v274 = (uint64_t *)*v274;
              }
              while (v274);
            }
            else
            {
              do
              {
                v275 = (uint64_t *)v262[2];
                v91 = *v275 == (_QWORD)v262;
                v262 = v275;
              }
              while (!v91);
            }
            v262 = v275;
          }
          while (v275 != v261);
        }
      }
LABEL_508:
      v264 = -[VKPolylineOverlayRenderRegion initForVisibleRect:snappingRegion:routeLineDatas:]([VKPolylineOverlayRenderRegion alloc], "initForVisibleRect:snappingRegion:routeLineDatas:", &v489, &v480, &v477);
      v265 = *v458;
      v266 = *(_DWORD *)(objc_msgSend(v265, "alphaAtlas") + 16);

      v267 = (_QWORD *)*((_QWORD *)a2 + 1);
      v268 = v267[1];
      if ((v268 & (v268 - 1)) != 0)
      {
        v276 = 0xC97B9E962ADF4AD4;
        if (v268 <= 0xC97B9E962ADF4AD4)
          v276 = 0xC97B9E962ADF4AD4 % v268;
        v269 = *(_QWORD **)(*v267 + 8 * v276);
        do
        {
          do
            v269 = (_QWORD *)*v269;
          while (v269[1] != 0xC97B9E962ADF4AD4);
        }
        while (v269[2] != 0xC97B9E962ADF4AD4);
      }
      else
      {
        v269 = *(_QWORD **)(*v267 + 8 * ((v268 - 1) & 0xC97B9E962ADF4AD4));
        do
        {
          do
            v269 = (_QWORD *)*v269;
          while (v269[1] != 0xC97B9E962ADF4AD4);
        }
        while (v269[2] != 0xC97B9E962ADF4AD4);
      }
      v277 = *(uint64_t **)(v269[5] + 32);
      v278 = *v277;
      v279 = v277[1];
      if (v278 != v279)
      {
        while (*(_BYTE *)v278 != 21)
        {
          v278 += 16;
          if (v278 == v279)
            goto LABEL_534;
        }
      }
      if (v278 == v279 || !*(_QWORD *)(v278 + 8))
      {
LABEL_534:
        v281 = 0;
      }
      else
      {
        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v280 = (void *)objc_claimAutoreleasedReturnValue();
        v281 = objc_msgSend(v280, "enableDaVinciStyleRoute");

      }
      v282 = *(unsigned __int8 **)v460;
      md::RouteLineContext::elevationSourceContext((md::RouteLineContext *)v474, v460);
      if (!v282)
      {
        v285 = 0;
        goto LABEL_543;
      }
      v284 = v282[24];
      if (v282[24])
      {
        objc_msgSend(*(id *)(*v470 + 160), "overlay");
        v454 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v454, "composedRoute");
        v453 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v453, "elevationModel"))
        {
          v285 = 1;
LABEL_542:

          goto LABEL_543;
        }
      }
      v285 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v282 + 24))(v282);
      if (v284)
        goto LABEL_542;
LABEL_543:
      if (*(_BYTE *)(v459 + 32))
        v286 = *(unsigned int *)(v459 + 36);
      else
        v286 = 0;
      if (v461)
        v287 = 0;
      else
        v287 = v211;
      if (v285)
        v288 = v282;
      else
        v288 = 0;
      LODWORD(v283) = v266;
      v289 = objc_msgSend(*(id *)(*v470 + 160), "buildRouteLine:matchToRoads:shouldGenerateSnapPath:viewUnitsPerPoint:force:boundsInflation:isGradientTraffic:currentLegIndex:elevationSource:elevationSourceContext:", v264, v211, v287, v204, v281, v286, v203, v283, v288, v474);
      v290 = (_QWORD *)*((_QWORD *)a2 + 1);
      v291 = (int8x8_t)v290[1];
      if (!*(_QWORD *)&v291)
        goto LABEL_575;
      v292 = (uint8x8_t)vcnt_s8(v291);
      v292.i16[0] = vaddlv_u8(v292);
      if (v292.u32[0] > 1uLL)
      {
        v293 = 0x13043386C0978CC2;
        if (*(_QWORD *)&v291 <= 0x13043386C0978CC2uLL)
          v293 = 0x13043386C0978CC2uLL % *(_QWORD *)&v291;
      }
      else
      {
        v293 = (*(_QWORD *)&v291 - 1) & 0x13043386C0978CC2;
      }
      v294 = *(_QWORD **)(*v290 + 8 * v293);
      if (!v294)
        goto LABEL_575;
      v295 = (_QWORD *)*v294;
      if (!v295)
        goto LABEL_575;
      if (v292.u32[0] < 2uLL)
      {
        v296 = *(_QWORD *)&v291 - 1;
        while (1)
        {
          v298 = v295[1];
          if (v298 == 0x13043386C0978CC2)
          {
            if (v295[2] == 0x13043386C0978CC2)
              goto LABEL_573;
          }
          else if ((v298 & v296) != v293)
          {
            goto LABEL_575;
          }
          v295 = (_QWORD *)*v295;
          if (!v295)
            goto LABEL_575;
        }
      }
      while (1)
      {
        v297 = v295[1];
        if (v297 == 0x13043386C0978CC2)
          break;
        if (v297 >= *(_QWORD *)&v291)
          v297 %= *(_QWORD *)&v291;
        if (v297 != v293)
          goto LABEL_575;
LABEL_562:
        v295 = (_QWORD *)*v295;
        if (!v295)
          goto LABEL_575;
      }
      if (v295[2] != 0x13043386C0978CC2)
        goto LABEL_562;
LABEL_573:
      v299 = v295[5];
      if (*(_QWORD *)(v299 + 8) == 0x13043386C0978CC2)
      {
        v300 = *(_QWORD *)(v299 + 32);
        goto LABEL_576;
      }
LABEL_575:
      v300 = 0;
LABEL_576:
      v301 = *(unsigned __int8 *)(v300 + 176);
      v302 = fmaxf(*((float *)v462 + 770) + *((float *)v462 + 769), 1.0);
      v303 = *(void **)(*v470 + 160);
      v471[0] = MEMORY[0x1E0C809B0];
      v471[1] = 3221225472;
      v471[2] = ___ZN2md16RouteRenderLayer21updateRouteLineMeshesERKNS_13LayoutContextERKNSt3__16vectorINS4_10shared_ptrINS_16RouteLineOverlayEEENS4_9allocatorIS8_EEEEb_block_invoke;
      v471[3] = &__block_descriptor_61_e92_v16__0_fast_shared_ptr_md::RouteLineSection__mdm::MDAllocator_____fast_shared_ptr_control__8l;
      v471[4] = v470;
      v471[5] = v457;
      v471[6] = &v491;
      v473 = v301 == 2;
      v472 = v302;
      objc_msgSend(v303, "forEachSection:", v471);
      v304 = *v470;
      *(_BYTE *)(*v470 + 208) = v451 != 0;
      if ((v289 & 1) != 0)
      {
        v305 = *(_QWORD **)(v304 + 288);
        v306 = *(_QWORD **)(v304 + 296);
        v307 = (_QWORD *)v304;
        if (v306 != v305)
        {
          do
          {
            v309 = *--v306;
            v308 = v309;
            *v306 = 0;
            if (v309)
              (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
          }
          while (v306 != v305);
          v307 = (_QWORD *)*v470;
        }
        *(_QWORD *)(v304 + 296) = v305;
        v310 = (char *)v307[37];
        v311 = (char *)v307[36];
        v312 = v310 - v311;
        v313 = (v310 - v311) >> 3;
        if (v313 < (uint64_t)(v307[38] - (_QWORD)v311) >> 3)
        {
          v449 = v301;
          v314 = v300;
          v315 = v264;
          v316 = v310 - v311;
          if (v310 == v311)
          {
            v307[36] = 8 * v313;
            v307[37] = 8 * v313;
            v307[38] = 8 * v313;
            v264 = v315;
            v300 = v314;
            v301 = v449;
          }
          else
          {
            if (v312 < 0)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v317 = (char *)operator new(v310 - v311);
            v318 = (unint64_t)&v317[8 * v313];
            v319 = v316 - 8;
            if ((unint64_t)(v316 - 8) < 0x78)
            {
              v320 = &v317[8 * v313];
              v264 = v315;
              v300 = v314;
              v301 = v449;
              goto LABEL_635;
            }
            v341 = (unint64_t)&v310[-(v319 & 0xFFFFFFFFFFFFFFF8) - 8] >= v318
                || &v317[v312 - (v319 & 0xFFFFFFFFFFFFFFF8) - 8] >= v310;
            v320 = &v317[8 * v313];
            v264 = v315;
            v300 = v314;
            v301 = v449;
            if (!v341)
              goto LABEL_771;
            v342 = (v319 >> 3) + 1;
            v343 = &v317[8 * v313 - 16];
            v344 = v310 - 32;
            v345 = v342 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v347 = *(_OWORD *)v344;
              v346 = *((_OWORD *)v344 + 1);
              *(_OWORD *)v344 = 0uLL;
              *((_OWORD *)v344 + 1) = 0uLL;
              v344 -= 32;
              *((_OWORD *)v343 - 1) = v347;
              *(_OWORD *)v343 = v346;
              v343 -= 32;
              v345 -= 4;
            }
            while (v345);
            v320 = (char *)(v318 - 8 * (v342 & 0x3FFFFFFFFFFFFFFCLL));
            v310 -= 8 * (v342 & 0x3FFFFFFFFFFFFFFCLL);
            if (v342 != (v342 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_771:
              do
              {
LABEL_635:
                v348 = *((_QWORD *)v310 - 1);
                v310 -= 8;
                *(_QWORD *)v310 = 0;
                *((_QWORD *)v320 - 1) = v348;
                v320 -= 8;
              }
              while (v310 != v311);
            }
            v311 = (char *)v307[36];
            v349 = (char *)v307[37];
            v307[36] = v320;
            v307[37] = v318;
            v307[38] = v318;
            while (v349 != v311)
            {
              v351 = *((_QWORD *)v349 - 1);
              v349 -= 8;
              v350 = v351;
              *(_QWORD *)v349 = 0;
              if (v351)
                (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
            }
          }
          if (v311)
            operator delete(v311);
        }
        v321 = *(_QWORD *)(*v470 + 320);
        *(_QWORD *)(*v470 + 320) = 0;
        if (v321)
          (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
        v322 = *(_QWORD *)(*v470 + 336);
        *(_QWORD *)(*v470 + 336) = 0;
        if (v322)
          (*(void (**)(uint64_t))(*(_QWORD *)v322 + 8))(v322);
        v323 = *(_QWORD *)(*v470 + 328);
        *(_QWORD *)(*v470 + 328) = 0;
        if (v323)
          (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
        v324 = *(_QWORD *)(*v470 + 272);
        *(_QWORD *)(*v470 + 272) = 0;
        if (v324)
          (*(void (**)(uint64_t))(*(_QWORD *)v324 + 8))(v324);
        v325 = *(_QWORD *)(*v470 + 264);
        *(_QWORD *)(*v470 + 264) = 0;
        if (v325)
          (*(void (**)(uint64_t))(*(_QWORD *)v325 + 8))(v325);
        v326 = *(void **)(*v470 + 160);
        if (v326)
        {
          objc_msgSend(v326, "bounds");
          v327 = *(double *)&v531[24] - *(double *)v531;
        }
        else
        {
          v327 = 0.0;
          memset(v531, 0, 48);
        }
        *(double *)(*v470 + 168) = 1.0 / v327;
        v328 = *v470;
        v329 = *(_QWORD *)(*v470 + 504);
        if (v329)
        {
          v330 = *(double *)(v329 + 280);
          v331 = *(std::__shared_weak_count **)(v329 + 288);
          if (*(double *)&v331 == 0.0)
          {
            v517 = 0.0;
            v492[0] = 0uLL;
            *(_QWORD *)&v531[8] = 0;
          }
          else
          {
            v332 = (unint64_t *)&v331->__shared_owners_;
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
            v517 = *(double *)&v331;
            v492[0] = 0uLL;
            *(_QWORD *)&v531[8] = v331;
            do
              v334 = __ldxr(v332);
            while (__stxr(v334 + 1, v332));
          }
          v516 = v330;
          *(double *)v531 = v330;
          memset(&v531[16], 0, 17);
          if (v330 != 0.0)
            LOBYTE(v330) = (*(uint64_t (**)(double))(**(_QWORD **)&v330 + 48))(COERCE_DOUBLE(*(_QWORD *)&v330));
          v531[32] = LOBYTE(v330);
          if (*(double *)&v331 == 0.0)
            goto LABEL_622;
          v336 = (unint64_t *)&v331->__shared_owners_;
          do
            v337 = __ldaxr(v336);
          while (__stlxr(v337 - 1, v336));
          if (v337)
          {
LABEL_622:
            v338 = (std::__shared_weak_count *)*((_QWORD *)&v492[0] + 1);
            if (*((_QWORD *)&v492[0] + 1))
              goto LABEL_623;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
            std::__shared_weak_count::__release_weak(v331);
            v338 = (std::__shared_weak_count *)*((_QWORD *)&v492[0] + 1);
            if (*((_QWORD *)&v492[0] + 1))
            {
LABEL_623:
              v339 = (unint64_t *)&v338->__shared_owners_;
              do
                v340 = __ldaxr(v339);
              while (__stlxr(v340 - 1, v339));
              if (!v340)
              {
                ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                std::__shared_weak_count::__release_weak(v338);
              }
            }
          }
          if (v531[32])
          {
            v352 = *(_QWORD *)(*(_QWORD *)v531 + 24);
            v353 = fminf(fmaxf(fmaxf(*((float *)v462 + 770) + *((float *)v462 + 768), 1.0), 0.0), 23.0);
            v354 = *(float **)v352;
            if (*(_QWORD *)v352
              && (v355 = *v354, LODWORD(v354) = *v354 == 1.0, *(_BYTE *)(v352 + 10))
              && (v355 != 0.0 ? (v356 = v355 == 1.0) : (v356 = 1), !v356)
              || (v357 = *(unsigned __int8 *)(v352 + v354 + 11), v355 = 0.0, v357 == 2))
            {
              LOBYTE(v516) = 1;
              LOBYTE(v492[0]) = 1;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v352, 0x61u, 0, (BOOL *)&v516, v353);
              v359 = v358;
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v352, 0x61u, 1u, (BOOL *)v492, v353);
              v335 = v359 + (float)((float)(v360 - v359) * v355);
            }
            else
            {
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)v531 + 24), 0x61u, v357, 0, v353);
              v335 = v361;
            }
          }
          else
          {
            v335 = 0.0;
          }
          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v531);
          v328 = *v470;
        }
        else
        {
          v335 = 0.0;
        }
        v362 = *(void **)(v328 + 160);
        if (v301 == 2 && v450)
        {
          memset(v531, 0, 24);
          v365 = *(_BYTE **)(v300 + 200);
          v364 = *(_BYTE **)(v300 + 208);
          v366 = v364 - v365;
          if (v364 != v365)
          {
            if (v366 < 0)
              abort();
            *(_QWORD *)v531 = operator new(v364 - v365);
            *(_QWORD *)&v531[8] = *(_QWORD *)v531;
            v367 = *(_QWORD *)v531 + 8 * (v366 >> 3);
            *(_QWORD *)&v531[16] = v367;
            memcpy(*(void **)v531, v365, v366);
            *(_QWORD *)&v531[8] = v367;
          }
        }
        else
        {
          memset(v531, 0, 24);
        }
        objc_msgSend(v362, "generateArrowsForManeuverDisplayMode:routeLineWidth:collideTrafficFeatures:", v451, v531, v335);
        if (*(_QWORD *)v531)
        {
          *(_QWORD *)&v531[8] = *(_QWORD *)v531;
          operator delete(*(void **)v531);
        }
        if (*(_BYTE *)v466)
          goto LABEL_679;
        v368 = (_QWORD *)*((_QWORD *)a2 + 1);
        v369 = v368[1];
        if ((v369 & (v369 - 1)) != 0)
        {
          v371 = 0xE42D19AFCA302E68;
          if (v369 <= 0xE42D19AFCA302E68)
            v371 = 0xE42D19AFCA302E68 % v369;
          v370 = *(_QWORD **)(*v368 + 8 * v371);
          do
          {
            do
              v370 = (_QWORD *)*v370;
            while (v370[1] != 0xE42D19AFCA302E68);
          }
          while (v370[2] != 0xE42D19AFCA302E68);
        }
        else
        {
          v370 = *(_QWORD **)(*v368 + 8 * ((v369 - 1) & 0xE42D19AFCA302E68));
          do
          {
            do
              v370 = (_QWORD *)*v370;
            while (v370[1] != 0xE42D19AFCA302E68);
          }
          while (v370[2] != 0xE42D19AFCA302E68);
        }
        v372 = *(_DWORD *)(*(_QWORD *)(v370[5] + 32) + 88);
        v158 = v372 > 0xA;
        v373 = (1 << v372) & 0x418;
        if (v158 || v373 == 0)
        {
          v387 = *(void **)(*v470 + 160);
          if (v387)
          {
            objc_msgSend(v387, "bounds");
            v388 = *((double *)&v502 + 1);
            v389 = *(double *)&v502;
            v390 = *(double *)&v504;
            v391 = *((double *)&v503 + 1);
          }
          else
          {
            v389 = 0.0;
            v388 = 0.0;
            v391 = 0.0;
            v390 = 0.0;
            v503 = 0u;
            v504 = 0u;
            v502 = 0u;
          }
          v501[0] = v389;
          v501[1] = v388;
          v501[2] = v391;
          v501[3] = v390;
          md::LayoutContext::frameState(a2);
          v393 = *(unsigned __int8 *)(v392 + 128) - 1;
          if (v393 > 2)
          {
            v412 = v389;
            *((_QWORD *)&v405 + 1) = 0;
            *(double *)&v405 = v391 - v389;
            *((_QWORD *)&v407 + 1) = 0;
            *(double *)&v407 = v390 - v388;
            v413 = *(unint64_t *)&v388;
            v406 = 0uLL;
            v411 = 0;
            v414 = 1.0;
            v410 = 0;
            v409 = 0;
            v408 = 0uLL;
          }
          else
          {
            gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v505, v501, 0.0, 0.0);
            v535 = 0;
            v532 = 0u;
            v533 = 0;
            memset(&v531[8], 0, 48);
            v538 = 0x3FF0000000000000;
            v536 = v511;
            v537 = v512;
            *(double *)v531 = v513 - *(double *)&v511;
            *(double *)&v531[40] = v514 - *((double *)&v511 + 1);
            v534 = v515 - v512;
            v394 = v508;
            v395 = v509;
            v396 = v394 + v394;
            v397 = (v394 + v394) * v394;
            v398 = (v395 + v395) * v395;
            v399 = v507;
            v400 = v399 + v399;
            v401 = (v399 + v399) * v508;
            v402 = (v395 + v395) * v510;
            v403 = v509 * (v399 + v399);
            v404 = 1.0 - (v399 + v399) * v399;
            v516 = 1.0 - (v397 + v398);
            v517 = v402 + v401;
            v520 = v401 - v402;
            v521 = v404 - v398;
            v524 = v510 * v396 + v403;
            v525 = v396 * v509 - v510 * v400;
            v518 = v403 - v510 * v396;
            v522 = v510 * v400 + v396 * v509;
            v526 = v404 - v397;
            v519 = 0;
            v523 = 0;
            v527 = 0;
            v528 = v505;
            v529 = v506;
            v530 = 0x3FF0000000000000;
            gm::operator*<double,4,4,4>((double *)v492, &v516, (double *)v531);
            v405 = v492[0];
            v406 = v492[1];
            v407 = v494;
            v408 = v495;
            v409 = v493;
            v410 = v496;
            v411 = v497;
            v412 = v498;
            v413 = v499;
            v414 = v500;
          }
          v415 = *v470;
          *(_OWORD *)(v415 + 8) = v405;
          *(_OWORD *)(v415 + 24) = v406;
          *(_QWORD *)(v415 + 40) = v409;
          *(_OWORD *)(v415 + 48) = v407;
          *(_OWORD *)(v415 + 64) = v408;
          *(_QWORD *)(v415 + 80) = v410;
          *(_QWORD *)(v415 + 96) = v411;
          *(double *)(v415 + 104) = v412;
          *(_OWORD *)(v415 + 112) = v413;
          *(double *)(v415 + 128) = v414;
          *(_QWORD *)(v415 + 88) = 0;
          v416 = *(_QWORD **)(v415 + 232);
          if (!v416)
          {
            md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v531);
            v417 = *v470;
            v418 = *(_OWORD *)v531;
            *(_QWORD *)&v531[8] = 0;
            *(_QWORD *)v531 = 0;
            v419 = *(std::__shared_weak_count **)(v417 + 240);
            *(_OWORD *)(v417 + 232) = v418;
            if (v419)
            {
              v420 = (unint64_t *)&v419->__shared_owners_;
              do
                v421 = __ldaxr(v420);
              while (__stlxr(v421 - 1, v420));
              if (!v421)
              {
                ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
                std::__shared_weak_count::__release_weak(v419);
              }
            }
            v422 = *(std::__shared_weak_count **)&v531[8];
            if (*(_QWORD *)&v531[8])
            {
              v423 = (unint64_t *)(*(_QWORD *)&v531[8] + 8);
              do
                v424 = __ldaxr(v423);
              while (__stlxr(v424 - 1, v423));
              if (!v424)
              {
                ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
                std::__shared_weak_count::__release_weak(v422);
              }
            }
            v415 = *v470;
            v416 = *(_QWORD **)(*v470 + 232);
          }
          v425 = *(std::__shared_weak_count **)(v415 + 240);
          *(_QWORD *)v531 = v416;
          *(_QWORD *)&v531[8] = v425;
          if (v425)
          {
            v426 = (unint64_t *)&v425->__shared_owners_;
            do
              v427 = __ldxr(v426);
            while (__stxr(v427 + 1, v426));
          }
          md::GeometryLogic::setTransformConstantDataWithMercatorRect(v416, v501, v393 < 3, 0.0, 0.0, 0.0);
          if (v425)
          {
            v428 = (unint64_t *)&v425->__shared_owners_;
            do
              v429 = __ldaxr(v428);
            while (__stlxr(v429 - 1, v428));
            if (!v429)
            {
              ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
              std::__shared_weak_count::__release_weak(v425);
            }
          }
          v375 = v470;
        }
        else
        {
LABEL_679:
          v375 = v470;
          md::RouteRenderLayer::setElevatedRoutelineMatrix(a2, v470);
        }
        v376 = *(void **)(*v375 + 160);
        objc_msgSend(v376, "overlay");
        v377 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v377, "composedRoute");
        v378 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v376, "createMeshIfNecessary:", objc_msgSend(v378, "currentDisplayStep"));

        v379 = *(_QWORD *)(*v470 + 400);
        *(_QWORD *)(*v470 + 400) = 0;
        if (v379)
        {
          v380 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v379);
          MEMORY[0x1A1AF4E00](v380, 0x10A0C40D234DDC7);
        }
      }
      else if (*(float *)(*((_QWORD *)this + 8) + 80) != (float)(*(float *)(v466 + 16) * *(float *)(v466 + 20))
             && *(_BYTE *)v466)
      {
        md::RouteRenderLayer::setElevatedRoutelineMatrix(a2, v470);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v476);
      v381 = v475;
      if (v475)
      {
        do
        {
          v383 = v381;
          v381 = (_QWORD *)*v381;
          v384 = (std::__shared_weak_count *)v383[6];
          if (v384)
          {
            v385 = (unint64_t *)&v384->__shared_owners_;
            do
              v386 = __ldaxr(v385);
            while (__stlxr(v386 - 1, v385));
            if (!v386)
            {
              ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
              std::__shared_weak_count::__release_weak(v384);
            }
          }
          operator delete(v383);
        }
        while (v381);
      }
      v382 = v474[0];
      v474[0] = 0;
      if (v382)
        operator delete(v382);

      std::__tree<gdc::LayerDataWithWorld>::destroy(v478);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v481);
LABEL_400:
      v470 += 2;
      if (v470 == v464)
        goto LABEL_722;
    }
    v481 = 0;
    v482 = 0;
    v480 = (uint64_t *)&v481;
    v209 = v455;
    v210 = v456;
    goto LABEL_411;
  }
LABEL_722:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v486[0]);
  v430 = *((_QWORD *)this + 8);
  *(_BYTE *)(v430 + 48) = 0;
  v431 = (_QWORD *)*((_QWORD *)a2 + 1);
  v432 = (int8x8_t)v431[1];
  if (!*(_QWORD *)&v432)
  {
    LOBYTE(v436) = 0;
    v434 = v448;
    goto LABEL_748;
  }
  v433 = (uint8x8_t)vcnt_s8(v432);
  v433.i16[0] = vaddlv_u8(v433);
  v434 = v448;
  if (v433.u32[0] > 1uLL)
  {
    v435 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v432 <= 0xE42D19AFCA302E68)
      v435 = 0xE42D19AFCA302E68 % *(_QWORD *)&v432;
  }
  else
  {
    v435 = (*(_QWORD *)&v432 - 1) & 0xE42D19AFCA302E68;
  }
  v437 = *(_QWORD **)(*v431 + 8 * v435);
  if (!v437)
    goto LABEL_747;
  v438 = (_QWORD *)*v437;
  if (!v438)
    goto LABEL_747;
  if (v433.u32[0] < 2uLL)
  {
    while (1)
    {
      v440 = v438[1];
      if (v440 == 0xE42D19AFCA302E68)
      {
        if (v438[2] == 0xE42D19AFCA302E68)
          goto LABEL_744;
      }
      else if ((v440 & (*(_QWORD *)&v432 - 1)) != v435)
      {
        goto LABEL_747;
      }
      v438 = (_QWORD *)*v438;
      if (!v438)
        goto LABEL_747;
    }
  }
  while (1)
  {
    v439 = v438[1];
    if (v439 == 0xE42D19AFCA302E68)
      break;
    if (v439 >= *(_QWORD *)&v432)
      v439 %= *(_QWORD *)&v432;
    if (v439 != v435)
      goto LABEL_747;
LABEL_733:
    v438 = (_QWORD *)*v438;
    if (!v438)
      goto LABEL_747;
  }
  if (v438[2] != 0xE42D19AFCA302E68)
    goto LABEL_733;
LABEL_744:
  v441 = v438[5];
  if (*(_QWORD *)(v441 + 8) != 0xE42D19AFCA302E68)
  {
LABEL_747:
    LOBYTE(v436) = 0;
    goto LABEL_748;
  }
  v436 = *(_QWORD *)(v441 + 32);
  if (v436)
    LOBYTE(v436) = *(_BYTE *)(v436 + 84) == 3;
LABEL_748:
  *(_BYTE *)(v430 + 72) = v436;
  *(_BYTE *)(v430 + 73) = v461;
  *(float *)(v430 + 80) = v434[4] * v434[5];
  if ((*(_QWORD *)&v432 & (*(_QWORD *)&v432 - 1)) != 0)
  {
    v443 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v432 <= 0x99BED48DEFBBD82BLL)
      v443 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v432;
    v442 = *(_QWORD **)(*v431 + 8 * v443);
    do
    {
      do
        v442 = (_QWORD *)*v442;
      while (v442[1] != 0x99BED48DEFBBD82BLL);
    }
    while (v442[2] != 0x99BED48DEFBBD82BLL);
  }
  else
  {
    v442 = *(_QWORD **)(*v431 + 8 * ((*(_QWORD *)&v432 - 1) & 0x99BED48DEFBBD82BLL));
    do
    {
      do
        v442 = (_QWORD *)*v442;
      while (v442[1] != 0x99BED48DEFBBD82BLL);
    }
    while (v442[2] != 0x99BED48DEFBBD82BLL);
  }
  v444 = **(_QWORD **)(v442[5] + 32);
  v445 = *(unsigned __int16 **)(v444 + 112);
  v446 = *(unsigned __int16 **)(v444 + 120);
  if (v445 != v446)
  {
    v447 = *(unsigned __int16 *)(v444 + 282);
    while (*v445 != v447)
    {
      v445 += 56;
      if (v445 == v446)
      {
        v445 = v446;
        break;
      }
    }
  }
  if ((unsigned __int16 *)(v430 + 88) != v445 + 32)
  {
    *(_DWORD *)(v430 + 120) = *((_DWORD *)v445 + 24);
    std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>((_QWORD *)(v430 + 88), *((uint64_t **)v445 + 10));
  }
}

void sub_19F24B548(_Unwind_Exception *a1)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x390]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x410]);
  _Unwind_Resume(a1);
}

void sub_19F24B56C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F24B828()
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x390]);
  JUMPOUT(0x19F24B834);
}

void std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<geo::QuadTile,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v4 = a1[1];
  if (!v4)
    goto LABEL_7;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v7 = *((_OWORD *)a2 + 1);
      v6[4] = a2[4];
      *((_OWORD *)v6 + 1) = v7;
      v8 = (_QWORD *)*v6;
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = (uint64_t *)*a2;
      v6 = v8;
      if (!v8)
        goto LABEL_7;
    }
    do
    {
      v16 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v16;
    }
    while (v16);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      v9 = operator new(0x28uLL);
      *(_QWORD *)v9 = 0;
      v10 = *((unsigned __int8 *)a2 + 17);
      v11 = *((int *)a2 + 5);
      v12 = *((int *)a2 + 6);
      v13 = *((unsigned __int8 *)a2 + 16);
      v9[16] = v13;
      v9[17] = v10;
      *((_DWORD *)v9 + 5) = v11;
      *((_DWORD *)v9 + 6) = v12;
      v14 = (v10
           - 0x61C8864680B583EBLL
           + ((v13 - 0x61C8864680B583EBLL) << 6)
           + ((unint64_t)(v13 - 0x61C8864680B583EBLL) >> 2)) ^ (v13 - 0x61C8864680B583EBLL);
      v15 = (v11 - 0x61C8864680B583EBLL + (v14 << 6) + (v14 >> 2)) ^ v14;
      *((_QWORD *)v9 + 1) = (v12 - 0x61C8864680B583EBLL + (v15 << 6) + (v15 >> 2)) ^ v15;
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_multi((uint64_t)a1, (uint64_t)v9);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19F24B974(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t prime;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  uint64_t *j;
  size_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t *i;
  uint8x8_t v31;
  unint64_t v32;
  size_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  _BOOL4 v45;
  char v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  _BOOL4 v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;

  v4 = (*(unsigned __int8 *)(a2 + 17)
      + ((*(unsigned __int8 *)(a2 + 16) - 0x61C8864680B583EBLL) << 6)
      + (((unint64_t)*(unsigned __int8 *)(a2 + 16) - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*(unsigned __int8 *)(a2 + 16) - 0x61C8864680B583EBLL);
  v5 = (*(int *)(a2 + 20) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
  v6 = (*(int *)(a2 + 24) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  *(_QWORD *)(a2 + 8) = v6;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v9 = *(float *)(a1 + 32);
  if (!v7 || (float)(v9 * (float)v7) < v8)
  {
    v10 = 1;
    if (v7 >= 3)
      v10 = (v7 & (v7 - 1)) != 0;
    v11 = v10 | (2 * v7);
    v12 = vcvtps_u32_f32(v8 / v9);
    if (v11 <= v12)
      prime = v12;
    else
      prime = v11;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_117;
    if (prime >= v7)
      goto LABEL_43;
    v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v27 = std::__next_prime(v27);
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
    }
    if (prime <= v27)
      prime = v27;
    if (prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_117:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * prime);
      v15 = *(void **)a1;
      *(_QWORD *)a1 = v14;
      if (v15)
        operator delete(v15);
      v16 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16++) = 0;
      while (prime != v16);
      v18 = a1 + 16;
      v17 = *(uint64_t ***)(a1 + 16);
      if (v17)
      {
        v19 = (size_t)v17[1];
        v20 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v19 >= prime)
            v19 %= prime;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v18;
          for (i = *v17; *v17; i = *v17)
          {
            v33 = i[1];
            if (v33 >= prime)
              v33 %= prime;
            if (v33 == v19)
            {
              v17 = (uint64_t **)i;
            }
            else
            {
              v34 = i;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
              {
                do
                {
                  v35 = v34;
                  v34 = (uint64_t *)*v34;
                }
                while (v34
                     && *((unsigned __int8 *)i + 16) == *((unsigned __int8 *)v34 + 16)
                     && *((unsigned __int8 *)i + 17) == *((unsigned __int8 *)v34 + 17)
                     && *((_DWORD *)i + 5) == *((_DWORD *)v34 + 5)
                     && *((_DWORD *)i + 6) == *((_DWORD *)v34 + 6));
                *v17 = v34;
                v36 = 8 * v33;
                *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
                **(_QWORD **)(*(_QWORD *)a1 + v36) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v17;
                v17 = (uint64_t **)i;
                v19 = v33;
              }
            }
          }
        }
        else
        {
          v21 = v19 & v20;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v18;
          for (j = *v17; *v17; j = *v17)
          {
            v23 = j[1] & v20;
            if (v23 == v21)
            {
              v17 = (uint64_t **)j;
            }
            else
            {
              v24 = j;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
              {
                do
                {
                  v25 = v24;
                  v24 = (uint64_t *)*v24;
                }
                while (v24
                     && *((unsigned __int8 *)j + 16) == *((unsigned __int8 *)v24 + 16)
                     && *((unsigned __int8 *)j + 17) == *((unsigned __int8 *)v24 + 17)
                     && *((_DWORD *)j + 5) == *((_DWORD *)v24 + 5)
                     && *((_DWORD *)j + 6) == *((_DWORD *)v24 + 6));
                *v17 = v24;
                v26 = 8 * v23;
                *v25 = **(_QWORD **)(*(_QWORD *)a1 + v26);
                **(_QWORD **)(*(_QWORD *)a1 + v26) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v17;
                v17 = (uint64_t **)j;
                v21 = v23;
              }
            }
          }
        }
      }
      v7 = prime;
    }
    else
    {
      v54 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v54)
        operator delete(v54);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    v32 = v6;
    if (v7 <= v6)
      v32 = v6 % v7;
  }
  else
  {
    v32 = (v7 - 1) & v6;
  }
  v37 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v32);
  if (v37)
  {
    v38 = *(unsigned __int8 *)(a2 + 16);
    v39 = *(unsigned __int8 *)(a2 + 17);
    v40 = *(_DWORD *)(a2 + 20);
    v41 = *(_DWORD *)(a2 + 24);
    if (v31.u32[0] >= 2uLL)
    {
      v47 = 0;
      do
      {
        v43 = v37;
        v37 = (uint64_t *)*v37;
        if (!v37)
          break;
        v48 = v37[1];
        v49 = v48;
        if (v48 >= v7)
          v49 = v48 % v7;
        if (v49 != v32)
          break;
        v50 = v48 == v6
           && *((unsigned __int8 *)v37 + 16) == v38
           && *((unsigned __int8 *)v37 + 17) == v39
           && *((_DWORD *)v37 + 5) == v40
           && *((_DWORD *)v37 + 6) == v41;
        v51 = v47 & !v50;
        v47 |= v50;
      }
      while (v51 != 1);
    }
    else
    {
      v42 = 0;
      do
      {
        v43 = v37;
        v37 = (uint64_t *)*v37;
        if (!v37)
          break;
        v44 = v37[1];
        if ((v44 & (v7 - 1)) != v32)
          break;
        v45 = v44 == v6
           && *((unsigned __int8 *)v37 + 16) == v38
           && *((unsigned __int8 *)v37 + 17) == v39
           && *((_DWORD *)v37 + 5) == v40
           && *((_DWORD *)v37 + 6) == v41;
        v46 = v42 & !v45;
        v42 |= v45;
      }
      while ((v46 & 1) == 0);
    }
  }
  else
  {
    v43 = 0;
  }
  v52 = *(_QWORD *)(a2 + 8);
  if (v31.u32[0] > 1uLL)
  {
    if (v52 >= v7)
      v52 %= v7;
  }
  else
  {
    v52 &= v7 - 1;
  }
  if (!v43)
  {
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v52) = a1 + 16;
    if (!*(_QWORD *)a2)
      goto LABEL_104;
    v53 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v53 >= v7)
        v53 %= v7;
    }
    else
    {
      v53 &= v7 - 1;
    }
LABEL_103:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = a2;
    goto LABEL_104;
  }
  *(_QWORD *)a2 = *v43;
  *v43 = a2;
  if (*(_QWORD *)a2)
  {
    v53 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v53 >= v7)
        v53 %= v7;
    }
    else
    {
      v53 &= v7 - 1;
    }
    if (v53 != v52)
      goto LABEL_103;
  }
LABEL_104:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(uint64_t a1)
{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  geo::read_write_lock *v5;
  const char *v6;
  gss::Allocator *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[15];
  char v12;
  _QWORD v13[2];

  v2 = (pthread_rwlock_t *)(a1 + 16);
  v13[1] = a1 + 16;
  v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  memset(v11, 0, sizeof(v11));
  v12 = 1;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v11, a1 + 232);
  v5 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"unlock", v6);
  v7 = (gss::Allocator *)gss::DisplayStyle::DisplayStyle((uint64_t)v13, (uint64_t)v11);
  if (!v11[14])
  {
    v8 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      v9 = gss::Allocator::instance(v7);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, v8, *(unsigned __int16 *)&v11[12]);
    }
  }
  return v13[0];
}

void sub_19F24C010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

uint64_t gss::DisplayStyle::DisplayStyle(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  _DWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  _DWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  _DWORD *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  _DWORD *v54;
  unint64_t v55;
  _DWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int *v59;
  _DWORD *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  _DWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  _DWORD *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  _DWORD *v78;
  unint64_t v79;
  _DWORD *v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int *v83;
  _DWORD *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  _DWORD *v90;
  unint64_t v91;
  _DWORD *v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int *v95;
  _DWORD *v96;
  unsigned int v97;
  _BYTE *v98;

  *(_QWORD *)result = 0x1010000000000;
  v2 = *(unsigned __int16 *)(a2 + 10);
  if (!*(_WORD *)(a2 + 10))
  {
    v3 = 0;
    goto LABEL_29;
  }
  v3 = *(_QWORD *)a2;
  if (*(_BYTE *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      v8 = *(_DWORD **)a2;
      v9 = *(unsigned __int16 *)(a2 + 10);
      do
      {
        v10 = v9 >> 1;
        v11 = &v8[v9 >> 1];
        v13 = *v11;
        v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < 0x10001)
          v8 = v12;
        else
          v9 = v10;
      }
      while (v9);
      if (v8 == (_DWORD *)(v3 + 4 * v2))
        goto LABEL_29;
      if (*v8 != 65537)
        goto LABEL_29;
      v3 = ((unint64_t)v8 - v3) >> 2;
      if ((_DWORD)v2 == (unsigned __int16)v3)
        goto LABEL_29;
    }
    else
    {
      v4 = 0;
      while (1)
      {
        v5 = *(_DWORD *)(v3 + 4 * v4);
        if (v5 >= 0x10001)
          break;
        if (v2 == ++v4)
          goto LABEL_29;
      }
      if (v5 == 65537)
        v3 = v4;
      else
        v3 = *(unsigned __int16 *)(a2 + 10);
      if ((_DWORD)v2 == (unsigned __int16)v3)
        goto LABEL_29;
    }
LABEL_23:
    v3 = *(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v3;
    *(_BYTE *)result = *(_WORD *)v3;
    if (!(_DWORD)v2)
      goto LABEL_58;
    goto LABEL_30;
  }
  v6 = 4 * v2;
  v7 = *(_DWORD **)a2;
  while (*v7 != 65537)
  {
    ++v7;
    v6 -= 4;
    if (!v6)
    {
      v7 = (_DWORD *)(v3 + 4 * v2);
      break;
    }
  }
  v3 = ((unint64_t)v7 - v3) >> 2;
  if ((_DWORD)v2 != (unsigned __int16)v3)
    goto LABEL_23;
LABEL_29:
  *(_BYTE *)result = 0;
  if (!(_DWORD)v2)
    goto LABEL_58;
LABEL_30:
  v14 = *(_QWORD *)a2;
  if (*(_BYTE *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      v20 = *(_DWORD **)a2;
      v21 = v2;
      do
      {
        v22 = v21 >> 1;
        v23 = &v20[v21 >> 1];
        v25 = *v23;
        v24 = v23 + 1;
        v21 += ~(v21 >> 1);
        if (v25 < 0x1000D)
          v20 = v24;
        else
          v21 = v22;
      }
      while (v21);
      if (v20 == (_DWORD *)(v14 + 4 * v2))
        goto LABEL_58;
      if (*v20 != 65549)
        goto LABEL_58;
      v19 = ((unint64_t)v20 - v14) >> 2;
      if ((_DWORD)v2 == (unsigned __int16)v19)
        goto LABEL_58;
    }
    else
    {
      v15 = 0;
      while (1)
      {
        v16 = *(_DWORD *)(v14 + 4 * v15);
        if (v16 >= 0x1000D)
          break;
        if (v2 == ++v15)
          goto LABEL_58;
      }
      if (v16 == 65549)
        LOWORD(v19) = v15;
      else
        LOWORD(v19) = v2;
      if ((_DWORD)v2 == (unsigned __int16)v19)
        goto LABEL_58;
    }
LABEL_50:
    if (v2 > (unsigned __int16)v19)
      v3 = *(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v19;
    *(_BYTE *)(result + 1) = *(_BYTE *)v3;
    goto LABEL_59;
  }
  v17 = 4 * v2;
  v18 = *(_DWORD **)a2;
  while (*v18 != 65549)
  {
    ++v18;
    v17 -= 4;
    if (!v17)
    {
      v18 = (_DWORD *)(v14 + 4 * v2);
      break;
    }
  }
  v19 = ((unint64_t)v18 - v14) >> 2;
  if ((_DWORD)v2 != (unsigned __int16)v19)
    goto LABEL_50;
LABEL_58:
  *(_BYTE *)(result + 1) = 0;
  if (!(_DWORD)v2)
    goto LABEL_87;
LABEL_59:
  v26 = *(_QWORD *)a2;
  if (*(_BYTE *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      v32 = *(_DWORD **)a2;
      v33 = v2;
      do
      {
        v34 = v33 >> 1;
        v35 = &v32[v33 >> 1];
        v37 = *v35;
        v36 = v35 + 1;
        v33 += ~(v33 >> 1);
        if (v37 < 0x1000E)
          v32 = v36;
        else
          v33 = v34;
      }
      while (v33);
      if (v32 == (_DWORD *)(v26 + 4 * v2))
        goto LABEL_87;
      if (*v32 != 65550)
        goto LABEL_87;
      v31 = ((unint64_t)v32 - v26) >> 2;
      if ((_DWORD)v2 == (unsigned __int16)v31)
        goto LABEL_87;
    }
    else
    {
      v27 = 0;
      while (1)
      {
        v28 = *(_DWORD *)(v26 + 4 * v27);
        if (v28 >= 0x1000E)
          break;
        if (v2 == ++v27)
          goto LABEL_87;
      }
      if (v28 == 65550)
        LOWORD(v31) = v27;
      else
        LOWORD(v31) = v2;
      if ((_DWORD)v2 == (unsigned __int16)v31)
        goto LABEL_87;
    }
LABEL_79:
    if (v2 > (unsigned __int16)v31)
      v3 = *(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v31;
    *(_BYTE *)(result + 2) = *(_BYTE *)v3;
    goto LABEL_88;
  }
  v29 = 4 * v2;
  v30 = *(_DWORD **)a2;
  while (*v30 != 65550)
  {
    ++v30;
    v29 -= 4;
    if (!v29)
    {
      v30 = (_DWORD *)(v26 + 4 * v2);
      break;
    }
  }
  v31 = ((unint64_t)v30 - v26) >> 2;
  if ((_DWORD)v2 != (unsigned __int16)v31)
    goto LABEL_79;
LABEL_87:
  *(_BYTE *)(result + 2) = 0;
  if (!(_DWORD)v2)
    goto LABEL_116;
LABEL_88:
  v38 = *(_QWORD *)a2;
  if (*(_BYTE *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      v44 = *(_DWORD **)a2;
      v45 = v2;
      do
      {
        v46 = v45 >> 1;
        v47 = &v44[v45 >> 1];
        v49 = *v47;
        v48 = v47 + 1;
        v45 += ~(v45 >> 1);
        if (v49 < 0x10084)
          v44 = v48;
        else
          v45 = v46;
      }
      while (v45);
      if (v44 == (_DWORD *)(v38 + 4 * v2))
        goto LABEL_116;
      if (*v44 != 65668)
        goto LABEL_116;
      v43 = ((unint64_t)v44 - v38) >> 2;
      if ((_DWORD)v2 == (unsigned __int16)v43)
        goto LABEL_116;
    }
    else
    {
      v39 = 0;
      while (1)
      {
        v40 = *(_DWORD *)(v38 + 4 * v39);
        if (v40 >= 0x10084)
          break;
        if (v2 == ++v39)
          goto LABEL_116;
      }
      if (v40 == 65668)
        LOWORD(v43) = v39;
      else
        LOWORD(v43) = v2;
      if ((_DWORD)v2 == (unsigned __int16)v43)
        goto LABEL_116;
    }
LABEL_108:
    if (v2 > (unsigned __int16)v43)
      v3 = *(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v43;
    *(_BYTE *)(result + 3) = *(_BYTE *)v3;
    goto LABEL_117;
  }
  v41 = 4 * v2;
  v42 = *(_DWORD **)a2;
  while (*v42 != 65668)
  {
    ++v42;
    v41 -= 4;
    if (!v41)
    {
      v42 = (_DWORD *)(v38 + 4 * v2);
      break;
    }
  }
  v43 = ((unint64_t)v42 - v38) >> 2;
  if ((_DWORD)v2 != (unsigned __int16)v43)
    goto LABEL_108;
LABEL_116:
  *(_BYTE *)(result + 3) = 0;
  if (!(_DWORD)v2)
    goto LABEL_145;
LABEL_117:
  v50 = *(_QWORD *)a2;
  if (*(_BYTE *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      v56 = *(_DWORD **)a2;
      v57 = v2;
      do
      {
        v58 = v57 >> 1;
        v59 = &v56[v57 >> 1];
        v61 = *v59;
        v60 = v59 + 1;
        v57 += ~(v57 >> 1);
        if (v61 < 0x10033)
          v56 = v60;
        else
          v57 = v58;
      }
      while (v57);
      if (v56 == (_DWORD *)(v50 + 4 * v2))
        goto LABEL_145;
      if (*v56 != 65587)
        goto LABEL_145;
      v55 = ((unint64_t)v56 - v50) >> 2;
      if ((_DWORD)v2 == (unsigned __int16)v55)
        goto LABEL_145;
    }
    else
    {
      v51 = 0;
      while (1)
      {
        v52 = *(_DWORD *)(v50 + 4 * v51);
        if (v52 >= 0x10033)
          break;
        if (v2 == ++v51)
          goto LABEL_145;
      }
      if (v52 == 65587)
        LOWORD(v55) = v51;
      else
        LOWORD(v55) = v2;
      if ((_DWORD)v2 == (unsigned __int16)v55)
        goto LABEL_145;
    }
LABEL_137:
    if (v2 > (unsigned __int16)v55)
      v3 = *(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v55;
    *(_BYTE *)(result + 4) = *(_BYTE *)v3;
    goto LABEL_146;
  }
  v53 = 4 * v2;
  v54 = *(_DWORD **)a2;
  while (*v54 != 65587)
  {
    ++v54;
    v53 -= 4;
    if (!v53)
    {
      v54 = (_DWORD *)(v50 + 4 * v2);
      break;
    }
  }
  v55 = ((unint64_t)v54 - v50) >> 2;
  if ((_DWORD)v2 != (unsigned __int16)v55)
    goto LABEL_137;
LABEL_145:
  *(_BYTE *)(result + 4) = 0;
  if (!(_DWORD)v2)
    goto LABEL_174;
LABEL_146:
  v62 = *(_QWORD *)a2;
  if (*(_BYTE *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      v68 = *(_DWORD **)a2;
      v69 = v2;
      do
      {
        v70 = v69 >> 1;
        v71 = &v68[v69 >> 1];
        v73 = *v71;
        v72 = v71 + 1;
        v69 += ~(v69 >> 1);
        if (v73 < 0x1003C)
          v68 = v72;
        else
          v69 = v70;
      }
      while (v69);
      if (v68 == (_DWORD *)(v62 + 4 * v2))
        goto LABEL_174;
      if (*v68 != 65596)
        goto LABEL_174;
      v67 = ((unint64_t)v68 - v62) >> 2;
      if ((_DWORD)v2 == (unsigned __int16)v67)
        goto LABEL_174;
    }
    else
    {
      v63 = 0;
      while (1)
      {
        v64 = *(_DWORD *)(v62 + 4 * v63);
        if (v64 >= 0x1003C)
          break;
        if (v2 == ++v63)
          goto LABEL_174;
      }
      if (v64 == 65596)
        LOWORD(v67) = v63;
      else
        LOWORD(v67) = v2;
      if ((_DWORD)v2 == (unsigned __int16)v67)
        goto LABEL_174;
    }
LABEL_166:
    if (v2 > (unsigned __int16)v67)
      v3 = *(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v67;
    *(_BYTE *)(result + 5) = *(_BYTE *)v3;
    goto LABEL_175;
  }
  v65 = 4 * v2;
  v66 = *(_DWORD **)a2;
  while (*v66 != 65596)
  {
    ++v66;
    v65 -= 4;
    if (!v65)
    {
      v66 = (_DWORD *)(v62 + 4 * v2);
      break;
    }
  }
  v67 = ((unint64_t)v66 - v62) >> 2;
  if ((_DWORD)v2 != (unsigned __int16)v67)
    goto LABEL_166;
LABEL_174:
  *(_BYTE *)(result + 5) = 1;
  if (!(_DWORD)v2)
    goto LABEL_203;
LABEL_175:
  v74 = *(_QWORD *)a2;
  if (*(_BYTE *)(a2 + 15))
  {
    if (v2 >= 0x1E)
    {
      v80 = *(_DWORD **)a2;
      v81 = v2;
      do
      {
        v82 = v81 >> 1;
        v83 = &v80[v81 >> 1];
        v85 = *v83;
        v84 = v83 + 1;
        v81 += ~(v81 >> 1);
        if (v85 < 0x10045)
          v80 = v84;
        else
          v81 = v82;
      }
      while (v81);
      if (v80 == (_DWORD *)(v74 + 4 * v2))
        goto LABEL_203;
      if (*v80 != 65605)
        goto LABEL_203;
      v79 = ((unint64_t)v80 - v74) >> 2;
      if ((_DWORD)v2 == (unsigned __int16)v79)
        goto LABEL_203;
    }
    else
    {
      v75 = 0;
      while (1)
      {
        v76 = *(_DWORD *)(v74 + 4 * v75);
        if (v76 >= 0x10045)
          break;
        if (v2 == ++v75)
          goto LABEL_203;
      }
      if (v76 == 65605)
        LOWORD(v79) = v75;
      else
        LOWORD(v79) = v2;
      if ((_DWORD)v2 == (unsigned __int16)v79)
        goto LABEL_203;
    }
LABEL_195:
    if (v2 > (unsigned __int16)v79)
      v3 = *(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v79;
    *(_BYTE *)(result + 6) = *(_BYTE *)v3;
    goto LABEL_204;
  }
  v77 = 4 * v2;
  v78 = *(_DWORD **)a2;
  while (*v78 != 65605)
  {
    ++v78;
    v77 -= 4;
    if (!v77)
    {
      v78 = (_DWORD *)(v74 + 4 * v2);
      break;
    }
  }
  v79 = ((unint64_t)v78 - v74) >> 2;
  if ((_DWORD)v2 != (unsigned __int16)v79)
    goto LABEL_195;
LABEL_203:
  *(_BYTE *)(result + 6) = 1;
  if (!(_DWORD)v2)
    goto LABEL_232;
LABEL_204:
  v86 = *(_QWORD *)a2;
  if (!*(_BYTE *)(a2 + 15))
  {
    v89 = 4 * v2;
    v90 = *(_DWORD **)a2;
    while (*v90 != 65597)
    {
      ++v90;
      v89 -= 4;
      if (!v89)
      {
        v90 = (_DWORD *)(v86 + 4 * v2);
        break;
      }
    }
    v91 = ((unint64_t)v90 - v86) >> 2;
    if ((_DWORD)v2 == (unsigned __int16)v91)
      goto LABEL_232;
    goto LABEL_224;
  }
  if (v2 >= 0x1E)
  {
    v92 = *(_DWORD **)a2;
    v93 = v2;
    do
    {
      v94 = v93 >> 1;
      v95 = &v92[v93 >> 1];
      v97 = *v95;
      v96 = v95 + 1;
      v93 += ~(v93 >> 1);
      if (v97 < 0x1003D)
        v92 = v96;
      else
        v93 = v94;
    }
    while (v93);
    if (v92 != (_DWORD *)(v86 + 4 * v2) && *v92 == 65597)
    {
      v91 = ((unint64_t)v92 - v86) >> 2;
      if ((_DWORD)v2 != (unsigned __int16)v91)
        goto LABEL_224;
    }
LABEL_232:
    *(_BYTE *)(result + 7) = 0;
    return result;
  }
  v87 = 0;
  while (1)
  {
    v88 = *(_DWORD *)(v86 + 4 * v87);
    if (v88 >= 0x1003D)
      break;
    if (v2 == ++v87)
      goto LABEL_232;
  }
  if (v88 == 65597)
    LOWORD(v91) = v87;
  else
    LOWORD(v91) = v2;
  if ((_DWORD)v2 == (unsigned __int16)v91)
    goto LABEL_232;
LABEL_224:
  if (v2 <= (unsigned __int16)v91)
    v98 = (_BYTE *)v3;
  else
    v98 = (_BYTE *)(*(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * (unsigned __int16)v91);
  *(_BYTE *)(result + 7) = *v98;
  return result;
}

uint64_t gss::ClientStyleState<gss::PropertyID>::sourceMapDisplayStyle(uint64_t a1)
{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  geo::read_write_lock *v5;
  const char *v6;
  gss::Allocator *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[15];
  char v12;
  _QWORD v13[2];

  v2 = (pthread_rwlock_t *)(a1 + 16);
  v13[1] = a1 + 16;
  v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  memset(v11, 0, sizeof(v11));
  v12 = 1;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v11, a1 + 216);
  v5 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"unlock", v6);
  v7 = (gss::Allocator *)gss::DisplayStyle::DisplayStyle((uint64_t)v13, (uint64_t)v11);
  if (!v11[14])
  {
    v8 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      v9 = gss::Allocator::instance(v7);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, v8, *(unsigned __int16 *)&v11[12]);
    }
  }
  return v13[0];
}

void sub_19F24C9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

__int128 *md::GridLogic::defaultBackgroundColor(__int128 *result, unsigned int a2, int a3, int a4)
{
  unsigned __int8 v4;
  __int128 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  __objc2_class *v9;
  unsigned __int8 v10;
  _OWORD *v11;
  unsigned __int8 v12;
  __guard *v13;
  unsigned __int8 v14;
  _OWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 *v32;
  __int128 *v33;

  if (a2 <= 0xB)
  {
    if (((1 << a2) & 0xC9E) != 0)
    {
      if ((v4 & 1) == 0)
      {
        v27 = result;
        result = v27;
        if (v16)
        {
          geo::Color<float,4,(geo::ColorSpace)0>::Color<(geo::ColorSpace)2,int,void>((uint64_t)&md::GridLogic::_defaultSatelliteBackgroundColor(void)::_defaultSatelliteBackgroundLinearColor, (uint64_t)&kDefaultSatelliteBackgroundColor);
          result = v27;
        }
      }
      v5 = md::GridLogic::_defaultSatelliteBackgroundColor(void)::_defaultSatelliteBackgroundLinearColor;
LABEL_5:
      *result = v5;
      return result;
    }
    if (((1 << a2) & 0x261) != 0)
    {
      if (a3 == 1)
      {
        if ((v7 & 1) == 0)
        {
          v28 = result;
          result = v28;
          if (v17)
          {
            md::GridLogic::_defaultStandardDarkBackgroundColor(void)::_defaultStandardDarkBackgroundLinearColor = xmmword_19FFB5EA0;
            result = v28;
          }
        }
        v5 = md::GridLogic::_defaultStandardDarkBackgroundColor(void)::_defaultStandardDarkBackgroundLinearColor;
        goto LABEL_5;
      }
      if (!a3)
      {
        switch(a4)
        {
          case 2:
            v11 = &unk_1EE585000;
            if ((v10 & 1) == 0)
            {
              v31 = result;
              v11 = &unk_1EE585000;
              v22 = v21;
              result = v31;
              if (v22)
              {
                md::GridLogic::_defaultExploreBackgroundColor(void)::_defaultExploreBackgroundLinearColor = xmmword_19FFB5E70;
                v11 = (_OWORD *)&unk_1EE585000;
                result = v31;
              }
            }
            v5 = v11[65];
            goto LABEL_5;
          case 1:
            if ((v12 & 1) == 0)
            {
              v32 = result;
              v24 = v23;
              result = v32;
              if (v24)
              {
                md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor = xmmword_19FFB5E70;
                result = v32;
              }
            }
            v5 = *((_OWORD *)v13 + 156);
            goto LABEL_5;
          case 0:
            if ((v6 & 1) == 0)
            {
              v29 = result;
              result = v29;
              if (v18)
              {
                md::GridLogic::_defaultMutedBackgroundColor(void)::_defaultMutedBackgroundLinearColor = xmmword_19FFB5E70;
                result = v29;
              }
            }
            v5 = md::GridLogic::_defaultMutedBackgroundColor(void)::_defaultMutedBackgroundLinearColor;
            goto LABEL_5;
        }
      }
    }
    else
    {
      if (a3 == 1)
      {
        v15 = &unk_1EE577000;
        if ((v14 & 1) == 0)
        {
          v33 = result;
          v15 = &unk_1EE577000;
          v26 = v25;
          result = v33;
          if (v26)
          {
            md::GridLogic::_defaultStandardDarkBackgroundColor(void)::_defaultStandardDarkBackgroundLinearColor = xmmword_19FFB5EA0;
            v15 = (_OWORD *)&unk_1EE577000;
            result = v33;
          }
        }
        v5 = v15[16];
        goto LABEL_5;
      }
      if (!a3)
      {
        v9 = &OBJC_METACLASS___VKDebugSettings;
        if ((v8 & 1) == 0)
        {
          v30 = result;
          v9 = &OBJC_METACLASS___VKDebugSettings;
          v20 = v19;
          result = v30;
          if (v20)
          {
            md::GridLogic::_defaultMutedBackgroundColor(void)::_defaultMutedBackgroundLinearColor = xmmword_19FFB5E70;
            v9 = &OBJC_METACLASS___VKDebugSettings;
            result = v30;
          }
        }
        v5 = *(_OWORD *)&v9[21].vtable;
        goto LABEL_5;
      }
    }
  }
  return result;
}

void sub_19F24CFCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::RasterSharedRenderResourcesInternal::~RasterSharedRenderResourcesInternal(md::RasterSharedRenderResourcesInternal *this)
{
  md::RasterSharedRenderResourcesInternal::~RasterSharedRenderResourcesInternal(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)this = &off_1E42AA930;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void md::RouteLineSharedRenderStates::~RouteLineSharedRenderStates(md::RouteLineSharedRenderStates *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

void md::COverlayRenderLayer::~COverlayRenderLayer(md::COverlayRenderLayer *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  md::MaskingOverlayRenderable::SharedResources *v25;
  md::PolygonOverlayRenderResources **v26;
  md::PolylineOverlaySharedResources *v27;
  md::PolygonOverlayRenderResources *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  md::PolylineOverlaySharedResources *v95;

  *(_QWORD *)this = &off_1E4296A18;
  v2 = (uint64_t *)*((_QWORD *)this + 45);
  if (!v2)
    goto LABEL_137;
  v3 = v2[52];
  v2[52] = 0;
  if (v3)
  {
    v4 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v3);
    MEMORY[0x1A1AF4E00](v4, 0x10A0C40D234DDC7);
  }
  v5 = v2[51];
  v2[51] = 0;
  if (v5)
  {
    v6 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v5);
    MEMORY[0x1A1AF4E00](v6, 0x10A0C40D234DDC7);
  }
  v7 = (std::__shared_weak_count *)v2[50];
  if (!v7)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (std::__shared_weak_count *)v2[48];
    if (!v10)
      goto LABEL_16;
  }
  else
  {
LABEL_10:
    v10 = (std::__shared_weak_count *)v2[48];
    if (!v10)
      goto LABEL_16;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_16:
  v13 = (std::__shared_weak_count *)v2[46];
  if (!v13)
    goto LABEL_20;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v16 = (std::__shared_weak_count *)v2[44];
    if (!v16)
      goto LABEL_26;
  }
  else
  {
LABEL_20:
    v16 = (std::__shared_weak_count *)v2[44];
    if (!v16)
      goto LABEL_26;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_26:
  v19 = (std::__shared_weak_count *)v2[42];
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v2[40];
  v2[40] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v2[39];
  v2[39] = 0;
  if (v23)
  {
    v24 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v23);
    MEMORY[0x1A1AF4E00](v24, 0x10A0C40D234DDC7);
  }
  v25 = (md::MaskingOverlayRenderable::SharedResources *)v2[38];
  v2[38] = 0;
  if (v25)
  {
    md::MaskingOverlayRenderable::SharedResources::~SharedResources(v25);
    MEMORY[0x1A1AF4E00]();
  }
  v26 = (md::PolygonOverlayRenderResources **)v2[37];
  v2[37] = 0;
  if (v26)
  {
    v27 = v26[2];
    v26[2] = 0;
    if (v27)
    {
      md::PolylineOverlaySharedResources::~PolylineOverlaySharedResources(v27);
      MEMORY[0x1A1AF4E00]();
    }
    v28 = *v26;
    *v26 = 0;
    if (v28)
    {
      md::PolygonOverlayRenderResources::~PolygonOverlayRenderResources(v28);
      MEMORY[0x1A1AF4E00]();
    }
    MEMORY[0x1A1AF4E00](v26, 0x20C40960023A9);
  }
  v29 = (_QWORD *)v2[36];
  v2[36] = 0;
  if (v29)
  {
    v30 = v29[4];
    v29[4] = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v29[3];
    v29[3] = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v29[2];
    v29[2] = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = (std::__shared_weak_count *)v29[1];
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    MEMORY[0x1A1AF4E00](v29, 0x20C40769AC3DALL);
  }
  v36 = v2[35];
  v2[35] = 0;
  if (v36)
  {
    v37 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v36);
    MEMORY[0x1A1AF4E00](v37, 0x10A0C40D234DDC7);
  }
  v38 = v2[34];
  v2[34] = 0;
  if (v38)
  {
    v39 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v38);
    MEMORY[0x1A1AF4E00](v39, 0x10A0C40D234DDC7);
  }
  v40 = v2[33];
  v2[33] = 0;
  if (v40)
  {
    v41 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v40);
    MEMORY[0x1A1AF4E00](v41, 0x10A0C40D234DDC7);
  }
  v42 = (std::__shared_weak_count *)v2[32];
  if (!v42)
    goto LABEL_66;
  v43 = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v45 = (std::__shared_weak_count *)v2[30];
    if (!v45)
      goto LABEL_72;
  }
  else
  {
LABEL_66:
    v45 = (std::__shared_weak_count *)v2[30];
    if (!v45)
      goto LABEL_72;
  }
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
LABEL_72:
  v48 = (std::__shared_weak_count *)v2[28];
  if (!v48)
    goto LABEL_76;
  v49 = (unint64_t *)&v48->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    v51 = (std::__shared_weak_count *)v2[26];
    if (v51)
      goto LABEL_77;
  }
  else
  {
LABEL_76:
    v51 = (std::__shared_weak_count *)v2[26];
    if (v51)
    {
LABEL_77:
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  v54 = (std::__shared_weak_count *)v2[24];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v2[22];
  v2[22] = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = v2[21];
  v2[21] = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = v2[20];
  v2[20] = 0;
  if (v59)
  {
    v60 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v59);
    MEMORY[0x1A1AF4E00](v60, 0x10A0C40D234DDC7);
  }
  v61 = (std::__shared_weak_count *)v2[19];
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v2[17];
  v2[17] = 0;
  if (v64)
  {
    v65 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v64);
    MEMORY[0x1A1AF4E00](v65, 0x10A0C40D234DDC7);
  }
  v66 = v2[16];
  v2[16] = 0;
  if (v66)
  {
    v67 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v66);
    MEMORY[0x1A1AF4E00](v67, 0x10A0C40D234DDC7);
  }
  v68 = (std::__shared_weak_count *)v2[15];
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v2[13];
  v2[13] = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = v2[12];
  v2[12] = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)v2[11];
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v2[9];
  v2[9] = 0;
  if (v76)
    MEMORY[0x1A1AF4E00](v76, 0x1000C4049ECCB0CLL);
  v77 = v2[8];
  v2[8] = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = v2[7];
  v2[7] = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = v2[6];
  v2[6] = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = v2[5];
  v2[5] = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = v2[4];
  v2[4] = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = v2[3];
  v2[3] = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = v2[2];
  v2[2] = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = v2[1];
  v2[1] = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = *v2;
  *v2 = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  MEMORY[0x1A1AF4E00](v2, 0x20C40B5D9884CLL);
LABEL_137:
  v86 = (void *)*((_QWORD *)this + 57);
  if (v86)
  {
    do
    {
      v87 = *(void **)v86;
      *((_QWORD *)v86 + 3) = &off_1E42B49F0;

      operator delete(v86);
      v86 = v87;
    }
    while (v87);
  }
  v88 = (void *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v88)
    operator delete(v88);
  v89 = (_QWORD *)*((_QWORD *)this + 52);
  if (v89)
  {
    do
    {
      v90 = (_QWORD *)*v89;
      operator delete(v89);
      v89 = v90;
    }
    while (v90);
  }
  v91 = (void *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v91)
    operator delete(v91);
  v92 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (md::PolylineOverlaySharedResources *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v95)
  {
    md::PolylineOverlaySharedResources::~PolylineOverlaySharedResources(v95);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::~CartographicTiledRenderLayer((uint64_t)this);
}

{
  md::COverlayRenderLayer::~COverlayRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::OverlayOcclusion::AlphaTint>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::CommonMesh::Pos2UVMesh::~Pos2UVMesh(ggl::CommonMesh::Pos2UVMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::PolygonOverlayRenderResources::~PolygonOverlayRenderResources(md::PolygonOverlayRenderResources *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
  {
    v11 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v10);
    MEMORY[0x1A1AF4E00](v11, 0x10A0C40D234DDC7);
  }
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    v13 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v12);
    MEMORY[0x1A1AF4E00](v13, 0x10A0C40D234DDC7);
  }
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v14)
  {
    v15 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v14);
    MEMORY[0x1A1AF4E00](v15, 0x10A0C40D234DDC7);
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_27;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v19)
      goto LABEL_33;
  }
  else
  {
LABEL_27:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (!v19)
      goto LABEL_33;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_33:
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

unint64_t *ggl::FragmentedPool<ggl::PolygonOverlay::FillPipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v48 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "GeoGL", 0xA3D02C1100000005);
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v7;
  a1[5] = 0;
  a1[6] = 0;
  {
    v49 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "GeoGL", 0xA3D02C1100000005);
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_6;
  if (v9 != a2)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_6:
    a1[11] = v9;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 8);
LABEL_8:
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
  {
LABEL_11:
    a1[15] = v10;
    goto LABEL_13;
  }
  if (v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  v11 = *a1;
  if (a1[2] - *a1 > 0x31F)
    goto LABEL_26;
  v12 = a1[1];
  v13 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 800, 8);
  v14 = v12 - v11;
  v15 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  v17 = *a1;
  v16 = a1[1];
  v18 = v16 - *a1;
  if (v16 == *a1)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  v19 = v18 - 8;
  if (v18 - 8 >= 0x58)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    if (v16 - (v14 & 0xFFFFFFFFFFFFFFF8) - v13 >= 0x20)
    {
      v21 = v14 >> 3;
      v22 = (v19 >> 3) + 1;
      v23 = (_OWORD *)(v13 + 8 * v21 - 16);
      v24 = (__int128 *)(v16 - 16);
      v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v20 = v15 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v16 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
    }
  }
  else
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v27 = *(_QWORD *)(v16 - 8);
    v16 -= 8;
    *(_QWORD *)(v20 - 8) = v27;
    v20 -= 8;
  }
  while (v16 != v17);
LABEL_23:
  v16 = *a1;
LABEL_24:
  *a1 = v20;
  a1[1] = v15;
  v28 = a1[2];
  a1[2] = v13 + 800;
  if (v16)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v16, v28 - v16);
LABEL_26:
  v29 = a1[4];
  if (a1[6] - v29 > 0x31F)
    return a1;
  v30 = a1[5];
  v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[7] + 16))(a1[7], 800, 8);
  v32 = v30 - v29;
  v33 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  v35 = a1[4];
  v34 = a1[5];
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  v37 = v36 - 8;
  if (v36 - 8 >= 0x58)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    if (v34 - (v32 & 0xFFFFFFFFFFFFFFF8) - v31 >= 0x20)
    {
      v39 = v32 >> 3;
      v40 = (v37 >> 3) + 1;
      v41 = (_OWORD *)(v31 + 8 * v39 - 16);
      v42 = (__int128 *)(v34 - 16);
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v38 = v33 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v34 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
  }
  else
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v45 = *(_QWORD *)(v34 - 8);
    v34 -= 8;
    *(_QWORD *)(v38 - 8) = v45;
    v38 -= 8;
  }
  while (v34 != v35);
LABEL_36:
  v34 = a1[4];
LABEL_37:
  a1[4] = v38;
  a1[5] = v33;
  v46 = a1[6];
  a1[6] = v31 + 800;
  if (v34)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[7] + 40))(a1[7], v34, v46 - v34);
  return a1;
}

void sub_19F24E4A4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_QWORD *)v1[11];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
    {
      v7 = *v3;
      if (*v3)
        goto LABEL_9;
      goto LABEL_5;
    }
    v6 = 5;
    v2 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
  v7 = *v3;
  if (*v3)
  {
LABEL_9:
    v1[5] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[7] + 40))(v1[7], v7, v1[6] - v7);
    v8 = *v1;
    if (*v1)
    {
LABEL_10:
      v1[1] = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v8, v1[2] - v8);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v8 = *v1;
  if (*v1)
    goto LABEL_10;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14PolygonOverlay17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D63E0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14PolygonOverlay22AntialiasPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6428;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonOverlay::AntialiasPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3688;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::PolygonOverlay::FillPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3640;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::PolygonOverlayRenderResources::PolygonOverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonOverlay::FillPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D35F8;
  a2[1] = v2;
  return result;
}

void md::PatternedSharedResources::~PatternedSharedResources(md::PatternedSharedResources *this)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;

  v2 = (_QWORD *)*((_QWORD *)this + 9);
  if (v2)
  {
    while (1)
    {
      v15 = (_QWORD *)*v2;
      v16 = (std::__shared_weak_count *)v2[9];
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
          break;
      }
      v19 = v2[2];
      if (v19)
        goto LABEL_31;
LABEL_25:
      operator delete(v2);
      v2 = v15;
      if (!v15)
        goto LABEL_2;
    }
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = v2[2];
    if (!v19)
      goto LABEL_25;
LABEL_31:
    v2[3] = v19;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v2[5] + 40))(v2[5], v19, v2[4] - v19);
    goto LABEL_25;
  }
LABEL_2:
  v3 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    operator delete(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v7 + 104));
    v8 = *(std::__shared_weak_count **)(v7 + 8);
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    MEMORY[0x1A1AF4E00](v7, 0x1020C40AD78EA61);
  }
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

void ggl::PolygonOverlayFillShader::typedReflection(ggl::PolygonOverlayFillShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolygonOverlayFillShader::typedReflection(void)::ref = (uint64_t)"PolygonOverlayFillShader";
      ggl::polygonOverlayFillShaderVertexFunctionDescriptor(v2);
      qword_1ECE3AE68 = (uint64_t)&ggl::polygonOverlayFillShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<31ul>("PolygonOverlayFillShaderVertex");
      dword_1ECE3AE70 = (int)v3;
      ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3AE78 = (uint64_t)&ggl::polygonOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3AE80 = ggl::crc32::compute<33ul>("PolygonOverlayFillShaderFragment");
      qword_1ECE3AE88 = (uint64_t)ggl::polygonOverlayFillShaderShaderConstants(void)::ref;
      unk_1ECE3AE90 = 4;
      qword_1ECE3AE98 = (uint64_t)&ggl::polygonOverlayFillShaderShaderTextures(void)::ref;
      unk_1ECE3AEA0 = 0;
      qword_1ECE3AEA8 = (uint64_t)&ggl::polygonOverlayFillShaderShaderSamplers(void)::ref;
      unk_1ECE3AEB0 = 0;
    }
  }
}

void ggl::polygonOverlayFillShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonOverlayFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("PolygonOverlayFillShaderVertex");
      *(_DWORD *)algn_1ECE407B4 = 0;
      qword_1ECE407B8 = (uint64_t)"PolygonOverlayFillShader";
      unk_1ECE407C0 = ggl::polygonOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE407C8 = 1;
      unk_1ECE407D0 = &ggl::polygonOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE407D8 = 3;
      unk_1ECE407E0 = &ggl::polygonOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE407E8 = 0;
      unk_1ECE407F0 = &ggl::polygonOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE407F8 = 0;
      unk_1ECE40800 = &ggl::polygonOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40810 = 0;
      unk_1ECE40818 = 0;
      qword_1ECE40808 = 0;
    }
  }
}

BOOL ta2::TextureAtlasPage::reserveRegions(unint64_t inserted, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  _DWORD *v9;
  BOOL v10;
  uint64_t v11;
  geo::SkylineBin *v12;
  unint64_t *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;

  if (a3)
  {
    v9 = (_DWORD *)inserted;
    v10 = 0;
    v11 = 0;
    v12 = (geo::SkylineBin *)(inserted + 24);
    for (i = (unint64_t *)(a2 + 32); ; i += 9)
    {
      v14 = *(i - 4);
      v16 = *(_QWORD *)(v14 + 32);
      v15 = *(_QWORD *)(v14 + 40);
      v17 = v15 - v16 + 2;
      v18 = ((unint64_t)(v15 + 0x100000000) >> 32) - ((unint64_t)(v16 - 0x100000000) >> 32);
      v19 = v9[12];
      if (v19 == 1)
      {
        inserted = geo::SkylineBin::insertMinWaste(v12, v17, v18, a4, a5, a6, a7, a8);
      }
      else if (!v19)
      {
        inserted = geo::SkylineBin::insertBottomLeft(v12, v17, v18);
      }
      v20 = (HIDWORD(a2) - HIDWORD(inserted)) * (a2 - inserted);
      if (v20 != v18 * v17)
        break;
      v9[52] += v20;
      *i = inserted;
      i[1] = a2;
      i[3] = (unint64_t)v9;
      v10 = ++v11 >= a3;
      if (a3 == v11)
        return 1;
    }
    if (!v9[53])
      v9[53] = (float)((float)v9[52] * 0.8);
  }
  else
  {
    return 1;
  }
  return v10;
}

geo::SkylineBin *geo::SkylineBin::insert(geo::SkylineBin *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  int v8;

  v8 = *((_DWORD *)this + 6);
  if (v8 == 1)
    return (geo::SkylineBin *)geo::SkylineBin::insertMinWaste(this, a2, a3, a4, a5, a6, a7, a8);
  if (!v8)
    return (geo::SkylineBin *)geo::SkylineBin::insertBottomLeft(this, a2, a3);
  return this;
}

void geo::SkylineBin::addSkylineLevel(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  char *v30;
  const float *v31;
  float *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  char *i;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  _DWORD *v81;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  float32x4x3_t v97;

  if (*(_BYTE *)(a1 + 56))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(char **)(a1 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-v6] >> 2) > a2)
    {
      v8 = a3[1];
      v9 = *(_DWORD *)(v6 + 12 * a2);
      v10 = v9 + a3[2] - *a3;
      v11 = 12 * a2;
      v12 = a2;
      do
      {
        v13 = *(_DWORD *)(v6 + v11);
        if (v13 >= v10)
          break;
        v14 = *(_DWORD *)(v6 + v11 + 8) + v13;
        if (v14 <= v9)
          break;
        if (v14 >= v10)
          v14 = v10;
        v93 = *(_DWORD *)(v6 + v11);
        v94 = *(_DWORD *)(v6 + v11 + 4);
        v95 = v14;
        v96 = v8;
        if ((v8 - v94) * (v14 - v13))
        {
          geo::GuillotineBin::addFreeRegion(a1 + 64, (uint64_t)&v93);
          v6 = *(_QWORD *)(a1 + 32);
          v7 = *(char **)(a1 + 40);
        }
        ++v12;
        v11 += 12;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-v6] >> 2));
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(char **)(a1 + 40);
  }
  v15 = *(_DWORD *)(a1 + 20);
  if (v15 <= a3[3])
    v15 = a3[3];
  *(_DWORD *)(a1 + 20) = v15;
  v16 = *a3;
  v17 = a3[3];
  v18 = a3[2] - *a3;
  v19 = (char *)(v6 + 12 * (int)a2);
  v20 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)v7 < v20)
  {
    if (v19 == v7)
    {
      *(_DWORD *)v7 = v16;
      *((_DWORD *)v7 + 1) = v17;
      *((_DWORD *)v7 + 2) = v18;
      v23 = v7 + 12;
      *(_QWORD *)(a1 + 40) = v7 + 12;
      goto LABEL_64;
    }
    v21 = v7 - (v19 + 12);
    v22 = (unint64_t)(v7 - 12);
    v23 = v7;
    if ((unint64_t)v7 >= 0xC)
    {
      v24 = v7 - 12;
      v23 = v7;
      do
      {
        v25 = *(_QWORD *)v24;
        *((_DWORD *)v23 + 2) = *((_DWORD *)v24 + 2);
        *(_QWORD *)v23 = v25;
        v23 += 12;
        v24 += 12;
      }
      while (v24 < v7);
    }
    *(_QWORD *)(a1 + 40) = v23;
    if (v7 == v19 + 12)
      goto LABEL_50;
    if ((unint64_t)(v21 - 12) >= 0xB4
      && ((v26 = (v21 - 12) / 0xCuLL,
           v27 = v21 + 12 * (int)a2 - 12 * v26 + v6 - 12,
           (unint64_t)&v7[-12 * v26 - 12] < v22)
        ? (v28 = v27 >= (unint64_t)v7)
        : (v28 = 1),
          v28))
    {
      v29 = v26 + 1;
      v30 = &v7[-12 * (v29 & 0x3FFFFFFFFFFFFFFCLL)];
      v31 = (const float *)(v7 - 60);
      v32 = (float *)(v7 - 48);
      v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v97 = vld3q_f32(v31);
        vst3q_f32(v32, v97);
        v32 -= 12;
        v31 -= 12;
        v33 -= 4;
      }
      while (v33);
      if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_50;
      v22 -= 12 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    }
    else
    {
      v30 = v7;
    }
    v44 = v30 - 4;
    do
    {
      v45 = *(_DWORD *)(v22 - 12);
      v22 -= 12;
      *((_DWORD *)v44 - 2) = v45;
      *((_DWORD *)v44 - 1) = *(_DWORD *)(v22 + 4);
      *(_DWORD *)v44 = *(_DWORD *)(v22 + 8);
      v44 -= 12;
    }
    while ((char *)v22 != v19);
LABEL_50:
    *(_DWORD *)v19 = v16;
    *((_DWORD *)v19 + 1) = v17;
    *(_DWORD *)(v6 + 12 * (int)a2 + 8) = v18;
    goto LABEL_64;
  }
  v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v7[-v6] >> 2) + 1;
  if (v34 > 0x1555555555555555)
    abort();
  v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v6) >> 2);
  v36 = 2 * v35;
  if (2 * v35 <= v34)
    v36 = v34;
  if (v35 >= 0xAAAAAAAAAAAAAAALL)
    v37 = 0x1555555555555555;
  else
    v37 = v36;
  if (v37)
  {
    if (v37 > 0x1555555555555555)
      goto LABEL_96;
    v38 = a3[2] - v16;
    v39 = (char *)operator new(12 * v37);
    v18 = v38;
  }
  else
  {
    v39 = 0;
  }
  v40 = &v39[12 * (int)a2];
  v41 = &v39[12 * v37];
  if (v40 == v41)
  {
    v42 = 0xAAAAAAAAAAAAAAABLL * ((12 * (int)a2) >> 2);
    if (v40 > v39)
    {
      if (v42 >= -1)
        v43 = v42 + 1;
      else
        v43 = v42 + 2;
      v41 = &v39[12 * (int)a2];
      v40 -= 12 * (v43 >> 1);
      goto LABEL_57;
    }
    v92 = v18;
    v46 = 0x5555555555555556 * ((12 * (int)a2) >> 2);
    if (v40 == v39)
      v46 = 1;
    if (v46 <= 0x1555555555555555)
    {
      v47 = v46 >> 2;
      v48 = 12 * v46;
      v49 = (char *)operator new(12 * v46);
      v40 = &v49[12 * v47];
      v41 = &v49[v48];
      if (v39)
        operator delete(v39);
      v18 = v92;
      goto LABEL_57;
    }
LABEL_96:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_57:
  *(_DWORD *)v40 = v16;
  *((_DWORD *)v40 + 1) = v17;
  *((_DWORD *)v40 + 2) = v18;
  v23 = v40 + 12;
  v50 = *(char **)(a1 + 32);
  if (v50 != v19)
  {
    v51 = v19;
    do
    {
      v52 = *(_QWORD *)(v51 - 12);
      v51 -= 12;
      v53 = *((_DWORD *)v51 + 2);
      *(_QWORD *)(v40 - 12) = v52;
      v40 -= 12;
      *((_DWORD *)v40 + 2) = v53;
    }
    while (v51 != v50);
  }
  for (i = *(char **)(a1 + 40); v19 != i; v19 += 12)
  {
    v55 = *(_QWORD *)v19;
    *((_DWORD *)v23 + 2) = *((_DWORD *)v19 + 2);
    *(_QWORD *)v23 = v55;
    v23 += 12;
  }
  v56 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v40;
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 48) = v41;
  if (v56)
  {
    operator delete(v56);
    v23 = *(char **)(a1 + 40);
  }
LABEL_64:
  v57 = a2 + 1;
  v58 = *(_QWORD *)(a1 + 32);
  if (a2 + 1 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v23[-v58] >> 2))
  {
    v59 = (unsigned int *)(v58 + 12 * v57);
    v60 = v59 + 2;
    v61 = v58 + 12 * (int)v57;
    v62 = (char *)(v61 + 12);
    v63 = -12 * (int)v57 - v58 - 24;
    while (1)
    {
      v64 = *(_DWORD *)(v58 + 12 * a2 + 8) + *(_DWORD *)(v58 + 12 * a2);
      v65 = v64 - *v59;
      if (v64 <= *v59)
        goto LABEL_79;
      *v59 = v64;
      v28 = *v60 >= v65;
      v66 = *v60 - v65;
      if (v66 != 0 && v28)
      {
        *v60 = v66;
        goto LABEL_79;
      }
      *v60 = 0;
      if (v62 != v23)
        break;
      v23 = (char *)(v58 + 12 * (int)v57);
LABEL_67:
      *(_QWORD *)(a1 + 40) = v23;
      if (v57 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v23[-v58] >> 2))
        goto LABEL_79;
    }
    v67 = (char *)(v58 + 12 * (int)v57);
    v68 = (char *)(v61 + 12);
    if ((unint64_t)&v23[v63] > 0x53)
    {
      v69 = (unint64_t)&v23[v63] / 0xC + 1;
      v70 = 12 * (v69 & 0x3FFFFFFFFFFFFFF8);
      v67 = (char *)(v61 + v70);
      v71 = (_OWORD *)(v58 + 12 * (int)v57);
      v72 = v69 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        v73 = *(_OWORD *)((char *)v71 + 44);
        v74 = *(_OWORD *)((char *)v71 + 28);
        v75 = *(_OWORD *)((char *)v71 + 92);
        v76 = *(_OWORD *)((char *)v71 + 76);
        v77 = *(_OWORD *)((char *)v71 + 60);
        *v71 = *(_OWORD *)((char *)v71 + 12);
        v71[1] = v74;
        v71[2] = v73;
        v71[3] = v77;
        v71[4] = v76;
        v71[5] = v75;
        v71 += 6;
        v72 -= 8;
      }
      while (v72);
      if (v69 == (v69 & 0x3FFFFFFFFFFFFFF8))
        goto LABEL_77;
      v68 = &v62[v70];
    }
    do
    {
      *(_DWORD *)v67 = *(_DWORD *)v68;
      *((_DWORD *)v67 + 1) = *((_DWORD *)v68 + 1);
      *((_DWORD *)v67 + 2) = *((_DWORD *)v68 + 2);
      v67 += 12;
      v68 += 12;
    }
    while (v68 != v23);
LABEL_77:
    v23 = v67;
    goto LABEL_67;
  }
LABEL_79:
  if (&v23[-v58] != (char *)12)
  {
    v78 = 0;
    while (1)
    {
      v79 = v78 + 1;
      if (*(_DWORD *)(v58 + 12 * v78 + 4) == *(_DWORD *)(v58 + 12 * v78 + 16))
        break;
      ++v78;
LABEL_83:
      if (v78 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v23[-v58] >> 2) - 1)
        return;
    }
    *(_DWORD *)(v58 + 12 * v78 + 8) += *(_DWORD *)(v58 + 12 * v79 + 8);
    v80 = (_OWORD *)(v58 + 12 * (int)v79);
    v81 = (_DWORD *)v80 + 3;
    if ((char *)v80 + 12 == v23)
    {
      v83 = (char *)(v58 + 12 * (int)v79);
    }
    else
    {
      v82 = (unint64_t)&v23[-v58 - 24 + -12 * (int)v79];
      if (v82 >= 0x54)
      {
        v84 = v82 / 0xC + 1;
        v85 = 12 * (v84 & 0x3FFFFFFFFFFFFFF8);
        v83 = (char *)v80 + v85;
        v86 = v84 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          v87 = *(_OWORD *)((char *)v80 + 44);
          v88 = *(_OWORD *)((char *)v80 + 28);
          v89 = *(_OWORD *)((char *)v80 + 92);
          v90 = *(_OWORD *)((char *)v80 + 76);
          v91 = *(_OWORD *)((char *)v80 + 60);
          *v80 = *(_OWORD *)((char *)v80 + 12);
          v80[1] = v88;
          v80[2] = v87;
          v80[3] = v91;
          v80[4] = v90;
          v80[5] = v89;
          v80 += 6;
          v86 -= 8;
        }
        while (v86);
        if (v84 == (v84 & 0x3FFFFFFFFFFFFFF8))
          goto LABEL_94;
        v81 = (_DWORD *)((char *)v81 + v85);
      }
      else
      {
        v83 = (char *)v80;
      }
      do
      {
        *(_DWORD *)v83 = *v81;
        *((_DWORD *)v83 + 1) = v81[1];
        *((_DWORD *)v83 + 2) = v81[2];
        v83 += 12;
        v81 += 3;
      }
      while (v81 != (_DWORD *)v23);
    }
LABEL_94:
    *(_QWORD *)(a1 + 40) = v83;
    v23 = v83;
    goto LABEL_83;
  }
}

void ta2::TextureAtlas::createRegionItems(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;

  std::vector<ta2::TextureAtlas::RegionItem>::reserve(a2, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) + ((uint64_t)(a1[1] - *a1) >> 4));
  v4 = (_QWORD *)*a1;
  v5 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v5)
  {
    do
    {
      v6 = *v4;
      if (*(_BYTE *)(*v4 + 80) == 2)
        goto LABEL_3;
      v24 = 0;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v7 = (std::__shared_weak_count *)v4[1];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        *(_QWORD *)&v20 = v6;
        *((_QWORD *)&v20 + 1) = v7;
        v10 = *v4;
        v11 = *(_QWORD *)(*v4 + 24);
        if (!v11)
          goto LABEL_10;
      }
      else
      {
        *(_QWORD *)&v20 = v6;
        v10 = v6;
        v11 = *(_QWORD *)(v6 + 24);
        if (!v11)
          goto LABEL_10;
      }
      *(_QWORD *)&v23 = v11;
      v13 = *(_QWORD *)(v10 + 32);
      v12 = *(_QWORD *)(v10 + 40);
      LODWORD(v21) = v13 - 1;
      DWORD1(v21) = (unint64_t)(v13 - 0x100000000) >> 32;
      DWORD2(v21) = v12 + 1;
      HIDWORD(v21) = (unint64_t)(v12 + 0x100000000) >> 32;
LABEL_10:
      v14 = *(_QWORD *)(a2 + 8);
      if (v14 < *(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)v14 = v6;
        *(_QWORD *)(v14 + 8) = v7;
        if (v7)
        {
          v15 = (unint64_t *)&v7->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v17 = v22;
        *(_OWORD *)(v14 + 16) = v21;
        *(_OWORD *)(v14 + 32) = v17;
        *(_OWORD *)(v14 + 48) = v23;
        *(_BYTE *)(v14 + 64) = v24;
        *(_QWORD *)(a2 + 8) = v14 + 72;
        if (!v7)
          goto LABEL_3;
LABEL_17:
        v18 = (unint64_t *)&v7->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        goto LABEL_3;
      }
      *(_QWORD *)(a2 + 8) = std::vector<ta2::TextureAtlas::RegionItem>::__push_back_slow_path<ta2::TextureAtlas::RegionItem const&>((char **)a2, (uint64_t)&v20);
      if (v7)
        goto LABEL_17;
LABEL_3:
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void std::vector<ta2::TextureAtlas::RegionItem>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v2 = *(char **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      abort();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 72 * a2;
    v6 = (char *)operator new(72 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *(_OWORD *)(v4 - 72);
        v4 -= 72;
        *(_OWORD *)(v9 - 72) = v10;
        v9 -= 72;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        v11 = *((_OWORD *)v4 + 1);
        v12 = *((_OWORD *)v4 + 2);
        v13 = *((_OWORD *)v4 + 3);
        v9[64] = v4[64];
        *((_OWORD *)v9 + 2) = v12;
        *((_OWORD *)v9 + 3) = v13;
        *((_OWORD *)v9 + 1) = v11;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v14 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v14 != v2)
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)v14 - 8);
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v14 -= 72;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t ggl::CommandBuffer::pushCopyItem(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v3 = result;
  v4 = *(_QWORD *)(result + 176);
  v5 = *(_QWORD *)(result + 184);
  if (v4 >= v5)
  {
    v14 = *(_QWORD *)(result + 168);
    v15 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - v14) >> 3);
    v16 = v15 + 1;
    if (v15 + 1 > 0x1AF286BCA1AF286)
      abort();
    v17 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - v14) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0xD79435E50D7943)
      v16 = 0x1AF286BCA1AF286;
    if (v16)
    {
      v18 = 152 * v16;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 192) + 16))(*(_QWORD *)(result + 192), 152 * v16, 8);
      v19 = result + 152 * v15;
      v16 = result + v18;
      if (result)
      {
        v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v19 = *(_OWORD *)a2;
        *(_OWORD *)(v19 + 16) = v20;
        v21 = *(_OWORD *)(a2 + 32);
        v22 = *(_OWORD *)(a2 + 48);
        v23 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(v19 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(v19 + 80) = v23;
        *(_OWORD *)(v19 + 32) = v21;
        *(_OWORD *)(v19 + 48) = v22;
        v24 = *(_OWORD *)(a2 + 96);
        v25 = *(_OWORD *)(a2 + 112);
        v26 = *(_OWORD *)(a2 + 128);
        *(_QWORD *)(v19 + 144) = *(_QWORD *)(a2 + 144);
        *(_OWORD *)(v19 + 112) = v25;
        *(_OWORD *)(v19 + 128) = v26;
        *(_OWORD *)(v19 + 96) = v24;
      }
    }
    else
    {
      v19 = 152 * v15;
    }
    v13 = v19 + 152;
    v28 = *(_QWORD *)(v3 + 168);
    v27 = *(_QWORD *)(v3 + 176);
    if (v27 != v28)
    {
      do
      {
        v29 = *(_OWORD *)(v27 - 152);
        *(_OWORD *)(v19 - 136) = *(_OWORD *)(v27 - 136);
        *(_OWORD *)(v19 - 152) = v29;
        v30 = *(_OWORD *)(v27 - 120);
        v31 = *(_OWORD *)(v27 - 104);
        v32 = *(_OWORD *)(v27 - 88);
        *(_OWORD *)(v19 - 72) = *(_OWORD *)(v27 - 72);
        *(_OWORD *)(v19 - 88) = v32;
        *(_OWORD *)(v19 - 104) = v31;
        *(_OWORD *)(v19 - 120) = v30;
        v33 = *(_OWORD *)(v27 - 56);
        v34 = *(_OWORD *)(v27 - 40);
        v35 = *(_OWORD *)(v27 - 24);
        *(_QWORD *)(v19 - 8) = *(_QWORD *)(v27 - 8);
        *(_OWORD *)(v19 - 24) = v35;
        *(_OWORD *)(v19 - 40) = v34;
        *(_OWORD *)(v19 - 56) = v33;
        v19 -= 152;
        v27 -= 152;
      }
      while (v27 != v28);
      v27 = *(_QWORD *)(v3 + 168);
    }
    *(_QWORD *)(v3 + 168) = v19;
    *(_QWORD *)(v3 + 176) = v13;
    v36 = *(_QWORD *)(v3 + 184);
    *(_QWORD *)(v3 + 184) = v16;
    if (v27)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 192) + 40))(*(_QWORD *)(v3 + 192), v27, v36 - v27);
  }
  else
  {
    if (v4)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v4 = *(_OWORD *)a2;
      *(_OWORD *)(v4 + 16) = v6;
      v7 = *(_OWORD *)(a2 + 32);
      v8 = *(_OWORD *)(a2 + 48);
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v4 + 80) = v9;
      *(_OWORD *)(v4 + 32) = v7;
      *(_OWORD *)(v4 + 48) = v8;
      v10 = *(_OWORD *)(a2 + 96);
      v11 = *(_OWORD *)(a2 + 112);
      v12 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(v4 + 144) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(v4 + 112) = v11;
      *(_OWORD *)(v4 + 128) = v12;
      *(_OWORD *)(v4 + 96) = v10;
    }
    v13 = v4 + 152;
  }
  *(_QWORD *)(v3 + 176) = v13;
  return result;
}

void geo::GuillotineBin::addFreeRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = *(_OWORD **)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_OWORD **)(a1 + 56);
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *(_OWORD *)a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *(v5 - 1);
        v13 -= 16;
        --v5;
      }
      while (v5 != v7);
      v5 = *(_OWORD **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v6;
    *(_QWORD *)(a1 + 72) = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *(_OWORD *)a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 24) += (*(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4)) * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
}

void md::HikingLogic::didBecomeInactive(md::HikingLogic *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    v7 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v7);
  }
  v3 = *((_QWORD *)this + 39);
  if (v3 && *((_BYTE *)this + 280))
  {
    v6 = *(_OWORD *)((char *)this + 264);
    LOBYTE(v7) = 0;
    (*(void (**)(uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v7);
  }
  if (*((_BYTE *)this + 224))
    *((_BYTE *)this + 224) = 0;
  if (*((_BYTE *)this + 280))
    *((_BYTE *)this + 280) = 0;
  if (*((_BYTE *)this + 184))
    *((_BYTE *)this + 184) = 0;
  if (*((_BYTE *)this + 200))
    *((_BYTE *)this + 200) = 0;
  if (*((_BYTE *)this + 337))
    *((_BYTE *)this + 337) = 0;
  md::HikingLogic::deselectTrails(this);
  v4 = (void *)*((_QWORD *)this + 46);
  if (v4)
  {
    objc_msgSend(v4, "stop");
    v5 = (void *)*((_QWORD *)this + 46);
    if (v5)
    {
      *((_QWORD *)this + 46) = 0;

    }
  }
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 87) = 0;
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_21,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_21>,void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  id *v3;
  char v4;
  id WeakRetained;
  id v6;

  v2 = *a2;
  v3 = (id *)(*(_QWORD *)(a1 + 8) + 848);
  WeakRetained = objc_loadWeakRetained(v3);
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    v6 = objc_loadWeakRetained(v3);
    objc_msgSend(v6, "locationInHikingToolTipRegion:", v2);

  }
}

void sub_19F24F97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8>,void ()(md::LabelManager *)>::operator()(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 8) + 848));
  objc_msgSend(WeakRetained, "labelManagerDidLayout");

}

void sub_19F24FA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::fetchResources(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t *v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  _BYTE *v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_signpost_id_t v47;
  int v48;
  const __CFString *v49;
  NSObject *v50;
  os_signpost_id_t v51;
  void *v52;
  int v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  char *v63;
  _QWORD *v64;
  char *v65;
  unint64_t v66;
  size_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  id v75;
  qos_class_t v76;
  id v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  _QWORD *v82;
  size_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  __int128 *v89;
  _OWORD *v90;
  unint64_t v91;
  __int128 v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  __int128 *v98;
  _OWORD *v99;
  unint64_t v100;
  __int128 v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  _QWORD *v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  _BYTE *v109;
  __int128 *v110;
  _OWORD *v111;
  unint64_t v112;
  __int128 v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  char v119;
  id v120;
  void *v121;
  char v122;
  uint64_t v123;
  _BYTE *v124;
  __int128 *v125;
  _OWORD *v126;
  unint64_t v127;
  __int128 v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  _QWORD *v132;
  uint64_t v133;
  char v134;
  char *v135;
  uint64_t v136;
  id v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  __int128 *v146;
  _OWORD *v147;
  unint64_t v148;
  __int128 v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  char *v153;
  uint64_t v154;
  char v155;
  __int128 v156;
  std::__shared_weak_count *v157;
  unint64_t *p_shared_owners;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  id v167;
  uint64_t v168;
  id v169;
  void *v170;
  _QWORD v171[4];
  id v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  char *v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD v179[5];
  __int128 v180;
  uint64_t v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  _QWORD v184[2];
  uint64_t v185;
  void *v186;
  char *v187;
  _BYTE *v188;
  uint64_t v189;
  _BYTE v190[32];
  uint64_t v191;
  __int128 v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  _QWORD v198[5];
  __int128 v199;
  _BYTE v200[24];
  id v201;
  id v202;
  _QWORD v203[3];
  _QWORD *v204;
  uint8_t buf[4];
  uint64_t v206;
  __int16 v207;
  int v208;
  __int16 v209;
  _BYTE v210[18];
  __int16 v211;
  int v212;
  __int128 v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  v167 = a4;
  v193 = 0;
  if ((geo::_retain_ptr<GEOActiveTileSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*(void **)(a1 + 520), &v193) & 1) == 0)
  {
    v6 = 7;
    if (!*(_BYTE *)(a1 + 504))
      v6 = 3;
    if (*(_BYTE *)(a1 + 505))
      v6 |= 8uLL;
    v165 = v6;
    v7 = *(uint64_t **)(a2 + 16);
    if (v7)
    {
      v164 = a1;
      while (1)
      {
        v8 = v190;
        v185 = v7[2];
        v186 = v190;
        v187 = v190;
        v188 = v190;
        v189 = 32;
        v9 = (char *)v7[3];
        v10 = (char *)v7[4];
        v11 = v10 - v9;
        if ((unint64_t)(v10 - v9) < 0x21)
          goto LABEL_30;
        v12 = v11 <= 0x40 ? 64 : v10 - v9;
        v8 = malloc_type_malloc(v12, 0x100004077774924uLL);
        v13 = (char *)v186;
        v14 = v187;
        if (v186 != v187)
          break;
LABEL_29:
        v186 = v8;
        v187 = v8;
        v189 = v12;
LABEL_30:
        if (v9 == v10)
          goto LABEL_48;
        if (v11 < 8)
        {
          v29 = v8;
          goto LABEL_46;
        }
        if ((unint64_t)(v8 - v9) < 0x20)
        {
          v29 = v8;
          goto LABEL_46;
        }
        if (v11 >= 0x20)
        {
          v28 = v11 & 0xFFFFFFFFFFFFFFE0;
          v30 = (__int128 *)(v9 + 16);
          v31 = v8 + 16;
          v32 = v11 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v33 = *v30;
            *(v31 - 1) = *(v30 - 1);
            *v31 = v33;
            v30 += 2;
            v31 += 2;
            v32 -= 32;
          }
          while (v32);
          if (v11 == v28)
            goto LABEL_47;
          if ((v11 & 0x18) == 0)
          {
            v9 += v28;
            v29 = &v8[v28];
            goto LABEL_46;
          }
        }
        else
        {
          v28 = 0;
        }
        v34 = v11 & 0xFFFFFFFFFFFFFFF8;
        v29 = &v8[v11 & 0xFFFFFFFFFFFFFFF8];
        v35 = v28 - (v11 & 0xFFFFFFFFFFFFFFF8);
        v36 = (uint64_t *)&v9[v28];
        v37 = &v8[v28];
        do
        {
          v38 = *v36++;
          *v37++ = v38;
          v35 += 8;
        }
        while (v35);
        if (v11 == v34)
          goto LABEL_47;
        v9 += v34;
        do
        {
LABEL_46:
          v39 = *v9++;
          *v29++ = v39;
        }
        while (v9 != v10);
LABEL_47:
        v8 = v187;
LABEL_48:
        v40 = v7[11];
        v187 = &v8[v11];
        v191 = v40;
        v192 = *((_OWORD *)v7 + 6);
        v41 = v7[14];
        v213 = 0uLL;
        v42 = *(id *)(a1 + 520);
        *(_QWORD *)&v213 = (*(uint64_t (**)(uint64_t, id, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v42, &v185);
        *((_QWORD *)&v213 + 1) = v43;

        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 144))(v184, a1, &v185);
        v44 = atomic_load((unint64_t *)(a1 + 104));
        if (v44)
          (*(void (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44);
        switch(WORD1(v185))
        {
          case 0x2Au:
LABEL_53:
            if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
            v45 = (id)GEOGetVectorKitResourceLoadingLog_log;
            v46 = v45;
            v47 = v192;
            if ((unint64_t)(v192 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v45))
            {
              *(_DWORD *)buf = 134218752;
              v206 = *(_QWORD *)((char *)&v213 + 1);
              v207 = 1024;
              v208 = BYTE9(v213);
              v209 = 1024;
              *(_DWORD *)v210 = BYTE10(v213);
              *(_WORD *)&v210[4] = 2048;
              *(_QWORD *)&v210[6] = *((_QWORD *)&v192 + 1);
              v48 = 1;
              _os_signpost_emit_with_name_impl(&dword_19F029000, v46, OS_SIGNPOST_INTERVAL_BEGIN, v47, "ResourceFetch", "key=%llu@%d type=%d parent_signpost=%llu", buf, 0x22u);
            }
            else
            {
              v48 = 1;
            }
            v49 = CFSTR("ast");
            break;
          case 0x24u:
            if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
            v50 = (id)GEOGetVectorKitResourceLoadingLog_log;
            v46 = v50;
            v51 = v192;
            if ((unint64_t)(v192 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v50))
            {
              *(_DWORD *)buf = 134218496;
              v206 = *(_QWORD *)((char *)&v213 + 1);
              v207 = 1024;
              v208 = BYTE10(v213);
              v209 = 2048;
              *(_QWORD *)v210 = *((_QWORD *)&v192 + 1);
              v48 = 1;
              _os_signpost_emit_with_name_impl(&dword_19F029000, v46, OS_SIGNPOST_INTERVAL_BEGIN, v51, "ResourceFetch", "key=%llu type=%d parent_signpost=%llu", buf, 0x1Cu);
            }
            else
            {
              v48 = 1;
            }
            v49 = CFSTR("mtl");
            break;
          case 0x1Cu:
            goto LABEL_53;
          default:
            if (GEOGetVectorKitResourceLoadingLog_onceToken != -1)
              dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_19_11788);
            v46 = (id)GEOGetVectorKitResourceLoadingLog_log;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134219010;
              v206 = *(_QWORD *)((char *)&v213 + 1);
              v207 = 1024;
              v208 = BYTE10(v213);
              v209 = 2080;
              *(_QWORD *)v210 = "false";
              *(_WORD *)&v210[8] = 2080;
              *(_QWORD *)&v210[10] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/IdentifiedGEOResourceFetcher.mm";
              v211 = 1024;
              v212 = 83;
              _os_log_impl(&dword_19F029000, v46, OS_LOG_TYPE_ERROR, "Unexpected resource type - key=%llu type=%d: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x2Cu);
            }
            v48 = 0;
            v49 = 0;
            break;
        }

        +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v53 = objc_msgSend(v52, "daVinciResourceOverrideEnabled");

        if (v53)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%llu"), *(_QWORD *)((char *)&v213 + 1));
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "stringByAppendingPathExtension:", v49);
          v55 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "pathForResourceWithName:", v55);
          v57 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v56) = objc_msgSend(v58, "fileExistsAtPath:", v57);

          if ((v48 & v56) == 1)
          {
            GEOResourceDevResourcesPath();
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%llu"), *(_QWORD *)((char *)&v213 + 1));
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v59, "stringByAppendingPathComponent:", v60);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v61, "stringByAppendingPathExtension:", v49);
            v62 = (void *)objc_claimAutoreleasedReturnValue();

            v63 = (char *)v186;
            v194 = a1;
            v195 = v185;
            v64 = v198;
            *(_QWORD *)&v196 = v198;
            *((_QWORD *)&v196 + 1) = v198;
            *(_QWORD *)&v197 = v198;
            *((_QWORD *)&v197 + 1) = 32;
            v65 = v187;
            v66 = v187 - (_BYTE *)v186;
            if ((unint64_t)(v187 - (_BYTE *)v186) < 0x21)
              goto LABEL_141;
            if (v66 <= 0x40)
              v67 = 64;
            else
              v67 = v187 - (_BYTE *)v186;
            v64 = malloc_type_malloc(v67, 0x100004077774924uLL);
            v69 = (char *)*((_QWORD *)&v196 + 1);
            v68 = (char *)v196;
            if ((_QWORD)v196 == *((_QWORD *)&v196 + 1))
              goto LABEL_140;
            v70 = *((_QWORD *)&v196 + 1) - v196;
            if (*((_QWORD *)&v196 + 1) - (_QWORD)v196 < 8uLL)
            {
              v71 = v64;
            }
            else
            {
              v71 = v64;
              if ((unint64_t)((unint64_t)v64 - v196) >= 0x20)
              {
                if (v70 < 0x20)
                {
                  v72 = 0;
LABEL_109:
                  v102 = v70 & 0xFFFFFFFFFFFFFFF8;
                  v71 = (char *)v64 + (v70 & 0xFFFFFFFFFFFFFFF8);
                  v103 = v72 - (v70 & 0xFFFFFFFFFFFFFFF8);
                  v104 = (uint64_t *)&v68[v72];
                  v105 = (_QWORD *)((char *)v64 + v72);
                  do
                  {
                    v106 = *v104++;
                    *v105++ = v106;
                    v103 += 8;
                  }
                  while (v103);
                  if (v70 != v102)
                  {
                    v68 += v102;
                    goto LABEL_139;
                  }
LABEL_140:
                  *(_QWORD *)&v196 = v64;
                  *((_QWORD *)&v196 + 1) = v64;
                  *((_QWORD *)&v197 + 1) = v67;
LABEL_141:
                  if (v63 == v65)
                    goto LABEL_159;
                  if (v66 < 8)
                  {
                    v124 = v64;
                  }
                  else if ((unint64_t)((char *)v64 - v63) < 0x20)
                  {
                    v124 = v64;
                  }
                  else
                  {
                    if (v66 < 0x20)
                    {
                      v123 = 0;
LABEL_152:
                      v129 = v66 & 0xFFFFFFFFFFFFFFF8;
                      v124 = (char *)v64 + (v66 & 0xFFFFFFFFFFFFFFF8);
                      v130 = v123 - (v66 & 0xFFFFFFFFFFFFFFF8);
                      v131 = (uint64_t *)&v63[v123];
                      v132 = (_QWORD *)((char *)v64 + v123);
                      do
                      {
                        v133 = *v131++;
                        *v132++ = v133;
                        v130 += 8;
                      }
                      while (v130);
                      if (v66 != v129)
                      {
                        v63 += v129;
                        goto LABEL_157;
                      }
LABEL_158:
                      v64 = (_QWORD *)*((_QWORD *)&v196 + 1);
LABEL_159:
                      v135 = (char *)v64 + v66;
                      v136 = v191;
                      *((_QWORD *)&v196 + 1) = v135;
                      v198[4] = v191;
                      v199 = v192;
                      *(_QWORD *)v200 = v41;
                      *(_OWORD *)&v200[8] = v213;
                      v120 = v62;
                      v201 = v120;
                      v137 = v167;
                      v202 = v137;
                      v204 = 0;
                      v138 = (char *)operator new(0x98uLL);
                      v139 = v194;
                      v140 = v195;
                      *(_QWORD *)v138 = &off_1E42D35B0;
                      *((_QWORD *)v138 + 1) = v139;
                      v141 = v138 + 56;
                      *((_QWORD *)v138 + 2) = v140;
                      *((_QWORD *)v138 + 3) = v138 + 56;
                      v142 = *((_QWORD *)&v197 + 1);
                      *((_QWORD *)v138 + 5) = v138 + 56;
                      *((_QWORD *)v138 + 6) = v142;
                      v143 = (char *)v196;
                      if ((_QWORD)v196 != (_QWORD)v197)
                      {
                        *((_QWORD *)v138 + 3) = v196;
                        *((_QWORD *)v138 + 4) = v135;
                        v196 = 0u;
                        v197 = 0u;
                        goto LABEL_176;
                      }
                      v144 = (unint64_t)&v135[-v196];
                      *((_QWORD *)v138 + 4) = &v135[(_QWORD)v141 - v196];
                      if (v135 == v143)
                        goto LABEL_176;
                      if (v144 >= 8 && (unint64_t)(v138 - v143 + 56) >= 0x20)
                      {
                        if (v144 < 0x20)
                        {
                          v145 = 0;
LABEL_170:
                          v150 = v144 & 0xFFFFFFFFFFFFFFF8;
                          v141 += v144 & 0xFFFFFFFFFFFFFFF8;
                          v151 = v145 - (v144 & 0xFFFFFFFFFFFFFFF8);
                          v152 = (uint64_t *)&v143[v145];
                          v153 = &v138[v145 + 56];
                          do
                          {
                            v154 = *v152++;
                            *(_QWORD *)v153 = v154;
                            v153 += 8;
                            v151 += 8;
                          }
                          while (v151);
                          if (v144 != v150)
                          {
                            v143 += v150;
                            goto LABEL_175;
                          }
LABEL_176:
                          *((_QWORD *)v138 + 11) = v136;
                          v156 = *(_OWORD *)v200;
                          *((_OWORD *)v138 + 6) = v192;
                          *((_OWORD *)v138 + 7) = v156;
                          *((_QWORD *)v138 + 16) = *(_QWORD *)&v200[16];
                          *((_QWORD *)v138 + 17) = v120;
                          v202 = 0;
                          v201 = 0;
                          *((_QWORD *)v138 + 18) = v137;
                          v204 = v138;
                          geo::TaskQueue::async(&v182, a3, v203);
                          v157 = v183;
                          if (v183)
                          {
                            p_shared_owners = (unint64_t *)&v183->__shared_owners_;
                            do
                              v159 = __ldaxr(p_shared_owners);
                            while (__stlxr(v159 - 1, p_shared_owners));
                            if (!v159)
                            {
                              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                              std::__shared_weak_count::__release_weak(v157);
                            }
                          }
                          v160 = v204;
                          if (v204 == v203)
                          {
                            v160 = v203;
                            v161 = 4;
LABEL_185:
                            (*(void (**)(void))(*v160 + 8 * v161))();
                          }
                          else if (v204)
                          {
                            v161 = 5;
                            goto LABEL_185;
                          }

                          v121 = (void *)v196;
                          if ((_QWORD)v196 == (_QWORD)v197)
                            goto LABEL_136;
LABEL_135:
                          free(v121);
                          goto LABEL_136;
                        }
                        v145 = v144 & 0xFFFFFFFFFFFFFFE0;
                        v146 = (__int128 *)(v143 + 16);
                        v147 = v138 + 72;
                        v148 = v144 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          v149 = *v146;
                          *(v147 - 1) = *(v146 - 1);
                          *v147 = v149;
                          v146 += 2;
                          v147 += 2;
                          v148 -= 32;
                        }
                        while (v148);
                        if (v144 == v145)
                          goto LABEL_176;
                        if ((v144 & 0x18) != 0)
                          goto LABEL_170;
                        v143 += v145;
                        v141 += v145;
                      }
                      do
                      {
LABEL_175:
                        v155 = *v143++;
                        *v141++ = v155;
                      }
                      while (v143 != v135);
                      goto LABEL_176;
                    }
                    v123 = v66 & 0xFFFFFFFFFFFFFFE0;
                    v125 = (__int128 *)(v63 + 16);
                    v126 = v64 + 2;
                    v127 = v66 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v128 = *v125;
                      *(v126 - 1) = *(v125 - 1);
                      *v126 = v128;
                      v125 += 2;
                      v126 += 2;
                      v127 -= 32;
                    }
                    while (v127);
                    if (v66 == v123)
                      goto LABEL_158;
                    if ((v66 & 0x18) != 0)
                      goto LABEL_152;
                    v63 += v123;
                    v124 = (char *)v64 + v123;
                  }
                  do
                  {
LABEL_157:
                    v134 = *v63++;
                    *v124++ = v134;
                  }
                  while (v63 != v65);
                  goto LABEL_158;
                }
                v72 = v70 & 0xFFFFFFFFFFFFFFE0;
                v98 = (__int128 *)(v196 + 16);
                v99 = v64 + 2;
                v100 = v70 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v101 = *v98;
                  *(v99 - 1) = *(v98 - 1);
                  *v99 = v101;
                  v98 += 2;
                  v99 += 2;
                  v100 -= 32;
                }
                while (v100);
                if (v70 == v72)
                  goto LABEL_140;
                if ((v70 & 0x18) != 0)
                  goto LABEL_109;
                v68 += v72;
                v71 = (char *)v64 + v72;
              }
            }
            do
            {
LABEL_139:
              v122 = *v68++;
              *v71++ = v122;
            }
            while (v68 != v69);
            goto LABEL_140;
          }
        }
        objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
        v170 = (void *)objc_claimAutoreleasedReturnValue();
        if (LOBYTE(v184[0]))
          v73 = (char *)v184 + 4;
        else
          v73 = 0;
        v74 = HIDWORD(v185);
        v75 = *(id *)(a1 + 448);
        v76 = qos_class_self();
        v168 = v192;
        v77 = *(id *)(a1 + 472);
        v169 = *(id *)(a3 + 16);
        v171[0] = MEMORY[0x1E0C809B0];
        v171[1] = 3321888768;
        v171[2] = ___ZN2md28IdentifiedGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke;
        v171[3] = &unk_1E42E93B0;
        v78 = a1;
        v79 = (char *)v186;
        v173 = v78;
        v174 = v185;
        v175 = v179;
        v176 = (char *)v179;
        v80 = v187;
        v81 = v187 - (_BYTE *)v186;
        v82 = v179;
        v177 = v179;
        v178 = 32;
        if ((unint64_t)(v187 - (_BYTE *)v186) >= 0x21)
        {
          v163 = v77;
          if (v81 <= 0x40)
            v83 = 64;
          else
            v83 = v187 - (_BYTE *)v186;
          v82 = malloc_type_malloc(v83, 0x100004077774924uLL);
          v84 = (char *)v175;
          v85 = v176;
          if (v175 == v176)
            goto LABEL_115;
          v86 = v176 - (_BYTE *)v175;
          if ((unint64_t)(v176 - (_BYTE *)v175) < 8)
          {
            v87 = v82;
          }
          else
          {
            v87 = v82;
            if ((unint64_t)((char *)v82 - (_BYTE *)v175) >= 0x20)
            {
              if (v86 < 0x20)
              {
                v88 = 0;
LABEL_100:
                v93 = v86 & 0xFFFFFFFFFFFFFFF8;
                v87 = (char *)v82 + (v86 & 0xFFFFFFFFFFFFFFF8);
                v94 = v88 - (v86 & 0xFFFFFFFFFFFFFFF8);
                v95 = &v84[v88];
                v96 = (_QWORD *)((char *)v82 + v88);
                do
                {
                  v97 = *(_QWORD *)v95;
                  v95 += 8;
                  *v96++ = v97;
                  v94 += 8;
                }
                while (v94);
                if (v86 != v93)
                {
                  v84 += v93;
                  goto LABEL_114;
                }
LABEL_115:
                v175 = v82;
                v176 = (char *)v82;
                v178 = v83;
                v77 = v163;
                goto LABEL_116;
              }
              v88 = v86 & 0xFFFFFFFFFFFFFFE0;
              v89 = (__int128 *)((char *)v175 + 16);
              v90 = v82 + 2;
              v91 = v86 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v92 = *v89;
                *(v90 - 1) = *(v89 - 1);
                *v90 = v92;
                v89 += 2;
                v90 += 2;
                v91 -= 32;
              }
              while (v91);
              if (v86 == v88)
                goto LABEL_115;
              if ((v86 & 0x18) != 0)
                goto LABEL_100;
              v84 += v88;
              v87 = (char *)v82 + v88;
            }
          }
          do
          {
LABEL_114:
            v107 = *v84++;
            *v87++ = v107;
          }
          while (v84 != v85);
          goto LABEL_115;
        }
LABEL_116:
        if (v79 == v80)
          goto LABEL_134;
        if (v81 < 8)
        {
          v109 = v82;
          goto LABEL_132;
        }
        if ((unint64_t)((char *)v82 - v79) < 0x20)
        {
          v109 = v82;
          goto LABEL_132;
        }
        if (v81 >= 0x20)
        {
          v108 = v81 & 0xFFFFFFFFFFFFFFE0;
          v110 = (__int128 *)(v79 + 16);
          v111 = v82 + 2;
          v112 = v81 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v113 = *v110;
            *(v111 - 1) = *(v110 - 1);
            *v111 = v113;
            v110 += 2;
            v111 += 2;
            v112 -= 32;
          }
          while (v112);
          if (v81 == v108)
            goto LABEL_133;
          if ((v81 & 0x18) == 0)
          {
            v79 += v108;
            v109 = (char *)v82 + v108;
            goto LABEL_132;
          }
        }
        else
        {
          v108 = 0;
        }
        v114 = v81 & 0xFFFFFFFFFFFFFFF8;
        v109 = (char *)v82 + (v81 & 0xFFFFFFFFFFFFFFF8);
        v115 = v108 - (v81 & 0xFFFFFFFFFFFFFFF8);
        v116 = (uint64_t *)&v79[v108];
        v117 = (_QWORD *)((char *)v82 + v108);
        do
        {
          v118 = *v116++;
          *v117++ = v118;
          v115 += 8;
        }
        while (v115);
        if (v81 == v114)
          goto LABEL_133;
        v79 += v114;
        do
        {
LABEL_132:
          v119 = *v79++;
          *v109++ = v119;
        }
        while (v79 != v80);
LABEL_133:
        v82 = v176;
LABEL_134:
        v176 = (char *)v82 + v81;
        v179[4] = v191;
        v180 = v192;
        v181 = v41;
        v172 = v167;
        LODWORD(v162) = v76;
        v120 = v170;
        objc_msgSend(v170, "loadKey:additionalInfo:priority:forClient:options:reason:qos:signpostID:auditToken:callbackQ:beginNetwork:callback:", &v213, v73, v74, v75, v165, 1, v162, v168, v77, v169, 0, v171);
        a1 = v164;

        v121 = v175;
        if (v175 != v177)
          goto LABEL_135;
LABEL_136:

        if (v186 != v188)
          free(v186);
        v7 = (uint64_t *)*v7;
        if (!v7)
          goto LABEL_188;
      }
      v15 = v187 - (_BYTE *)v186;
      if ((unint64_t)(v187 - (_BYTE *)v186) < 8)
      {
        v16 = v8;
      }
      else
      {
        v16 = v8;
        if ((unint64_t)(v8 - (_BYTE *)v186) >= 0x20)
        {
          if (v15 < 0x20)
          {
            v17 = 0;
LABEL_23:
            v22 = v15 & 0xFFFFFFFFFFFFFFF8;
            v16 = &v8[v15 & 0xFFFFFFFFFFFFFFF8];
            v23 = v17 - (v15 & 0xFFFFFFFFFFFFFFF8);
            v24 = (uint64_t *)&v13[v17];
            v25 = &v8[v17];
            do
            {
              v26 = *v24++;
              *v25++ = v26;
              v23 += 8;
            }
            while (v23);
            if (v15 == v22)
              goto LABEL_29;
            v13 += v22;
            goto LABEL_28;
          }
          v17 = v15 & 0xFFFFFFFFFFFFFFE0;
          v18 = (__int128 *)((char *)v186 + 16);
          v19 = v8 + 16;
          v20 = v15 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v21 = *v18;
            *(v19 - 1) = *(v18 - 1);
            *v19 = v21;
            v18 += 2;
            v19 += 2;
            v20 -= 32;
          }
          while (v20);
          if (v15 == v17)
            goto LABEL_29;
          if ((v15 & 0x18) != 0)
            goto LABEL_23;
          v13 += v17;
          v16 = &v8[v17];
        }
      }
      do
      {
LABEL_28:
        v27 = *v13++;
        *v16++ = v27;
      }
      while (v13 != v14);
      goto LABEL_29;
    }
  }
LABEL_188:

}

void sub_19F2508F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{

  _Unwind_Resume(a1);
}

void gdc::LoadingStatusTracker::willStartLoadingResources(gdc::LoadingStatusTracker *this)
{
  std::mutex *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t v6[16];

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = v3 + 1;
  if (!v3)
  {
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
    v4 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LoadingResources", (const char *)&unk_1A0189141, v6, 2u);
    }

    v5 = *((_QWORD *)this + 15);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  }
  std::mutex::unlock(v2);
}

void sub_19F250B50(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::tileLoaderAdditionalInfo(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t geo::_retain_ptr<GEOActiveTileSet * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *a2;
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_19F250BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t md::DaVinciAssetResourceFetcher::resourceKey(uint64_t a1, void *a2, uint64_t a3)
{
  return md::DaVinciAssetResourceFetcher::createResourceKey(a2, a3);
}

uint64_t md::DaVinciAssetResourceFetcher::createResourceKey(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  __int128 v6;

  v3 = a1;
  v4 = **(_QWORD **)(a2 + 8);
  objc_msgSend(v3, "style");
  LOBYTE(v6) = GEOTileKeyMakeEmpty();
  *(_QWORD *)((char *)&v6 + 1) = v4;

  return v6;
}

void sub_19F250CA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F250EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::AnimationManager::onTimerFired(md::AnimationManager *this, double a2)
{
  std::mutex *v4;
  uint64_t **v5;
  char *i;
  uint64_t **j;
  char *v8;
  id *v9;
  id v10;
  int v11;
  id v12;
  uint64_t *v13;
  uint64_t *v14;
  char v15;
  uint64_t *v16;
  void *v17;
  uint64_t *v18;
  uint64_t *v19;
  char v20;
  uint64_t *v21;
  void *v22;
  char *v23;
  char *v24;
  void (**v25)(char *);
  BOOL v26;
  char *v27;
  char *v28;
  unint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v4 = (std::mutex *)((char *)this + 40);
  std::mutex::lock((std::mutex *)((char *)this + 40));
  v5 = (uint64_t **)*((_QWORD *)this + 15);
  for (i = 0; v5; v5 = (uint64_t **)*v5)
  {
    v13 = v5[3];
    if ((objc_msgSend(v13, "running") & 1) != 0)
    {
      v14 = v5[3];
      v15 = objc_msgSend(v14, "hasFrequency");

      if ((v15 & 1) == 0)
      {
        if ((unint64_t)i >= v29)
        {
          i = std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>((void **)&v27, v5[3]);
        }
        else
        {
          *(_QWORD *)i = &off_1E42B49F0;
          *((_QWORD *)i + 1) = 0;
          v16 = v5[3];
          v17 = (void *)*((_QWORD *)i + 1);
          *((_QWORD *)i + 1) = v16;

          i += 24;
        }
        v28 = i;
      }
    }
    else
    {

    }
  }
  for (j = (uint64_t **)*((_QWORD *)this + 20); j; j = (uint64_t **)*j)
  {
    v18 = j[3];
    if ((objc_msgSend(v18, "running") & 1) != 0)
    {
      v19 = j[3];
      v20 = objc_msgSend(v19, "hasFrequency");

      if ((v20 & 1) == 0)
      {
        if ((unint64_t)i >= v29)
        {
          i = std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__push_back_slow_path<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> const&>((void **)&v27, j[3]);
        }
        else
        {
          *(_QWORD *)i = &off_1E42B49F0;
          *((_QWORD *)i + 1) = 0;
          v21 = j[3];
          v22 = (void *)*((_QWORD *)i + 1);
          *((_QWORD *)i + 1) = v21;

          i += 24;
        }
        v28 = i;
      }
    }
    else
    {

    }
  }
  std::mutex::unlock(v4);
  v8 = v27;
  if (v27 == i)
  {
    atomic_store(0, (unsigned __int8 *)this + 184);
    if (!v8)
      return;
    goto LABEL_31;
  }
  v9 = (id *)v27;
  do
  {
    v10 = v9[1];
    v11 = objc_msgSend(v10, "running");

    if (v11)
    {
      v12 = v9[1];
      objc_msgSend(v12, "onTimerFired:", a2);

    }
    v9 += 3;
  }
  while (v9 != (id *)i);
  atomic_store(0, (unsigned __int8 *)this + 184);
  if (v8)
  {
    if (v8 != i)
    {
      v23 = i - 24;
      v24 = i - 24;
      do
      {
        v25 = *(void (***)(char *))v24;
        v24 -= 24;
        (*v25)(v23);
        v26 = v23 == v8;
        v23 = v24;
      }
      while (!v26);
    }
LABEL_31:
    operator delete(v8);
  }
}

void sub_19F2511E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100]((void **)va);
  _Unwind_Resume(a1);
}

void md::RouteRenderLayer::~RouteRenderLayer(md::RouteRenderLayer *this)
{
  md::RouteRenderLayer::~RouteRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t *v2;
  md::RouteLayoutInfo **v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  md::RouteLayoutInfo *v13;
  md::CRouteRenderResources *v14;
  void *v15;

  *(_QWORD *)this = &off_1E42921B0;
  v3 = (md::RouteLayoutInfo **)((char *)this + 64);
  v2 = (uint64_t *)*((_QWORD *)this + 8);
  v4 = *v2;
  v5 = v2[1];
  while (v4 != v5)
  {
    v6 = *(_QWORD **)v4;
    v7 = *(void **)(*(_QWORD *)v4 + 176);
    if (v7)
    {
      objc_msgSend(v7, "stop");
      v6 = *(_QWORD **)v4;
    }
    v8 = (void *)v6[23];
    if (v8)
    {
      objc_msgSend(v8, "stop");
      v6 = *(_QWORD **)v4;
    }
    v9 = (void *)v6[24];
    if (v9)
    {
      objc_msgSend(v9, "stop");
      v6 = *(_QWORD **)v4;
    }
    v10 = (void *)v6[87];
    if (v10)
      objc_msgSend(v10, "stop");
    v4 += 16;
  }
  v11 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  v13 = *v3;
  *v3 = 0;
  if (v13)
  {
    md::RouteLayoutInfo::~RouteLayoutInfo(v13);
    MEMORY[0x1A1AF4E00]();
  }
  v14 = (md::CRouteRenderResources *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
  {
    md::CRouteRenderResources::~CRouteRenderResources(v14);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v15 = (void *)*((_QWORD *)this + 1);
  if (v15)
  {
    *((_QWORD *)this + 2) = v15;
    operator delete(v15);
  }
}

void sub_19F251384(_Unwind_Exception *a1)
{
  uint64_t v1;
  md::RouteLayoutInfo **v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  std::unique_ptr<md::RouteLayoutInfo>::~unique_ptr[abi:nn180100](v2);
  std::unique_ptr<md::CRouteRenderResources>::~unique_ptr[abi:nn180100]((md::CRouteRenderResources **)(v1 + 56));
  *(_QWORD *)v1 = off_1E428C468;
  v6 = *(void **)(v1 + 8);
  if (v6)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void md::StandardRouteOverlayCache::~StandardRouteOverlayCache(md::StandardRouteOverlayCache *this)
{
  md::StandardRouteOverlayCache::~StandardRouteOverlayCache(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD **v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void *v15;
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  void (**v18)(_QWORD);
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD **v29;
  _QWORD **v30;
  _QWORD *v31[2];

  *(_QWORD *)this = off_1E42A25A8;
  v31[0] = 0;
  v31[1] = 0;
  v30 = v31;
  std::set<objc_object  {objcproto14VKRouteOverlay}*>::insert[abi:nn180100]<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>(&v30, *((_QWORD **)this + 9), (_QWORD *)this + 10);
  v2 = v30;
  if (v30 != v31)
  {
    do
    {
      v27 = v2[4];
      (*(void (**)(md::StandardRouteOverlayCache *, _QWORD *, uint64_t))(*(_QWORD *)this + 96))(this, v27, 1);

      v28 = v2[1];
      if (v28)
      {
        do
        {
          v29 = (_QWORD **)v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD **)v2[2];
          v8 = *v29 == v2;
          v2 = v29;
        }
        while (!v8);
      }
      v2 = v29;
    }
    while (v29 != v31);
  }
  v4 = (void (***)(_QWORD))*((_QWORD *)this + 2);
  v3 = (void (***)(_QWORD))*((_QWORD *)this + 3);
  if (v3 != v4)
  {
    v5 = v3 - 3;
    v6 = v3 - 3;
    do
    {
      v7 = *v6;
      v6 -= 3;
      (*v7)(v5);
      v8 = v5 == v4;
      v5 = v6;
    }
    while (!v8);
  }
  *((_QWORD *)this + 3) = v4;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v31[0]);
  v9 = (_QWORD *)*((_QWORD *)this + 19);
  while (v9)
  {
    v19 = v9;
    v9 = (_QWORD *)*v9;
    v20 = (std::__shared_weak_count *)v19[4];
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    operator delete(v19);
  }
  v10 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)*((_QWORD *)this + 14);
  while (v11)
  {
    v23 = v11;
    v11 = (_QWORD *)*v11;
    v24 = (std::__shared_weak_count *)v23[4];
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    operator delete(v23);
  }
  v12 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v12)
    operator delete(v12);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 7));
  v13 = (void (***)(_QWORD))*((_QWORD *)this + 2);
  if (v13)
  {
    v14 = (void (***)(_QWORD))*((_QWORD *)this + 3);
    v15 = (void *)*((_QWORD *)this + 2);
    if (v14 != v13)
    {
      v16 = v14 - 3;
      v17 = v14 - 3;
      do
      {
        v18 = *v17;
        v17 -= 3;
        (*v18)(v16);
        v8 = v16 == v13;
        v16 = v17;
      }
      while (!v8);
      v15 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v13;
    operator delete(v15);
  }

}

void sub_19F251648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a11);
  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](v11 + 136);
  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](v11 + 96);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v11 + 80));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v11 + 56));
  std::vector<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~vector[abi:nn180100]((void **)(v11 + 16));

  _Unwind_Resume(a1);
}

void md::RouteLineDataRequester::requestDataKeys(md::RouteLineDataRequester *this, const gdc::SelectionContext *a2)
{
  gdc::LayerDataCollector *v4;
  __int16 v5;
  uint64_t v6;
  double v7;
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  _QWORD **v15;
  int v16;
  _QWORD *v17;
  id v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  long double v27;
  double v28;
  long double v29;
  double v30;
  BOOL v31;
  _QWORD *v33;
  _QWORD **v34;
  BOOL v35;
  _QWORD **v36;
  _QWORD *v37;
  id v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  long double v47;
  double v48;
  long double v49;
  double v50;
  BOOL v51;
  _QWORD *v53;
  _QWORD **v54;
  uint64_t *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  char v58;
  int v59;
  int v60;
  int v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int16 v64;
  double v65;
  double v66;
  double v67;
  double v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  _QWORD **v72;
  _QWORD *v73;
  void *v74;
  _QWORD **v75;
  _QWORD *v76[8];
  char v77;
  int32x2_t v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v4 = (gdc::LayerDataCollector *)*((_QWORD *)a2 + 1);
  if (*((_BYTE *)this + 21))
    v5 = 10;
  else
    v5 = 9;
  v64 = v5;
  v6 = *((_QWORD *)a2 + 8) + 24;
  v7 = 0.5;
  while (1)
  {
    v6 = *(_QWORD *)v6;
    if (!v6)
      break;
    v8 = *(_BYTE *)(v6 + 17);
    v9 = *(_DWORD *)(v6 + 24);
    v10 = *(_DWORD *)(v6 + 20);
    v11 = *((_QWORD *)this + 3);
    std::mutex::lock((std::mutex *)(v11 + 96));
    v73 = 0;
    v74 = 0;
    v72 = &v73;
    std::set<objc_object  {objcproto14VKRouteOverlay}*>::insert[abi:nn180100]<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>(&v72, *(_QWORD **)(v11 + 24), (_QWORD *)(v11 + 32));
    std::mutex::unlock((std::mutex *)(v11 + 96));
    v12 = *((_QWORD *)this + 3);
    std::mutex::lock((std::mutex *)(v12 + 96));
    v76[0] = 0;
    v76[1] = 0;
    v75 = v76;
    std::set<objc_object  {objcproto14VKRouteOverlay}*>::insert[abi:nn180100]<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>(&v75, *(_QWORD **)(v12 + 48), (_QWORD *)(v12 + 56));
    v13 = 1.0 / (double)(1 << v8);
    v67 = v13 * (double)((1 << v8) + ~v10);
    v68 = v13 * (double)v9;
    v14 = v68 + v13;
    v65 = v67 + v13;
    std::mutex::unlock((std::mutex *)(v12 + 96));
    v15 = v72;
    v66 = v14;
    if (v72 == &v73)
    {
LABEL_8:
      v16 = 0;
    }
    else
    {
      while (1)
      {
        v17 = v15[4];
        objc_msgSend(v17, "boundingMapRegion");
        v18 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "northLat");
        v20 = v19;
        objc_msgSend(v18, "westLng");
        v22 = v21;
        objc_msgSend(v18, "southLat");
        v24 = v23;
        objc_msgSend(v18, "eastLng");
        v26 = v25;

        if (v14 > v7 + v22 * 0.00277777778)
        {
          v27 = tan(v20 * 0.00872664626 + 0.785398163);
          v28 = log(v27) * 0.159154943 + 0.5;
          v7 = 0.5;
          v29 = tan(v24 * 0.00872664626 + 0.785398163);
          v30 = log(v29) * 0.159154943 + 0.5;
          v14 = v66;
          v31 = v68 >= v26 * 0.00277777778 + 0.5 || v65 <= v30;
          if (!v31 && v67 < v28)
            break;
        }

        v33 = v15[1];
        if (v33)
        {
          do
          {
            v34 = (_QWORD **)v33;
            v33 = (_QWORD *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (_QWORD **)v15[2];
            v35 = *v34 == v15;
            v15 = v34;
          }
          while (!v35);
        }
        v15 = v34;
        if (v34 == &v73)
          goto LABEL_8;
      }

      v16 = 1;
    }
    v36 = v75;
    if (v75 != v76)
    {
      while (1)
      {
        v37 = v36[4];
        objc_msgSend(v37, "boundingMapRegion");
        v38 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "northLat");
        v40 = v39;
        objc_msgSend(v38, "westLng");
        v42 = v41;
        objc_msgSend(v38, "southLat");
        v44 = v43;
        objc_msgSend(v38, "eastLng");
        v46 = v45;

        if (v14 > v7 + v42 * 0.00277777778)
        {
          v47 = tan(v40 * 0.00872664626 + 0.785398163);
          v48 = log(v47) * 0.159154943 + 0.5;
          v7 = 0.5;
          v49 = tan(v44 * 0.00872664626 + 0.785398163);
          v50 = log(v49) * 0.159154943 + 0.5;
          v14 = v66;
          v51 = v68 >= v46 * 0.00277777778 + 0.5 || v65 <= v50;
          if (!v51 && v67 < v48)
            break;
        }

        v53 = v36[1];
        if (v53)
        {
          do
          {
            v54 = (_QWORD **)v53;
            v53 = (_QWORD *)*v53;
          }
          while (v53);
        }
        else
        {
          do
          {
            v54 = (_QWORD **)v36[2];
            v35 = *v54 == v36;
            v36 = v54;
          }
          while (!v35);
        }
        v36 = v54;
        if (v54 == v76)
          goto LABEL_5;
      }

      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v76[0]);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v73);
LABEL_43:
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v55 = *(uint64_t **)(*((_QWORD *)a2 + 8) + 24);
      if (v55)
      {
        v56 = 0;
        do
        {
          v70 = v56;
          v57 = **((_DWORD **)a2 + 8);
          (*(void (**)(int32x2_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 32))(&v78, *((_QWORD *)this + 1), v64);
          v58 = *((_BYTE *)v55 + 17);
          v59 = 1 << v58;
          v60 = (*((_DWORD *)v55 + 5) % v59 + v59) % v59;
          v61 = *((_DWORD *)v55 + 6) % v59 + v59;
          LOBYTE(v72) = *((_BYTE *)v55 + 16);
          BYTE1(v72) = v58;
          HIDWORD(v72) = v60;
          LODWORD(v73) = v61 % (1 << v58);
          md::TileAdjustmentHelpers::adjustTileForSize(v57, v78.u32[1], (uint64_t)&v72, &v69);
          v56 = v69;
          v62 = v70;
          if (v69 != v70)
          {
            v63 = v69;
            do
            {
              v78 = vrev64_s32(*(int32x2_t *)(v63 + 4));
              v79 = v63[1];
              v80 = *v63;
              v81 = v64;
              gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v72, 0, 15, (int *)&v78, 5);
              gdc::LayerDataCollector::addDataKey(v4, (const gdc::LayerDataRequestKey *)&v72, (const QuadTile *)(v55 + 2));
              if (v77)
                v77 = 0;
              if (v74 != v76[0])
                free(v74);
              v63 += 24;
            }
            while (v63 != v62);
          }
          v55 = (uint64_t *)*v55;
        }
        while (v55);
        if (v56)
          operator delete(v56);
      }
      return;
    }
LABEL_5:
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v76[0]);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v73);
    if (v16)
      goto LABEL_43;
  }
}

void sub_19F251BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,uint64_t a24,uint64_t a25,_QWORD *a26)
{
  std::mutex *v26;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a26);
  std::mutex::unlock(v26);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a23);
  _Unwind_Resume(a1);
}

void md::RouteOverlayLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD **v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD **v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void (***v30)(_QWORD);
  void (***v31)(_QWORD);
  void (**v32)(_QWORD);
  BOOL v33;
  id *v34;
  _QWORD *v35;
  id v36;
  void *v37;
  _QWORD *v38;
  id v39;
  char *v40;
  id v41;
  void *v42;
  BOOL v43;
  _QWORD *v44;
  id v45;
  _QWORD *v46;
  id *v47;
  id *v48;
  __int128 *v49;
  id *v50;
  NSObject *v51;
  _BYTE *v52;
  char *v53;
  size_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  id v67;
  void *v68;
  BOOL v69;
  _QWORD *v70;
  id v71;
  _QWORD *v72;
  __int128 *v73;
  __int128 *v74;
  _QWORD *v75;
  _QWORD *v76;
  size_t v77;
  unint64_t v78;
  char *v79;
  void *v80;
  char *v81;
  id v82;
  id v83;
  void *v84;
  id v85;
  id v86;
  uint64_t v87;
  id v88;
  _QWORD *v89;
  void *v90;
  md::LabelManager *v91;
  id v92;
  void *v93;
  id v94;
  __int128 *v95;
  __int128 *p_buf;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  id *location;
  uint64_t *v101;
  _QWORD *v102[2];
  uint64_t **v103;
  _QWORD **v104;
  _QWORD **v105;
  uint64_t *v106;
  _QWORD **v107;
  uint64_t *v108;
  _QWORD v109[3];
  _QWORD *v110;
  _QWORD v111[3];
  _QWORD *v112;
  _QWORD v113[3];
  _QWORD *v114;
  __int128 buf;
  uint64_t v116;
  __int128 *v117;
  _QWORD *v118[4];

  v118[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v111[0] = &off_1E42CEBB8;
  v111[1] = a2;
  v112 = v111;
  v109[0] = &off_1E42CEC00;
  v109[1] = a2;
  v110 = v109;
  v114 = v113;
  v113[0] = &off_1E42CEC00;
  v113[1] = a2;
  _ZNSt3__110__function6__funcIZN2md17RouteOverlayLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_19RouteOverlayContextEE3__0NS_9allocatorISH_EEFvvEEclEv((uint64_t)v111);
  v6 = v110;
  if (v110 == v109)
  {
    v7 = 4;
    v6 = v109;
  }
  else
  {
    if (!v110)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v112;
  if (v112 == v111)
  {
    v9 = 4;
    v8 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a4[4]);
  a4[3] = a4 + 4;
  a4[5] = 0;
  a4[4] = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a4[7]);
  a4[6] = a4 + 7;
  a4[8] = 0;
  a4[7] = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a4[17]);
  a4[16] = a4 + 17;
  a4[18] = 0;
  a4[17] = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a4[20]);
  a4[19] = a4 + 20;
  a4[21] = 0;
  a4[20] = 0;
  *((_BYTE *)a4 + 176) = *(_BYTE *)(a1 + 192);
  v11 = (uint64_t **)(a4 + 13);
  v10 = (uint64_t *)a4[13];
  v102[0] = 0;
  v102[1] = 0;
  v101 = (uint64_t *)v102;
  v12 = (uint64_t *)*a4;
  v107 = (_QWORD **)(a4 + 1);
  v108 = v12;
  v105 = (_QWORD **)(a4 + 14);
  v106 = v10;
  v103 = &v101;
  v104 = v102;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::insert_iterator<std::set<objc_object  {objcproto14VKRouteOverlay}*>> &>((uint64_t)&buf, (uint64_t)&v108, &v107, (uint64_t)&v106, &v105, &v103);
  v13 = *(_QWORD *)(a1 + 128);
  v14 = *(uint64_t **)(v13 + 24);
  v15 = (_QWORD **)a4[3];
  v107 = (_QWORD **)(v13 + 32);
  v108 = v14;
  v105 = v102;
  v106 = v101;
  v103 = (uint64_t **)(a4 + 3);
  v104 = v15;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::insert_iterator<std::set<objc_object  {objcproto14VKRouteOverlay}*>> &>((uint64_t)&buf, (uint64_t)&v108, &v107, (uint64_t)&v106, &v105, &v103);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(uint64_t **)(v16 + 24);
  v18 = (_QWORD **)a4[6];
  v107 = v102;
  v108 = v101;
  v105 = (_QWORD **)(v16 + 32);
  v106 = v17;
  v103 = (uint64_t **)(a4 + 6);
  v104 = v18;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::insert_iterator<std::set<objc_object  {objcproto14VKRouteOverlay}*>> &>((uint64_t)&buf, (uint64_t)&v108, &v107, (uint64_t)&v106, &v105, &v103);
  location = (id *)a1;
  v19 = *(_QWORD *)(a1 + 128);
  if ((id *)(v19 + 24) != a4)
  {
    std::__tree<objc_object  {objcproto14VKRouteOverlay}*>::__assign_multi<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>((uint64_t **)a4, *(_QWORD **)(v19 + 24), (_QWORD *)(v19 + 32));
    v19 = *(_QWORD *)(a1 + 128);
  }
  v20 = *(uint64_t **)(v19 + 48);
  v21 = *v11;
  v22 = (_QWORD **)a4[16];
  v107 = (_QWORD **)(v19 + 56);
  v108 = v20;
  v105 = (_QWORD **)(a4 + 14);
  v106 = v21;
  v103 = (uint64_t **)(a4 + 16);
  v104 = v22;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::insert_iterator<std::set<objc_object  {objcproto14VKRouteOverlay}*>> &>((uint64_t)&buf, (uint64_t)&v108, &v107, (uint64_t)&v106, &v105, &v103);
  v23 = *v11;
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(uint64_t **)(v24 + 48);
  v26 = (_QWORD **)a4[19];
  v107 = (_QWORD **)(a4 + 14);
  v108 = v23;
  v105 = (_QWORD **)(v24 + 56);
  v106 = v25;
  v103 = (uint64_t **)(a4 + 19);
  v104 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long> &,std::insert_iterator<std::set<objc_object  {objcproto14VKRouteOverlay}*>> &>((uint64_t)&buf, (uint64_t)&v108, &v107, (uint64_t)&v106, &v105, &v103);
  v27 = *(_QWORD *)(a1 + 128);
  if (v11 != (uint64_t **)(v27 + 48))
    std::__tree<objc_object  {objcproto14VKRouteOverlay}*>::__assign_multi<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>((uint64_t **)a4 + 13, *(_QWORD **)(v27 + 48), (_QWORD *)(v27 + 56));
  v29 = a4[9];
  v28 = a4[10];
  if (v28 != v29)
  {
    v30 = (void (***)(_QWORD))(v28 - 3);
    v31 = (void (***)(_QWORD))(v28 - 3);
    do
    {
      v32 = *v31;
      v31 -= 3;
      (*v32)(v30);
      v33 = v30 == v29;
      v30 = v31;
    }
    while (!v33);
  }
  a4[10] = v29;
  *((_QWORD *)&buf + 1) = 0;
  v116 = 0;
  *(_QWORD *)&buf = (char *)&buf + 8;
  std::set<objc_object  {objcproto14VKRouteOverlay}*>::insert[abi:nn180100]<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>(&buf, *a4, a4 + 1);
  v118[0] = 0;
  v118[1] = 0;
  v117 = (__int128 *)v118;
  std::set<objc_object  {objcproto14VKRouteOverlay}*>::insert[abi:nn180100]<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>(&v117, *v11, a4 + 14);
  v34 = (id *)buf;
  if ((__int128 *)buf != (__int128 *)((char *)&buf + 8))
  {
    v35 = 0;
    while (1)
    {
      v36 = v34[4];
      v37 = v36;
      v38 = a4[10];
      if (v38 >= a4[11])
      {
        v40 = std::vector<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<objc_object  {objcproto14VKRouteOverlay}*&,geo::memory_management_mode const&>(a4 + 9, v36);
      }
      else
      {
        v39 = v36;
        *v38 = &off_1E42B5510;
        v38[1] = v39;
        v40 = (char *)(v38 + 3);
      }
      a4[10] = v40;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v45 = v37;
        if (objc_msgSend(v45, "selected"))
        {
          v44 = v45;
LABEL_31:
          v46 = v44;

LABEL_33:
          v35 = v46;
          goto LABEL_34;
        }
LABEL_32:
        v46 = v35;
        goto LABEL_33;
      }
LABEL_34:

      v47 = (id *)v34[1];
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = (id *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (id *)v34[2];
          v33 = *v48 == v34;
          v34 = v48;
        }
        while (!v33);
      }
      v34 = v48;
      if (v48 == (id *)((char *)&buf + 8))
        goto LABEL_41;
    }
    v41 = v37;
    objc_msgSend(v41, "selectedPolyline");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = v42 == 0;

    if (!v43)
    {
      objc_msgSend(v41, "selectedPolyline");
      v44 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  v35 = 0;
LABEL_41:
  v49 = v117;
  if (v117 != (__int128 *)v118)
  {
    while (1)
    {
      v62 = *((id *)v49 + 4);
      v63 = v62;
      v64 = a4[10];
      if (v64 >= a4[11])
      {
        v66 = std::vector<geo::_retain_ptr<objc_object  {objcproto14VKRouteOverlay}* {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::__emplace_back_slow_path<objc_object  {objcproto14VKRouteOverlay}*&,geo::memory_management_mode const&>(a4 + 9, v62);
      }
      else
      {
        v65 = v62;
        *v64 = &off_1E42B5510;
        v64[1] = v65;
        v66 = (char *)(v64 + 3);
      }
      a4[10] = v66;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v71 = v63;
        if (objc_msgSend(v71, "selected"))
        {
          v70 = v71;
LABEL_70:
          v72 = v70;

LABEL_72:
          v35 = v72;
          goto LABEL_73;
        }
LABEL_71:
        v72 = v35;
        goto LABEL_72;
      }
LABEL_73:

      v73 = (__int128 *)*((_QWORD *)v49 + 1);
      if (v73)
      {
        do
        {
          v74 = v73;
          v73 = *(__int128 **)v73;
        }
        while (v73);
      }
      else
      {
        do
        {
          v74 = (__int128 *)*((_QWORD *)v49 + 2);
          v33 = *(_QWORD *)v74 == (_QWORD)v49;
          v49 = v74;
        }
        while (!v33);
      }
      v49 = v74;
      if (v74 == (__int128 *)v118)
        goto LABEL_42;
    }
    v67 = v63;
    objc_msgSend(v67, "selectedPolyline");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = v68 == 0;

    if (!v69)
    {
      objc_msgSend(v67, "selectedPolyline");
      v70 = (_QWORD *)objc_claimAutoreleasedReturnValue();
      goto LABEL_70;
    }
    goto LABEL_71;
  }
LABEL_42:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v118[0]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)&buf + 1));
  v50 = a4 + 12;
  if (a4[12] != v35)
  {
    if (GEOGetVectorKitRouteOverlayLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteOverlayLogicLog(void)::onceToken, &__block_literal_global_138);
    v51 = GEOGetVectorKitRouteOverlayLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitRouteOverlayLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v35;
      _os_log_impl(&dword_19F029000, v51, OS_LOG_TYPE_INFO, "Updating selected polyline:%@", (uint8_t *)&buf, 0xCu);
    }
  }
  objc_storeStrong(a4 + 12, v35);
  objc_storeStrong(a4 + 23, location[22]);
  objc_storeStrong(a4 + 24, location[23]);
  if (a4 != location)
  {
    v53 = (char *)location[25];
    v52 = location[26];
    v54 = v52 - v53;
    v55 = (v52 - v53) >> 3;
    v56 = (uint64_t)a4[27];
    v57 = a4[25];
    if (v55 > (v56 - (uint64_t)v57) >> 3)
    {
      if (v57)
      {
        a4[26] = v57;
        operator delete(v57);
        v56 = 0;
        a4[25] = 0;
        a4[26] = 0;
        a4[27] = 0;
      }
      if ((v54 & 0x8000000000000000) != 0)
        goto LABEL_106;
      v58 = v56 >> 2;
      if (v56 >> 2 <= v55)
        v58 = (v52 - v53) >> 3;
      v59 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v58;
      if (v59 >> 61)
LABEL_106:
        abort();
      v60 = (char *)operator new(8 * v59);
      v57 = v60;
      a4[26] = v60;
      v61 = a4 + 26;
      *(v61 - 1) = v60;
      v61[1] = &v60[8 * v59];
      if (v52 != v53)
        memcpy(v60, v53, v52 - v53);
      goto LABEL_87;
    }
    v76 = a4[26];
    v61 = a4 + 26;
    v75 = v76;
    v77 = (char *)v76 - (char *)v57;
    v78 = v76 - v57;
    if (v78 >= v55)
    {
      if (v52 == v53)
      {
LABEL_87:
        *v61 = (char *)v57 + v54;
        goto LABEL_88;
      }
      v80 = v57;
      v81 = (char *)location[25];
    }
    else
    {
      v79 = &v53[8 * v78];
      if (v75 != v57)
      {
        memmove(v57, location[25], v77);
        v57 = (_QWORD *)*v61;
      }
      v54 = v52 - v79;
      if (v52 == v79)
        goto LABEL_87;
      v80 = v57;
      v81 = v79;
    }
    memmove(v80, v81, v54);
    goto LABEL_87;
  }
LABEL_88:

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v102[0]);
  v82 = *v50;
  v83 = *v50;
  v84 = v83;
  if (location[17] != v83
    || (v85 = location[18],
        objc_msgSend(v83, "routeRibbon"),
        v86 = (id)objc_claimAutoreleasedReturnValue(),
        LOBYTE(v85) = v85 == v86,
        v86,
        (v85 & 1) == 0))
  {
    objc_storeStrong(location + 17, v82);
    objc_msgSend(v84, "routeRibbon");
    v87 = objc_claimAutoreleasedReturnValue();
    v88 = location[18];
    location[18] = (id)v87;

    v89 = location[15];
    objc_msgSend(v84, "routeRibbon");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = *(md::LabelManager **)(v89[1] + 24);
    v92 = v90;
    v93 = v92;
    if (v92)
      v94 = v92;
    v117 = 0;
    v95 = (__int128 *)operator new(0x28uLL);
    *(_QWORD *)v95 = &off_1E42C9518;
    *((_QWORD *)v95 + 1) = v91;
    *((_QWORD *)v95 + 2) = &off_1E42B4A30;
    *((_QWORD *)v95 + 3) = v93;
    v117 = v95;
    md::LabelManager::queueCommand(v91, 26, 0, &buf);
    p_buf = v117;
    if (v117 == &buf)
    {
      v97 = 4;
      p_buf = &buf;
    }
    else
    {
      if (!v117)
      {
LABEL_97:

        goto LABEL_98;
      }
      v97 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)p_buf + 8 * v97))();
    goto LABEL_97;
  }
LABEL_98:

  if (!v114)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *))(*v114 + 48))(v114);
  v98 = v114;
  if (v114 == v113)
  {
    v99 = 4;
    v98 = v113;
  }
  else
  {
    if (!v114)
      return;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
}

void sub_19F252598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  v32 = *(_QWORD **)(v30 - 120);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 144);
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&a27);
  _Unwind_Resume(a1);
}

void std::__tree<objc_object  {objcproto14VKRouteOverlay}*>::__assign_multi<std::__tree_const_iterator<objc_object  {objcproto14VKRouteOverlay}*,std::__tree_node<objc_object  {objcproto14VKRouteOverlay}*,void *> *,long>>(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;

  v4 = a2;
  if (a1[2])
  {
    v6 = (uint64_t **)*a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v34 = (uint64_t *)v10[1];
            if (!v34)
              break;
            do
            {
              v10 = v34;
              v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        do
        {
          v9 = v10;
          v14 = v13[4];
          v12[4] = v14;
          v15 = *v8;
          v16 = a1 + 1;
          v17 = a1 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v16 = (uint64_t **)v15;
                if (v14 >= v15[4])
                  break;
                v15 = (uint64_t *)*v15;
                v17 = v16;
                if (!*v16)
                  goto LABEL_20;
              }
              v15 = (uint64_t *)v15[1];
            }
            while (v15);
            v17 = v16 + 1;
          }
LABEL_20:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v18 = (uint64_t *)**a1;
          if (v18)
          {
            *a1 = v18;
            v12 = *v17;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v21 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v22 = (uint64_t *)v10[1];
                  if (!v22)
                    break;
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v21;
                    v21 = (uint64_t *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v19 = (_QWORD *)v13[1];
          if (v19)
          {
            do
            {
              v4 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v20 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v20);
          }
          if (!v9)
            break;
          v12 = v9;
          v13 = v4;
        }
        while (v4 != a3);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    v24 = a1 + 1;
    do
    {
      v25 = (uint64_t *)operator new(0x28uLL);
      v26 = v25;
      v27 = v4[4];
      v25[4] = v27;
      v28 = *v24;
      v29 = a1 + 1;
      v30 = a1 + 1;
      if (*v24)
      {
        do
        {
          while (1)
          {
            v29 = (uint64_t **)v28;
            if (v27 >= v28[4])
              break;
            v28 = (uint64_t *)*v28;
            v30 = v29;
            if (!*v29)
              goto LABEL_56;
          }
          v28 = (uint64_t *)v28[1];
        }
        while (v28);
        v30 = v29 + 1;
      }
LABEL_56:
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v29;
      *v30 = v25;
      v31 = (uint64_t *)**a1;
      if (v31)
      {
        *a1 = v31;
        v26 = *v30;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v32 = (_QWORD *)v4[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (_QWORD *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (_QWORD *)v4[2];
          v20 = *v33 == (_QWORD)v4;
          v4 = v33;
        }
        while (!v20);
      }
      v4 = v33;
    }
    while (v33 != a3);
  }
}

void sub_19F252B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)RouteRenderLayerObserverProxy;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(*a1);
    std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(a1[1]);

    operator delete(a1);
  }
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<unsigned int>(uint64_t a1, unsigned int a2, BOOL *a3, float a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  unsigned __int16 v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  unsigned int v45;
  _BYTE *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int *v50;
  unsigned __int16 v51;
  unsigned __int8 *v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unint64_t v73;
  unsigned int v74;
  _BYTE *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned int v78;
  int *v79;
  unsigned __int8 *v80;
  unsigned __int8 v82;
  unsigned __int8 v83;

  v5 = (int)a4;
  if ((int)a4 >= 0x17)
    v6 = 23;
  else
    v6 = v5;
  if (v5 >= 0x16)
    v7 = 22;
  else
    v7 = v5;
  v8 = a1 + 16 * a2;
  v11 = *(_QWORD *)(v8 + 16);
  v10 = v8 + 16;
  v9 = v11;
  if (!v11)
  {
    if (a3)
      *a3 = 0;
    return *(unsigned int *)gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(3u);
  }
  v13 = v7 + 1;
  v14 = a1 + 16 * a2;
  v15 = *(unsigned __int16 *)(v14 + 56);
  if (!*(_WORD *)(v14 + 56))
  {
    v83 = 1;
    v82 = 1;
LABEL_128:
    v18 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v9 + 72), 3u, v6, &v83);
LABEL_129:
    v17 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(*(_QWORD *)v10 + 72), 3u, v13, &v82);
    if (a3)
LABEL_130:
      *a3 = (v83 | v82) != 0;
    goto LABEL_131;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *(uint64_t **)(v14 + 48);
  v20 = &v19[v15];
  while (2)
  {
    LOBYTE(v21) = 0;
    while (1)
    {
      v23 = *v19;
      if ((v21 & 1) != 0)
      {
        v21 = 1;
        if ((v16 & 1) != 0)
          goto LABEL_91;
        goto LABEL_68;
      }
      v24 = *(uint64_t **)(v23 + 72);
      if (!v24
        || (v25 = *((unsigned __int8 *)v24 + v6 + 16),
            v26 = *v24,
            v27 = v26 + 80 * v25,
            v28 = *(unsigned __int16 *)(v27 + 10),
            !*(_WORD *)(v27 + 10)))
      {
LABEL_31:
        v21 = 0;
        if ((v16 & 1) != 0)
          goto LABEL_91;
        goto LABEL_68;
      }
      v29 = *(unsigned __int8 **)v27;
      if (!*(_BYTE *)(v27 + 15))
      {
        v38 = *(unsigned __int16 *)(v27 + 10);
        v30 = *(unsigned __int8 **)v27;
        while (*v30 != 3)
        {
          ++v30;
          if (!--v38)
          {
            LOWORD(v30) = (_WORD)v29 + v28;
            break;
          }
        }
LABEL_37:
        if ((_DWORD)v28 == (unsigned __int16)((_WORD)v30 - (_WORD)v29))
          goto LABEL_31;
        goto LABEL_38;
      }
      v30 = *(unsigned __int8 **)v27;
      v31 = v28;
      if (v28 >= 0x1E)
      {
        do
        {
          v34 = v31 >> 1;
          v35 = &v30[v31 >> 1];
          v37 = *v35;
          v36 = v35 + 1;
          v31 += ~(v31 >> 1);
          if (v37 < 3)
            v30 = v36;
          else
            v31 = v34;
        }
        while (v31);
        if (v30 == &v29[v28] || *v30 != 3)
          goto LABEL_31;
        goto LABEL_37;
      }
      v32 = 0;
      while (1)
      {
        v33 = v29[v32];
        if (v33 >= 3)
          break;
        if (v28 == ++v32)
          goto LABEL_31;
      }
      if (v33 == 3)
        v51 = v32;
      else
        v51 = v28;
      if ((_DWORD)v28 == v51)
        goto LABEL_31;
LABEL_38:
      v39 = v26 + 80 * v25;
      v40 = (unsigned __int8 *)*(unsigned __int16 *)(v39 + 42);
      if (!*(_WORD *)(v39 + 42))
        goto LABEL_52;
      v41 = v26 + 80 * v25;
      v42 = *(_QWORD *)(v41 + 32);
      if (!*(_BYTE *)(v41 + 47))
      {
        v52 = v40;
        v43 = *(unsigned __int8 **)(v41 + 32);
        while (*v43 != 3)
        {
          ++v43;
          if (!--v52)
          {
            LOWORD(v43) = v42 + (_WORD)v40;
            break;
          }
        }
LABEL_62:
        LOWORD(v43) = (_WORD)v43 - v42;
LABEL_65:
        v50 = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if ((_DWORD)v40 != (unsigned __int16)v43)
          v50 = (int *)(v42 + *(unsigned __int16 *)(v26 + 80 * v25 + 40) + 4 * (unsigned __int16)v43);
        goto LABEL_67;
      }
      v43 = *(unsigned __int8 **)(v41 + 32);
      v44 = (unint64_t)v40;
      if (v40 < 0x1E)
      {
        v43 = 0;
        while (1)
        {
          v45 = v43[v42];
          if (v45 >= 3)
            break;
          if (v40 == ++v43)
            goto LABEL_52;
        }
        if (v45 != 3)
          LOWORD(v43) = (_WORD)v40;
        goto LABEL_65;
      }
      do
      {
        v46 = (_BYTE *)(v44 >> 1);
        v47 = &v43[v44 >> 1];
        v49 = *v47;
        v48 = v47 + 1;
        v44 += ~(v44 >> 1);
        if (v49 < 3)
          v43 = v48;
        else
          v44 = (unint64_t)v46;
      }
      while (v44);
      if (v43 == &v40[v42])
      {
LABEL_52:
        v50 = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        goto LABEL_67;
      }
      v50 = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      if (*v43 == 3)
        goto LABEL_62;
LABEL_67:
      v18 = *v50;
      v21 = 1;
      if ((v16 & 1) != 0)
      {
LABEL_91:
        if (v21)
          goto LABEL_134;
        goto LABEL_119;
      }
LABEL_68:
      v53 = *(uint64_t **)(v23 + 72);
      if (!v53)
        goto LABEL_13;
      v54 = *((unsigned __int8 *)v53 + v13 + 16);
      v55 = *v53;
      v56 = v55 + 80 * v54;
      v57 = *(unsigned __int16 *)(v56 + 10);
      if (!*(_WORD *)(v56 + 10))
      {
        v22 = 0;
        goto LABEL_12;
      }
      v58 = *(unsigned __int8 **)v56;
      if (!*(_BYTE *)(v56 + 15))
      {
        v67 = *(unsigned __int16 *)(v56 + 10);
        v59 = *(unsigned __int8 **)v56;
        while (*v59 != 3)
        {
          ++v59;
          if (!--v67)
          {
            LOWORD(v59) = (_WORD)v58 + v57;
            break;
          }
        }
LABEL_87:
        v22 = (_WORD)v59 - (_WORD)v58;
        goto LABEL_12;
      }
      v59 = *(unsigned __int8 **)v56;
      v60 = v57;
      if (v57 >= 0x1E)
      {
        do
        {
          v63 = v60 >> 1;
          v64 = &v59[v60 >> 1];
          v66 = *v64;
          v65 = v64 + 1;
          v60 += ~(v60 >> 1);
          if (v66 < 3)
            v59 = v65;
          else
            v60 = v63;
        }
        while (v60);
        if (v59 == &v58[v57] || *v59 != 3)
          goto LABEL_13;
        goto LABEL_87;
      }
      v61 = 0;
      while (1)
      {
        v62 = v58[v61];
        if (v62 >= 3)
          break;
        if (v57 == ++v61)
          goto LABEL_13;
      }
      v22 = v62 == 3 ? v61 : v57;
LABEL_12:
      if ((_DWORD)v57 != v22)
        break;
LABEL_13:
      v16 = 0;
      if (++v19 == v20)
      {
        v83 = 1;
        v82 = 1;
        if ((v21 & 1) == 0)
          goto LABEL_128;
        goto LABEL_129;
      }
    }
    v68 = v55 + 80 * v54;
    v69 = (unsigned __int8 *)*(unsigned __int16 *)(v68 + 42);
    if (*(_WORD *)(v68 + 42))
    {
      v70 = v55 + 80 * v54;
      v71 = *(_QWORD *)(v70 + 32);
      if (!*(_BYTE *)(v70 + 47))
      {
        v80 = v69;
        v72 = *(unsigned __int8 **)(v70 + 32);
        while (*v72 != 3)
        {
          ++v72;
          if (!--v80)
          {
            LOWORD(v72) = v71 + (_WORD)v69;
            goto LABEL_113;
          }
        }
        goto LABEL_113;
      }
      v72 = *(unsigned __int8 **)(v70 + 32);
      v73 = (unint64_t)v69;
      if (v69 < 0x1E)
      {
        v72 = 0;
        while (1)
        {
          v74 = v72[v71];
          if (v74 >= 3)
            break;
          if (v69 == ++v72)
            goto LABEL_107;
        }
        if (v74 != 3)
          LOWORD(v72) = (_WORD)v69;
LABEL_116:
        v79 = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if ((_DWORD)v69 != (unsigned __int16)v72)
          v79 = (int *)(v71 + *(unsigned __int16 *)(v55 + 80 * v54 + 40) + 4 * (unsigned __int16)v72);
LABEL_118:
        v17 = *v79;
        if ((v21 & 1) != 0)
          goto LABEL_134;
        goto LABEL_119;
      }
      do
      {
        v75 = (_BYTE *)(v73 >> 1);
        v76 = &v72[v73 >> 1];
        v78 = *v76;
        v77 = v76 + 1;
        v73 += ~(v73 >> 1);
        if (v78 < 3)
          v72 = v77;
        else
          v73 = (unint64_t)v75;
      }
      while (v73);
      if (v72 != &v69[v71])
      {
        v79 = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        if (*v72 != 3)
          goto LABEL_118;
LABEL_113:
        LOWORD(v72) = (_WORD)v72 - v71;
        goto LABEL_116;
      }
    }
LABEL_107:
    v17 = gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    if ((v21 & 1) != 0)
    {
LABEL_134:
      v83 = 1;
      v82 = 1;
      if (a3)
        goto LABEL_130;
      goto LABEL_131;
    }
LABEL_119:
    ++v19;
    v16 = 1;
    if (v19 != v20)
      continue;
    break;
  }
  v83 = 1;
  v82 = 1;
  v18 = *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v9 + 72), 3u, v6, &v83);
  if (a3)
    goto LABEL_130;
LABEL_131:
  if ((float)(a4 - (float)v6) >= 1.0)
    return v17;
  else
    return v18;
}

int *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(int *result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;

  if (!result)
    goto LABEL_25;
  v4 = a3 >= 0x17 ? 23 : a3;
  v5 = *((unsigned __int8 *)result + v4 + 16);
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)result + 80 * v5;
  v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10))
    goto LABEL_25;
  v9 = *(unsigned __int8 **)v7;
  if (!*(_BYTE *)(v7 + 15))
  {
    v12 = *(unsigned __int16 *)(v7 + 10);
    v13 = *(unsigned __int8 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      if (!--v12)
      {
        LOWORD(v13) = (_WORD)v9 + v8;
        break;
      }
    }
LABEL_24:
    if ((_DWORD)v8 != (unsigned __int16)((_WORD)v13 - (_WORD)v9))
      goto LABEL_32;
LABEL_25:
    if (a4)
      *a4 = 0;
    return (int *)gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(a2);
  }
  if (v8 >= 0x1E)
  {
    v13 = *(unsigned __int8 **)v7;
    v14 = v8;
    do
    {
      v15 = v14 >> 1;
      v16 = &v13[v14 >> 1];
      v18 = *v16;
      v17 = v16 + 1;
      v14 += ~(v14 >> 1);
      if (v18 < a2)
        v13 = v17;
      else
        v14 = v15;
    }
    while (v14);
    if (v13 == &v9[v8] || *v13 != a2)
      goto LABEL_25;
    goto LABEL_24;
  }
  v10 = 0;
  while (1)
  {
    v11 = v9[v10];
    if (v11 >= a2)
      break;
    if (v8 == ++v10)
      goto LABEL_25;
  }
  if (v11 == a2)
    v19 = v10;
  else
    v19 = v8;
  if ((_DWORD)v8 == v19)
    goto LABEL_25;
LABEL_32:
  v20 = v6 + 80 * v5;
  v21 = (unsigned __int8 *)*(unsigned __int16 *)(v20 + 42);
  if (!*(_WORD *)(v20 + 42))
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v22 = v6 + 80 * v5;
  v23 = *(_QWORD *)(v22 + 32);
  if (*(_BYTE *)(v22 + 47))
  {
    if (v21 < 0x1E)
    {
      v24 = 0;
      result = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        v25 = v24[v23];
        if (v25 >= a2)
          break;
        if (v21 == ++v24)
          return result;
      }
      if (v25 != a2)
        LOWORD(v24) = (_WORD)v21;
      if ((_DWORD)v21 != (unsigned __int16)v24)
        goto LABEL_55;
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
    v24 = *(unsigned __int8 **)(v22 + 32);
    v27 = v21;
    do
    {
      v28 = (unsigned __int8 *)((unint64_t)v27 >> 1);
      v29 = &v24[(unint64_t)v27 >> 1];
      v31 = *v29;
      v30 = v29 + 1;
      v27 += ~((unint64_t)v27 >> 1);
      if (v31 < a2)
        v24 = v30;
      else
        v27 = v28;
    }
    while (v27);
    if (v24 == &v21[v23] || *v24 != a2)
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  else
  {
    v26 = v21;
    v24 = *(unsigned __int8 **)(v22 + 32);
    while (*v24 != a2)
    {
      ++v24;
      if (!--v26)
      {
        LOWORD(v24) = v23 + (_WORD)v21;
        break;
      }
    }
  }
  LOWORD(v24) = (_WORD)v24 - v23;
  if ((_DWORD)v21 == (unsigned __int16)v24)
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_55:
  if (v21 > (unsigned __int16)v24)
    return (int *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 40) + 4 * (unsigned __int16)v24);
  return result;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addVisibility(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 112);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xBu, 267);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 112);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t *gms::ZoomablePropertyStore<BOOL>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  char v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t **v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;

  v4 = result;
  v5 = *a2;
  v6 = *a3;
  v7 = (_WORD)v6 << 8;
  v8 = *a4;
  if (result[7])
  {
    v9 = (uint64_t *)result[5];
    v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      v16 = (_QWORD *)result[5];
    }
    else
    {
      v11 = 0;
      v12 = (uint64_t *)result[5];
      do
      {
        v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            v14 = (uint64_t **)v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (uint64_t **)v12[2];
            v15 = *v14 == v12;
            v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      v16 = (_QWORD *)result[5];
      do
      {
        v17 = v11 >> 1;
        v18 = v16;
        if (v11 != 1)
        {
          v20 = v11 >> 1;
          v21 = v16;
          do
          {
            v23 = (_QWORD *)v21[1];
            if (v23)
            {
              do
              {
                v18 = v23;
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v21[2];
                v15 = *v18 == (_QWORD)v21;
                v21 = v18;
              }
              while (!v15);
            }
            v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 26) < v6)
        {
          v19 = (_QWORD *)v18[1];
          if (v19)
          {
            do
            {
              v16 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v18[2];
              v15 = *v16 == (_QWORD)v18;
              v18 = v16;
            }
            while (!v15);
          }
          v17 = v11 + ~v17;
        }
        v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 25) >= v6)
    {
      if (v16 == v9)
        goto LABEL_46;
      v27 = *v16;
      if (*v16)
      {
        do
        {
          v28 = v27;
          v27 = *(_QWORD *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = v16[2];
          v15 = *(_QWORD *)v28 == (_QWORD)v16;
          v16 = (_QWORD *)v28;
        }
        while (v15);
      }
      if (v5 >= *(unsigned __int8 *)(v28 + 26))
      {
LABEL_46:
        v29 = *v10;
        v25 = (uint64_t **)(result + 6);
        if (!*v10)
          goto LABEL_53;
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v29;
            v30 = *((unsigned __int8 *)v29 + 26);
            if (v6 >= v30)
              break;
            v29 = *v25;
            v10 = v25;
            if (!*v25)
              goto LABEL_53;
          }
          if (v30 >= v6)
            break;
          v29 = v25[1];
          if (!v29)
            goto LABEL_52;
        }
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(result + 6);
    v24 = result[6];
    if (!v24)
    {
      v25 = (uint64_t **)(result + 6);
LABEL_53:
      v31 = (char *)operator new(0x20uLL);
      *(_WORD *)(v31 + 25) = v7 | v5;
      v31[27] = v8;
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = v25;
      *v10 = (uint64_t *)v31;
      v32 = *(_QWORD *)v4[5];
      if (v32)
      {
        v4[5] = v32;
        v33 = *v10;
      }
      else
      {
        v33 = (uint64_t *)v31;
      }
      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[6], v33);
      ++v4[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        v25 = (uint64_t **)v24;
        v26 = *(unsigned __int8 *)(v24 + 26);
        if (v6 >= v26)
          break;
        v24 = (uint64_t)*v25;
        v10 = v25;
        if (!*v25)
          goto LABEL_53;
      }
      if (v26 >= v6)
        break;
      v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addCastShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 168);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x10u, 272);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 168);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addHideOnCollapse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 216);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x18u, 280);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 216);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addCastShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 160);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x10u, 272);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 160);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::NonZoomablePropertyStore<BOOL>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, char *a4)
{
  char v4;

  v4 = *a4;
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_BYTE *)(result + 9) = v4;
  return result;
}

void sub_19F255C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, void *a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  void *v56;
  void *v57;
  uint64_t v58;

  md::StyleSettingsParser::~StyleSettingsParser((md::StyleSettingsParser *)(v58 - 224));

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v58 - 256));
  _Unwind_Resume(a1);
}

void sub_19F256948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v15;
  uint64_t v16;

  v15 = a14;
  if (a14 == &a11)
  {
    v16 = 4;
    v15 = &a11;
  }
  else
  {
    if (!a14)
      _Unwind_Resume(exception_object);
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  _Unwind_Resume(exception_object);
}

_QWORD *__assign_helper_atomic_property__7(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v9 = 0;
  }
  if (v8 != a1)
  {
    v4 = v9;
    v5 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

_QWORD *__assign_helper_atomic_property_(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v9 = 0;
  }
  if (v8 != a1)
  {
    v4 = v9;
    v5 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_19F256ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  void *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == &a12)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__5(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v9 = 0;
  }
  if (v8 != a1)
  {
    v4 = v9;
    v5 = (_QWORD *)a1[3];
    if (v9 == v8)
    {
      if (v5 == a1)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, v10);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[3] + 24))(a1[3], v8);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        v9 = v8;
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, a1);
        (*(void (**)(_QWORD *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v8[0] + 24))(v8, a1);
        (*(void (**)(_QWORD *))(*v9 + 32))(v9);
        v9 = (_QWORD *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 32))(a1[3]);
      a1[3] = v9;
      v9 = v8;
    }
    else
    {
      v9 = (_QWORD *)a1[3];
      a1[3] = v4;
    }
  }
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_19F2571E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>>::emplace<md::MapEngineSetting,long long>(unsigned __int8 **a1, unsigned __int8 a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;

  v6 = *a1;
  v7 = a1[1];
  v8 = *a1;
  if (*a1 != v7)
  {
    v8 = *a1;
    while (*v8 != a2)
    {
      v8 += 16;
      if (v8 == v7)
        goto LABEL_7;
    }
  }
  if (v8 == v7)
  {
LABEL_7:
    v9 = a1[2];
    if (v7 >= v9)
    {
      v11 = (v7 - v6) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        abort();
      v13 = v9 - v6;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v15 = (char *)operator new(16 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[16 * v11];
      *v16 = a2;
      *((_QWORD *)v16 + 1) = a3;
      v10 = (unsigned __int8 *)(v16 + 16);
      if (v6 != v7)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
          v16 -= 16;
          v7 -= 16;
        }
        while (v7 != v6);
        v6 = *a1;
      }
      *a1 = (unsigned __int8 *)v16;
      a1[1] = v10;
      a1[2] = (unsigned __int8 *)&v15[16 * v14];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v7 = a2;
      *((_QWORD *)v7 + 1) = a3;
      v10 = v7 + 16;
    }
    a1[1] = v10;
  }
}

void geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>>::emplace<md::MapEngineSetting&,int>(unsigned __int8 **a1, unsigned __int8 a2, int a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;

  v5 = *a1;
  v6 = a1[1];
  v7 = *a1;
  if (*a1 != v6)
  {
    v7 = *a1;
    while (*v7 != a2)
    {
      v7 += 16;
      if (v7 == v6)
        goto LABEL_7;
    }
  }
  if (v7 == v6)
  {
LABEL_7:
    v8 = a3;
    v9 = a1[2];
    if (v6 >= v9)
    {
      v11 = (v6 - v5) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        abort();
      v13 = v9 - v5;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v15 = (char *)operator new(16 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[16 * v11];
      *v16 = a2;
      *((_QWORD *)v16 + 1) = v8;
      v10 = (unsigned __int8 *)(v16 + 16);
      if (v5 != v6)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v6 - 1);
          v16 -= 16;
          v6 -= 16;
        }
        while (v6 != v5);
        v5 = *a1;
      }
      *a1 = (unsigned __int8 *)v16;
      a1[1] = v10;
      a1[2] = (unsigned __int8 *)&v15[16 * v14];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v6 = a2;
      *((_QWORD *)v6 + 1) = a3;
      v10 = v6 + 16;
    }
    a1[1] = v10;
  }
}

void md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (_QWORD *)operator new();
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(__p, a1);
  v5 = operator new();
  *(_OWORD *)v5 = *(_OWORD *)__p;
  v6 = v12;
  v7 = v13;
  __p[1] = 0;
  v12 = 0;
  __p[0] = 0;
  *(_QWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 24) = v7;
  v8 = v14;
  v9 = v15;
  *(_QWORD *)(v5 + 32) = v14;
  v10 = v5 + 32;
  *(_QWORD *)(v5 + 40) = v9;
  if (v9)
  {
    v8[2] = v10;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(v5 + 24) = v10;
  }
  *(_QWORD *)(v5 + 48) = v16;
  v4[2] = "md::SettingsContext]";
  v4[3] = 19;
  v4[4] = v5;
  *v4 = &off_1E42B0D70;
  v4[1] = 0xC97B9E962ADF4AD4;
  *a2 = v4;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19F2575E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::SettingsContext::~SettingsContext((md::SettingsContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

_QWORD *md::SettingsLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unsigned int v34;
  _BYTE *v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v41[0] = &off_1E42CBA38;
  v41[1] = a2;
  v42 = v41;
  v39[0] = &off_1E42CBA80;
  v39[1] = a2;
  v40 = v39;
  v44 = v43;
  v43[0] = &off_1E42CBA80;
  v43[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__0NS_9allocatorISH_EEFvvEEclEv((uint64_t)v41);
  v6 = v40;
  if (v40 == v39)
  {
    v7 = 4;
    v6 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v42;
  if (v42 == v41)
  {
    v9 = 4;
    v8 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = *(uint64_t **)(a1 + 120);
  v11 = *v10;
  v12 = v10[1];
  if (v11 != v12)
  {
    while (*(_BYTE *)v11 != 23)
    {
      v11 += 16;
      if (v11 == v12)
        goto LABEL_17;
    }
  }
  if (v11 == v12)
LABEL_17:
    v13 = 0;
  else
    v13 = *(_QWORD *)(v11 + 8) != 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "showTrafficCasing");

  v16 = v15 & v13;
  if (v13 != (_DWORD)v16)
  {
    v17 = *(_QWORD *)(a1 + 120);
    v38 = 23;
    md::MapEngineSettings::set(v17, &v38, (_QWORD *)v16);
  }
  v18 = *(_QWORD *)(a1 + 120);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a4 + 32));
  *(_QWORD *)(a4 + 24) = a4 + 32;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v19 = *(unsigned __int8 **)v18;
  v20 = *(unsigned __int8 **)(v18 + 8);
  if (*(unsigned __int8 **)v18 != v20)
  {
    do
    {
      geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(a4, v19);
      v19 += 16;
    }
    while (v19 != v20);
  }
  if (*(_QWORD *)(v18 + 40))
  {
    v21 = *(_QWORD **)(v18 + 24);
    v22 = (_QWORD *)(v18 + 32);
    if (v21 == (_QWORD *)(v18 + 32))
    {
LABEL_24:
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v18 + 32));
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 24) = v22;
      goto LABEL_25;
    }
    while (1)
    {
      v25 = *(_QWORD *)(a4 + 32);
      v26 = a4 + 32;
      if (*(_QWORD *)(a4 + 24) == a4 + 32)
        goto LABEL_36;
      v27 = *(_QWORD *)(a4 + 32);
      v28 = a4 + 32;
      if (v25)
      {
        do
        {
          v26 = v27;
          v27 = *(_QWORD *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          v26 = *(_QWORD *)(v28 + 16);
          v29 = *(_QWORD *)v26 == v28;
          v28 = v26;
        }
        while (v29);
      }
      v30 = *((unsigned __int8 *)v21 + 25);
      if (*(unsigned __int8 *)(v26 + 25) < v30)
      {
LABEL_36:
        if (v25)
          v31 = (_QWORD *)v26;
        else
          v31 = (_QWORD *)(a4 + 32);
        if (v25)
          v32 = (_QWORD *)(v26 + 8);
        else
          v32 = (_QWORD *)(a4 + 32);
      }
      else
      {
        v31 = (_QWORD *)(a4 + 32);
        v32 = (_QWORD *)(a4 + 32);
        if (v25)
        {
          v32 = (_QWORD *)(a4 + 32);
          while (1)
          {
            while (1)
            {
              v31 = (_QWORD *)v25;
              v34 = *(unsigned __int8 *)(v25 + 25);
              if (v30 >= v34)
                break;
              v25 = *v31;
              v32 = v31;
              if (!*v31)
                goto LABEL_51;
            }
            if (v34 >= v30)
              break;
            v32 = v31 + 1;
            v25 = v31[1];
            if (!v25)
              goto LABEL_51;
          }
        }
      }
      if (*v32)
      {
        v33 = (_QWORD *)v21[1];
        if (v33)
          goto LABEL_54;
      }
      else
      {
LABEL_51:
        v35 = operator new(0x20uLL);
        v35[25] = *((_BYTE *)v21 + 25);
        *(_QWORD *)v35 = 0;
        *((_QWORD *)v35 + 1) = 0;
        *((_QWORD *)v35 + 2) = v31;
        *v32 = v35;
        v36 = **(_QWORD **)(a4 + 24);
        if (v36)
        {
          *(_QWORD *)(a4 + 24) = v36;
          v35 = (_BYTE *)*v32;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a4 + 32), (uint64_t *)v35);
        ++*(_QWORD *)(a4 + 40);
        v33 = (_QWORD *)v21[1];
        if (v33)
        {
          do
          {
LABEL_54:
            v37 = v33;
            v33 = (_QWORD *)*v33;
          }
          while (v33);
          goto LABEL_29;
        }
      }
      do
      {
        v37 = (_QWORD *)v21[2];
        v29 = *v37 == (_QWORD)v21;
        v21 = v37;
      }
      while (!v29);
LABEL_29:
      v21 = v37;
      if (v37 == v22)
        goto LABEL_24;
    }
  }
LABEL_25:
  *(_QWORD *)(a4 + 48) = *(_QWORD *)(a1 + 128);
  if (!v44)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v44 + 48))(v44);
  result = v44;
  if (v44 == v43)
  {
    v24 = 4;
    result = v43;
  }
  else
  {
    if (!v44)
      return result;
    v24 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
}

void sub_19F2579A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

char *geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(uint64_t a1, unsigned __int8 *a2)
{
  char *v4;
  char *v5;
  char *result;
  unint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  result = v4;
  if (v4 != v5)
  {
    result = v4;
    while (*a2 != *result)
    {
      result += 16;
      if (result == v5)
        goto LABEL_7;
    }
  }
  if (result == v5)
  {
LABEL_7:
    v7 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v5 >= v7)
    {
      v9 = (v5 - v4) >> 4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        abort();
      v11 = v7 - (_QWORD)v4;
      if (v11 >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v13 = (char *)operator new(16 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[16 * v9];
      *(_OWORD *)v14 = *(_OWORD *)a2;
      v8 = v14 + 16;
      if (v4 != v5)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
          v14 -= 16;
          v5 -= 16;
        }
        while (v5 != v4);
        v4 = *(char **)a1;
      }
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = &v13[16 * v12];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_OWORD *)v5 = *(_OWORD *)a2;
      v8 = v5 + 16;
    }
    *(_QWORD *)(a1 + 8) = v8;
    return (char *)(v8 - 1);
  }
  return result;
}

void md::Logic<md::SettingsLogic,md::SettingsContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
  a1[2] = 0;
  a1[3] = a1 + 4;
}

md::AnimationManager *md::AnimationManager::AnimationManager(md::AnimationManager *this)
{
  _AnimationManagerRunner *v2;
  void *v3;

  *(_QWORD *)this = &off_1E42913D8;
  *((_QWORD *)this + 1) = &off_1E42B5050;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 850045863;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *((_BYTE *)this + 184) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 1065353216;
  *((_WORD *)this + 116) = 1;
  v2 = -[_AnimationManagerRunner initWithAnimationManager:]([_AnimationManagerRunner alloc], "initWithAnimationManager:", this);
  v3 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v2;

  atomic_store(0, (unsigned __int8 *)this + 184);
  return this;
}

void sub_19F257E08(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v4;
  std::unordered_map<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>::~unordered_map[abi:nn180100](v3);
  std::array<std::unordered_set<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,2ul>::~array(v1 + 104);
  std::mutex::~mutex(v2);
  *(_QWORD *)(v1 + 8) = v5;

  _Unwind_Resume(a1);
}

void md::StyleLogic::setMapKitClientMode(uint64_t a1, int a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char v6;
  char v7;

  if (*(unsigned __int8 *)(a1 + 175) != a2)
  {
    *(_BYTE *)(a1 + 175) = a2;
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 208), 0x1007Eu, a2);
    gss::ClientStyleState<gss::ScenePropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 224), 0x1007Eu, *(unsigned __int8 *)(a1 + 175));
    if (*(_BYTE *)(a1 + 174))
    {
      v6 = 4;
      v3 = *(char **)(a1 + 1128);
      v4 = *(char **)(a1 + 1136);
      if (v3 != v4)
      {
        while (*v3 <= 3u)
        {
          if (++v3 == v4)
            goto LABEL_9;
        }
      }
      if (v3 == v4 || (v4 = v3, *v3 != 4))
LABEL_9:
        std::vector<md::StyleManagerEvent>::insert(a1 + 1128, v4, &v6);
      v5 = **(_QWORD **)(a1 + 1240);
      if (v5)
      {
        v7 = 12;
        md::MapEngine::setNeedsTick(v5, &v7);
      }
    }
  }
}

void checkForBogusContentScale(double a1)
{
  void *v1;

  if (fabs(a1) == INFINITY)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("contentScale is unreasonable (NaN or Inf)"), 0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "raise");

  }
}

void sub_19F258294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F2586A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;
  void *v16;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19F258BB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double md::LightingLogicContext::quantizedShadowViewProjectionMatrix(md::LightingLogicContext *this, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64x2_t v4;
  float64x2_t v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v29;
  __int128 v30;
  __int128 v31;
  double v32;
  __int128 v33;
  __int128 v34;
  double v35;
  uint64_t v36;
  float64x2_t v37;
  double v38;
  uint64_t v39;

  v4.i64[0] = a3;
  v4.i64[1] = a4;
  v5 = vcvtq_f64_u64(v4);
  v6 = *(double *)(a2 + 264);
  v7 = *(double *)(a2 + 288);
  v8 = *(double *)(a2 + 232);
  v9 = *(unsigned __int8 *)(a2 + 240);
  v30 = 0u;
  v31 = 0u;
  v10 = v8 + -1.0;
  if (!v9)
    v10 = 1.0 - v8;
  v33 = 0uLL;
  v34 = 0uLL;
  v35 = v10 / (v6 - v7);
  v36 = 0;
  v11 = *(float64x2_t *)(a2 + 248);
  v12 = vsubq_f64(*(float64x2_t *)(a2 + 272), v11);
  v13 = fmax(v12.f64[0], v12.f64[1]);
  *(double *)&v14 = v13;
  v15 = vdivq_f64((float64x2_t)vdupq_lane_s64(v14, 0), v5);
  __asm { FMOV            V16.2D, #0.5 }
  v21 = vmlaq_f64(v11, _Q16, v12);
  v22 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)&v14 * 0.5), 0);
  v23 = vsubq_f64(v21, v22);
  v24 = vaddq_f64(v22, v21);
  v25 = vmulq_f64(vrndmq_f64(vdivq_f64(v23, v15)), v15);
  v26 = vmulq_f64(vrndmq_f64(vdivq_f64(v24, v15)), v15);
  v27 = vsubq_f64(v26, v25);
  v29 = 2.0 / v27.f64[0];
  v32 = 2.0 / v27.f64[1];
  v37 = vdivq_f64(vnegq_f64(vaddq_f64(v26, v25)), v27);
  v38 = -(v7 - v8 * v6) / (v6 - v7);
  v39 = 0x3FF0000000000000;
  return gm::operator*<double,4,4,4>((double *)this, &v29, (double *)(a2 + 296));
}

uint64_t md::LogicManager::addLogic<md::MuninSceneLogic,md::World *,gdc::LoadingStatusTracker *,std::shared_ptr<md::TaskContext> &,md::RunLoopController *,md::AnimationRunner *,BOOL>(uint64_t a1, md::World **a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, char *a7)
{
  uint64_t v13;
  md::World *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t **v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  geo::read_write_lock *v42;
  const char *v43;
  geo::read_write_lock *v44;
  const char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t v49;
  unint64_t *p_shared_weak_owners;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  geo::read_write_lock *v58;
  const char *v59;
  int64x2_t v60;
  uint64_t v61;
  _QWORD *v62;
  md::SceneStateManager *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t i;
  _WORD *v104;
  void *v105;
  __int16 v106;
  __int16 v107;
  char *v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  _WORD *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  char *v123;
  unint64_t v124;
  __int128 v125;
  __int16 v126;
  _BYTE *v127;
  void *v128;
  unint64_t UInteger;
  char v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t result;
  uint64_t *v142;
  void *v143;
  void **v144;
  id obj;
  _QWORD *v146;
  char v147;
  uint64_t v148;
  unsigned __int8 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _QWORD v154[18];

  v154[16] = *MEMORY[0x1E0C80C00];
  v13 = operator new();
  v14 = *a2;
  v15 = *a3;
  v16 = *a5;
  v17 = *a6;
  v147 = *a7;
  *(_QWORD *)(v13 + 16) = "md::MuninSceneLogic]";
  *(_OWORD *)(v13 + 24) = xmmword_19FFB5750;
  *(_QWORD *)(v13 + 40) = "md::MuninSceneContext]";
  *(_QWORD *)(v13 + 48) = 21;
  *(_BYTE *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  v18 = (uint64_t **)(v13 + 80);
  *(_QWORD *)(v13 + 64) = 1;
  *(_QWORD *)(v13 + 72) = v13 + 80;
  *(_QWORD *)(v13 + 112) = 0;
  *(_QWORD *)(v13 + 104) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = v13 + 104;
  *(_QWORD *)v13 = off_1E42AD068;
  *(_QWORD *)(v13 + 8) = 0x669A8EDAC04FCBF1;
  v146 = (_QWORD *)v13;
  v19 = (uint64_t *)operator new(0x38uLL);
  v19[4] = 0xE42D19AFCA302E68;
  v19[5] = (uint64_t)"md::StyleLogicContext]";
  v19[6] = 21;
  *v19 = 0;
  v19[1] = 0;
  v19[2] = v13 + 80;
  *(_QWORD *)(v13 + 72) = v19;
  *(_QWORD *)(v13 + 80) = v19;
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v19, v19);
  v20 = *(uint64_t **)(v13 + 80);
  ++*(_QWORD *)(v13 + 88);
  v21 = (uint64_t **)(v13 + 80);
  v22 = (uint64_t **)(v13 + 80);
  if (v20)
  {
    v23 = v20;
    while (1)
    {
      while (1)
      {
        v22 = (uint64_t **)v23;
        v24 = v23[4];
        if (v24 <= 0x1AF456233693CD46)
          break;
        v23 = *v22;
        v21 = v22;
        if (!*v22)
          goto LABEL_8;
      }
      if (v24 == 0x1AF456233693CD46)
        break;
      v23 = v22[1];
      if (!v23)
      {
        v21 = v22 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v25 = (uint64_t *)operator new(0x38uLL);
    v25[4] = 0x1AF456233693CD46;
    v25[5] = (uint64_t)"md::CameraContext]";
    v25[6] = 17;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v22;
    *v21 = v25;
    v26 = **(_QWORD **)(v13 + 72);
    if (v26)
    {
      *(_QWORD *)(v13 + 72) = v26;
      v25 = *v21;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v13 + 80), v25);
    v20 = *(uint64_t **)(v13 + 80);
    ++*(_QWORD *)(v13 + 88);
  }
  v27 = (uint64_t **)(v13 + 80);
  if (v20)
  {
    while (1)
    {
      while (1)
      {
        v27 = (uint64_t **)v20;
        v28 = v20[4];
        if (v28 <= 0x7851AF310F49C988)
          break;
        v20 = *v27;
        v18 = v27;
        if (!*v27)
          goto LABEL_18;
      }
      if (v28 == 0x7851AF310F49C988)
        break;
      v20 = v27[1];
      if (!v20)
      {
        v18 = v27 + 1;
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v29 = (uint64_t *)operator new(0x38uLL);
    v29[4] = 0x7851AF310F49C988;
    v29[5] = (uint64_t)"md::LayerDataLogicContext]";
    v29[6] = 25;
    *v29 = 0;
    v29[1] = 0;
    v29[2] = (uint64_t)v27;
    *v18 = v29;
    v30 = **(_QWORD **)(v13 + 72);
    if (v30)
    {
      *(_QWORD *)(v13 + 72) = v30;
      v29 = *v18;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v13 + 80), v29);
    ++*(_QWORD *)(v13 + 88);
  }
  *(_QWORD *)v13 = &off_1E42907E8;
  v31 = a4[1];
  *(_QWORD *)(v13 + 120) = *a4;
  *(_QWORD *)(v13 + 128) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *(_QWORD *)(v13 + 136) = v17;
  *(_QWORD *)(v13 + 144) = v14;
  *(_QWORD *)(v13 + 152) = v15;
  *(_QWORD *)(v13 + 160) = v16;
  v34 = operator new();
  v35 = v34;
  v36 = *a4;
  v37 = (std::__shared_weak_count *)a4[1];
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 24) = 17;
    *(_QWORD *)(v34 + 32) = v36;
    v40 = (unint64_t *)&v37->__shared_owners_;
    *(_QWORD *)(v34 + 40) = v37;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  else
  {
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 24) = 17;
    *(_QWORD *)(v34 + 32) = v36;
    *(_QWORD *)(v34 + 40) = 0;
  }
  *(_OWORD *)(v34 + 96) = 0u;
  *(_QWORD *)(v34 + 56) = 0;
  *(_QWORD *)(v34 + 48) = v34 + 56;
  *(_QWORD *)(v34 + 80) = 0;
  *(_QWORD *)(v34 + 88) = 0;
  *(_QWORD *)(v34 + 64) = 0;
  *(_QWORD *)(v34 + 72) = v34 + 80;
  *(_OWORD *)(v34 + 112) = 0u;
  *(_OWORD *)(v34 + 128) = 0u;
  *(_OWORD *)(v34 + 144) = 0u;
  *(_OWORD *)(v34 + 160) = 0u;
  *(_OWORD *)(v34 + 176) = 0u;
  *(_OWORD *)(v34 + 192) = 0u;
  *(_OWORD *)(v34 + 208) = 0u;
  *(_OWORD *)(v34 + 224) = 0u;
  *(_OWORD *)(v34 + 240) = 0u;
  *(_OWORD *)(v34 + 256) = 0u;
  *(_OWORD *)(v34 + 272) = 0u;
  *(_QWORD *)(v34 + 288) = 0;
  v42 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v34 + 96), 0);
  if ((_DWORD)v42)
    geo::read_write_lock::logFailure(v42, (uint64_t)"initialization", v43);
  *(_QWORD *)(v35 + 488) = 0;
  *(_OWORD *)(v35 + 456) = 0u;
  *(_OWORD *)(v35 + 472) = 0u;
  *(_OWORD *)(v35 + 424) = 0u;
  *(_OWORD *)(v35 + 440) = 0u;
  *(_OWORD *)(v35 + 392) = 0u;
  *(_OWORD *)(v35 + 408) = 0u;
  *(_OWORD *)(v35 + 360) = 0u;
  *(_OWORD *)(v35 + 376) = 0u;
  *(_OWORD *)(v35 + 328) = 0u;
  *(_OWORD *)(v35 + 344) = 0u;
  *(_OWORD *)(v35 + 296) = 0u;
  *(_OWORD *)(v35 + 312) = 0u;
  v44 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v35 + 296), 0);
  if ((_DWORD)v44)
    geo::read_write_lock::logFailure(v44, (uint64_t)"initialization", v45);
  *(_QWORD *)(v35 + 496) = 0;
  *(_QWORD *)(v35 + 504) = 0;
  *(_QWORD *)(v35 + 512) = 850045863;
  *(_QWORD *)(v35 + 568) = 0;
  *(_OWORD *)(v35 + 520) = 0u;
  *(_OWORD *)(v35 + 536) = 0u;
  *(_OWORD *)(v35 + 552) = 0u;
  *(_QWORD *)(v35 + 576) = v35 + 576;
  *(_QWORD *)(v35 + 584) = v35 + 576;
  *(_OWORD *)(v35 + 592) = 0u;
  *(_OWORD *)(v35 + 608) = 0u;
  *(_QWORD *)(v35 + 624) = 0;
  *(_DWORD *)(v35 + 632) = 1065353216;
  *(_QWORD *)(v35 + 648) = 0;
  *(_QWORD *)(v35 + 640) = v35 + 576;
  *(_QWORD *)(v13 + 168) = v35;
  v46 = (std::__shared_weak_count *)operator new();
  v46->__shared_owners_ = 0;
  v47 = (unint64_t *)&v46->__shared_owners_;
  v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E73D8;
  v46->__shared_weak_owners_ = 0;
  v46[1].__vftable = (std::__shared_weak_count_vtbl *)v35;
  *(_QWORD *)(v13 + 176) = v46;
  v48 = *(std::__shared_weak_count **)(v35 + 8);
  if (v48)
  {
    if (v48->__shared_owners_ != -1)
      goto LABEL_48;
    do
      v49 = __ldxr(v47);
    while (__stxr(v49 + 1, v47));
    p_shared_weak_owners = (unint64_t *)&v46->__shared_weak_owners_;
    do
      v51 = __ldxr(p_shared_weak_owners);
    while (__stxr(v51 + 1, p_shared_weak_owners));
    *(_QWORD *)v35 = v35;
    *(_QWORD *)(v35 + 8) = v46;
    std::__shared_weak_count::__release_weak(v48);
  }
  else
  {
    do
      v52 = __ldxr(v47);
    while (__stxr(v52 + 1, v47));
    v53 = (unint64_t *)&v46->__shared_weak_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    *(_QWORD *)v35 = v35;
    *(_QWORD *)(v35 + 8) = v46;
  }
  do
    v55 = __ldaxr(v47);
  while (__stlxr(v55 - 1, v47));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_48:
  if (v37)
  {
    v56 = (unint64_t *)&v37->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 376) = 0u;
  *(_OWORD *)(v13 + 392) = 0u;
  *(_OWORD *)(v13 + 344) = 0u;
  *(_OWORD *)(v13 + 360) = 0u;
  *(_OWORD *)(v13 + 312) = 0u;
  *(_OWORD *)(v13 + 328) = 0u;
  *(_OWORD *)(v13 + 280) = 0u;
  *(_OWORD *)(v13 + 296) = 0u;
  *(_OWORD *)(v13 + 248) = 0u;
  *(_OWORD *)(v13 + 264) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_OWORD *)(v13 + 232) = 0u;
  *(_OWORD *)(v13 + 200) = 0u;
  v58 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v13 + 208), 0);
  if ((_DWORD)v58)
    geo::read_write_lock::logFailure(v58, (uint64_t)"initialization", v59);
  *(_OWORD *)(v13 + 408) = 0u;
  *(_OWORD *)(v13 + 424) = 0u;
  *(_DWORD *)(v13 + 440) = 1065353216;
  *(_QWORD *)(v13 + 448) = 0;
  *(_OWORD *)(v13 + 456) = 0u;
  *(_BYTE *)(v13 + 472) = 1;
  *(_QWORD *)(v13 + 480) = 0;
  *(_OWORD *)(v13 + 488) = 0u;
  *(_BYTE *)(v13 + 504) = 1;
  *(_QWORD *)(v13 + 512) = 0;
  *(std::chrono::steady_clock::time_point *)(v13 + 512) = std::chrono::steady_clock::now();
  *(_BYTE *)(v13 + 592) = 0;
  *(_BYTE *)(v13 + 600) = 0;
  *(_BYTE *)(v13 + 608) = 0;
  *(_OWORD *)(v13 + 520) = 0u;
  *(_OWORD *)(v13 + 536) = 0u;
  *(_OWORD *)(v13 + 552) = 0u;
  *(_OWORD *)(v13 + 568) = 0u;
  v142 = (uint64_t *)(v13 + 520);
  *(_BYTE *)(v13 + 584) = 0;
  *(_QWORD *)(v13 + 616) = 0x4003333333333333;
  *(_OWORD *)(v13 + 624) = xmmword_19FFB5760;
  *(_OWORD *)(v13 + 640) = xmmword_19FFB5770;
  *(_OWORD *)(v13 + 656) = xmmword_19FFB5780;
  *(_OWORD *)(v13 + 672) = xmmword_19FFB5790;
  *(_OWORD *)(v13 + 688) = xmmword_19FFB57A0;
  *(_BYTE *)(v13 + 704) = 4;
  *(_WORD *)(v13 + 706) = 3;
  *(_DWORD *)(v13 + 708) = 1;
  *(_WORD *)(v13 + 712) = 1796;
  v60 = vdupq_n_s64(0x3FF657184AE74487uLL);
  *(int64x2_t *)(v13 + 720) = v60;
  *(int64x2_t *)(v13 + 736) = v60;
  *(_OWORD *)(v13 + 752) = xmmword_19FFB57B0;
  *(_OWORD *)(v13 + 768) = xmmword_19FFB57C0;
  *(int64x2_t *)(v13 + 784) = vdupq_n_s64(0x3FB999999999999AuLL);
  *(_QWORD *)(v13 + 800) = 0x3FD6666666666666;
  *(_QWORD *)(v13 + 824) = 0;
  v144 = (void **)(v13 + 808);
  *(_OWORD *)(v13 + 808) = 0u;
  *(_BYTE *)(v13 + 832) = v147;
  *(_BYTE *)(v13 + 833) = 1;
  *(_QWORD *)(v13 + 840) = 0;
  v61 = operator new();
  *(_QWORD *)v61 = 850045863;
  *(_OWORD *)(v61 + 8) = 0u;
  *(_OWORD *)(v61 + 24) = 0u;
  *(_OWORD *)(v61 + 40) = 0u;
  *(_QWORD *)(v61 + 56) = 0;
  *(_QWORD *)(v61 + 64) = 1;
  *(_QWORD *)(v13 + 848) = v61;
  v62 = (_QWORD *)operator new();
  *v62 = &off_1E42E6D48;
  v62[1] = 0;
  v62[2] = 0;
  v62[3] = v61;
  *(_QWORD *)(v13 + 856) = v62;
  *(_QWORD *)(v13 + 864) = 850045863;
  *(_OWORD *)(v13 + 872) = 0u;
  *(_OWORD *)(v13 + 888) = 0u;
  *(_OWORD *)(v13 + 904) = 0u;
  *(_OWORD *)(v13 + 920) = 0u;
  *(_OWORD *)(v13 + 936) = 0u;
  *(_OWORD *)(v13 + 945) = 0u;
  v63 = (md::SceneStateManager *)operator new();
  md::SceneStateManager::SceneStateManager(v63, v14);
  *(_QWORD *)(v13 + 968) = v63;
  v64 = (_QWORD *)operator new();
  *v64 = &off_1E42E6ED0;
  v64[1] = 0;
  v64[2] = 0;
  v64[3] = v63;
  *(_QWORD *)(v13 + 976) = v64;
  v65 = *((_QWORD *)v14 + 7);
  if (v65 != *((_QWORD *)v14 + 8))
  {
    while (*(_WORD *)v65 != 35)
      v65 += 16;
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v65 + 8) + 8) + 24))(&v148, *(_QWORD *)(*(_QWORD *)(v65 + 8) + 8), 22);
  if ((_BYTE)v148)
    atomic_store(v149, (unsigned __int8 *)(*(_QWORD *)(v13 + 168) + 24));
  v66 = *((_QWORD *)v14 + 4);
  v67 = *((_QWORD *)v14 + 5);
  if (v66 != v67)
  {
    while (*(_WORD *)v66 != 36)
    {
      v66 += 16;
      if (v66 == v67)
        goto LABEL_67;
    }
  }
  if (v66 != v67)
  {
    v68 = *(_QWORD *)(v66 + 8);
    v70 = *(_QWORD *)(v13 + 168);
    v69 = *(_QWORD *)(v13 + 176);
    if (!v69)
      goto LABEL_70;
LABEL_68:
    v71 = (unint64_t *)(v69 + 16);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
    goto LABEL_70;
  }
LABEL_67:
  v68 = 0;
  v70 = *(_QWORD *)(v13 + 168);
  v69 = *(_QWORD *)(v13 + 176);
  if (v69)
    goto LABEL_68;
LABEL_70:
  *(_QWORD *)(v68 + 584) = v70;
  v73 = *(std::__shared_weak_count **)(v68 + 592);
  *(_QWORD *)(v68 + 592) = v69;
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
  v74 = *((_QWORD *)v14 + 10);
  v75 = *((_QWORD *)v14 + 11);
  if (v74 != v75)
  {
    while (*(_WORD *)v74 != 36)
    {
      v74 += 16;
      if (v74 == v75)
        goto LABEL_78;
    }
  }
  if (v74 == v75)
LABEL_78:
    v76 = 0;
  else
    v76 = *(_QWORD *)(v74 + 8);
  v77 = (_QWORD *)operator new();
  *v77 = *(_QWORD *)(v13 + 168);
  v78 = *(_QWORD *)(v13 + 528);
  *(_QWORD *)(v13 + 528) = v77;
  if (v78)
    MEMORY[0x1A1AF4E00](v78, 0x60C4044C4A2DFLL);
  v79 = operator new();
  *(_QWORD *)v79 = v76;
  *(_OWORD *)(v79 + 8) = 0u;
  *(_OWORD *)(v79 + 24) = 0u;
  *(_DWORD *)(v79 + 40) = 1065353216;
  v80 = *(_QWORD *)(v13 + 536);
  *(_QWORD *)(v13 + 536) = v79;
  if (v80)
  {
    v81 = *(_BYTE **)(v80 + 24);
    if (v81)
    {
      do
      {
        if (v81[112])
          v81[112] = 0;
        v127 = *(_BYTE **)v81;
        v128 = (void *)*((_QWORD *)v81 + 4);
        if (v128 != *((void **)v81 + 6))
          free(v128);
        operator delete(v81);
        v81 = v127;
      }
      while (v127);
    }
    v82 = *(void **)(v80 + 8);
    *(_QWORD *)(v80 + 8) = 0;
    if (v82)
      operator delete(v82);
    MEMORY[0x1A1AF4E00](v80, 0x10A0C402A8DDD12);
  }
  v83 = operator new();
  *(_DWORD *)v83 = 3;
  *(_OWORD *)(v83 + 4) = 0u;
  *(_OWORD *)(v83 + 20) = 0u;
  *(_OWORD *)(v83 + 36) = 0u;
  *(_OWORD *)(v83 + 52) = 0u;
  *(_OWORD *)(v83 + 68) = 0u;
  *(_OWORD *)(v83 + 80) = 0u;
  *(_DWORD *)(v83 + 96) = 1065353216;
  *(_QWORD *)(v83 + 104) = 0;
  *(std::chrono::steady_clock::time_point *)(v83 + 104) = std::chrono::steady_clock::now();
  *(std::chrono::steady_clock::time_point *)(v83 + 104) = std::chrono::steady_clock::now();
  v84 = *v142;
  *v142 = v83;
  if (v84)
  {
    v85 = *(_QWORD **)(v84 + 80);
    if (v85)
    {
      do
      {
        v86 = (_QWORD *)*v85;
        operator delete(v85);
        v85 = v86;
      }
      while (v86);
    }
    v87 = *(void **)(v84 + 64);
    *(_QWORD *)(v84 + 64) = 0;
    if (v87)
      operator delete(v87);
    MEMORY[0x1A1AF4E00](v84, 0x10A0C40091BD0E7);
  }
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 616) = v88;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 624) = v89;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 632) = v90;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 640) = v91;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 648) = v92;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 656) = v93;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 664) = v94;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 672) = v95;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 680) = v96;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 688) = v97;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 696) = v98;
  GEOConfigGetArray();
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  v100 = v99;
  *(_QWORD *)(v13 + 816) = *(_QWORD *)(v13 + 808);
  v143 = v99;
  if (!v99)
    goto LABEL_134;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  obj = v99;
  v101 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v150, v154, 16);
  if (!v101)
    goto LABEL_133;
  v102 = *(_QWORD *)v151;
  while (2)
  {
    for (i = 0; i != v101; ++i)
    {
      if (*(_QWORD *)v151 != v102)
        objc_enumerationMutation(obj);
      v105 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * i);
      if ((objc_opt_respondsToSelector() & 1) == 0)
      {
        *(_QWORD *)(v13 + 816) = *(_QWORD *)(v13 + 808);
        goto LABEL_133;
      }
      v106 = objc_msgSend(v105, "unsignedIntegerValue");
      v107 = v106;
      v108 = *(char **)(v13 + 816);
      v109 = *(_QWORD *)(v13 + 824);
      if ((unint64_t)v108 < v109)
      {
        *(_WORD *)v108 = v106;
        v104 = v108 + 2;
        goto LABEL_97;
      }
      v110 = (char *)*v144;
      v111 = v108 - (_BYTE *)*v144;
      if (v111 <= -3)
        abort();
      v112 = v101;
      v113 = v111 >> 1;
      v114 = v109 - (_QWORD)v110;
      if (v114 <= (v111 >> 1) + 1)
        v115 = v113 + 1;
      else
        v115 = v114;
      if (v114 >= 0x7FFFFFFFFFFFFFFELL)
        v116 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v116 = v115;
      if (v116)
      {
        if (v116 < 0)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v117 = operator new(2 * v116);
      }
      else
      {
        v117 = 0;
      }
      v118 = &v117[2 * v113];
      *v118 = v107;
      v104 = v118 + 1;
      if (v108 == v110)
      {
        v100 = v143;
      }
      else
      {
        v119 = v108 - 2 - v110;
        if (v119 >= 0x1E)
        {
          v120 = v108 - v117 - (v111 & 0xFFFFFFFFFFFFFFFELL);
          v100 = v143;
          if (v120 >= 0x20)
          {
            v121 = (v119 >> 1) + 1;
            v122 = &v117[2 * v113 - 16];
            v123 = v108 - 16;
            v124 = v121 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v125 = *(_OWORD *)v123;
              *(v122 - 1) = *((_OWORD *)v123 - 1);
              *v122 = v125;
              v122 -= 2;
              v123 -= 32;
              v124 -= 16;
            }
            while (v124);
            v118 -= v121 & 0xFFFFFFFFFFFFFFF0;
            v108 -= 2 * (v121 & 0xFFFFFFFFFFFFFFF0);
            if (v121 == (v121 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_122;
          }
        }
        else
        {
          v100 = v143;
        }
        do
        {
          v126 = *((_WORD *)v108 - 1);
          v108 -= 2;
          *--v118 = v126;
        }
        while (v108 != v110);
      }
LABEL_122:
      v146[101] = v118;
      v146[102] = v104;
      v146[103] = &v117[2 * v116];
      if (v110)
        operator delete(v110);
      v101 = v112;
      v13 = (uint64_t)v146;
LABEL_97:
      *(_QWORD *)(v13 + 816) = v104;
    }
    v101 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v150, v154, 16);
    if (v101)
      continue;
    break;
  }
LABEL_133:

LABEL_134:
  UInteger = GEOConfigGetUInteger();
  v130 = 7;
  if (UInteger < 7)
    v130 = UInteger;
  *(_BYTE *)(v13 + 704) = v130;
  *(_WORD *)(v13 + 706) = GEOConfigGetUInteger();
  *(_DWORD *)(v13 + 708) = GEOConfigGetInteger();
  v131 = GEOConfigGetUInteger();
  v132 = 7;
  if (v131 < 7)
    v132 = v131;
  *(_BYTE *)(v13 + 712) = v132;
  v133 = GEOConfigGetUInteger();
  v134 = 7;
  if (v133 < 7)
    v134 = v133;
  *(_BYTE *)(v13 + 713) = v134;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 776) = v135;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 792) = v136;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 784) = v137;
  GEOConfigGetDouble();
  *(_QWORD *)(v13 + 800) = v138;

  v154[0] = 0x669A8EDAC04FCBF1;
  v154[1] = "md::MuninSceneLogic]";
  v154[2] = 19;
  v139 = std::__hash_table<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>>>::__emplace_unique_key_args<gdc::TypeInfo,std::piecewise_construct_t const&,std::tuple<gdc::TypeInfo&&>,std::tuple<>>((uint64_t *)(a1 + 8), 0x669A8EDAC04FCBF1uLL, (uint64_t)v154);
  result = v139[5];
  v139[5] = v13;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19F259CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, pthread_rwlock_t *a12, void **a13, void **a14, std::mutex *a15, uint64_t a16, uint64_t *a17, void *a18, void **a19, void *a20,uint64_t a21)
{
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  char *v51;
  char *v52;
  void *v53;
  _BYTE *v54;
  void *v55;
  _BYTE *v56;
  void *v57;
  _BYTE *v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  geo::read_write_lock *v63;
  const char *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;

  v22 = *(std::__shared_weak_count **)(a21 + 976);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = *(std::__shared_weak_count **)(a21 + 952);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(std::__shared_weak_count **)(a21 + 936);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::mutex::~mutex(a15);
  v31 = *(std::__shared_weak_count **)(a21 + 856);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *a19;
  if (*a19)
  {
    *(_QWORD *)(a21 + 816) = v34;
    operator delete(v34);
  }
  if (*(_BYTE *)(a21 + 608))
    *(_BYTE *)(a21 + 608) = 0;
  if (*(_BYTE *)(a21 + 600))
    *(_BYTE *)(a21 + 600) = 0;
  if (*(_BYTE *)(a21 + 592))
    *(_BYTE *)(a21 + 592) = 0;
  v35 = (uint64_t *)(a21 + 560);
  if (*(_BYTE *)(a21 + 584))
    *(_BYTE *)(a21 + 584) = 0;
  if (*v35)
  {
    std::vector<md::MuninSceneEvent>::__base_destruct_at_end[abi:nn180100]((uint64_t)v35, *v35);
    operator delete((void *)*v35);
  }
  v36 = *(_QWORD *)(a21 + 552);
  *(_QWORD *)(a21 + 552) = 0;
  if (!v36)
  {
LABEL_40:
    v39 = *(_QWORD *)(a21 + 544);
    *(_QWORD *)(a21 + 544) = 0;
    if (!v39)
      goto LABEL_47;
    *(_QWORD *)(v39 + 40) = &off_1E42B4C90;

    v40 = *(_QWORD **)(v39 + 32);
    if (v40 == (_QWORD *)(v39 + 8))
    {
      v41 = 4;
      v40 = (_QWORD *)(v39 + 8);
    }
    else
    {
      if (!v40)
      {
LABEL_46:
        MEMORY[0x1A1AF4E00](v39, 0x10A0C401B67C7C3);
LABEL_47:
        v42 = *(_QWORD *)(a21 + 536);
        *(_QWORD *)(a21 + 536) = 0;
        if (v42)
        {
          v43 = *(_BYTE **)(v42 + 24);
          if (v43)
          {
            do
            {
              if (v43[112])
                v43[112] = 0;
              v54 = *(_BYTE **)v43;
              v55 = (void *)*((_QWORD *)v43 + 4);
              if (v55 != *((void **)v43 + 6))
                free(v55);
              operator delete(v43);
              v43 = v54;
            }
            while (v54);
          }
          v44 = *(void **)(v42 + 8);
          *(_QWORD *)(v42 + 8) = 0;
          if (v44)
            operator delete(v44);
          MEMORY[0x1A1AF4E00](v42, 0x10A0C402A8DDD12);
        }
        v45 = *(_QWORD *)(a21 + 528);
        *(_QWORD *)(a21 + 528) = 0;
        if (v45)
          MEMORY[0x1A1AF4E00](v45, 0x60C4044C4A2DFLL);
        v46 = *a17;
        *a17 = 0;
        if (v46)
        {
          v47 = *(_QWORD **)(v46 + 80);
          if (v47)
          {
            do
            {
              v48 = (_QWORD *)*v47;
              operator delete(v47);
              v47 = v48;
            }
            while (v48);
          }
          v49 = *(void **)(v46 + 64);
          *(_QWORD *)(v46 + 64) = 0;
          if (v49)
            operator delete(v49);
          MEMORY[0x1A1AF4E00](v46, 0x10A0C40091BD0E7);
        }
        v50 = *a10;
        if (*a10)
        {
          *(_QWORD *)(a21 + 488) = v50;
          operator delete(v50);
        }
        v51 = (char *)*a14;
        if (*a14)
        {
          v52 = *(char **)(a21 + 456);
          v53 = *a14;
          if (v52 != v51)
          {
            do
            {
              v56 = (_BYTE *)*((_QWORD *)v52 - 3);
              if (v56)
              {
                do
                {
                  if (v56[112])
                    v56[112] = 0;
                  v58 = *(_BYTE **)v56;
                  v59 = (void *)*((_QWORD *)v56 + 4);
                  if (v59 != *((void **)v56 + 6))
                    free(v59);
                  operator delete(v56);
                  v56 = v58;
                }
                while (v58);
              }
              v57 = (void *)*((_QWORD *)v52 - 5);
              *((_QWORD *)v52 - 5) = 0;
              if (v57)
                operator delete(v57);
              v52 -= 48;
            }
            while (v52 != v51);
            v53 = *a14;
          }
          *(_QWORD *)(a21 + 456) = v51;
          operator delete(v53);
        }
        v60 = *(_QWORD **)(a21 + 424);
        if (v60)
        {
          do
          {
            v61 = (_QWORD *)*v60;
            operator delete(v60);
            v60 = v61;
          }
          while (v61);
        }
        v62 = *a11;
        *a11 = 0;
        if (v62)
          operator delete(v62);
        v63 = (geo::read_write_lock *)pthread_rwlock_destroy(a12);
        if ((_DWORD)v63)
          geo::read_write_lock::logFailure(v63, (uint64_t)"destruction", v64);
        v65 = *a13;
        if (*a13)
        {
          *(_QWORD *)(a21 + 192) = v65;
          operator delete(v65);
        }
        v66 = *(std::__shared_weak_count **)(a21 + 176);
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v69 = *(std::__shared_weak_count **)(a21 + 128);
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        *(_QWORD *)a21 = off_1E42AFC70;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a21 + 104));
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a21 + 80));
        MEMORY[0x1A1AF4E00](a21, 0x10F1C403AAD2613);
        _Unwind_Resume(a1);
      }
      v41 = 5;
    }
    (*(void (**)(void))(*v40 + 8 * v41))();
    goto LABEL_46;
  }
  *(_QWORD *)(v36 + 40) = &off_1E42B4C90;

  v37 = *(_QWORD **)(v36 + 32);
  if (v37 == (_QWORD *)(v36 + 8))
  {
    v38 = 4;
    v37 = (_QWORD *)(v36 + 8);
  }
  else
  {
    if (!v37)
    {
LABEL_39:
      MEMORY[0x1A1AF4E00](v36, 0x10A0C401B67C7C3);
      goto LABEL_40;
    }
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
  goto LABEL_39;
}

_QWORD *std::__hash_table<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,std::__unordered_map_hasher<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,std::hash<gdc::TypeInfo>,std::equal_to<gdc::TypeInfo>,true>,std::__unordered_map_equal<gdc::TypeInfo,std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>,std::equal_to<gdc::TypeInfo>,std::hash<gdc::TypeInfo>,true>,std::allocator<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<md::LogicBase>>>>::__emplace_unique_key_args<gdc::TypeInfo,std::piecewise_construct_t const&,std::tuple<gdc::TypeInfo&&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  v10[4] = *(_QWORD *)(a3 + 16);
  v10[5] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_59;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_64:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v5) = v13;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19F25A860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::TypeInfo,std::unique_ptr<gdc::BaseObjectHolder>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  JUMPOUT(0x1A1AF4E00);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E42DA870;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1A1AF4E00);
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E42DA870;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1A1AF4E00);
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x1A1AF4E00);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1A1AF4E00);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x1A1AF4E00);
}

BOOL md::LabelStyleCache::setContentScale(md::LabelStyleCache *this, float a2)
{
  float v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (**v10)();
  float v11;
  uint64_t (***v12)();
  uint64_t (**v13)();
  float v14;
  uint64_t (***v15)();
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  std::mutex::lock((std::mutex *)this);
  v4 = *((float *)this + 38);
  if (v4 != a2)
  {
    *((float *)this + 38) = a2;
    v13 = &off_1E42CC380;
    v14 = a2;
    v15 = &v13;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*((uint64_t **)this + 33), (uint64_t)&v13);
    v5 = v15;
    if (v15 == &v13)
    {
      v6 = 4;
      v5 = &v13;
    }
    else
    {
      if (!v15)
        goto LABEL_7;
      v6 = 5;
    }
    (*v5)[v6]();
LABEL_7:
    v10 = &off_1E42CC380;
    v11 = a2;
    v12 = &v10;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*((uint64_t **)this + 47), (uint64_t)&v10);
    v7 = v12;
    if (v12 == &v10)
    {
      v8 = 4;
      v7 = &v10;
    }
    else
    {
      if (!v12)
      {
LABEL_12:
        md::LabelStyle::setContentScale(*((md::LabelStyle **)this + 54), *((float *)this + 38));
        goto LABEL_13;
      }
      v8 = 5;
    }
    (*v7)[v8]();
    goto LABEL_12;
  }
LABEL_13:
  std::mutex::unlock((std::mutex *)this);
  return v4 != a2;
}

void sub_19F25AD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::mutex *v17;

  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

uint64_t md::LabelStyleCache::setVariantStyleType(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  std::mutex::lock((std::mutex *)a1);
  if (*(unsigned __int8 *)(a1 + 161) != a2
    || __PAIR64__(*(unsigned __int8 *)(a1 + 163), *(unsigned __int8 *)(a1 + 162)) != __PAIR64__(BYTE2(a2), BYTE1(a2))
    || *(unsigned __int8 *)(a1 + 164) != BYTE3(a2)
    || __PAIR64__(*(unsigned __int8 *)(a1 + 166), *(unsigned __int8 *)(a1 + 165)) != __PAIR64__(BYTE5(a2), BYTE4(a2))
    || __PAIR64__(*(unsigned __int8 *)(a1 + 168), *(unsigned __int8 *)(a1 + 167)) != __PAIR64__(HIBYTE(a2), BYTE6(a2)))
  {
    *(_QWORD *)(a1 + 161) = a2;
    v12[0] = &off_1E42CC458;
    v12[1] = a2;
    v13 = v12;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)(a1 + 264), (uint64_t)v12);
    v5 = v13;
    if (v13 == v12)
    {
      v6 = 4;
      v5 = v12;
    }
    else
    {
      if (!v13)
        goto LABEL_12;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
    v10[0] = &off_1E42CC458;
    v10[1] = a2;
    v11 = v10;
    md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)(a1 + 376), (uint64_t)v10);
    v7 = v11;
    if (v11 == v10)
    {
      v8 = 4;
      v7 = v10;
    }
    else
    {
      if (!v11)
      {
LABEL_17:
        v4 = 1;
        goto LABEL_18;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_17;
  }
  v4 = 0;
LABEL_18:
  std::mutex::unlock((std::mutex *)a1);
  return v4;
}

void sub_19F25AEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::mutex *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

void md::LabelStyleCache::stylesheetDidChange(std::mutex *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)&this[7].__m_.__opaque[16];
  *(_QWORD *)&this[7].__m_.__opaque[8] = 0;
  *(_QWORD *)&this[7].__m_.__opaque[16] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::mutex::lock(this);
  v11[0] = &off_1E42CC4A0;
  v12 = v11;
  md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)this[4].__m_.__opaque, (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v9[0] = &off_1E42CC4A0;
  v10 = v9;
  md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(*(uint64_t **)&this[5].__m_.__opaque[48], (uint64_t)v9);
  v7 = v10;
  if (v10 == v9)
  {
    v8 = 4;
    v7 = v9;
    goto LABEL_15;
  }
  if (v10)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  std::mutex::unlock(this);
}

void sub_19F25B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::mutex *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

void md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::forEach(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (a1)
  {
    v3 = a1;
    while (1)
    {
      if (!*((_BYTE *)v3 + 56))
      {
        v4 = (std::__shared_weak_count *)v3[5];
        if (v4)
        {
          if (v4->__shared_owners_ != -1)
            break;
        }
      }
LABEL_3:
      v3 = (uint64_t *)*v3;
      if (!v3)
        return;
    }
    v9 = 0;
    v5 = std::__shared_weak_count::lock(v4);
    v10 = v5;
    if (v5)
    {
      v9 = v3[4];
      if (!v9)
      {
LABEL_13:
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        goto LABEL_3;
      }
    }
    else if (!v9)
    {
      goto LABEL_13;
    }
    v6 = *(_QWORD *)(a2 + 24);
    if (!v6)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v9);
    v5 = v10;
    goto LABEL_13;
  }
}

void sub_19F25B1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'md::MapStandardLabeler::displayStyleDidChange(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;

  v1 = *(_QWORD *)(this + 384);
  if (*(_QWORD *)(v1 + 408))
  {
    v2 = *(_QWORD **)(v1 + 392);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 400) + 40))(*(_QWORD *)(v1 + 400));
        v2 = v3;
      }
      while (v3);
    }
    *(_QWORD *)(v1 + 392) = 0;
    v4 = *(_QWORD *)(v1 + 376);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)(v1 + 368) + 8 * i) = 0;
    }
    *(_QWORD *)(v1 + 408) = 0;
  }
  return this;
}

void md::LabelStyle::setContentScale(md::LabelStyle *this, float a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  if (*((float *)this + 22) != a2)
  {
    v3 = (_QWORD *)((char *)this + 408);
    *((float *)this + 22) = a2;
    if (!*(_QWORD *)this)
    {
      *((_WORD *)this + 70) = 1;
      *(_WORD *)((char *)this + 241) = 1;
      *((_DWORD *)this + 45) = -1;
      *((_BYTE *)this + 250) = 2;
      *((_DWORD *)this + 49) = 1065353216;
      *((_DWORD *)this + 54) = 2139095039;
      *(_QWORD *)((char *)this + 228) = 0x4334000000000000;
      *((float *)this + 59) = a2 * 20.0;
      *((_BYTE *)this + 261) = 4;
    }
    *((_BYTE *)this + 136) = -1;
    *((_BYTE *)this + 125) = 0;
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 52);
    *v3 = 0;
    *((_QWORD *)this + 52) = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
    v3[2] = 0;
    v3[3] = 0;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void md::PatternedRibbon::~PatternedRibbon(md::PatternedRibbon *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v3 + 24) = "VectorKitLabels";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "VectorKitLabels";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 120);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C4010FC18DELL);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 120);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C4010FC18DELL);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 120);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 120);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 120);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C4010FC18DELL);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 120);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C4010FC18DELL);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 120);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C4010FC18DELL);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 120);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C4010FC18DELL);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 120);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C4010FC18DELL);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 120);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C4010FC18DELL);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 120);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C4010FC18DELL);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 120);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 120);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C4010FC18DELL);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 120);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C4010FC18DELL);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 120);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C4010FC18DELL);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 120);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C4010FC18DELL);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::batch(std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::PatternedBatchKey,std::vector<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,geo::StdAllocator<std::unique_ptr<md::PatternedRibbon,mdm::TypeDeleter<md::PatternedRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::PatternedRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

void md::PolylineOverlaySharedResources::~PolylineOverlaySharedResources(md::PolylineOverlaySharedResources *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::PolylineOverlaySharedRenderStates::~PolylineOverlaySharedRenderStates((md::PolylineOverlaySharedResources *)((char *)this + 176));
  v8 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v8)
  {
    v9 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v8);
    MEMORY[0x1A1AF4E00](v9, 0x10A0C40D234DDC7);
  }
  v10 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v10)
  {
    v11 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v10);
    MEMORY[0x1A1AF4E00](v11, 0x10A0C40D234DDC7);
  }
  v12 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v12)
  {
    v13 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v12);
    MEMORY[0x1A1AF4E00](v13, 0x10A0C40D234DDC7);
  }
  v14 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v14)
  {
    v15 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v14);
    MEMORY[0x1A1AF4E00](v15, 0x10A0C40D234DDC7);
  }
  v16 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v16)
  {
    v17 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v16);
    MEMORY[0x1A1AF4E00](v17, 0x10A0C40D234DDC7);
  }
  v18 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v18)
  {
    v19 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v18);
    MEMORY[0x1A1AF4E00](v19, 0x10A0C40D234DDC7);
  }
  md::PolylineOverlaySharedPipelineStates<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlaySharedPipelineStates((uint64_t *)this + 8);
  md::PolylineOverlaySharedPipelineStates<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlaySharedPipelineStates((uint64_t *)this);
}

void md::RoadSharedResources::~RoadSharedResources(md::RoadSharedResources *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  md::RoadSharedPipelineStates::~RoadSharedPipelineStates(this);
}

uint64_t *md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, __int128 *a6, int a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  char v102;
  int v103;
  int v104;
  char v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  char v285;
  int v286;
  int v287;
  char v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t *v361;
  unint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t *v371;
  uint64_t *v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  std::__shared_weak_count *v395;
  _QWORD *v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  _QWORD *v399;
  _QWORD *v400;
  char *v401;
  unint64_t v402;
  int shared_owners_high;
  int shared_owners;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  uint64_t *v413;
  unsigned __int8 v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _OWORD *v430;
  __int128 *v431;
  uint64_t v432;
  __int128 v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _OWORD *v448;
  __int128 *v449;
  uint64_t v450;
  __int128 v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  _QWORD *v458;
  uint64_t v459;
  uint64_t *v460;
  unsigned __int8 v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  _OWORD *v477;
  __int128 *v478;
  uint64_t v479;
  __int128 v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  uint64_t v493;
  uint64_t v494;
  _OWORD *v495;
  __int128 *v496;
  uint64_t v497;
  __int128 v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  _QWORD *v503;
  uint64_t v504;
  _QWORD *v505;
  uint64_t v506;
  uint64_t *v507;
  unsigned __int8 v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  _OWORD *v524;
  __int128 *v525;
  uint64_t v526;
  __int128 v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  _OWORD *v542;
  __int128 *v543;
  uint64_t v544;
  __int128 v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  _QWORD *v550;
  uint64_t v551;
  _QWORD *v552;
  uint64_t v553;
  uint64_t *v554;
  unsigned __int8 v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  _OWORD *v571;
  __int128 *v572;
  uint64_t v573;
  __int128 v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  _OWORD *v589;
  __int128 *v590;
  uint64_t v591;
  __int128 v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  _QWORD *v597;
  uint64_t v598;
  _QWORD *v599;
  uint64_t v600;
  uint64_t *v601;
  unsigned __int8 v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t v617;
  _OWORD *v618;
  __int128 *v619;
  uint64_t v620;
  __int128 v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  unint64_t v633;
  uint64_t v634;
  uint64_t v635;
  _OWORD *v636;
  __int128 *v637;
  uint64_t v638;
  __int128 v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  _QWORD *v644;
  uint64_t v645;
  _QWORD *v646;
  uint64_t v647;
  uint64_t *v648;
  unsigned __int8 v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  unint64_t v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  _OWORD *v665;
  __int128 *v666;
  uint64_t v667;
  __int128 v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t v682;
  _OWORD *v683;
  __int128 *v684;
  uint64_t v685;
  __int128 v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  _QWORD *v691;
  uint64_t v692;
  _QWORD *v693;
  uint64_t v694;
  unint64_t *v695;
  unint64_t v696;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t *v713;
  uint64_t *v714;
  uint64_t *v715;
  uint64_t *v716;
  uint64_t *v717;
  uint64_t *v718;
  uint64_t *v719;
  uint64_t *v720;
  uint64_t *v721;
  uint64_t *v722;
  uint64_t *v723;
  uint64_t *v724;
  uint64_t *v725;
  uint64_t *v726;
  uint64_t *v727;
  uint64_t *v728;
  __int128 v729;
  uint64_t *v730;
  uint64_t *v732;
  uint64_t v733;
  uint64_t *v734;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int16 v768;
  char v769;
  __int128 v770;
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int16 v778;
  char v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  std::__shared_weak_count *v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  __int128 v809;
  __int128 v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  _QWORD v821[3];
  _QWORD *v822;
  _QWORD v823[3];
  _QWORD *v824;
  _QWORD v825[3];
  _QWORD *v826;
  _QWORD v827[3];
  _QWORD *v828;
  _QWORD v829[3];
  _QWORD *v830;
  _QWORD v831[3];
  _QWORD *v832;
  _QWORD v833[3];
  _QWORD *v834;
  _QWORD v835[3];
  _QWORD *v836;
  _QWORD v837[3];
  _QWORD *v838;
  _QWORD v839[3];
  _QWORD *v840;
  _QWORD v841[3];
  _QWORD *v842;
  _QWORD v843[3];
  _QWORD *v844;
  __int128 v845;
  int v846;
  uint64_t v847;

  v847 = *MEMORY[0x1E0C80C00];
  *((_OWORD *)a1 + 1) = 0u;
  v720 = a1 + 2;
  *((_OWORD *)a1 + 2) = 0u;
  v726 = a1 + 4;
  *((_OWORD *)a1 + 3) = 0u;
  v718 = a1 + 6;
  *(_OWORD *)a1 = 0u;
  v722 = a1 + 5;
  v724 = a1 + 1;
  v714 = a1 + 7;
  v716 = a1 + 3;
  v845 = 0uLL;
  v846 = 0;
  v9 = operator new();
  v10 = v9;
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(v11 + 1880);
  v13 = *(std::__shared_weak_count **)(v11 + 1888);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v774 = *a6;
    v776 = a6[1];
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v780 = v774;
    v801 = v776;
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v9 + 8) = v13;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  else
  {
    v780 = *a6;
    v801 = a6[1];
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v9 + 8) = 0;
  }
  *(_QWORD *)(v9 + 104) = 0;
  *(_OWORD *)(v9 + 16) = v780;
  *(_OWORD *)(v9 + 32) = v801;
  *(_BYTE *)(v9 + 48) = 0;
  *(_OWORD *)(v9 + 52) = xmmword_19FFB3060;
  *(_QWORD *)(v9 + 68) = 0;
  *(_QWORD *)(v9 + 84) = 0;
  *(_QWORD *)(v9 + 76) = 0;
  *(_BYTE *)(v9 + 92) = 8;
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 96) = v9 + 104;
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v20 = *a1;
  *a1 = v10;
  if (v20)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v20 + 104));
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    MEMORY[0x1A1AF4E00](v20, 0x1020C40AD78EA61);
  }
  if (v13)
  {
    v24 = (unint64_t *)&v13->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v26 = operator new();
  v27 = v26;
  v28 = *(_QWORD *)(a2 + 80);
  v29 = *(_QWORD *)(v28 + 1880);
  v30 = *(std::__shared_weak_count **)(v28 + 1888);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    v770 = *a6;
    v772 = a6[1];
    do
      v33 = __ldxr(v31);
    while (__stxr(v33 + 1, v31));
    v781 = v770;
    v802 = v772;
    *(_QWORD *)v26 = v29;
    *(_QWORD *)(v26 + 8) = v30;
    do
      v34 = __ldxr(v31);
    while (__stxr(v34 + 1, v31));
  }
  else
  {
    v781 = *a6;
    v802 = a6[1];
    *(_QWORD *)v26 = v29;
    *(_QWORD *)(v26 + 8) = 0;
  }
  *(_QWORD *)(v26 + 104) = 0;
  *(_OWORD *)(v26 + 16) = v781;
  *(_OWORD *)(v26 + 32) = v802;
  *(_BYTE *)(v26 + 48) = 0;
  *(_OWORD *)(v26 + 52) = xmmword_19FFB3060;
  *(_QWORD *)(v26 + 68) = 0;
  *(_QWORD *)(v26 + 84) = 0;
  *(_QWORD *)(v26 + 76) = 0;
  *(_BYTE *)(v26 + 92) = 8;
  *(_QWORD *)(v26 + 112) = 0;
  *(_QWORD *)(v26 + 96) = v26 + 104;
  if (v30)
  {
    v35 = (unint64_t *)&v30->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v37 = *v726;
  *v726 = v27;
  if (v37)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v37 + 104));
    v38 = *(std::__shared_weak_count **)(v37 + 8);
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    MEMORY[0x1A1AF4E00](v37, 0x1020C40AD78EA61);
  }
  if (v30)
  {
    v41 = (unint64_t *)&v30->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v733 = a2;
  if (a7)
  {
    v43 = operator new();
    v44 = v43;
    v45 = *(_QWORD *)(a2 + 80);
    v46 = *(_QWORD *)(v45 + 1856);
    v47 = *(std::__shared_weak_count **)(v45 + 1864);
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      v760 = *a6;
      v764 = a6[1];
      do
        v50 = __ldxr(v48);
      while (__stxr(v50 + 1, v48));
      v782 = v760;
      v803 = v764;
      *(_QWORD *)v43 = v46;
      *(_QWORD *)(v43 + 8) = v47;
      do
        v51 = __ldxr(v48);
      while (__stxr(v51 + 1, v48));
    }
    else
    {
      v782 = *a6;
      v803 = a6[1];
      *(_QWORD *)v43 = v46;
      *(_QWORD *)(v43 + 8) = 0;
    }
    *(_QWORD *)(v43 + 104) = 0;
    *(_OWORD *)(v43 + 16) = v782;
    *(_OWORD *)(v43 + 32) = v803;
    *(_BYTE *)(v43 + 48) = 0;
    *(_OWORD *)(v43 + 52) = xmmword_19FFB3060;
    *(_QWORD *)(v43 + 68) = 0;
    *(_QWORD *)(v43 + 84) = 0;
    *(_QWORD *)(v43 + 76) = 0;
    *(_BYTE *)(v43 + 92) = 15;
    *(_QWORD *)(v43 + 112) = 0;
    *(_QWORD *)(v43 + 96) = v43 + 104;
    if (v47)
    {
      v61 = (unint64_t *)&v47->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v63 = *v724;
    *v724 = v44;
    if (v63)
    {
      std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v63 + 104));
      v64 = *(std::__shared_weak_count **)(v63 + 8);
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      MEMORY[0x1A1AF4E00](v63, 0x1020C40AD78EA61);
    }
    if (v47)
    {
      v67 = (unint64_t *)&v47->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v69 = operator new();
    v70 = v69;
    v71 = *(_QWORD *)(a2 + 80);
    v72 = *(_QWORD *)(v71 + 1856);
    v73 = *(std::__shared_weak_count **)(v71 + 1864);
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
      v752 = *a6;
      v756 = a6[1];
      do
        v76 = __ldxr(v74);
      while (__stxr(v76 + 1, v74));
      v784 = v752;
      v805 = v756;
      *(_QWORD *)v69 = v72;
      *(_QWORD *)(v69 + 8) = v73;
      do
        v77 = __ldxr(v74);
      while (__stxr(v77 + 1, v74));
    }
    else
    {
      v784 = *a6;
      v805 = a6[1];
      *(_QWORD *)v69 = v72;
      *(_QWORD *)(v69 + 8) = 0;
    }
    *(_QWORD *)(v69 + 104) = 0;
    *(_OWORD *)(v69 + 16) = v784;
    *(_OWORD *)(v69 + 32) = v805;
    *(_BYTE *)(v69 + 48) = 0;
    *(_OWORD *)(v69 + 52) = xmmword_19FFB3060;
    *(_QWORD *)(v69 + 68) = 0;
    *(_QWORD *)(v69 + 84) = 0;
    *(_QWORD *)(v69 + 76) = 0;
    *(_BYTE *)(v69 + 92) = 15;
    *(_QWORD *)(v69 + 112) = 0;
    *(_QWORD *)(v69 + 96) = v69 + 104;
    if (v73)
    {
      v94 = (unint64_t *)&v73->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v96 = *v722;
    *v722 = v70;
    if (v96)
    {
      std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v96 + 104));
      v97 = *(std::__shared_weak_count **)(v96 + 8);
      if (v97)
      {
        v98 = (unint64_t *)&v97->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      MEMORY[0x1A1AF4E00](v96, 0x1020C40AD78EA61);
    }
    if (v73)
    {
      v100 = (unint64_t *)&v73->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v105 = 0;
      v106 = 0;
      v107 = 0;
      v108 = 1;
      v109 = 1;
      v110 = 1;
      if (v101)
        goto LABEL_160;
      goto LABEL_157;
    }
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 1;
    v110 = 1;
  }
  else
  {
    v52 = operator new();
    v53 = v52;
    v54 = *(_QWORD *)(a2 + 80);
    v55 = *(_QWORD *)(v54 + 1856);
    v56 = *(std::__shared_weak_count **)(v54 + 1864);
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      v761 = *a6;
      v765 = a6[1];
      do
        v59 = __ldxr(v57);
      while (__stxr(v59 + 1, v57));
      v783 = v761;
      v804 = v765;
      *(_QWORD *)v52 = v55;
      *(_QWORD *)(v52 + 8) = v56;
      do
        v60 = __ldxr(v57);
      while (__stxr(v60 + 1, v57));
    }
    else
    {
      v783 = *a6;
      v804 = a6[1];
      *(_QWORD *)v52 = v55;
      *(_QWORD *)(v52 + 8) = 0;
    }
    *(_QWORD *)(v52 + 104) = 0;
    *(_OWORD *)(v52 + 16) = v783;
    *(_OWORD *)(v52 + 32) = v804;
    *(_BYTE *)(v52 + 48) = 1;
    *(_OWORD *)(v52 + 52) = xmmword_19FFB4DF0;
    *(_QWORD *)(v52 + 68) = 0x300000008;
    *(_QWORD *)(v52 + 84) = 0;
    *(_QWORD *)(v52 + 76) = 0;
    *(_BYTE *)(v52 + 92) = 15;
    *(_QWORD *)(v52 + 112) = 0;
    *(_QWORD *)(v52 + 96) = v52 + 104;
    if (v56)
    {
      v78 = (unint64_t *)&v56->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v80 = *v724;
    *v724 = v53;
    if (v80)
    {
      std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v80 + 104));
      v81 = *(std::__shared_weak_count **)(v80 + 8);
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      MEMORY[0x1A1AF4E00](v80, 0x1020C40AD78EA61);
    }
    if (v56)
    {
      v84 = (unint64_t *)&v56->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v86 = operator new();
    v87 = v86;
    v88 = *(_QWORD *)(a2 + 80);
    v89 = *(_QWORD *)(v88 + 1856);
    v73 = *(std::__shared_weak_count **)(v88 + 1864);
    if (v73)
    {
      v90 = (unint64_t *)&v73->__shared_owners_;
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 + 1, v90));
      v753 = *a6;
      v757 = a6[1];
      do
        v92 = __ldxr(v90);
      while (__stxr(v92 + 1, v90));
      v785 = v753;
      v806 = v757;
      *(_QWORD *)v86 = v89;
      *(_QWORD *)(v86 + 8) = v73;
      do
        v93 = __ldxr(v90);
      while (__stxr(v93 + 1, v90));
    }
    else
    {
      v785 = *a6;
      v806 = a6[1];
      *(_QWORD *)v86 = v89;
      *(_QWORD *)(v86 + 8) = 0;
    }
    *(_QWORD *)(v86 + 104) = 0;
    *(_OWORD *)(v86 + 16) = v785;
    *(_OWORD *)(v86 + 32) = v806;
    *(_BYTE *)(v86 + 48) = 1;
    *(_OWORD *)(v86 + 52) = xmmword_19FFB4DF0;
    *(_QWORD *)(v86 + 68) = 0x300000008;
    *(_QWORD *)(v86 + 84) = 0;
    *(_QWORD *)(v86 + 76) = 0;
    *(_BYTE *)(v86 + 92) = 15;
    *(_QWORD *)(v86 + 112) = 0;
    *(_QWORD *)(v86 + 96) = v86 + 104;
    if (v73)
    {
      v111 = (unint64_t *)&v73->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v113 = *v722;
    *v722 = v87;
    if (v113)
    {
      std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v113 + 104));
      v114 = *(std::__shared_weak_count **)(v113 + 8);
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      MEMORY[0x1A1AF4E00](v113, 0x1020C40AD78EA61);
    }
    if (v73)
    {
      v117 = (unint64_t *)&v73->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      v109 = 12;
      v103 = 8;
      v108 = 9;
      v102 = 1;
      v104 = 12;
      v105 = 1;
      v106 = 8;
      v110 = 12;
      v107 = 12;
      if (v118)
        goto LABEL_160;
LABEL_157:
      v106 = v103;
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
      v105 = v102;
      v110 = v109;
      v107 = v104;
      goto LABEL_160;
    }
    v110 = 12;
    v106 = 8;
    v108 = 9;
    v105 = 1;
    v107 = 12;
  }
LABEL_160:
  v119 = operator new();
  v120 = v119;
  v121 = *(_QWORD *)(v733 + 80);
  v122 = *(_QWORD *)(v121 + 1880);
  v123 = *(std::__shared_weak_count **)(v121 + 1888);
  if (v123)
  {
    v124 = (unint64_t *)&v123->__shared_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
    v748 = *a6;
    v750 = a6[1];
    do
      v126 = __ldxr(v124);
    while (__stxr(v126 + 1, v124));
    v786 = v748;
    v807 = v750;
    *(_QWORD *)v119 = v122;
    *(_QWORD *)(v119 + 8) = v123;
    do
      v127 = __ldxr(v124);
    while (__stxr(v127 + 1, v124));
  }
  else
  {
    v786 = *a6;
    v807 = a6[1];
    *(_QWORD *)v119 = v122;
    *(_QWORD *)(v119 + 8) = 0;
  }
  *(_QWORD *)(v119 + 104) = 0;
  *(_OWORD *)(v119 + 16) = v786;
  *(_OWORD *)(v119 + 32) = v807;
  *(_BYTE *)(v119 + 48) = v105;
  *(_WORD *)(v119 + 49) = v768;
  *(_BYTE *)(v119 + 51) = v769;
  *(_DWORD *)(v119 + 52) = v108;
  *(_DWORD *)(v119 + 56) = v106;
  *(_DWORD *)(v119 + 60) = 0;
  *(_DWORD *)(v119 + 64) = v110;
  *(_DWORD *)(v119 + 68) = v107;
  *(_DWORD *)(v119 + 72) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v729 = _Q0;
  *(_OWORD *)(v119 + 76) = _Q0;
  *(_BYTE *)(v119 + 92) = 15;
  *(_QWORD *)(v119 + 112) = 0;
  *(_QWORD *)(v119 + 96) = v119 + 104;
  if (v123)
  {
    v133 = (unint64_t *)&v123->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v135 = *v720;
  *v720 = v120;
  if (v135)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v135 + 104));
    v136 = *(std::__shared_weak_count **)(v135 + 8);
    if (v136)
    {
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    MEMORY[0x1A1AF4E00](v135, 0x1020C40AD78EA61);
  }
  if (v123)
  {
    v139 = (unint64_t *)&v123->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v141 = operator new();
  v142 = v141;
  v143 = *(_QWORD *)(v733 + 80);
  v144 = *(_QWORD *)(v143 + 1880);
  v145 = *(std::__shared_weak_count **)(v143 + 1888);
  if (v145)
  {
    v146 = (unint64_t *)&v145->__shared_owners_;
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
    v744 = *a6;
    v746 = a6[1];
    do
      v148 = __ldxr(v146);
    while (__stxr(v148 + 1, v146));
    v787 = v744;
    v808 = v746;
    *(_QWORD *)v141 = v144;
    *(_QWORD *)(v141 + 8) = v145;
    do
      v149 = __ldxr(v146);
    while (__stxr(v149 + 1, v146));
  }
  else
  {
    v787 = *a6;
    v808 = a6[1];
    *(_QWORD *)v141 = v144;
    *(_QWORD *)(v141 + 8) = 0;
  }
  *(_QWORD *)(v141 + 104) = 0;
  *(_OWORD *)(v141 + 16) = v787;
  *(_OWORD *)(v141 + 32) = v808;
  *(_BYTE *)(v141 + 48) = v105;
  *(_WORD *)(v141 + 49) = v768;
  *(_BYTE *)(v141 + 51) = v769;
  *(_DWORD *)(v141 + 52) = v108;
  *(_DWORD *)(v141 + 56) = v106;
  *(_DWORD *)(v141 + 60) = 0;
  *(_DWORD *)(v141 + 64) = v110;
  *(_DWORD *)(v141 + 68) = v107;
  *(_DWORD *)(v141 + 72) = 0;
  *(_OWORD *)(v141 + 76) = v729;
  *(_BYTE *)(v141 + 92) = 15;
  *(_QWORD *)(v141 + 112) = 0;
  *(_QWORD *)(v141 + 96) = v141 + 104;
  if (v145)
  {
    v150 = (unint64_t *)&v145->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v152 = *v718;
  *v718 = v142;
  if (v152)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v152 + 104));
    v153 = *(std::__shared_weak_count **)(v152 + 8);
    if (v153)
    {
      v154 = (unint64_t *)&v153->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    MEMORY[0x1A1AF4E00](v152, 0x1020C40AD78EA61);
  }
  if (v145)
  {
    v156 = (unint64_t *)&v145->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v158 = operator new();
  v159 = v158;
  v160 = *(_QWORD *)(v733 + 80);
  v161 = *(_QWORD *)(v160 + 1832);
  v162 = *(std::__shared_weak_count **)(v160 + 1840);
  if (v162)
  {
    v163 = (unint64_t *)&v162->__shared_owners_;
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
    v740 = *a6;
    v742 = a6[1];
    do
      v165 = __ldxr(v163);
    while (__stxr(v165 + 1, v163));
    v788 = v740;
    v809 = v742;
    *(_QWORD *)v158 = v161;
    *(_QWORD *)(v158 + 8) = v162;
    do
      v166 = __ldxr(v163);
    while (__stxr(v166 + 1, v163));
  }
  else
  {
    v788 = *a6;
    v809 = a6[1];
    *(_QWORD *)v158 = v161;
    *(_QWORD *)(v158 + 8) = 0;
  }
  *(_QWORD *)(v158 + 104) = 0;
  *(_OWORD *)(v158 + 16) = v788;
  *(_OWORD *)(v158 + 32) = v809;
  *(_BYTE *)(v158 + 48) = 1;
  *(_WORD *)(v158 + 49) = v778;
  *(_BYTE *)(v158 + 51) = v779;
  *(_OWORD *)(v158 + 52) = xmmword_19FFB35B0;
  *(_DWORD *)(v158 + 68) = 7;
  *(_OWORD *)(v158 + 72) = v845;
  *(_DWORD *)(v158 + 88) = v846;
  *(_BYTE *)(v158 + 92) = 7;
  *(_QWORD *)(v158 + 112) = 0;
  *(_QWORD *)(v158 + 96) = v158 + 104;
  if (v162)
  {
    v167 = (unint64_t *)&v162->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v169 = *v716;
  *v716 = v159;
  if (v169)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v169 + 104));
    v170 = *(std::__shared_weak_count **)(v169 + 8);
    if (v170)
    {
      v171 = (unint64_t *)&v170->__shared_owners_;
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
    MEMORY[0x1A1AF4E00](v169, 0x1020C40AD78EA61);
  }
  if (v162)
  {
    v173 = (unint64_t *)&v162->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v175 = operator new();
  v176 = v175;
  v177 = *(_QWORD *)(v733 + 80);
  v178 = *(_QWORD *)(v177 + 1832);
  v179 = *(std::__shared_weak_count **)(v177 + 1840);
  if (v179)
  {
    v180 = (unint64_t *)&v179->__shared_owners_;
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 1, v180));
    v736 = *a6;
    v738 = a6[1];
    do
      v182 = __ldxr(v180);
    while (__stxr(v182 + 1, v180));
    v789 = v736;
    v810 = v738;
    *(_QWORD *)v175 = v178;
    *(_QWORD *)(v175 + 8) = v179;
    do
      v183 = __ldxr(v180);
    while (__stxr(v183 + 1, v180));
  }
  else
  {
    v789 = *a6;
    v810 = a6[1];
    *(_QWORD *)v175 = v178;
    *(_QWORD *)(v175 + 8) = 0;
  }
  *(_QWORD *)(v175 + 104) = 0;
  *(_OWORD *)(v175 + 16) = v789;
  *(_OWORD *)(v175 + 32) = v810;
  *(_BYTE *)(v175 + 48) = 1;
  *(_WORD *)(v175 + 49) = v778;
  *(_BYTE *)(v175 + 51) = v779;
  *(_OWORD *)(v175 + 52) = xmmword_19FFB35B0;
  *(_DWORD *)(v175 + 68) = 7;
  *(_OWORD *)(v175 + 72) = v845;
  *(_DWORD *)(v175 + 88) = v846;
  *(_BYTE *)(v175 + 92) = 7;
  *(_QWORD *)(v175 + 112) = 0;
  *(_QWORD *)(v175 + 96) = v175 + 104;
  if (v179)
  {
    v184 = (unint64_t *)&v179->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v186 = *v714;
  *v714 = v176;
  if (v186)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v186 + 104));
    v187 = *(std::__shared_weak_count **)(v186 + 8);
    if (v187)
    {
      v188 = (unint64_t *)&v187->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
    MEMORY[0x1A1AF4E00](v186, 0x1020C40AD78EA61);
  }
  if (v179)
  {
    v190 = (unint64_t *)&v179->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  v719 = a1 + 10;
  *((_OWORD *)a1 + 6) = 0u;
  v723 = a1 + 9;
  v725 = a1 + 12;
  *((_OWORD *)a1 + 7) = 0u;
  v717 = a1 + 14;
  v721 = a1 + 13;
  v727 = a1 + 8;
  v713 = a1 + 15;
  v715 = a1 + 11;
  v845 = 0uLL;
  v846 = 0;
  v192 = operator new();
  v193 = v192;
  v194 = *(_QWORD *)(v733 + 80);
  v195 = *(_QWORD *)(v194 + 1112);
  v196 = *(std::__shared_weak_count **)(v194 + 1120);
  if (v196)
  {
    v197 = (unint64_t *)&v196->__shared_owners_;
    do
      v198 = __ldxr(v197);
    while (__stxr(v198 + 1, v197));
    v775 = *a6;
    v777 = a6[1];
    do
      v199 = __ldxr(v197);
    while (__stxr(v199 + 1, v197));
    v790 = v775;
    v811 = v777;
    *(_QWORD *)v192 = v195;
    *(_QWORD *)(v192 + 8) = v196;
    do
      v200 = __ldxr(v197);
    while (__stxr(v200 + 1, v197));
  }
  else
  {
    v790 = *a6;
    v811 = a6[1];
    *(_QWORD *)v192 = v195;
    *(_QWORD *)(v192 + 8) = 0;
  }
  *(_QWORD *)(v192 + 104) = 0;
  *(_OWORD *)(v192 + 16) = v790;
  *(_OWORD *)(v192 + 32) = v811;
  *(_BYTE *)(v192 + 48) = 0;
  *(_OWORD *)(v192 + 52) = xmmword_19FFB3060;
  *(_QWORD *)(v192 + 68) = 0;
  *(_QWORD *)(v192 + 84) = 0;
  *(_QWORD *)(v192 + 76) = 0;
  *(_BYTE *)(v192 + 92) = 8;
  *(_QWORD *)(v192 + 112) = 0;
  *(_QWORD *)(v192 + 96) = v192 + 104;
  if (v196)
  {
    v201 = (unint64_t *)&v196->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v203 = *v727;
  *v727 = v193;
  if (v203)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v203 + 104));
    v204 = *(std::__shared_weak_count **)(v203 + 8);
    if (v204)
    {
      v205 = (unint64_t *)&v204->__shared_owners_;
      do
        v206 = __ldaxr(v205);
      while (__stlxr(v206 - 1, v205));
      if (!v206)
      {
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
      }
    }
    MEMORY[0x1A1AF4E00](v203, 0x1020C40AD78EA61);
  }
  if (v196)
  {
    v207 = (unint64_t *)&v196->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v209 = operator new();
  v210 = v209;
  v211 = *(_QWORD *)(v733 + 80);
  v212 = *(_QWORD *)(v211 + 1112);
  v213 = *(std::__shared_weak_count **)(v211 + 1120);
  if (v213)
  {
    v214 = (unint64_t *)&v213->__shared_owners_;
    do
      v215 = __ldxr(v214);
    while (__stxr(v215 + 1, v214));
    v771 = *a6;
    v773 = a6[1];
    do
      v216 = __ldxr(v214);
    while (__stxr(v216 + 1, v214));
    v791 = v771;
    v812 = v773;
    *(_QWORD *)v209 = v212;
    *(_QWORD *)(v209 + 8) = v213;
    do
      v217 = __ldxr(v214);
    while (__stxr(v217 + 1, v214));
  }
  else
  {
    v791 = *a6;
    v812 = a6[1];
    *(_QWORD *)v209 = v212;
    *(_QWORD *)(v209 + 8) = 0;
  }
  *(_QWORD *)(v209 + 104) = 0;
  *(_OWORD *)(v209 + 16) = v791;
  *(_OWORD *)(v209 + 32) = v812;
  *(_BYTE *)(v209 + 48) = 0;
  *(_OWORD *)(v209 + 52) = xmmword_19FFB3060;
  *(_QWORD *)(v209 + 68) = 0;
  *(_QWORD *)(v209 + 84) = 0;
  *(_QWORD *)(v209 + 76) = 0;
  *(_BYTE *)(v209 + 92) = 8;
  *(_QWORD *)(v209 + 112) = 0;
  *(_QWORD *)(v209 + 96) = v209 + 104;
  if (v213)
  {
    v218 = (unint64_t *)&v213->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v220 = *v725;
  *v725 = v210;
  if (v220)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v220 + 104));
    v221 = *(std::__shared_weak_count **)(v220 + 8);
    if (v221)
    {
      v222 = (unint64_t *)&v221->__shared_owners_;
      do
        v223 = __ldaxr(v222);
      while (__stlxr(v223 - 1, v222));
      if (!v223)
      {
        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
        std::__shared_weak_count::__release_weak(v221);
      }
    }
    MEMORY[0x1A1AF4E00](v220, 0x1020C40AD78EA61);
  }
  if (!v213)
    goto LABEL_315;
  v224 = (unint64_t *)&v213->__shared_owners_;
  do
    v225 = __ldaxr(v224);
  while (__stlxr(v225 - 1, v224));
  if (!v225)
  {
    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
    std::__shared_weak_count::__release_weak(v213);
    if (a7)
      goto LABEL_316;
  }
  else
  {
LABEL_315:
    if (a7)
    {
LABEL_316:
      v226 = operator new();
      v227 = v226;
      v228 = *(_QWORD *)(v733 + 80);
      v229 = *(_QWORD *)(v228 + 1088);
      v230 = *(std::__shared_weak_count **)(v228 + 1096);
      if (v230)
      {
        v231 = (unint64_t *)&v230->__shared_owners_;
        do
          v232 = __ldxr(v231);
        while (__stxr(v232 + 1, v231));
        v762 = *a6;
        v766 = a6[1];
        do
          v233 = __ldxr(v231);
        while (__stxr(v233 + 1, v231));
        v792 = v762;
        v813 = v766;
        *(_QWORD *)v226 = v229;
        *(_QWORD *)(v226 + 8) = v230;
        do
          v234 = __ldxr(v231);
        while (__stxr(v234 + 1, v231));
      }
      else
      {
        v792 = *a6;
        v813 = a6[1];
        *(_QWORD *)v226 = v229;
        *(_QWORD *)(v226 + 8) = 0;
      }
      *(_QWORD *)(v226 + 104) = 0;
      *(_OWORD *)(v226 + 16) = v792;
      *(_OWORD *)(v226 + 32) = v813;
      *(_BYTE *)(v226 + 48) = 0;
      *(_OWORD *)(v226 + 52) = xmmword_19FFB3060;
      *(_QWORD *)(v226 + 68) = 0;
      *(_QWORD *)(v226 + 84) = 0;
      *(_QWORD *)(v226 + 76) = 0;
      *(_BYTE *)(v226 + 92) = 15;
      *(_QWORD *)(v226 + 112) = 0;
      *(_QWORD *)(v226 + 96) = v226 + 104;
      if (v230)
      {
        v244 = (unint64_t *)&v230->__shared_owners_;
        do
          v245 = __ldaxr(v244);
        while (__stlxr(v245 - 1, v244));
        if (!v245)
        {
          ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
          std::__shared_weak_count::__release_weak(v230);
        }
      }
      v246 = *v723;
      *v723 = v227;
      if (v246)
      {
        std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v246 + 104));
        v247 = *(std::__shared_weak_count **)(v246 + 8);
        if (v247)
        {
          v248 = (unint64_t *)&v247->__shared_owners_;
          do
            v249 = __ldaxr(v248);
          while (__stlxr(v249 - 1, v248));
          if (!v249)
          {
            ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
            std::__shared_weak_count::__release_weak(v247);
          }
        }
        MEMORY[0x1A1AF4E00](v246, 0x1020C40AD78EA61);
      }
      if (v230)
      {
        v250 = (unint64_t *)&v230->__shared_owners_;
        do
          v251 = __ldaxr(v250);
        while (__stlxr(v251 - 1, v250));
        if (!v251)
        {
          ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
          std::__shared_weak_count::__release_weak(v230);
        }
      }
      v252 = operator new();
      v253 = v252;
      v254 = *(_QWORD *)(v733 + 80);
      v255 = *(_QWORD *)(v254 + 1088);
      v256 = *(std::__shared_weak_count **)(v254 + 1096);
      if (v256)
      {
        v257 = (unint64_t *)&v256->__shared_owners_;
        do
          v258 = __ldxr(v257);
        while (__stxr(v258 + 1, v257));
        v754 = *a6;
        v758 = a6[1];
        do
          v259 = __ldxr(v257);
        while (__stxr(v259 + 1, v257));
        v794 = v754;
        v815 = v758;
        *(_QWORD *)v252 = v255;
        *(_QWORD *)(v252 + 8) = v256;
        do
          v260 = __ldxr(v257);
        while (__stxr(v260 + 1, v257));
      }
      else
      {
        v794 = *a6;
        v815 = a6[1];
        *(_QWORD *)v252 = v255;
        *(_QWORD *)(v252 + 8) = 0;
      }
      *(_QWORD *)(v252 + 104) = 0;
      *(_OWORD *)(v252 + 16) = v794;
      *(_OWORD *)(v252 + 32) = v815;
      *(_BYTE *)(v252 + 48) = 0;
      *(_OWORD *)(v252 + 52) = xmmword_19FFB3060;
      *(_QWORD *)(v252 + 68) = 0;
      *(_QWORD *)(v252 + 84) = 0;
      *(_QWORD *)(v252 + 76) = 0;
      *(_BYTE *)(v252 + 92) = 15;
      *(_QWORD *)(v252 + 112) = 0;
      *(_QWORD *)(v252 + 96) = v252 + 104;
      if (v256)
      {
        v277 = (unint64_t *)&v256->__shared_owners_;
        do
          v278 = __ldaxr(v277);
        while (__stlxr(v278 - 1, v277));
        if (!v278)
        {
          ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
          std::__shared_weak_count::__release_weak(v256);
        }
      }
      v279 = *v721;
      *v721 = v253;
      if (v279)
      {
        std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v279 + 104));
        v280 = *(std::__shared_weak_count **)(v279 + 8);
        if (v280)
        {
          v281 = (unint64_t *)&v280->__shared_owners_;
          do
            v282 = __ldaxr(v281);
          while (__stlxr(v282 - 1, v281));
          if (!v282)
          {
            ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
            std::__shared_weak_count::__release_weak(v280);
          }
        }
        MEMORY[0x1A1AF4E00](v279, 0x1020C40AD78EA61);
      }
      if (v256)
      {
        v283 = (unint64_t *)&v256->__shared_owners_;
        do
          v284 = __ldaxr(v283);
        while (__stlxr(v284 - 1, v283));
        v285 = 0;
        v286 = 0;
        v287 = 0;
        v288 = 0;
        v289 = 0;
        v290 = 0;
        v291 = 1;
        v292 = 1;
        v293 = 1;
        if (v284)
          goto LABEL_423;
        goto LABEL_420;
      }
      v288 = 0;
      v289 = 0;
      v290 = 0;
      v291 = 1;
      v293 = 1;
      goto LABEL_423;
    }
  }
  v235 = operator new();
  v236 = v235;
  v237 = *(_QWORD *)(v733 + 80);
  v238 = *(_QWORD *)(v237 + 1088);
  v239 = *(std::__shared_weak_count **)(v237 + 1096);
  if (v239)
  {
    v240 = (unint64_t *)&v239->__shared_owners_;
    do
      v241 = __ldxr(v240);
    while (__stxr(v241 + 1, v240));
    v763 = *a6;
    v767 = a6[1];
    do
      v242 = __ldxr(v240);
    while (__stxr(v242 + 1, v240));
    v793 = v763;
    v814 = v767;
    *(_QWORD *)v235 = v238;
    *(_QWORD *)(v235 + 8) = v239;
    do
      v243 = __ldxr(v240);
    while (__stxr(v243 + 1, v240));
  }
  else
  {
    v793 = *a6;
    v814 = a6[1];
    *(_QWORD *)v235 = v238;
    *(_QWORD *)(v235 + 8) = 0;
  }
  *(_QWORD *)(v235 + 104) = 0;
  *(_OWORD *)(v235 + 16) = v793;
  *(_OWORD *)(v235 + 32) = v814;
  *(_BYTE *)(v235 + 48) = 1;
  *(_OWORD *)(v235 + 52) = xmmword_19FFB4DF0;
  *(_QWORD *)(v235 + 68) = 0x300000008;
  *(_QWORD *)(v235 + 84) = 0;
  *(_QWORD *)(v235 + 76) = 0;
  *(_BYTE *)(v235 + 92) = 15;
  *(_QWORD *)(v235 + 112) = 0;
  *(_QWORD *)(v235 + 96) = v235 + 104;
  if (v239)
  {
    v261 = (unint64_t *)&v239->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v263 = *v723;
  *v723 = v236;
  if (v263)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v263 + 104));
    v264 = *(std::__shared_weak_count **)(v263 + 8);
    if (v264)
    {
      v265 = (unint64_t *)&v264->__shared_owners_;
      do
        v266 = __ldaxr(v265);
      while (__stlxr(v266 - 1, v265));
      if (!v266)
      {
        ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
        std::__shared_weak_count::__release_weak(v264);
      }
    }
    MEMORY[0x1A1AF4E00](v263, 0x1020C40AD78EA61);
  }
  if (v239)
  {
    v267 = (unint64_t *)&v239->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v269 = operator new();
  v270 = v269;
  v271 = *(_QWORD *)(v733 + 80);
  v272 = *(_QWORD *)(v271 + 1088);
  v256 = *(std::__shared_weak_count **)(v271 + 1096);
  if (v256)
  {
    v273 = (unint64_t *)&v256->__shared_owners_;
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
    v755 = *a6;
    v759 = a6[1];
    do
      v275 = __ldxr(v273);
    while (__stxr(v275 + 1, v273));
    v795 = v755;
    v816 = v759;
    *(_QWORD *)v269 = v272;
    *(_QWORD *)(v269 + 8) = v256;
    do
      v276 = __ldxr(v273);
    while (__stxr(v276 + 1, v273));
  }
  else
  {
    v795 = *a6;
    v816 = a6[1];
    *(_QWORD *)v269 = v272;
    *(_QWORD *)(v269 + 8) = 0;
  }
  *(_QWORD *)(v269 + 104) = 0;
  *(_OWORD *)(v269 + 16) = v795;
  *(_OWORD *)(v269 + 32) = v816;
  *(_BYTE *)(v269 + 48) = 1;
  *(_OWORD *)(v269 + 52) = xmmword_19FFB4DF0;
  *(_QWORD *)(v269 + 68) = 0x300000008;
  *(_QWORD *)(v269 + 84) = 0;
  *(_QWORD *)(v269 + 76) = 0;
  *(_BYTE *)(v269 + 92) = 15;
  *(_QWORD *)(v269 + 112) = 0;
  *(_QWORD *)(v269 + 96) = v269 + 104;
  if (v256)
  {
    v294 = (unint64_t *)&v256->__shared_owners_;
    do
      v295 = __ldaxr(v294);
    while (__stlxr(v295 - 1, v294));
    if (!v295)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v296 = *v721;
  *v721 = v270;
  if (v296)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v296 + 104));
    v297 = *(std::__shared_weak_count **)(v296 + 8);
    if (v297)
    {
      v298 = (unint64_t *)&v297->__shared_owners_;
      do
        v299 = __ldaxr(v298);
      while (__stlxr(v299 - 1, v298));
      if (!v299)
      {
        ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
        std::__shared_weak_count::__release_weak(v297);
      }
    }
    MEMORY[0x1A1AF4E00](v296, 0x1020C40AD78EA61);
  }
  if (v256)
  {
    v300 = (unint64_t *)&v256->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    v292 = 12;
    v286 = 8;
    v291 = 9;
    v285 = 1;
    v287 = 12;
    v288 = 1;
    v289 = 8;
    v293 = 12;
    v290 = 12;
    if (v301)
      goto LABEL_423;
LABEL_420:
    v289 = v286;
    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
    std::__shared_weak_count::__release_weak(v256);
    v288 = v285;
    v293 = v292;
    v290 = v287;
    goto LABEL_423;
  }
  v293 = 12;
  v289 = 8;
  v291 = 9;
  v288 = 1;
  v290 = 12;
LABEL_423:
  v302 = operator new();
  v303 = v302;
  v304 = *(_QWORD *)(v733 + 80);
  v305 = *(_QWORD *)(v304 + 1112);
  v306 = *(std::__shared_weak_count **)(v304 + 1120);
  if (v306)
  {
    v307 = (unint64_t *)&v306->__shared_owners_;
    do
      v308 = __ldxr(v307);
    while (__stxr(v308 + 1, v307));
    v749 = *a6;
    v751 = a6[1];
    do
      v309 = __ldxr(v307);
    while (__stxr(v309 + 1, v307));
    v796 = v749;
    v817 = v751;
    *(_QWORD *)v302 = v305;
    *(_QWORD *)(v302 + 8) = v306;
    do
      v310 = __ldxr(v307);
    while (__stxr(v310 + 1, v307));
  }
  else
  {
    v796 = *a6;
    v817 = a6[1];
    *(_QWORD *)v302 = v305;
    *(_QWORD *)(v302 + 8) = 0;
  }
  *(_QWORD *)(v302 + 104) = 0;
  *(_OWORD *)(v302 + 16) = v796;
  *(_OWORD *)(v302 + 32) = v817;
  *(_BYTE *)(v302 + 48) = v288;
  *(_WORD *)(v302 + 49) = v768;
  *(_BYTE *)(v302 + 51) = v769;
  *(_DWORD *)(v302 + 52) = v291;
  *(_DWORD *)(v302 + 56) = v289;
  *(_DWORD *)(v302 + 60) = 0;
  *(_DWORD *)(v302 + 64) = v293;
  *(_DWORD *)(v302 + 68) = v290;
  *(_DWORD *)(v302 + 72) = 0;
  *(_OWORD *)(v302 + 76) = v729;
  *(_BYTE *)(v302 + 92) = 15;
  *(_QWORD *)(v302 + 112) = 0;
  *(_QWORD *)(v302 + 96) = v302 + 104;
  if (v306)
  {
    v311 = (unint64_t *)&v306->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v313 = *v719;
  *v719 = v303;
  if (v313)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v313 + 104));
    v314 = *(std::__shared_weak_count **)(v313 + 8);
    if (v314)
    {
      v315 = (unint64_t *)&v314->__shared_owners_;
      do
        v316 = __ldaxr(v315);
      while (__stlxr(v316 - 1, v315));
      if (!v316)
      {
        ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
        std::__shared_weak_count::__release_weak(v314);
      }
    }
    MEMORY[0x1A1AF4E00](v313, 0x1020C40AD78EA61);
  }
  if (v306)
  {
    v317 = (unint64_t *)&v306->__shared_owners_;
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v319 = operator new();
  v320 = v319;
  v321 = *(_QWORD *)(v733 + 80);
  v322 = *(_QWORD *)(v321 + 1112);
  v323 = *(std::__shared_weak_count **)(v321 + 1120);
  if (v323)
  {
    v324 = (unint64_t *)&v323->__shared_owners_;
    do
      v325 = __ldxr(v324);
    while (__stxr(v325 + 1, v324));
    v745 = *a6;
    v747 = a6[1];
    do
      v326 = __ldxr(v324);
    while (__stxr(v326 + 1, v324));
    v797 = v745;
    v818 = v747;
    *(_QWORD *)v319 = v322;
    *(_QWORD *)(v319 + 8) = v323;
    do
      v327 = __ldxr(v324);
    while (__stxr(v327 + 1, v324));
  }
  else
  {
    v797 = *a6;
    v818 = a6[1];
    *(_QWORD *)v319 = v322;
    *(_QWORD *)(v319 + 8) = 0;
  }
  *(_QWORD *)(v319 + 104) = 0;
  *(_OWORD *)(v319 + 16) = v797;
  *(_OWORD *)(v319 + 32) = v818;
  *(_BYTE *)(v319 + 48) = v288;
  *(_WORD *)(v319 + 49) = v768;
  *(_BYTE *)(v319 + 51) = v769;
  *(_DWORD *)(v319 + 52) = v291;
  *(_DWORD *)(v319 + 56) = v289;
  *(_DWORD *)(v319 + 60) = 0;
  *(_DWORD *)(v319 + 64) = v293;
  *(_DWORD *)(v319 + 68) = v290;
  *(_DWORD *)(v319 + 72) = 0;
  *(_OWORD *)(v319 + 76) = v729;
  *(_BYTE *)(v319 + 92) = 15;
  *(_QWORD *)(v319 + 112) = 0;
  *(_QWORD *)(v319 + 96) = v319 + 104;
  if (v323)
  {
    v328 = (unint64_t *)&v323->__shared_owners_;
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  v330 = *v717;
  *v717 = v320;
  if (v330)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v330 + 104));
    v331 = *(std::__shared_weak_count **)(v330 + 8);
    if (v331)
    {
      v332 = (unint64_t *)&v331->__shared_owners_;
      do
        v333 = __ldaxr(v332);
      while (__stlxr(v333 - 1, v332));
      if (!v333)
      {
        ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
        std::__shared_weak_count::__release_weak(v331);
      }
    }
    MEMORY[0x1A1AF4E00](v330, 0x1020C40AD78EA61);
  }
  if (v323)
  {
    v334 = (unint64_t *)&v323->__shared_owners_;
    do
      v335 = __ldaxr(v334);
    while (__stlxr(v335 - 1, v334));
    if (!v335)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  v336 = operator new();
  v337 = v336;
  v338 = *(_QWORD *)(v733 + 80);
  v339 = *(_QWORD *)(v338 + 1064);
  v340 = *(std::__shared_weak_count **)(v338 + 1072);
  if (v340)
  {
    v341 = (unint64_t *)&v340->__shared_owners_;
    do
      v342 = __ldxr(v341);
    while (__stxr(v342 + 1, v341));
    v741 = *a6;
    v743 = a6[1];
    do
      v343 = __ldxr(v341);
    while (__stxr(v343 + 1, v341));
    v798 = v741;
    v819 = v743;
    *(_QWORD *)v336 = v339;
    *(_QWORD *)(v336 + 8) = v340;
    do
      v344 = __ldxr(v341);
    while (__stxr(v344 + 1, v341));
  }
  else
  {
    v798 = *a6;
    v819 = a6[1];
    *(_QWORD *)v336 = v339;
    *(_QWORD *)(v336 + 8) = 0;
  }
  *(_QWORD *)(v336 + 104) = 0;
  *(_OWORD *)(v336 + 16) = v798;
  *(_OWORD *)(v336 + 32) = v819;
  *(_BYTE *)(v336 + 48) = 1;
  *(_WORD *)(v336 + 49) = v778;
  *(_BYTE *)(v336 + 51) = v779;
  *(_OWORD *)(v336 + 52) = xmmword_19FFB35B0;
  *(_DWORD *)(v336 + 68) = 7;
  *(_OWORD *)(v336 + 72) = v845;
  *(_DWORD *)(v336 + 88) = v846;
  *(_BYTE *)(v336 + 92) = 7;
  *(_QWORD *)(v336 + 112) = 0;
  *(_QWORD *)(v336 + 96) = v336 + 104;
  if (v340)
  {
    v345 = (unint64_t *)&v340->__shared_owners_;
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
  v347 = *v715;
  *v715 = v337;
  if (v347)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v347 + 104));
    v348 = *(std::__shared_weak_count **)(v347 + 8);
    if (v348)
    {
      v349 = (unint64_t *)&v348->__shared_owners_;
      do
        v350 = __ldaxr(v349);
      while (__stlxr(v350 - 1, v349));
      if (!v350)
      {
        ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
        std::__shared_weak_count::__release_weak(v348);
      }
    }
    MEMORY[0x1A1AF4E00](v347, 0x1020C40AD78EA61);
  }
  if (v340)
  {
    v351 = (unint64_t *)&v340->__shared_owners_;
    do
      v352 = __ldaxr(v351);
    while (__stlxr(v352 - 1, v351));
    if (!v352)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
  v353 = operator new();
  v354 = v353;
  v355 = *(_QWORD *)(v733 + 80);
  v356 = *(_QWORD *)(v355 + 1064);
  v357 = *(std::__shared_weak_count **)(v355 + 1072);
  if (v357)
  {
    v358 = (unint64_t *)&v357->__shared_owners_;
    do
      v359 = __ldxr(v358);
    while (__stxr(v359 + 1, v358));
    v737 = *a6;
    v739 = a6[1];
    do
      v360 = __ldxr(v358);
    while (__stxr(v360 + 1, v358));
    v799 = v737;
    v820 = v739;
    *(_QWORD *)v353 = v356;
    *(_QWORD *)(v353 + 8) = v357;
    v361 = a1;
    do
      v362 = __ldxr(v358);
    while (__stxr(v362 + 1, v358));
  }
  else
  {
    v799 = *a6;
    v820 = a6[1];
    *(_QWORD *)v353 = v356;
    *(_QWORD *)(v353 + 8) = 0;
    v361 = a1;
  }
  *(_QWORD *)(v353 + 104) = 0;
  *(_OWORD *)(v353 + 16) = v799;
  *(_OWORD *)(v353 + 32) = v820;
  *(_BYTE *)(v353 + 48) = 1;
  *(_WORD *)(v353 + 49) = v778;
  *(_BYTE *)(v353 + 51) = v779;
  *(_OWORD *)(v353 + 52) = xmmword_19FFB35B0;
  *(_DWORD *)(v353 + 68) = 7;
  *(_OWORD *)(v353 + 72) = v845;
  *(_DWORD *)(v353 + 88) = v846;
  *(_BYTE *)(v353 + 92) = 7;
  *(_QWORD *)(v353 + 112) = 0;
  *(_QWORD *)(v353 + 96) = v353 + 104;
  if (v357)
  {
    v363 = (unint64_t *)&v357->__shared_owners_;
    do
      v364 = __ldaxr(v363);
    while (__stlxr(v364 - 1, v363));
    if (!v364)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  v365 = *v713;
  *v713 = v354;
  if (v365)
  {
    std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(v365 + 104));
    v366 = *(std::__shared_weak_count **)(v365 + 8);
    if (v366)
    {
      v367 = (unint64_t *)&v366->__shared_owners_;
      do
        v368 = __ldaxr(v367);
      while (__stlxr(v368 - 1, v367));
      if (!v368)
      {
        ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
        std::__shared_weak_count::__release_weak(v366);
      }
    }
    MEMORY[0x1A1AF4E00](v365, 0x1020C40AD78EA61);
    v361 = a1;
  }
  if (v357)
  {
    v369 = (unint64_t *)&v357->__shared_owners_;
    do
      v370 = __ldaxr(v369);
    while (__stlxr(v370 - 1, v369));
    if (!v370)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  *((_OWORD *)v361 + 8) = 0u;
  v371 = v361 + 16;
  *((_OWORD *)v371 + 1) = 0u;
  v732 = v371 + 2;
  *((_OWORD *)v371 + 2) = 0u;
  v372 = v371 + 4;
  *((_OWORD *)v371 + 3) = 0u;
  v373 = v371 + 6;
  v734 = v371 + 1;
  v730 = v371 + 3;
  v728 = v371 + 5;
  *((_OWORD *)v371 + 6) = 0u;
  *((_OWORD *)v371 + 7) = 0u;
  *((_OWORD *)v371 + 4) = 0u;
  *((_OWORD *)v371 + 5) = 0u;
  if (a7)
  {
    v374 = operator new();
    *(_DWORD *)(v374 + 32) = 0;
    *(_QWORD *)(v374 + 16) = 0;
    *(_QWORD *)(v374 + 24) = 0;
    *(_QWORD *)v374 = &off_1E42B5DE8;
    *(_QWORD *)(v374 + 8) = 0;
    *(_QWORD *)(v374 + 36) = 65537;
    *(_DWORD *)(v374 + 44) = 0;
    *(_QWORD *)(v374 + 48) = 1;
    *(_WORD *)(v374 + 56) = 0;
    *(_BYTE *)(v374 + 58) = 3;
    *(_QWORD *)(v374 + 67) = 0;
    *(_QWORD *)(v374 + 59) = 0;
    *(_BYTE *)(v374 + 75) = 0;
    *(_QWORD *)(v374 + 132) = 0;
    *(_QWORD *)(v374 + 124) = 0;
    *(_WORD *)(v374 + 188) = 257;
    *(_QWORD *)(v374 + 192) = 0;
    *(_QWORD *)(v374 + 200) = 0;
    *(_BYTE *)(v374 + 208) = 0;
    v375 = *v373;
    *v373 = v374;
    if (v375)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v375 + 8))(v375);
      v374 = *v373;
    }
    *(_BYTE *)(v374 + 208) = 1;
    *(_BYTE *)(v374 + 56) = 0;
  }
  v376 = operator new();
  *(_DWORD *)(v376 + 32) = 0;
  *(_QWORD *)(v376 + 16) = 0;
  *(_QWORD *)(v376 + 24) = 0;
  *(_QWORD *)v376 = &off_1E42B5DE8;
  *(_QWORD *)(v376 + 8) = 0;
  *(_QWORD *)(v376 + 36) = 65537;
  *(_DWORD *)(v376 + 44) = 0;
  *(_QWORD *)(v376 + 48) = 0x7F0000000600;
  *(_WORD *)(v376 + 56) = 0;
  *(_BYTE *)(v376 + 58) = 3;
  *(_QWORD *)(v376 + 67) = 0;
  *(_QWORD *)(v376 + 59) = 0;
  *(_BYTE *)(v376 + 75) = 0;
  *(_QWORD *)(v376 + 132) = 0;
  *(_QWORD *)(v376 + 124) = 0;
  *(_WORD *)(v376 + 188) = 257;
  *(_QWORD *)(v376 + 192) = 0;
  *(_QWORD *)(v376 + 200) = 0;
  *(_BYTE *)(v376 + 208) = 0;
  v377 = a1[23];
  a1[23] = v376;
  if (v377)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
    v376 = a1[23];
  }
  *(_BYTE *)(v376 + 208) = 1;
  *(_BYTE *)(v376 + 56) = 0;
  v378 = operator new();
  *(_DWORD *)(v378 + 32) = 0;
  *(_QWORD *)(v378 + 16) = 0;
  *(_QWORD *)(v378 + 24) = 0;
  *(_QWORD *)v378 = &off_1E42B5DE8;
  *(_QWORD *)(v378 + 8) = 0;
  *(_QWORD *)(v378 + 36) = 65792;
  *(_DWORD *)(v378 + 44) = 0;
  *(_QWORD *)(v378 + 48) = 0x7F0000000600;
  *(_WORD *)(v378 + 56) = 0;
  *(_BYTE *)(v378 + 58) = 3;
  *(_QWORD *)(v378 + 67) = 0;
  *(_QWORD *)(v378 + 59) = 0;
  *(_BYTE *)(v378 + 75) = 0;
  *(_QWORD *)(v378 + 132) = 0;
  *(_QWORD *)(v378 + 124) = 0;
  *(_WORD *)(v378 + 188) = 257;
  *(_QWORD *)(v378 + 192) = 0;
  *(_QWORD *)(v378 + 200) = 0;
  *(_BYTE *)(v378 + 208) = 0;
  v379 = a1[25];
  a1[25] = v378;
  if (v379)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v379 + 8))(v379);
    v378 = a1[25];
  }
  *(_BYTE *)(v378 + 208) = 1;
  v380 = operator new();
  *(_DWORD *)(v380 + 32) = 0;
  *(_QWORD *)(v380 + 16) = 0;
  *(_QWORD *)(v380 + 24) = 0;
  *(_QWORD *)v380 = &off_1E42B5DE8;
  *(_QWORD *)(v380 + 8) = 0;
  *(_QWORD *)(v380 + 36) = 65537;
  *(_DWORD *)(v380 + 44) = 0;
  *(_QWORD *)(v380 + 48) = 0x7F0000000600;
  *(_WORD *)(v380 + 56) = 0;
  *(_BYTE *)(v380 + 58) = 3;
  *(_QWORD *)(v380 + 67) = 0;
  *(_QWORD *)(v380 + 59) = 0;
  *(_BYTE *)(v380 + 75) = 0;
  *(_QWORD *)(v380 + 132) = 0;
  *(_QWORD *)(v380 + 124) = 0;
  *(_WORD *)(v380 + 188) = 257;
  *(_QWORD *)(v380 + 192) = 0;
  *(_QWORD *)(v380 + 200) = 0;
  *(_BYTE *)(v380 + 208) = 0;
  v381 = a1[26];
  a1[26] = v380;
  if (v381)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
    v380 = a1[26];
  }
  *(_BYTE *)(v380 + 56) = 0;
  *(_BYTE *)(v380 + 208) = 1;
  v382 = operator new();
  *(_DWORD *)(v382 + 32) = 0;
  *(_QWORD *)(v382 + 16) = 0;
  *(_QWORD *)(v382 + 24) = 0;
  *(_QWORD *)v382 = &off_1E42B5DE8;
  *(_QWORD *)(v382 + 8) = 0;
  *(_QWORD *)(v382 + 36) = 65537;
  *(_DWORD *)(v382 + 44) = 0;
  *(_QWORD *)(v382 + 48) = 1;
  *(_WORD *)(v382 + 56) = 0;
  *(_BYTE *)(v382 + 58) = 3;
  *(_QWORD *)(v382 + 67) = 0;
  *(_QWORD *)(v382 + 59) = 0;
  *(_BYTE *)(v382 + 75) = 0;
  *(_QWORD *)(v382 + 132) = 0;
  *(_QWORD *)(v382 + 124) = 0;
  *(_WORD *)(v382 + 188) = 257;
  *(_QWORD *)(v382 + 192) = 0;
  *(_QWORD *)(v382 + 200) = 0;
  *(_BYTE *)(v382 + 208) = 0;
  v383 = a1[28];
  a1[28] = v382;
  if (v383)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
    v382 = a1[28];
  }
  *(_BYTE *)(v382 + 56) = 0;
  v384 = operator new();
  *(_DWORD *)(v384 + 32) = 0;
  *(_QWORD *)(v384 + 16) = 0;
  *(_QWORD *)(v384 + 24) = 0;
  *(_QWORD *)v384 = &off_1E42B5DE8;
  *(_QWORD *)(v384 + 8) = 0;
  *(_QWORD *)(v384 + 36) = 65537;
  *(_DWORD *)(v384 + 44) = 0;
  *(_QWORD *)(v384 + 48) = 0x7F0000000600;
  *(_WORD *)(v384 + 56) = 0;
  *(_BYTE *)(v384 + 58) = 3;
  *(_QWORD *)(v384 + 67) = 0;
  *(_QWORD *)(v384 + 59) = 0;
  *(_BYTE *)(v384 + 75) = 0;
  *(_QWORD *)(v384 + 132) = 0;
  *(_QWORD *)(v384 + 124) = 0;
  *(_WORD *)(v384 + 188) = 257;
  *(_QWORD *)(v384 + 192) = 0;
  *(_QWORD *)(v384 + 200) = 0;
  *(_BYTE *)(v384 + 208) = 0;
  v385 = a1[29];
  a1[29] = v384;
  if (v385)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v385 + 8))(v385);
    v384 = a1[29];
  }
  *(_BYTE *)(v384 + 208) = 1;
  *(_BYTE *)(v384 + 56) = 0;
  v386 = operator new();
  *(_DWORD *)(v386 + 32) = 0;
  *(_QWORD *)(v386 + 16) = 0;
  *(_QWORD *)(v386 + 24) = 0;
  *(_QWORD *)v386 = &off_1E42B5DE8;
  *(_QWORD *)(v386 + 8) = 0;
  *(_QWORD *)(v386 + 36) = 65792;
  *(_DWORD *)(v386 + 44) = 0;
  *(_QWORD *)(v386 + 48) = 1;
  *(_WORD *)(v386 + 56) = 0;
  *(_BYTE *)(v386 + 58) = 3;
  *(_QWORD *)(v386 + 67) = 0;
  *(_QWORD *)(v386 + 59) = 0;
  *(_BYTE *)(v386 + 75) = 0;
  *(_QWORD *)(v386 + 132) = 0;
  *(_QWORD *)(v386 + 124) = 0;
  *(_WORD *)(v386 + 188) = 257;
  *(_QWORD *)(v386 + 192) = 0;
  *(_QWORD *)(v386 + 200) = 0;
  *(_BYTE *)(v386 + 208) = 0;
  v387 = a1[30];
  a1[30] = v386;
  if (v387)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
    v386 = a1[30];
  }
  *(_BYTE *)(v386 + 56) = 0;
  v388 = operator new();
  *(_DWORD *)(v388 + 32) = 0;
  *(_QWORD *)(v388 + 16) = 0;
  *(_QWORD *)(v388 + 24) = 0;
  *(_QWORD *)v388 = &off_1E42B5DE8;
  *(_QWORD *)(v388 + 8) = 0;
  *(_QWORD *)(v388 + 36) = 66560;
  *(_DWORD *)(v388 + 44) = 0;
  *(_QWORD *)(v388 + 48) = 1;
  *(_WORD *)(v388 + 56) = 0;
  *(_BYTE *)(v388 + 58) = 3;
  *(_QWORD *)(v388 + 67) = 0;
  *(_QWORD *)(v388 + 59) = 0;
  *(_BYTE *)(v388 + 75) = 0;
  *(_QWORD *)(v388 + 132) = 0;
  *(_QWORD *)(v388 + 124) = 0;
  *(_WORD *)(v388 + 188) = 257;
  *(_QWORD *)(v388 + 192) = 0;
  *(_QWORD *)(v388 + 200) = 0;
  *(_BYTE *)(v388 + 208) = 0;
  v389 = a1[31];
  a1[31] = v388;
  if (v389)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
    v388 = a1[31];
  }
  *(_BYTE *)(v388 + 56) = 0;
  a1[32] = a3;
  a1[33] = a4;
  a1[34] = 0;
  a1[35] = 0;
  a1[36] = *a5;
  v390 = a5[1];
  a1[37] = v390;
  if (v390)
  {
    v391 = (unint64_t *)(v390 + 8);
    do
      v392 = __ldxr(v391);
    while (__stxr(v392 + 1, v391));
  }
  *((_BYTE *)a1 + 304) = a7;
  v393 = (std::__shared_weak_count *)operator new(0x60uLL);
  v393->__shared_owners_ = 0;
  v394 = (unint64_t *)&v393->__shared_owners_;
  v393->__shared_weak_owners_ = 0;
  v393->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v395 = v393 + 1;
  v396 = ggl::TextureData2D::TextureData2D((uint64_t)&v393[1], 1, 1, 1u, 12, 0);
  v800 = v393;
  *(_BYTE *)((uint64_t (*)(_QWORD *, _QWORD))v393[1].__on_zero_shared)(v396, 0) = 127;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v395->__on_zero_shared)(v395, 0) + 1) = 127;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v395->__on_zero_shared)(v395, 0) + 2) = 127;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v395->__on_zero_shared)(v395, 0) + 3) = -1;
  v397 = (std::__shared_weak_count *)operator new(0x58uLL);
  v397->__shared_owners_ = 0;
  v398 = (unint64_t *)&v397->__shared_owners_;
  v397->__shared_weak_owners_ = 0;
  v397->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v397[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v397[1].__shared_weak_owners_ = 0;
  v397[2].__vftable = 0;
  v397[1].__shared_owners_ = 0;
  LODWORD(v397[2].__shared_owners_) = 0;
  HIDWORD(v397[2].__shared_weak_owners_) = 1;
  *(uint64_t *)((char *)&v397[2].__shared_owners_ + 4) = 0x100000001;
  v397[3].__vftable = 0;
  v397[3].__shared_owners_ = 0;
  v399 = operator new(0xB0uLL);
  v400 = v399;
  v399[1] = 0;
  v399[2] = 0;
  *v399 = &off_1E42E53B0;
  v401 = (char *)(v399 + 3);
  do
    v402 = __ldxr(v394);
  while (__stxr(v402 + 1, v394));
  v399[13] = 0;
  v399[5] = 0;
  v399[6] = 0;
  *((_DWORD *)v399 + 14) = 0;
  v399[10] = 0x100000001;
  shared_owners = v393[1].__shared_owners_;
  shared_owners_high = HIDWORD(v393[1].__shared_owners_);
  *((_DWORD *)v399 + 22) = 0;
  *((_DWORD *)v399 + 23) = shared_owners_high;
  v399[12] = 0x100000001;
  v399[14] = 0;
  v399[15] = 0;
  v399[3] = &off_1E42BE438;
  v399[4] = 0;
  v399[8] = &unk_1E42BE458;
  v399[9] = "";
  *((_DWORD *)v399 + 32) = shared_owners;
  v399[17] = v395;
  v399[18] = v393;
  do
    v405 = __ldxr(v394);
  while (__stxr(v405 + 1, v394));
  *((_WORD *)v399 + 76) = 0;
  *((_BYTE *)v399 + 154) = 1;
  v399[20] = v397 + 1;
  v399[21] = v397;
  do
    v406 = __ldxr(v398);
  while (__stxr(v406 + 1, v398));
  v399[13] = v393[1].__shared_weak_owners_;
  do
    v407 = __ldaxr(v394);
  while (__stlxr(v407 - 1, v394));
  if (!v407)
  {
    ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
    std::__shared_weak_count::__release_weak(v393);
  }
  v408 = (std::__shared_weak_count *)a1[35];
  a1[34] = (uint64_t)v401;
  a1[35] = (uint64_t)v400;
  if (v408)
  {
    v409 = (unint64_t *)&v408->__shared_owners_;
    do
      v410 = __ldaxr(v409);
    while (__stlxr(v410 - 1, v409));
    if (!v410)
    {
      ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
      std::__shared_weak_count::__release_weak(v408);
    }
  }
  if (v397)
  {
    v411 = (unint64_t *)&v397->__shared_owners_;
    do
      v412 = __ldaxr(v411);
    while (__stlxr(v412 - 1, v411));
    if (!v412)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
  v413 = (uint64_t *)operator new();
  v844 = v843;
  v841[0] = &off_1E42D6F20;
  v842 = v841;
  v843[0] = &off_1E42D3910;
  v413[1] = 0;
  v413[2] = 0;
  *v413 = 0;
  {
    v698 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v698, "GeoGL", 0xA3D02C1100000005);
  }
  v415 = ggl::Allocator::instance(void)::alloc;
  v413[4] = 0;
  v413[3] = v415;
  v413[5] = 0;
  v413[6] = 0;
  {
    v699 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v699, "GeoGL", 0xA3D02C1100000005);
  }
  v413[7] = ggl::Allocator::instance(void)::alloc;
  v416 = (uint64_t)v844;
  if (!v844)
    goto LABEL_573;
  if (v844 != v843)
  {
    v416 = (*(uint64_t (**)(void))(*v844 + 16))();
LABEL_573:
    v413[11] = v416;
    goto LABEL_575;
  }
  v413[11] = (uint64_t)(v413 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v843[0] + 24))(v843, v413 + 8);
LABEL_575:
  v417 = (uint64_t)v842;
  if (!v842)
  {
LABEL_578:
    v413[15] = v417;
    goto LABEL_580;
  }
  if (v842 != v841)
  {
    v417 = (*(uint64_t (**)(void))(*v842 + 16))();
    goto LABEL_578;
  }
  v413[15] = (uint64_t)(v413 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v841[0] + 24))((uint64_t)v841, v413 + 12);
LABEL_580:
  v413[16] = 2000;
  v418 = *v413;
  if ((unint64_t)(v413[2] - *v413) > 0x31F)
    goto LABEL_593;
  v419 = v413[1];
  v420 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v413[3] + 16))(v413[3], 800, 8);
  v421 = v419 - v418;
  v422 = v420 + ((v419 - v418) & 0xFFFFFFFFFFFFFFF8);
  v424 = *v413;
  v423 = v413[1];
  v425 = v423 - *v413;
  if (v423 == *v413)
  {
    v427 = v420 + ((v419 - v418) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_591;
  }
  v426 = v425 - 8;
  if ((unint64_t)(v425 - 8) >= 0x58)
  {
    v427 = v420 + ((v419 - v418) & 0xFFFFFFFFFFFFFFF8);
    if (v423 - (v421 & 0xFFFFFFFFFFFFFFF8) - v420 >= 0x20)
    {
      v428 = v421 >> 3;
      v429 = (v426 >> 3) + 1;
      v430 = (_OWORD *)(v420 + 8 * v428 - 16);
      v431 = (__int128 *)(v423 - 16);
      v432 = v429 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v433 = *v431;
        *(v430 - 1) = *(v431 - 1);
        *v430 = v433;
        v430 -= 2;
        v431 -= 2;
        v432 -= 4;
      }
      while (v432);
      v427 = v422 - 8 * (v429 & 0x3FFFFFFFFFFFFFFCLL);
      v423 -= 8 * (v429 & 0x3FFFFFFFFFFFFFFCLL);
      if (v429 == (v429 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_590;
    }
  }
  else
  {
    v427 = v420 + ((v419 - v418) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v434 = *(_QWORD *)(v423 - 8);
    v423 -= 8;
    *(_QWORD *)(v427 - 8) = v434;
    v427 -= 8;
  }
  while (v423 != v424);
LABEL_590:
  v423 = *v413;
LABEL_591:
  *v413 = v427;
  v413[1] = v422;
  v435 = v413[2];
  v413[2] = v420 + 800;
  if (v423)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v413[3] + 40))(v413[3], v423, v435 - v423);
LABEL_593:
  v436 = v413[4];
  if ((unint64_t)(v413[6] - v436) > 0x31F)
    goto LABEL_606;
  v437 = v413[5];
  v438 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v413[7] + 16))(v413[7], 800, 8);
  v439 = v437 - v436;
  v440 = v438 + ((v437 - v436) & 0xFFFFFFFFFFFFFFF8);
  v442 = v413[4];
  v441 = v413[5];
  v443 = v441 - v442;
  if (v441 == v442)
  {
    v445 = v438 + ((v437 - v436) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_604;
  }
  v444 = v443 - 8;
  if ((unint64_t)(v443 - 8) >= 0x58)
  {
    v445 = v438 + ((v437 - v436) & 0xFFFFFFFFFFFFFFF8);
    if (v441 - (v439 & 0xFFFFFFFFFFFFFFF8) - v438 >= 0x20)
    {
      v446 = v439 >> 3;
      v447 = (v444 >> 3) + 1;
      v448 = (_OWORD *)(v438 + 8 * v446 - 16);
      v449 = (__int128 *)(v441 - 16);
      v450 = v447 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v451 = *v449;
        *(v448 - 1) = *(v449 - 1);
        *v448 = v451;
        v448 -= 2;
        v449 -= 2;
        v450 -= 4;
      }
      while (v450);
      v445 = v440 - 8 * (v447 & 0x3FFFFFFFFFFFFFFCLL);
      v441 -= 8 * (v447 & 0x3FFFFFFFFFFFFFFCLL);
      if (v447 == (v447 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_603;
    }
  }
  else
  {
    v445 = v438 + ((v437 - v436) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v452 = *(_QWORD *)(v441 - 8);
    v441 -= 8;
    *(_QWORD *)(v445 - 8) = v452;
    v445 -= 8;
  }
  while (v441 != v442);
LABEL_603:
  v441 = v413[4];
LABEL_604:
  v413[4] = v445;
  v413[5] = v440;
  v453 = v413[6];
  v413[6] = v438 + 800;
  if (v441)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v413[7] + 40))(v413[7], v441, v453 - v441);
LABEL_606:
  v454 = *v371;
  *v371 = (uint64_t)v413;
  if (v454)
  {
    v455 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v454);
    MEMORY[0x1A1AF4E00](v455, 0x10A0C40D234DDC7);
  }
  v456 = v842;
  if (v842 == v841)
  {
    v457 = 4;
    v456 = v841;
  }
  else
  {
    if (!v842)
      goto LABEL_613;
    v457 = 5;
  }
  (*(void (**)(void))(*v456 + 8 * v457))();
LABEL_613:
  v458 = v844;
  if (v844 == v843)
  {
    v459 = 4;
    v458 = v843;
    goto LABEL_617;
  }
  if (v844)
  {
    v459 = 5;
LABEL_617:
    (*(void (**)(void))(*v458 + 8 * v459))();
  }
  v460 = (uint64_t *)operator new();
  v839[0] = &off_1E42D3958;
  v840 = v839;
  v837[0] = &off_1E42D6F68;
  v838 = v837;
  v460[1] = 0;
  v460[2] = 0;
  *v460 = 0;
  {
    v700 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v700, "GeoGL", 0xA3D02C1100000005);
  }
  v462 = ggl::Allocator::instance(void)::alloc;
  v460[4] = 0;
  v460[3] = v462;
  v460[5] = 0;
  v460[6] = 0;
  {
    v701 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v701, "GeoGL", 0xA3D02C1100000005);
  }
  v460[7] = ggl::Allocator::instance(void)::alloc;
  v463 = (uint64_t)v840;
  if (!v840)
    goto LABEL_623;
  if (v840 != v839)
  {
    v463 = (*(uint64_t (**)(void))(*v840 + 16))();
LABEL_623:
    v460[11] = v463;
    goto LABEL_625;
  }
  v460[11] = (uint64_t)(v460 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v839[0] + 24))((uint64_t)v839, v460 + 8);
LABEL_625:
  v464 = (uint64_t)v838;
  if (!v838)
  {
LABEL_628:
    v460[15] = v464;
    goto LABEL_630;
  }
  if (v838 != v837)
  {
    v464 = (*(uint64_t (**)(void))(*v838 + 16))();
    goto LABEL_628;
  }
  v460[15] = (uint64_t)(v460 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v837[0] + 24))((uint64_t)v837, v460 + 12);
LABEL_630:
  v460[16] = 2000;
  v465 = *v460;
  if ((unint64_t)(v460[2] - *v460) > 0x31F)
    goto LABEL_643;
  v466 = v460[1];
  v467 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v460[3] + 16))(v460[3], 800, 8);
  v468 = v466 - v465;
  v469 = v467 + ((v466 - v465) & 0xFFFFFFFFFFFFFFF8);
  v471 = *v460;
  v470 = v460[1];
  v472 = v470 - *v460;
  if (v470 == *v460)
  {
    v474 = v467 + ((v466 - v465) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_641;
  }
  v473 = v472 - 8;
  if ((unint64_t)(v472 - 8) >= 0x58)
  {
    v474 = v467 + ((v466 - v465) & 0xFFFFFFFFFFFFFFF8);
    if (v470 - (v468 & 0xFFFFFFFFFFFFFFF8) - v467 >= 0x20)
    {
      v475 = v468 >> 3;
      v476 = (v473 >> 3) + 1;
      v477 = (_OWORD *)(v467 + 8 * v475 - 16);
      v478 = (__int128 *)(v470 - 16);
      v479 = v476 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v480 = *v478;
        *(v477 - 1) = *(v478 - 1);
        *v477 = v480;
        v477 -= 2;
        v478 -= 2;
        v479 -= 4;
      }
      while (v479);
      v474 = v469 - 8 * (v476 & 0x3FFFFFFFFFFFFFFCLL);
      v470 -= 8 * (v476 & 0x3FFFFFFFFFFFFFFCLL);
      if (v476 == (v476 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_640;
    }
  }
  else
  {
    v474 = v467 + ((v466 - v465) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v481 = *(_QWORD *)(v470 - 8);
    v470 -= 8;
    *(_QWORD *)(v474 - 8) = v481;
    v474 -= 8;
  }
  while (v470 != v471);
LABEL_640:
  v470 = *v460;
LABEL_641:
  *v460 = v474;
  v460[1] = v469;
  v482 = v460[2];
  v460[2] = v467 + 800;
  if (v470)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v460[3] + 40))(v460[3], v470, v482 - v470);
LABEL_643:
  v483 = v460[4];
  if ((unint64_t)(v460[6] - v483) > 0x31F)
    goto LABEL_656;
  v484 = v460[5];
  v485 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v460[7] + 16))(v460[7], 800, 8);
  v486 = v484 - v483;
  v487 = v485 + ((v484 - v483) & 0xFFFFFFFFFFFFFFF8);
  v489 = v460[4];
  v488 = v460[5];
  v490 = v488 - v489;
  if (v488 == v489)
  {
    v492 = v485 + ((v484 - v483) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_654;
  }
  v491 = v490 - 8;
  if ((unint64_t)(v490 - 8) >= 0x58)
  {
    v492 = v485 + ((v484 - v483) & 0xFFFFFFFFFFFFFFF8);
    if (v488 - (v486 & 0xFFFFFFFFFFFFFFF8) - v485 >= 0x20)
    {
      v493 = v486 >> 3;
      v494 = (v491 >> 3) + 1;
      v495 = (_OWORD *)(v485 + 8 * v493 - 16);
      v496 = (__int128 *)(v488 - 16);
      v497 = v494 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v498 = *v496;
        *(v495 - 1) = *(v496 - 1);
        *v495 = v498;
        v495 -= 2;
        v496 -= 2;
        v497 -= 4;
      }
      while (v497);
      v492 = v487 - 8 * (v494 & 0x3FFFFFFFFFFFFFFCLL);
      v488 -= 8 * (v494 & 0x3FFFFFFFFFFFFFFCLL);
      if (v494 == (v494 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_653;
    }
  }
  else
  {
    v492 = v485 + ((v484 - v483) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v499 = *(_QWORD *)(v488 - 8);
    v488 -= 8;
    *(_QWORD *)(v492 - 8) = v499;
    v492 -= 8;
  }
  while (v488 != v489);
LABEL_653:
  v488 = v460[4];
LABEL_654:
  v460[4] = v492;
  v460[5] = v487;
  v500 = v460[6];
  v460[6] = v485 + 800;
  if (v488)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v460[7] + 40))(v460[7], v488, v500 - v488);
LABEL_656:
  v501 = *v734;
  *v734 = (uint64_t)v460;
  if (v501)
  {
    v502 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v501);
    MEMORY[0x1A1AF4E00](v502, 0x10A0C40D234DDC7);
  }
  v503 = v838;
  if (v838 == v837)
  {
    v504 = 4;
    v503 = v837;
  }
  else
  {
    if (!v838)
      goto LABEL_663;
    v504 = 5;
  }
  (*(void (**)(void))(*v503 + 8 * v504))();
LABEL_663:
  v505 = v840;
  if (v840 == v839)
  {
    v506 = 4;
    v505 = v839;
    goto LABEL_667;
  }
  if (v840)
  {
    v506 = 5;
LABEL_667:
    (*(void (**)(void))(*v505 + 8 * v506))();
  }
  v507 = (uint64_t *)operator new();
  v835[0] = &off_1E42D39A0;
  v836 = v835;
  v833[0] = &off_1E42D6ED8;
  v834 = v833;
  v507[1] = 0;
  v507[2] = 0;
  *v507 = 0;
  {
    v702 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v702, "GeoGL", 0xA3D02C1100000005);
  }
  v509 = ggl::Allocator::instance(void)::alloc;
  v507[4] = 0;
  v507[3] = v509;
  v507[5] = 0;
  v507[6] = 0;
  {
    v703 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v703, "GeoGL", 0xA3D02C1100000005);
  }
  v507[7] = ggl::Allocator::instance(void)::alloc;
  v510 = (uint64_t)v836;
  if (!v836)
    goto LABEL_673;
  if (v836 != v835)
  {
    v510 = (*(uint64_t (**)(void))(*v836 + 16))();
LABEL_673:
    v507[11] = v510;
    goto LABEL_675;
  }
  v507[11] = (uint64_t)(v507 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v835[0] + 24))((uint64_t)v835, v507 + 8);
LABEL_675:
  v511 = (uint64_t)v834;
  if (!v834)
  {
LABEL_678:
    v507[15] = v511;
    goto LABEL_680;
  }
  if (v834 != v833)
  {
    v511 = (*(uint64_t (**)(void))(*v834 + 16))();
    goto LABEL_678;
  }
  v507[15] = (uint64_t)(v507 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v833[0] + 24))((uint64_t)v833, v507 + 12);
LABEL_680:
  v507[16] = 2000;
  v512 = *v507;
  if ((unint64_t)(v507[2] - *v507) > 0x31F)
    goto LABEL_693;
  v513 = v507[1];
  v514 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v507[3] + 16))(v507[3], 800, 8);
  v515 = v513 - v512;
  v516 = v514 + ((v513 - v512) & 0xFFFFFFFFFFFFFFF8);
  v518 = *v507;
  v517 = v507[1];
  v519 = v517 - *v507;
  if (v517 == *v507)
  {
    v521 = v514 + ((v513 - v512) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_691;
  }
  v520 = v519 - 8;
  if ((unint64_t)(v519 - 8) >= 0x58)
  {
    v521 = v514 + ((v513 - v512) & 0xFFFFFFFFFFFFFFF8);
    if (v517 - (v515 & 0xFFFFFFFFFFFFFFF8) - v514 >= 0x20)
    {
      v522 = v515 >> 3;
      v523 = (v520 >> 3) + 1;
      v524 = (_OWORD *)(v514 + 8 * v522 - 16);
      v525 = (__int128 *)(v517 - 16);
      v526 = v523 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v527 = *v525;
        *(v524 - 1) = *(v525 - 1);
        *v524 = v527;
        v524 -= 2;
        v525 -= 2;
        v526 -= 4;
      }
      while (v526);
      v521 = v516 - 8 * (v523 & 0x3FFFFFFFFFFFFFFCLL);
      v517 -= 8 * (v523 & 0x3FFFFFFFFFFFFFFCLL);
      if (v523 == (v523 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_690;
    }
  }
  else
  {
    v521 = v514 + ((v513 - v512) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v528 = *(_QWORD *)(v517 - 8);
    v517 -= 8;
    *(_QWORD *)(v521 - 8) = v528;
    v521 -= 8;
  }
  while (v517 != v518);
LABEL_690:
  v517 = *v507;
LABEL_691:
  *v507 = v521;
  v507[1] = v516;
  v529 = v507[2];
  v507[2] = v514 + 800;
  if (v517)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v507[3] + 40))(v507[3], v517, v529 - v517);
LABEL_693:
  v530 = v507[4];
  if ((unint64_t)(v507[6] - v530) > 0x31F)
    goto LABEL_706;
  v531 = v507[5];
  v532 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v507[7] + 16))(v507[7], 800, 8);
  v533 = v531 - v530;
  v534 = v532 + ((v531 - v530) & 0xFFFFFFFFFFFFFFF8);
  v536 = v507[4];
  v535 = v507[5];
  v537 = v535 - v536;
  if (v535 == v536)
  {
    v539 = v532 + ((v531 - v530) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_704;
  }
  v538 = v537 - 8;
  if ((unint64_t)(v537 - 8) >= 0x58)
  {
    v539 = v532 + ((v531 - v530) & 0xFFFFFFFFFFFFFFF8);
    if (v535 - (v533 & 0xFFFFFFFFFFFFFFF8) - v532 >= 0x20)
    {
      v540 = v533 >> 3;
      v541 = (v538 >> 3) + 1;
      v542 = (_OWORD *)(v532 + 8 * v540 - 16);
      v543 = (__int128 *)(v535 - 16);
      v544 = v541 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v545 = *v543;
        *(v542 - 1) = *(v543 - 1);
        *v542 = v545;
        v542 -= 2;
        v543 -= 2;
        v544 -= 4;
      }
      while (v544);
      v539 = v534 - 8 * (v541 & 0x3FFFFFFFFFFFFFFCLL);
      v535 -= 8 * (v541 & 0x3FFFFFFFFFFFFFFCLL);
      if (v541 == (v541 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_703;
    }
  }
  else
  {
    v539 = v532 + ((v531 - v530) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v546 = *(_QWORD *)(v535 - 8);
    v535 -= 8;
    *(_QWORD *)(v539 - 8) = v546;
    v539 -= 8;
  }
  while (v535 != v536);
LABEL_703:
  v535 = v507[4];
LABEL_704:
  v507[4] = v539;
  v507[5] = v534;
  v547 = v507[6];
  v507[6] = v532 + 800;
  if (v535)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v507[7] + 40))(v507[7], v535, v547 - v535);
LABEL_706:
  v548 = *v732;
  *v732 = (uint64_t)v507;
  if (v548)
  {
    v549 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v548);
    MEMORY[0x1A1AF4E00](v549, 0x10A0C40D234DDC7);
  }
  v550 = v834;
  if (v834 == v833)
  {
    v551 = 4;
    v550 = v833;
  }
  else
  {
    if (!v834)
      goto LABEL_713;
    v551 = 5;
  }
  (*(void (**)(void))(*v550 + 8 * v551))();
LABEL_713:
  v552 = v836;
  if (v836 == v835)
  {
    v553 = 4;
    v552 = v835;
    goto LABEL_717;
  }
  if (v836)
  {
    v553 = 5;
LABEL_717:
    (*(void (**)(void))(*v552 + 8 * v553))();
  }
  v554 = (uint64_t *)operator new();
  v831[0] = &off_1E42D39E8;
  v832 = v831;
  v829[0] = &off_1E42D7310;
  v830 = v829;
  v554[1] = 0;
  v554[2] = 0;
  *v554 = 0;
  {
    v704 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v704, "GeoGL", 0xA3D02C1100000005);
  }
  v556 = ggl::Allocator::instance(void)::alloc;
  v554[4] = 0;
  v554[3] = v556;
  v554[5] = 0;
  v554[6] = 0;
  {
    v705 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v705, "GeoGL", 0xA3D02C1100000005);
  }
  v554[7] = ggl::Allocator::instance(void)::alloc;
  v557 = (uint64_t)v832;
  if (!v832)
    goto LABEL_723;
  if (v832 != v831)
  {
    v557 = (*(uint64_t (**)(void))(*v832 + 16))();
LABEL_723:
    v554[11] = v557;
    goto LABEL_725;
  }
  v554[11] = (uint64_t)(v554 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v831[0] + 24))((uint64_t)v831, v554 + 8);
LABEL_725:
  v558 = (uint64_t)v830;
  if (!v830)
  {
LABEL_728:
    v554[15] = v558;
    goto LABEL_730;
  }
  if (v830 != v829)
  {
    v558 = (*(uint64_t (**)(void))(*v830 + 16))();
    goto LABEL_728;
  }
  v554[15] = (uint64_t)(v554 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v829[0] + 24))((uint64_t)v829, v554 + 12);
LABEL_730:
  v554[16] = 2000;
  v559 = *v554;
  if ((unint64_t)(v554[2] - *v554) > 0x31F)
    goto LABEL_743;
  v560 = v554[1];
  v561 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v554[3] + 16))(v554[3], 800, 8);
  v562 = v560 - v559;
  v563 = v561 + ((v560 - v559) & 0xFFFFFFFFFFFFFFF8);
  v565 = *v554;
  v564 = v554[1];
  v566 = v564 - *v554;
  if (v564 == *v554)
  {
    v568 = v561 + ((v560 - v559) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_741;
  }
  v567 = v566 - 8;
  if ((unint64_t)(v566 - 8) >= 0x58)
  {
    v568 = v561 + ((v560 - v559) & 0xFFFFFFFFFFFFFFF8);
    if (v564 - (v562 & 0xFFFFFFFFFFFFFFF8) - v561 >= 0x20)
    {
      v569 = v562 >> 3;
      v570 = (v567 >> 3) + 1;
      v571 = (_OWORD *)(v561 + 8 * v569 - 16);
      v572 = (__int128 *)(v564 - 16);
      v573 = v570 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v574 = *v572;
        *(v571 - 1) = *(v572 - 1);
        *v571 = v574;
        v571 -= 2;
        v572 -= 2;
        v573 -= 4;
      }
      while (v573);
      v568 = v563 - 8 * (v570 & 0x3FFFFFFFFFFFFFFCLL);
      v564 -= 8 * (v570 & 0x3FFFFFFFFFFFFFFCLL);
      if (v570 == (v570 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_740;
    }
  }
  else
  {
    v568 = v561 + ((v560 - v559) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v575 = *(_QWORD *)(v564 - 8);
    v564 -= 8;
    *(_QWORD *)(v568 - 8) = v575;
    v568 -= 8;
  }
  while (v564 != v565);
LABEL_740:
  v564 = *v554;
LABEL_741:
  *v554 = v568;
  v554[1] = v563;
  v576 = v554[2];
  v554[2] = v561 + 800;
  if (v564)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v554[3] + 40))(v554[3], v564, v576 - v564);
LABEL_743:
  v577 = v554[4];
  if ((unint64_t)(v554[6] - v577) > 0x31F)
    goto LABEL_756;
  v578 = v554[5];
  v579 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v554[7] + 16))(v554[7], 800, 8);
  v580 = v578 - v577;
  v581 = v579 + ((v578 - v577) & 0xFFFFFFFFFFFFFFF8);
  v583 = v554[4];
  v582 = v554[5];
  v584 = v582 - v583;
  if (v582 == v583)
  {
    v586 = v579 + ((v578 - v577) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_754;
  }
  v585 = v584 - 8;
  if ((unint64_t)(v584 - 8) >= 0x58)
  {
    v586 = v579 + ((v578 - v577) & 0xFFFFFFFFFFFFFFF8);
    if (v582 - (v580 & 0xFFFFFFFFFFFFFFF8) - v579 >= 0x20)
    {
      v587 = v580 >> 3;
      v588 = (v585 >> 3) + 1;
      v589 = (_OWORD *)(v579 + 8 * v587 - 16);
      v590 = (__int128 *)(v582 - 16);
      v591 = v588 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v592 = *v590;
        *(v589 - 1) = *(v590 - 1);
        *v589 = v592;
        v589 -= 2;
        v590 -= 2;
        v591 -= 4;
      }
      while (v591);
      v586 = v581 - 8 * (v588 & 0x3FFFFFFFFFFFFFFCLL);
      v582 -= 8 * (v588 & 0x3FFFFFFFFFFFFFFCLL);
      if (v588 == (v588 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_753;
    }
  }
  else
  {
    v586 = v579 + ((v578 - v577) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v593 = *(_QWORD *)(v582 - 8);
    v582 -= 8;
    *(_QWORD *)(v586 - 8) = v593;
    v586 -= 8;
  }
  while (v582 != v583);
LABEL_753:
  v582 = v554[4];
LABEL_754:
  v554[4] = v586;
  v554[5] = v581;
  v594 = v554[6];
  v554[6] = v579 + 800;
  if (v582)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v554[7] + 40))(v554[7], v582, v594 - v582);
LABEL_756:
  v595 = *v730;
  *v730 = (uint64_t)v554;
  if (v595)
  {
    v596 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v595);
    MEMORY[0x1A1AF4E00](v596, 0x10A0C40D234DDC7);
  }
  v597 = v830;
  if (v830 == v829)
  {
    v598 = 4;
    v597 = v829;
  }
  else
  {
    if (!v830)
      goto LABEL_763;
    v598 = 5;
  }
  (*(void (**)(void))(*v597 + 8 * v598))();
LABEL_763:
  v599 = v832;
  if (v832 == v831)
  {
    v600 = 4;
    v599 = v831;
    goto LABEL_767;
  }
  if (v832)
  {
    v600 = 5;
LABEL_767:
    (*(void (**)(void))(*v599 + 8 * v600))();
  }
  v601 = (uint64_t *)operator new();
  v827[0] = &off_1E42D3A30;
  v828 = v827;
  v825[0] = &off_1E42D7358;
  v826 = v825;
  v601[1] = 0;
  v601[2] = 0;
  *v601 = 0;
  {
    v706 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v706, "GeoGL", 0xA3D02C1100000005);
  }
  v603 = ggl::Allocator::instance(void)::alloc;
  v601[4] = 0;
  v601[3] = v603;
  v601[5] = 0;
  v601[6] = 0;
  {
    v707 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v707, "GeoGL", 0xA3D02C1100000005);
  }
  v601[7] = ggl::Allocator::instance(void)::alloc;
  v604 = (uint64_t)v828;
  if (!v828)
    goto LABEL_773;
  if (v828 != v827)
  {
    v604 = (*(uint64_t (**)(void))(*v828 + 16))();
LABEL_773:
    v601[11] = v604;
    goto LABEL_775;
  }
  v601[11] = (uint64_t)(v601 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v827[0] + 24))((uint64_t)v827, v601 + 8);
LABEL_775:
  v605 = (uint64_t)v826;
  if (!v826)
  {
LABEL_778:
    v601[15] = v605;
    goto LABEL_780;
  }
  if (v826 != v825)
  {
    v605 = (*(uint64_t (**)(void))(*v826 + 16))();
    goto LABEL_778;
  }
  v601[15] = (uint64_t)(v601 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v825[0] + 24))((uint64_t)v825, v601 + 12);
LABEL_780:
  v601[16] = 2000;
  v606 = *v601;
  if ((unint64_t)(v601[2] - *v601) > 0x31F)
    goto LABEL_793;
  v607 = v601[1];
  v608 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v601[3] + 16))(v601[3], 800, 8);
  v609 = v607 - v606;
  v610 = v608 + ((v607 - v606) & 0xFFFFFFFFFFFFFFF8);
  v612 = *v601;
  v611 = v601[1];
  v613 = v611 - *v601;
  if (v611 == *v601)
  {
    v615 = v608 + ((v607 - v606) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_791;
  }
  v614 = v613 - 8;
  if ((unint64_t)(v613 - 8) >= 0x58)
  {
    v615 = v608 + ((v607 - v606) & 0xFFFFFFFFFFFFFFF8);
    if (v611 - (v609 & 0xFFFFFFFFFFFFFFF8) - v608 >= 0x20)
    {
      v616 = v609 >> 3;
      v617 = (v614 >> 3) + 1;
      v618 = (_OWORD *)(v608 + 8 * v616 - 16);
      v619 = (__int128 *)(v611 - 16);
      v620 = v617 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v621 = *v619;
        *(v618 - 1) = *(v619 - 1);
        *v618 = v621;
        v618 -= 2;
        v619 -= 2;
        v620 -= 4;
      }
      while (v620);
      v615 = v610 - 8 * (v617 & 0x3FFFFFFFFFFFFFFCLL);
      v611 -= 8 * (v617 & 0x3FFFFFFFFFFFFFFCLL);
      if (v617 == (v617 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_790;
    }
  }
  else
  {
    v615 = v608 + ((v607 - v606) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v622 = *(_QWORD *)(v611 - 8);
    v611 -= 8;
    *(_QWORD *)(v615 - 8) = v622;
    v615 -= 8;
  }
  while (v611 != v612);
LABEL_790:
  v611 = *v601;
LABEL_791:
  *v601 = v615;
  v601[1] = v610;
  v623 = v601[2];
  v601[2] = v608 + 800;
  if (v611)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v601[3] + 40))(v601[3], v611, v623 - v611);
LABEL_793:
  v624 = v601[4];
  if ((unint64_t)(v601[6] - v624) > 0x31F)
    goto LABEL_806;
  v625 = v601[5];
  v626 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v601[7] + 16))(v601[7], 800, 8);
  v627 = v625 - v624;
  v628 = v626 + ((v625 - v624) & 0xFFFFFFFFFFFFFFF8);
  v630 = v601[4];
  v629 = v601[5];
  v631 = v629 - v630;
  if (v629 == v630)
  {
    v633 = v626 + ((v625 - v624) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_804;
  }
  v632 = v631 - 8;
  if ((unint64_t)(v631 - 8) >= 0x58)
  {
    v633 = v626 + ((v625 - v624) & 0xFFFFFFFFFFFFFFF8);
    if (v629 - (v627 & 0xFFFFFFFFFFFFFFF8) - v626 >= 0x20)
    {
      v634 = v627 >> 3;
      v635 = (v632 >> 3) + 1;
      v636 = (_OWORD *)(v626 + 8 * v634 - 16);
      v637 = (__int128 *)(v629 - 16);
      v638 = v635 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v639 = *v637;
        *(v636 - 1) = *(v637 - 1);
        *v636 = v639;
        v636 -= 2;
        v637 -= 2;
        v638 -= 4;
      }
      while (v638);
      v633 = v628 - 8 * (v635 & 0x3FFFFFFFFFFFFFFCLL);
      v629 -= 8 * (v635 & 0x3FFFFFFFFFFFFFFCLL);
      if (v635 == (v635 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_803;
    }
  }
  else
  {
    v633 = v626 + ((v625 - v624) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v640 = *(_QWORD *)(v629 - 8);
    v629 -= 8;
    *(_QWORD *)(v633 - 8) = v640;
    v633 -= 8;
  }
  while (v629 != v630);
LABEL_803:
  v629 = v601[4];
LABEL_804:
  v601[4] = v633;
  v601[5] = v628;
  v641 = v601[6];
  v601[6] = v626 + 800;
  if (v629)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v601[7] + 40))(v601[7], v629, v641 - v629);
LABEL_806:
  v642 = *v372;
  *v372 = (uint64_t)v601;
  if (v642)
  {
    v643 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v642);
    MEMORY[0x1A1AF4E00](v643, 0x10A0C40D234DDC7);
  }
  v644 = v826;
  if (v826 == v825)
  {
    v645 = 4;
    v644 = v825;
  }
  else
  {
    if (!v826)
      goto LABEL_813;
    v645 = 5;
  }
  (*(void (**)(void))(*v644 + 8 * v645))();
LABEL_813:
  v646 = v828;
  if (v828 == v827)
  {
    v647 = 4;
    v646 = v827;
    goto LABEL_817;
  }
  if (v828)
  {
    v647 = 5;
LABEL_817:
    (*(void (**)(void))(*v646 + 8 * v647))();
  }
  v648 = (uint64_t *)operator new();
  v823[0] = &off_1E42D3A78;
  v824 = v823;
  v821[0] = &off_1E42D72C8;
  v822 = v821;
  v648[1] = 0;
  v648[2] = 0;
  *v648 = 0;
  {
    v708 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v708, "GeoGL", 0xA3D02C1100000005);
  }
  v650 = ggl::Allocator::instance(void)::alloc;
  v648[4] = 0;
  v648[3] = v650;
  v648[5] = 0;
  v648[6] = 0;
  {
    v709 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v709, "GeoGL", 0xA3D02C1100000005);
  }
  v648[7] = ggl::Allocator::instance(void)::alloc;
  v651 = (uint64_t)v824;
  if (!v824)
    goto LABEL_823;
  if (v824 != v823)
  {
    v651 = (*(uint64_t (**)(void))(*v824 + 16))();
LABEL_823:
    v648[11] = v651;
    goto LABEL_825;
  }
  v648[11] = (uint64_t)(v648 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v823[0] + 24))((uint64_t)v823, v648 + 8);
LABEL_825:
  v652 = (uint64_t)v822;
  if (!v822)
  {
LABEL_828:
    v648[15] = v652;
    goto LABEL_830;
  }
  if (v822 != v821)
  {
    v652 = (*(uint64_t (**)(void))(*v822 + 16))();
    goto LABEL_828;
  }
  v648[15] = (uint64_t)(v648 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v821[0] + 24))((uint64_t)v821, v648 + 12);
LABEL_830:
  v648[16] = 2000;
  v653 = *v648;
  if ((unint64_t)(v648[2] - *v648) > 0x31F)
    goto LABEL_843;
  v654 = v648[1];
  v655 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v648[3] + 16))(v648[3], 800, 8);
  v656 = v654 - v653;
  v657 = v655 + ((v654 - v653) & 0xFFFFFFFFFFFFFFF8);
  v659 = *v648;
  v658 = v648[1];
  v660 = v658 - *v648;
  if (v658 == *v648)
  {
    v662 = v655 + ((v654 - v653) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_841;
  }
  v661 = v660 - 8;
  if ((unint64_t)(v660 - 8) >= 0x58)
  {
    v662 = v655 + ((v654 - v653) & 0xFFFFFFFFFFFFFFF8);
    if (v658 - (v656 & 0xFFFFFFFFFFFFFFF8) - v655 >= 0x20)
    {
      v663 = v656 >> 3;
      v664 = (v661 >> 3) + 1;
      v665 = (_OWORD *)(v655 + 8 * v663 - 16);
      v666 = (__int128 *)(v658 - 16);
      v667 = v664 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v668 = *v666;
        *(v665 - 1) = *(v666 - 1);
        *v665 = v668;
        v665 -= 2;
        v666 -= 2;
        v667 -= 4;
      }
      while (v667);
      v662 = v657 - 8 * (v664 & 0x3FFFFFFFFFFFFFFCLL);
      v658 -= 8 * (v664 & 0x3FFFFFFFFFFFFFFCLL);
      if (v664 == (v664 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_840;
    }
  }
  else
  {
    v662 = v655 + ((v654 - v653) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v669 = *(_QWORD *)(v658 - 8);
    v658 -= 8;
    *(_QWORD *)(v662 - 8) = v669;
    v662 -= 8;
  }
  while (v658 != v659);
LABEL_840:
  v658 = *v648;
LABEL_841:
  *v648 = v662;
  v648[1] = v657;
  v670 = v648[2];
  v648[2] = v655 + 800;
  if (v658)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v648[3] + 40))(v648[3], v658, v670 - v658);
LABEL_843:
  v671 = v648[4];
  if ((unint64_t)(v648[6] - v671) > 0x31F)
    goto LABEL_856;
  v672 = v648[5];
  v673 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v648[7] + 16))(v648[7], 800, 8);
  v674 = v672 - v671;
  v675 = v673 + ((v672 - v671) & 0xFFFFFFFFFFFFFFF8);
  v677 = v648[4];
  v676 = v648[5];
  v678 = v676 - v677;
  if (v676 == v677)
  {
    v680 = v673 + ((v672 - v671) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_854;
  }
  v679 = v678 - 8;
  if ((unint64_t)(v678 - 8) >= 0x58)
  {
    v680 = v673 + ((v672 - v671) & 0xFFFFFFFFFFFFFFF8);
    if (v676 - (v674 & 0xFFFFFFFFFFFFFFF8) - v673 >= 0x20)
    {
      v681 = v674 >> 3;
      v682 = (v679 >> 3) + 1;
      v683 = (_OWORD *)(v673 + 8 * v681 - 16);
      v684 = (__int128 *)(v676 - 16);
      v685 = v682 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v686 = *v684;
        *(v683 - 1) = *(v684 - 1);
        *v683 = v686;
        v683 -= 2;
        v684 -= 2;
        v685 -= 4;
      }
      while (v685);
      v680 = v675 - 8 * (v682 & 0x3FFFFFFFFFFFFFFCLL);
      v676 -= 8 * (v682 & 0x3FFFFFFFFFFFFFFCLL);
      if (v682 == (v682 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_853;
    }
  }
  else
  {
    v680 = v673 + ((v672 - v671) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v687 = *(_QWORD *)(v676 - 8);
    v676 -= 8;
    *(_QWORD *)(v680 - 8) = v687;
    v680 -= 8;
  }
  while (v676 != v677);
LABEL_853:
  v676 = v648[4];
LABEL_854:
  v648[4] = v680;
  v648[5] = v675;
  v688 = v648[6];
  v648[6] = v673 + 800;
  if (v676)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v648[7] + 40))(v648[7], v676, v688 - v676);
LABEL_856:
  v689 = *v728;
  *v728 = (uint64_t)v648;
  if (v689)
  {
    v690 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v689);
    MEMORY[0x1A1AF4E00](v690, 0x10A0C40D234DDC7);
  }
  v691 = v822;
  if (v822 == v821)
  {
    v692 = 4;
    v691 = v821;
  }
  else
  {
    if (!v822)
      goto LABEL_863;
    v692 = 5;
  }
  (*(void (**)(void))(*v691 + 8 * v692))();
LABEL_863:
  v693 = v824;
  if (v824 == v823)
  {
    v694 = 4;
    v693 = v823;
    goto LABEL_867;
  }
  if (v824)
  {
    v694 = 5;
LABEL_867:
    (*(void (**)(void))(*v693 + 8 * v694))();
  }
  if (v800)
  {
    v695 = (unint64_t *)&v800->__shared_owners_;
    do
      v696 = __ldaxr(v695);
    while (__stlxr(v696 - 1, v695));
    if (!v696)
    {
      ((void (*)(std::__shared_weak_count *))v800->__on_zero_shared)(v800);
      std::__shared_weak_count::__release_weak(v800);
    }
  }
  return a1;
}

void sub_19F261BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, md::PolylineOverlaySharedRenderStates *a19, uint64_t *a20,uint64_t *a21,uint64_t a22,uint64_t *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t *a29,uint64_t *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a71;
  uint64_t *v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t *v75;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;

  v77 = (_QWORD *)v71[11];
  if (v77 == v73)
  {
    v78 = 4;
  }
  else
  {
    if (!v77)
    {
      v79 = *v75;
      if (*v75)
        goto LABEL_16;
      goto LABEL_5;
    }
    v78 = 5;
    v73 = (_QWORD *)v71[11];
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v78))(v73);
  v79 = *v75;
  if (*v75)
  {
LABEL_16:
    v71[5] = v79;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71[7] + 40))(v71[7], v79, v71[6] - v79);
    v80 = *v71;
    if (!*v71)
    {
LABEL_7:
      v81 = (char *)STACK[0x208];
      if ((char *)STACK[0x208] == &a71)
      {
        v82 = 4;
        v81 = &a71;
      }
      else
      {
        if (!v81)
          goto LABEL_12;
        v82 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v81 + 8 * v82))();
LABEL_12:
      v83 = (unint64_t *)STACK[0x228];
      if ((unint64_t *)STACK[0x228] == &STACK[0x210])
      {
        v84 = 4;
        v83 = &STACK[0x210];
      }
      else
      {
        if (!v83)
          goto LABEL_21;
        v84 = 5;
      }
      (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v71, 0x10A0C40D234DDC7);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(a30 + 36));
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(a30 + 34));
      md::PolylineOverlaySharedRenderStates::~PolylineOverlaySharedRenderStates(a19);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a21);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](v74);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a23);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a27);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a29);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](v72);
      md::PolylineOverlaySharedPipelineStates<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlaySharedPipelineStates(a20);
      md::PolylineOverlaySharedPipelineStates<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::~PolylineOverlaySharedPipelineStates(a30);
      _Unwind_Resume(a1);
    }
LABEL_6:
    v71[1] = v80;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71[3] + 40))(v71[3], v80, v71[2] - v80);
    goto LABEL_7;
  }
LABEL_5:
  v80 = *v71;
  if (!*v71)
    goto LABEL_7;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon22AlphaFillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7358;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon18AlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7310;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_29GradientPolylineOverlayRibbon17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D72C8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon22AlphaFillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6F68;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon18AlphaPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6F20;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolylineOverlayRibbon17FillPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6ED8;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_5,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_5>,ggl::GradientPolylineOverlayRibbon::FillPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3A78;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_4,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_4>,ggl::GradientPolylineOverlayRibbon::AlphaFillPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3A30;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_3,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_3>,ggl::GradientPolylineOverlayRibbon::AlphaPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D39E8;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_2,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_2>,ggl::PolylineOverlayRibbon::FillPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D39A0;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_1,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_1>,ggl::PolylineOverlayRibbon::AlphaFillPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3958;
}

void std::__function::__func<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_0,std::allocator<md::PolylineOverlaySharedResources::PolylineOverlaySharedResources(ggl::StandardLibrary const&,ggl::IsoAlphaAtlas *,ggl::DistanceAtlas *,std::shared_ptr<md::TextureManager>,ggl::RenderTargetFormat const&,BOOL,BOOL)::$_0>,ggl::PolylineOverlayRibbon::AlphaPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D3910;
}

void md::PolylineOverlaySharedRenderStates::~PolylineOverlaySharedRenderStates(md::PolylineOverlaySharedRenderStates *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

void geo::TaskQueue::barrierSync(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  _BYTE v14[24];
  _BYTE *v15;
  _QWORD v16[4];
  _BYTE v17[24];
  _BYTE *v18;
  _QWORD block[4];
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 56))
  {
    v7 = *(unsigned __int8 *)(a1 + 57);
    v8 = *(id *)(a1 + 16);
    if (v7)
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3321888768;
      v16[2] = ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_1;
      v16[3] = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
      v5 = v17;
      v9 = a2[3];
      if (v9)
      {
        if ((_QWORD *)v9 == a2)
        {
          v18 = v17;
          (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v17);
LABEL_20:
          dispatch_async_and_wait(v8, v16);

          v10 = v18;
          if (v18 != v17)
            goto LABEL_13;
LABEL_21:
          v11 = 4;
          goto LABEL_22;
        }
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      }
      v18 = (_BYTE *)v9;
      goto LABEL_20;
    }
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3321888768;
    v13[2] = ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_2_2;
    v13[3] = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
    v5 = v14;
    v12 = a2[3];
    if (v12)
    {
      if ((_QWORD *)v12 == a2)
      {
        v15 = v14;
        (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v14);
LABEL_25:
        dispatch_barrier_sync(v8, v13);

        v10 = v15;
        if (v15 != v14)
          goto LABEL_13;
        goto LABEL_21;
      }
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    }
    v15 = (_BYTE *)v12;
    goto LABEL_25;
  }
  dispatch_sync(*(dispatch_queue_t *)(a1 + 40), &__block_literal_global_719);
  v4 = *(id *)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_2;
  block[3] = &__block_descriptor_64_ea8_32c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
  v5 = v20;
  v6 = a2[3];
  if (!v6)
  {
LABEL_5:
    v21 = (_BYTE *)v6;
    goto LABEL_12;
  }
  if ((_QWORD *)v6 != a2)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    goto LABEL_5;
  }
  v21 = v20;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v20);
LABEL_12:
  dispatch_barrier_sync(v4, block);

  v10 = v21;
  if (v21 == v20)
    goto LABEL_21;
LABEL_13:
  if (!v10)
    return;
  v11 = 5;
  v5 = v10;
LABEL_22:
  (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 8 * v11))(v5);
}

void sub_19F262A34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::ViewTransform::setCoordinateSpaceEtc(unsigned __int8 *a1, unsigned __int8 a2, float64x2_t *a3, uint64_t a4)
{
  unsigned __int8 *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  int v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  long double v70;
  long double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  float64x2_t v76;
  float64x2_t v77;
  double v78;
  float v79;
  BOOL v80;
  _OWORD v81[8];
  float64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE v89[32];
  uint64_t v90;

  v6 = a1 + 1592;
  *a1 = a2;
  gdc::CameraView::operator=((uint64_t)(a1 + 8), a4);
  v7 = *((double *)a1 + 66);
  v8 = *((double *)a1 + 67);
  v9 = *((double *)a1 + 68);
  v10 = *((double *)a1 + 69);
  v11 = *((double *)a1 + 65);
  v13 = *((double *)a1 + 63);
  v12 = *((double *)a1 + 64);
  v14 = -(v11 * v8 - v12 * v9) - (v11 * v8 - v12 * v9);
  v15 = -(v13 * v9 - v11 * v7) - (v13 * v9 - v11 * v7);
  v16 = -(v12 * v7 - v13 * v8) - (v12 * v7 - v13 * v8);
  v17 = -(v16 * v7 - (-(v12 - v14 * v9) - v15 * v10));
  v18 = -(v13 + v14 * v10 + v15 * v9 - v16 * v8);
  v19 = -(v11 + v14 * v8 + v16 * v10 - v15 * v7);
  v20 = v8 * -2.0;
  v21 = -(v8 * (v8 * -2.0));
  v22 = 1.0 - (v21 - v9 * (v9 * -2.0));
  v23 = v7 * -2.0;
  v24 = -(v8 * (v7 * -2.0));
  v25 = v9 * -2.0 * v10;
  v26 = v24 - v25;
  v27 = -(v9 * (v7 * -2.0));
  v28 = v10 * v20;
  v29 = v10 * v20 - v9 * (v7 * -2.0);
  v30 = v25 + v24;
  v31 = v7 * -2.0 * v7 + 1.0;
  v32 = v31 - -(v9 * (v9 * -2.0));
  v33 = -(v9 * v20);
  v34 = v10 * v23;
  *((double *)a1 + 183) = v22;
  *((double *)a1 + 184) = v30;
  *((double *)a1 + 185) = v27 - v28;
  *((_QWORD *)a1 + 186) = 0;
  *((double *)a1 + 187) = v26;
  *((double *)a1 + 188) = v32;
  *((double *)a1 + 189) = v34 + v33;
  *((_QWORD *)a1 + 190) = 0;
  *((double *)a1 + 191) = v29;
  *((double *)a1 + 192) = v33 - v34;
  *((double *)a1 + 193) = v31 - v21;
  *((_QWORD *)a1 + 194) = 0;
  *((double *)a1 + 195) = v18;
  *((double *)a1 + 196) = v17;
  *((double *)a1 + 197) = v19;
  *((_QWORD *)a1 + 198) = 0x3FF0000000000000;
  v87 = 0;
  v85 = 0u;
  *(_OWORD *)&v89[16] = 0u;
  *(_OWORD *)v89 = 0u;
  v86 = 0u;
  v84 = 0u;
  v83 = 0u;
  v88 = 0x3FF0000000000000;
  v90 = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #0.5 }
  v40 = vmulq_f64(*a3, _Q1);
  *(float64_t *)&v85 = v40.f64[1];
  v82 = v40.f64[0];
  *(float64x2_t *)&v89[8] = v40;
  gm::operator*<double,4,4,4>((double *)v81, &v82, (double *)a1 + 102);
  v41 = v81[1];
  *(_OWORD *)v6 = v81[0];
  *((_OWORD *)v6 + 1) = v41;
  v42 = v81[3];
  *((_OWORD *)v6 + 2) = v81[2];
  *((_OWORD *)v6 + 3) = v42;
  v43 = v81[5];
  *((_OWORD *)v6 + 4) = v81[4];
  *((_OWORD *)v6 + 5) = v43;
  v44 = v81[7];
  *((_OWORD *)v6 + 6) = v81[6];
  *((_OWORD *)v6 + 7) = v44;
  *(_QWORD *)&v44 = *((_QWORD *)a1 + 67);
  v45 = *((double *)a1 + 68);
  v46 = *((double *)a1 + 66);
  v47 = *((double *)a1 + 69);
  v48 = (v46 + v46) * v47;
  v49 = (v46 + v46) * v46;
  *((double *)a1 + 172) = (v46 + v46) * *(double *)&v44 + v47 * (v45 * -2.0);
  *((double *)a1 + 173) = v45 * -2.0 * v45 + 1.0 - v49;
  *((double *)a1 + 174) = v48 - v45 * -2.0 * *(double *)&v44;
  v50 = *(double *)&v44 * -2.0;
  v51 = v47 * (*(double *)&v44 * -2.0);
  v52 = -1.0 - *(double *)&v44 * -2.0 * *(double *)&v44;
  *((double *)a1 + 175) = -(v52 + (v45 + v45) * v45);
  *((double *)a1 + 176) = -(v46 * (*(double *)&v44 * -2.0) - v47 * (v45 + v45));
  *((double *)a1 + 177) = v51 + (v45 + v45) * v46;
  v53 = v51 - (v46 + v46) * v45;
  v54 = v48 + v50 * v45;
  v55 = v52 + v49;
  *((double *)a1 + 178) = v53;
  *((double *)a1 + 179) = v54;
  *((double *)a1 + 180) = v52 + v49;
  v56 = *a1;
  v57 = 0.0;
  v58 = 0.0;
  v59 = -1.0;
  if (v56 == 1)
  {
    v60 = *((double *)a1 + 63);
    v61 = *((double *)a1 + 64);
    v62 = *((double *)a1 + 65);
    v63 = 1.0 / sqrt(v60 * v60 + v61 * v61 + v62 * v62);
    v57 = -(v60 * v63);
    v58 = -(v61 * v63);
    v59 = -(v62 * v63);
  }
  v64 = acos(fmin(fmax(v53 * v57 + v54 * v58 + v55 * v59, -1.0), 1.0)) * 57.2957795;
  *((float *)a1 + 362) = v64;
  v66 = *((double *)a1 + 47);
  v65 = *((double *)a1 + 48);
  if (v65 >= v66)
  {
    v72 = *((double *)a1 + 58);
  }
  else
  {
    v67 = v65 * v66;
    v68 = v65 / v66;
    if (v67 <= 0.0)
      v69 = 1.0;
    else
      v69 = v68;
    v70 = tan(*((double *)a1 + 58) * 0.5);
    v71 = atan(v69 * v70);
    v72 = v71 + v71;
  }
  v73 = tan(v72 * 0.5) * ((a3->f64[0] + a3->f64[0]) * *((double *)a1 + 122)) / (*((double *)a1 + 122) * a3->f64[1]);
  *((double *)a1 + 182) = v73;
  if (!v56)
  {
    v74 = *((double *)a1 + 65);
    v75 = v74 + *((double *)a1 + 4) * -0.0000000249532021;
    if (v75 <= 0.0)
    {
      v80 = 0;
    }
    else
    {
      v76 = *(float64x2_t *)(a1 + 504);
      v77 = *((float64x2_t *)a1 + 89);
      a1[1720] = v55 < 0.0;
      if (v55 >= 0.0)
        return;
      v78 = -v75 / v55;
      *((double *)a1 + 222) = v78;
      *((float64x2_t *)v6 + 10) = vmlaq_n_f64(v76, v77, v78);
      *((double *)a1 + 221) = v74 + v78 * v55;
      v79 = v73 * v78;
      *((double *)a1 + 223) = (float)(v79 * v79);
      v80 = v76.f64[0] > v79;
      if (v76.f64[0] >= (float)(1.0 - v79))
        v80 = 0;
    }
    a1[1720] = v80;
  }
}

float gdc::Camera::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  float result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  v8 = *(unsigned __int8 *)(a1 + 336);
  if (*(_BYTE *)(a2 + 336))
  {
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    if (!v8)
      *(_BYTE *)(a1 + 336) = 1;
  }
  else if (*(_BYTE *)(a1 + 336))
  {
    *(_BYTE *)(a1 + 336) = 0;
  }
  v9 = *(unsigned __int8 *)(a1 + 352);
  if (*(_BYTE *)(a2 + 352))
  {
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    if (!v9)
      *(_BYTE *)(a1 + 352) = 1;
  }
  else if (*(_BYTE *)(a1 + 352))
  {
    *(_BYTE *)(a1 + 352) = 0;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  v10 = *(_OWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = v10;
  v11 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v11;
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  result = *(float *)(a2 + 492);
  *(float *)(a1 + 492) = result;
  return result;
}

unsigned __int8 *md::MapEngine::canRenderAsync(md::MapEngine *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 *result;

  v2 = (uint64_t *)*((_QWORD *)this + 141);
  v3 = *v2;
  v4 = v2[1];
  v5 = v3;
  if (v3 != v4)
  {
    v5 = v3;
    while (*(_BYTE *)v5 != 20)
    {
      v5 += 16;
      if (v5 == v4)
        goto LABEL_9;
    }
  }
  if (v5 == v4)
  {
LABEL_9:
    v6 = 0;
    if (v3 != v4)
    {
LABEL_10:
      while (*(_BYTE *)v3 != 22)
      {
        v3 += 16;
        if (v3 == v4)
          goto LABEL_15;
      }
    }
  }
  else
  {
    v6 = *(_DWORD *)(v5 + 8);
    if (v3 != v4)
      goto LABEL_10;
  }
  if (v3 == v4)
LABEL_15:
    v7 = 1;
  else
    v7 = *(_QWORD *)(v3 + 8) == 0;
  if (*((_BYTE *)this + 1241))
    v8 = v6 > 0xA;
  else
    v8 = 1;
  if (!v8 && (((1 << v6) & 0x418) != 0 || ((1 << v6) & 6) != 0 && !v7))
  {
    *(_BYTE *)(*((_QWORD *)this + 112) + 377) = 1;
    v13 = 3;
    result = (unsigned __int8 *)*((_QWORD *)this + 148);
    if (!result)
      return result;
    goto LABEL_40;
  }
  *(_BYTE *)(*((_QWORD *)this + 112) + 377) = 0;
  v9 = 1 << v6;
  if (v7)
    v10 = 0;
  else
    v10 = 3;
  if (v6 == 11)
    v11 = 2;
  else
    v11 = 4;
  if ((v9 & 0x418) != 0)
    v12 = 1;
  else
    v12 = v11;
  if ((v9 & 0x1E7) == 0)
    v10 = v12;
  if (v6 <= 0xB)
    v13 = v10;
  else
    v13 = 4;
  result = (unsigned __int8 *)*((_QWORD *)this + 148);
  if (result)
  {
LABEL_40:
    if (v13 == result[8])
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 16))(result);
      if ((_DWORD)result)
        return (unsigned __int8 *)(*((_BYTE *)this + 4440) != 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t md::MapEngineConfiguration::supportsAsyncRender(md::MapEngineConfiguration *this)
{
  return 1;
}

void md::MapEngine::updateSettings(md::MapEngine *this, char a2)
{
  unint64_t v2;
  md::MapEngine *v3;
  uint64_t v4;
  size_t prime;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  size_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t ***v31;
  uint64_t **v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  size_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t ***v53;
  uint64_t **v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  float v58;
  _BOOL8 v59;
  unint64_t v60;
  unint64_t v61;
  size_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  NSObject *v69;
  uint64_t v70;
  unsigned __int8 **v71;
  unsigned __int8 **v72;
  int v73;
  _BOOL8 v74;
  unsigned __int8 *v75;
  unint64_t v76;
  uint8x8_t v77;
  unint64_t v78;
  uint64_t ***v79;
  uint64_t **v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  void **v90;
  void **v91;
  void **v92;
  unsigned int v93;
  void **v94;
  void **v95;
  _QWORD *v96;
  unsigned int v97;
  _WORD *v98;
  _QWORD *v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t i;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t j;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t k;
  void *v115;
  void *v116;
  unint64_t v117;
  unsigned __int16 *v118;
  void *v119;
  unint64_t v120;
  void *v121;
  BOOL v122;
  void *v123;
  BOOL v124;
  void *v125;
  BOOL v126;
  unint64_t v127;
  uint8x8_t v128;
  uint64_t v129;
  unint64_t v130;
  uint8x8_t v131;
  uint64_t v132;
  unint64_t v133;
  uint8x8_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned __int16 *v139;
  unsigned __int16 *v140;
  _QWORD *v141;
  unsigned __int16 *v142;
  unsigned __int16 *v143;
  uint64_t v144;
  int v145;
  BOOL v146;
  unsigned __int16 *v148;
  unsigned __int16 *v149;
  _QWORD *v150;
  _QWORD *v151;
  uint8_t *v152;
  uint64_t v153;
  unint64_t v154;
  unsigned __int16 *v155;
  unsigned __int16 *v156;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  __int128 v165;
  unint64_t v166;
  unsigned __int16 *v167;
  unsigned __int16 *v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  unsigned __int16 *v179;
  unsigned __int16 *v180;
  unint64_t v181;
  unint64_t v182;
  uint8x8_t v183;
  unint64_t v184;
  uint64_t **v185;
  uint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  void **v189;
  _QWORD *v190;
  unint64_t v191;
  uint64_t v192;
  float v193;
  float v194;
  _BOOL8 v195;
  unint64_t v196;
  unint64_t v197;
  size_t v198;
  void *v199;
  void *v200;
  uint64_t v201;
  _QWORD *v202;
  size_t v203;
  size_t v204;
  size_t v205;
  _QWORD *v206;
  size_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint8x8_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  size_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  void **v221;
  _QWORD *v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  unsigned __int16 *v227;
  unsigned __int16 *v228;
  void **v229;
  void **v230;
  uint64_t v231;
  unsigned __int16 *v232;
  unsigned __int16 *v233;
  unsigned __int16 *v234;
  unsigned __int16 *v235;
  BOOL v237;
  unsigned __int16 *v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v242;
  _BYTE *v243;
  _BYTE *v244;
  int64_t v245;
  char *v246;
  char *v247;
  void **v248;
  unint64_t v249;
  uint8x8_t v250;
  unint64_t v251;
  uint64_t ***v252;
  uint64_t **v253;
  unint64_t v254;
  unint64_t v255;
  unsigned __int16 *v256;
  unsigned __int16 *v257;
  int8x8_t *v258;
  int8x8_t v259;
  uint8x8_t v260;
  unint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  __int128 v271;
  unint64_t **v272;
  unint64_t *v273;
  _QWORD *v274;
  _QWORD *v275;
  void *v276;
  _QWORD *v277;
  _QWORD *v278;
  void *v279;
  _QWORD *v280;
  _QWORD *v281;
  void *v282;
  md::MapEngine *v283;
  _QWORD *v284;
  void **v285;
  uint64_t v286;
  void *__p[2];
  uint64_t v288;
  unint64_t **v289;
  void *v290[2];
  void *v291[2];
  float v292;
  void *v293[2];
  void *v294[2];
  float v295;
  void *v296[2];
  void *v297[2];
  float v298;
  uint8_t buf[24];
  uint8_t *v300;
  _BYTE v301[22];
  uint64_t v302;

  v3 = this;
  v302 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0 && !*(_QWORD *)(*((_QWORD *)this + 141) + 40))
    return;
  v4 = *((_QWORD *)this + 149);
  *(_OWORD *)v296 = 0u;
  *(_OWORD *)v297 = 0u;
  v298 = *(float *)(v4 + 40);
  prime = *(_QWORD *)(v4 + 16);
  if (prime == 1)
  {
    prime = 2;
LABEL_5:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v296, prime);
    goto LABEL_6;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(v4 + 16));
    v121 = v296[1];
    v122 = (void *)prime >= v296[1];
    if ((void *)prime > v296[1])
      goto LABEL_5;
  }
  else
  {
    v121 = 0;
    v122 = 1;
    if (prime)
      goto LABEL_5;
  }
  if (!v122)
  {
    v127 = vcvtps_u32_f32((float)(unint64_t)v297[1] / v298);
    if ((unint64_t)v121 < 3
      || (v128 = (uint8x8_t)vcnt_s8((int8x8_t)v121), v128.i16[0] = vaddlv_u8(v128), v128.u32[0] > 1uLL))
    {
      v127 = std::__next_prime(v127);
    }
    else
    {
      v129 = 1 << -(char)__clz(v127 - 1);
      if (v127 >= 2)
        v127 = v129;
    }
    if (prime <= v127)
      prime = v127;
    if (prime < (unint64_t)v121)
      goto LABEL_5;
  }
LABEL_6:
  v6 = *(uint64_t **)(v4 + 24);
  if (v6)
  {
    v7 = (unint64_t)v296[1];
    do
    {
      v8 = *((unsigned __int16 *)v6 + 8);
      if (v7)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = *((unsigned __int16 *)v6 + 8);
          if (v7 <= v8)
            v2 = v8 % v7;
        }
        else
        {
          v2 = ((_DWORD)v7 - 1) & v8;
        }
        v10 = (uint64_t ***)*((_QWORD *)v296[0] + v2);
        if (v10)
        {
          v11 = *v10;
          if (v11)
          {
            if (v9.u32[0] < 2uLL)
            {
              while (1)
              {
                v13 = (unint64_t)v11[1];
                if (v13 == v8)
                {
                  if (*((unsigned __int16 *)v11 + 8) == (_DWORD)v8)
                    goto LABEL_66;
                }
                else if ((v13 & (v7 - 1)) != v2)
                {
                  goto LABEL_28;
                }
                v11 = (uint64_t **)*v11;
                if (!v11)
                  goto LABEL_28;
              }
            }
            do
            {
              v12 = (unint64_t)v11[1];
              if (v12 == v8)
              {
                if (*((unsigned __int16 *)v11 + 8) == (_DWORD)v8)
                  goto LABEL_66;
              }
              else
              {
                if (v12 >= v7)
                  v12 %= v7;
                if (v12 != v2)
                  break;
              }
              v11 = (uint64_t **)*v11;
            }
            while (v11);
          }
        }
      }
LABEL_28:
      v14 = operator new(0x18uLL);
      *v14 = 0;
      v14[1] = v8;
      *((_DWORD *)v14 + 4) = *((_DWORD *)v6 + 4);
      v15 = (float)((unint64_t)v297[1] + 1);
      if (!v7 || (float)(v298 * (float)v7) < v15)
      {
        v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v16 = 1;
        v17 = v16 | (2 * v7);
        v18 = vcvtps_u32_f32(v15 / v298);
        if (v17 <= v18)
          v19 = v18;
        else
          v19 = v17;
        if (v19 == 1)
        {
          v19 = 2;
        }
        else if ((v19 & (v19 - 1)) != 0)
        {
          v19 = std::__next_prime(v19);
          v7 = (unint64_t)v296[1];
        }
        if (v19 > v7)
          goto LABEL_40;
        if (v19 < v7)
        {
          v20 = vcvtps_u32_f32((float)(unint64_t)v297[1] / v298);
          if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
          {
            v20 = std::__next_prime(v20);
          }
          else
          {
            v22 = 1 << -(char)__clz(v20 - 1);
            if (v20 >= 2)
              v20 = v22;
          }
          if (v19 <= v20)
            v19 = v20;
          if (v19 < v7)
LABEL_40:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v296, v19);
        }
        v7 = (unint64_t)v296[1];
        if (((unint64_t)v296[1] & ((unint64_t)v296[1] - 1)) != 0)
        {
          if (v296[1] <= (void *)v8)
            v2 = v8 % (unint64_t)v296[1];
          else
            v2 = v8;
        }
        else
        {
          v2 = (LODWORD(v296[1]) - 1) & v8;
        }
      }
      v23 = v296[0];
      v24 = (_QWORD *)*((_QWORD *)v296[0] + v2);
      if (v24)
      {
        *v14 = *v24;
      }
      else
      {
        *v14 = v297[0];
        v297[0] = v14;
        v23[v2] = v297;
        if (!*v14)
          goto LABEL_65;
        v25 = *(_QWORD *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v25 >= v7)
            v25 %= v7;
        }
        else
        {
          v25 &= v7 - 1;
        }
        v24 = (char *)v296[0] + 8 * v25;
      }
      *v24 = v14;
LABEL_65:
      ++v297[1];
LABEL_66:
      v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  *(_OWORD *)v293 = 0u;
  *(_OWORD *)v294 = 0u;
  v295 = *(float *)(v4 + 112);
  v26 = *(_QWORD *)(v4 + 88);
  if (v26 == 1)
  {
    v26 = 2;
LABEL_69:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v293, v26);
    goto LABEL_70;
  }
  if ((v26 & (v26 - 1)) != 0)
  {
    v26 = std::__next_prime(*(_QWORD *)(v4 + 88));
    v123 = v293[1];
    v124 = (void *)v26 >= v293[1];
    if ((void *)v26 > v293[1])
      goto LABEL_69;
  }
  else
  {
    v123 = 0;
    v124 = 1;
    if (v26)
      goto LABEL_69;
  }
  if (!v124)
  {
    v130 = vcvtps_u32_f32((float)(unint64_t)v294[1] / v295);
    if ((unint64_t)v123 < 3
      || (v131 = (uint8x8_t)vcnt_s8((int8x8_t)v123), v131.i16[0] = vaddlv_u8(v131), v131.u32[0] > 1uLL))
    {
      v130 = std::__next_prime(v130);
    }
    else
    {
      v132 = 1 << -(char)__clz(v130 - 1);
      if (v130 >= 2)
        v130 = v132;
    }
    if (v26 <= v130)
      v26 = v130;
    if (v26 < (unint64_t)v123)
      goto LABEL_69;
  }
LABEL_70:
  v27 = *(uint64_t **)(v4 + 96);
  if (v27)
  {
    v28 = (unint64_t)v293[1];
    do
    {
      v29 = *((unsigned __int16 *)v27 + 8);
      if (v28)
      {
        v30 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          v2 = *((unsigned __int16 *)v27 + 8);
          if (v28 <= v29)
            v2 = v29 % v28;
        }
        else
        {
          v2 = ((_DWORD)v28 - 1) & v29;
        }
        v31 = (uint64_t ***)*((_QWORD *)v293[0] + v2);
        if (v31)
        {
          v32 = *v31;
          if (v32)
          {
            if (v30.u32[0] < 2uLL)
            {
              while (1)
              {
                v34 = (unint64_t)v32[1];
                if (v34 == v29)
                {
                  if (*((unsigned __int16 *)v32 + 8) == (_DWORD)v29)
                    goto LABEL_130;
                }
                else if ((v34 & (v28 - 1)) != v2)
                {
                  goto LABEL_92;
                }
                v32 = (uint64_t **)*v32;
                if (!v32)
                  goto LABEL_92;
              }
            }
            do
            {
              v33 = (unint64_t)v32[1];
              if (v33 == v29)
              {
                if (*((unsigned __int16 *)v32 + 8) == (_DWORD)v29)
                  goto LABEL_130;
              }
              else
              {
                if (v33 >= v28)
                  v33 %= v28;
                if (v33 != v2)
                  break;
              }
              v32 = (uint64_t **)*v32;
            }
            while (v32);
          }
        }
      }
LABEL_92:
      v35 = operator new(0x18uLL);
      *v35 = 0;
      v35[1] = v29;
      v36 = *((_DWORD *)v27 + 4);
      *((_WORD *)v35 + 10) = *((_WORD *)v27 + 10);
      *((_DWORD *)v35 + 4) = v36;
      v37 = (float)((unint64_t)v294[1] + 1);
      if (!v28 || (float)(v295 * (float)v28) < v37)
      {
        v38 = (v28 & (v28 - 1)) != 0;
        if (v28 < 3)
          v38 = 1;
        v39 = v38 | (2 * v28);
        v40 = vcvtps_u32_f32(v37 / v295);
        if (v39 <= v40)
          v41 = v40;
        else
          v41 = v39;
        if (v41 == 1)
        {
          v41 = 2;
        }
        else if ((v41 & (v41 - 1)) != 0)
        {
          v41 = std::__next_prime(v41);
          v28 = (unint64_t)v293[1];
        }
        if (v41 > v28)
          goto LABEL_104;
        if (v41 < v28)
        {
          v42 = vcvtps_u32_f32((float)(unint64_t)v294[1] / v295);
          if (v28 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
          {
            v42 = std::__next_prime(v42);
          }
          else
          {
            v44 = 1 << -(char)__clz(v42 - 1);
            if (v42 >= 2)
              v42 = v44;
          }
          if (v41 <= v42)
            v41 = v42;
          if (v41 < v28)
LABEL_104:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v293, v41);
        }
        v28 = (unint64_t)v293[1];
        if (((unint64_t)v293[1] & ((unint64_t)v293[1] - 1)) != 0)
        {
          if (v293[1] <= (void *)v29)
            v2 = v29 % (unint64_t)v293[1];
          else
            v2 = v29;
        }
        else
        {
          v2 = (LODWORD(v293[1]) - 1) & v29;
        }
      }
      v45 = v293[0];
      v46 = (_QWORD *)*((_QWORD *)v293[0] + v2);
      if (v46)
      {
        *v35 = *v46;
      }
      else
      {
        *v35 = v294[0];
        v294[0] = v35;
        v45[v2] = v294;
        if (!*v35)
          goto LABEL_129;
        v47 = *(_QWORD *)(*v35 + 8);
        if ((v28 & (v28 - 1)) != 0)
        {
          if (v47 >= v28)
            v47 %= v28;
        }
        else
        {
          v47 &= v28 - 1;
        }
        v46 = (char *)v293[0] + 8 * v47;
      }
      *v46 = v35;
LABEL_129:
      ++v294[1];
LABEL_130:
      v27 = (uint64_t *)*v27;
    }
    while (v27);
  }
  *(_OWORD *)v290 = 0u;
  *(_OWORD *)v291 = 0u;
  v292 = *(float *)(v4 + 176);
  v48 = *(_QWORD *)(v4 + 152);
  if (v48 != 1)
  {
    if ((v48 & (v48 - 1)) != 0)
    {
      v48 = std::__next_prime(*(_QWORD *)(v4 + 152));
      v125 = v290[1];
      v126 = (void *)v48 >= v290[1];
      if ((void *)v48 > v290[1])
        goto LABEL_133;
    }
    else
    {
      v125 = 0;
      v126 = 1;
      if (v48)
        goto LABEL_133;
    }
    if (v126)
      goto LABEL_134;
    v133 = vcvtps_u32_f32((float)(unint64_t)v291[1] / v292);
    if ((unint64_t)v125 < 3
      || (v134 = (uint8x8_t)vcnt_s8((int8x8_t)v125), v134.i16[0] = vaddlv_u8(v134), v134.u32[0] > 1uLL))
    {
      v133 = std::__next_prime(v133);
    }
    else
    {
      v135 = 1 << -(char)__clz(v133 - 1);
      if (v133 >= 2)
        v133 = v135;
    }
    if (v48 <= v133)
      v48 = v133;
    if (v48 >= (unint64_t)v125)
      goto LABEL_134;
    goto LABEL_133;
  }
  v48 = 2;
LABEL_133:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v290, v48);
LABEL_134:
  v49 = *(uint64_t **)(v4 + 160);
  if (v49)
  {
    v50 = (unint64_t)v290[1];
    do
    {
      v51 = *((unsigned __int8 *)v49 + 16);
      if (v50)
      {
        v52 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
        v52.i16[0] = vaddlv_u8(v52);
        if (v52.u32[0] > 1uLL)
        {
          v2 = *((unsigned __int8 *)v49 + 16);
          if (v50 <= v51)
            v2 = v51 % v50;
        }
        else
        {
          v2 = ((_DWORD)v50 - 1) & v51;
        }
        v53 = (uint64_t ***)*((_QWORD *)v290[0] + v2);
        if (v53)
        {
          v54 = *v53;
          if (v54)
          {
            if (v52.u32[0] < 2uLL)
            {
              while (1)
              {
                v55 = (unint64_t)v54[1];
                if (v55 == v51)
                {
                  if (*((unsigned __int8 *)v54 + 16) == (_DWORD)v51)
                    goto LABEL_194;
                }
                else if ((v55 & (v50 - 1)) != v2)
                {
                  goto LABEL_156;
                }
                v54 = (uint64_t **)*v54;
                if (!v54)
                  goto LABEL_156;
              }
            }
            do
            {
              v56 = (unint64_t)v54[1];
              if (v56 == v51)
              {
                if (*((unsigned __int8 *)v54 + 16) == (_DWORD)v51)
                  goto LABEL_194;
              }
              else
              {
                if (v56 >= v50)
                  v56 %= v50;
                if (v56 != v2)
                  break;
              }
              v54 = (uint64_t **)*v54;
            }
            while (v54);
          }
        }
      }
LABEL_156:
      v57 = operator new(0x18uLL);
      *v57 = 0;
      v57[1] = v51;
      *((_WORD *)v57 + 8) = *((_WORD *)v49 + 8);
      v58 = (float)((unint64_t)v291[1] + 1);
      if (!v50 || (float)(v292 * (float)v50) < v58)
      {
        v59 = (v50 & (v50 - 1)) != 0;
        if (v50 < 3)
          v59 = 1;
        v60 = v59 | (2 * v50);
        v61 = vcvtps_u32_f32(v58 / v292);
        if (v60 <= v61)
          v62 = v61;
        else
          v62 = v60;
        if (v62 == 1)
        {
          v62 = 2;
        }
        else if ((v62 & (v62 - 1)) != 0)
        {
          v62 = std::__next_prime(v62);
          v50 = (unint64_t)v290[1];
        }
        if (v62 > v50)
          goto LABEL_168;
        if (v62 < v50)
        {
          v63 = vcvtps_u32_f32((float)(unint64_t)v291[1] / v292);
          if (v50 < 3 || (v64 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
          {
            v63 = std::__next_prime(v63);
          }
          else
          {
            v65 = 1 << -(char)__clz(v63 - 1);
            if (v63 >= 2)
              v63 = v65;
          }
          if (v62 <= v63)
            v62 = v63;
          if (v62 < v50)
LABEL_168:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v290, v62);
        }
        v50 = (unint64_t)v290[1];
        if (((unint64_t)v290[1] & ((unint64_t)v290[1] - 1)) != 0)
        {
          if (v290[1] <= (void *)v51)
            v2 = v51 % (unint64_t)v290[1];
          else
            v2 = v51;
        }
        else
        {
          v2 = (LODWORD(v290[1]) - 1) & v51;
        }
      }
      v66 = v290[0];
      v67 = (_QWORD *)*((_QWORD *)v290[0] + v2);
      if (v67)
      {
        *v57 = *v67;
      }
      else
      {
        *v57 = v291[0];
        v291[0] = v57;
        v66[v2] = v291;
        if (!*v57)
          goto LABEL_193;
        v68 = *(_QWORD *)(*v57 + 8);
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v68 >= v50)
            v68 %= v50;
        }
        else
        {
          v68 &= v50 - 1;
        }
        v67 = (char *)v290[0] + 8 * v68;
      }
      *v67 = v57;
LABEL_193:
      ++v291[1];
LABEL_194:
      v49 = (uint64_t *)*v49;
    }
    while (v49);
  }
  (*(void (**)(uint64_t, md::MapEngine *, void **))(*(_QWORD *)v4 + 16))(v4, v3, v290);
  (*(void (**)(uint64_t, md::MapEngine *, void **))(*(_QWORD *)v4 + 24))(v4, v3, v293);
  (*(void (**)(unint64_t ***__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 32))(&v289, v4, *((_QWORD *)v3 + 141));
  if (!v289)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v69 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "graph";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MDMapEngine.mm";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v300) = 2630;
      _os_log_impl(&dword_19F029000, v69, OS_LOG_TYPE_ERROR, "Failed to build an execution graph: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }

    if (!v289)
      abort();
  }
  v70 = *((_QWORD *)v3 + 109);
  v71 = *(unsigned __int8 ***)(v70 + 40);
  v72 = *(unsigned __int8 ***)(v70 + 48);
  if (v71 == v72)
    goto LABEL_229;
  v73 = *(unsigned __int8 *)(v4 + 49);
  while (2)
  {
    v75 = *v71;
    if (!*v71)
      goto LABEL_205;
    if (!v290[1])
      goto LABEL_203;
    v76 = v75[34];
    v77 = (uint8x8_t)vcnt_s8((int8x8_t)v290[1]);
    v77.i16[0] = vaddlv_u8(v77);
    if (v77.u32[0] > 1uLL)
    {
      v78 = v75[34];
      if (v290[1] <= (void *)v76)
        v78 = v76 % (unint64_t)v290[1];
    }
    else
    {
      v78 = (LODWORD(v290[1]) - 1) & v76;
    }
    v79 = (uint64_t ***)*((_QWORD *)v290[0] + v78);
    if (!v79 || (v80 = *v79) == 0)
    {
LABEL_203:
      v74 = 0;
      goto LABEL_204;
    }
    if (v77.u32[0] < 2uLL)
    {
      while (1)
      {
        v82 = (unint64_t)v80[1];
        if (v82 == v76)
        {
          if (*((unsigned __int8 *)v80 + 16) == (_DWORD)v76)
            goto LABEL_228;
        }
        else if ((v82 & ((unint64_t)v290[1] - 1)) != v78)
        {
          goto LABEL_203;
        }
        v80 = (uint64_t **)*v80;
        if (!v80)
          goto LABEL_203;
      }
    }
    while (1)
    {
      v81 = (unint64_t)v80[1];
      if (v81 == v76)
        break;
      if ((void *)v81 >= v290[1])
        v81 %= (unint64_t)v290[1];
      if (v81 != v78)
        goto LABEL_203;
LABEL_217:
      v80 = (uint64_t **)*v80;
      if (!v80)
        goto LABEL_203;
    }
    if (*((unsigned __int8 *)v80 + 16) != (_DWORD)v76)
      goto LABEL_217;
LABEL_228:
    v74 = *((unsigned __int8 *)v80 + 17) != 2;
LABEL_204:
    (*(void (**)(unsigned __int8 *, _BOOL8, BOOL))(*(_QWORD *)v75 + 40))(v75, v74, v73 != 0);
LABEL_205:
    if (++v71 != v72)
      continue;
    break;
  }
LABEL_229:
  md::LogicManager::setLogicExecutionGraph(*((int8x8_t **)v3 + 140), &v289);
  v83 = *((_QWORD *)v3 + 112);
  __p[1] = 0;
  v288 = 0;
  __p[0] = &__p[1];
  v84 = *(_QWORD **)(v4 + 120);
  v85 = (_QWORD *)(v4 + 128);
  if (v84 != (_QWORD *)(v4 + 128))
  {
    do
    {
      v89 = (void **)__p[1];
      v90 = &__p[1];
      if (__p[0] == &__p[1])
        goto LABEL_239;
      v91 = (void **)__p[1];
      v92 = &__p[1];
      if (__p[1])
      {
        do
        {
          v90 = v91;
          v91 = (void **)v91[1];
        }
        while (v91);
      }
      else
      {
        do
        {
          v90 = (void **)v92[2];
          v146 = *v90 == v92;
          v92 = v90;
        }
        while (v146);
      }
      v93 = *((unsigned __int16 *)v84 + 13);
      if (*((unsigned __int16 *)v90 + 13) < v93)
      {
LABEL_239:
        if (__p[1])
          v94 = v90;
        else
          v94 = &__p[1];
        if (__p[1])
          v95 = v90 + 1;
        else
          v95 = &__p[1];
      }
      else
      {
        v94 = &__p[1];
        v95 = &__p[1];
        if (__p[1])
        {
          v95 = &__p[1];
          while (1)
          {
            while (1)
            {
              v94 = v89;
              v97 = *((unsigned __int16 *)v89 + 13);
              if (v93 >= v97)
                break;
              v89 = (void **)*v94;
              v95 = v94;
              if (!*v94)
                goto LABEL_254;
            }
            if (v97 >= v93)
              break;
            v95 = v94 + 1;
            v89 = (void **)v94[1];
            if (!v89)
              goto LABEL_254;
          }
        }
      }
      if (*v95)
      {
        v96 = (_QWORD *)v84[1];
        if (v96)
          goto LABEL_257;
      }
      else
      {
LABEL_254:
        v98 = operator new(0x20uLL);
        v98[13] = *((_WORD *)v84 + 13);
        *(_QWORD *)v98 = 0;
        *((_QWORD *)v98 + 1) = 0;
        *((_QWORD *)v98 + 2) = v94;
        *v95 = v98;
        if (*(_QWORD *)__p[0])
        {
          __p[0] = *(void **)__p[0];
          v98 = *v95;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)__p[1], (uint64_t *)v98);
        ++v288;
        v96 = (_QWORD *)v84[1];
        if (v96)
        {
          do
          {
LABEL_257:
            v99 = v96;
            v96 = (_QWORD *)*v96;
          }
          while (v96);
          goto LABEL_232;
        }
      }
      do
      {
        v99 = (_QWORD *)v84[2];
        v146 = *v99 == (_QWORD)v84;
        v84 = v99;
      }
      while (!v146);
LABEL_232:
      v84 = v99;
    }
    while (v99 != v85);
  }
  v86 = *(_QWORD *)(v83 + 24);
  v87 = *(_QWORD *)(v86 + 8);
  v88 = *(_QWORD *)(v86 + 16);
  if (v87 != v88)
  {
    while (1)
    {
      v102 = *(_QWORD *)(v87 + 8);
      v300 = 0;
      gdc::LayerDataSource::setNeedsUpdateFunction(v102, buf);
      v100 = v300;
      if (v300 == buf)
      {
        v100 = buf;
        v101 = 4;
      }
      else
      {
        if (!v300)
          goto LABEL_264;
        v101 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v100 + 8 * v101))();
LABEL_264:
      (*(void (**)(_QWORD))(**(_QWORD **)(v87 + 8) + 24))(*(_QWORD *)(v87 + 8));
      v87 += 24;
      if (v87 == v88)
      {
        v87 = *(_QWORD *)(v86 + 8);
        break;
      }
    }
  }
  *(_QWORD *)(v86 + 16) = v87;
  if (*(_QWORD *)(v83 + 152))
  {
    v103 = *(_QWORD **)(v83 + 144);
    if (v103)
    {
      do
      {
        v104 = (_QWORD *)*v103;
        operator delete(v103);
        v103 = v104;
      }
      while (v104);
    }
    *(_QWORD *)(v83 + 144) = 0;
    v105 = *(_QWORD *)(v83 + 136);
    if (v105)
    {
      for (i = 0; i != v105; ++i)
        *(_QWORD *)(*(_QWORD *)(v83 + 128) + 8 * i) = 0;
    }
    *(_QWORD *)(v83 + 152) = 0;
  }
  *(_QWORD *)(v83 + 176) = *(_QWORD *)(v83 + 168);
  v285 = (void **)(v83 + 168);
  if (*(_QWORD *)(v83 + 240))
  {
    v107 = *(_QWORD **)(v83 + 232);
    if (v107)
    {
      do
      {
        v108 = (_QWORD *)*v107;
        operator delete(v107);
        v107 = v108;
      }
      while (v108);
    }
    *(_QWORD *)(v83 + 232) = 0;
    v109 = *(_QWORD *)(v83 + 224);
    if (v109)
    {
      for (j = 0; j != v109; ++j)
        *(_QWORD *)(*(_QWORD *)(v83 + 216) + 8 * j) = 0;
    }
    *(_QWORD *)(v83 + 240) = 0;
    if (*(_QWORD *)(v83 + 152))
    {
      v111 = *(_QWORD **)(v83 + 144);
      if (v111)
      {
        do
        {
          v112 = (_QWORD *)*v111;
          operator delete(v111);
          v111 = v112;
        }
        while (v112);
      }
      *(_QWORD *)(v83 + 144) = 0;
      v113 = *(_QWORD *)(v83 + 136);
      if (v113)
      {
        for (k = 0; k != v113; ++k)
          *(_QWORD *)(*(_QWORD *)(v83 + 128) + 8 * k) = 0;
      }
      *(_QWORD *)(v83 + 152) = 0;
    }
  }
  v115 = v293[0];
  v293[0] = 0;
  v116 = *(void **)(v83 + 128);
  *(_QWORD *)(v83 + 128) = v115;
  if (v116)
    operator delete(v116);
  v117 = (unint64_t)v293[1];
  v118 = (unsigned __int16 *)v294[0];
  *(void **)(v83 + 144) = v294[0];
  *(_QWORD *)(v83 + 136) = v117;
  v293[1] = 0;
  v119 = v294[1];
  *(void **)(v83 + 152) = v294[1];
  *(float *)(v83 + 160) = v295;
  if (v119)
  {
    v120 = *((_QWORD *)v118 + 1);
    if ((v117 & (v117 - 1)) != 0)
    {
      if (v120 >= v117)
        v120 %= v117;
    }
    else
    {
      v120 &= v117 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v83 + 128) + 8 * v120) = v83 + 144;
    v294[0] = 0;
    v294[1] = 0;
    v118 = *(unsigned __int16 **)(v83 + 144);
  }
  if (v118)
  {
    v284 = (_QWORD *)(v83 + 232);
    v283 = v3;
    do
    {
      v138 = v118[8];
      v139 = *(unsigned __int16 **)(v83 + 32);
      v140 = *(unsigned __int16 **)(v83 + 40);
      if (v139 != v140)
      {
        while (*v139 != v138)
        {
          v139 += 8;
          if (v139 == v140)
            goto LABEL_341;
        }
      }
      if (v139 == v140)
LABEL_341:
        v141 = 0;
      else
        v141 = (_QWORD *)*((_QWORD *)v139 + 1);
      v142 = *(unsigned __int16 **)(v83 + 56);
      v143 = *(unsigned __int16 **)(v83 + 64);
      if (v142 != v143)
      {
        while (*v142 != v138)
        {
          v142 += 8;
          if (v142 == v143)
            goto LABEL_351;
        }
      }
      if (v142 == v143)
      {
LABEL_351:
        v144 = 0;
        v145 = *((unsigned __int8 *)v118 + 18);
        if (!*((_BYTE *)v118 + 18))
        {
LABEL_348:
          if (!v141 || !v144)
            goto LABEL_334;
          goto LABEL_359;
        }
      }
      else
      {
        v144 = *((_QWORD *)v142 + 1);
        v145 = *((unsigned __int8 *)v118 + 18);
        if (!*((_BYTE *)v118 + 18))
          goto LABEL_348;
      }
      v146 = v145 != 1 || v141 == 0;
      if (v146 || v144 == 0)
        goto LABEL_334;
LABEL_359:
      v148 = *(unsigned __int16 **)(v83 + 80);
      v149 = *(unsigned __int16 **)(v83 + 88);
      if (v148 != v149)
      {
        while (*v148 != v138)
        {
          v148 += 8;
          if (v148 == v149)
            goto LABEL_365;
        }
      }
      if (v148 == v149)
LABEL_365:
        v286 = 0;
      else
        v286 = *((_QWORD *)v148 + 1);
      v150 = *(_QWORD **)(v83 + 24);
      v151 = (_QWORD *)v150[12];
      if (v151)
      {
        if (v151 == v150 + 9)
        {
          v300 = buf;
          (*(void (**)(_QWORD *, uint8_t *))(*v151 + 24))(v151, buf);
        }
        else
        {
          v300 = (uint8_t *)(*(uint64_t (**)(_QWORD *))(*v151 + 16))(v151);
        }
      }
      else
      {
        v300 = 0;
      }
      gdc::LayerDataSource::setNeedsUpdateFunction((uint64_t)v141, buf);
      v152 = v300;
      if (v300 == buf)
      {
        v152 = buf;
        v153 = 4;
        goto LABEL_375;
      }
      if (v300)
      {
        v153 = 5;
LABEL_375:
        (*(void (**)(void))(*(_QWORD *)v152 + 8 * v153))();
      }
      v141[59] = v150[8];
      (*(void (**)(_QWORD *))(*v141 + 16))(v141);
      v155 = (unsigned __int16 *)v150[1];
      v154 = v150[2];
      v156 = v155;
      if (v155 != (unsigned __int16 *)v154)
      {
        v156 = (unsigned __int16 *)v150[1];
        while (*v156 != v138)
        {
          v156 += 12;
          if (v156 == (unsigned __int16 *)v154)
            goto LABEL_382;
        }
      }
      if (v156 == (unsigned __int16 *)v154)
      {
LABEL_382:
        *(_OWORD *)&v301[6] = 0uLL;
        v156 = v155;
        if (v155 != (unsigned __int16 *)v154)
        {
          v156 = v155;
          while (v138 != *v156)
          {
            v156 += 12;
            if (v156 == (unsigned __int16 *)v154)
              goto LABEL_388;
          }
        }
        if (v156 == (unsigned __int16 *)v154)
        {
LABEL_388:
          v157 = v150[3];
          if (v154 >= v157)
          {
            v159 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (_QWORD)v155) >> 3) + 1;
            if (v159 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_709;
            v160 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v157 - (_QWORD)v155) >> 3);
            if (2 * v160 > v159)
              v159 = 2 * v160;
            if (v160 >= 0x555555555555555)
              v161 = 0xAAAAAAAAAAAAAAALL;
            else
              v161 = v159;
            if (v161)
            {
              if (v161 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_710;
              v162 = (char *)operator new(24 * v161);
            }
            else
            {
              v162 = 0;
            }
            v163 = &v162[8 * ((uint64_t)(v154 - (_QWORD)v155) >> 3)];
            *(_WORD *)v163 = v138;
            *(_OWORD *)(v163 + 2) = *(_OWORD *)v301;
            *((_QWORD *)v163 + 2) = *(_QWORD *)&v301[14];
            v164 = v163;
            if (v155 != (unsigned __int16 *)v154)
            {
              do
              {
                v165 = *(_OWORD *)(v154 - 24);
                *((_QWORD *)v164 - 1) = *(_QWORD *)(v154 - 8);
                *(_OWORD *)(v164 - 24) = v165;
                v164 -= 24;
                v154 -= 24;
              }
              while ((unsigned __int16 *)v154 != v155);
              v155 = (unsigned __int16 *)v150[1];
            }
            v158 = v163 + 24;
            v150[1] = v164;
            v150[2] = v163 + 24;
            v150[3] = &v162[24 * v161];
            if (v155)
              operator delete(v155);
            v3 = v283;
          }
          else
          {
            *(_WORD *)v154 = v138;
            *(_OWORD *)(v154 + 2) = *(_OWORD *)v301;
            *(_QWORD *)(v154 + 16) = *(_QWORD *)&v301[14];
            v158 = (char *)(v154 + 24);
          }
          v150[2] = v158;
          v156 = (unsigned __int16 *)(v158 - 24);
        }
      }
      *((_QWORD *)v156 + 1) = v141;
      *((_QWORD *)v156 + 2) = v144;
      v167 = (unsigned __int16 *)v150[4];
      v166 = v150[5];
      v168 = v167;
      if (v167 != (unsigned __int16 *)v166)
      {
        v168 = (unsigned __int16 *)v150[4];
        while (*v168 != v138)
        {
          v168 += 8;
          if (v168 == (unsigned __int16 *)v166)
            goto LABEL_413;
        }
      }
      if (v168 == (unsigned __int16 *)v166)
      {
LABEL_413:
        v168 = (unsigned __int16 *)v150[4];
        if (v167 != (unsigned __int16 *)v166)
        {
          v168 = (unsigned __int16 *)v150[4];
          while (v138 != *v168)
          {
            v168 += 8;
            if (v168 == (unsigned __int16 *)v166)
              goto LABEL_419;
          }
        }
        if (v168 == (unsigned __int16 *)v166)
        {
LABEL_419:
          v169 = v150[6];
          if (v166 >= v169)
          {
            v171 = (uint64_t)(v166 - (_QWORD)v167) >> 4;
            v172 = v171 + 1;
            if ((unint64_t)(v171 + 1) >> 60)
LABEL_709:
              abort();
            v173 = v169 - (_QWORD)v167;
            if (v173 >> 3 > v172)
              v172 = v173 >> 3;
            if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF0)
              v174 = 0xFFFFFFFFFFFFFFFLL;
            else
              v174 = v172;
            if (v174)
            {
              if (v174 >> 60)
                goto LABEL_710;
              v175 = (char *)operator new(16 * v174);
            }
            else
            {
              v175 = 0;
            }
            v176 = &v175[16 * v171];
            *(_WORD *)v176 = v138;
            *((_QWORD *)v176 + 1) = 0;
            v177 = v176;
            if (v167 != (unsigned __int16 *)v166)
            {
              do
              {
                *((_OWORD *)v177 - 1) = *(_OWORD *)(v166 - 16);
                v177 -= 16;
                v166 -= 16;
              }
              while ((unsigned __int16 *)v166 != v167);
              v167 = (unsigned __int16 *)v150[4];
            }
            v170 = v176 + 16;
            v150[4] = v177;
            v150[5] = v176 + 16;
            v150[6] = &v175[16 * v174];
            if (v167)
              operator delete(v167);
          }
          else
          {
            *(_WORD *)v166 = v138;
            *(_QWORD *)(v166 + 8) = 0;
            v170 = (char *)(v166 + 16);
          }
          v150[5] = v170;
          v168 = (unsigned __int16 *)(v170 - 16);
        }
      }
      *((_QWORD *)v168 + 1) = v286;
      v178 = (char *)(v118 + 10);
      v180 = *(unsigned __int16 **)(v83 + 168);
      v179 = *(unsigned __int16 **)(v83 + 176);
      if (v180 != v179)
      {
        while (*v180 < *(unsigned __int16 *)v178)
        {
          if (++v180 == v179)
            goto LABEL_443;
        }
      }
      if (v180 == v179 || (v179 = v180, *(unsigned __int16 *)v178 != *v180))
LABEL_443:
        std::vector<md::TileSelectionTileSetType>::insert(v285, v179, v178);
      if (!v144)
        goto LABEL_334;
      (*(void (**)(uint8_t *__return_ptr, uint64_t, unsigned __int16 *))(*(_QWORD *)v144 + 48))(buf, v144, v179);
      if (!buf[0])
        goto LABEL_334;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v144 + 72))(v301, v144);
      if (v301[0])
        v181 = *(unsigned int *)&v301[4];
      else
        v181 = 0;
      v182 = *(_QWORD *)(v83 + 224);
      if (v182)
      {
        v183 = (uint8x8_t)vcnt_s8((int8x8_t)v182);
        v183.i16[0] = vaddlv_u8(v183);
        if (v183.u32[0] > 1uLL)
        {
          v184 = v181;
          if (v182 <= v181)
            v184 = v181 % v182;
        }
        else
        {
          v184 = ((_DWORD)v182 - 1) & v181;
        }
        v185 = *(uint64_t ***)(*(_QWORD *)(v83 + 216) + 8 * v184);
        if (v185)
        {
          v186 = *v185;
          if (v186)
          {
            if (v183.u32[0] < 2uLL)
            {
              while (1)
              {
                v188 = v186[1];
                if (v188 == v181)
                {
                  if (*((_DWORD *)v186 + 4) == (_DWORD)v181)
                    goto LABEL_329;
                }
                else if ((v188 & (v182 - 1)) != v184)
                {
                  goto LABEL_469;
                }
                v186 = (uint64_t *)*v186;
                if (!v186)
                  goto LABEL_469;
              }
            }
            do
            {
              v187 = v186[1];
              if (v187 == v181)
              {
                if (*((_DWORD *)v186 + 4) == (_DWORD)v181)
                {
LABEL_329:
                  v136 = *((_DWORD *)v186 + 5);
                  v137 = *((_DWORD *)v186 + 6);
                  if (*(_DWORD *)&buf[4] < v136)
                    v136 = *(_DWORD *)&buf[4];
                  if (v137 <= *(_DWORD *)&buf[8])
                    v137 = *(_DWORD *)&buf[8];
                  *((_DWORD *)v186 + 5) = v136;
                  *((_DWORD *)v186 + 6) = v137;
                  goto LABEL_334;
                }
              }
              else
              {
                if (v187 >= v182)
                  v187 %= v182;
                if (v187 != v184)
                  break;
              }
              v186 = (uint64_t *)*v186;
            }
            while (v186);
          }
        }
LABEL_469:
        if (v183.u32[0] > 1uLL)
        {
          v166 = v181;
          if (v182 <= v181)
            v166 = v181 % v182;
        }
        else
        {
          v166 = ((_DWORD)v182 - 1) & v181;
        }
        v189 = *(void ***)(*(_QWORD *)(v83 + 216) + 8 * v166);
        if (v189)
        {
          v190 = *v189;
          if (*v189)
          {
            if (v183.u32[0] < 2uLL)
            {
              while (1)
              {
                v192 = v190[1];
                if (v192 == v181)
                {
                  if (*((_DWORD *)v190 + 4) == (_DWORD)v181)
                    goto LABEL_555;
                }
                else if ((v192 & (v182 - 1)) != v166)
                {
                  goto LABEL_488;
                }
                v190 = (_QWORD *)*v190;
                if (!v190)
                  goto LABEL_488;
              }
            }
            do
            {
              v191 = v190[1];
              if (v191 == v181)
              {
                if (*((_DWORD *)v190 + 4) == (_DWORD)v181)
                  goto LABEL_555;
              }
              else
              {
                if (v191 >= v182)
                  v191 %= v182;
                if (v191 != v166)
                  break;
              }
              v190 = (_QWORD *)*v190;
            }
            while (v190);
          }
        }
      }
LABEL_488:
      v190 = operator new(0x20uLL);
      *v190 = 0;
      v190[1] = v181;
      *((_DWORD *)v190 + 4) = v181;
      v193 = (float)(unint64_t)(*(_QWORD *)(v83 + 240) + 1);
      v194 = *(float *)(v83 + 248);
      if (v182 && (float)(v194 * (float)v182) >= v193)
      {
        v181 = v166;
        goto LABEL_545;
      }
      v195 = (v182 & (v182 - 1)) != 0;
      if (v182 < 3)
        v195 = 1;
      v196 = v195 | (2 * v182);
      v197 = vcvtps_u32_f32(v193 / v194);
      if (v196 <= v197)
        v198 = v197;
      else
        v198 = v196;
      if (v198 == 1)
      {
        v198 = 2;
      }
      else if ((v198 & (v198 - 1)) != 0)
      {
        v198 = std::__next_prime(v198);
        v182 = *(_QWORD *)(v83 + 224);
      }
      if (v198 <= v182)
      {
        if (v198 >= v182)
          goto LABEL_541;
        v210 = vcvtps_u32_f32((float)*(unint64_t *)(v83 + 240) / *(float *)(v83 + 248));
        if (v182 < 3 || (v211 = (uint8x8_t)vcnt_s8((int8x8_t)v182), v211.i16[0] = vaddlv_u8(v211), v211.u32[0] > 1uLL))
        {
          v210 = std::__next_prime(v210);
        }
        else
        {
          v212 = 1 << -(char)__clz(v210 - 1);
          if (v210 >= 2)
            v210 = v212;
        }
        if (v198 <= v210)
          v198 = v210;
        if (v198 >= v182)
          goto LABEL_541;
        if (!v198)
        {
          v217 = *(void **)(v83 + 216);
          *(_QWORD *)(v83 + 216) = 0;
          if (v217)
            operator delete(v217);
          *(_QWORD *)(v83 + 224) = 0;
          goto LABEL_541;
        }
      }
      if (v198 >> 61)
LABEL_710:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v199 = operator new(8 * v198);
      v200 = *(void **)(v83 + 216);
      *(_QWORD *)(v83 + 216) = v199;
      if (v200)
        operator delete(v200);
      v201 = 0;
      *(_QWORD *)(v83 + 224) = v198;
      do
        *(_QWORD *)(*(_QWORD *)(v83 + 216) + 8 * v201++) = 0;
      while (v198 != v201);
      v202 = (_QWORD *)*v284;
      if (!*v284)
        goto LABEL_541;
      v203 = v202[1];
      v204 = v198 - 1;
      if ((v198 & (v198 - 1)) != 0)
      {
        if (v203 >= v198)
          v203 %= v198;
        *(_QWORD *)(*(_QWORD *)(v83 + 216) + 8 * v203) = v284;
        v213 = (_QWORD *)*v202;
        if (!*v202)
          goto LABEL_541;
        while (2)
        {
          v215 = v213[1];
          if (v215 >= v198)
            v215 %= v198;
          if (v215 != v203)
          {
            v216 = *(_QWORD *)(v83 + 216);
            if (!*(_QWORD *)(v216 + 8 * v215))
            {
              *(_QWORD *)(v216 + 8 * v215) = v202;
LABEL_527:
              v202 = v213;
              v213 = (_QWORD *)*v213;
              v203 = v215;
              if (!v213)
                goto LABEL_541;
              continue;
            }
            *v202 = *v213;
            v214 = 8 * v215;
            *v213 = **(_QWORD **)(*(_QWORD *)(v83 + 216) + v214);
            **(_QWORD **)(*(_QWORD *)(v83 + 216) + v214) = v213;
            v213 = v202;
          }
          break;
        }
        v215 = v203;
        goto LABEL_527;
      }
      v205 = v203 & v204;
      *(_QWORD *)(*(_QWORD *)(v83 + 216) + 8 * v205) = v284;
      while (1)
      {
        v206 = (_QWORD *)*v202;
        if (!*v202)
          break;
        v207 = v206[1] & v204;
        if (v207 == v205)
        {
          v202 = (_QWORD *)*v202;
        }
        else
        {
          v208 = *(_QWORD *)(v83 + 216);
          if (*(_QWORD *)(v208 + 8 * v207))
          {
            *v202 = *v206;
            v209 = 8 * v207;
            *v206 = **(_QWORD **)(*(_QWORD *)(v83 + 216) + v209);
            **(_QWORD **)(*(_QWORD *)(v83 + 216) + v209) = v206;
          }
          else
          {
            *(_QWORD *)(v208 + 8 * v207) = v202;
            v202 = v206;
            v205 = v207;
          }
        }
      }
LABEL_541:
      v182 = *(_QWORD *)(v83 + 224);
      if ((v182 & (v182 - 1)) != 0)
      {
        if (v182 <= v181)
          v181 %= v182;
      }
      else
      {
        v181 = ((_DWORD)v182 - 1) & v181;
      }
LABEL_545:
      v218 = *(_QWORD *)(v83 + 216);
      v219 = *(_QWORD **)(v218 + 8 * v181);
      if (v219)
      {
        *v190 = *v219;
LABEL_553:
        *v219 = v190;
        goto LABEL_554;
      }
      *v190 = *v284;
      *v284 = v190;
      *(_QWORD *)(v218 + 8 * v181) = v284;
      if (*v190)
      {
        v220 = *(_QWORD *)(*v190 + 8);
        if ((v182 & (v182 - 1)) != 0)
        {
          if (v220 >= v182)
            v220 %= v182;
        }
        else
        {
          v220 &= v182 - 1;
        }
        v219 = (_QWORD *)(*(_QWORD *)(v83 + 216) + 8 * v220);
        goto LABEL_553;
      }
LABEL_554:
      ++*(_QWORD *)(v83 + 240);
LABEL_555:
      *(_QWORD *)((char *)v190 + 20) = *(_QWORD *)&buf[4];
LABEL_334:
      v118 = *(unsigned __int16 **)v118;
    }
    while (v118);
  }
  v221 = (void **)__p[0];
  if (__p[0] != &__p[1])
  {
    do
    {
      v226 = *((unsigned __int16 *)v221 + 13);
      *(_WORD *)buf = *((_WORD *)v221 + 13);
      v228 = *(unsigned __int16 **)(v83 + 168);
      v227 = *(unsigned __int16 **)(v83 + 176);
      if (v228 != v227)
      {
        while (*v228 < v226)
        {
          if (++v228 == v227)
            goto LABEL_568;
        }
      }
      if (v228 == v227 || (v227 = v228, v226 != *v228))
LABEL_568:
        std::vector<md::TileSelectionTileSetType>::insert(v285, v227, (char *)buf);
      v229 = (void **)v221[1];
      if (v229)
      {
        do
        {
          v230 = v229;
          v229 = (void **)*v229;
        }
        while (v229);
      }
      else
      {
        do
        {
          v230 = (void **)v221[2];
          v146 = *v230 == v221;
          v221 = v230;
        }
        while (!v146);
      }
      v221 = v230;
    }
    while (v230 != &__p[1]);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)__p[1]);
  v222 = (_QWORD *)*((_QWORD *)v3 + 112);
  v223 = (uint64_t *)*((_QWORD *)v3 + 141);
  v224 = *v223;
  v225 = v223[1];
  if (*v223 != v225)
  {
    while (*(_BYTE *)v224 != 17)
    {
      v224 += 16;
      if (v224 == v225)
        goto LABEL_577;
    }
  }
  if (v224 == v225)
LABEL_577:
    v231 = 0;
  else
    v231 = *(_QWORD *)(v224 + 8);
  v232 = (unsigned __int16 *)v222[7];
  v233 = (unsigned __int16 *)v222[8];
  if (v232 != v233)
  {
    v235 = (unsigned __int16 *)v222[24];
    v234 = (unsigned __int16 *)v222[25];
    do
    {
      v238 = v235;
      if (v235 != v234)
      {
        v239 = *v232;
        v238 = v235;
        while (1)
        {
          v240 = *v238;
          if (v240 == v239)
            break;
          ++v238;
          if (v239 < v240 || v238 == v234)
          {
            v238 = v234;
            break;
          }
        }
      }
      v237 = v238 == v234 && v231 != 0;
      *(_BYTE *)(*((_QWORD *)v232 + 1) + 20) = v237;
      v232 += 8;
    }
    while (v232 != v233);
  }
  (*(void (**)(_QWORD, md::MapEngine *))(**((_QWORD **)v3 + 148) + 64))(*((_QWORD *)v3 + 148), v3);
  memset(buf, 0, sizeof(buf));
  __p[0] = 0;
  __p[1] = 0;
  v288 = 0;
  v242 = *((_QWORD *)v3 + 112);
  v244 = *(_BYTE **)(v242 + 168);
  v243 = *(_BYTE **)(v242 + 176);
  v245 = v243 - v244;
  if (v243 != v244)
  {
    if (v245 < 0)
      abort();
    v246 = (char *)operator new(v243 - v244);
    memcpy(v246, v244, v245);
    v247 = v246;
    while (1)
    {
      v249 = *(unsigned __int16 *)v247;
      if (!v296[1])
        goto LABEL_622;
      v250 = (uint8x8_t)vcnt_s8((int8x8_t)v296[1]);
      v250.i16[0] = vaddlv_u8(v250);
      if (v250.u32[0] > 1uLL)
      {
        v251 = *(unsigned __int16 *)v247;
        if (v296[1] <= (void *)v249)
          v251 = v249 % (unint64_t)v296[1];
      }
      else
      {
        v251 = (LODWORD(v296[1]) - 1) & v249;
      }
      v252 = (uint64_t ***)*((_QWORD *)v296[0] + v251);
      if (!v252 || (v253 = *v252) == 0)
      {
LABEL_622:
        v257 = *(unsigned __int16 **)buf;
        v256 = *(unsigned __int16 **)&buf[8];
        if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
        {
          while (*v257 < v249)
          {
            if (++v257 == *(unsigned __int16 **)&buf[8])
              goto LABEL_599;
          }
        }
        if (v257 != *(unsigned __int16 **)&buf[8])
        {
          if ((_DWORD)v249 == *v257)
            goto LABEL_601;
          goto LABEL_628;
        }
LABEL_599:
        v248 = (void **)buf;
        goto LABEL_600;
      }
      if (v250.u32[0] < 2uLL)
      {
        while (1)
        {
          v254 = (unint64_t)v253[1];
          if (v254 == v249)
          {
            if (*((unsigned __int16 *)v253 + 8) == (_DWORD)v249)
              goto LABEL_630;
          }
          else if ((v254 & ((unint64_t)v296[1] - 1)) != v251)
          {
            goto LABEL_622;
          }
          v253 = (uint64_t **)*v253;
          if (!v253)
            goto LABEL_622;
        }
      }
      while (1)
      {
        v255 = (unint64_t)v253[1];
        if (v255 == v249)
          break;
        if ((void *)v255 >= v296[1])
          v255 %= (unint64_t)v296[1];
        if (v255 != v251)
          goto LABEL_622;
LABEL_617:
        v253 = (uint64_t **)*v253;
        if (!v253)
          goto LABEL_622;
      }
      if (*((unsigned __int16 *)v253 + 8) != (_DWORD)v249)
        goto LABEL_617;
LABEL_630:
      if (!*((_BYTE *)std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>((uint64_t)v296, v249, v247)+ 18))
      {
        v257 = *(unsigned __int16 **)buf;
        v256 = *(unsigned __int16 **)&buf[8];
        if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
        {
          while (*v257 < *(unsigned __int16 *)v247)
          {
            ++v257;
            v248 = (void **)buf;
            if (v257 == *(unsigned __int16 **)&buf[8])
              goto LABEL_600;
          }
        }
        if (v257 != *(unsigned __int16 **)&buf[8])
        {
          if (*(unsigned __int16 *)v247 == *v257)
            goto LABEL_601;
LABEL_628:
          v248 = (void **)buf;
          goto LABEL_629;
        }
        goto LABEL_599;
      }
      if (*((_BYTE *)std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>((uint64_t)v296, *(_WORD *)v247, v247)+ 18) == 1)
      {
        v257 = (unsigned __int16 *)__p[0];
        v256 = (unsigned __int16 *)__p[1];
        if (__p[0] != __p[1])
        {
          while (*v257 < *(unsigned __int16 *)v247)
          {
            ++v257;
            v248 = __p;
            if (v257 == __p[1])
              goto LABEL_600;
          }
        }
        if (v257 == __p[1])
        {
          v248 = __p;
          goto LABEL_600;
        }
        if (*(unsigned __int16 *)v247 != *v257)
        {
          v248 = __p;
LABEL_629:
          v256 = v257;
LABEL_600:
          std::vector<md::TileSelectionTileSetType>::insert(v248, v256, v247);
        }
      }
LABEL_601:
      v247 += 2;
      if (v247 == &v246[2 * (v245 >> 1)])
        goto LABEL_648;
    }
  }
  v246 = 0;
LABEL_648:
  v258 = (int8x8_t *)*((_QWORD *)v3 + 140);
  v259 = v258[2];
  if (v259)
  {
    v260 = (uint8x8_t)vcnt_s8(v259);
    v260.i16[0] = vaddlv_u8(v260);
    if (v260.u32[0] > 1uLL)
    {
      v261 = 0xAF46DE79C836B0D8;
      if (*(_QWORD *)&v259 <= 0xAF46DE79C836B0D8)
        v261 = 0xAF46DE79C836B0D8 % *(_QWORD *)&v259;
    }
    else
    {
      v261 = (*(_QWORD *)&v259 - 1) & 0xAF46DE79C836B0D8;
    }
    v262 = *(_QWORD **)(*(_QWORD *)&v258[1] + 8 * v261);
    if (v262)
    {
      v263 = (_QWORD *)*v262;
      if (v263)
      {
        if (v260.u32[0] < 2uLL)
        {
          v264 = *(_QWORD *)&v259 - 1;
          while (1)
          {
            v266 = v263[1];
            if (v266 == 0xAF46DE79C836B0D8)
            {
              if (v263[2] == 0xAF46DE79C836B0D8)
                goto LABEL_684;
            }
            else if ((v266 & v264) != v261)
            {
              goto LABEL_686;
            }
            v263 = (_QWORD *)*v263;
            if (!v263)
              goto LABEL_686;
          }
        }
        do
        {
          v265 = v263[1];
          if (v265 == 0xAF46DE79C836B0D8)
          {
            if (v263[2] == 0xAF46DE79C836B0D8)
            {
LABEL_684:
              v267 = v263[5];
              if (v267)
              {
                v268 = *(_QWORD *)(v267 + 256);
                v269 = *(_OWORD *)(v267 + 240);
                *(_OWORD *)(v267 + 240) = *(_OWORD *)buf;
                *(_QWORD *)(v267 + 256) = *(_QWORD *)&buf[16];
                *(_OWORD *)buf = v269;
                *(_QWORD *)&buf[16] = v268;
                v270 = *(_QWORD *)(v267 + 280);
                v271 = *(_OWORD *)(v267 + 264);
                *(_OWORD *)(v267 + 264) = *(_OWORD *)__p;
                *(_QWORD *)(v267 + 280) = v288;
                *(_OWORD *)__p = v271;
                v288 = v270;
                md::TileSelectionLogic::configurationDidChange((md::TileSelectionLogic *)v267);
              }
              break;
            }
          }
          else
          {
            if (v265 >= *(_QWORD *)&v259)
              v265 %= *(_QWORD *)&v259;
            if (v265 != v261)
              break;
          }
          v263 = (_QWORD *)*v263;
        }
        while (v263);
      }
    }
  }
LABEL_686:
  if (v246)
    operator delete(v246);
  if (__p[0])
    operator delete(__p[0]);
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
  v272 = v289;
  v289 = 0;
  if (v272)
  {
    v273 = *v272;
    if (*v272)
    {
      v272[1] = v273;
      operator delete(v273);
    }
    MEMORY[0x1A1AF4E00](v272, 0x20C40960023A9);
  }
  v274 = v291[0];
  if (v291[0])
  {
    do
    {
      v275 = (_QWORD *)*v274;
      operator delete(v274);
      v274 = v275;
    }
    while (v275);
  }
  v276 = v290[0];
  v290[0] = 0;
  if (v276)
    operator delete(v276);
  v277 = v294[0];
  if (v294[0])
  {
    do
    {
      v278 = (_QWORD *)*v277;
      operator delete(v277);
      v277 = v278;
    }
    while (v278);
  }
  v279 = v293[0];
  v293[0] = 0;
  if (v279)
    operator delete(v279);
  v280 = v297[0];
  if (v297[0])
  {
    do
    {
      v281 = (_QWORD *)*v280;
      operator delete(v280);
      v280 = v281;
    }
    while (v281);
  }
  v282 = v296[0];
  v296[0] = 0;
  if (v282)
    operator delete(v282);
}

void sub_19F2651A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  uint64_t v35;
  void *v37;
  void *v38;

  v37 = (void *)a15;
  if (v34)
  {
    operator delete(v34);
    v37 = __p;
    if (!__p)
    {
LABEL_3:
      v38 = *(void **)(v35 - 160);
      if (!v38)
      {
LABEL_8:
        std::unique_ptr<std::vector<gm::LineSegment<float,2>>>::~unique_ptr[abi:nn180100](&a19);
        std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a20);
        std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a28);
        std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a34);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v38);
      goto LABEL_8;
    }
  }
  else if (!(_QWORD)a15)
  {
    goto LABEL_3;
  }
  operator delete(v37);
  v38 = *(void **)(v35 - 160);
  if (!v38)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t md::RenderLayer::setActive(uint64_t this, char a2)
{
  *(_BYTE *)(this + 32) = a2;
  return this;
}

_BYTE *md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

_BYTE *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

_BYTE *md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

BOOL md::CartographicMapEngineConfiguration::shouldRebuildCurrentMode(md::CartographicMapEngineConfiguration *this, md::MapEngine *a2)
{
  void *v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BOOL8 result;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "daVinciCameraControllerForceMercatorZoom");

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "daVinciCameraController");

  v8 = *((_QWORD *)a2 + 564);
  v9 = *(_QWORD **)v8;
  v10 = *(_QWORD **)(v8 + 8);
  if (v9 != v10)
  {
    while (*v9 != 0x3815A15069F224CDLL)
    {
      v9 += 5;
      if (v9 == v10)
        goto LABEL_12;
    }
  }
  if (v9 == v10)
  {
LABEL_12:
    v12 = 0;
  }
  else
  {
    v12 = v9[3];
    v11 = (std::__shared_weak_count *)v9[4];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (*((unsigned __int8 *)this + 35) == v5 && *((unsigned __int8 *)this + 36) == v7)
  {
    v16 = *(_BYTE **)(v12 + 40);
    result = *v16 != 0;
    *v16 = 0;
  }
  else
  {
    result = 1;
  }
  *((_BYTE *)this + 35) = v5;
  *((_BYTE *)this + 36) = v7;
  return result;
}

void sub_19F265470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::CartographicMapEngineConfiguration::resolveMode(md::CartographicMapEngineConfiguration *this, md::MapEngine *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  int v6;
  int v7;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;

  v2 = *((_QWORD *)a2 + 141);
  v3 = *(_BYTE **)v2;
  v4 = *(_BYTE **)(v2 + 8);
  v5 = v3;
  if (v3 != v4)
  {
    v5 = v3;
    while (*v5 != 20)
    {
      v5 += 16;
      if (v5 == v4)
        goto LABEL_10;
    }
  }
  if (v5 == v4)
  {
LABEL_10:
    v6 = 0;
  }
  else
  {
    v6 = *((_DWORD *)v5 + 2);
    if ((v6 - 1) < 4)
      return (0x9080703u >> (8 * (v6 - 1))) & 0xF;
  }
  v9 = v3;
  if (v3 != v4)
  {
    v9 = v3;
    while (*v9 != 21)
    {
      v9 += 16;
      if (v9 == v4)
        goto LABEL_18;
    }
  }
  if (v9 == v4)
LABEL_18:
    v10 = 0;
  else
    v10 = *((_QWORD *)v9 + 1);
  v11 = v3;
  if (v3 != v4)
  {
    v11 = v3;
    while (*v11 != 22)
    {
      v11 += 16;
      if (v11 == v4)
        goto LABEL_31;
    }
  }
  if (v11 != v4)
  {
    if (v10 | *((_QWORD *)v11 + 1))
      goto LABEL_26;
LABEL_32:
    v15 = v3;
    if (v3 != v4)
    {
      v15 = v3;
      while (*v15 != 20)
      {
        v15 += 16;
        if (v15 == v4)
          return 1;
      }
    }
    if (v15 != v4)
    {
      switch(*((_DWORD *)v15 + 2))
      {
        case 1:
          return 3;
        case 2:
          return 7;
        case 3:
          return 8;
        case 4:
          return 9;
        case 5:
          return 5;
        case 6:
          return 2;
        case 7:
          return 4;
        case 8:
          return 6;
        case 9:
          if (v3 == v4)
            goto LABEL_90;
          break;
        case 0xA:
          return 10;
        case 0xB:
          return 18;
        default:
          return 1;
      }
      while (*v3 != 26)
      {
        v3 += 16;
        if (v3 == v4)
          goto LABEL_93;
      }
      goto LABEL_90;
    }
    return 1;
  }
LABEL_31:
  if (!v10)
    goto LABEL_32;
LABEL_26:
  v12 = *((_QWORD *)a2 + 140);
  v13 = *(_QWORD *)(v12 + 16);
  if ((v13 & (v13 - 1)) != 0)
  {
    v16 = 0x17767EADC5B287BLL;
    if (v13 <= 0x17767EADC5B287BLL)
      v16 = 0x17767EADC5B287BLL % v13;
    v14 = *(_QWORD **)(*(_QWORD *)(v12 + 8) + 8 * v16);
    do
    {
      do
        v14 = (_QWORD *)*v14;
      while (v14[1] != 0x17767EADC5B287BLL);
    }
    while (v14[2] != 0x17767EADC5B287BLL);
  }
  else
  {
    v14 = *(_QWORD **)(*(_QWORD *)(v12 + 8) + 8 * ((v13 - 1) & 0x17767EADC5B287BLL));
    do
    {
      do
        v14 = (_QWORD *)*v14;
      while (v14[1] != 0x17767EADC5B287BLL);
    }
    while (v14[2] != 0x17767EADC5B287BLL);
  }
  v17 = *(_BYTE **)(v14[5] + 160);
  if (!v17[41] && v17[42])
  {
    LOBYTE(v7) = v17[88];
    if (!(_BYTE)v7)
      return v7;
    v19 = v3;
    if (v3 != v4)
    {
      v19 = v3;
      while (*v19 != 20)
      {
        v19 += 16;
        LOBYTE(v7) = 1;
        if (v19 == v4)
          return v7;
      }
    }
    if (v19 != v4)
    {
      switch(*((_DWORD *)v19 + 2))
      {
        case 1:
          return 3;
        case 2:
          return 7;
        case 3:
          return 8;
        case 4:
          return 9;
        case 5:
          return 5;
        case 6:
          return 2;
        case 7:
          return 4;
        case 8:
          return 6;
        case 9:
          if (v3 == v4)
            goto LABEL_90;
          break;
        case 0xA:
          return 10;
        case 0xB:
          return 18;
        default:
          return 1;
      }
      while (*v3 != 26)
      {
        v3 += 16;
        if (v3 == v4)
          goto LABEL_93;
      }
      goto LABEL_90;
    }
    return 1;
  }
  if (v17[80])
  {
    switch(v6)
    {
      case 0:
        return 11;
      case 8:
        return 13;
      case 5:
        return 12;
    }
  }
  v18 = v3;
  if (v3 != v4)
  {
    v18 = v3;
    while (*v18 != 20)
    {
      v18 += 16;
      if (v18 == v4)
        return 1;
    }
  }
  if (v18 == v4)
    return 1;
  switch(*((_DWORD *)v18 + 2))
  {
    case 1:
      return 3;
    case 2:
      return 7;
    case 3:
      return 8;
    case 4:
      return 9;
    case 5:
      return 5;
    case 6:
      return 2;
    case 7:
      return 4;
    case 8:
      return 6;
    case 9:
      if (v3 == v4)
        goto LABEL_90;
      break;
    case 0xA:
      return 10;
    case 0xB:
      return 18;
    default:
      return 1;
  }
  while (*v3 != 26)
  {
    v3 += 16;
    if (v3 == v4)
      goto LABEL_93;
  }
LABEL_90:
  if (v3 == v4)
  {
LABEL_93:
    LOBYTE(v20) = 0;
  }
  else
  {
    v20 = v3[8];
    if (v20 >= 4)
      return 10;
  }
  return (v20 + 14);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::OverlayTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::MapTileDataRenderable<md::OverlayTileData>>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 400 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F265C3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t md::MapEngine::logLayoutReasonsHistory(md::MapEngine *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void **v14;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 540);
  v3 = *((_QWORD *)this + 541);
  v4 = __OFSUB__(v2, v3);
  v5 = v2 - v3;
  if (v5 < 0 != v4)
    v6 = v5 + 121;
  else
    v6 = v5;
  v7 = v6 < a2 || v6 == 0;
  v8 = !v7;
  if (!v7)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v10 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = v2 - 1;
      if (!v2)
        v11 = 120;
      v12 = (char *)this + 24 * v11;
      v13 = *((_QWORD *)v12 + 176);
      stringForLayoutReasonsMask(__p, *((_QWORD *)v12 + 178));
      if (v17 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 134218498;
      v19 = v6;
      v20 = 2048;
      v21 = v13;
      v22 = 2080;
      v23 = v14;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "Layouts:%lu LayoutNumber:%llu LastLayoutReasons:%s", buf, 0x20u);
      if (v17 < 0)
        operator delete(__p[0]);
    }

    *((_QWORD *)this + 541) = *((_QWORD *)this + 540);
  }
  return v8;
}

void sub_19F265DC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F265E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_BYTE *md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

_BYTE *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

void md::TransitRenderLayer::setActive(md::TransitRenderLayer *this, int a2, int a3)
{
  unint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  void **v19;
  _QWORD *v20;
  unint64_t v21;
  const void *v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  const void *v26;
  size_t v27;
  const void *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  void *v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  size_t v39;
  size_t v40;
  size_t v41;
  _QWORD *i;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  void *v56;
  void *v57;
  VKTimedAnimation *v58;
  uint64_t v59;
  void *v60;
  double v61;
  uint64_t v62;
  void *v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char v71;
  _QWORD v72[5];
  _QWORD v73[3];
  _QWORD *v74;
  _QWORD v75[5];
  _BYTE v76[24];
  _BYTE *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 32) = a2;
  if (!a2)
  {
    (*(void (**)(md::TransitRenderLayer *))(*(_QWORD *)this + 48))(this);
    v71 = a3;
    if (*((_BYTE *)this + 32))
      v10 = a3 == 0;
    else
      v10 = 1;
    if (v10 || *(_QWORD *)(*((_QWORD *)this + 47) + 112))
    {
      *((_BYTE *)this + 32) = 0;
      (*(void (**)(md::TransitRenderLayer *))(*(_QWORD *)this + 48))(this);
      return;
    }
    v11 = (uint64_t *)*((_QWORD *)this + 34);
    v12 = (uint64_t *)*((_QWORD *)this + 35);
    if (v11 == v12)
    {
      v57 = 0;
LABEL_118:
      v73[0] = &off_1E42CF6F8;
      v73[1] = this;
      v73[2] = &v71;
      v74 = v73;
      objc_msgSend(v57, "stop", v70);
      v58 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", 0.5);
      v59 = *((_QWORD *)this + 47);
      v60 = *(void **)(v59 + 112);
      *(_QWORD *)(v59 + 112) = v58;

      LODWORD(v61) = 30.0;
      objc_msgSend(*(id *)(*((_QWORD *)this + 47) + 112), "setFrequency:", v61);
      objc_msgSend(*(id *)(*((_QWORD *)this + 47) + 112), "setTimingFunction:", VKAnimationCurveEaseIn);
      v62 = MEMORY[0x1E0C809B0];
      v63 = *(void **)(*((_QWORD *)this + 47) + 112);
      v72[0] = MEMORY[0x1E0C809B0];
      v72[1] = 3221225472;
      v72[2] = ___ZN2md18TransitRenderLayer19beginFadeOutTransitENSt3__18functionIFvvEEE_block_invoke;
      v72[3] = &__block_descriptor_40_e8_v12__0f8l;
      v72[4] = this;
      objc_msgSend(v63, "setStepHandler:", v72);
      v64 = *(void **)(*((_QWORD *)this + 47) + 112);
      v75[0] = v62;
      v75[1] = 3321888768;
      v75[2] = ___ZN2md18TransitRenderLayer19beginFadeOutTransitENSt3__18functionIFvvEEE_block_invoke_2;
      v75[3] = &__block_descriptor_72_ea8_40c27_ZTSNSt3__18functionIFvvEEE_e8_v12__0B8l;
      v75[4] = this;
      v65 = v76;
      v66 = (uint64_t)v74;
      if (v74)
      {
        if (v74 == v73)
        {
          v77 = v76;
          (*(void (**)(_QWORD *, _BYTE *))(v73[0] + 24))(v73, v76);
LABEL_123:
          objc_msgSend(v64, "setCompletionHandler:", v75);
          md::AnimationRunner::runAnimation(*((md::MapEngine ***)this + 50), *(VKAnimation **)(*((_QWORD *)this + 47) + 112));
          if (v77 == v76)
          {
            v67 = 4;
          }
          else
          {
            if (!v77)
              goto LABEL_128;
            v67 = 5;
            v65 = v77;
          }
          (*(void (**)(_QWORD *))(*v65 + 8 * v67))(v65);
LABEL_128:
          v68 = v74;
          if (v74 == v73)
          {
            v69 = 4;
            v68 = v73;
          }
          else
          {
            if (!v74)
              return;
            v69 = 5;
          }
          (*(void (**)(_QWORD *))(*v68 + 8 * v69))(v68);
          return;
        }
        v66 = (*(uint64_t (**)(void))(*v74 + 16))();
      }
      v77 = (_BYTE *)v66;
      goto LABEL_123;
    }
    v13 = (_QWORD *)((char *)this + 104);
    v70 = (char *)this + 104;
    while (1)
    {
      v14 = *v11;
      v15 = *(_QWORD *)(*v11 + 384);
      v16 = *(_QWORD *)(v15 + 120);
      v17 = *((_QWORD *)this + 12);
      if (v17)
      {
        v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          v3 = *(_QWORD *)(v15 + 120);
          if (v16 >= v17)
            v3 = v16 % v17;
        }
        else
        {
          v3 = (v17 - 1) & v16;
        }
        v19 = *(void ***)(*((_QWORD *)this + 11) + 8 * v3);
        if (v19)
        {
          v20 = *v19;
          if (*v19)
          {
            if (v18.u32[0] >= 2uLL)
            {
              while (1)
              {
                v21 = v20[1];
                if (v21 == v16)
                {
                  if (*((unsigned __int8 *)v20 + 16) == *(unsigned __int8 *)(v15 + 16)
                    && *((unsigned __int16 *)v20 + 12) == *(unsigned __int16 *)(v15 + 24)
                    && v20[12] == *(_QWORD *)(v15 + 96))
                  {
                    v22 = (const void *)v20[4];
                    v23 = v20[5] - (_QWORD)v22;
                    v24 = *(const void **)(v15 + 32);
                    if (v23 == *(_QWORD *)(v15 + 40) - (_QWORD)v24 && !memcmp(v22, v24, v23))
                      goto LABEL_106;
                  }
                }
                else
                {
                  if (v21 >= v17)
                    v21 %= v17;
                  if (v21 != v3)
                    goto LABEL_44;
                }
                v20 = (_QWORD *)*v20;
                if (!v20)
                  goto LABEL_44;
              }
            }
            do
            {
              v25 = v20[1];
              if (v25 == v16)
              {
                if (*((unsigned __int8 *)v20 + 16) == *(unsigned __int8 *)(v15 + 16)
                  && *((unsigned __int16 *)v20 + 12) == *(unsigned __int16 *)(v15 + 24)
                  && v20[12] == *(_QWORD *)(v15 + 96))
                {
                  v26 = (const void *)v20[4];
                  v27 = v20[5] - (_QWORD)v26;
                  v28 = *(const void **)(v15 + 32);
                  if (v27 == *(_QWORD *)(v15 + 40) - (_QWORD)v28 && !memcmp(v26, v28, v27))
                  {
                    v13 = (_QWORD *)((char *)this + 104);
                    goto LABEL_106;
                  }
                }
              }
              else if ((v25 & (v17 - 1)) != v3)
              {
                break;
              }
              v20 = (_QWORD *)*v20;
            }
            while (v20);
            v13 = (_QWORD *)((char *)this + 104);
          }
        }
      }
LABEL_44:
      v20 = operator new(0x88uLL);
      *v20 = 0;
      v20[1] = v16;
      *((_BYTE *)v20 + 16) = *(_BYTE *)(v15 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v20 + 3), v15 + 24);
      *((_BYTE *)v20 + 112) = 0;
      if (*(_BYTE *)(v15 + 112))
      {
        *((_DWORD *)v20 + 29) = *(_DWORD *)(v15 + 116);
        *((_BYTE *)v20 + 112) = 1;
      }
      v20[15] = *(_QWORD *)(v15 + 120);
      v20[16] = 0;
      v29 = (float)(unint64_t)(*((_QWORD *)this + 14) + 1);
      v30 = *((float *)this + 30);
      if (!v17 || (float)(v30 * (float)v17) < v29)
        break;
LABEL_96:
      v53 = *((_QWORD *)this + 11);
      v54 = *(_QWORD **)(v53 + 8 * v3);
      if (v54)
      {
        *v20 = *v54;
      }
      else
      {
        *v20 = *v13;
        *v13 = v20;
        *(_QWORD *)(v53 + 8 * v3) = v13;
        if (!*v20)
          goto LABEL_105;
        v55 = *(_QWORD *)(*v20 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v55 >= v17)
            v55 %= v17;
        }
        else
        {
          v55 &= v17 - 1;
        }
        v54 = (_QWORD *)(*((_QWORD *)this + 11) + 8 * v55);
      }
      *v54 = v20;
LABEL_105:
      ++*((_QWORD *)this + 14);
LABEL_106:
      v20[16] = v14;
      if (++v11 == v12)
      {
        v57 = *(void **)(*((_QWORD *)this + 47) + 112);
        goto LABEL_118;
      }
    }
    v31 = (v17 & (v17 - 1)) != 0;
    if (v17 < 3)
      v31 = 1;
    v32 = v31 | (2 * v17);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v17 = *((_QWORD *)this + 12);
    if (prime <= v17)
    {
      if (prime >= v17)
        goto LABEL_83;
      v46 = vcvtps_u32_f32((float)*((unint64_t *)this + 14) / *((float *)this + 30));
      if (v17 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v46);
      }
      else
      {
        v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2)
          v46 = v48;
      }
      if (prime <= v46)
        prime = v46;
      if (prime >= v17)
      {
        v17 = *((_QWORD *)this + 12);
LABEL_83:
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v16 >= v17)
            v3 = v16 % v17;
          else
            v3 = v16;
        }
        else
        {
          v3 = (v17 - 1) & v16;
        }
        goto LABEL_96;
      }
      if (!prime)
      {
        v56 = (void *)*((_QWORD *)this + 11);
        *((_QWORD *)this + 11) = 0;
        if (v56)
          operator delete(v56);
        v17 = 0;
        *((_QWORD *)this + 12) = 0;
        goto LABEL_83;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v35 = operator new(8 * prime);
    v36 = (void *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v35;
    if (v36)
      operator delete(v36);
    v37 = 0;
    *((_QWORD *)this + 12) = prime;
    do
      *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v37++) = 0;
    while (prime != v37);
    v38 = (_QWORD *)*v13;
    if (!*v13)
    {
LABEL_82:
      v17 = prime;
      goto LABEL_83;
    }
    v39 = v38[1];
    v40 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v41 = v39 & v40;
      *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v41) = v13;
      for (i = (_QWORD *)*v38; *v38; i = (_QWORD *)*v38)
      {
        v43 = i[1] & v40;
        if (v43 == v41)
        {
          v38 = i;
        }
        else
        {
          v44 = *((_QWORD *)this + 11);
          if (*(_QWORD *)(v44 + 8 * v43))
          {
            *v38 = *i;
            v45 = 8 * v43;
            *i = **(_QWORD **)(*((_QWORD *)this + 11) + v45);
            **(_QWORD **)(*((_QWORD *)this + 11) + v45) = i;
          }
          else
          {
            *(_QWORD *)(v44 + 8 * v43) = v38;
            v38 = i;
            v41 = v43;
          }
        }
      }
      goto LABEL_82;
    }
    if (v39 >= prime)
      v39 %= prime;
    *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v39) = v13;
    v49 = (_QWORD *)*v38;
    if (!*v38)
      goto LABEL_82;
    while (1)
    {
      v51 = v49[1];
      if (v51 >= prime)
        v51 %= prime;
      if (v51 != v39)
      {
        v52 = *((_QWORD *)this + 11);
        if (!*(_QWORD *)(v52 + 8 * v51))
        {
          *(_QWORD *)(v52 + 8 * v51) = v38;
          goto LABEL_87;
        }
        *v38 = *v49;
        v50 = 8 * v51;
        *v49 = **(_QWORD **)(*((_QWORD *)this + 11) + v50);
        **(_QWORD **)(*((_QWORD *)this + 11) + v50) = v49;
        v49 = v38;
      }
      v51 = v39;
LABEL_87:
      v38 = v49;
      v49 = (_QWORD *)*v49;
      v39 = v51;
      if (!v49)
        goto LABEL_82;
    }
  }
  v6 = *((_QWORD *)this + 47);
  v7 = *(void **)(v6 + 112);
  if (v7)
  {
    objc_msgSend(v7, "stop");
    v8 = *((_QWORD *)this + 47);
    v9 = *(void **)(v8 + 112);
    *(_QWORD *)(v8 + 112) = 0;

    v6 = *((_QWORD *)this + 47);
  }
  *((_BYTE *)this + 32) = 1;
  *(_BYTE *)(v6 + 76) = a3;
}

void sub_19F26662C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v22 = *(_QWORD **)(v20 + 64);
  if (v22 == v19)
  {
    v23 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v23 = 5;
    v19 = *(_QWORD **)(v20 + 64);
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v23))(v19);
LABEL_6:
  v24 = a19;
  if (a19 == &a16)
  {
    v25 = 4;
    v24 = &a16;
  }
  else
  {
    if (!a19)
      _Unwind_Resume(exception_object);
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
  _Unwind_Resume(exception_object);
}

void md::CartographicMapEngineConfiguration::configureForSettings(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  gdc::LayerDataStore *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  gdc::LayerDataStore *v38;
  uint64_t v39;
  BOOL v40;
  gdc::LayerDataStore *v41;

  v5 = (uint64_t *)a2[141];
  v6 = *v5;
  v7 = v5[1];
  if (v6 != v7)
  {
    while (*(_BYTE *)v6 != 20)
    {
      v6 += 16;
      if (v6 == v7)
        goto LABEL_7;
    }
  }
  if (v6 == v7)
LABEL_7:
    v8 = 0;
  else
    v8 = *(_DWORD *)(v6 + 8);
  v9 = (_QWORD *)a2[112];
  v10 = *a3;
  v11 = a3[1];
  v12 = *a3;
  if (*a3 != v11)
  {
    v12 = *a3;
    while (*(_BYTE *)v12 != 2)
    {
      v12 += 16;
      if (v12 == v11)
        goto LABEL_15;
    }
  }
  if (v12 == v11 || !*(_QWORD *)(v12 + 8))
  {
LABEL_15:
    if (v10 != v11)
    {
      while (*(_BYTE *)v10 != 4)
      {
        v10 += 16;
        if (v10 == v11)
          goto LABEL_25;
      }
    }
    if (v10 == v11 || !*(_QWORD *)(v10 + 8))
    {
LABEL_25:
      v13 = 0;
      v14 = (uint64_t *)a3[4];
      if (v14)
        goto LABEL_26;
      goto LABEL_53;
    }
  }
  if (v8 != 5 || (GEOConfigGetBOOL() & 1) != 0)
  {
    v13 = 1;
    v14 = (uint64_t *)a3[4];
    if (!v14)
      goto LABEL_53;
LABEL_26:
    v15 = (uint64_t **)v14;
    while (1)
    {
      v16 = *((unsigned __int8 *)v15 + 25);
      if (v16 <= 2)
      {
        if (v16 == 2)
        {
          v17 = v9[4];
          v18 = v9[5];
          v19 = v17;
          if (v17 != v18)
          {
            v19 = v9[4];
            while (*(_WORD *)v19 != 2)
            {
              v19 += 16;
              if (v19 == v18)
                goto LABEL_69;
            }
          }
          if (v19 == v18 || (v21 = *(_QWORD *)(v19 + 8)) == 0)
          {
LABEL_69:
            v29 = v9[10];
            v30 = v9[11];
            v31 = v29;
            if (v29 != v30)
            {
              v31 = v9[10];
              while (*(_WORD *)v31 != 2)
              {
                v31 += 16;
                if (v31 == v30)
                  goto LABEL_78;
              }
            }
            if (v31 != v30)
            {
              v32 = *(_QWORD *)(v31 + 8);
              if (v32)
              {
                for (i = *(_QWORD *)(v32 + 8); i != v32; i = *(_QWORD *)(i + 8))
                  *(_QWORD *)(*(_QWORD *)(i + 128) + 152) = 1;
              }
            }
LABEL_78:
            if (v29 != v30)
            {
              while (*(_WORD *)v29 != 3)
              {
                v29 += 16;
                if (v29 == v30)
                  goto LABEL_87;
              }
            }
            if (v29 != v30)
            {
              v34 = *(gdc::LayerDataStore **)(v29 + 8);
              if (v34)
              {
                gdc::LayerDataStore::clearAllData(v34);
                v17 = v9[4];
                v18 = v9[5];
              }
            }
LABEL_87:
            while (v17 != v18)
            {
              if (*(_WORD *)v17 == 3)
              {
                if (v17 != v18)
                {
                  v39 = *(_QWORD *)(v17 + 8);
                  if (v39)
                  {
                    v40 = a2[150] == 1 && v13;
                    *(_BYTE *)(v39 + 785) = v40;
                  }
                }
                break;
              }
              v17 += 16;
            }
            v35 = v9[10];
            v36 = v9[11];
            v37 = v35;
            if (v35 != v36)
            {
              v37 = v9[10];
              while (*(_WORD *)v37 != 52)
              {
                v37 += 16;
                if (v37 == v36)
                  goto LABEL_98;
              }
            }
            if (v37 != v36)
            {
              v38 = *(gdc::LayerDataStore **)(v37 + 8);
              if (v38)
              {
                gdc::LayerDataStore::clearAllData(v38);
                v35 = v9[10];
                v36 = v9[11];
              }
            }
LABEL_98:
            while (v35 != v36)
            {
              if (*(_WORD *)v35 == 53)
              {
                if (v35 != v36)
                {
                  v41 = *(gdc::LayerDataStore **)(v35 + 8);
                  if (v41)
                    gdc::LayerDataStore::clearAllData(v41);
                }
                return;
              }
              v35 += 16;
            }
            return;
          }
LABEL_62:
          v27 = 1;
          goto LABEL_66;
        }
        ++v15;
      }
      v15 = (uint64_t **)*v15;
      if (!v15)
      {
        while (1)
        {
          v20 = *((unsigned __int8 *)v14 + 25);
          if (v20 <= 4)
          {
            if (v20 == 4)
            {
              v24 = 1;
              goto LABEL_54;
            }
            ++v14;
          }
          v14 = (uint64_t *)*v14;
          if (!v14)
            goto LABEL_53;
        }
      }
    }
  }
  v22 = *a3;
  v23 = a3[1];
  if (*a3 != v23)
  {
    while (*(_BYTE *)v22 != 25)
    {
      v22 += 16;
      if (v22 == v23)
        goto LABEL_51;
    }
  }
  if (v22 == v23)
LABEL_51:
    v25 = 0;
  else
    v25 = *(_QWORD *)(v22 + 8);
  v13 = v25 == 0;
  v14 = (uint64_t *)a3[4];
  if (v14)
    goto LABEL_26;
LABEL_53:
  v24 = 0;
LABEL_54:
  v17 = v9[4];
  v18 = v9[5];
  v26 = v17;
  if (v17 != v18)
  {
    v26 = v9[4];
    while (*(_WORD *)v26 != 2)
    {
      v26 += 16;
      if (v26 == v18)
        goto LABEL_63;
    }
  }
  if (v26 == v18 || (v21 = *(_QWORD *)(v26 + 8)) == 0)
  {
LABEL_63:
    if (v24)
      goto LABEL_69;
  }
  else
  {
    if ((v24 & 1) != 0)
      goto LABEL_62;
    v27 = v13 ^ (*(_BYTE *)(v21 + 752) != 0);
LABEL_66:
    *(_BYTE *)(v21 + 752) = v13;
    v28 = !v13;
    if (a2[150] != 1)
      v28 = 1;
    *(_BYTE *)(v21 + 801) = v28;
    if ((v27 & 1) != 0)
      goto LABEL_69;
  }
}

_BYTE *md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

_BYTE *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

_BYTE *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

_BYTE *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

_BYTE *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

_BYTE *md::CartographicTiledRenderLayer<HillshadeRenderable>::setActive(_BYTE *result, char a2)
{
  result[32] = a2;
  if ((a2 & 1) == 0)
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 48))(result);
  return result;
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::setActive(uint64_t a1, char a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_BYTE *)(a1 + 32) = a2;
  if ((a2 & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v3 = *(std::__shared_weak_count **)(a1 + 472);
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::setActive(uint64_t a1, char a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_BYTE *)(a1 + 32) = a2;
  if ((a2 & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v3 = *(std::__shared_weak_count **)(a1 + 472);
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void md::PuckRenderLayer::setActive(md::PuckRenderLayer *this, int a2)
{
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  __int16 v9;

  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v4 = (id)GEOGetVectorKitVKDefaultLog_log;
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v5)
    {
      v9 = 0;
      v6 = "Activate puck render layer";
      v7 = (uint8_t *)&v9;
LABEL_8:
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, v6, v7, 2u);
    }
  }
  else if (v5)
  {
    v8 = 0;
    v6 = "Deactivate puck render layer";
    v7 = (uint8_t *)&v8;
    goto LABEL_8;
  }

  *((_BYTE *)this + 32) = a2;
}

void md::MapEngineConfiguration::createMode(uint64_t a1@<X0>, int a2@<W1>, md::InitialMapEngineMode **a3@<X8>)
{
  void *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  md::InitialMapEngineMode *v11;
  char IsEnabled_VKMLayout_SPR;
  md::InitialMapEngineMode *v13;
  md::InitialMapEngineMode *v14;
  md::InitialMapEngineMode *v15;
  __int128 *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v6, "forceFlyoverUnificationMode") & 1) != 0)
  {
    v7 = 1;
  }
  else if (GEOConfigGetBOOL())
  {
    objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "activeTileGroup");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "activeTileSetForTileType:scale:", 92, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v10 != 0;

  }
  else
  {
    v7 = 0;
  }

  switch(a2)
  {
    case 0:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::InitialMapEngineMode::InitialMapEngineMode(v11, 0);
      goto LABEL_46;
    case 1:
      v11 = (md::InitialMapEngineMode *)operator new();
      IsEnabled_VKMLayout_SPR = MapsFeature_IsEnabled_VKMLayout_SPR();
      md::StandardMapEngineMode::StandardMapEngineMode((uint64_t)v11, 1, 0, IsEnabled_VKMLayout_SPR);
      goto LABEL_46;
    case 2:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::StandardGridMapEngineMode::StandardGridMapEngineMode(v11);
      goto LABEL_46;
    case 3:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::SatelliteMapEngineMode::SatelliteMapEngineMode(v11);
      goto LABEL_46;
    case 4:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::SatelliteGridMapEngineMode::SatelliteGridMapEngineMode(v11);
      goto LABEL_46;
    case 5:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::NavigationMapEngineMode::NavigationMapEngineMode(v11, 0);
      goto LABEL_46;
    case 6:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::TransitMapEngineMode::TransitMapEngineMode(v11, 0);
      goto LABEL_46;
    case 7:
      v11 = (md::InitialMapEngineMode *)operator new();
      if (v7)
        md::SandboxHybridMapEngineMode::SandboxHybridMapEngineMode(v11, 0);
      else
        md::HybridMapEngineMode::HybridMapEngineMode(v11);
      goto LABEL_46;
    case 8:
      if (v7)
      {
        v13 = (md::InitialMapEngineMode *)operator new();
        md::SandboxBaseMapEngineMode::SandboxBaseMapEngineMode((uint64_t)v13, 8, 1);
        *(_QWORD *)v13 = &off_1E42AB498;
        *a3 = v13;
      }
      else
      {
        v11 = (md::InitialMapEngineMode *)operator new();
        md::RealisticSatelliteMapEngineMode::RealisticSatelliteMapEngineMode(v11);
LABEL_46:
        *a3 = v11;
      }
      return;
    case 9:
      v11 = (md::InitialMapEngineMode *)operator new();
      if (v7)
        md::SandboxHybridMapEngineMode::SandboxHybridMapEngineMode(v11, 1);
      else
        md::RealisticHybridMapEngineMode::RealisticHybridMapEngineMode(v11);
      goto LABEL_46;
    case 10:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::RealisticARMapEngineMode::RealisticARMapEngineMode(v11);
      goto LABEL_46;
    case 11:
      v14 = (md::InitialMapEngineMode *)operator new();
      v15 = v14;
      v16 = *(__int128 **)(a1 + 16);
      v17 = *(std::__shared_weak_count **)(a1 + 24);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      md::DaVinciMapEngineMode::DaVinciMapEngineMode(v14, 11, 0, v16, v17);
      if (v17)
      {
        v34 = (unint64_t *)&v17->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *a3 = v15;
      if (v17)
      {
        v36 = (unint64_t *)&v17->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
          goto LABEL_57;
      }
      return;
    case 12:
      v21 = operator new();
      v22 = v21;
      v23 = *(_QWORD *)(a1 + 16);
      v17 = *(std::__shared_weak_count **)(a1 + 24);
      if (v17)
      {
        v24 = (unint64_t *)&v17->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      md::DaVinciNavigationMapEngineMode::DaVinciNavigationMapEngineMode(v21, 0, v23, v17);
      *a3 = (md::InitialMapEngineMode *)v22;
      if (!v17)
        return;
      v26 = (unint64_t *)&v17->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      goto LABEL_40;
    case 13:
      v28 = operator new();
      v29 = v28;
      v30 = *(__int128 **)(a1 + 16);
      v17 = *(std::__shared_weak_count **)(a1 + 24);
      if (v17)
      {
        v31 = (unint64_t *)&v17->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      md::DaVinciTransitMapEngineMode::DaVinciTransitMapEngineMode(v28, 0, v30, v17);
      *a3 = (md::InitialMapEngineMode *)v29;
      if (!v17)
        return;
      v33 = (unint64_t *)&v17->__shared_owners_;
      do
        v27 = __ldaxr(v33);
      while (__stlxr(v27 - 1, v33));
LABEL_40:
      if (!v27)
      {
LABEL_57:
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      return;
    case 18:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::MuninMapEngineMode::MuninMapEngineMode(v11);
      goto LABEL_46;
    default:
      *a3 = 0;
      return;
  }
}

void sub_19F267254(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10A1C403DD9F596);
  _Unwind_Resume(a1);
}

void sub_19F26731C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void md::CartographicMapEngineConfiguration::createPassList(md::CartographicMapEngineConfiguration *this@<X0>, md::FrameGraphResourceRegistry *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int32x4_t v26;
  float32x4_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int32x4_t v48;
  int16x8_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  std::__shared_weak_count_vtbl *v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t **v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  unsigned __int8 v79;
  uint64_t *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v104;
  unint64_t v105;
  unint64_t shared_weak_owners;
  unint64_t v107;
  unint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  geo::read_write_lock *v111;
  const char *v112;
  malloc_zone_t *zone;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  malloc_zone_t *v117;
  uint64_t v118;
  geo::read_write_lock *v119;
  const char *v120;
  malloc_zone_t *v121;
  int v122;
  int v123;
  uint64_t v124;
  geo::read_write_lock *v125;
  const char *v126;
  malloc_zone_t *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t *v130;

  v5 = operator new();
  md::PassList::PassList((md::PassList *)v5, a2);
  *(_QWORD *)v5 = &off_1E4292260;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 60) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E42E2978;
  v7 = ggl::BufferData::BufferData((uint64_t)(v6 + 3), qword_1EE549278, 2, 1, 6, 1);
  v6[28] = ggl::DaVinci::RenderTargetSize::reflection(void)::reflection;
  v6[3] = &off_1E42B9C30;
  *(_QWORD *)(v5 + 320) = v7;
  *(_QWORD *)(v5 + 328) = v6;
  v8 = operator new(0xE8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42E2A58;
  v9 = ggl::BufferData::BufferData((uint64_t)(v8 + 3), qword_1EE572B78, 2, 1, 6, 1);
  v8[28] = ggl::DaVinci::LightingDebugOptions::reflection(void)::reflection;
  v8[3] = &off_1E42B9D10;
  *(_QWORD *)(v5 + 336) = v9;
  *(_QWORD *)(v5 + 344) = v8;
  v10 = operator new();
  *(_DWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E42B63B0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_OWORD *)(v10 + 36) = xmmword_19FFB2EA0;
  *(_QWORD *)(v10 + 52) = 0x100000001;
  *(_DWORD *)(v10 + 60) = 0;
  v11 = (_QWORD *)operator new();
  *v11 = &off_1E42E77C8;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  v12 = *(std::__shared_weak_count **)(v5 + 304);
  *(_QWORD *)(v5 + 296) = v10;
  *(_QWORD *)(v5 + 304) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = operator new();
  *(_DWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_OWORD *)(v15 + 56) = xmmword_19FFB4D90;
  *(_QWORD *)(v15 + 72) = 0x100000001;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 96) = 0;
  *(_QWORD *)(v15 + 80) = 0;
  *(_QWORD *)v15 = &off_1E42BE438;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v15 + 48) = "";
  *(_DWORD *)(v15 + 104) = 1;
  *(_QWORD *)(v15 + 112) = 0;
  *(_QWORD *)(v15 + 120) = 0;
  *(_WORD *)(v15 + 128) = 0;
  *(_BYTE *)(v15 + 130) = 1;
  v16 = *(_QWORD *)(v5 + 304);
  *(_QWORD *)(v15 + 136) = *(_QWORD *)(v5 + 296);
  *(_QWORD *)(v15 + 144) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(v15 + 80) = 0x1000000010;
  v19 = *(_QWORD *)(v5 + 288);
  *(_QWORD *)(v5 + 288) = v15;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)operator new(0x60uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v22 = ggl::TextureData2D::TextureData2D((uint64_t)&v20[1], 16, 16, 1u, 12, 0);
  v23 = ((uint64_t (*)(_QWORD *, _QWORD))v20[1].__on_zero_shared)(v22, 0);
  v24 = 0;
  v25 = 1;
  v26.i64[0] = -1;
  v26.i64[1] = -1;
  v27 = (float32x4_t)vdupq_n_s32(0x33FF0000u);
  do
  {
    v28 = v25 / 0xADC8;
    v29 = 48271 * (v25 % 0xADC8);
    v28 *= 3399;
    _CF = v29 >= v28;
    v31 = v29 - v28;
    if (_CF)
      v32 = 0;
    else
      v32 = 0x7FFFFFFF;
    v33 = v32 + v31;
    v34 = 48271 * (v33 % 0xADC8);
    v35 = 3399 * (v33 / 0xADC8);
    _CF = v34 >= v35;
    v36 = v34 - v35;
    if (_CF)
      v37 = 0;
    else
      v37 = 0x7FFFFFFF;
    v38 = v37 + v36;
    v39 = 48271 * (v38 % 0xADC8);
    v40 = 3399 * (v38 / 0xADC8);
    _CF = v39 >= v40;
    v41 = v39 - v40;
    if (_CF)
      v42 = 0;
    else
      v42 = 0x7FFFFFFF;
    v43 = v42 + v41;
    v44 = 48271 * (v43 % 0xADC8);
    v45 = 3399 * (v43 / 0xADC8);
    _CF = v44 >= v45;
    v46 = v44 - v45;
    if (_CF)
      v47 = 0;
    else
      v47 = 0x7FFFFFFF;
    v25 = v47 + v46;
    v48.i64[0] = __PAIR64__(v38, v33);
    v48.i64[1] = __PAIR64__(v25, v43);
    v49 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v48, v26)), v27));
    *(int16x4_t *)v49.i8 = vmovn_s32((int32x4_t)v49);
    *(_DWORD *)(v23 + v24) = vmovn_s16(v49).u32[0];
    _CF = v24 >= 0x3FC;
    v24 += 4;
  }
  while (!_CF);
  v50 = *(_QWORD *)(v5 + 288);
  do
    v51 = __ldxr(v21);
  while (__stxr(v51 + 1, v21));
  do
    v52 = __ldxr(v21);
  while (__stxr(v52 + 1, v21));
  v53 = *(std::__shared_weak_count **)(v50 + 120);
  *(_QWORD *)(v50 + 112) = v20 + 1;
  *(_QWORD *)(v50 + 120) = v20;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  do
    v56 = __ldaxr(v21);
  while (__stlxr(v56 - 1, v21));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  v57 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v57->__shared_owners_ = 0;
  v58 = (unint64_t *)&v57->__shared_owners_;
  v57->__shared_weak_owners_ = 0;
  v57->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
  ggl::BufferData::BufferData((uint64_t)&v57[1], 2, 1, 0, 6, 6);
  LODWORD(v57[10].__vftable) = 0;
  v57[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
  v57[1].__shared_owners_ = 2;
  v57[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
  v57[9].__shared_weak_owners_ = (uint64_t)"index data";
  v59 = v57[4].__vftable;
  v59->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))0x200010000;
  LODWORD(v59->~__shared_weak_count_0) = 196610;
  v60 = operator new();
  v129 = v20;
  v130 = a3;
  if ((v61 & 1) == 0
  {
    if ((v109 & 1) == 0
    {
      ggl::MeshTyped<ggl::DaVinci::ScreenVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::screenVboReflection;
    }
    ggl::MeshTyped<ggl::DaVinci::ScreenVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::ScreenVbo>::attributesReflection(void)::r;
    *(_QWORD *)algn_1ECE44DB0 = 1;
  }
  *(_QWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 40) = 0;
  *(_DWORD *)(v60 + 48) = 0;
  *(_QWORD *)v60 = &off_1E42BBC08;
  *(_QWORD *)(v60 + 8) = "UnitQuad";
  *(_QWORD *)(v60 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v60 + 24) = 0;
  *(_QWORD *)(v60 + 56) = &ggl::MeshTyped<ggl::DaVinci::ScreenVbo>::typedReflection(void)::r;
  *(_QWORD *)(v60 + 64) = 0;
  v62 = (uint64_t **)(v60 + 64);
  *(_QWORD *)(v60 + 72) = 0;
  *(_QWORD *)(v60 + 80) = 0;
  {
    v110 = operator new();
    *(_QWORD *)(v110 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v110 + 24) = "GeoGL";
    *(_OWORD *)(v110 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v110 = &off_1E42B5668;
    *(_QWORD *)(v110 + 8) = "GeoGL";
    *(_OWORD *)(v110 + 72) = 0u;
    *(_OWORD *)(v110 + 88) = 0u;
    *(_OWORD *)(v110 + 104) = 0u;
    *(_OWORD *)(v110 + 120) = 0u;
    *(_OWORD *)(v110 + 136) = 0u;
    *(_OWORD *)(v110 + 152) = 0u;
    *(_OWORD *)(v110 + 168) = 0u;
    *(_OWORD *)(v110 + 184) = 0u;
    *(_OWORD *)(v110 + 200) = 0u;
    *(_OWORD *)(v110 + 216) = 0u;
    *(_OWORD *)(v110 + 232) = 0u;
    *(_QWORD *)(v110 + 248) = 0;
    *(_OWORD *)(v110 + 56) = 0u;
    v111 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v110 + 56), 0);
    if ((_DWORD)v111)
      geo::read_write_lock::logFailure(v111, (uint64_t)"initialization", v112);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v110 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v110 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v110;
  }
  v64 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v60 + 120) = 0;
  *(_QWORD *)(v60 + 96) = 0;
  *(_QWORD *)(v60 + 104) = 0;
  *(_QWORD *)(v60 + 88) = v64;
  {
    v114 = operator new();
    *(_QWORD *)(v114 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v114 + 24) = "GeoGL";
    *(_OWORD *)(v114 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v114 = &off_1E42B5668;
    *(_QWORD *)(v114 + 8) = "GeoGL";
    *(_OWORD *)(v114 + 72) = 0u;
    *(_OWORD *)(v114 + 88) = 0u;
    *(_OWORD *)(v114 + 104) = 0u;
    *(_OWORD *)(v114 + 120) = 0u;
    *(_OWORD *)(v114 + 136) = 0u;
    *(_OWORD *)(v114 + 152) = 0u;
    *(_OWORD *)(v114 + 168) = 0u;
    *(_OWORD *)(v114 + 184) = 0u;
    *(_OWORD *)(v114 + 200) = 0u;
    *(_OWORD *)(v114 + 216) = 0u;
    *(_OWORD *)(v114 + 232) = 0u;
    *(_QWORD *)(v114 + 248) = 0;
    *(_OWORD *)(v114 + 56) = 0u;
    v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
    if ((_DWORD)v115)
      geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
    v117 = malloc_create_zone(0, 0);
    *(_QWORD *)(v114 + 48) = v117;
    malloc_set_zone_name(v117, "GeoGL");
    *(_QWORD *)(v114 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v114;
  }
  *(_QWORD *)(v60 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v60 + 136) = 0;
  *(_QWORD *)(v60 + 112) = v60 + 120;
  *(_QWORD *)v60 = &off_1E42BE0B8;
  *(_QWORD *)(v60 + 16) = &unk_1E42BE0D8;
  v65 = *(_QWORD *)(v60 + 64);
  v66 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + 8);
  v67 = *(_QWORD *)(v60 + 72);
  v68 = (v67 - v65) >> 4;
  v69 = v66 - v68;
  if (v66 <= v68)
  {
    if (v66 < v68)
    {
      v70 = v65 + 16 * v66;
      while (v67 != v70)
      {
        v71 = *(std::__shared_weak_count **)(v67 - 8);
        if (v71)
        {
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v71->__on_zero_shared)(v71, v69);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v67 -= 16;
      }
      *(_QWORD *)(v60 + 72) = v70;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v60 + 64, v69);
  }
  *(_QWORD *)v60 = &off_1E42BC350;
  *(_QWORD *)(v60 + 16) = &unk_1E42BC370;
  {
    v118 = operator new();
    *(_QWORD *)(v118 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v118 + 24) = "GeoGL";
    *(_OWORD *)(v118 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v118 = &off_1E42B5668;
    *(_QWORD *)(v118 + 8) = "GeoGL";
    *(_OWORD *)(v118 + 72) = 0u;
    *(_OWORD *)(v118 + 88) = 0u;
    *(_OWORD *)(v118 + 104) = 0u;
    *(_OWORD *)(v118 + 120) = 0u;
    *(_OWORD *)(v118 + 136) = 0u;
    *(_OWORD *)(v118 + 152) = 0u;
    *(_OWORD *)(v118 + 168) = 0u;
    *(_OWORD *)(v118 + 184) = 0u;
    *(_OWORD *)(v118 + 200) = 0u;
    *(_OWORD *)(v118 + 216) = 0u;
    *(_OWORD *)(v118 + 232) = 0u;
    *(_QWORD *)(v118 + 248) = 0;
    *(_OWORD *)(v118 + 56) = 0u;
    v119 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v118 + 56), 0);
    if ((_DWORD)v119)
      geo::read_write_lock::logFailure(v119, (uint64_t)"initialization", v120);
    v121 = malloc_create_zone(0, 0);
    *(_QWORD *)(v118 + 48) = v121;
    malloc_set_zone_name(v121, "GeoGL");
    *(_QWORD *)(v118 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v118;
  }
  v75 = ggl::Allocator::instance(void)::alloc;
  v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v76 = &off_1E42E0720;
  *(_QWORD *)(v76 + 8) = 0;
  *(_QWORD *)(v76 + 32) = &off_1E42B5748;
  v77 = v76 + 32;
  *(_QWORD *)(v76 + 16) = 0;
  *(_QWORD *)(v76 + 24) = v75;
  *(_QWORD *)(v76 + 40) = 16;
  *(_DWORD *)(v76 + 48) = 6;
  v78 = 0uLL;
  *(_OWORD *)(v76 + 56) = 0u;
  *(_OWORD *)(v76 + 72) = 0u;
  *(_OWORD *)(v76 + 88) = 0u;
  *(_OWORD *)(v76 + 104) = 0u;
  *(_QWORD *)(v76 + 120) = 0;
  if ((v79 & 1) == 0)
  {
    v128 = v76;
    v78 = 0uLL;
    v123 = v122;
    v76 = v128;
    if (v123)
    {
      v124 = operator new();
      *(_QWORD *)(v124 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v124 + 24) = "GeoGL";
      *(_OWORD *)(v124 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v124 = &off_1E42B5668;
      *(_QWORD *)(v124 + 8) = "GeoGL";
      *(_OWORD *)(v124 + 72) = 0u;
      *(_OWORD *)(v124 + 88) = 0u;
      *(_OWORD *)(v124 + 104) = 0u;
      *(_OWORD *)(v124 + 120) = 0u;
      *(_OWORD *)(v124 + 136) = 0u;
      *(_OWORD *)(v124 + 152) = 0u;
      *(_OWORD *)(v124 + 168) = 0u;
      *(_OWORD *)(v124 + 184) = 0u;
      *(_OWORD *)(v124 + 200) = 0u;
      *(_OWORD *)(v124 + 216) = 0u;
      *(_OWORD *)(v124 + 232) = 0u;
      *(_QWORD *)(v124 + 248) = 0;
      *(_OWORD *)(v124 + 56) = 0u;
      v125 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v124 + 56), 0);
      if ((_DWORD)v125)
        geo::read_write_lock::logFailure(v125, (uint64_t)"initialization", v126);
      v127 = malloc_create_zone(0, 0);
      *(_QWORD *)(v124 + 48) = v127;
      malloc_set_zone_name(v127, "GeoGL");
      *(_QWORD *)(v124 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v124;
      v76 = v128;
      v78 = 0uLL;
    }
  }
  *(_QWORD *)(v76 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v76 + 136) = 0;
  *(_OWORD *)(v76 + 200) = v78;
  *(_OWORD *)(v76 + 184) = v78;
  *(_OWORD *)(v76 + 168) = v78;
  *(_QWORD *)(v76 + 216) = 0;
  *(_QWORD *)(v76 + 224) = -1;
  *(_OWORD *)(v76 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v76 + 144) = 0;
  *(_QWORD *)(v76 + 32) = &off_1E42B8460;
  *(_QWORD *)(v76 + 240) = "UnitQuad";
  *(_QWORD *)(v76 + 248) = &ggl::DaVinci::screenVboReflection;
  *(_QWORD *)(v76 + 232) = &unk_1E42B8480;
  v80 = *v62;
  v81 = (std::__shared_weak_count *)(*v62)[1];
  *v80 = v77;
  v80[1] = v76;
  if (v81)
  {
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  do
    v84 = __ldxr(v58);
  while (__stxr(v84 + 1, v58));
  do
    v85 = __ldxr(v58);
  while (__stxr(v85 + 1, v58));
  v86 = *(std::__shared_weak_count **)(v60 + 104);
  *(_QWORD *)(v60 + 96) = v57 + 1;
  *(_QWORD *)(v60 + 104) = v57;
  if (v86)
  {
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  do
    v89 = __ldaxr(v58);
  while (__stlxr(v89 - 1, v58));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  v90 = **v62;
  v91 = 4 * *(_QWORD *)(v90 + 8);
  v92 = *(_QWORD *)(v90 + 72);
  v93 = *(_QWORD *)(v90 + 80) - v92;
  v94 = v91 - v93;
  if (v91 != v93)
  {
    if (v91 <= v93)
    {
      if (v91 < v93)
        *(_QWORD *)(v90 + 80) = v92 + v91;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v90 + 72, v94);
    }
    v95 = *(std::__shared_weak_count **)(v90 + 32);
    *(_QWORD *)(v90 + 24) = 0;
    *(_QWORD *)(v90 + 32) = 0;
    if (v95)
    {
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    *(_QWORD *)(v90 + 120) = 0;
    *(_DWORD *)(v90 + 112) = 0;
    v98 = *(_QWORD *)(v90 + 80) - *(_QWORD *)(v90 + 72);
    *(_QWORD *)(v90 + 40) = 0;
    *(_QWORD *)(v90 + 48) = v98;
    *(_QWORD *)(v90 + 56) = 0;
    *(_QWORD *)(v90 + 64) = v98;
    v90 = **v62;
    v91 = 4 * *(_QWORD *)(v90 + 8);
  }
  if (v91)
    v99 = *(_QWORD *)(v90 + 72);
  else
    v99 = 0;
  *(_QWORD *)v99 = 0;
  *(_QWORD *)(v99 + 8) = 0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v99 + 16) = xmmword_19FFB3960;
  *(_OWORD *)(v99 + 32) = _Q1;
  *(_OWORD *)(v99 + 48) = xmmword_19FFB3970;
  v104 = *(_QWORD *)(v5 + 312);
  *(_QWORD *)(v5 + 312) = v60;
  if (v104)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v104 + 8))(v104, v94);
  if (v99 && v91)
  {
    v105 = *(_QWORD *)(v90 + 64);
    if (v105 <= v91)
      v105 = v91;
    *(_QWORD *)(v90 + 56) = 0;
    *(_QWORD *)(v90 + 64) = v105;
  }
  shared_weak_owners = v57[3].__shared_weak_owners_;
  if (shared_weak_owners <= 0xC)
    shared_weak_owners = 12;
  v57[3].__shared_owners_ = 0;
  v57[3].__shared_weak_owners_ = shared_weak_owners;
  do
    v107 = __ldaxr(v58);
  while (__stlxr(v107 - 1, v58));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *, unint64_t))v57->__on_zero_shared)(v57, v94);
    std::__shared_weak_count::__release_weak(v57);
  }
  do
    v108 = __ldaxr(v21);
  while (__stlxr(v108 - 1, v21));
  if (!v108)
  {
    ((void (*)(std::__shared_weak_count *, unint64_t))v129->__on_zero_shared)(v129, v94);
    std::__shared_weak_count::__release_weak(v129);
  }
  *v130 = v5;
}

void sub_19F268108(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  ggl::RenderQueue *v32;
  md::FrameGraph *v33;

  shared_weak_owners = v3[3].__shared_weak_owners_;
  if (shared_weak_owners <= 0xC)
    shared_weak_owners = 12;
  v3[3].__shared_owners_ = 0;
  v3[3].__shared_weak_owners_ = shared_weak_owners;
  do
    v8 = __ldaxr(v5);
  while (__stlxr(v8 - 1, v5));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  do
    v9 = __ldaxr(v4);
  while (__stlxr(v9 - 1, v4));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  v10 = (std::__shared_weak_count *)v1[43];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)v1[41];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v1[39];
  v1[39] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v1[38];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v1[36];
  v1[36] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v1[25];
  v1[25] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v1[24];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v1[8];
  v1[8] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v1[7];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)v1[5];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  *v1 = off_1E42AF5D0;
  v32 = (ggl::RenderQueue *)v1[2];
  v1[2] = 0;
  if (v32)
  {
    ggl::RenderQueue::~RenderQueue(v32);
    MEMORY[0x1A1AF4E00]();
  }
  v33 = (md::FrameGraph *)v1[1];
  v1[1] = 0;
  if (v33)
  {
    md::FrameGraph::~FrameGraph(v33);
    MEMORY[0x1A1AF4E00]();
  }
  MEMORY[0x1A1AF4E00](v1, 0x10A1C40DA00B628);
  _Unwind_Resume(a1);
}

void sub_19F2683E4()
{
  JUMPOUT(0x19F2683C4);
}

uint64_t md::MapEngineConfiguration::resolveMode(md::MapEngineConfiguration *this, md::MapEngine *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned int v7;

  v2 = *((_QWORD *)a2 + 141);
  v3 = *(_BYTE **)v2;
  v4 = *(_BYTE **)(v2 + 8);
  v5 = v3;
  if (v3 != v4)
  {
    v5 = v3;
    while (*v5 != 20)
    {
      v5 += 16;
      if (v5 == v4)
        return 1;
    }
  }
  if (v5 == v4)
    return 1;
  switch(*((_DWORD *)v5 + 2))
  {
    case 1:
      return 3;
    case 2:
      return 7;
    case 3:
      return 8;
    case 4:
      return 9;
    case 5:
      return 5;
    case 6:
      return 2;
    case 7:
      return 4;
    case 8:
      return 6;
    case 9:
      if (v3 == v4)
        goto LABEL_22;
      break;
    case 0xA:
      return 10;
    case 0xB:
      return 18;
    default:
      return 1;
  }
  while (*v3 != 26)
  {
    v3 += 16;
    if (v3 == v4)
      goto LABEL_25;
  }
LABEL_22:
  if (v3 == v4)
  {
LABEL_25:
    LOBYTE(v7) = 0;
    return (v7 + 14);
  }
  v7 = v3[8];
  if (v7 >= 4)
    return 10;
  return (v7 + 14);
}

void md::StandardMapEngineMode::~StandardMapEngineMode(md::StandardMapEngineMode *this)
{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  *(_QWORD *)this = &off_1E42A1BF8;
  if (*((_BYTE *)this + 548))
    *((_BYTE *)this + 548) = 0;
  md::MapEngineMode::~MapEngineMode(this);
}

void md::CartographicGlobeMapEngineConfiguration::createMode(uint64_t a1@<X0>, int a2@<W1>, md::InitialMapEngineMode **a3@<X8>)
{
  void *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  md::InitialMapEngineMode *v11;
  char IsEnabled_VKMLayout_SPR;
  md::InitialMapEngineMode *v13;
  md::InitialMapEngineMode *v14;
  md::InitialMapEngineMode *v15;
  __int128 *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v6, "forceFlyoverUnificationMode") & 1) != 0)
  {
    v7 = 1;
  }
  else if (GEOConfigGetBOOL())
  {
    objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "activeTileGroup");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "activeTileSetForTileType:scale:", 92, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v10 != 0;

  }
  else
  {
    v7 = 0;
  }

  switch(a2)
  {
    case 0:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::InitialMapEngineMode::InitialMapEngineMode(v11, 1);
      goto LABEL_46;
    case 1:
      v11 = (md::InitialMapEngineMode *)operator new();
      IsEnabled_VKMLayout_SPR = MapsFeature_IsEnabled_VKMLayout_SPR();
      md::StandardMapEngineMode::StandardMapEngineMode((uint64_t)v11, 1, 1, IsEnabled_VKMLayout_SPR);
      goto LABEL_46;
    case 2:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::StandardGridMapEngineMode::StandardGridMapEngineMode(v11);
      goto LABEL_46;
    case 3:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::SatelliteMapEngineMode::SatelliteMapEngineMode(v11);
      goto LABEL_46;
    case 4:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::SatelliteGridMapEngineMode::SatelliteGridMapEngineMode(v11);
      goto LABEL_46;
    case 5:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::NavigationMapEngineMode::NavigationMapEngineMode(v11, 1);
      goto LABEL_46;
    case 6:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::TransitMapEngineMode::TransitMapEngineMode(v11, 1);
      goto LABEL_46;
    case 7:
      v11 = (md::InitialMapEngineMode *)operator new();
      if (v7)
        md::SandboxHybridMapEngineMode::SandboxHybridMapEngineMode(v11, 0);
      else
        md::HybridMapEngineMode::HybridMapEngineMode(v11);
      goto LABEL_46;
    case 8:
      if (v7)
      {
        v13 = (md::InitialMapEngineMode *)operator new();
        md::SandboxBaseMapEngineMode::SandboxBaseMapEngineMode((uint64_t)v13, 8, 1);
        *(_QWORD *)v13 = &off_1E42AB498;
        *a3 = v13;
      }
      else
      {
        v11 = (md::InitialMapEngineMode *)operator new();
        md::RealisticSatelliteMapEngineMode::RealisticSatelliteMapEngineMode(v11);
LABEL_46:
        *a3 = v11;
      }
      return;
    case 9:
      v11 = (md::InitialMapEngineMode *)operator new();
      if (v7)
        md::SandboxHybridMapEngineMode::SandboxHybridMapEngineMode(v11, 1);
      else
        md::RealisticHybridMapEngineMode::RealisticHybridMapEngineMode(v11);
      goto LABEL_46;
    case 10:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::RealisticARMapEngineMode::RealisticARMapEngineMode(v11);
      goto LABEL_46;
    case 11:
      v14 = (md::InitialMapEngineMode *)operator new();
      v15 = v14;
      v16 = *(__int128 **)(a1 + 40);
      v17 = *(std::__shared_weak_count **)(a1 + 48);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      md::DaVinciMapEngineMode::DaVinciMapEngineMode(v14, 11, 1, v16, v17);
      if (v17)
      {
        v34 = (unint64_t *)&v17->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      *a3 = v15;
      if (v17)
      {
        v36 = (unint64_t *)&v17->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
          goto LABEL_57;
      }
      return;
    case 12:
      v21 = operator new();
      v22 = v21;
      v23 = *(_QWORD *)(a1 + 40);
      v17 = *(std::__shared_weak_count **)(a1 + 48);
      if (v17)
      {
        v24 = (unint64_t *)&v17->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      md::DaVinciNavigationMapEngineMode::DaVinciNavigationMapEngineMode(v21, 1, v23, v17);
      *a3 = (md::InitialMapEngineMode *)v22;
      if (!v17)
        return;
      v26 = (unint64_t *)&v17->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      goto LABEL_40;
    case 13:
      v28 = operator new();
      v29 = v28;
      v30 = *(__int128 **)(a1 + 40);
      v17 = *(std::__shared_weak_count **)(a1 + 48);
      if (v17)
      {
        v31 = (unint64_t *)&v17->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      md::DaVinciTransitMapEngineMode::DaVinciTransitMapEngineMode(v28, 1, v30, v17);
      *a3 = (md::InitialMapEngineMode *)v29;
      if (!v17)
        return;
      v33 = (unint64_t *)&v17->__shared_owners_;
      do
        v27 = __ldaxr(v33);
      while (__stlxr(v27 - 1, v33));
LABEL_40:
      if (!v27)
      {
LABEL_57:
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      return;
    case 18:
      v11 = (md::InitialMapEngineMode *)operator new();
      md::MuninMapEngineMode::MuninMapEngineMode(v11);
      goto LABEL_46;
    default:
      *a3 = 0;
      return;
  }
}

void sub_19F268AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10A1C403DD9F596);
  _Unwind_Resume(a1);
}

void sub_19F268B68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void md::CartographicGlobeMapEngineConfiguration::~CartographicGlobeMapEngineConfiguration(md::CartographicGlobeMapEngineConfiguration *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A98A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E429CEB0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A98A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E429CEB0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void md::PostchainRenderLayer::~PostchainRenderLayer(md::PostchainRenderLayer *this)
{
  md::PostchainRenderLayer::~PostchainRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void *v146;

  *(_QWORD *)this = &off_1E429A428;
  v2 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 108);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 104);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  if (!v16)
    goto LABEL_30;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
    if (!v19)
      goto LABEL_36;
  }
  else
  {
LABEL_30:
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
    if (!v19)
      goto LABEL_36;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_36:
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 94);
  if (!v22)
    goto LABEL_40;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 92);
    if (!v25)
      goto LABEL_46;
  }
  else
  {
LABEL_40:
    v25 = (std::__shared_weak_count *)*((_QWORD *)this + 92);
    if (!v25)
      goto LABEL_46;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_46:
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  if (!v28)
    goto LABEL_50;
  v29 = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 88);
    if (!v31)
      goto LABEL_56;
  }
  else
  {
LABEL_50:
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 88);
    if (!v31)
      goto LABEL_56;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_56:
  v34 = (std::__shared_weak_count *)*((_QWORD *)this + 86);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)*((_QWORD *)this + 83);
  if (!v38)
    goto LABEL_67;
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v41 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
    if (!v41)
      goto LABEL_73;
  }
  else
  {
LABEL_67:
    v41 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
    if (!v41)
      goto LABEL_73;
  }
  v42 = (unint64_t *)&v41->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_73:
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 79);
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
  if (!v49)
    goto LABEL_86;
  v50 = (unint64_t *)&v49->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    v52 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
    if (!v52)
      goto LABEL_92;
  }
  else
  {
LABEL_86:
    v52 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
    if (!v52)
      goto LABEL_92;
  }
  v53 = (unint64_t *)&v52->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
LABEL_92:
  v55 = (std::__shared_weak_count *)*((_QWORD *)this + 71);
  if (!v55)
    goto LABEL_96;
  v56 = (unint64_t *)&v55->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    v58 = (std::__shared_weak_count *)*((_QWORD *)this + 69);
    if (!v58)
      goto LABEL_102;
  }
  else
  {
LABEL_96:
    v58 = (std::__shared_weak_count *)*((_QWORD *)this + 69);
    if (!v58)
      goto LABEL_102;
  }
  v59 = (unint64_t *)&v58->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
LABEL_102:
  v61 = (std::__shared_weak_count *)*((_QWORD *)this + 67);
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)*((_QWORD *)this + 63);
  if (!v66)
    goto LABEL_115;
  v67 = (unint64_t *)&v66->__shared_owners_;
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    v69 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
    if (!v69)
      goto LABEL_121;
  }
  else
  {
LABEL_115:
    v69 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
    if (!v69)
      goto LABEL_121;
  }
  v70 = (unint64_t *)&v69->__shared_owners_;
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
  }
LABEL_121:
  v72 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  if (!v72)
    goto LABEL_125;
  v73 = (unint64_t *)&v72->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    v75 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
    if (!v75)
      goto LABEL_131;
  }
  else
  {
LABEL_125:
    v75 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
    if (!v75)
      goto LABEL_131;
  }
  v76 = (unint64_t *)&v75->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
LABEL_131:
  v78 = (std::__shared_weak_count *)*((_QWORD *)this + 55);
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  if (!v83)
    goto LABEL_144;
  v84 = (unint64_t *)&v83->__shared_owners_;
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (!v85)
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
    v86 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
    if (!v86)
      goto LABEL_150;
  }
  else
  {
LABEL_144:
    v86 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
    if (!v86)
      goto LABEL_150;
  }
  v87 = (unint64_t *)&v86->__shared_owners_;
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
LABEL_150:
  v89 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (!v89)
    goto LABEL_154;
  v90 = (unint64_t *)&v89->__shared_owners_;
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
    v92 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (!v92)
      goto LABEL_160;
  }
  else
  {
LABEL_154:
    v92 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (!v92)
      goto LABEL_160;
  }
  v93 = (unint64_t *)&v92->__shared_owners_;
  do
    v94 = __ldaxr(v93);
  while (__stlxr(v94 - 1, v93));
  if (!v94)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
  }
LABEL_160:
  v95 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (v95)
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v99)
    goto LABEL_171;
  v100 = (unint64_t *)&v99->__shared_owners_;
  do
    v101 = __ldaxr(v100);
  while (__stlxr(v101 - 1, v100));
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
    v102 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v102)
      goto LABEL_177;
  }
  else
  {
LABEL_171:
    v102 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
    if (!v102)
      goto LABEL_177;
  }
  v103 = (unint64_t *)&v102->__shared_owners_;
  do
    v104 = __ldaxr(v103);
  while (__stlxr(v104 - 1, v103));
  if (!v104)
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
  }
LABEL_177:
  v105 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v105)
  {
    v106 = (unint64_t *)&v105->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v108)
    (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
  v109 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (!v109)
    goto LABEL_188;
  v110 = (unint64_t *)&v109->__shared_owners_;
  do
    v111 = __ldaxr(v110);
  while (__stlxr(v111 - 1, v110));
  if (!v111)
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
    v112 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
    if (!v112)
      goto LABEL_194;
  }
  else
  {
LABEL_188:
    v112 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
    if (!v112)
      goto LABEL_194;
  }
  v113 = (unint64_t *)&v112->__shared_owners_;
  do
    v114 = __ldaxr(v113);
  while (__stlxr(v114 - 1, v113));
  if (!v114)
  {
    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
    std::__shared_weak_count::__release_weak(v112);
  }
LABEL_194:
  v115 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v115)
  {
    v116 = (unint64_t *)&v115->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  v119 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (!v119)
    goto LABEL_205;
  v120 = (unint64_t *)&v119->__shared_owners_;
  do
    v121 = __ldaxr(v120);
  while (__stlxr(v121 - 1, v120));
  if (!v121)
  {
    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
    std::__shared_weak_count::__release_weak(v119);
    v122 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
    if (!v122)
      goto LABEL_211;
  }
  else
  {
LABEL_205:
    v122 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
    if (!v122)
      goto LABEL_211;
  }
  v123 = (unint64_t *)&v122->__shared_owners_;
  do
    v124 = __ldaxr(v123);
  while (__stlxr(v124 - 1, v123));
  if (!v124)
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
LABEL_211:
  v125 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v125)
    goto LABEL_215;
  v126 = (unint64_t *)&v125->__shared_owners_;
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
    v128 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v128)
      goto LABEL_221;
  }
  else
  {
LABEL_215:
    v128 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v128)
      goto LABEL_221;
  }
  v129 = (unint64_t *)&v128->__shared_owners_;
  do
    v130 = __ldaxr(v129);
  while (__stlxr(v130 - 1, v129));
  if (!v130)
  {
    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
    std::__shared_weak_count::__release_weak(v128);
  }
LABEL_221:
  v131 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v131)
    goto LABEL_225;
  v132 = (unint64_t *)&v131->__shared_owners_;
  do
    v133 = __ldaxr(v132);
  while (__stlxr(v133 - 1, v132));
  if (!v133)
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
    v134 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v134)
      goto LABEL_231;
  }
  else
  {
LABEL_225:
    v134 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v134)
      goto LABEL_231;
  }
  v135 = (unint64_t *)&v134->__shared_owners_;
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 - 1, v135));
  if (!v136)
  {
    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
    std::__shared_weak_count::__release_weak(v134);
  }
LABEL_231:
  v137 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v137)
    goto LABEL_235;
  v138 = (unint64_t *)&v137->__shared_owners_;
  do
    v139 = __ldaxr(v138);
  while (__stlxr(v139 - 1, v138));
  if (!v139)
  {
    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
    std::__shared_weak_count::__release_weak(v137);
    v140 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v140)
      goto LABEL_241;
  }
  else
  {
LABEL_235:
    v140 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v140)
      goto LABEL_241;
  }
  v141 = (unint64_t *)&v140->__shared_owners_;
  do
    v142 = __ldaxr(v141);
  while (__stlxr(v142 - 1, v141));
  if (!v142)
  {
    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
    std::__shared_weak_count::__release_weak(v140);
  }
LABEL_241:
  v143 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v143)
  {
    v144 = (unint64_t *)&v143->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  *(_QWORD *)this = off_1E428C468;
  v146 = (void *)*((_QWORD *)this + 1);
  if (v146)
  {
    *((_QWORD *)this + 2) = v146;
    operator delete(v146);
  }
}

void md::InitialMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2)
{
  md::LogicManager *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = *(md::LogicManager **)(a2 + 1120);
  v3 = *(int8x8_t *)((char *)v2 + 16);
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = 0x4AC7AB7561675F6;
    if (*(_QWORD *)&v3 <= 0x4AC7AB7561675F6uLL)
      v5 = 0x4AC7AB7561675F6uLL % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & 0x4AC7AB7561675F6;
  }
  v6 = *((_QWORD *)v2 + 1);
  v7 = *(_QWORD **)(v6 + 8 * v5);
  if (v7 && (v8 = (_QWORD *)*v7) != 0)
  {
    if (v4.u32[0] >= 2uLL)
    {
      while (v8[1] != 0x4AC7AB7561675F6 || v8[2] != 0x4AC7AB7561675F6)
        v8 = (_QWORD *)*v8;
    }
    else
    {
      while (v8[1] != 0x4AC7AB7561675F6 || v8[2] != 0x4AC7AB7561675F6)
        v8 = (_QWORD *)*v8;
    }
    v9 = v8[5] + 136;
  }
  else
  {
    v9 = 136;
  }
  *(_BYTE *)v9 = 1;
  if (v4.u32[0] >= 2uLL)
  {
    v11 = 0x653D1F33EF15EF04;
    if (*(_QWORD *)&v3 <= 0x653D1F33EF15EF04uLL)
      v11 = 0x653D1F33EF15EF04uLL % *(_QWORD *)&v3;
    v10 = *(_QWORD **)(v6 + 8 * v11);
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x653D1F33EF15EF04);
    }
    while (v10[2] != 0x653D1F33EF15EF04);
  }
  else
  {
    v10 = *(_QWORD **)(v6 + 8 * ((*(_QWORD *)&v3 - 1) & 0x653D1F33EF15EF04));
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x653D1F33EF15EF04);
    }
    while (v10[2] != 0x653D1F33EF15EF04);
  }
  *(_BYTE *)(v10[5] + 128) = 0;
  md::LogicManager::toggleVLR(v2, 1);
}

void md::InitialMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2)
{
  md::LogicManager *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = *(md::LogicManager **)(a2 + 1120);
  v3 = *(int8x8_t *)((char *)v2 + 16);
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = 0x4AC7AB7561675F6;
    if (*(_QWORD *)&v3 <= 0x4AC7AB7561675F6uLL)
      v5 = 0x4AC7AB7561675F6uLL % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & 0x4AC7AB7561675F6;
  }
  v6 = *((_QWORD *)v2 + 1);
  v7 = *(_QWORD **)(v6 + 8 * v5);
  if (v7 && (v8 = (_QWORD *)*v7) != 0)
  {
    if (v4.u32[0] >= 2uLL)
    {
      while (v8[1] != 0x4AC7AB7561675F6 || v8[2] != 0x4AC7AB7561675F6)
        v8 = (_QWORD *)*v8;
    }
    else
    {
      while (v8[1] != 0x4AC7AB7561675F6 || v8[2] != 0x4AC7AB7561675F6)
        v8 = (_QWORD *)*v8;
    }
    v9 = v8[5] + 136;
  }
  else
  {
    v9 = 136;
  }
  *(_BYTE *)v9 = 0;
  if (v4.u32[0] >= 2uLL)
  {
    v11 = 0x653D1F33EF15EF04;
    if (*(_QWORD *)&v3 <= 0x653D1F33EF15EF04uLL)
      v11 = 0x653D1F33EF15EF04uLL % *(_QWORD *)&v3;
    v10 = *(_QWORD **)(v6 + 8 * v11);
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x653D1F33EF15EF04);
    }
    while (v10[2] != 0x653D1F33EF15EF04);
  }
  else
  {
    v10 = *(_QWORD **)(v6 + 8 * ((*(_QWORD *)&v3 - 1) & 0x653D1F33EF15EF04));
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x653D1F33EF15EF04);
    }
    while (v10[2] != 0x653D1F33EF15EF04);
  }
  *(_BYTE *)(v10[5] + 128) = 1;
  md::LogicManager::toggleVLR(v2, 0);
}

void md::CoastlineRenderLayer::~CoastlineRenderLayer(md::CoastlineRenderLayer *this)
{
  md::CoastLineRenderResources *v2;

  *(_QWORD *)this = &off_1E4298BB8;
  v2 = (md::CoastLineRenderResources *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v2)
  {
    md::CoastLineRenderResources::~CoastLineRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  md::CoastLineRenderResources *v2;

  *(_QWORD *)this = &off_1E4298BB8;
  v2 = (md::CoastLineRenderResources *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v2)
  {
    md::CoastLineRenderResources::~CoastLineRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(this);
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::~PolygonRenderLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  md::PolygonRenderResources *v6;

  *a1 = &off_1E4295AB0;
  v2 = (std::__shared_weak_count *)a1[59];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  a1[47] = off_1E42A5CF8;
  v5 = (void *)a1[49];
  if (v5)
  {
    a1[50] = v5;
    operator delete(v5);
  }
  v6 = (md::PolygonRenderResources *)a1[46];
  a1[46] = 0;
  if (v6)
  {
    md::PolygonRenderResources::~PolygonRenderResources(v6);
    MEMORY[0x1A1AF4E00]();
  }
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledVectorRenderLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::GridRenderLayer::~GridRenderLayer(md::GridRenderLayer *this)
{
  md::GridRenderResources *v2;
  void *v3;

  *(_QWORD *)this = &off_1E42905A0;
  v2 = (md::GridRenderResources *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    md::GridRenderResources::~GridRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  md::GridRenderResources *v2;
  void *v3;

  *(_QWORD *)this = &off_1E42905A0;
  v2 = (md::GridRenderResources *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    md::GridRenderResources::~GridRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void md::DaVinciBaseMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(int8x8_t **)(a2 + 1120);
  v3 = v2[2];
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x91E65CD7F1A7A7FALL;
      if (*(_QWORD *)&v3 <= 0x91E65CD7F1A7A7FALL)
        v5 = 0x91E65CD7F1A7A7FALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x91E65CD7F1A7A7FALL;
    }
    v6 = *(_QWORD **)(*(_QWORD *)&v2[1] + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x91E65CD7F1A7A7FALL)
            {
              if (v7[2] == 0x91E65CD7F1A7A7FALL)
                goto LABEL_22;
            }
            else if ((v10 & v8) != v5)
            {
              return;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x91E65CD7F1A7A7FALL)
          {
            if (v7[2] == 0x91E65CD7F1A7A7FALL)
            {
LABEL_22:
              v11 = v7[5];
              if (v11)
                *(_BYTE *)(v11 + 120) = 0;
              return;
            }
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              return;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
}

void std::__shared_ptr_emplace<md::TransitLineSharedResources>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

geo::codec::Asset *geo::codec::AssetDecoder::decodeAssetV20(geo::codec::AssetDecoder *this, geo::ibitstream *a2, unsigned int *a3)
{
  geo::codec::Asset *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  FILE *v10;
  geo::codec::Asset *result;
  unint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  int v26;
  unsigned int v27;
  __int16 v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t *Float;
  float v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  _BOOL8 v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  int v64;
  int v65;
  int v66;
  __int16 v67;
  unint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  int v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  geo::codec::Allocator *VarInt;
  uint64_t *v83;
  uint64_t *v84;
  FILE *v85;
  int v86;
  int v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  __int128 *v91;
  __int128 *v92;
  char *v93;
  geo::codec::Asset *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  _WORD *v104;
  _WORD *v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  _BOOL8 v109;
  uint64_t v110;
  char v111;
  int v112;
  unint64_t v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  __int16 v120;
  unint64_t v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int16 *v127;
  unsigned __int16 *v128;
  uint64_t v129;
  uint64_t v130;
  geo::codec::AssetLodInstance *v131;
  __int128 v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _WORD *v137;
  _WORD *v138;
  _WORD *v139;
  _WORD *v140;
  char v141;
  uint64_t v142;
  _WORD *v143;
  _WORD *v144;
  uint64_t *v145;
  unsigned __int16 *v146;
  unsigned __int16 *v147;
  uint64_t *v148;
  unsigned int v149;
  _QWORD *v150;
  FILE *v151;
  int v152;
  geo::codec::Asset *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  FILE *v157;
  int v158;
  __int128 *v159;
  __int128 *v160;
  unsigned int v161;
  int v162;
  char *v163;
  uint64_t v164;
  unsigned int v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  geo::codec::AssetLodInstance *v170;
  __int128 v171;
  __int128 v172;
  int v173;
  int v174;
  __int128 v175;
  __int128 v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  geo::codec::Asset *v182;

  v6 = (geo::codec::Asset *)operator new();
  v182 = geo::codec::Asset::Asset(v6);
  *((_WORD *)v182 + 151) = *a3;
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a2 + 2);
  v9 = v8 + 2;
  if (!*((_BYTE *)a2 + 24))
    v9 = v8 + 1;
  if (v7 < v9)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v12 = v8 + 1;
  v13 = *(unsigned __int8 *)(*(_QWORD *)a2 + v8);
  if (*((_BYTE *)a2 + 24))
  {
    if (v12 >= v7)
      v14 = 0;
    else
      v14 = *(unsigned __int8 *)(*(_QWORD *)a2 + v12);
    v13 = (((v14 & (0xFFFF << (8 - *((_BYTE *)a2 + 24)))) >> (8 - *((_BYTE *)a2 + 24))) | ((((1 << (8 - *((_BYTE *)a2 + 24))) - 1) & v13) << *((_BYTE *)a2 + 24)));
  }
  *((_QWORD *)a2 + 2) = v12;
  if (!v13)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: lod count cannot be 0\n");
    goto LABEL_6;
  }
  v15 = *((_QWORD *)v6 + 11);
  v16 = *((_QWORD *)v6 + 12);
  v17 = (v16 - v15) >> 2;
  if (v13 <= v17)
  {
    if (v13 < v17)
    {
      v16 = v15 + 4 * v13;
      *((_QWORD *)v6 + 12) = v16;
    }
  }
  else
  {
    std::vector<geo::codec::Asset::LodInfo,geo::StdAllocator<geo::codec::Asset::LodInfo,geo::codec::Allocator>>::__append((uint64_t)v6 + 88, v13 - v17);
    v15 = *((_QWORD *)v6 + 11);
    v16 = *((_QWORD *)v6 + 12);
  }
  if (v15 != v16)
  {
    v18 = 0;
    v20 = *((_QWORD *)a2 + 1);
    v19 = *((_QWORD *)a2 + 2);
    v21 = *((unsigned __int8 *)a2 + 24);
    v22 = *((_BYTE *)a2 + 24) != 0;
    v23 = *(_QWORD *)a2;
    v24 = 0xFFFF << (8 - v21);
    v25 = 8 - v21;
    v26 = (1 << (8 - v21)) + 255;
    while (1)
    {
      if (v20 < v19 + v22 + 1)
      {
        v10 = (FILE *)*MEMORY[0x1E0C80C10];
        goto LABEL_5;
      }
      v30 = v19 + v18 + 1;
      v31 = *(unsigned __int8 *)(v23 + v19);
      if (v21)
      {
        if (v30 >= v20)
          v32 = 0;
        else
          v32 = *(unsigned __int8 *)(v23 + v19 + 1);
        v31 = (((v32 & v24) >> v25) | ((v26 & v31) << v21));
      }
      *((_QWORD *)a2 + 2) = v30;
      *(_BYTE *)v15 = v31;
      if (v31 > *((unsigned __int8 *)v6 + 300))
        *((_BYTE *)v6 + 300) = v31;
      if (v20 < v19 + v22 + 3)
      {
        v10 = (FILE *)*MEMORY[0x1E0C80C10];
        goto LABEL_5;
      }
      v33 = v19 + v18 + 3;
      v29 = v23 + v19;
      if (v21)
        break;
      v27 = *(unsigned __int16 *)(v29 + 1);
      v28 = v27;
      LODWORD(v29) = v27 >> 8;
LABEL_23:
      *((_QWORD *)a2 + 2) = v33;
      *(_WORD *)(v15 + 2) = v28 | ((_WORD)v29 << 8);
      v22 += 3;
      v18 += 3;
      v23 += 3;
      v15 += 4;
      if (v15 == v16)
        goto LABEL_40;
    }
    v34 = v19 + v18 + 2;
    if (v34 >= v20)
    {
      v35 = 0;
      v36 = *(unsigned __int8 *)(v29 + 1);
      *((_QWORD *)a2 + 2) = v34;
      v29 = v23 + v19;
      if (v33 >= v20)
        goto LABEL_36;
    }
    else
    {
      v35 = *(unsigned __int8 *)(v23 + v19 + 2);
      v36 = *(unsigned __int8 *)(v29 + 1);
      *((_QWORD *)a2 + 2) = v34;
      v29 = v23 + v19;
      if (v33 >= v20)
      {
LABEL_36:
        v37 = 0;
LABEL_39:
        v28 = (((v35 & v24) >> v25) | ((v26 & v36) << v21));
        LOWORD(v29) = (((v37 & v24) >> v25) | ((((1 << (8 - v21)) - 1) & *(_BYTE *)(v29 + 2)) << v21));
        goto LABEL_23;
      }
    }
    v37 = *(unsigned __int8 *)(v29 + 3);
    goto LABEL_39;
  }
LABEL_40:
  std::vector<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator>>::reserve((uint64_t)v6 + 120, v13);
  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
  if (!(_BYTE)v170)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v38 = *((float *)&v170 + 1);
  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
  if (!(_BYTE)v170)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_5:
    fprintf(v10, "%s:%d Asset Parse: Read error\n");
    goto LABEL_6;
  }
  v39 = *((float *)&v170 + 1);
  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
  if (!(_BYTE)v170)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v40 = *((float *)&v170 + 1);
  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
  if (!(_BYTE)v170)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v41 = *((float *)&v170 + 1);
  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
  if (!(_BYTE)v170)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v42 = *((float *)&v170 + 1);
  Float = geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
  if (!(_BYTE)v170)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v44 = *((float *)&v170 + 1) + v40;
  *((float *)v6 + 69) = v38;
  *((float *)v6 + 70) = v39;
  *((float *)v6 + 71) = v40;
  *((float *)v6 + 72) = v41 + v38;
  *((float *)v6 + 73) = v42 + v39;
  *((float *)v6 + 74) = v44;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v181 = geo::codec::Allocator::instance((geo::codec::Allocator *)Float);
  v46 = *((_QWORD *)a2 + 1);
  v45 = *((_QWORD *)a2 + 2);
  v47 = v45 + 2;
  if (!*((_BYTE *)a2 + 24))
    v47 = v45 + 1;
  if (v46 < v47)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_5;
  }
  v48 = v45 + 1;
  v49 = *(unsigned __int8 *)(*(_QWORD *)a2 + v45);
  if (*((_BYTE *)a2 + 24))
  {
    if (v48 >= v46)
      v50 = 0;
    else
      v50 = *(unsigned __int8 *)(*(_QWORD *)a2 + v48);
    v49 = (((v50 & (0xFFFF << (8 - *((_BYTE *)a2 + 24)))) >> (8 - *((_BYTE *)a2 + 24))) | ((((1 << (8 - *((_BYTE *)a2 + 24))) - 1) & v49) << *((_BYTE *)a2 + 24)));
  }
  *((_QWORD *)a2 + 2) = v48;
  if (v49)
  {
    std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::resize((uint64_t)&v178, v49);
    v52 = v178;
    v51 = v179;
    if (v178 != v179)
    {
      v53 = v178;
      while (1)
      {
        v54 = *((_QWORD *)a2 + 1);
        v55 = *((_QWORD *)a2 + 2);
        v56 = v55 + 2;
        v57 = *((unsigned __int8 *)a2 + 24);
        v58 = *((_BYTE *)a2 + 24) != 0;
        v59 = v55 + 3;
        if (!*((_BYTE *)a2 + 24))
          v59 = v55 + 2;
        if (v54 < v59)
          break;
        v60 = *(_QWORD *)a2;
        if (*((_BYTE *)a2 + 24))
        {
          v61 = v55 + 1;
          if (v55 + 1 >= v54)
            v62 = 0;
          else
            v62 = *(unsigned __int8 *)(v60 + v61);
          v64 = *(unsigned __int8 *)(v60 + v55);
          *((_QWORD *)a2 + 2) = v61;
          if (v56 >= v54)
            v65 = 0;
          else
            v65 = *(unsigned __int8 *)(v60 + v56);
          v66 = 0xFFFF << (8 - v57);
          v63 = (((v62 & v66) >> (8 - v57)) | ((((1 << (8 - v57)) + 255) & v64) << v57));
          LOWORD(v61) = (((v65 & v66) >> (8 - v57)) | ((((1 << (8 - v57)) - 1) & *(_BYTE *)(v60 + v61)) << v57));
        }
        else
        {
          v63 = *(_WORD *)(v60 + v55);
          LODWORD(v61) = HIBYTE(*(unsigned __int16 *)(v60 + v55));
        }
        *((_QWORD *)a2 + 2) = v56;
        v67 = v63 | ((_WORD)v61 << 8);
        *(_WORD *)v53 = v67;
        v68 = v55 + 3;
        if (v54 < v55 + 3 + v58)
        {
          v85 = (FILE *)*MEMORY[0x1E0C80C10];
          v86 = 372;
          goto LABEL_225;
        }
        v69 = *(unsigned __int8 *)(v60 + v56);
        if (v57)
        {
          if (v68 >= v54)
            v70 = 0;
          else
            v70 = *(unsigned __int8 *)(v60 + v68);
          v74 = 8 - v57;
          v75 = 0xFFFF << (8 - v57);
          *((_QWORD *)a2 + 2) = v68;
          *(_BYTE *)(v53 + 2) = ((v70 & v75) >> (8 - v57)) | ((((1 << (8 - v57)) + 255) & v69) << v57);
          v76 = v55 + 4;
          if (v54 < v55 + 4 + v58)
          {
LABEL_217:
            v85 = (FILE *)*MEMORY[0x1E0C80C10];
            v86 = 373;
            goto LABEL_225;
          }
          if (v76 >= v54)
            v77 = 0;
          else
            v77 = *(unsigned __int8 *)(v60 + v76);
          v78 = ((v77 & v75) >> v74) | ((((1 << (8 - v57)) - 1) & *(_BYTE *)(v60 + v68)) << v57);
          *((_QWORD *)a2 + 2) = v76;
          *(_BYTE *)(v53 + 3) = v78;
          v73 = v55 + 5;
          if (v54 < v73 + v58)
            goto LABEL_218;
          if (v73 >= v54)
            v79 = 0;
          else
            v79 = *(unsigned __int8 *)(v60 + v73);
          LODWORD(v60) = ((v79 & v75) >> v74) | ((((1 << (8 - v57)) - 1) & *(_BYTE *)(v60 + v76)) << v57);
        }
        else
        {
          *((_QWORD *)a2 + 2) = v68;
          *(_BYTE *)(v53 + 2) = v69;
          v71 = v55 + 4;
          if (v54 < v55 + 4 + v58)
            goto LABEL_217;
          v72 = *(_BYTE *)(v60 + v68);
          *((_QWORD *)a2 + 2) = v71;
          *(_BYTE *)(v53 + 3) = v72;
          v73 = v55 + 5;
          if (v54 < v73 + v58)
          {
LABEL_218:
            v85 = (FILE *)*MEMORY[0x1E0C80C10];
            v86 = 374;
            goto LABEL_225;
          }
          LOBYTE(v60) = *(_BYTE *)(v60 + v71);
        }
        *((_QWORD *)a2 + 2) = v73;
        *(_BYTE *)(v53 + 4) = v60;
        if ((v63 & 2) != 0)
        {
          geo::ibitstream::readByte((uint64_t)a2, &v170);
          if (!(_BYTE)v170)
          {
            v85 = (FILE *)*MEMORY[0x1E0C80C10];
            v86 = 377;
            goto LABEL_225;
          }
          *(_BYTE *)(v53 + 5) = BYTE1(v170);
          v67 = *(_WORD *)v53;
        }
        if ((v67 & 4) != 0)
        {
          geo::ibitstream::readByte((uint64_t)a2, &v170);
          if (!(_BYTE)v170)
          {
            v85 = (FILE *)*MEMORY[0x1E0C80C10];
            v86 = 381;
            goto LABEL_225;
          }
          *(_BYTE *)(v53 + 6) = BYTE1(v170);
          geo::ibitstream::readByte((uint64_t)a2, &v170);
          if (!(_BYTE)v170)
          {
            v85 = (FILE *)*MEMORY[0x1E0C80C10];
            v86 = 382;
            goto LABEL_225;
          }
          *(_BYTE *)(v53 + 7) = BYTE1(v170);
        }
        v53 += 8;
        if (v53 == v51)
          goto LABEL_104;
      }
      v85 = (FILE *)*MEMORY[0x1E0C80C10];
      v86 = 370;
      goto LABEL_225;
    }
  }
  else
  {
    v52 = 0;
    v51 = 0;
  }
LABEL_104:
  geo::ibitstream::readUInt16((uint64_t)&v170, (uint64_t *)a2);
  if (!(_BYTE)v170)
  {
    v85 = (FILE *)*MEMORY[0x1E0C80C10];
    v86 = 386;
    goto LABEL_225;
  }
  std::vector<geo::codec::Mesh,geo::StdAllocator<geo::codec::Mesh,geo::codec::Allocator>>::resize((uint64_t *)v6 + 26, WORD1(v170));
  v81 = *((_QWORD *)v6 + 26);
  v80 = *((_QWORD *)v6 + 27);
  if (v81 != v80)
  {
    while ((buildAssetMesh(a2, 1, v81, v52, v51) & 1) != 0)
    {
      v81 += 152;
      if (v81 == v80)
        goto LABEL_108;
    }
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Failed to decode asset mesh\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", 390);
    v87 = 6;
    if (!v52)
      goto LABEL_227;
LABEL_226:
    v179 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v181 + 40))(v181, v52, v180 - v52);
    goto LABEL_227;
  }
LABEL_108:
  geo::ibitstream::readUInt16((uint64_t)&v170, (uint64_t *)a2);
  if (!(_BYTE)v170)
  {
    v85 = (FILE *)*MEMORY[0x1E0C80C10];
    v86 = 394;
LABEL_225:
    fprintf(v85, "%s:%d Asset Parse: Read error\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", v86);
    v87 = 6;
    if (!v52)
      goto LABEL_227;
    goto LABEL_226;
  }
  v165 = WORD1(v170);
  VarInt = (geo::codec::Allocator *)std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::resize((uint64_t)v6 + 56, WORD1(v170));
  v84 = (uint64_t *)*((_QWORD *)v6 + 7);
  v83 = (uint64_t *)*((_QWORD *)v6 + 8);
  if (v84 == v83)
  {
LABEL_121:
    v166 = 0;
    v167 = 0;
    v168 = 0;
    v169 = geo::codec::Allocator::instance(VarInt);
    geo::ibitstream::readByte((uint64_t)a2, &v170);
    if ((_BYTE)v170)
    {
      std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::resize((uint64_t)&v166, BYTE1(v170));
      v88 = v166;
      v89 = v167;
      if (v166 == v167)
      {
LABEL_125:
        v90 = 0;
        v91 = &v172;
        v92 = &v176;
        v93 = (char *)&v170 + 4;
        __asm { FMOV            V8.2S, #1.0 }
        while (2)
        {
          _ZNSt3__111make_sharedB8ne180100IN3geo5codec16AssetLodInstanceEJEvEENS_10shared_ptrIT_EEDpOT0_(&v170);
          std::vector<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator>>::emplace_back<std::shared_ptr<geo::codec::AssetLodInstance>>((uint64_t)v6 + 120, (uint64_t)&v170);
          std::shared_ptr<geo::codec::VectorTile>::~shared_ptr[abi:ne180100]((uint64_t)&v170);
          v99 = v182;
          v100 = *((_QWORD *)v182 + 16);
          geo::ibitstream::readUInt16((uint64_t)&v170, (uint64_t *)a2);
          if ((_BYTE)v170)
          {
            std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::resize(*(_QWORD **)(v100 - 16), WORD1(v170));
            v164 = v100;
            v101 = *(_QWORD *)(v100 - 16);
            v102 = *(_QWORD **)v101;
            v103 = *(_QWORD **)(v101 + 8);
            while (v102 != v103)
            {
              geo::ibitstream::readByte((uint64_t)a2, &v170);
              if (!(_BYTE)v170)
              {
                v151 = (FILE *)*MEMORY[0x1E0C80C10];
                v152 = 427;
                goto LABEL_235;
              }
              std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(v102, BYTE1(v170));
              v104 = (_WORD *)*v102;
              v105 = (_WORD *)v102[1];
              if ((_WORD *)*v102 != v105)
              {
                v106 = *((_QWORD *)a2 + 1);
                v107 = *((_QWORD *)a2 + 2);
                v108 = *((_BYTE *)a2 + 24);
                v109 = v108 != 0;
                v110 = *(_QWORD *)a2;
                if (v108)
                {
                  v111 = 8 - *((_BYTE *)a2 + 24);
                  v112 = 0xFFFF << v111;
                  v113 = v107 + 2;
                  while (v106 >= v109 + v113)
                  {
                    v116 = v110 + v113;
                    if (v113 - 1 >= v106)
                      v117 = 0;
                    else
                      v117 = *(unsigned __int8 *)(v116 - 1);
                    v118 = *(unsigned __int8 *)(v116 - 2);
                    *((_QWORD *)a2 + 2) = v113 - 1;
                    if (v113 < v106)
                      v114 = *(unsigned __int8 *)(v110 + v113);
                    else
                      v114 = 0;
                    v115 = ((v114 & v112) >> v111) | ((((1 << v111) - 1) & *(_BYTE *)(v116 - 1)) << v108);
                    *((_QWORD *)a2 + 2) = v113;
                    *v104++ = (((v117 & v112) >> v111) | ((((1 << v111) + 255) & v118) << v108)) | (unsigned __int16)((_WORD)v115 << 8);
                    v113 += 2;
                    if (v104 == v105)
                      goto LABEL_128;
                  }
                }
                else
                {
                  v119 = v109 | 2;
                  while (v106 >= v119 + v107)
                  {
                    v120 = *(_WORD *)(v110 + v107);
                    v107 += 2;
                    *((_QWORD *)a2 + 2) = v107;
                    *v104++ = v120;
                    if (v104 == v105)
                      goto LABEL_128;
                  }
                }
                v151 = (FILE *)*MEMORY[0x1E0C80C10];
                v152 = 430;
                goto LABEL_235;
              }
LABEL_128:
              v102 += 4;
            }
            v163 = v93;
            v159 = v92;
            v160 = v91;
            v158 = v90;
            geo::ibitstream::readByte((uint64_t)a2, &v170);
            if (!(_BYTE)v170)
            {
              v151 = (FILE *)*MEMORY[0x1E0C80C10];
              v152 = 436;
              break;
            }
            v161 = BYTE1(v170);
            if (BYTE1(v170))
            {
              v162 = 0;
              while (1)
              {
                v175 = 0u;
                v176 = 0u;
                v177 = 1065353216;
                geo::ibitstream::readByte((uint64_t)a2, &v170);
                if (!(_BYTE)v170)
                {
                  v157 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_243:
                  fprintf(v157, "%s:%d Asset Parse: Read error\n");
                  goto LABEL_245;
                }
                v121 = BYTE1(v170);
                if (BYTE1(v170) >= (unint64_t)(v167 - v166))
                {
                  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: material map index is out of range\n");
                  goto LABEL_245;
                }
                geo::ibitstream::readByte((uint64_t)a2, &v170);
                if (!(_BYTE)v170)
                {
                  v157 = (FILE *)*MEMORY[0x1E0C80C10];
                  goto LABEL_243;
                }
                v122 = BYTE1(v170);
                if (BYTE1(v170))
                  break;
LABEL_163:
                if (v121 >= v167 - v166)
                  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::__throw_out_of_range[abi:ne180100]();
                v130 = *(_QWORD *)(v164 - 16);
                v131 = (geo::codec::AssetLodInstance *)v166[v121];
                v132 = v175;
                v175 = 0uLL;
                v170 = v131;
                v171 = v132;
                v172 = v176;
                v173 = v177;
                if (*((_QWORD *)&v176 + 1))
                {
                  v133 = *(_QWORD *)(v176 + 8);
                  if ((*((_QWORD *)&v132 + 1) & (*((_QWORD *)&v132 + 1) - 1)) != 0)
                  {
                    if (v133 >= *((_QWORD *)&v132 + 1))
                      v133 %= *((_QWORD *)&v132 + 1);
                  }
                  else
                  {
                    v133 &= *((_QWORD *)&v132 + 1) - 1;
                  }
                  *(_QWORD *)(v132 + 8 * v133) = v160;
                  *(_QWORD *)v159 = 0;
                  *((_QWORD *)v159 + 1) = 0;
                }
                std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>>((uint64_t *)(v130 + 32), (unint64_t)v131, (uint64_t *)&v170);
                std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~pair((uint64_t)&v170);
                std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&v175);
                if (++v162 >= v161)
                  goto LABEL_171;
              }
              v123 = 0;
              while (1)
              {
                geo::ibitstream::readUInt16((uint64_t)&v170, (uint64_t *)a2);
                if (!(_BYTE)v170)
                {
                  v157 = (FILE *)*MEMORY[0x1E0C80C10];
                  goto LABEL_243;
                }
                v124 = WORD1(v170);
                geo::ibitstream::readUInt16((uint64_t)&v170, (uint64_t *)a2);
                if (!(_BYTE)v170)
                {
                  v157 = (FILE *)*MEMORY[0x1E0C80C10];
                  goto LABEL_243;
                }
                if (WORD1(v170) >= v165)
                  break;
                v125 = *((_QWORD *)v99 + 7);
                if (WORD1(v170) >= (unint64_t)((*((_QWORD *)v99 + 8) - v125) >> 3))
                  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::__throw_out_of_range[abi:ne180100]();
                v126 = **(_QWORD **)(v164 - 16) + 32 * v124;
                v127 = *(unsigned __int16 **)v126;
                v128 = *(unsigned __int16 **)(v126 + 8);
                if (*(unsigned __int16 **)v126 != v128)
                {
                  v129 = *(_QWORD *)(v125 + 8 * WORD1(v170));
                  do
                  {
                    std::__hash_table<std::__hash_value_type<unsigned short,unsigned long long>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned long long>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned long long>>((uint64_t)&v175, *v127, *v127, v129);
                    ++v127;
                  }
                  while (v127 != v128);
                }
                if (v122 <= (unsigned __int16)++v123)
                  goto LABEL_163;
              }
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: material index is out of range\n");
LABEL_245:
              std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&v175);
              goto LABEL_236;
            }
LABEL_171:
            geo::ibitstream::readUInt16((uint64_t)&v170, (uint64_t *)a2);
            if (!(_BYTE)v170)
            {
              v151 = (FILE *)*MEMORY[0x1E0C80C10];
              v152 = 462;
              break;
            }
            std::vector<geo::codec::ModelNode,geo::StdAllocator<geo::codec::ModelNode,geo::codec::Allocator>>::resize((geo::codec::Allocator *)(*(_QWORD *)(v164 - 16) + 128), WORD1(v170));
            v134 = *(_QWORD *)(v164 - 16);
            v135 = *(_QWORD *)(v134 + 128);
            v136 = *(_QWORD *)(v134 + 136);
            if (v135 == v136)
            {
LABEL_205:
              geo::ibitstream::readByte((uint64_t)a2, &v170);
              if (!(_BYTE)v170)
              {
                v151 = (FILE *)*MEMORY[0x1E0C80C10];
                v152 = 526;
                break;
              }
              std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize((_QWORD *)(*(_QWORD *)(v164 - 16) + 160), BYTE1(v170));
              v142 = *(_QWORD *)(v164 - 16);
              v143 = *(_WORD **)(v142 + 160);
              v144 = *(_WORD **)(v142 + 168);
              if (v143 == v144)
              {
LABEL_209:
                std::unordered_map<unsigned short,gm::Matrix<float,4,4>,std::hash<unsigned short>,std::equal_to<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::unordered_map[abi:ne180100]((uint64_t)&v175);
                v145 = *(uint64_t **)(v164 - 16);
                v146 = (unsigned __int16 *)v145[20];
                v147 = (unsigned __int16 *)v145[21];
                if (v146 == v147)
                {
LABEL_213:
                  v6 = v182;
                  geo::codec::AssetDecoder::applyTransforms((uint64_t)v182 + 208, &v175);
                  std::unordered_map<unsigned short,gm::Matrix<float,4,4>,std::hash<unsigned short>,std::equal_to<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::~unordered_map[abi:ne180100]((uint64_t *)&v175);
                  v87 = 0;
                  v90 = v158 + 1;
                  v92 = v159;
                  v91 = v160;
                  v93 = v163;
                  if (v158 + 1 < v13)
                    continue;
LABEL_237:
                  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v166);
                  v52 = v178;
                  if (!v178)
                    goto LABEL_227;
                  goto LABEL_226;
                }
                v148 = v145 + 9;
                while (1)
                {
                  v149 = *v146;
                  v150 = *(_QWORD **)(v164 - 16);
                  *((_QWORD *)v163 + 6) = 0;
                  *((_OWORD *)v163 + 1) = 0u;
                  *((_OWORD *)v163 + 2) = 0u;
                  *(_OWORD *)v163 = 0u;
                  LODWORD(v170) = 1065353216;
                  HIDWORD(v171) = 1065353216;
                  v173 = 1065353216;
                  v174 = 1065353216;
                  if ((buildLocalTransformMatrix((unint64_t)&v175, v148, v149, v150 + 16, v150, (uint64_t)&v170, 1) & 1) == 0)break;
                  if (++v146 == v147)
                    goto LABEL_213;
                }
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: failed to apply tranforms\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", 536);
                std::unordered_map<unsigned short,gm::Matrix<float,4,4>,std::hash<unsigned short>,std::equal_to<unsigned short>,geo::StdAllocator<std::pair<unsigned short const,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::~unordered_map[abi:ne180100]((uint64_t *)&v175);
LABEL_236:
                v87 = 6;
                goto LABEL_237;
              }
              while (1)
              {
                geo::ibitstream::readUInt16((uint64_t)&v170, (uint64_t *)a2);
                if (!(_BYTE)v170)
                  break;
                *v143++ = WORD1(v170);
                if (v143 == v144)
                  goto LABEL_209;
              }
              v151 = (FILE *)*MEMORY[0x1E0C80C10];
              v152 = 529;
            }
            else
            {
              while (1)
              {
                geo::ibitstream::readByte((uint64_t)a2, &v170);
                if (!(_BYTE)v170)
                {
                  v151 = (FILE *)*MEMORY[0x1E0C80C10];
                  v152 = 466;
                  goto LABEL_235;
                }
                std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize((_QWORD *)(v135 + 32), BYTE1(v170));
                v137 = *(_WORD **)(v135 + 32);
                v138 = *(_WORD **)(v135 + 40);
                if (v137 != v138)
                  break;
LABEL_177:
                geo::ibitstream::readByte((uint64_t)a2, &v170);
                if (!(_BYTE)v170)
                {
                  v151 = (FILE *)*MEMORY[0x1E0C80C10];
                  v152 = 473;
                  goto LABEL_235;
                }
                std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize((_QWORD *)(v135 + 64), BYTE1(v170));
                v139 = *(_WORD **)(v135 + 64);
                v140 = *(_WORD **)(v135 + 72);
                if (v139 != v140)
                {
                  while (1)
                  {
                    geo::ibitstream::readUInt16((uint64_t)&v170, (uint64_t *)a2);
                    if (!(_BYTE)v170)
                      break;
                    *v139++ = WORD1(v170);
                    if (v139 == v140)
                      goto LABEL_181;
                  }
                  v151 = (FILE *)*MEMORY[0x1E0C80C10];
                  v152 = 477;
                  goto LABEL_235;
                }
LABEL_181:
                geo::ibitstream::readByte((uint64_t)a2, &v170);
                if (!(_BYTE)v170)
                {
                  v151 = (FILE *)*MEMORY[0x1E0C80C10];
                  v152 = 481;
                  goto LABEL_235;
                }
                v141 = BYTE1(v170);
                *(_BYTE *)(v135 + 138) = BYTE1(v170);
                if ((v141 & 1) != 0)
                {
                  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 489;
                    goto LABEL_235;
                  }
                  *(_DWORD *)(v135 + 96) = HIDWORD(v170);
                  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 490;
                    goto LABEL_235;
                  }
                  *(_DWORD *)(v135 + 100) = HIDWORD(v170);
                  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 491;
                    goto LABEL_235;
                  }
                  *(_DWORD *)(v135 + 104) = HIDWORD(v170);
                  v141 = *(_BYTE *)(v135 + 138);
                }
                else
                {
                  *(_QWORD *)(v135 + 96) = 0;
                  *(_DWORD *)(v135 + 104) = 0;
                }
                if ((v141 & 2) != 0)
                {
                  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 500;
                    goto LABEL_235;
                  }
                  *(_DWORD *)(v135 + 108) = HIDWORD(v170);
                  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 501;
                    goto LABEL_235;
                  }
                  *(_DWORD *)(v135 + 112) = HIDWORD(v170);
                  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 502;
                    goto LABEL_235;
                  }
                  *(_DWORD *)(v135 + 116) = HIDWORD(v170);
                  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 503;
                    goto LABEL_235;
                  }
                  *(_DWORD *)(v135 + 120) = HIDWORD(v170);
                  v141 = *(_BYTE *)(v135 + 138);
                }
                else
                {
                  *(_OWORD *)(v135 + 108) = xmmword_19FFB34C0;
                }
                if ((v141 & 4) != 0)
                {
                  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 509;
                    goto LABEL_235;
                  }
                  *(_DWORD *)(v135 + 124) = HIDWORD(v170);
                  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 510;
                    goto LABEL_235;
                  }
                  *(_DWORD *)(v135 + 128) = HIDWORD(v170);
                  geo::ibitstream::readFloat((uint64_t *)a2, (uint64_t)&v170);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 511;
                    goto LABEL_235;
                  }
                  *(_DWORD *)(v135 + 132) = HIDWORD(v170);
                  v141 = *(_BYTE *)(v135 + 138);
                }
                else
                {
                  *(_QWORD *)(v135 + 124) = _D8;
                  *(_DWORD *)(v135 + 132) = 1065353216;
                }
                if ((v141 & 8) != 0)
                {
                  geo::ibitstream::readUInt16((uint64_t)&v170, (uint64_t *)a2);
                  if (!(_BYTE)v170)
                  {
                    v151 = (FILE *)*MEMORY[0x1E0C80C10];
                    v152 = 521;
                    goto LABEL_235;
                  }
                  *(_WORD *)(v135 + 136) = WORD1(v170);
                }
                v135 += 144;
                if (v135 == v136)
                  goto LABEL_205;
              }
              while (1)
              {
                geo::ibitstream::readUInt16((uint64_t)&v170, (uint64_t *)a2);
                if (!(_BYTE)v170)
                  break;
                *v137++ = WORD1(v170);
                if (v137 == v138)
                  goto LABEL_177;
              }
              v151 = (FILE *)*MEMORY[0x1E0C80C10];
              v152 = 469;
            }
          }
          else
          {
            v151 = (FILE *)*MEMORY[0x1E0C80C10];
            v152 = 422;
          }
          break;
        }
      }
      else
      {
        while (1)
        {
          geo::ibitstream::readUInt64((uint64_t *)a2, (uint64_t)&v170);
          if (!(_BYTE)v170)
            break;
          *v88++ = v171;
          if (v88 == v89)
            goto LABEL_125;
        }
        v151 = (FILE *)*MEMORY[0x1E0C80C10];
        v152 = 412;
      }
    }
    else
    {
      v151 = (FILE *)*MEMORY[0x1E0C80C10];
      v152 = 409;
    }
LABEL_235:
    fprintf(v151, "%s:%d Asset Parse: Read error\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", v152);
    goto LABEL_236;
  }
  while (1)
  {
    geo::ibitstream::readUInt64((uint64_t *)a2, (uint64_t)&v170);
    if (!(_BYTE)v170)
    {
      v85 = (FILE *)*MEMORY[0x1E0C80C10];
      v86 = 398;
      goto LABEL_225;
    }
    *v84 = v171;
    VarInt = (geo::codec::Allocator *)geo::ibitstream::readVarInt((uint64_t)a2, (uint64_t)&v170);
    if (!(_BYTE)v170)
    {
      v85 = (FILE *)*MEMORY[0x1E0C80C10];
      v86 = 399;
      goto LABEL_225;
    }
    if ((_QWORD)v171)
      break;
LABEL_111:
    if (++v84 == v83)
      goto LABEL_121;
  }
  geo::codec::MaterialSheet::MaterialSheet((geo::codec::MaterialSheet *)&v175);
  if (geo::codec::MaterialSheet::decodeMaterial((geo::codec::MaterialSheet *)&v175, a2, *a3, *v84))
  {
    v170 = (geo::codec::AssetLodInstance *)*v84;
    geo::codec::MaterialSheet::MaterialSheet((geo::codec::MaterialSheet *)&v171, (const geo::codec::MaterialSheet *)&v175);
    std::vector<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::StdAllocator<std::pair<unsigned long long,geo::codec::MaterialSheet>,geo::codec::Allocator>>::emplace_back<std::pair<unsigned long long,geo::codec::MaterialSheet>>((uint64_t *)v6 + 3, (geo::codec::MaterialSheet *)&v170);
    geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)&v171);
    geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)&v175);
    goto LABEL_111;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Material decode\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/AssetDecoder.cpp", 402);
  geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)&v175);
  v87 = 6;
  if (v52)
    goto LABEL_226;
LABEL_227:
  if (v87 == 6)
  {
LABEL_6:
    *(_QWORD *)this = 0;
    result = v182;
    if (v182)
    {
      geo::codec::Asset::~Asset(v182);
      return (geo::codec::Asset *)MEMORY[0x1A1AF4E00]();
    }
    return result;
  }
  v153 = v182;
  v155 = *((_QWORD *)v182 + 11);
  v154 = *((_QWORD *)v182 + 12);
  if (v154 == v155)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: should have at least one LOD\n");
    goto LABEL_6;
  }
  v156 = 0xFFFF;
  do
  {
    LODWORD(v170) = *(unsigned __int16 *)(v155 + 2) | (v156 << 16);
    BYTE4(v170) = *(_BYTE *)v155;
    result = (geo::codec::Asset *)geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::insert((uint64_t ***)v153 + 30, (unsigned __int16 *)&v170);
    v156 = *(unsigned __int16 *)(v155 + 2);
    v155 += 4;
  }
  while (v155 != v154);
  *(_QWORD *)this = v153;
  return result;
}

void sub_19F26A844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v14 - 184));
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v14 - 152));
  _Unwind_Resume(a1);
}

void sub_19F26A980(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_19F26A9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_19F26A9C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_19F26A9D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_19F26A9EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_19F26AA00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_19F26AA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_19F26AA28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:ne180100]((geo::codec::Asset **)(v1 - 152));
  _Unwind_Resume(a1);
}

uint64_t geo::ibitstream::readByte@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;

  v3 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 16);
  v4 = v2 + 2;
  if (!*(_BYTE *)(this + 24))
    v4 = v2 + 1;
  if (v3 >= v4)
  {
    v5 = v2 + 1;
    v6 = *(unsigned __int8 *)(*(_QWORD *)this + v2);
    if (*(_BYTE *)(this + 24))
    {
      if (v5 >= v3)
        v7 = 0;
      else
        v7 = *(unsigned __int8 *)(*(_QWORD *)this + v5);
      v6 = ((v7 & (0xFFFF << (8 - *(_BYTE *)(this + 24)))) >> (8 - *(_BYTE *)(this + 24))) | ((((1 << (8 - *(_BYTE *)(this + 24))) - 1) & v6) << *(_BYTE *)(this + 24));
    }
    *(_QWORD *)(this + 16) = v5;
    *a2 = 1;
    a2[1] = v6;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t geo::ibitstream::readUInt16(uint64_t this, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int16 v16;
  int v17;

  v2 = a2[1];
  v3 = a2[2];
  v4 = v3 + 2;
  v5 = *((_BYTE *)a2 + 24);
  v6 = v3 + 3;
  if (!v5)
    v6 = v3 + 2;
  if (v2 >= v6)
  {
    v7 = *a2;
    if (*((_BYTE *)a2 + 24))
    {
      v8 = 8 - v5;
      v9 = (1 << (8 - v5)) + 255;
      v10 = 0xFFFF << (8 - v5);
      v11 = *(unsigned __int8 *)(v7 + v3);
      v12 = v3 + 1;
      if (v3 + 1 >= v2)
        v13 = 0;
      else
        v13 = *(unsigned __int8 *)(v7 + v12);
      v15 = ((v13 & v10) >> v8) | ((v9 & v11) << v5);
      a2[2] = v12;
      v16 = *(unsigned __int8 *)(v7 + v12);
      if (v4 >= v2)
        v17 = 0;
      else
        v17 = *(unsigned __int8 *)(v7 + v4);
      a2[2] = v4;
      *(_BYTE *)this = 1;
      *(_WORD *)(this + 2) = v15 | (unsigned __int16)(((unsigned __int16)((v17 & v10) >> v8) | (unsigned __int16)(((unsigned __int16)v9 & v16) << v5)) << 8);
    }
    else
    {
      v14 = *(unsigned __int16 *)(v7 + v3);
      a2[2] = v4;
      *(_BYTE *)this = 1;
      *(_WORD *)(this + 2) = v14 | (unsigned __int16)((unsigned __int16)(v14 >> 8) << 8);
    }
  }
  else
  {
    *(_BYTE *)this = 0;
  }
  return this;
}

_QWORD *std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(result[1] - *result) >> 1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
    return (_QWORD *)std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::__append((uint64_t)result, v4);
  if (!v3)
    result[1] = *result + 2 * a2;
  return result;
}

uint64_t std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  __int16 v27;
  uint64_t v28;

  v3 = result;
  v4 = *(_WORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 1)
  {
    if (a2)
    {
      v11 = 2 * a2;
      v12 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        v11 -= 2;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)result;
    v7 = v6 >> 1;
    v8 = (v6 >> 1) + a2;
    if (v8 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)result;
    if (v9 > v8)
      v8 = v9;
    if (v9 >= 0x7FFFFFFFFFFFFFFELL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 2 * v10, 2);
    else
      result = 0;
    v13 = (_WORD *)(result + 2 * v7);
    v14 = 2 * a2;
    v15 = &v13[a2];
    v16 = v13;
    do
    {
      if (v16)
        *v16 = 0;
      ++v16;
      v14 -= 2;
    }
    while (v14);
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)(v3 + 8);
    if (v18 != *(_QWORD *)v3)
    {
      v19 = v18 - *(_QWORD *)v3 - 2;
      if (v19 < 0x1E)
        goto LABEL_35;
      if ((unint64_t)(v18 - (v6 + result)) < 0x20)
        goto LABEL_35;
      v20 = (v19 >> 1) + 1;
      v21 = 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
      v22 = v18 - v21;
      v13 = (_WORD *)((char *)v13 - v21);
      v23 = (_OWORD *)(result + 2 * v7 - 16);
      v24 = (__int128 *)(v18 - 16);
      v25 = v20 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 16;
      }
      while (v25);
      v18 = v22;
      if (v20 != (v20 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_35:
        do
        {
          v27 = *(_WORD *)(v18 - 2);
          v18 -= 2;
          *--v13 = v27;
        }
        while (v18 != v17);
      }
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v15;
    v28 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 2 * v10;
    if (v17)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v28 - v17);
  }
  return result;
}

uint64_t *geo::ibitstream::readUInt64@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;

  v2 = this[1];
  v3 = this[2];
  v4 = v3 + 8;
  v5 = *((_BYTE *)this + 24);
  v6 = v3 + 9;
  if (!v5)
    v6 = v3 + 8;
  if (v2 < v6)
  {
    *(_BYTE *)a2 = 0;
    return this;
  }
  v7 = *this;
  if (*((_BYTE *)this + 24))
  {
    v8 = 8 - v5;
    v9 = v3 + 1;
    if (v3 + 1 >= v2)
    {
      v10 = 0;
      v11 = *(unsigned __int8 *)(v7 + v3);
      this[2] = v9;
      v12 = v3 + 2;
      if (v3 + 2 >= v2)
        goto LABEL_8;
    }
    else
    {
      v10 = *(unsigned __int8 *)(v7 + v9);
      v11 = *(unsigned __int8 *)(v7 + v3);
      this[2] = v9;
      v12 = v3 + 2;
      if (v3 + 2 >= v2)
      {
LABEL_8:
        v13 = 0;
LABEL_12:
        v22 = *(unsigned __int8 *)(v7 + v9);
        this[2] = v12;
        v23 = v3 + 3;
        if (v3 + 3 >= v2)
          v24 = 0;
        else
          v24 = *(unsigned __int8 *)(v7 + v23);
        v25 = (1 << v8) + 255;
        v26 = *(unsigned __int8 *)(v7 + v12);
        v27 = 0xFFFF << v8;
        this[2] = v23;
        v28 = *(unsigned __int8 *)(v7 + v23);
        v29 = v3 + 4;
        if (v3 + 4 >= v2)
          v30 = 0;
        else
          v30 = *(unsigned __int8 *)(v7 + v29);
        v31 = 8 - v5;
        v32 = v25 & v11;
        v33 = v10 & v27;
        v34 = v25 & v22;
        v35 = v13 & v27;
        v36 = v25 & v26;
        v37 = v24 & v27;
        v38 = v25 & v28;
        v39 = v30 & v27;
        this[2] = v29;
        v40 = *(unsigned __int8 *)(v7 + v29);
        v41 = v3 + 5;
        if (v3 + 5 >= v2)
          v42 = 0;
        else
          v42 = *(unsigned __int8 *)(v7 + v41);
        LODWORD(v15) = v32 << v5;
        LODWORD(v16) = v33 >> v31;
        v43 = v34 << v5;
        LODWORD(v18) = v35 >> v31;
        v44 = v36 << v5;
        v45 = v37 >> v31;
        v46 = v39 >> v31;
        v47 = (v25 & v40) << v5;
        this[2] = v41;
        v48 = v3 + 6;
        v49 = *(unsigned __int8 *)(v7 + v41);
        if (v3 + 6 >= v2)
          v50 = 0;
        else
          v50 = *(unsigned __int8 *)(v7 + v48);
        LOBYTE(v14) = v16 | v15;
        LOBYTE(v15) = v18 | v43;
        LOBYTE(v16) = v45 | v44;
        LODWORD(v17) = v46 | (v38 << v5);
        LOBYTE(v18) = ((v42 & v27) >> v31) | v47;
        LODWORD(v19) = ((v50 & v27) >> v31) | ((v25 & v49) << v5);
        this[2] = v48;
        v51 = *(unsigned __int8 *)(v7 + v48);
        v52 = v3 + 7;
        if (v3 + 7 >= v2)
          v53 = 0;
        else
          v53 = *(unsigned __int8 *)(v7 + v52);
        LODWORD(v20) = ((v53 & v27) >> v31) | ((v25 & v51) << v5);
        this[2] = v52;
        v54 = *(unsigned __int8 *)(v7 + v52);
        if (v4 >= v2)
          v55 = 0;
        else
          v55 = *(unsigned __int8 *)(v7 + v4);
        v21 = ((v55 & v27) >> v31) | ((v25 & v54) << v5);
        goto LABEL_31;
      }
    }
    v13 = *(unsigned __int8 *)(v7 + v12);
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(v7 + v3);
  v15 = v14 >> 8;
  v16 = v14 >> 16;
  v17 = v14 >> 24;
  v18 = HIDWORD(v14);
  v19 = v14 >> 40;
  v20 = HIWORD(v14);
  v21 = HIBYTE(v14);
LABEL_31:
  this[2] = v4;
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = (v21 << 56) | ((unint64_t)v20 << 48) | ((unint64_t)v19 << 40) | ((unint64_t)v18 << 32) | ((_DWORD)v17 << 24) | ((unint64_t)v16 << 16) | ((unint64_t)v15 << 8) | v14;
  return this;
}

void std::__hash_table<std::__hash_value_type<unsigned short,unsigned long long>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned long long>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned long long>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned long long>>(uint64_t a1, unsigned __int16 a2, __int16 a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & a2;
    }
    v11 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v12 + 8) == a2)
                return;
            }
            else if (((unint64_t)v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (uint64_t **)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = (unint64_t)v12[1];
          if (v13 == a2)
          {
            if (*((unsigned __int16 *)v12 + 8) == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (uint64_t **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v8;
  *((_WORD *)v15 + 8) = a3;
  v15[3] = a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
    goto LABEL_50;
  v18 = 1;
  if (v9 >= 3)
    v18 = (v9 & (v9 - 1)) != 0;
  v19 = v18 | (2 * v9);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v9)
    goto LABEL_34;
  if (prime < v9)
  {
    v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (prime <= v22)
      prime = v22;
    if (prime < v9)
LABEL_34:
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
  }
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8)
    {
      v4 = v8 % v9;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
      if (!v26)
        goto LABEL_53;
LABEL_51:
      *v15 = *v26;
LABEL_59:
      *v26 = v15;
      goto LABEL_60;
    }
    v4 = v8;
LABEL_50:
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (!v26)
      goto LABEL_53;
    goto LABEL_51;
  }
  v4 = ((_DWORD)v9 - 1) & v8;
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
    goto LABEL_51;
LABEL_53:
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19F26B30C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::unordered_map<unsigned short,unsigned long long>>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  float v24;
  float v25;
  uint64_t v26;
  _QWORD *v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  _QWORD *i;
  size_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;

  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v14 = operator new(0x40uLL);
  v15 = v14;
  *v14 = 0;
  v14[1] = a2;
  v17 = *a3;
  v16 = a3[1];
  v18 = a3[2];
  a3[1] = 0;
  a3[2] = 0;
  v14[2] = v17;
  v14[3] = v16;
  v14[4] = v18;
  v19 = a3[3];
  v14[5] = v19;
  v20 = a3[4];
  v14[6] = v20;
  *((_DWORD *)v14 + 14) = *((_DWORD *)a3 + 10);
  if (v20)
  {
    v21 = *(_QWORD *)(v19 + 8);
    if ((v18 & (v18 - 1)) != 0)
    {
      v23 = v21 >= v18;
      v22 = v21 % v18;
      if (!v23)
        v22 = v21;
    }
    else
    {
      v22 = v21 & (v18 - 1);
    }
    *(_QWORD *)(v16 + 8 * v22) = v14 + 5;
    a3[3] = 0;
    a3[4] = 0;
  }
  v24 = (float)(unint64_t)(a1[3] + 1);
  v25 = *((float *)a1 + 8);
  if (!v7 || (float)(v25 * (float)v7) < v24)
  {
    v28 = 1;
    if (v7 >= 3)
      v28 = (v7 & (v7 - 1)) != 0;
    v29 = v28 | (2 * v7);
    v30 = vcvtps_u32_f32(v24 / v25);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v7 = a1[1];
    if (prime > v7)
    {
LABEL_42:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v32 = operator new(8 * prime);
      v33 = (void *)*a1;
      *a1 = (uint64_t)v32;
      if (v33)
        operator delete(v33);
      v34 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v34++) = 0;
      while (prime != v34);
      v35 = (_QWORD *)*v13;
      if (!*v13)
        goto LABEL_74;
      v36 = v35[1];
      v37 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v38 = v36 & v37;
        *(_QWORD *)(*a1 + 8 * v38) = v13;
        for (i = (_QWORD *)*v35; *v35; i = (_QWORD *)*v35)
        {
          v40 = i[1] & v37;
          if (v40 == v38)
          {
            v35 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v40))
          {
            *v35 = *i;
            v41 = 8 * v40;
            *i = **(_QWORD **)(*a1 + v41);
            **(_QWORD **)(*a1 + v41) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v40) = v35;
            v35 = i;
            v38 = v40;
          }
        }
        goto LABEL_74;
      }
      if (v36 >= prime)
        v36 %= prime;
      *(_QWORD *)(*a1 + 8 * v36) = v13;
      v45 = (_QWORD *)*v35;
      if (!*v35)
      {
LABEL_74:
        v7 = prime;
        v48 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_75;
        goto LABEL_90;
      }
      while (1)
      {
        v47 = v45[1];
        if (v47 >= prime)
          v47 %= prime;
        if (v47 == v36)
          goto LABEL_68;
        if (*(_QWORD *)(*a1 + 8 * v47))
        {
          *v35 = *v45;
          v46 = 8 * v47;
          *v45 = **(_QWORD **)(*a1 + v46);
          **(_QWORD **)(*a1 + v46) = v45;
          v45 = v35;
LABEL_68:
          v35 = v45;
          v45 = (_QWORD *)*v45;
          if (!v45)
            goto LABEL_74;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v47) = v35;
          v35 = v45;
          v45 = (_QWORD *)*v45;
          v36 = v47;
          if (!v45)
            goto LABEL_74;
        }
      }
    }
    if (prime < v7)
    {
      v42 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v43 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime < v7)
      {
        if (!prime)
        {
          v49 = (void *)*a1;
          *a1 = 0;
          if (v49)
            operator delete(v49);
          v7 = 0;
          a1[1] = 0;
          v48 = -1;
          goto LABEL_90;
        }
        goto LABEL_42;
      }
      v7 = a1[1];
    }
    v48 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_75:
      if (v7 <= a2)
      {
        v3 = a2 % v7;
        v26 = *a1;
        v27 = *(_QWORD **)(*a1 + 8 * (a2 % v7));
        if (v27)
          goto LABEL_31;
      }
      else
      {
        v3 = a2;
        v26 = *a1;
        v27 = *(_QWORD **)(*a1 + 8 * a2);
        if (v27)
          goto LABEL_31;
      }
      goto LABEL_91;
    }
LABEL_90:
    v3 = v48 & a2;
    v26 = *a1;
    v27 = *(_QWORD **)(*a1 + 8 * (v48 & a2));
    if (v27)
      goto LABEL_31;
    goto LABEL_91;
  }
  v26 = *a1;
  v27 = *(_QWORD **)(*a1 + 8 * v3);
  if (v27)
  {
LABEL_31:
    *v15 = *v27;
LABEL_97:
    *v27 = v15;
    goto LABEL_98;
  }
LABEL_91:
  *v15 = *v13;
  *v13 = v15;
  *(_QWORD *)(v26 + 8 * v3) = v13;
  if (*v15)
  {
    v50 = *(_QWORD *)(*v15 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v50 >= v7)
        v50 %= v7;
    }
    else
    {
      v50 &= v7 - 1;
    }
    v27 = (_QWORD *)(*a1 + 8 * v50);
    goto LABEL_97;
  }
LABEL_98:
  ++a1[3];
}

void sub_19F26B824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::unordered_map<gdc::Entity,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *,std::hash<gdc::Entity>,std::equal_to<gdc::Entity>,std::allocator<std::pair<gdc::Entity const,gdc::components::RegistryBridgeMap<gdc::Entity>::RemoteBridgeNode *>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~pair(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = result;
  v5 = *(_QWORD **)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 5)
  {
    if (a2)
    {
      v10 = 32 * a2;
      v11 = &v5[4 * a2];
      do
      {
        if (v5)
        {
          *v5 = 0;
          v5[1] = 0;
          v5[2] = 0;
          result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
          v5[3] = result;
        }
        v5 += 4;
        v10 -= 32;
      }
      while (v10);
      v5 = v11;
    }
    *(_QWORD *)(v3 + 8) = v5;
  }
  else
  {
    v6 = ((uint64_t)v5 - *(_QWORD *)result) >> 5;
    if ((v6 + a2) >> 59)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v7 = v4 - *(_QWORD *)result;
    v8 = v7 >> 4;
    if (v7 >> 4 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 32 * v9, 8);
    else
      result = 0;
    v12 = (_QWORD *)(result + 32 * v6);
    v13 = result + 32 * v9;
    v14 = 4 * a2;
    v15 = &v12[v14];
    v16 = v12;
    do
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        v16[3] = result;
      }
      v16 += 4;
      v14 -= 4;
    }
    while (v14 * 8);
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)(v3 + 8);
    if (v18 == *(_QWORD *)v3)
    {
      *(_QWORD *)v3 = v12;
      *(_QWORD *)(v3 + 8) = v15;
      v23 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v13;
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = &v12[v19 / 8];
        v21 = v18 + v19;
        *(v20 - 4) = 0;
        *(v20 - 3) = 0;
        *(v20 - 2) = 0;
        *(v20 - 1) = *(_QWORD *)(v18 + v19 - 8);
        *((_OWORD *)v20 - 2) = *(_OWORD *)(v18 + v19 - 32);
        *(v20 - 2) = *(_QWORD *)(v18 + v19 - 16);
        *(_QWORD *)(v21 - 32) = 0;
        *(_QWORD *)(v21 - 24) = 0;
        *(_QWORD *)(v21 - 16) = 0;
        v19 -= 32;
      }
      while (v18 + v19 != v17);
      v18 = *(_QWORD *)v3;
      v22 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)v3 = &v12[v19 / 8];
      *(_QWORD *)(v3 + 8) = v15;
      v23 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v13;
      if (v22 != v18)
      {
        v24 = v22;
        do
        {
          v26 = *(_QWORD *)(v24 - 32);
          v24 -= 32;
          v25 = v26;
          if (v26)
          {
            *(_QWORD *)(v22 - 24) = v25;
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v22 - 8) + 40))(*(_QWORD *)(v22 - 8), v25, *(_QWORD *)(v22 - 16) - v25);
          }
          v22 = v24;
        }
        while (v24 != v18);
      }
    }
    if (v18)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v18, v23 - v18);
  }
  return result;
}

uint64_t buildLocalTransformMatrix(unint64_t a1, uint64_t *a2, unsigned int a3, _QWORD *a4, _QWORD *a5, uint64_t a6, char a7)
{
  uint64_t result;
  __int128 v9;
  __int128 v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unsigned __int16 *v40;
  unsigned __int16 v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint64_t v44;
  _WORD *v45;
  _WORD *v46;
  unint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  float v57;
  float v58;
  uint64_t *v59;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  size_t prime;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  size_t v68;
  size_t v69;
  size_t v70;
  _QWORD *i;
  size_t v72;
  uint64_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  float32x4_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  size_t v102;
  __int16 v103;
  float32x4_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v114;
  _QWORD *v115;
  unsigned __int16 *v116;
  unsigned __int16 *v117;
  __int16 *v118;
  _QWORD *v119;
  _WORD *v120;
  _BYTE v121[68];
  float32x4_t v122[4];
  float32x4_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  int v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  int v132;

  result = 0;
  v9 = *(_OWORD *)(a6 + 16);
  v123 = *(float32x4_t *)a6;
  v124 = v9;
  v10 = *(_OWORD *)(a6 + 48);
  v125 = *(_OWORD *)(a6 + 32);
  v126 = v10;
  if (!a5)
    return result;
  v12 = *a4;
  if (0x8E38E38E38E38E39 * ((uint64_t)(a4[1] - *a4) >> 4) < a3)
    return result;
  v13 = a5;
  v15 = v12 + 144 * a3;
  v16 = (_BYTE *)(v15 + 138);
  if (*(_BYTE *)(v15 + 138))
  {
    v17 = v12 + 144 * a3;
    v18 = *(float *)(v17 + 108);
    v19 = *(float *)(v17 + 112);
    v20 = *(float *)(v17 + 116);
    v21 = *(float *)(v17 + 120);
    v22 = v19 + v19;
    v23 = (float)(v19 + v19) * v19;
    v24 = (float)(v20 + v20) * v20;
    v25 = v18 + v18;
    v26 = (float)(v18 + v18) * v19;
    v27 = (float)(v20 + v20) * v21;
    v28 = v20 * (float)(v18 + v18);
    v29 = v21 * v22;
    v30 = (float)(v21 * v22) + v28;
    v31 = 1.0 - (float)((float)(v18 + v18) * v18);
    v32 = v22 * v20;
    v33 = v21 * v25;
    *(float *)v121 = 1.0 - (float)(v23 + v24);
    *(float *)&v121[4] = v27 + v26;
    *(float *)&v121[16] = v26 - v27;
    *(float *)&v121[20] = v31 - v24;
    *(float *)&v121[32] = v30;
    *(float *)&v121[36] = v32 - v33;
    *(float *)&v121[8] = v28 - v29;
    *(_QWORD *)&v121[24] = COERCE_UNSIGNED_INT(v33 + v32);
    *(float *)&v121[40] = v31 - v23;
    *(_DWORD *)&v121[12] = 0;
    *(_DWORD *)&v121[44] = 0;
    *(_QWORD *)&v121[48] = *(_QWORD *)(v17 + 96);
    *(_DWORD *)&v121[56] = *(_DWORD *)(v17 + 104);
    *(_DWORD *)&v121[60] = 1065353216;
    v129 = 0u;
    v130 = 0u;
    v131 = 0;
    v128 = 0u;
    v132 = 1065353216;
    v127 = *(_DWORD *)(v17 + 124);
    LODWORD(v129) = *(_DWORD *)(v17 + 128);
    DWORD1(v130) = *(_DWORD *)(v17 + 132);
    gm::operator*<float,4,4,4>((float32x4_t *)v121, (uint64_t)&v127, v122);
    gm::operator*<float,4,4,4>(&v123, (uint64_t)v122, (float32x4_t *)v121);
    v123 = *(float32x4_t *)v121;
    v124 = *(_OWORD *)&v121[16];
    v125 = *(_OWORD *)&v121[32];
    v126 = *(_OWORD *)&v121[48];
  }
  else if ((a7 & 1) != 0)
  {
    v34 = 1;
    v35 = a4;
    v36 = v12 + 144 * a3;
    v37 = *(_QWORD *)(v36 + 64);
    v38 = *(_QWORD *)(v36 + 72);
    if (v37 != v38)
      goto LABEL_136;
    return 1;
  }
  v114 = v12;
  v40 = *(unsigned __int16 **)v15;
  v39 = *(unsigned __int16 **)(v15 + 8);
  while (v40 != v39)
  {
    v41 = *v40++;
    *(_WORD *)v121 = v41;
    *(float32x4_t *)&v121[4] = v123;
    *(_OWORD *)&v121[20] = v124;
    *(_OWORD *)&v121[36] = v125;
    *(_OWORD *)&v121[52] = v126;
    std::__hash_table<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,gm::Matrix<float,4,4>>>(a1, v41, (uint64_t)v121);
  }
  v42 = v114 + 144 * a3;
  v43 = *(unsigned __int16 **)(v42 + 32);
  v116 = *(unsigned __int16 **)(v42 + 40);
  if (v43 == v116)
  {
    v34 = 0;
    v35 = a4;
    v110 = v114 + 144 * a3;
    v37 = *(_QWORD *)(v110 + 64);
    v38 = *(_QWORD *)(v110 + 72);
    if (v37 != v38)
      goto LABEL_136;
    return 1;
  }
  v118 = (__int16 *)(v114 + 144 * a3 + 136);
  v119 = a2 + 3;
  v115 = v13;
  while (2)
  {
    v117 = v43;
    v44 = *v13 + 32 * *v43;
    v46 = *(_WORD **)v44;
    v45 = *(_WORD **)(v44 + 8);
    v120 = v45;
    if (*(_WORD **)v44 == v45)
      goto LABEL_12;
    do
    {
      while (1)
      {
        while (1)
        {
          v47 = (unsigned __int16)*v46;
          if ((*v16 & 8) != 0)
            break;
          *(_WORD *)v121 = *v46;
          *(float32x4_t *)&v121[4] = v123;
          *(_OWORD *)&v121[20] = v124;
          *(_OWORD *)&v121[36] = v125;
          *(_OWORD *)&v121[52] = v126;
          std::__hash_table<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,gm::Matrix<float,4,4>>,geo::codec::Allocator>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,gm::Matrix<float,4,4>>>(a1, v47, (uint64_t)v121);
          if (++v46 == v45)
            goto LABEL_12;
        }
        v48 = v16;
        v49 = a1;
        v50 = a2[1];
        if (v50)
        {
          v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
          v51.i16[0] = vaddlv_u8(v51);
          if (v51.u32[0] > 1uLL)
          {
            a1 = (unsigned __int16)*v46;
            if (v50 <= v47)
              a1 = v47 % v50;
          }
          else
          {
            a1 = ((_DWORD)v50 - 1) & v47;
          }
          v52 = *(uint64_t **)(*a2 + 8 * a1);
          if (v52)
          {
            v53 = *v52;
            if (*v52)
              break;
          }
        }
LABEL_37:
        v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[4] + 16))(a2[4], 56, 8);
        *(_QWORD *)v121 = v53;
        *(_QWORD *)&v121[8] = a2 + 4;
        *(_QWORD *)v53 = 0;
        *(_QWORD *)(v53 + 8) = v47;
        *(_WORD *)(v53 + 16) = v47;
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 24) = 0;
        {
          v111 = operator new();
          geo::MallocZoneAllocator::MallocZoneAllocator(v111, "GeoCodec", 0x99AFC36000000008, 0, 0);
          geo::codec::Allocator::instance(void)::alloc = v111;
        }
        *(_QWORD *)(v53 + 48) = geo::codec::Allocator::instance(void)::alloc;
        v121[16] = 1;
        v57 = (float)(unint64_t)(a2[5] + 1);
        v58 = *((float *)a2 + 12);
        if (!v50 || (float)(v58 * (float)v50) < v57)
        {
          v60 = (v50 & (v50 - 1)) != 0;
          if (v50 < 3)
            v60 = 1;
          v61 = v60 | (2 * v50);
          v62 = vcvtps_u32_f32(v57 / v58);
          if (v61 <= v62)
            prime = v62;
          else
            prime = v61;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v50 = a2[1];
          if (prime <= v50)
          {
            if (prime >= v50)
              goto LABEL_106;
            v74 = vcvtps_u32_f32((float)(unint64_t)a2[5] / *((float *)a2 + 12));
            if (v50 < 3 || (v75 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v75.i16[0] = vaddlv_u8(v75), v75.u32[0] > 1uLL))
            {
              v74 = std::__next_prime(v74);
            }
            else
            {
              v76 = 1 << -(char)__clz(v74 - 1);
              if (v74 >= 2)
                v74 = v76;
            }
            if (prime <= v74)
              prime = v74;
            if (prime >= v50)
            {
              v50 = a2[1];
              if ((v50 & (v50 - 1)) != 0)
                goto LABEL_119;
              goto LABEL_107;
            }
            if (!prime)
            {
              v99 = *a2;
              *a2 = 0;
              if (v99)
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[2] + 40))(a2[2], v99, 8 * a2[1]);
              v50 = 0;
              a2[1] = 0;
              goto LABEL_107;
            }
          }
          v64 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(_QWORD *)a2[2] + 16))(a2[2], 8 * prime, 8);
          v65 = *a2;
          *a2 = v64;
          if (v65)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[2] + 40))(a2[2], v65, 8 * a2[1]);
          v66 = 0;
          a2[1] = prime;
          do
            *(_QWORD *)(*a2 + 8 * v66++) = 0;
          while (prime != v66);
          v67 = (_QWORD *)*v119;
          if (!*v119)
          {
LABEL_118:
            v50 = prime;
            if ((prime & (prime - 1)) != 0)
            {
LABEL_119:
              if (v50 <= v47)
              {
                a1 = v47 % v50;
                v59 = *(uint64_t **)(*a2 + 8 * (v47 % v50));
                if (!v59)
                  goto LABEL_108;
              }
              else
              {
                a1 = v47;
                v59 = *(uint64_t **)(*a2 + 8 * v47);
                if (!v59)
                  goto LABEL_108;
              }
              goto LABEL_41;
            }
LABEL_107:
            a1 = ((_DWORD)v50 - 1) & v47;
            v59 = *(uint64_t **)(*a2 + 8 * a1);
            if (!v59)
              goto LABEL_108;
LABEL_41:
            *(_QWORD *)v53 = *v59;
            a1 = v49;
            v16 = v48;
            goto LABEL_127;
          }
          v68 = v67[1];
          v69 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v70 = v68 & v69;
            *(_QWORD *)(*a2 + 8 * v70) = v119;
            for (i = (_QWORD *)*v67; *v67; i = (_QWORD *)*v67)
            {
              v72 = i[1] & v69;
              if (v72 == v70)
              {
                v67 = i;
              }
              else if (*(_QWORD *)(*a2 + 8 * v72))
              {
                *v67 = *i;
                v73 = 8 * v72;
                *i = **(_QWORD **)(*a2 + v73);
                **(_QWORD **)(*a2 + v73) = i;
              }
              else
              {
                *(_QWORD *)(*a2 + 8 * v72) = v67;
                v67 = i;
                v70 = v72;
              }
            }
            goto LABEL_118;
          }
          if (v68 < prime)
          {
            *(_QWORD *)(*a2 + 8 * v68) = v119;
            v77 = (_QWORD *)*v67;
            if (*v67)
              goto LABEL_113;
            goto LABEL_105;
          }
          v68 %= prime;
          *(_QWORD *)(*a2 + 8 * v68) = v119;
          v77 = (_QWORD *)*v67;
          if (!*v67)
          {
LABEL_105:
            v50 = prime;
LABEL_106:
            if ((v50 & (v50 - 1)) != 0)
              goto LABEL_119;
            goto LABEL_107;
          }
          while (1)
          {
LABEL_113:
            v102 = v77[1];
            if (v102 >= prime)
              v102 %= prime;
            if (v102 == v68)
              goto LABEL_112;
            if (*(_QWORD *)(*a2 + 8 * v102))
            {
              *v67 = *v77;
              v101 = 8 * v102;
              *v77 = **(_QWORD **)(*a2 + v101);
              **(_QWORD **)(*a2 + v101) = v77;
              v77 = v67;
LABEL_112:
              v67 = v77;
              v77 = (_QWORD *)*v77;
              if (!v77)
                goto LABEL_118;
            }
            else
            {
              *(_QWORD *)(*a2 + 8 * v102) = v67;
              v67 = v77;
              v77 = (_QWORD *)*v77;
              v68 = v102;
              if (!v77)
                goto LABEL_118;
            }
          }
        }
        v59 = *(uint64_t **)(*a2 + 8 * a1);
        if (v59)
          goto LABEL_41;
LABEL_108:
        *(_QWORD *)v53 = a2[3];
        a2[3] = v53;
        *(_QWORD *)(*a2 + 8 * a1) = v119;
        a1 = v49;
        v16 = v48;
        if (!*(_QWORD *)v53)
          goto LABEL_128;
        v100 = *(_QWORD *)(*(_QWORD *)v53 + 8);
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v100 >= v50)
            v100 %= v50;
        }
        else
        {
          v100 &= v50 - 1;
        }
        v59 = (uint64_t *)(*a2 + 8 * v100);
LABEL_127:
        *v59 = v53;
LABEL_128:
        ++a2[5];
        v78 = *(_QWORD *)(v53 + 32);
        v79 = *(_QWORD *)(v53 + 40);
        if (v78 < v79)
          goto LABEL_129;
LABEL_76:
        v80 = *(_QWORD *)(v53 + 24);
        v81 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v78 - v80) >> 2);
        v82 = v81 + 1;
        if (v81 + 1 > 0x3C3C3C3C3C3C3C3)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v83 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v79 - v80) >> 2);
        if (2 * v83 > v82)
          v82 = 2 * v83;
        if (v83 >= 0x1E1E1E1E1E1E1E1)
          v82 = 0x3C3C3C3C3C3C3C3;
        if (v82)
        {
          v84 = 68 * v82;
          v85 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v53 + 48) + 16))(*(_QWORD *)(v53 + 48), 68 * v82, 4);
          v86 = v85 + 68 * v81;
          v82 = v85 + v84;
          if (v85)
          {
            v87 = *v118;
            v88 = v123;
            v89 = v124;
            v90 = v126;
            *(_OWORD *)(v86 + 32) = v125;
            *(_OWORD *)(v86 + 48) = v90;
            *(float32x4_t *)v86 = v88;
            *(_OWORD *)(v86 + 16) = v89;
            *(_WORD *)(v85 + 68 * v81 + 64) = v87;
          }
          v92 = *(_QWORD *)(v53 + 24);
          v91 = *(_QWORD *)(v53 + 32);
          v93 = v85 + 68 * v81;
          if (v91 != v92)
          {
            do
            {
LABEL_87:
              *(_OWORD *)(v93 - 68) = *(_OWORD *)(v91 - 68);
              v94 = *(_OWORD *)(v91 - 52);
              v95 = *(_OWORD *)(v91 - 36);
              v96 = *(_OWORD *)(v91 - 20);
              *(_DWORD *)(v93 - 4) = *(_DWORD *)(v91 - 4);
              *(_OWORD *)(v93 - 20) = v96;
              *(_OWORD *)(v93 - 36) = v95;
              *(_OWORD *)(v93 - 52) = v94;
              v93 -= 68;
              v91 -= 68;
            }
            while (v91 != v92);
            v91 = *(_QWORD *)(v53 + 24);
            v97 = v86 + 68;
            *(_QWORD *)(v53 + 24) = v93;
            *(_QWORD *)(v53 + 32) = v86 + 68;
            v98 = *(_QWORD *)(v53 + 40);
            *(_QWORD *)(v53 + 40) = v82;
            if (!v91)
              goto LABEL_92;
LABEL_91:
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 48) + 40))(*(_QWORD *)(v53 + 48), v91, v98 - v91);
            goto LABEL_92;
          }
        }
        else
        {
          v86 = 68 * v81;
          v92 = *(_QWORD *)(v53 + 24);
          v91 = *(_QWORD *)(v53 + 32);
          v93 = 68 * v81;
          if (v91 != v92)
            goto LABEL_87;
        }
        v97 = v86 + 68;
        *(_QWORD *)(v53 + 24) = v93;
        *(_QWORD *)(v53 + 32) = v86 + 68;
        v98 = *(_QWORD *)(v53 + 40);
        *(_QWORD *)(v53 + 40) = v82;
        if (v91)
          goto LABEL_91;
LABEL_92:
        *(_QWORD *)(v53 + 32) = v97;
        v45 = v120;
        if (++v46 == v120)
          goto LABEL_12;
      }
      if (v51.u32[0] < 2uLL)
      {
        while (1)
        {
          v55 = *(_QWORD *)(v53 + 8);
          if (v55 == v47)
          {
            if (*(unsigned __int16 *)(v53 + 16) == (_DWORD)v47)
              goto LABEL_75;
          }
          else if ((v55 & (v50 - 1)) != a1)
          {
            goto LABEL_37;
          }
          v53 = *(_QWORD *)v53;
          if (!v53)
            goto LABEL_37;
        }
      }
      while (1)
      {
        v54 = *(_QWORD *)(v53 + 8);
        if (v54 == v47)
          break;
        if (v54 >= v50)
          v54 %= v50;
        if (v54 != a1)
          goto LABEL_37;
LABEL_27:
        v53 = *(_QWORD *)v53;
        if (!v53)
          goto LABEL_37;
      }
      if (*(unsigned __int16 *)(v53 + 16) != (_DWORD)v47)
        goto LABEL_27;
LABEL_75:
      a1 = v49;
      v16 = v48;
      v78 = *(_QWORD *)(v53 + 32);
      v79 = *(_QWORD *)(v53 + 40);
      if (v78 >= v79)
        goto LABEL_76;
LABEL_129:
      if (v78)
      {
        v103 = *v118;
        v104 = v123;
        v105 = v124;
        v106 = v126;
        *(_OWORD *)(v78 + 32) = v125;
        *(_OWORD *)(v78 + 48) = v106;
        *(float32x4_t *)v78 = v104;
        *(_OWORD *)(v78 + 16) = v105;
        *(_WORD *)(v78 + 64) = v103;
      }
      *(_QWORD *)(v53 + 32) = v78 + 68;
      v45 = v120;
      ++v46;
    }
    while (v46 != v120);
LABEL_12:
    v43 = v117 + 1;
    v13 = v115;
    if (v117 + 1 != v116)
      continue;
    break;
  }
  v34 = 0;
  v35 = a4;
  v107 = v114 + 144 * a3;
  v37 = *(_QWORD *)(v107 + 64);
  v38 = *(_QWORD *)(v107 + 72);
  if (v37 == v38)
    return 1;
LABEL_136:
  v108 = v37 + 2;
  do
  {
    result = buildLocalTransformMatrix(a1, a2, *(unsigned __int16 *)(v108 - 2), v35, v13, &v123, v34);
    if ((_DWORD)result)
      v109 = v108 == v38;
    else
      v109 = 1;
    v108 += 2;
  }
  while (!v109);
  return result;
}

void sub_19F26C53C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x1A1AF4E00](a10, 0x10F1C40DA10AB66);
  __clang_call_terminate(a1);
}

void sub_19F26C56C(void *a1)
{
  __clang_call_terminate(a1);
}

void sub_19F26C590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,void *>,geo::codec::Allocator>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator>>::emplace_back<std::shared_ptr<geo::codec::AssetLodInstance>>(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v4 = *(_OWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
    {
      *v4 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a1 + 8) = v4 + 1;
    return;
  }
  v6 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 60)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v8 = v5 - *(_QWORD *)a1;
  if (v8 >> 3 > v7)
    v7 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  if (v7)
  {
    v9 = 16 * v7;
    v10 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * v7, 8);
    v11 = (_OWORD *)(v10 + 16 * v6);
    v7 = v10 + v9;
    if (v10)
    {
      *v11 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    v12 = (uint64_t)(v11 + 1);
    v13 = *(_QWORD **)a1;
    v14 = *(_QWORD **)(a1 + 8);
    if (v14 == *(_QWORD **)a1)
      goto LABEL_25;
    do
    {
LABEL_16:
      v15 = *((_OWORD *)v14 - 1);
      v14 -= 2;
      *--v11 = v15;
      *v14 = 0;
      v14[1] = 0;
    }
    while (v14 != v13);
    v14 = *(_QWORD **)a1;
    v16 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    while (v16 != v14)
    {
      v18 = (std::__shared_weak_count *)*(v16 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v16 -= 2;
    }
    goto LABEL_26;
  }
  v11 = (_OWORD *)(16 * v6);
  v12 = 16 * v6 + 16;
  v13 = *(_QWORD **)a1;
  v14 = *(_QWORD **)(a1 + 8);
  if (v14 != *(_QWORD **)a1)
    goto LABEL_16;
LABEL_25:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v12;
  v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
LABEL_26:
  if (v14)
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v17 - (_QWORD)v14);
  *(_QWORD *)(a1 + 8) = v12;
}

_QWORD *std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result;
  v3 = result[1];
  v4 = (v3 - *result) >> 5;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (_QWORD *)std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::__append((uint64_t)result, v6);
  if (!v5)
  {
    v7 = *result + 32 * a2;
    if (v3 != v7)
    {
      v8 = result[1];
      do
      {
        v10 = *(_QWORD *)(v8 - 32);
        v8 -= 32;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 24) = v9;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 8) + 40))(*(_QWORD *)(v3 - 8), v9, *(_QWORD *)(v3 - 16) - v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    v2[1] = v7;
  }
  return result;
}

geo::codec::Allocator *std::vector<geo::codec::ModelNode,geo::StdAllocator<geo::codec::ModelNode,geo::codec::Allocator>>::resize(geo::codec::Allocator *result, unint64_t a2)
{
  geo::codec::Allocator *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v24;
  geo::codec::Allocator *v25;
  geo::codec::Allocator *v26;
  uint64_t i;
  unint64_t v28;
  uint64_t v29;
  geo::codec::Allocator *v31;
  geo::codec::Allocator *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _QWORD *v44;
  _QWORD *v45;

  v3 = result;
  v4 = *(_QWORD *)result;
  v5 = *((_QWORD *)result + 1);
  v6 = 0x8E38E38E38E38E39 * ((v5 - *(_QWORD *)result) >> 4);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      for (i = v4 + 144 * a2;
            v5 != i;
            result = (geo::codec::Allocator *)geo::StdAllocator<geo::codec::ModelNode,geo::codec::Allocator>::destroy(v5))
      {
        v5 -= 144;
      }
      *((_QWORD *)v3 + 1) = i;
    }
  }
  else
  {
    v8 = *((_QWORD *)result + 2);
    if (0x8E38E38E38E38E39 * ((v8 - v5) >> 4) < v7)
    {
      v9 = 0x1C71C71C71C71C7;
      if (a2 > 0x1C71C71C71C71C7)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v10 = 0x8E38E38E38E38E39 * ((v8 - v4) >> 4);
      v11 = 2 * v10;
      if (2 * v10 <= a2)
        v11 = a2;
      v12 = *((_QWORD *)result + 3);
      if (v10 < 0xE38E38E38E38E3)
        v9 = v11;
      v13 = 144 * v9;
      result = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 144 * v9, 8);
      v14 = 144 * v6;
      v15 = (_QWORD *)((char *)result + 144 * v6);
      v16 = (_QWORD *)((char *)result + v13);
      v45 = (_QWORD *)((char *)result + v13);
      v17 = (_QWORD *)((char *)result + 144 * a2);
      v18 = 144 * a2 - v14;
      __asm { FMOV            V0.4S, #1.0 }
      v42 = _Q0;
      v24 = v15;
      do
      {
        if (v24)
        {
          *((_OWORD *)v24 + 7) = 0u;
          *((_OWORD *)v24 + 8) = 0u;
          *((_OWORD *)v24 + 5) = 0u;
          *((_OWORD *)v24 + 6) = 0u;
          *((_OWORD *)v24 + 3) = 0u;
          *((_OWORD *)v24 + 4) = 0u;
          *((_OWORD *)v24 + 1) = 0u;
          *((_OWORD *)v24 + 2) = 0u;
          *(_OWORD *)v24 = 0u;
          v25 = (geo::codec::Allocator *)geo::codec::Allocator::instance(result);
          v24[3] = v25;
          v24[4] = 0;
          v24[5] = 0;
          v24[6] = 0;
          v26 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v25);
          v24[7] = v26;
          v24[8] = 0;
          v24[9] = 0;
          v24[10] = 0;
          result = (geo::codec::Allocator *)geo::codec::Allocator::instance(v26);
          v24[11] = result;
          v24[12] = 0;
          v24[13] = 0;
          v24[14] = 0;
          *(_OWORD *)(v24 + 15) = v42;
        }
        v24 += 18;
        v18 -= 144;
      }
      while (v18);
      v44 = v17;
      v34 = *(_QWORD *)v3;
      v33 = *((_QWORD *)v3 + 1);
      if (v33 == *(_QWORD *)v3)
      {
        v40 = *((_QWORD *)v3 + 1);
      }
      else
      {
        v35 = 0;
        do
        {
          std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector(&v15[v35 / 8 - 18], (uint64_t *)(v33 + v35 - 144));
          std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector(&v15[v35 / 8 - 14], (uint64_t *)(v33 + v35 - 112));
          v36 = &v15[v35 / 8];
          result = (geo::codec::Allocator *)std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector(&v15[v35 / 8 - 10], (uint64_t *)(v33 + v35 - 80));
          v37 = *(_QWORD *)(v33 + v35 - 48);
          *((_DWORD *)v36 - 10) = *(_DWORD *)(v33 + v35 - 40);
          *(v36 - 6) = v37;
          v38 = *(_QWORD *)(v33 + v35 - 36);
          *((_DWORD *)v36 - 7) = *(_DWORD *)(v33 + v35 - 28);
          *(_QWORD *)((char *)v36 - 36) = v38;
          *((_DWORD *)v36 - 6) = *(_DWORD *)(v33 + v35 - 24);
          v39 = *(_QWORD *)(v33 + v35 - 20);
          *((_DWORD *)v36 - 3) = *(_DWORD *)(v33 + v35 - 12);
          *(_QWORD *)((char *)v36 - 20) = v39;
          LOWORD(v39) = *(_WORD *)(v33 + v35 - 8);
          *((_BYTE *)v36 - 6) = *(_BYTE *)(v33 + v35 - 6);
          *((_WORD *)v36 - 4) = v39;
          v35 -= 144;
        }
        while (v33 + v35 != v34);
        v40 = *(_QWORD *)v3;
        v33 = *((_QWORD *)v3 + 1);
        v15 = (_QWORD *)((char *)v15 + v35);
        v17 = v44;
        v16 = v45;
      }
      *(_QWORD *)v3 = v15;
      *((_QWORD *)v3 + 1) = v17;
      v41 = *((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = v16;
      if (v33 == v40)
      {
        v40 = v33;
        if (!v33)
          return result;
      }
      else
      {
        do
        {
          v33 -= 144;
          result = (geo::codec::Allocator *)geo::StdAllocator<geo::codec::ModelNode,geo::codec::Allocator>::destroy(v33);
        }
        while (v33 != v40);
        if (!v40)
          return result;
      }
      return (geo::codec::Allocator *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v3 + 3) + 40))(*((_QWORD *)v3 + 3), v40, v41 - v40);
    }
    v28 = v5 + 144 * v7;
    v29 = 144 * a2 - 16 * ((v5 - *(_QWORD *)result) >> 4);
    __asm { FMOV            V0.4S, #1.0 }
    v43 = _Q0;
    do
    {
      if (v5)
      {
        *(_OWORD *)(v5 + 112) = 0u;
        *(_OWORD *)(v5 + 128) = 0u;
        *(_OWORD *)(v5 + 80) = 0u;
        *(_OWORD *)(v5 + 96) = 0u;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)(v5 + 64) = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        *(_OWORD *)(v5 + 32) = 0u;
        *(_OWORD *)v5 = 0u;
        v31 = (geo::codec::Allocator *)geo::codec::Allocator::instance(result);
        *(_QWORD *)(v5 + 24) = v31;
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 40) = 0;
        *(_QWORD *)(v5 + 48) = 0;
        v32 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v31);
        *(_QWORD *)(v5 + 56) = v32;
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
        *(_QWORD *)(v5 + 80) = 0;
        result = (geo::codec::Allocator *)geo::codec::Allocator::instance(v32);
        *(_QWORD *)(v5 + 88) = result;
        *(_QWORD *)(v5 + 96) = 0;
        *(_QWORD *)(v5 + 104) = 0;
        *(_QWORD *)(v5 + 112) = 0;
        *(_OWORD *)(v5 + 120) = v43;
      }
      v5 += 144;
      v29 -= 144;
    }
    while (v29);
    *((_QWORD *)v3 + 1) = v28;
  }
  return result;
}

geo::codec::AssetLodInstance *geo::codec::AssetLodInstance::AssetLodInstance(geo::codec::AssetLodInstance *this)
{
  geo::codec::Allocator *v2;
  geo::codec::Allocator *v3;
  geo::codec::Allocator *v4;
  geo::codec::Allocator *v5;
  geo::codec::Allocator *v6;
  geo::codec::Allocator *v7;
  geo::codec::Allocator *v8;
  geo::codec::Allocator *v9;
  geo::codec::Allocator *v10;
  geo::codec::Allocator *v11;
  geo::codec::Allocator *v12;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v2 = (geo::codec::Allocator *)geo::codec::Allocator::instance(this);
  *((_QWORD *)this + 3) = v2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 1065353216;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v3 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v2);
  *((_QWORD *)this + 11) = v3;
  *((_QWORD *)this + 12) = 0;
  v4 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v3);
  *((_QWORD *)this + 13) = v4;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  v5 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v4);
  *((_QWORD *)this + 19) = v5;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  v6 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v5);
  *((_QWORD *)this + 23) = v6;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  v7 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v6);
  *((_QWORD *)this + 27) = v7;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  v8 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v7);
  *((_QWORD *)this + 31) = v8;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  v9 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v8);
  *((_QWORD *)this + 35) = v9;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  v10 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v9);
  *((_QWORD *)this + 39) = v10;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  v11 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v10);
  *((_QWORD *)this + 43) = v11;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  v12 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v11);
  *((_QWORD *)this + 47) = v12;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = geo::codec::Allocator::instance(v12);
  return this;
}

uint64_t geo::codec::AssetDecoder::applyTransforms(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t *v43;

  v3 = *(_QWORD *)result;
  v2 = *(_QWORD *)(result + 8);
  if (v2 == *(_QWORD *)result || !a2[1])
    return result;
  v5 = (uint64_t *)result;
  v6 = 0;
  v43 = (uint64_t *)result;
  while (2)
  {
    v8 = a2[1];
    if (!v8)
      goto LABEL_7;
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = (unsigned __int16)v6;
      if (v8 <= (unsigned __int16)v6)
        v10 = (unsigned __int16)v6 % v8;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & (unsigned __int16)v6;
    }
    v11 = *(uint64_t ****)(*a2 + 8 * v10);
    if (!v11)
      goto LABEL_7;
    v12 = *v11;
    if (!*v11)
      goto LABEL_7;
    v13 = v8 - 1;
    if (v9.u32[0] < 2uLL)
    {
      while (1)
      {
        v14 = v12[1];
        if (v14 == (uint64_t *)(unsigned __int16)v6)
        {
          if (*((unsigned __int16 *)v12 + 8) == (unsigned __int16)v6)
            goto LABEL_29;
        }
        else if (((unint64_t)v14 & v13) != v10)
        {
          goto LABEL_7;
        }
        v12 = (uint64_t **)*v12;
        if (!v12)
          goto LABEL_7;
      }
    }
    while (1)
    {
      v15 = (unint64_t)v12[1];
      if (v15 == (unsigned __int16)v6)
        break;
      if (v15 >= v8)
      {
        result = v15 / v8;
        v15 %= v8;
      }
      if (v15 != v10)
        goto LABEL_7;
LABEL_23:
      v12 = (uint64_t **)*v12;
      if (!v12)
        goto LABEL_7;
    }
    if (*((unsigned __int16 *)v12 + 8) != (unsigned __int16)v6)
      goto LABEL_23;
LABEL_29:
    if (v9.u32[0] > 1uLL)
    {
      v16 = (unsigned __int16)v6;
      if (v8 <= (unsigned __int16)v6)
        v16 = (unsigned __int16)v6 % v8;
    }
    else
    {
      v16 = ((_DWORD)v8 - 1) & (unsigned __int16)v6;
    }
    v17 = *(uint64_t ***)(*a2 + 8 * v16);
    if (!v17 || (v18 = *v17) == 0)
LABEL_67:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v9.u32[0] < 2uLL)
    {
      while (1)
      {
        v19 = v18[1];
        if (v19 == (unsigned __int16)v6)
        {
          if (*((unsigned __int16 *)v18 + 8) == (unsigned __int16)v6)
            goto LABEL_41;
        }
        else if ((v19 & v13) != v16)
        {
          goto LABEL_67;
        }
        v18 = (uint64_t *)*v18;
        if (!v18)
          goto LABEL_67;
      }
    }
    while (2)
    {
      v31 = v18[1];
      if (v31 != (unsigned __int16)v6)
      {
        if (v31 >= v8)
          v31 %= v8;
        if (v31 != v16)
          goto LABEL_67;
        goto LABEL_53;
      }
      if (*((unsigned __int16 *)v18 + 8) != (unsigned __int16)v6)
      {
LABEL_53:
        v18 = (uint64_t *)*v18;
        if (!v18)
          goto LABEL_67;
        continue;
      }
      break;
    }
LABEL_41:
    v20 = (uint64_t *)(v3 + 152 * v6);
    v22 = *v20;
    v21 = v20[1];
    result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
    v23 = result;
    if (v21 == v22)
    {
      v29 = *(unsigned int *)(v3 + 152 * v6 + 148);
      if ((_DWORD)v29)
      {
        v27 = 0;
        v30 = 0;
        goto LABEL_61;
      }
    }
    else
    {
      if (v21 - v22 < 0)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v22) >> 2);
      v25 = (v24 - 1) >> 6;
      v42 = 8 * (v25 + 1);
      v26 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      v27 = v26;
      if (v24 >= 0x41)
        v28 = (v24 - 1) >> 6;
      else
        v28 = 0;
      v26[v28] = 0;
      if (v24 >= 0x40)
        bzero(v26, 8 * (v24 >> 6));
      if ((v24 & 0x3F) != 0)
        v27[v24 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 & 0x3F));
      v29 = *(unsigned int *)(v3 + 152 * v6 + 148);
      if ((_DWORD)v29)
      {
        v30 = v25 + 1;
        v5 = v43;
LABEL_61:
        v32 = *(_DWORD *)(v3 + 152 * v6 + 144);
        v33 = v20[12];
        do
        {
          v34 = *(unsigned __int16 *)(v33 + 2 * v32);
          v35 = v34 >> 6;
          v36 = 1 << v34;
          v37 = v27[v34 >> 6];
          if (((1 << v34) & v37) == 0)
          {
            v38 = (float *)(*v20 + 12 * *(unsigned __int16 *)(v33 + 2 * v32));
            v39 = v38[1];
            v40 = v38[2];
            v41 = (float)((float)((float)(*((float *)v18 + 7) * *v38) + (float)(*((float *)v18 + 11) * v39))
                        + (float)(*((float *)v18 + 15) * v40))
                + *((float *)v18 + 19);
            *(float32x2_t *)v38 = vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)((char *)v18 + 20), *v38), *(float32x2_t *)((char *)v18 + 36), v39), *(float32x2_t *)((char *)v18 + 52), v40), *(float32x2_t *)((char *)v18 + 68));
            v38[2] = v41;
            v27[v35] = v36 | v37;
          }
          ++v32;
          --v29;
        }
        while (v29);
        v7 = 8 * v30;
      }
      else
      {
        v5 = v43;
        v7 = v42;
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v23 + 40))(v23, v27, v7);
    }
    v3 = *v5;
    v2 = v5[1];
LABEL_7:
    if (0x86BCA1AF286BCA1BLL * ((v2 - v3) >> 3) > ++v6)
      continue;
    return result;
  }
}

uint64_t std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD **)(result + 8);
  v6 = (uint64_t)v4 - *(_QWORD *)result;
  v7 = v6 >> 3;
  v8 = a2 - (v6 >> 3);
  if (a2 <= v6 >> 3)
  {
    if (a2 >= v6 >> 3)
      return result;
    v16 = (_QWORD *)(v5 + 8 * a2);
LABEL_15:
    *(_QWORD *)(result + 8) = v16;
    return result;
  }
  v9 = *(_QWORD *)(result + 16);
  if (v8 <= (v9 - (uint64_t)v4) >> 3)
  {
    v16 = &v4[v8];
    v17 = 8 * a2 - 8 * v7;
    do
    {
      if (v4)
        *v4 = 0;
      ++v4;
      v17 -= 8;
    }
    while (v17);
    goto LABEL_15;
  }
  if (a2 >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v10 = v9 - v5;
  v11 = (v9 - v5) >> 2;
  if (v11 <= a2)
    v11 = a2;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v11;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v12, 8);
  v13 = (_QWORD *)(result + 8 * v7);
  v14 = 8 * a2 - 8 * v7;
  v15 = v13;
  do
  {
    if (v15)
      *v15 = 0;
    ++v15;
    v14 -= 8;
  }
  while (v14);
  v18 = *(_QWORD *)v3;
  v19 = *(_QWORD *)(v3 + 8);
  if (v19 != *(_QWORD *)v3)
  {
    v20 = v19 - *(_QWORD *)v3 - 8;
    if (v20 < 0x58)
      goto LABEL_33;
    if ((unint64_t)(v19 - (v6 + result)) < 0x20)
      goto LABEL_33;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = v19 - v22;
    v13 = (_QWORD *)((char *)v13 - v22);
    v24 = (_OWORD *)(result + 8 * v7 - 16);
    v25 = (__int128 *)(v19 - 16);
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    v19 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_33:
      do
      {
        v28 = *(_QWORD *)(v19 - 8);
        v19 -= 8;
        *--v13 = v28;
      }
      while (v19 != v18);
    }
  }
  *(_QWORD *)v3 = v13;
  *(_QWORD *)(v3 + 8) = result + 8 * a2;
  v29 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = result + 8 * v12;
  if (v18)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v18, v29 - v18);
  return result;
}

void std::vector<std::shared_ptr<geo::codec::AssetLodInstance>,geo::StdAllocator<std::shared_ptr<geo::codec::AssetLodInstance>,geo::codec::Allocator>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
    v4 = 16 * a2;
    v5 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * a2, 8);
    v6 = v5 + v3;
    v7 = v5 + v4;
    v8 = *(_QWORD **)a1;
    v9 = *(_QWORD **)(a1 + 8);
    if (v9 == *(_QWORD **)a1)
    {
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      v13 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v10 = v5 + v3;
      do
      {
        v11 = *((_OWORD *)v9 - 1);
        v9 -= 2;
        *(_OWORD *)(v10 - 16) = v11;
        v10 -= 16;
        *v9 = 0;
        v9[1] = 0;
      }
      while (v9 != v8);
      v9 = *(_QWORD **)a1;
      v12 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v6;
      v13 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      while (v12 != v9)
      {
        v14 = (std::__shared_weak_count *)*(v12 - 1);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 2;
      }
    }
    if (v9)
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v9, v13 - (_QWORD)v9);
  }
}

uint64_t std::vector<geo::codec::Asset::LodInfo,geo::StdAllocator<geo::codec::Asset::LodInfo,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v3 = result;
  v4 = *(_DWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 2)
  {
    if (a2)
    {
      v11 = 4 * a2;
      v12 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        v11 -= 4;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)result;
    v7 = v6 >> 2;
    v8 = (v6 >> 2) + a2;
    if (v8 >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)result;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * v10, 2);
    else
      result = 0;
    v13 = (_DWORD *)(result + 4 * v7);
    v14 = 4 * a2;
    v15 = &v13[a2];
    v16 = v13;
    do
    {
      if (v16)
        *v16 = 0;
      ++v16;
      v14 -= 4;
    }
    while (v14);
    v18 = *(_QWORD *)v3;
    v17 = *(_QWORD *)(v3 + 8);
    if (v17 != *(_QWORD *)v3)
    {
      v19 = v17 - *(_QWORD *)v3 - 4;
      if (v19 < 0x2C)
        goto LABEL_36;
      if ((unint64_t)(v17 - (v6 + result)) < 0x20)
        goto LABEL_36;
      v20 = (v19 >> 2) + 1;
      v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      v22 = v17 - v21;
      v13 = (_DWORD *)((char *)v13 - v21);
      v23 = (_OWORD *)(result + 4 * v7 - 16);
      v24 = (__int128 *)(v17 - 16);
      v25 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 8;
      }
      while (v25);
      v17 = v22;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_36:
        do
        {
          v27 = *(_DWORD *)(v17 - 4);
          v17 -= 4;
          *--v13 = v27;
        }
        while (v17 != v18);
      }
      v17 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v15;
    v28 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 4 * v10;
    if (v17)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v28 - v17);
  }
  return result;
}

uint64_t std::vector<VertexFormat,geo::StdAllocator<VertexFormat,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD **)(result + 8);
  v6 = (uint64_t)v4 - *(_QWORD *)result;
  v7 = v6 >> 3;
  v8 = a2 - (v6 >> 3);
  if (a2 <= v6 >> 3)
  {
    if (a2 >= v6 >> 3)
      return result;
    v16 = (_QWORD *)(v5 + 8 * a2);
LABEL_15:
    *(_QWORD *)(result + 8) = v16;
    return result;
  }
  v9 = *(_QWORD *)(result + 16);
  if (v8 <= (v9 - (uint64_t)v4) >> 3)
  {
    v16 = &v4[v8];
    v17 = 8 * a2 - 8 * v7;
    do
    {
      if (v4)
        *v4 = 0;
      ++v4;
      v17 -= 8;
    }
    while (v17);
    goto LABEL_15;
  }
  if (a2 >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v10 = v9 - v5;
  v11 = (v9 - v5) >> 2;
  if (v11 <= a2)
    v11 = a2;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v11;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v12, 2);
  v13 = (_QWORD *)(result + 8 * v7);
  v14 = 8 * a2 - 8 * v7;
  v15 = v13;
  do
  {
    if (v15)
      *v15 = 0;
    ++v15;
    v14 -= 8;
  }
  while (v14);
  v19 = *(_QWORD *)v3;
  v18 = *(_QWORD *)(v3 + 8);
  if (v18 != *(_QWORD *)v3)
  {
    v20 = v18 - *(_QWORD *)v3 - 8;
    if (v20 < 0x58)
      goto LABEL_34;
    if ((unint64_t)(v18 - (v6 + result)) < 0x20)
      goto LABEL_34;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = v18 - v22;
    v13 = (_QWORD *)((char *)v13 - v22);
    v24 = (_OWORD *)(result + 8 * v7 - 16);
    v25 = (__int128 *)(v18 - 16);
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    v18 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v28 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *--v13 = v28;
      }
      while (v18 != v19);
    }
    v18 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v13;
  *(_QWORD *)(v3 + 8) = result + 8 * a2;
  v29 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = result + 8 * v12;
  if (v18)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v18, v29 - v18);
  return result;
}

geo::codec::Asset *geo::codec::Asset::Asset(geo::codec::Asset *this)
{
  geo::codec::Allocator *v2;
  geo::codec::Allocator *v3;
  geo::codec::Allocator *v4;
  geo::codec::Allocator *v5;
  geo::codec::Allocator *v6;
  geo::codec::Allocator *v7;
  uint64_t v8;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v2 = (geo::codec::Allocator *)geo::codec::Allocator::instance(this);
  *((_QWORD *)this + 6) = v2;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v3 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v2);
  *((_QWORD *)this + 10) = v3;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v4 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v3);
  *((_QWORD *)this + 14) = v4;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  v5 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v4);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = v5;
  v6 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v5);
  *((_QWORD *)this + 21) = v6;
  *((_QWORD *)this + 22) = 0;
  v7 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v6);
  *((_QWORD *)this + 23) = v7;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 50) = 1065353216;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 26) = 0;
  v8 = geo::codec::Allocator::instance(v7);
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = v8;
  *((_QWORD *)this + 30) = (char *)this + 248;
  *((_BYTE *)this + 300) = 0;
  return this;
}

uint64_t ___ZN3ggl11Performance8Counters8instanceEv_block_invoke()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  float v12;
  int v13;
  unsigned int v14;
  const char *v15;
  size_t v16;
  std::string::size_type v17;
  void *p_info;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string info;

  v0 = operator new();
  *(_BYTE *)(v0 + 52) = 0;
  mach_timebase_info((mach_timebase_info_t)&info);
  LODWORD(v2) = HIDWORD(info.__r_.__value_.__r.__words[0]);
  LODWORD(v1) = info.__r_.__value_.__l.__data_;
  *(float *)&v1 = (double)v1 * 0.000001 / (double)v2;
  *(_DWORD *)(v0 + 56) = v1;
  *(float *)(v0 + 60) = 1.0 / *(float *)&v1;
  v3 = (_OWORD *)operator new[]();
  v4 = v3 + 451;
  *v3 = xmmword_19FFB6300;
  v5 = v3 + 1;
  v6 = v5;
  do
  {
    v6[2] = 0uLL;
    v6[3] = 0uLL;
    *v6 = 0uLL;
    v6[1] = 0uLL;
    *((_QWORD *)v6 + 8) = 0x100000000;
    v6 = (_OWORD *)((char *)v6 + 72);
  }
  while (v6 != v4);
  *(_QWORD *)(v0 + 16) = v5;
  v7 = operator new[]();
  *(_QWORD *)(v0 + 32) = v7;
  *(_DWORD *)(v0 + 40) = 100;
  v8 = operator new[]();
  *(_OWORD *)v8 = xmmword_19FFB6310;
  bzero((void *)(v8 + 16), 0x300uLL);
  v9 = 0;
  *(_QWORD *)(v0 + 24) = v8 + 16;
  *(_QWORD *)(v0 + 44) = 0xFFFFFFFF00000020;
  do
  {
    atomic_store(0, (unint64_t *)(v7 + v9));
    v9 += 8;
  }
  while (v9 != 800);
  *((_BYTE *)&info.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&info, "GeoGL");
  std::string::operator=((std::string *)(v8 + 40), &info);
  if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
    operator delete(info.__r_.__value_.__l.__data_);
  *((_BYTE *)&info.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&info, "VectorKit");
  std::string::operator=((std::string *)(v8 + 64), &info);
  if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
    operator delete(info.__r_.__value_.__l.__data_);
  *((_BYTE *)&info.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&info, "Flyover");
  std::string::operator=((std::string *)(v8 + 88), &info);
  if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
    operator delete(info.__r_.__value_.__l.__data_);
  v10 = 0;
  v11 = &dword_1E42FABD0;
  do
  {
    v12 = *(float *)v11;
    if (((0x7FE01uLL >> v10) & 1) != 0)
      v12 = *(float *)(v0 + 60) * v12;
    v13 = *((unsigned __int8 *)v11 - 16);
    v14 = *(v11 - 3);
    v15 = (const char *)*((_QWORD *)v11 - 1);
    v16 = strlen(v15);
    if (v16 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v17 = v16;
    if (v16 >= 0x17)
    {
      v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v19 = v16 | 7;
      v20 = v19 + 1;
      p_info = operator new(v19 + 1);
      info.__r_.__value_.__l.__size_ = v17;
      info.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      info.__r_.__value_.__r.__words[0] = (std::string::size_type)p_info;
LABEL_22:
      memmove(p_info, v15, v17);
      goto LABEL_23;
    }
    *((_BYTE *)&info.__r_.__value_.__s + 23) = v16;
    p_info = &info;
    if (v16)
      goto LABEL_22;
LABEL_23:
    *((_BYTE *)p_info + v17) = 0;
    v21 = *(_QWORD *)(v0 + 16);
    v22 = v21 + 72 * v14;
    v24 = *(_DWORD *)(v22 + 60);
    v23 = (int *)(v22 + 60);
    if (v24)
    {
      if ((SHIBYTE(info.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_25;
    }
    else
    {
      v27 = v11[1];
      v28 = v21 + 72 * v14;
      std::string::operator=((std::string *)v28, &info);
      v30 = *(_DWORD *)(v28 + 64);
      v29 = (_DWORD *)(v28 + 64);
      *(v29 - 2) = v13;
      *v23 = v27;
      *((_QWORD *)v29 - 3) = 1;
      if (v30)
      {
        v31 = v21 + 72 * v14;
        v34 = *(_QWORD **)(v31 + 48);
        v33 = (_QWORD *)(v31 + 48);
        v32 = v34;
        if (v34)
        {
          if (*v32)
            MEMORY[0x1A1AF4DE8](*v32, 0x1000C8000313F17);
          MEMORY[0x1A1AF4E00](v32, 0x20C40960023A9);
          *v33 = 0;
        }
        *v29 = 0;
      }
      *(_DWORD *)(v21 + 72 * v14 + 68) = 1;
      *(_BYTE *)(v0 + 52) = 1;
      if ((SHIBYTE(info.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if (!*v23)
          goto LABEL_27;
LABEL_26:
        *(_QWORD *)(v21 + 72 * v14 + 40) = (unint64_t)v12;
        goto LABEL_27;
      }
    }
    operator delete(info.__r_.__value_.__l.__data_);
    if (*v23)
      goto LABEL_26;
LABEL_27:
    result = ggl::Performance::Counters::setDisplayMode(v0, v14, v11[3]);
    v26 = *(_QWORD *)(v0 + 16);
    if (*(_DWORD *)(v26 + 72 * v14 + 60))
      *(_DWORD *)(v26 + 72 * v14 + 68) = 1;
    ++v10;
    v11 += 10;
  }
  while (v10 != 25);
  ggl::Performance::Counters::instance(void)::counters = v0;
  return result;
}

void std::__function::__func<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_1,std::allocator<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[7];
  char v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)v6 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LabelsAnimationFired", (const char *)&unk_1A0189141, v6, 2u);
  }

  v3 = atomic_load((unsigned __int8 *)(v1 + 3058));
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(v1 + 136);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 56);
      if (v5)
      {
        v8 = v1;
        v7 = 9;
        (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v5 + 48))(v5, &v8, &v7);
      }
    }
  }
}

void md::LabelManager::queueCommand(md::LabelManager *this, int a2, int a3, _QWORD *a4)
{
  std::mutex *v4;
  std::__shared_weak_count *v5;
  BOOL v8;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  _Unwind_Exception *v53;
  _Unwind_Exception *v54;
  void *v55;
  __int128 v56;
  char v57;

  if (*((_QWORD *)this + 23))
    v8 = a2 == 21;
  else
    v8 = 1;
  if (!v8 && a2 != 2)
  {
    md::LabelManager::flushCommands(this);
    v14 = a4[3];
    if (!v14)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      v54 = v53;
      std::__shared_weak_count::~__shared_weak_count(v5);
      operator delete(v55);
      std::mutex::unlock(v4);
      _Unwind_Resume(v54);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
    return;
  }
  std::mutex::lock((std::mutex *)((char *)this + 3176));
  if (a3 == 1)
  {
    v12 = (unsigned __int8 **)*((_QWORD *)this + 405);
    v13 = (unsigned __int8 **)*((_QWORD *)this + 406);
    if (v12 != v13)
    {
      while (**v12 != a2)
      {
        v12 += 2;
        if (v12 == v13)
          goto LABEL_39;
      }
      if (v12 == v13 || (v15 = v12 + 2, v12 + 2 == v13))
      {
        v16 = v12;
        if (v12 == v13)
          goto LABEL_39;
        goto LABEL_32;
      }
      v16 = v12;
      do
      {
        v17 = v15;
        v18 = v12[2];
        if (*v18 != a2)
        {
          v19 = v12[3];
          *v17 = 0;
          v17[1] = 0;
          v20 = (std::__shared_weak_count *)v16[1];
          *v16 = v18;
          v16[1] = v19;
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v16 += 2;
        }
        v15 = v17 + 2;
        v12 = v17;
      }
      while (v17 + 2 != v13);
      v13 = (unsigned __int8 **)*((_QWORD *)this + 406);
      if (v16 != v13)
      {
LABEL_32:
        while (v13 != v16)
        {
          v23 = (std::__shared_weak_count *)*(v13 - 1);
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v13 -= 2;
        }
        *((_QWORD *)this + 406) = v16;
      }
    }
  }
LABEL_39:
  v26 = (std::__shared_weak_count *)operator new(0x40uLL);
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC190;
  LOBYTE(v26[1].__vftable) = a2;
  v27 = a4[3];
  if (!v27)
  {
LABEL_42:
    v26[2].__shared_owners_ = v27;
    goto LABEL_44;
  }
  if ((_QWORD *)v27 != a4)
  {
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
    goto LABEL_42;
  }
  v26[2].__shared_owners_ = (uint64_t)&v26[1].__shared_owners_;
  (*(void (**)(_QWORD *))(*a4 + 24))(a4);
LABEL_44:
  *(_QWORD *)&v56 = v26 + 1;
  *((_QWORD *)&v56 + 1) = v26;
  v28 = (_QWORD *)*((_QWORD *)this + 406);
  v29 = *((_QWORD *)this + 407);
  if ((unint64_t)v28 >= v29)
  {
    v30 = *((_QWORD *)this + 405);
    v31 = ((uint64_t)v28 - v30) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      abort();
    v33 = v29 - v30;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 408) + 16))(*((_QWORD *)this + 408), 16 * v34, 8);
      v36 = (_OWORD *)(v35 + 16 * v31);
      v37 = v35 + 16 * v34;
      if (v35)
      {
        *v36 = v56;
        v56 = 0uLL;
      }
    }
    else
    {
      v37 = 0;
      v36 = (_OWORD *)(16 * v31);
    }
    v38 = v36 + 1;
    v39 = (_QWORD *)*((_QWORD *)this + 406);
    v40 = (_QWORD *)*((_QWORD *)this + 405);
    if (v39 == v40)
    {
      *((_QWORD *)this + 405) = v36;
      *((_QWORD *)this + 406) = v38;
      v43 = *((_QWORD *)this + 407);
      *((_QWORD *)this + 407) = v37;
    }
    else
    {
      do
      {
        v41 = *((_OWORD *)v39 - 1);
        v39 -= 2;
        *--v36 = v41;
        *v39 = 0;
        v39[1] = 0;
      }
      while (v39 != v40);
      v39 = (_QWORD *)*((_QWORD *)this + 405);
      v42 = (_QWORD *)*((_QWORD *)this + 406);
      *((_QWORD *)this + 405) = v36;
      *((_QWORD *)this + 406) = v38;
      v43 = *((_QWORD *)this + 407);
      *((_QWORD *)this + 407) = v37;
      while (v42 != v39)
      {
        v44 = (std::__shared_weak_count *)*(v42 - 1);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v42 -= 2;
      }
    }
    if (v39)
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 408) + 40))(*((_QWORD *)this + 408), v39, v43 - (_QWORD)v39);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    *((_QWORD *)this + 406) = v38;
    if (!v26)
      goto LABEL_77;
  }
  else
  {
    if (v28)
    {
      *v28 = v26 + 1;
      v28[1] = v26;
      v56 = 0uLL;
      v26 = 0;
    }
    *((_QWORD *)this + 406) = v28 + 2;
    if (!v26)
      goto LABEL_77;
  }
  v47 = (unint64_t *)&v26->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_77:
  v49 = *((_QWORD *)this + 406) - *((_QWORD *)this + 405);
  atomic_store(0, (unsigned __int8 *)this + 3390);
  std::mutex::unlock((std::mutex *)((char *)this + 3176));
  v50 = atomic_load((unsigned __int8 *)this + 3058);
  if ((v50 & 1) != 0)
  {
    v51 = *((_QWORD *)this + 17);
    if (v51)
    {
      v52 = *(_QWORD *)(v51 + 56);
      if (v52)
      {
        *(_QWORD *)&v56 = this;
        v57 = 9;
        (*(void (**)(uint64_t, __int128 *, char *))(*(_QWORD *)v52 + 48))(v52, &v56, &v57);
      }
    }
  }
  if (v49 >= 0x191
    && !*((_BYTE *)this + 3055)
    && !*((_BYTE *)this + 3385)
    && !*((_BYTE *)this + 3384)
    && std::recursive_mutex::try_lock((std::recursive_mutex *)((char *)this + 24)))
  {
    md::LabelManager::flushCommands(this);
    std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 24));
  }
}

void md::LabelManager::flushCommands(md::LabelManager *this)
{
  unsigned __int8 v1;
  md::LabelManager *v2;
  unsigned __int8 v3;
  float *v4;
  uint64_t v5;
  md::LabelManager *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;

  v1 = atomic_load((unsigned __int8 *)this + 3390);
  if ((v1 & 1) == 0)
  {
    v2 = this;
    v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
    if ((v3 & 1) == 0)
    {
LABEL_20:
      {
        v12 = operator new();
        *((_QWORD *)v4 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v12, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    v5 = *((_QWORD *)v4 + 299);
    std::mutex::lock((std::mutex *)((char *)v2 + 3176));
    v4 = (float *)*((_QWORD *)v2 + 405);
    v6 = (md::LabelManager *)*((_QWORD *)v2 + 406);
    *(_OWORD *)((char *)v2 + 3240) = 0u;
    v7 = *((_QWORD *)v2 + 407);
    *((_QWORD *)v2 + 407) = 0;
    atomic_store(1u, (unsigned __int8 *)v2 + 3390);
    std::mutex::unlock((std::mutex *)((char *)v2 + 3176));
    if (v4 == (float *)v6)
    {
      if (!v4)
        return;
    }
    else
    {
      v2 = (md::LabelManager *)v4;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)v2 + 32);
        if (!v8)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          goto LABEL_20;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
        v2 = (md::LabelManager *)((char *)v2 + 16);
      }
      while (v2 != v6);
      if (!v4)
        return;
      do
      {
        v9 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v6 = (md::LabelManager *)((char *)v6 - 16);
      }
      while (v6 != (md::LabelManager *)v4);
    }
    (*(void (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v5 + 40))(v5, v4, v7 - (_QWORD)v4);
  }
}

void sub_19F26E4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t md::LabelManager::layoutForStaging(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  gss::Allocator *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  void *p_p;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t result;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  size_t v84;
  _DWORD *v85;
  __int128 *p_dst;
  size_t v87;
  _DWORD *v88;
  size_t v89;
  _DWORD *v90;
  size_t v91;
  _DWORD *v92;
  size_t v93;
  _DWORD *v94;
  size_t v95;
  _DWORD *v96;
  size_t v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  __int128 *v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *__p;
  _QWORD *v112;
  _QWORD *v113;
  void (**v114)(md::StyleSettingsObjectNode *__hidden);
  uint64_t v115;
  char *v116;
  char v117;
  std::string v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  _QWORD v121[2];
  unsigned __int8 v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  __int128 v127;
  int64_t v128;
  __int128 __dst;
  unint64_t v130;

  v4 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(v4 + 136) = 0;
  *(_DWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 88) = 0;
  v5 = *(char **)(v4 + 56);
  v6 = *(char **)(v4 + 64);
  if (v5 != v6)
  {
    v7 = v6 - v5 - 24;
    if (v7 < 0x18)
      goto LABEL_7;
    v8 = v7 / 0x18 + 1;
    v9 = v5;
    v10 = v8 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 3) = 0;
      v9 += 48;
      v10 -= 2;
    }
    while (v10);
    if (v8 != (v8 & 0x1FFFFFFFFFFFFFFELL))
    {
      v5 += 24 * (v8 & 0x1FFFFFFFFFFFFFFELL);
      do
      {
LABEL_7:
        *(_QWORD *)v5 = 0;
        v5 += 24;
      }
      while (v5 != v6);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 432) + 21) || *(_BYTE *)(a1 + 3052))
  {
    if (*(_BYTE *)(a1 + 3051))
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 120))(*(_QWORD *)(a1 + 240));
    *(_BYTE *)(a1 + 3052) = 0;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 336) + 200);
  if (*(_BYTE *)(v11 + 88))
  {
    *(_WORD *)(v11 + 88) = 256;
    v12 = operator new();
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_DWORD *)(v12 + 48) = 0;
    v13 = *(gss::Allocator **)(v11 + 56);
    *(_QWORD *)(v11 + 56) = v12;
    if (v13)
      v13 = (gss::Allocator *)MEMORY[0x1A1AF4E00](v13, 0x1000C40F5825EE8);
    v14 = gss::Allocator::instance(v13);
    v114 = (void (**)(md::StyleSettingsObjectNode *__hidden))v14;
    v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, 8, 4);
    v16 = v15;
    __p = v15;
    v113 = v15 + 1;
    if (v15)
      *v15 = 0x80001004BLL;
    v112 = v15 + 1;
    md::LabelSettingsStyleCache::styleQueryForAttributes(&v123, *(_QWORD *)v11, (uint64_t)&__p);
    if (v16)
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v14 + 40))(v14, v16, 8);
    v17 = v123;
    if (!v123)
      goto LABEL_50;
    v18 = v124;
    if (v124)
    {
      p_shared_owners = (unint64_t *)&v124->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      v120 = v18;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    else
    {
      v120 = 0;
    }
    v121[0] = 0;
    v121[1] = 0;
    v119 = v17;
    v122 = 0;
    v22 = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v17 + 48))(v17, v121);
    v122 = v22;
    if (v18)
    {
      v23 = (unint64_t *)&v18->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v22 = v122;
    }
    if (v22)
    {
      v25 = *(_QWORD *)(v119 + 24);
      v26 = *(unsigned __int8 *)(v25 + 12);
      if (v26 == 2)
      {
        if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v119 + 24), 0x1C7u, 0) & 1) != 0)
          goto LABEL_39;
        v26 = 1;
      }
      if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(v25, 0x1C7u, v26))
      {
LABEL_39:
        gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&v118, 0x1C7u, 1, v25, 0);
        md::StyleSettingsParser::StyleSettingsParser((uint64_t)&__p, (uint64_t)&v118);
        v27 = (_QWORD *)HIBYTE(v113);
        if (SHIBYTE(v113) >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (SHIBYTE(v113) < 0)
          v27 = v112;
        *(_QWORD *)&v127 = p_p;
        *((_QWORD *)&v127 + 1) = v27;
        md::StyleSettingsParser::parseNode((uint64_t)&__p, (uint64_t)&v114, (unsigned __int8 **)&v127);
        if (v117)
          goto LABEL_45;
        HIBYTE(v128) = 9;
        strcpy((char *)&v127, "ring-icon");
        v39 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>((uint64_t)&v115, (const void **)&v127);
        if (&v116 == (char **)v39)
          goto LABEL_45;
        v40 = v39[7];
        if (*(_BYTE *)(v40 + 8) != 1)
          goto LABEL_45;
        v41 = *(_QWORD *)(v11 + 56);
        v126 = 7;
        strcpy((char *)v125, "variant");
        v42 = v40 + 16;
        v43 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v40 + 16, (const void **)v125);
        v44 = (uint64_t *)(v40 + 24);
        if ((uint64_t *)(v40 + 24) == v43)
          goto LABEL_71;
        v45 = v43[7];
        if (*(_BYTE *)(v45 + 8))
          goto LABEL_71;
        v84 = *(_QWORD *)(v45 + 24);
        if (v84 == 4)
        {
          v85 = *(_DWORD **)(v45 + 16);
          if (*v85 == 1819047278)
          {
LABEL_71:
            LOBYTE(v127) = 0;
            goto LABEL_72;
          }
          HIBYTE(v130) = 4;
          p_dst = &__dst;
        }
        else
        {
          if (v84 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          v85 = *(_DWORD **)(v45 + 16);
          if (v84 >= 0x17)
          {
            v99 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v84 | 7) != 0x17)
              v99 = v84 | 7;
            v100 = v99 + 1;
            p_dst = (__int128 *)operator new(v99 + 1);
            *((_QWORD *)&__dst + 1) = v84;
            v130 = v100 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v130) = *(_QWORD *)(v45 + 24);
            p_dst = &__dst;
            if (!v84)
              goto LABEL_125;
          }
        }
        memmove(p_dst, v85, v84);
LABEL_125:
        *((_BYTE *)p_dst + v84) = 0;
        v127 = __dst;
        v128 = v130;
        if (v126 < 0)
          operator delete(v125[0]);
        v101 = HIBYTE(v128);
        v102 = SHIBYTE(v128);
        if (v128 < 0)
          v101 = *((_QWORD *)&v127 + 1);
        if (v101 == 4)
        {
          v103 = (__int128 *)v127;
          if (v128 >= 0)
            v103 = &v127;
          v104 = *(_DWORD *)v103 == 1886351212;
        }
        else
        {
          v104 = 0;
        }
        *(_WORD *)v41 = v104 | 0x100;
        if (v102 < 0)
          operator delete((void *)v127);
LABEL_72:
        HIBYTE(v128) = 10;
        strcpy((char *)&v127, "ring-scale");
        v46 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v42, (const void **)&v127);
        if (v44 == v46 || (v47 = v46[7], *(_BYTE *)(v47 + 8) != 1))
        {
LABEL_84:
          HIBYTE(v128) = 10;
          strcpy((char *)&v127, "text-scale");
          v65 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v42, (const void **)&v127);
          if (v44 == v65)
            goto LABEL_45;
          v66 = v65[7];
          if (*(_BYTE *)(v66 + 8) != 1)
            goto LABEL_45;
          HIBYTE(v128) = 5;
          strcpy((char *)&v127, "delay");
          v67 = v66 + 16;
          v68 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v66 + 16, (const void **)&v127);
          v69 = (uint64_t *)(v66 + 24);
          if (v69 == v68)
            goto LABEL_88;
          v70 = v68[7];
          if (*(_BYTE *)(v70 + 8))
            goto LABEL_88;
          v93 = *(_QWORD *)(v70 + 24);
          if (v93 == 4)
          {
            v94 = *(_DWORD **)(v70 + 16);
            if (*v94 == 1819047278)
            {
LABEL_88:
              v71 = 0;
              v72 = 0;
              v73 = 0;
LABEL_89:
              *(_BYTE *)(v41 + 32) = BYTE4(v72);
              *(_DWORD *)(v41 + 28) = v72 | v71 | v73;
              HIBYTE(v128) = 8;
              strcpy((char *)&v127, "duration");
              v74 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v67, (const void **)&v127);
              if (v69 == v74)
                goto LABEL_91;
              v75 = v74[7];
              if (*(_BYTE *)(v75 + 8))
                goto LABEL_91;
              v95 = *(_QWORD *)(v75 + 24);
              if (v95 == 4)
              {
                v96 = *(_DWORD **)(v75 + 16);
                if (*v96 == 1819047278)
                {
LABEL_91:
                  v76 = 0;
                  v77 = 0;
                  v78 = 0;
LABEL_92:
                  *(_BYTE *)(v41 + 40) = BYTE4(v77);
                  *(_DWORD *)(v41 + 36) = v77 | v76 | v78;
                  HIBYTE(v128) = 5;
                  strcpy((char *)&v127, "start");
                  v79 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v67, (const void **)&v127);
                  if (v69 == v79)
                    goto LABEL_94;
                  v80 = v79[7];
                  if (*(_BYTE *)(v80 + 8))
                    goto LABEL_94;
                  v97 = *(_QWORD *)(v80 + 24);
                  if (v97 == 4)
                  {
                    v98 = *(_DWORD **)(v80 + 16);
                    if (*v98 == 1819047278)
                    {
LABEL_94:
                      v81 = 0;
                      v82 = 0;
                      v83 = 0;
LABEL_95:
                      *(_BYTE *)(v41 + 48) = BYTE4(v82);
                      *(_DWORD *)(v41 + 44) = v82 | v81 | v83;
LABEL_45:
                      v114 = &off_1E429F8B0;
                      std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(v116);
                      if (SHIBYTE(v113) < 0)
                        operator delete(__p);
                      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v118.__r_.__value_.__l.__data_);
                      goto LABEL_49;
                    }
                  }
                  else
                  {
                    v98 = *(_DWORD **)(v80 + 16);
                  }
                  v110 = md::StyleSettingsValueNode::value_as<float>(v98, v97);
                  v82 = v110 & 0x100000000;
                  v81 = v110 & 0xFFFFFF00;
                  v83 = v110;
                  goto LABEL_95;
                }
              }
              else
              {
                v96 = *(_DWORD **)(v75 + 16);
              }
              v109 = md::StyleSettingsValueNode::value_as<float>(v96, v95);
              v77 = v109 & 0x100000000;
              v76 = v109 & 0xFFFFFF00;
              v78 = v109;
              goto LABEL_92;
            }
          }
          else
          {
            v94 = *(_DWORD **)(v70 + 16);
          }
          v108 = md::StyleSettingsValueNode::value_as<float>(v94, v93);
          v72 = v108 & 0x100000000;
          v71 = v108 & 0xFFFFFF00;
          v73 = v108;
          goto LABEL_89;
        }
        HIBYTE(v128) = 5;
        strcpy((char *)&v127, "delay");
        v48 = v47 + 16;
        v49 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v47 + 16, (const void **)&v127);
        v50 = (uint64_t *)(v47 + 24);
        if (v50 == v49)
          goto LABEL_76;
        v51 = v49[7];
        if (*(_BYTE *)(v51 + 8))
          goto LABEL_76;
        v87 = *(_QWORD *)(v51 + 24);
        if (v87 == 4)
        {
          v88 = *(_DWORD **)(v51 + 16);
          if (*v88 == 1819047278)
          {
LABEL_76:
            v52 = 0;
            v53 = 0;
            v54 = 0;
LABEL_77:
            *(_BYTE *)(v41 + 8) = BYTE4(v53);
            *(_DWORD *)(v41 + 4) = v53 | v52 | v54;
            HIBYTE(v128) = 8;
            strcpy((char *)&v127, "duration");
            v55 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v48, (const void **)&v127);
            if (v50 == v55)
              goto LABEL_79;
            v56 = v55[7];
            if (*(_BYTE *)(v56 + 8))
              goto LABEL_79;
            v89 = *(_QWORD *)(v56 + 24);
            if (v89 == 4)
            {
              v90 = *(_DWORD **)(v56 + 16);
              if (*v90 == 1819047278)
              {
LABEL_79:
                v57 = 0;
                v58 = 0;
                v59 = 0;
LABEL_80:
                *(_BYTE *)(v41 + 16) = BYTE4(v58);
                *(_DWORD *)(v41 + 12) = v58 | v57 | v59;
                HIBYTE(v128) = 5;
                strcpy((char *)&v127, "start");
                v60 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v48, (const void **)&v127);
                if (v50 == v60)
                  goto LABEL_82;
                v61 = v60[7];
                if (*(_BYTE *)(v61 + 8))
                  goto LABEL_82;
                v91 = *(_QWORD *)(v61 + 24);
                if (v91 == 4)
                {
                  v92 = *(_DWORD **)(v61 + 16);
                  if (*v92 == 1819047278)
                  {
LABEL_82:
                    v62 = 0;
                    v63 = 0;
                    v64 = 0;
LABEL_83:
                    *(_BYTE *)(v41 + 24) = BYTE4(v63);
                    *(_DWORD *)(v41 + 20) = v63 | v62 | v64;
                    goto LABEL_84;
                  }
                }
                else
                {
                  v92 = *(_DWORD **)(v61 + 16);
                }
                v107 = md::StyleSettingsValueNode::value_as<float>(v92, v91);
                v63 = v107 & 0x100000000;
                v62 = v107 & 0xFFFFFF00;
                v64 = v107;
                goto LABEL_83;
              }
            }
            else
            {
              v90 = *(_DWORD **)(v56 + 16);
            }
            v106 = md::StyleSettingsValueNode::value_as<float>(v90, v89);
            v58 = v106 & 0x100000000;
            v57 = v106 & 0xFFFFFF00;
            v59 = v106;
            goto LABEL_80;
          }
        }
        else
        {
          v88 = *(_DWORD **)(v51 + 16);
        }
        v105 = md::StyleSettingsValueNode::value_as<float>(v88, v87);
        v53 = v105 & 0x100000000;
        v52 = v105 & 0xFFFFFF00;
        v54 = v105;
        goto LABEL_77;
      }
    }
LABEL_49:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v119);
LABEL_50:
    v29 = v124;
    if (v124)
    {
      v30 = (unint64_t *)&v124->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 3144) + 160) = *(_DWORD *)(a2 + 8);
  v32 = *(_QWORD *)(a1 + 272);
  v33 = *(_QWORD *)(v32 + 24);
  for (i = *(_QWORD *)(v32 + 32); i != v33; i -= 16)
  {
    v35 = *(std::__shared_weak_count **)(i - 8);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  *(_QWORD *)(v32 + 32) = v33;
  *(_BYTE *)(v32 + 60) = 1;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 240) + 40))(*(_QWORD *)(a1 + 240), a2);
  md::LabelTextDataLoader::finishBatch(*(md::LabelTextDataLoader **)(a1 + 272));
  result = md::FontGlyphCache::finishFrame(*(_QWORD *)(a1 + 3144));
  if (!*(_QWORD *)(a1 + 184) && *(_BYTE *)(a1 + 3051))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 128))(*(_QWORD *)(a1 + 240));
  return result;
}

void sub_19F26EF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(a18);
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a27);
  v34 = a33;
  if (a33)
  {
    p_shared_owners = (unint64_t *)&a33->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void md::LabelTextDataLoader::finishBatch(md::LabelTextDataLoader *this)
{
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t i;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  _QWORD v63[3];
  _QWORD *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 60) = 0;
  if (*((_QWORD *)this + 3) == *((_QWORD *)this + 4))
    return;
  v2 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 2) + 3393));
  if ((v2 & 1) == 0)
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    v61 = *(_QWORD *)this;
    v62 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v6 = *((_QWORD *)this + 2);
    v7 = *(std::__shared_weak_count **)(v6 + 16);
    v59 = *(_QWORD *)(v6 + 8);
    if (!v7 || (v60 = std::__shared_weak_count::lock(v7)) == 0)
    {
      std::__throw_bad_weak_ptr[abi:nn180100]();
      __break(1u);
      return;
    }
    {
      v53 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v9 = mdm::Allocator::instance(void)::alloc;
    v56 = *(_OWORD *)((char *)this + 24);
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    v57 = *((_QWORD *)this + 5);
    v58 = v9;
    *((_QWORD *)this + 5) = 0;
    v10 = (unsigned int *)((char *)this + 56);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 152) + 104);
    v13 = v58;
    v15 = (_QWORD *)*((_QWORD *)&v56 + 1);
    v14 = (_QWORD *)v56;
    v16 = *((_QWORD *)&v56 + 1) - v56;
    if (*((_QWORD *)&v56 + 1) == (_QWORD)v56)
    {
      v18 = 0;
      v17 = 0;
    }
    else
    {
      if (v16 < 0)
        abort();
      v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v58 + 16))(v58, *((_QWORD *)&v56 + 1) - v56, 8);
      v16 = v17 + 16 * (v16 >> 4);
      v18 = (_QWORD *)v17;
      do
      {
        if (v18)
        {
          *v18 = *v14;
          v19 = v14[1];
          v18[1] = v19;
          if (v19)
          {
            v20 = (unint64_t *)(v19 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
        }
        v14 += 2;
        v18 += 2;
      }
      while (v14 != v15);
    }
    v28 = v59;
    v27 = v60;
    if (v60)
    {
      v29 = (unint64_t *)&v60->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = v61;
    v32 = v62;
    if (v62)
    {
      v33 = (unint64_t *)&v62->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v35 = operator new(0x48uLL);
    *v35 = &off_1E42CFD70;
    v35[1] = v17;
    v35[2] = v18;
    v35[3] = v16;
    v35[4] = v13;
    v35[5] = v28;
    v35[6] = v27;
    v35[7] = v31;
    v35[8] = v32;
    v64 = v35;
    geo::TaskQueue::async(&v54, v12, v63);
    v36 = v55;
    if (v55)
    {
      v37 = (unint64_t *)&v55->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v64;
    if (v64 == v63)
    {
      v40 = 4;
      v39 = v63;
    }
    else
    {
      if (!v64)
      {
LABEL_47:
        v41 = v56;
        if ((_QWORD)v56)
        {
          v42 = *((_QWORD *)&v56 + 1);
          v43 = v56;
          if (*((_QWORD *)&v56 + 1) != (_QWORD)v56)
          {
            do
            {
              v44 = *(std::__shared_weak_count **)(v42 - 8);
              if (v44)
              {
                v45 = (unint64_t *)&v44->__shared_owners_;
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 - 1, v45));
                if (!v46)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v44->__on_zero_shared)(v44, v43);
                  std::__shared_weak_count::__release_weak(v44);
                }
              }
              v42 -= 16;
            }
            while (v42 != v41);
            v43 = v56;
          }
          *((_QWORD *)&v56 + 1) = v41;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 40))(v58, v43, v57 - v43);
        }
        v47 = v60;
        if (v60)
        {
          v48 = (unint64_t *)&v60->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v50 = v62;
        if (v62)
        {
          v51 = (unint64_t *)&v62->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        return;
      }
      v40 = 5;
    }
    (*(void (**)(void))(*v39 + 8 * v40))();
    goto LABEL_47;
  }
  v22 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); i != v22; i -= 16)
  {
    v24 = *(std::__shared_weak_count **)(i - 8);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  *((_QWORD *)this + 4) = v22;
}

void sub_19F26F5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;

  v29 = *(_QWORD **)(v27 - 96);
  if (v29 == v26)
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 120);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  md::LabelTextDataLoader::finishBatch(void)::$_0::~$_0(&a9);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::layoutForStaging(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

void md::StandardLabeler::layoutForStaging(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BOOL4 v22;
  BOOL v23;
  uint64_t *v24;
  unint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  _BOOL4 v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned __int8 v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  md::LabelPoint *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  double *v70;
  uint64_t v71;
  unsigned int v72;
  double v73;
  uint64_t v74;
  _BYTE **v75;
  _BYTE **v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE **v80;
  _BYTE **i;
  _QWORD *j;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t k;
  uint64_t v94;
  uint64_t v95;
  md::LabelPool *v96;
  uint64_t v97;
  BOOL v98;
  _QWORD *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  std::mutex *v106;
  uint64_t v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  __int128 v122;
  _QWORD *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  unint64_t v131;
  _BYTE *v132;
  unsigned __int8 *v134;
  uint64_t *v135;
  int v136;
  uint64_t v137;
  std::mutex *v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  unsigned __int8 v142;
  uint64_t *v143;
  unsigned __int8 v144;
  uint64_t *v145;
  uint64_t v146;
  void *v147;
  uint64_t *v148;
  uint64_t v149;
  int v150;
  unsigned __int8 v152;
  unsigned __int8 v153;
  uint64_t *v154;
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t *v164;
  unsigned __int8 v165;
  uint64_t *v166;
  uint64_t *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  int8x8_t v173;
  unint64_t v174;
  uint8x8_t v175;
  uint64_t v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  int8x8_t v200;
  unint64_t v201;
  uint8x8_t v202;
  uint64_t v203;
  unsigned __int8 *v204;
  unsigned __int8 *v205;
  unint64_t v206;
  unsigned __int8 *v207;
  unint64_t v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  md::Label **v213;
  md::Label **v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  int v218;
  _QWORD *v219;
  int v220;
  uint64_t *v221;
  uint64_t v222;
  std::mutex *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  uint64_t v233;

  v2 = a2;
  v233 = *MEMORY[0x1E0C80C00];
  if (!(*a2 | a2[1]))
    goto LABEL_136;
  v4 = *(_QWORD *)(a1 + 48);
  LODWORD(v5) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 432) + 28);
  if (!*(_BYTE *)(v4 + 760) || *(unsigned __int8 *)(v4 + 756) != (_DWORD)v5)
  {
    v6 = (uint64_t *)&v228;
    v8 = (uint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
    {
      v215 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v215, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v9 = mdm::Allocator::instance(void)::alloc;
    v10 = *(uint64_t **)(v4 + 672);
    v11 = *(_QWORD **)(v4 + 680);
    *(_QWORD *)(v4 + 680) = 0;
    v227 = v10;
    v228 = v11;
    v12 = *(_QWORD *)(v4 + 696);
    *(_QWORD *)(v4 + 696) = 0;
    v229 = v9;
    v230 = v12;
    *(_QWORD *)(v4 + 672) = v4 + 680;
    v13 = (id *)(v11 + 2);
    if (!v12)
      v13 = (id *)&v227;
    *v13 = &v228;
    md::LabelPool::addGlobalFeatureLabels(v4, (int)v5, *(_QWORD **)(*(_QWORD *)(v4 + 624) + 136), *(_QWORD **)(*(_QWORD *)(v4 + 624) + 144));
    md::LabelPool::addGlobalFeatureLabels(v4, (int)v5, *(_QWORD **)(*(_QWORD *)(v4 + 632) + 8), *(_QWORD **)(*(_QWORD *)(v4 + 632) + 16));
    v14 = *(_QWORD *)(v4 + 704);
    if (!v14)
    {
LABEL_68:
      v59 = v227;
      if (v227 != v6)
      {
        do
        {
          v60 = v59[4];
          v61 = (unsigned __int8 *)(v60 + 1296);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (v62 == 1)
          {
            if (*(_BYTE *)(v60 + 1264))
            {
              *(_BYTE *)(v60 + 1261) = 1;
              *(_QWORD *)(v60 + 1224) = 0;
            }
            else
            {
              md::Label::updateStateMachineForStaging(v60, 1, 37);
            }
          }
          v63 = (uint64_t *)v59[1];
          if (v63)
          {
            do
            {
              v64 = v63;
              v63 = (uint64_t *)*v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              v64 = (uint64_t *)v59[2];
              v23 = *v64 == (_QWORD)v59;
              v59 = v64;
            }
            while (!v23);
          }
          v59 = v64;
        }
        while (v64 != v6);
      }
      *(_BYTE *)(v4 + 756) = (_BYTE)v5;
      *(_BYTE *)(v4 + 760) = 1;
      std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy((uint64_t)&v227, v228);
      goto LABEL_84;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 72);
    v16 = *(_DWORD *)(v14 + 48);
    std::mutex::lock((std::mutex *)(v4 + 480));
    v17 = (uint64_t *)(v4 + 552);
    v18 = *(_QWORD *)(v4 + 552);
    if (v18)
    {
      v19 = v4 + 552;
      v20 = *(_QWORD *)(v4 + 552);
      do
      {
        v21 = *(_QWORD *)(v20 + 32);
        v23 = v21 == v15;
        v22 = v21 < v15;
        if (v23)
          v22 = *(_DWORD *)(v20 + 40) < v16;
        v23 = !v22;
        if (v22)
          v24 = (uint64_t *)(v20 + 8);
        else
          v24 = (uint64_t *)v20;
        if (v23)
          v19 = v20;
        v20 = *v24;
      }
      while (*v24);
      if ((uint64_t *)v19 != v17)
      {
        v25 = *(_QWORD *)(v19 + 32);
        v26 = v16 < *(_DWORD *)(v19 + 40);
        v23 = v15 == v25;
        v27 = v15 < v25;
        if (!v23)
          v26 = v27;
        if (!v26)
          goto LABEL_47;
      }
      while (1)
      {
        while (1)
        {
          v28 = v18;
          v29 = *(_QWORD *)(v18 + 32);
          v30 = *(_DWORD *)(v28 + 40);
          v31 = v16 < v30;
          if (v15 != v29)
            v31 = v15 < v29;
          if (!v31)
            break;
          v18 = *(_QWORD *)v28;
          v17 = (uint64_t *)v28;
          if (!*(_QWORD *)v28)
            goto LABEL_35;
        }
        v32 = v30 < v16;
        v33 = v15 == v29 ? v32 : v29 < v15;
        if (v33 != 1)
          break;
        v18 = *(_QWORD *)(v28 + 8);
        if (!v18)
        {
          v17 = (uint64_t *)(v28 + 8);
          goto LABEL_35;
        }
      }
      v34 = v28;
    }
    else
    {
      v28 = v4 + 552;
LABEL_35:
      v34 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 560) + 16))(*(_QWORD *)(v4 + 560), 64, 8);
      *(_QWORD *)(v34 + 32) = v15;
      *(_DWORD *)(v34 + 40) = v16;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_QWORD *)v34 = 0;
      *(_QWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v34 + 16) = v28;
      *v17 = v34;
      v35 = **(_QWORD **)(v4 + 544);
      v36 = (uint64_t *)v34;
      if (v35)
      {
        *(_QWORD *)(v4 + 544) = v35;
        v36 = (uint64_t *)*v17;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 552), v36);
      ++*(_QWORD *)(v4 + 568);
    }
    v37 = *(_QWORD *)(v4 + 704);
    v38 = *(_QWORD *)(v4 + 712);
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = *(std::__shared_weak_count **)(v34 + 56);
    *(_QWORD *)(v34 + 48) = v37;
    *(_QWORD *)(v34 + 56) = v38;
    v8 = (uint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    ++*(_DWORD *)(v4 + 744);
LABEL_47:
    std::mutex::unlock((std::mutex *)(v4 + 480));
    v44 = *(_QWORD *)(v4 + 704);
    v46 = *(_QWORD *)(v44 + 8);
    v45 = *(std::__shared_weak_count **)(v44 + 16);
    v231 = v46;
    v232 = v45;
    if (v45)
    {
      v47 = (unint64_t *)&v45->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    if ((v49 & 1) == 0)
    {
LABEL_411:
      {
        v216 = operator new();
        *(_QWORD *)(v8 + 2392) = geo::MallocZoneAllocator::MallocZoneAllocator(v216, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
    }
    v226 = *(_QWORD *)(v8 + 2392);
    v50 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v226 + 16))(v226, 16, 8);
    v51 = v50;
    v224 = (char *)v50;
    v225 = (char *)(v50 + 2);
    if (v50)
    {
      *v50 = v46;
      v50[1] = v45;
      if (v45)
      {
        v52 = (unint64_t *)&v45->__shared_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
    }
    md::LabelPool::addGlobalFeatureLabels(v4, (int)v5, v50, v50 + 2);
    if (v51)
    {
      v54 = (std::__shared_weak_count *)v51[1];
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      (*(void (**)(uint64_t, char *, int64_t))(*(_QWORD *)v226 + 40))(v226, v224, v225 - v224);
      v45 = v232;
    }
    if (v45)
    {
      v57 = (unint64_t *)&v45->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    *(_BYTE *)(v4 + 757) = 0;
    goto LABEL_68;
  }
LABEL_84:
  v65 = *(_QWORD *)(v4 + 704);
  if (v65)
  {
    v66 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v65 + 8) + 112))(*(_QWORD *)(v65 + 8), v65 + 48);
    if (*((_BYTE *)v66 + 46))
    {
      v67 = md::LabelPoint::mercatorPoint(v66);
      v68 = *(uint64_t **)(v4 + 16);
      v69 = *(uint64_t **)(v4 + 24);
      if (v68 != v69)
      {
        v70 = (double *)v67;
        do
        {
          v71 = *v68;
          if (*(unsigned __int8 *)(*v68 + 8) == 255)
          {
            v72 = *(unsigned __int8 *)(v71 + 9);
            if (v72 > *(unsigned __int8 *)(v4 + 757) && *v70 >= *(double *)(v71 + 40) && *v70 <= *(double *)(v71 + 56))
            {
              v73 = v70[1];
              if (v73 >= *(double *)(v71 + 48) && v73 <= *(double *)(v71 + 64))
              {
                *(_BYTE *)(v4 + 757) = v72;
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 24))(v71, *(_QWORD *)(v4 + 704));
              }
            }
          }
          v68 += 2;
        }
        while (v68 != v69);
      }
    }
  }
  if (*v2 | v2[5])
  {
    v80 = *(_BYTE ***)(v4 + 16);
    for (i = *(_BYTE ***)(v4 + 24); v80 != i; v80 += 2)
      md::LabelMapTile::updateLabels(*v80, *(md::LabelManager **)(v4 + 8), (md::LabelPool *)v4, (int)v5, v2[4]);
    goto LABEL_110;
  }
  v74 = mach_absolute_time();
  v75 = *(_BYTE ***)(v4 + 16);
  v76 = *(_BYTE ***)(v4 + 24);
  if (v75 == v76)
  {
LABEL_110:
    for (j = *(_QWORD **)(v4 + 104); j; j = (_QWORD *)*j)
    {
      v83 = j[2];
      if (*(_BYTE *)(v83 + 125))
      {
        *(_BYTE *)(v83 + 125) = 0;
        v84 = *(_QWORD **)(v83 + 408);
        v85 = (_QWORD *)(v83 + 416);
        if (v84 != (_QWORD *)(v83 + 416))
        {
          do
          {
            v86 = v84[4];
            v87 = (unsigned __int8 *)(v86 + 1296);
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (v88 == 1)
            {
              if (*(_BYTE *)(v86 + 1264))
              {
                *(_BYTE *)(v86 + 1261) = 1;
                *(_QWORD *)(v86 + 1224) = 0;
              }
              else
              {
                md::Label::updateStateMachineForStaging(v86, 1, 37);
              }
            }
            v89 = (_QWORD *)v84[1];
            if (v89)
            {
              do
              {
                v90 = v89;
                v89 = (_QWORD *)*v89;
              }
              while (v89);
            }
            else
            {
              do
              {
                v90 = (_QWORD *)v84[2];
                v23 = *v90 == (_QWORD)v84;
                v84 = v90;
              }
              while (!v23);
            }
            v84 = v90;
          }
          while (v90 != v85);
          v83 = j[2];
        }
      }
      std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile> const&>(v4 + 136, v83, j + 2);
    }
    v77 = *(_QWORD *)(v4 + 120);
    if (v77)
    {
      v91 = *(_QWORD **)(v4 + 104);
      while (v91)
      {
        v99 = v91;
        v91 = (_QWORD *)*v91;
        v100 = (std::__shared_weak_count *)v99[3];
        if (v100)
        {
          v101 = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v4 + 112) + 40))(*(_QWORD *)(v4 + 112), v99, 32);
      }
      *(_QWORD *)(v4 + 104) = 0;
      v92 = *(_QWORD *)(v4 + 88);
      if (v92)
      {
        for (k = 0; k != v92; ++k)
          *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * k) = 0;
      }
      LOBYTE(v77) = 0;
      *(_QWORD *)(v4 + 120) = 0;
    }
LABEL_135:
    if (v2[5])
      goto LABEL_136;
LABEL_396:
    *(_BYTE *)(a1 + 370) |= v77;
    if (!v2[2])
      goto LABEL_397;
LABEL_137:
    v2 = *(unsigned __int8 **)(a1 + 48);
    v94 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 168) + 32);
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 80))(v94);
    v97 = v95;
    if (v95)
    {
      v98 = *(_DWORD *)(v95 + 232) != *((_DWORD *)v2 + 185);
      if (v2[758])
        goto LABEL_150;
    }
    else
    {
      v98 = 0;
      if (v2[758])
        goto LABEL_150;
    }
    if (*(_DWORD *)(*((_QWORD *)v2 + 78) + 224) != *((_DWORD *)v2 + 184))
      v98 = 1;
    if (!v98)
    {
      v129 = *(_QWORD *)(a1 + 72);
      v128 = *(_QWORD *)(a1 + 80);
      if (v129 == v128)
        goto LABEL_405;
      v130 = 0;
      v131 = 0;
      do
      {
        if (v130)
        {
          do
            v129 += 16;
          while (v129 != v128);
          goto LABEL_150;
        }
        while (1)
        {
          v132 = *(_BYTE **)v129;
          if (!*(_BYTE *)(*(_QWORD *)v129 + 820) && !v132[1251])
          {
            if (!atomic_load(v132 + 1297))
              break;
            v132 = *(_BYTE **)v129;
          }
          if (v132[824])
            break;
          v129 += 16;
          if (v129 == v128)
            goto LABEL_405;
        }
        v130 = ++v131 > 4;
        v129 += 16;
      }
      while (v129 != v128);
      if (v131 < 5)
        goto LABEL_405;
    }
LABEL_150:
    v103 = *((_QWORD *)v2 + 78);
    v45 = *(std::__shared_weak_count **)(v103 + 208);
    *((_DWORD *)v2 + 184) = *(_DWORD *)(v103 + 224);
    v2[758] = 0;
    v104 = *((_QWORD *)v2 + 88);
    if (v104)
    {
      v105 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v104 + 8) + 184))(*(_QWORD *)(v104 + 8));
      v223 = v106;
      v220 = v105;
      v107 = *((_QWORD *)v2 + 90);
      if (v107)
        goto LABEL_152;
    }
    else
    {
      v220 = 0;
      v223 = 0;
      v107 = *((_QWORD *)v2 + 90);
      if (v107)
      {
LABEL_152:
        v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v107 + 8) + 184))(*(_QWORD *)(v107 + 8));
        v222 = v109;
        v218 = v108;
        if (v97)
        {
LABEL_153:
          *((_DWORD *)v2 + 185) = *(_DWORD *)(v97 + 232);
          v219 = (_QWORD *)(v97 + 120);
          v8 = *(_QWORD *)(v97 + 160) == 0;
LABEL_157:
          v221 = (uint64_t *)(a1 + 72);
          v111 = *(_QWORD *)(a1 + 72);
          v110 = *(_QWORD *)(a1 + 80);
          if (v110 != v111)
          {
            do
            {
              v112 = *(std::__shared_weak_count **)(v110 - 8);
              if (v112)
              {
                v113 = (unint64_t *)&v112->__shared_owners_;
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                }
              }
              v110 -= 16;
            }
            while (v110 != v111);
            v110 = *v221;
          }
          *(_QWORD *)(a1 + 80) = v111;
          v115 = *((_QWORD *)v2 + 31);
          if (v115 > (*(_QWORD *)(a1 + 88) - v110) >> 4)
          {
            if (v115 >> 60)
              abort();
            v116 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 16))(*(_QWORD *)(a1 + 96), 16 * v115, 8);
            v117 = v116 + 16 * ((v111 - v110) >> 4);
            v118 = v116 + 16 * v115;
            v119 = *(_QWORD **)(a1 + 72);
            v120 = *(_QWORD **)(a1 + 80);
            if (v120 == v119)
            {
              *(_QWORD *)(a1 + 72) = v117;
              *(_QWORD *)(a1 + 80) = v117;
              v124 = *(_QWORD *)(a1 + 88);
              *(_QWORD *)(a1 + 88) = v118;
            }
            else
            {
              v121 = v116 + 16 * ((v111 - v110) >> 4);
              do
              {
                v122 = *((_OWORD *)v120 - 1);
                v120 -= 2;
                *(_OWORD *)(v121 - 16) = v122;
                v121 -= 16;
                *v120 = 0;
                v120[1] = 0;
              }
              while (v120 != v119);
              v120 = *(_QWORD **)(a1 + 72);
              v123 = *(_QWORD **)(a1 + 80);
              *(_QWORD *)(a1 + 72) = v121;
              *(_QWORD *)(a1 + 80) = v117;
              v124 = *(_QWORD *)(a1 + 88);
              *(_QWORD *)(a1 + 88) = v118;
              while (v123 != v120)
              {
                v125 = (std::__shared_weak_count *)*(v123 - 1);
                if (v125)
                {
                  v126 = (unint64_t *)&v125->__shared_owners_;
                  do
                    v127 = __ldaxr(v126);
                  while (__stlxr(v127 - 1, v126));
                  if (!v127)
                  {
                    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                    std::__shared_weak_count::__release_weak(v125);
                  }
                }
                v123 -= 2;
              }
            }
            if (v120)
              (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v120, v124 - (_QWORD)v120);
          }
          *((_QWORD *)v2 + 77) = 0;
          v6 = (uint64_t *)*((_QWORD *)v2 + 28);
          v5 = v2 + 232;
          if (v6 != (uint64_t *)(v2 + 232))
          {
            v217 = (_QWORD *)(v103 + 168);
            do
            {
              v135 = v6 + 6;
              v134 = (unsigned __int8 *)v6[6];
              if (!v134[820] && !v134[1251])
              {
                v136 = atomic_load(v134 + 1297);
                v134 = (unsigned __int8 *)*v135;
                if (!v136)
                {
                  atomic_store(0, v134 + 1242);
                  v165 = atomic_load(v134 + 1242);
                  if ((v165 & 1) == 0)
                    *((_QWORD *)v134 + 44) = 0;
                  md::Label::setActive(v6[6], 0, v96);
                  v166 = (uint64_t *)v6[1];
                  v167 = v6;
                  if (v166)
                  {
                    do
                    {
                      v164 = v166;
                      v166 = (uint64_t *)*v166;
                    }
                    while (v166);
                  }
                  else
                  {
                    do
                    {
                      v164 = (uint64_t *)v167[2];
                      v23 = *v164 == (_QWORD)v167;
                      v167 = v164;
                    }
                    while (!v23);
                  }
                  if (*((uint64_t **)v2 + 28) == v6)
                    *((_QWORD *)v2 + 28) = v164;
                  --*((_QWORD *)v2 + 31);
                  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v2 + 29), v6);
                  v168 = (std::__shared_weak_count *)v6[7];
                  if (v168)
                  {
                    v169 = (unint64_t *)&v168->__shared_owners_;
                    do
                      v170 = __ldaxr(v169);
                    while (__stlxr(v170 - 1, v169));
                    if (!v170)
                    {
                      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                      std::__shared_weak_count::__release_weak(v168);
                    }
                  }
                  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)v2 + 30) + 40))(*((_QWORD *)v2 + 30), v6, 64);
                  goto LABEL_198;
                }
              }
              if (v134[1211] - 20 >= 3)
              {
                if (v223
                  && v134 != *((unsigned __int8 **)v2 + 88)
                  && v220 == (*(unsigned __int8 (**)(_QWORD))(**((_QWORD **)v134 + 1) + 184))(*((_QWORD *)v134 + 1)))
                {
                  v4 = v223 == v138;
                  if (!v222)
                    goto LABEL_204;
                }
                else
                {
                  v4 = 0;
                  if (!v222)
                    goto LABEL_204;
                }
                if ((v4 & 1) != 0)
                  goto LABEL_204;
                v139 = *v135;
                v140 = *((_QWORD *)v2 + 90);
                if (*(_BYTE *)(*v135 + 1264))
                {
                  if (*(_BYTE *)(v140 + 1264))
                    v141 = v139 == v140;
                  else
                    v141 = 1;
                  if (!v141)
                  {
LABEL_229:
                    if (v218 == (*(unsigned __int8 (**)(_QWORD))(**((_QWORD **)v134 + 1) + 184))(*((_QWORD *)v134 + 1)))
                    {
                      v4 = v222 == v146;
                      goto LABEL_204;
                    }
                  }
                }
                else if (v139 != v140)
                {
                  goto LABEL_229;
                }
              }
              v4 = 0;
LABEL_204:
              v137 = *v135;
              if (!v45 || (v4 & 1) != 0)
                goto LABEL_208;
              if (*(_BYTE *)(v137 + 1264))
              {
                v4 = 0;
LABEL_208:
                if (((v8 | v4) & 1) != 0)
                  goto LABEL_235;
LABEL_209:
                if (*(unsigned __int8 *)(v137 + 1211) - 20 >= 3)
                {
                  v142 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v134 + 1) + 184))(*((_QWORD *)v134 + 1));
                  v96 = (md::LabelPool *)v143;
                  if (v143)
                    v4 = std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::find<md::LabelFeatureID>(v219, v142, v143) != 0;
                  else
                    v4 = 0;
                  v137 = *v135;
                }
                else
                {
                  v4 = 0;
                }
                goto LABEL_235;
              }
              v144 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v134 + 1) + 184))(*((_QWORD *)v134 + 1));
              v96 = (md::LabelPool *)v145;
              if (v145)
                v4 = std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::find<md::LabelFeatureID>(v217, v144, v145) != 0;
              else
                v4 = 0;
              v137 = *v135;
              if (((v8 | v4) & 1) == 0)
                goto LABEL_209;
LABEL_235:
              if (*((_QWORD *)v2 + 83))
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v137 + 32))(v137);
                v147 = (void *)objc_claimAutoreleasedReturnValue();
                v46 = v147 == 0;

                v137 = *v135;
                if ((v46 & 1) == 0)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v137 + 32))(*v135);
                  v148 = (uint64_t *)(id)objc_claimAutoreleasedReturnValue();
                  v227 = v148;
                  v149 = *((_QWORD *)v2 + 83);
                  if (!v149)
                  {
                    std::__throw_bad_function_call[abi:nn180100]();
                    __break(1u);
                    goto LABEL_411;
                  }
                  v150 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v149 + 48))(v149, &v227);

                  LODWORD(v4) = v4 | v150;
                  v137 = *v135;
                }
              }
              if ((_DWORD)v4 == (*(_BYTE *)(v137 + 824) != 0) || *(unsigned __int8 *)(v137 + 824) == (_DWORD)v4)
              {
                if (!(_DWORD)v4)
                  goto LABEL_267;
              }
              else
              {
                *(_BYTE *)(v137 + 824) = v4;
                *(_BYTE *)(v137 + 1262) = 0;
                if (!(_DWORD)v4)
                {
                  if (!*(_BYTE *)(v137 + 1251))
                  {
                    *(_WORD *)(v137 + 1283) = 0;
                    *(_BYTE *)(v137 + 1250) = 0;
                    *(_BYTE *)(v137 + 1285) = 0;
                    v157 = *(_QWORD *)(v137 + 264);
                    *(_QWORD *)(v137 + 264) = 0;
                    if (v157)
                      (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
                    v158 = *(_QWORD *)(v137 + 272);
                    *(_QWORD *)(v137 + 272) = 0;
                    if (v158)
                      (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
                    v159 = *(_QWORD *)(v137 + 304);
                    *(_QWORD *)(v137 + 304) = 0;
                    if (v159)
                      (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
                    if (*(_QWORD *)(v137 + 288))
                    {
                      *(_QWORD *)(v137 + 288) = 0;
                      *(_BYTE *)(v137 + 1247) = 1;
                    }
                  }
                  *(_BYTE *)(v137 + 1214) = -1;
                  goto LABEL_267;
                }
                v155 = md::LabelPool::replacementForLabel((md::LabelPool *)v2, (const md::Label *)v137);
                if (v155)
                {
                  *(_BYTE *)(v137 + 1262) = 1;
                  *(_QWORD *)(v137 + 1224) = 0;
                  v156 = atomic_load((unsigned __int8 *)(v155 + 1240));
                  if ((v156 & 1) != 0 && !*(_BYTE *)(v137 + 1245) && *(_BYTE *)(v137 + 822) != 1)
                    *(_BYTE *)(v137 + 826) = 1;
                }
                else
                {
                  md::Label::updateStateMachineForStaging(v137, 2, 28);
                }
              }
              if (!*(_BYTE *)(*v135 + 1262))
              {
                v152 = atomic_load((unsigned __int8 *)(*v135 + 1240));
                if ((v152 & 1) == 0 && *(_BYTE *)(*v135 + 820) != 2)
                {
                  v153 = atomic_load((unsigned __int8 *)(*v135 + 1243));
                  if ((v153 & 1) == 0)
                  {
                    ++*((_QWORD *)v2 + 77);
                    v154 = (uint64_t *)v6[1];
                    if (v154)
                      goto LABEL_275;
                    goto LABEL_277;
                  }
                }
              }
LABEL_267:
              v160 = *(_QWORD **)(a1 + 80);
              if ((unint64_t)v160 >= *(_QWORD *)(a1 + 88))
              {
                *(_QWORD *)(a1 + 80) = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)v221, (__int128 *)v6 + 3);
                v154 = (uint64_t *)v6[1];
                if (v154)
                  goto LABEL_275;
              }
              else
              {
                if (v160)
                {
                  *v160 = v6[6];
                  v161 = (_QWORD *)v6[7];
                  v160[1] = v161;
                  if (v161)
                  {
                    v162 = v161 + 1;
                    do
                      v163 = __ldxr(v162);
                    while (__stxr(v163 + 1, v162));
                  }
                }
                *(_QWORD *)(a1 + 80) = v160 + 2;
                v154 = (uint64_t *)v6[1];
                if (v154)
                {
                  do
                  {
LABEL_275:
                    v164 = v154;
                    v154 = (uint64_t *)*v154;
                  }
                  while (v154);
                  goto LABEL_198;
                }
              }
              do
              {
LABEL_277:
                v164 = (uint64_t *)v6[2];
                v23 = *v164 == (_QWORD)v6;
                v6 = v164;
              }
              while (!v23);
LABEL_198:
              v6 = v164;
            }
            while (v164 != (uint64_t *)v5);
          }
          v171 = (uint64_t *)*((_QWORD *)v2 + 35);
          if (v171)
          {
            while (1)
            {
              v172 = (uint64_t *)*v171;
              if (*(_QWORD *)(v171[6] + 8) == *(_QWORD *)(v171[6] + 16))
                break;
LABEL_300:
              v171 = v172;
              if (!v172)
                goto LABEL_333;
            }
            v173 = *(int8x8_t *)(v2 + 264);
            v174 = v171[1];
            v175 = (uint8x8_t)vcnt_s8(v173);
            v175.i16[0] = vaddlv_u8(v175);
            if (v175.u32[0] > 1uLL)
            {
              if (v174 >= *(_QWORD *)&v173)
                v174 %= *(_QWORD *)&v173;
            }
            else
            {
              v174 &= *(_QWORD *)&v173 - 1;
            }
            v176 = *((_QWORD *)v2 + 32);
            v177 = *(unsigned __int8 **)(v176 + 8 * v174);
            do
            {
              v178 = v177;
              v177 = *(unsigned __int8 **)v177;
            }
            while (v177 != (unsigned __int8 *)v171);
            if (v178 == v2 + 280)
              goto LABEL_415;
            v179 = *((_QWORD *)v178 + 1);
            if (v175.u32[0] > 1uLL)
            {
              if (v179 >= *(_QWORD *)&v173)
                v179 %= *(_QWORD *)&v173;
            }
            else
            {
              v179 &= *(_QWORD *)&v173 - 1;
            }
            v180 = *v171;
            if (v179 != v174)
            {
LABEL_415:
              if (v172)
              {
                v181 = v172[1];
                if (v175.u32[0] > 1uLL)
                {
                  if (v181 >= *(_QWORD *)&v173)
                    v181 %= *(_QWORD *)&v173;
                }
                else
                {
                  v181 &= *(_QWORD *)&v173 - 1;
                }
                v180 = *v171;
                if (v181 == v174)
                  goto LABEL_322;
              }
              *(_QWORD *)(v176 + 8 * v174) = 0;
              v180 = *v171;
            }
            if (!v180)
            {
LABEL_328:
              *(_QWORD *)v178 = v180;
              *v171 = 0;
              --*((_QWORD *)v2 + 37);
              v183 = (std::__shared_weak_count *)v171[7];
              if (v183)
              {
                v184 = (unint64_t *)&v183->__shared_owners_;
                do
                  v185 = __ldaxr(v184);
                while (__stlxr(v185 - 1, v184));
                if (!v185)
                {
                  ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                  std::__shared_weak_count::__release_weak(v183);
                }
              }
              if (*((char *)v171 + 39) < 0)
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v171[5] + 40))(v171[5], v171[2], v171[4] & 0x7FFFFFFFFFFFFFFFLL);
              (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)v2 + 36) + 40))(*((_QWORD *)v2 + 36), v171, 64);
              goto LABEL_300;
            }
LABEL_322:
            v182 = *(_QWORD *)(v180 + 8);
            if (v175.u32[0] > 1uLL)
            {
              if (v182 >= *(_QWORD *)&v173)
                v182 %= *(_QWORD *)&v173;
            }
            else
            {
              v182 &= *(_QWORD *)&v173 - 1;
            }
            if (v182 != v174)
            {
              *(_QWORD *)(*((_QWORD *)v2 + 32) + 8 * v182) = v178;
              v180 = *v171;
            }
            goto LABEL_328;
          }
LABEL_333:
          v186 = (_QWORD *)*((_QWORD *)v2 + 49);
          if (v186)
          {
            do
            {
              while (*(_QWORD *)(v186[3] + 8) != *(_QWORD *)(v186[3] + 16))
              {
                v186 = (_QWORD *)*v186;
                if (!v186)
                  goto LABEL_346;
              }
              v187 = (_QWORD *)*v186;
              std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v227, (_QWORD *)v2 + 46, v186);
              v188 = v227;
              v227 = 0;
              if (v188)
              {
                if ((_BYTE)v229)
                {
                  v189 = (std::__shared_weak_count *)v188[4];
                  if (v189)
                  {
                    v190 = (unint64_t *)&v189->__shared_owners_;
                    do
                      v191 = __ldaxr(v190);
                    while (__stlxr(v191 - 1, v190));
                    if (!v191)
                    {
                      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                      std::__shared_weak_count::__release_weak(v189);
                    }
                  }
                }
                (*(void (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*v228 + 40))(*v228, v188, 40);
              }
              v186 = v187;
            }
            while (v187);
          }
LABEL_346:
          v192 = (_QWORD *)*((_QWORD *)v2 + 56);
          if (v192)
          {
            do
            {
              while (*(_QWORD *)(v192[3] + 8) != *(_QWORD *)(v192[3] + 16))
              {
                v192 = (_QWORD *)*v192;
                if (!v192)
                  goto LABEL_359;
              }
              v193 = (_QWORD *)*v192;
              std::__hash_table<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,geo::StdAllocator<std::__hash_value_type<geo::QuadTile,md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::MapEntry>,mdm::Allocator>>::remove((uint64_t)&v227, (_QWORD *)v2 + 53, v192);
              v194 = v227;
              v227 = 0;
              if (v194)
              {
                if ((_BYTE)v229)
                {
                  v195 = (std::__shared_weak_count *)v194[4];
                  if (v195)
                  {
                    v196 = (unint64_t *)&v195->__shared_owners_;
                    do
                      v197 = __ldaxr(v196);
                    while (__stlxr(v197 - 1, v196));
                    if (!v197)
                    {
                      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                      std::__shared_weak_count::__release_weak(v195);
                    }
                  }
                }
                (*(void (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*v228 + 40))(*v228, v194, 40);
              }
              v192 = v193;
            }
            while (v193);
          }
LABEL_359:
          v198 = (unsigned __int8 *)*((_QWORD *)v2 + 42);
          if (!v198)
          {
LABEL_405:
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
            return;
          }
          while (1)
          {
            v199 = *(unsigned __int8 **)v198;
            if (*(_QWORD *)(*((_QWORD *)v198 + 2) + 8) == *(_QWORD *)(*((_QWORD *)v198 + 2) + 16))
              break;
LABEL_362:
            v198 = v199;
            if (!v199)
              goto LABEL_405;
          }
          v200 = *(int8x8_t *)(v2 + 320);
          v201 = *((_QWORD *)v198 + 1);
          v202 = (uint8x8_t)vcnt_s8(v200);
          v202.i16[0] = vaddlv_u8(v202);
          if (v202.u32[0] > 1uLL)
          {
            if (v201 >= *(_QWORD *)&v200)
              v201 %= *(_QWORD *)&v200;
          }
          else
          {
            v201 &= *(_QWORD *)&v200 - 1;
          }
          v203 = *((_QWORD *)v2 + 39);
          v204 = *(unsigned __int8 **)(v203 + 8 * v201);
          do
          {
            v205 = v204;
            v204 = *(unsigned __int8 **)v204;
          }
          while (v204 != v198);
          if (v205 == v2 + 336)
            goto LABEL_416;
          v206 = *((_QWORD *)v205 + 1);
          if (v202.u32[0] > 1uLL)
          {
            if (v206 >= *(_QWORD *)&v200)
              v206 %= *(_QWORD *)&v200;
          }
          else
          {
            v206 &= *(_QWORD *)&v200 - 1;
          }
          v207 = *(unsigned __int8 **)v198;
          if (v206 != v201)
          {
LABEL_416:
            if (v199)
            {
              v208 = *((_QWORD *)v199 + 1);
              if (v202.u32[0] > 1uLL)
              {
                if (v208 >= *(_QWORD *)&v200)
                  v208 %= *(_QWORD *)&v200;
              }
              else
              {
                v208 &= *(_QWORD *)&v200 - 1;
              }
              v207 = *(unsigned __int8 **)v198;
              if (v208 == v201)
                goto LABEL_384;
            }
            *(_QWORD *)(v203 + 8 * v201) = 0;
            v207 = *(unsigned __int8 **)v198;
          }
          if (!v207)
          {
LABEL_390:
            *(_QWORD *)v205 = v207;
            *(_QWORD *)v198 = 0;
            --*((_QWORD *)v2 + 44);
            v210 = (std::__shared_weak_count *)*((_QWORD *)v198 + 3);
            if (v210)
            {
              v211 = (unint64_t *)&v210->__shared_owners_;
              do
                v212 = __ldaxr(v211);
              while (__stlxr(v212 - 1, v211));
              if (!v212)
              {
                ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                std::__shared_weak_count::__release_weak(v210);
              }
            }
            (*(void (**)(_QWORD, unsigned __int8 *, uint64_t))(**((_QWORD **)v2 + 43) + 40))(*((_QWORD *)v2 + 43), v198, 32);
            goto LABEL_362;
          }
LABEL_384:
          v209 = *((_QWORD *)v207 + 1);
          if (v202.u32[0] > 1uLL)
          {
            if (v209 >= *(_QWORD *)&v200)
              v209 %= *(_QWORD *)&v200;
          }
          else
          {
            v209 &= *(_QWORD *)&v200 - 1;
          }
          if (v209 != v201)
          {
            *(_QWORD *)(*((_QWORD *)v2 + 39) + 8 * v209) = v205;
            v207 = *(unsigned __int8 **)v198;
          }
          goto LABEL_390;
        }
LABEL_156:
        v219 = 0;
        v8 = 1;
        goto LABEL_157;
      }
    }
    v218 = 0;
    v222 = 0;
    if (v97)
      goto LABEL_153;
    goto LABEL_156;
  }
  LOBYTE(v77) = 0;
  v78 = MaxMachTimeDiffPerLabelTileUpdate + v74;
  while (1)
  {
    v79 = *v75;
    if ((v77 & 1) == 0)
    {
      md::LabelMapTile::updateLabels(v79, *(md::LabelManager **)(v4 + 8), (md::LabelPool *)v4, (int)v5, 0);
      LOBYTE(v77) = mach_absolute_time() >= v78;
      goto LABEL_99;
    }
    if ((char)v79[492] != (_DWORD)v5 || v79[122] || v79[124] || v79[123])
      break;
    LOBYTE(v77) = 1;
    if (v79[128])
      goto LABEL_135;
LABEL_99:
    v75 += 2;
    if (v75 == v76)
      goto LABEL_110;
  }
  LOBYTE(v77) = 1;
  if (!v2[5])
    goto LABEL_396;
LABEL_136:
  if (v2[2])
    goto LABEL_137;
LABEL_397:
  if (v2[3])
  {
    LOWORD(v227) = 257;
    BYTE2(v227) = 1;
    v213 = *(md::Label ***)(a1 + 72);
    v214 = *(md::Label ***)(a1 + 80);
    while (v213 != v214)
    {
      if (*((_BYTE *)*v213 + 820) == 2)
        md::Label::layoutForStaging(*v213, *(_QWORD *)(a1 + 24), *(md::LabelPool **)(a1 + 48), &v227);
      v213 += 2;
    }
  }
}

void sub_19F270C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::mutex *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21)
{
  std::mutex::unlock(a15);
  std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_19F270C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::routeSupport(md::MapNavLabeler *this)
{
  return *((_QWORD *)this + 7);
}

void md::MapNavLabeler::layoutForStaging(uint64_t a1)
{
  uint64_t v2;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  float64x2_t *v12;
  double *v13;
  float v14;
  float v15;
  __n128 v16;
  float32x2_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  void (***v40)(_QWORD, __n128);
  void (***v41)(_QWORD, __n128);
  void (***v42)(_QWORD, __n128);
  void (***v43)(_QWORD, __n128);
  void (**v44)(_QWORD, __n128);
  BOOL v45;
  uint64_t v46;
  uint64_t j;
  void *v48;
  uint64_t v49;
  uint64_t k;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t m;
  id v58;
  uint64_t v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _OWORD *v65;
  void *v66;
  int v67;
  unsigned __int8 v68;
  NSObject *v69;
  size_t v70;
  _QWORD *v71;
  uint64_t *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  const void **v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  __int128 *v86;
  __int128 *v87;
  uint64_t v88;
  void (**v89)(md::NavContext *__hidden);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD __dst[2];
  int64_t v95;
  uint64_t v96;
  uint64_t (**v97)();
  uint64_t v98;
  uint64_t (**v99)();
  uint64_t (**v100)();
  _QWORD v101[3];
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  std::ios_base v110;
  uint64_t v111;
  int v112;
  _QWORD v113[2];
  uint64_t *v114;
  int v115;
  _QWORD *v116;
  _QWORD *v117[2];
  uint8_t buf[4];
  _QWORD *v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 64);
  md::RouteLineSupport::layoutForWaypointFeatures((md::RouteLineSupport *)v2, (const md::LabelLayoutContext *)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 432) + 26));
  *(_WORD *)(v2 + 250) = 0;
  if (!*(_QWORD *)(a1 + 104))
    return;
  v3 = *(id **)(a1 + 688);
  if (!v3[3])
    return;
  if (*(_BYTE *)(a1 + 681))
  {
    *(_BYTE *)(a1 + 681) = 0;
    md::LabelNavEtaLabeler::clearEtaFeatures((md::LabelNavEtaLabeler *)v3);
    objc_msgSend(v3[3], "resetNotificationsForObserverType:", 2);
    md::LabelNavEtaLabeler::prepareAnnotatableSectionsRoutes((md::LabelNavEtaLabeler *)v3);
    md::LabelNavEtaLabeler::recreateRouteCollider((md::LabelNavEtaLabeler *)v3, (VKRouteContext *)v3[3]);
  }
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(v4 + 432);
  v89 = &off_1E428BBF8;
  v90 = v4;
  v91 = a1;
  v92 = v5;
  v93 = a1 + 136;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  {
    v83 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v83, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v88 = mdm::Allocator::instance(void)::alloc;
  v6 = *(__int128 **)(a1 + 784);
  v7 = *(__int128 **)(a1 + 776);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
  v9 = v8 + 1;
  if (v8 == -1)
  {
    v10 = 0;
    v11 = -1;
  }
  else
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = (__int128 *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 16))(mdm::Allocator::instance(void)::alloc, (char *)v6 - (char *)v7 + 24, 4);
    v85 = v10;
    v86 = v10;
    v87 = (__int128 *)((char *)v10 + 24 * v9);
    v7 = *(__int128 **)(a1 + 776);
    v6 = *(__int128 **)(a1 + 784);
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
  }
  std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::AvoidanceRectWithPriority const*>,std::__wrap_iter<md::AvoidanceRectWithPriority const*>>((uint64_t *)&v85, (uint64_t)v10, v7, v6, v11);
  v12 = (float64x2_t *)v92;
  v13 = (double *)v93;
  v14 = *(float *)(v93 + 120);
  v15 = *(float *)(v90 + 176);
  if (!md::LabelLayoutContext::isDistanceClipped(v92, v93 + 96))
  {
    v16.n128_f32[0] = v15 * v14;
    if ((float)(v15 * v14) != 0.0)
    {
      v17 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v12[60], v12[54], v13[12]), v12[56], v13[13]), v12[58], v13[14]), 1.0 / (v12[61].f64[1] + v12[55].f64[1] * v13[12] + v12[57].f64[1] * v13[13] + v12[59].f64[1] * v13[14])));
      v16.n128_f32[0] = v16.n128_f32[0] * 0.5;
      v18 = v17.f32[0] - v16.n128_f32[0];
      v19 = v17.f32[1] - v16.n128_f32[0];
      v20 = v17.f32[0] + v16.n128_f32[0];
      v21 = v17.f32[1] + v16.n128_f32[0];
      v22 = v86;
      v23 = v87;
      if (v86 >= v87)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v86 - (char *)v85) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * (((char *)v87 - (char *)v85) >> 3) > v26)
          v26 = 0x5555555555555556 * (((char *)v87 - (char *)v85) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v87 - (char *)v85) >> 3) >= 0x555555555555555)
          v27 = 0xAAAAAAAAAAAAAAALL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 16))(v88, 24 * v27, 4);
          v29 = v28 + 24 * v25;
          v30 = v28 + 24 * v27;
          if (v28)
          {
            *(float *)v29 = v18;
            *(float *)(v29 + 4) = v19;
            *(float *)(v29 + 8) = v20;
            *(float *)(v29 + 12) = v21;
            v31 = v28 + 24 * v25;
            *(_DWORD *)(v31 + 16) = 1065353216;
            *(_BYTE *)(v31 + 20) = 0;
          }
        }
        else
        {
          v30 = 0;
          v29 = 8 * (((char *)v86 - (char *)v85) >> 3);
        }
        v24 = (__int128 *)(v29 + 24);
        v33 = v85;
        v32 = v86;
        if (v86 != v85)
        {
          do
          {
            v16 = *(__n128 *)((char *)v32 - 24);
            *(_QWORD *)(v29 - 8) = *((_QWORD *)v32 - 1);
            *(__n128 *)(v29 - 24) = v16;
            v29 -= 24;
            v32 = (__int128 *)((char *)v32 - 24);
          }
          while (v32 != v33);
          v32 = v33;
        }
        v85 = (__int128 *)v29;
        v87 = (__int128 *)v30;
        if (v32)
          (*(void (**)(uint64_t, __int128 *, int64_t))(*(_QWORD *)v88 + 40))(v88, v32, (char *)v23 - (char *)v32);
      }
      else
      {
        if (v86)
        {
          *(float *)v86 = v18;
          *((float *)v22 + 1) = v19;
          *((float *)v22 + 2) = v20;
          *((float *)v22 + 3) = v21;
          *((_DWORD *)v22 + 4) = 1065353216;
          *((_BYTE *)v22 + 20) = 0;
        }
        v24 = (__int128 *)((char *)v22 + 24);
      }
      v86 = v24;
    }
  }
  v34 = *(_QWORD *)(a1 + 688);
  v35 = *(_QWORD *)(v34 + 184);
  for (i = *(_QWORD *)(v34 + 192); i != v35; i -= 16)
  {
    v37 = *(std::__shared_weak_count **)(i - 8);
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v37->__on_zero_shared)(v37, v16);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  *(_QWORD *)(v34 + 192) = v35;
  v41 = *(void (****)(_QWORD, __n128))(v34 + 152);
  v40 = *(void (****)(_QWORD, __n128))(v34 + 160);
  if (v40 != v41)
  {
    v42 = v40 - 3;
    v43 = v40 - 3;
    do
    {
      v44 = *v43;
      v43 -= 3;
      (*v44)(v42, v16);
      v45 = v42 == v41;
      v42 = v43;
    }
    while (!v45);
  }
  *(_QWORD *)(v34 + 160) = v41;
  v46 = *(_QWORD *)(v34 + 288);
  for (j = *(_QWORD *)(v34 + 296); j != v46; j -= 8)
  {
    v48 = *(void **)(j - 8);

  }
  *(_QWORD *)(v34 + 296) = v46;
  v49 = *(_QWORD *)(v34 + 320);
  for (k = *(_QWORD *)(v34 + 328); k != v49; k -= 8)
  {
    v51 = *(void **)(k - 8);

  }
  *(_QWORD *)(v34 + 328) = v49;
  *(_BYTE *)(v34 + 252) = 0;
  v52 = *(_QWORD *)(v34 + 48);
  v53 = v93;
  *(_QWORD *)(v52 + 40) = *(_QWORD *)(v92 + 48);
  std::unordered_map<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::shared_ptr<md::FlyoverDsmTileData>>>>::unordered_map((uint64_t)v113, v53 + 152);
  v117[0] = 0;
  v117[1] = 0;
  v116 = v117;
  std::set<unsigned char,std::greater<unsigned char>,std::allocator<unsigned char>>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>((uint64_t *)&v116, *(_QWORD **)(v53 + 192), (_QWORD *)(v53 + 200));
  if ((_QWORD *)(v52 + 48) != v113)
  {
    *(_DWORD *)(v52 + 80) = v115;
    std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,void *> *>>((_QWORD *)(v52 + 48), v114);
    std::__tree<unsigned char,std::greater<unsigned char>,std::allocator<unsigned char>>::__assign_multi<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>((uint64_t **)(v52 + 88), v116, v117);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v117[0]);
  v54 = v114;
  while (v54)
  {
    v72 = v54;
    v54 = (uint64_t *)*v54;
    v73 = (std::__shared_weak_count *)v72[6];
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    operator delete(v72);
  }
  v55 = (void *)v113[0];
  v113[0] = 0;
  if (v55)
    operator delete(v55);
  if (*(_BYTE *)(v34 + 707))
  {
    *(_BYTE *)(v34 + 707) = 0;
    md::LabelNavEtaLabeler::clearETALabels((md::LabelNavEtaLabeler *)v34);
  }
  md::LabelNavEtaLabeler::updateLabelPositions(v34, &v89, &v85);
  v56 = *(_QWORD *)(v34 + 152);
  for (m = *(_QWORD *)(v34 + 160); v56 != m; v56 += 24)
  {
    v58 = *(id *)(v56 + 8);
    v59 = objc_msgSend(v58, "label");

    v60 = v58;
    objc_msgSend(v60, "layoutForStagingWithNavContext:", &v89);

    if (*(_BYTE *)(*(_QWORD *)v59 + 298))
    {
      v61 = *(_QWORD **)(v34 + 192);
      if ((unint64_t)v61 >= *(_QWORD *)(v34 + 200))
      {
        v65 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(v34 + 184, (__int128 *)v59);
      }
      else
      {
        if (v61)
        {
          *v61 = *(_QWORD *)v59;
          v62 = *(_QWORD *)(v59 + 8);
          v61[1] = v62;
          if (v62)
          {
            v63 = (unint64_t *)(v62 + 8);
            do
              v64 = __ldxr(v63);
            while (__stxr(v64 + 1, v63));
          }
        }
        v65 = v61 + 2;
      }
      *(_QWORD *)(v34 + 192) = v65;
    }

  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = objc_msgSend(v66, "traceEtaDebugLog");

  if (v67)
  {
    v98 = 0;
    v99 = off_1E42DA988;
    v110.__vftable = (std::ios_base_vtbl *)&unk_1E428AE08;
    v97 = (uint64_t (**)())&unk_1E428ADE0;
    std::ios_base::init(&v110, &v100);
    v112 = -1;
    v111 = 0;
    v110.__vftable = (std::ios_base_vtbl *)off_1E42DA9B0;
    v97 = off_1E42DA960;
    v99 = off_1E42DA988;
    std::streambuf::basic_streambuf();
    v100 = off_1E42DA790;
    v104 = 0;
    v105 = 0;
    v106 = 0;
    {
      v84 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v84, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v107 = mdm::Allocator::instance(void)::alloc;
    v108 = 0;
    v109 = 24;
    md::LabelNavEtaLabeler::describeDebugState(v34, &v99, 1);
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v69 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (!os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
      goto LABEL_96;
    if ((v109 & 0x10) != 0)
    {
      v76 = v108;
      if (v108 < v103)
      {
        v108 = v103;
        v76 = v103;
      }
      v77 = (const void **)&v102;
    }
    else
    {
      if ((v109 & 8) == 0)
      {
        v70 = 0;
        v96 = v107;
        HIBYTE(v95) = 0;
        v71 = __dst;
        goto LABEL_92;
      }
      v77 = (const void **)v101;
      v76 = v101[2];
    }
    v78 = *v77;
    v70 = v76 - (_QWORD)*v77;
    v96 = v107;
    if (v70 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v70 >= 0x17)
    {
      v79 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v70 | 7) != 0x17)
        v79 = v70 | 7;
      v80 = v79 + 1;
      v71 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v107 + 16))();
      __dst[1] = v70;
      v95 = v80 | 0x8000000000000000;
      __dst[0] = v71;
    }
    else
    {
      HIBYTE(v95) = v70;
      v71 = __dst;
      if (!v70)
        goto LABEL_92;
    }
    memmove(v71, v78, v70);
LABEL_92:
    *((_BYTE *)v71 + v70) = 0;
    v81 = __dst;
    if (v95 < 0)
      v81 = (_QWORD *)__dst[0];
    *(_DWORD *)buf = 136315138;
    v119 = v81;
    _os_log_impl(&dword_19F029000, v69, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
    if (SHIBYTE(v95) < 0)
      (*(void (**)(uint64_t, _QWORD, int64_t))(*(_QWORD *)v96 + 40))(v96, __dst[0], v95 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_96:

    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v82, "setTraceEtaDebugLog:", 0);

    v97 = off_1E42DA960;
    v99 = off_1E42DA988;
    v100 = off_1E42DA790;
    v110.__vftable = (std::ios_base_vtbl *)off_1E42DA9B0;
    if (SHIBYTE(v106) < 0)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v107 + 40))(v107, v104, v106 & 0x7FFFFFFFFFFFFFFFLL);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A1AF4D64](&v110);
  }
  if (v85)
  {
    v86 = v85;
    (*(void (**)(uint64_t, __int128 *, int64_t))(*(_QWORD *)v88 + 40))(v88, v85, (char *)v87 - (char *)v85);
  }
}

void sub_19F271668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a15);
  v16 = v15;

  std::basic_stringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_stringstream((uint64_t)va);
  if (a3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a3, a5 - a3);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::RouteLineSupport::layoutForWaypointFeatures(md::RouteLineSupport *this, const md::LabelLayoutContext *a2)
{
  md::RouteLineSupport *v2;
  int v3;
  int v4;
  id v5;
  unsigned __int8 v6;
  md::RouteLineSupport *v7;
  void *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  _QWORD *v14;
  void *v15;
  id v16;
  int32x2_t *v17;
  unint64_t *v18;
  int32x2_t v19;
  id v20;
  int32x2_t *v21;
  id v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  std::__shared_weak_count *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char updated;
  unsigned __int8 **v53;
  unsigned __int8 *v54;
  uint64_t *v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t j;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v77;
  void *v78;
  _BOOL8 v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t **v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  int32x2_t *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *p_shared_weak_owners;
  unint64_t v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  __int128 *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  _QWORD *v138;
  int32x2_t *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t *v167;
  __int128 *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  char *v174;
  double v175;
  double v176;
  double v177;
  uint64_t v178;
  double v179;
  double v180;
  __double2 v181;
  double v182;
  __double2 v183;
  long double v184;
  long double v185;
  float64x2_t v186;
  float v187;
  __int128 v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t *v204;
  unint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t *v221;
  __int128 *v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  void *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t k;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t **v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  unint64_t v253;
  void *v254;
  uint64_t *v255;
  uint64_t **v256;
  uint64_t **v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t *v261;
  _BOOL8 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t *v269;
  unint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t *v286;
  __int128 *v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  void *v297;
  char v298;
  uint64_t v299;
  char v300;
  _QWORD *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  _QWORD *v305;
  std::string::size_type size;
  unint64_t *v307;
  unint64_t v308;
  _OWORD *v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  _QWORD *v313;
  _QWORD *m;
  void *v315;
  char v316;
  uint64_t v317;
  char v318;
  _QWORD *v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  _QWORD *v323;
  std::string::size_type v324;
  unint64_t *v325;
  unint64_t v326;
  _OWORD *v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  int v338;
  int v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  int v345;
  int v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t **v349;
  uint64_t v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  _QWORD *v355;
  _QWORD *v356;
  _QWORD *v357;
  uint64_t v358;
  uint64_t i;
  uint64_t *v360;
  std::string::size_type *v361;
  std::string::size_type *v362;
  std::__shared_weak_count *v363;
  std::string::size_type v364;
  unint64_t *v365;
  unint64_t v366;
  uint64_t *v367;
  uint64_t *v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t *v371;
  uint64_t *v372;
  md::LabelManager *v373;
  std::string *p_p;
  uint64_t v375;
  uint64_t v376;
  uint64_t n;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  md::RouteLineSupport *v381;
  int8x8_t v382;
  uint64_t v383;
  float v384;
  _QWORD *v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  std::__shared_weak_count *v395;
  _QWORD *v396;
  _QWORD *v397;
  unsigned __int8 v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  id v405;
  uint64_t v406;
  std::string::size_type v407;
  std::string::size_type v408;
  std::string::size_type v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char *v414;
  std::string::size_type v415;
  std::string::size_type v416;
  unint64_t v417;
  _QWORD *v418;
  std::string::size_type v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  __int128 *v423;
  uint64_t v424;
  __int128 v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  char *v439;
  char *v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  BOOL v444;
  uint64_t v445;
  uint64_t v446;
  _OWORD *v447;
  char *v448;
  uint64_t v449;
  __int128 v450;
  __int128 v451;
  uint64_t v452;
  char *v453;
  uint64_t v454;
  uint64_t v455;
  double v456;
  __int128 v457;
  __int128 *v458;
  uint64_t v459;
  int8x8_t **v460;
  int8x8_t v461;
  int8x8_t *v462;
  unint64_t *v463;
  std::__shared_weak_count *v464;
  uint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  unint64_t *v469;
  unint64_t v470;
  unint64_t v471;
  std::__shared_weak_count *shared_weak_owners;
  std::__shared_weak_count *v473;
  unint64_t v474;
  void *v475;
  BOOL v476;
  id v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  void *v481;
  id v482;
  std::__shared_weak_count_vtbl *v483;
  __int32 v484;
  unsigned __int8 v485;
  uint64_t v486;
  _BOOL4 v487;
  uint64_t *v488;
  uint64_t *v489;
  uint64_t *v490;
  uint64_t *v491;
  uint64_t v492;
  int8x8_t v493;
  uint64_t *v494;
  uint64_t *v495;
  uint64_t *v496;
  uint64_t *v497;
  uint64_t *v498;
  unsigned int v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  id v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  uint64_t *v509;
  __int128 v510;
  __int128 v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t *v519;
  char *v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t *v524;
  uint64_t *v525;
  uint64_t v526;
  __int128 v527;
  uint64_t v528;
  uint64_t *v529;
  uint64_t v530;
  uint64_t v531;
  char v532;
  uint64_t v533;
  unsigned __int8 v534;
  size_t v535;
  _QWORD *v536;
  uint64_t v537;
  int *v538;
  int v539;
  uint64_t v540;
  int *v541;
  int v542;
  std::__shared_weak_count *v543;
  unint64_t *v544;
  unint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  unint64_t *v549;
  unint64_t v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  unint64_t v553;
  _QWORD *v554;
  uint64_t v555;
  unint64_t v556;
  unint64_t v557;
  std::__shared_weak_count *v558;
  unint64_t *v559;
  unint64_t v560;
  unint64_t v561;
  int8x8_t *v562;
  int8x8_t **v563;
  unint64_t v564;
  _QWORD *v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int8x8_t **v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  int8x8_t **v578;
  uint64_t v579;
  int8x8_t **v580;
  __int128 *v581;
  uint64_t v582;
  __int128 v583;
  int8x8_t *v584;
  uint64_t v585;
  float32x2_t v586;
  __int128 v587;
  float32x2_t v588;
  uint64_t v589;
  geo::read_write_lock *v590;
  const char *v591;
  malloc_zone_t *v592;
  unsigned int v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  char v605;
  uint64_t v606;
  uint64_t v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  md::RouteLineSupport *v611;
  uint64_t *v612;
  uint64_t v613;
  uint64_t v614;
  std::__shared_weak_count *v615;
  unint64_t *v616;
  unint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  _QWORD *v623;
  _QWORD *v624;
  uint64_t v625;
  __int128 v626;
  _QWORD *v627;
  uint64_t v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  unint64_t v631;
  uint64_t v632;
  _QWORD *v633;
  _QWORD *v634;
  void *v635;
  uint64_t v636;
  char v637;
  uint64_t v638;
  char v639;
  _QWORD *v640;
  unint64_t *v641;
  unint64_t v642;
  unint64_t v643;
  _QWORD *v644;
  std::string::size_type v645;
  unint64_t *v646;
  unint64_t v647;
  _OWORD *v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  _QWORD *v652;
  _QWORD *ii;
  md::RouteLineSupport *v654;
  md::RouteLineSupport *v655;
  md::RouteLineSupport *v656;
  uint64_t v657;
  geo::read_write_lock *v658;
  const char *v659;
  malloc_zone_t *v660;
  uint64_t *v661;
  uint64_t *v662;
  char *v663;
  char *v664;
  unint64_t v665;
  id v666;
  void *v667;
  uint64_t v668;
  char *v669;
  uint64_t v670;
  unint64_t v671;
  unint64_t v672;
  unint64_t v673;
  _BYTE *v674;
  char *v675;
  unint64_t v676;
  char *v677;
  uint64_t v678;
  char *v679;
  uint64_t v680;
  _OWORD *v681;
  char *v682;
  uint64_t v683;
  __int128 v684;
  char *v685;
  id v686;
  int64x2_t *v687;
  VKRouteWaypointInfo *v688;
  uint64_t *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  std::__shared_weak_count *v693;
  unint64_t *v694;
  unint64_t v695;
  id v696;
  int v697;
  uint64_t v698;
  uint64_t v699;
  geo::read_write_lock *v700;
  const char *v701;
  malloc_zone_t *zone;
  uint64_t v703;
  geo::read_write_lock *v704;
  const char *v705;
  malloc_zone_t *v706;
  uint64_t v707;
  geo::read_write_lock *v708;
  const char *v709;
  malloc_zone_t *v710;
  uint64_t v711;
  geo::read_write_lock *v712;
  const char *v713;
  malloc_zone_t *v714;
  uint64_t v715;
  geo::read_write_lock *v716;
  const char *v717;
  malloc_zone_t *v718;
  uint64_t v719;
  geo::read_write_lock *v720;
  const char *v721;
  malloc_zone_t *v722;
  uint64_t v723;
  geo::read_write_lock *v724;
  const char *v725;
  malloc_zone_t *v726;
  id v727;
  void *v728;
  uint64_t *v729;
  float64x2_t v730;
  int8x8_t **v731;
  __int128 v732;
  id v733;
  id v734;
  void *v735;
  uint64_t *v736;
  int64x2_t *v737;
  std::__shared_weak_count *v738;
  std::__shared_weak_count *v739;
  float64_t v741;
  uint64_t v742;
  void *v743;
  int8x8_t **v744;
  uint64_t v745;
  uint64_t v746;
  md::RouteLineSupport *v747;
  uint64_t v748;
  uint64_t v749;
  std::__shared_weak_count *v750;
  std::__shared_weak_count *v751;
  id v752;
  uint64_t *v753;
  uint64_t v754[2];
  uint64_t v755;
  int32x2_t *v756;
  std::__shared_weak_count *v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  md::LabelExternalPointFeature *v762;
  std::__shared_weak_count *v763;
  uint64_t v764;
  std::__shared_weak_count *v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  __int128 v770;
  __int128 *v771;
  std::string __p;
  _QWORD v773[3];
  _QWORD *v774;
  uint64_t v775;

  v2 = this;
  v775 = *MEMORY[0x1E0C80C00];
  v3 = a2 == 2;
  v4 = *((unsigned __int8 *)this + 253);
  if (v4 != v3)
    *((_BYTE *)this + 253) = v3;
  if (*((_BYTE *)this + 250))
  {
    v5 = *((id *)this + 3);
    v754[0] = 0;
    v7 = v2;
    if ((v6 & 1) == 0)
    {
      v696 = v5;
      v5 = v696;
      if (v697)
      {
        v698 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v698, "VectorKitLabels", 0x5ED09DD50000000FLL);
        v5 = v696;
      }
    }
    v754[1] = mdm::Allocator::instance(void)::alloc;
    v755 = 0;
    v753 = v754;
    v728 = v5;
    objc_msgSend(v5, "routeInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v751 = 0;
    v752 = v8;
    if (!v8)
    {
      v53 = (unsigned __int8 **)((char *)v2 + 72);
      if (!*((_QWORD *)v7 + 9))
        goto LABEL_402;
      v54 = 0;
      goto LABEL_384;
    }
    v9 = (char *)v2 + 48;
    v10 = (_QWORD *)*((_QWORD *)v2 + 6);
    if (v10)
    {
      v11 = (char *)v2 + 48;
      do
      {
        v12 = v10[4];
        _CF = v12 >= (unint64_t)v8;
        if (v12 >= (unint64_t)v8)
          v14 = v10;
        else
          v14 = v10 + 1;
        if (_CF)
          v11 = (char *)v10;
        v10 = (_QWORD *)*v14;
      }
      while (*v14);
      if (v11 != v9 && (unint64_t)v8 >= *((_QWORD *)v11 + 4))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v752;
        v55 = std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::__emplace_unique_key_args<VKRouteInfo * {__strong},std::piecewise_construct_t const&,std::tuple<VKRouteInfo * const {__strong}&>,std::tuple<>>(&v753, (unint64_t)v8, (id **)&__p);
        v56 = *(_OWORD *)(v11 + 40);
        *((_QWORD *)v11 + 5) = 0;
        *((_QWORD *)v11 + 6) = 0;
        v57 = (std::__shared_weak_count *)v55[6];
        *(_OWORD *)(v55 + 5) = v56;
        if (v57)
        {
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = v55 + 7;
        v61 = v55[7];
        if (v61)
        {
          v62 = v55[8];
          v63 = v55[7];
          if (v62 != v61)
          {
            do
            {
              v64 = *(std::__shared_weak_count **)(v62 - 8);
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v64->__on_zero_shared)(v64, v63);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              v62 -= 16;
            }
            while (v62 != v61);
            v63 = *v60;
          }
          v55[8] = v61;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55[10] + 40))(v55[10], v63, v55[9] - v63);
          *v60 = 0;
          v55[8] = 0;
          v55[9] = 0;
        }
        *(_OWORD *)(v55 + 7) = *(_OWORD *)(v11 + 56);
        v55[9] = *((_QWORD *)v11 + 9);
        *((_QWORD *)v11 + 7) = 0;
        *((_QWORD *)v11 + 8) = 0;
        *((_QWORD *)v11 + 9) = 0;
        v689 = v55 + 11;
        v690 = v55[11];
        if (v690)
        {
          v691 = v55[12];
          v692 = v55[11];
          if (v691 != v690)
          {
            do
            {
              v693 = *(std::__shared_weak_count **)(v691 - 8);
              if (v693)
              {
                v694 = (unint64_t *)&v693->__shared_owners_;
                do
                  v695 = __ldaxr(v694);
                while (__stlxr(v695 - 1, v694));
                if (!v695)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v693->__on_zero_shared)(v693, v692);
                  std::__shared_weak_count::__release_weak(v693);
                }
              }
              v691 -= 16;
            }
            while (v691 != v690);
            v692 = *v689;
          }
          v55[12] = v690;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55[14] + 40))(v55[14], v692, v55[13] - v692);
          *v689 = 0;
          v55[12] = 0;
          v55[13] = 0;
        }
        *(_OWORD *)(v55 + 11) = *(_OWORD *)(v11 + 88);
        v55[13] = *((_QWORD *)v11 + 13);
        *((_QWORD *)v11 + 11) = 0;
        *((_QWORD *)v11 + 12) = 0;
        *((_QWORD *)v11 + 13) = 0;
LABEL_373:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v752;
        v334 = std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::__emplace_unique_key_args<VKRouteInfo * {__strong},std::piecewise_construct_t const&,std::tuple<VKRouteInfo * const {__strong}&>,std::tuple<>>(&v753, (unint64_t)v752, (id **)&__p);
        v54 = (unsigned __int8 *)v334[5];
        v335 = v334[6];
        if (v335)
        {
          v336 = (unint64_t *)(v335 + 8);
          do
            v337 = __ldxr(v336);
          while (__stxr(v337 + 1, v336));
        }
        v751 = (std::__shared_weak_count *)v335;
        v7 = this;
        v53 = (unsigned __int8 **)((char *)this + 72);
        if (*((unsigned __int8 **)this + 9) == v54)
          goto LABEL_402;
        if (v54)
        {
          if (v54[49])
          {
            v338 = v54[48];
            v54[49] = 0;
            if (v338)
              md::WaypointStore::updateWaypointsForSelection((md::WaypointStore *)v54);
          }
          if (v54[48])
          {
            v339 = v54[49];
            v54[48] = 0;
            if (v339)
              md::WaypointStore::updateWaypointsForSelection((md::WaypointStore *)v54);
          }
        }
LABEL_384:
        if (v751)
        {
          v340 = (unint64_t *)&v751->__shared_owners_;
          do
            v341 = __ldxr(v340);
          while (__stxr(v341 + 1, v340));
        }
        v342 = (std::__shared_weak_count *)*((_QWORD *)v7 + 10);
        *((_QWORD *)v7 + 9) = v54;
        *((_QWORD *)v7 + 10) = v751;
        if (v342)
        {
          v343 = (unint64_t *)&v342->__shared_owners_;
          do
            v344 = __ldaxr(v343);
          while (__stlxr(v344 - 1, v343));
          if (!v344)
          {
            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
            std::__shared_weak_count::__release_weak(v342);
          }
          v54 = *v53;
        }
        v7 = this;
        if (v54)
        {
          v345 = *((unsigned __int8 *)this + 254);
          v346 = v54[49];
          if (v346 != v345)
          {
            if (!v54[48])
            {
              v54[49] = v345;
              if (v54[48])
                goto LABEL_402;
              goto LABEL_399;
            }
            v54[49] = v345;
            if ((v346 != 0) != (v345 != 0))
            {
              md::WaypointStore::updateWaypointsForSelection((md::WaypointStore *)v54);
              v54 = *v53;
            }
          }
          if (v54[48])
            goto LABEL_402;
LABEL_399:
          v54[48] = 1;
          if (v54[49])
            md::WaypointStore::updateWaypointsForSelection((md::WaypointStore *)v54);
        }
LABEL_402:
        v348 = *((_QWORD *)v7 + 6);
        v347 = (uint64_t *)((char *)v7 + 48);
        v349 = (uint64_t **)(v347 - 1);
        std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy((uint64_t)(v347 - 1), v348);
        v350 = v754[0];
        *(v347 - 1) = (uint64_t)v753;
        *v347 = v350;
        v351 = v755;
        v347[2] = v755;
        if (v351)
        {
          *(_QWORD *)(v350 + 16) = v347;
          v753 = v754;
          v754[0] = 0;
          v755 = 0;
          v352 = v751;
          if (!v751)
            goto LABEL_410;
        }
        else
        {
          *v349 = v347;
          v352 = v751;
          if (!v751)
            goto LABEL_410;
        }
        v353 = (unint64_t *)&v352->__shared_owners_;
        do
          v354 = __ldaxr(v353);
        while (__stlxr(v354 - 1, v353));
        if (!v354)
        {
          ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
          std::__shared_weak_count::__release_weak(v352);
        }
LABEL_410:

        std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy((uint64_t)&v753, v754[0]);
        v355 = (_QWORD *)((char *)this + 120);
        if (*((_QWORD *)this + 20))
        {
          v356 = (_QWORD *)*((_QWORD *)this + 18);
          if (v356)
          {
            do
            {
              v357 = (_QWORD *)*v356;
              (*(void (**)(_QWORD))(**((_QWORD **)this + 19) + 40))(*((_QWORD *)this + 19));
              v356 = v357;
            }
            while (v357);
          }
          *((_QWORD *)this + 18) = 0;
          v358 = *((_QWORD *)this + 16);
          if (v358)
          {
            for (i = 0; i != v358; ++i)
              *(_QWORD *)(*v355 + 8 * i) = 0;
          }
          *((_QWORD *)this + 20) = 0;
        }
        v360 = *v349;
        if (*v349 != v347)
        {
          do
          {
            v361 = (std::string::size_type *)v360[7];
            v362 = (std::string::size_type *)v360[8];
            while (v361 != v362)
            {
              v364 = *v361;
              v363 = (std::__shared_weak_count *)v361[1];
              __p.__r_.__value_.__r.__words[0] = *v361;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v363;
              if (v363)
              {
                v365 = (unint64_t *)&v363->__shared_owners_;
                do
                  v366 = __ldxr(v365);
                while (__stxr(v366 + 1, v365));
              }
              if (((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v364 + 328))(v364) & 1) == 0)
              {
                if ((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v364 + 176))(v364))
                {
                  v367 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v364 + 176))(v364);
                  LOBYTE(v770) = 4;
                  *((_QWORD *)&v770 + 1) = v367;
                  std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::__emplace_unique_key_args<md::LabelFeatureID,md::LabelFeatureID>((unint64_t)v355, 4u, v367, &v770);
                }
                if ((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v364 + 168))(v364))
                {
                  v368 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v364 + 168))(v364);
                  LOBYTE(v770) = 3;
                  *((_QWORD *)&v770 + 1) = v368;
                  std::__hash_table<md::LabelFeatureID,std::hash<md::LabelFeatureID>,std::equal_to<md::LabelFeatureID>,geo::StdAllocator<md::LabelFeatureID,mdm::Allocator>>::__emplace_unique_key_args<md::LabelFeatureID,md::LabelFeatureID>((unint64_t)v355, 3u, v368, &v770);
                }
              }
              if (v363)
              {
                v369 = (unint64_t *)&v363->__shared_owners_;
                do
                  v370 = __ldaxr(v369);
                while (__stlxr(v370 - 1, v369));
                if (!v370)
                {
                  ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                  std::__shared_weak_count::__release_weak(v363);
                }
              }
              v361 += 2;
            }
            v371 = (uint64_t *)v360[1];
            if (v371)
            {
              do
              {
                v372 = v371;
                v371 = (uint64_t *)*v371;
              }
              while (v371);
            }
            else
            {
              do
              {
                v372 = (uint64_t *)v360[2];
                _ZF = *v372 == (_QWORD)v360;
                v360 = v372;
              }
              while (!_ZF);
            }
            v360 = v372;
          }
          while (v372 != v347);
        }
        v2 = this;
        ++*((_DWORD *)this + 58);
        v373 = (md::LabelManager *)*((_QWORD *)this + 1);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E4279BA0;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
        v773[0] = &__p;
        md::LabelManager::queueCommand(v373, 71, 1, &__p);
        p_p = (std::string *)v773[0];
        if ((std::string *)v773[0] == &__p)
        {
          v375 = 4;
          p_p = &__p;
        }
        else
        {
          if (!v773[0])
          {
LABEL_447:
            if (*((_BYTE *)this + 250) || (v2 = this, md::RouteLineSupport::didCurrentWaypointChange(this)))
            {
              md::RouteLineSupport::updateWaypointProximities((id *)v2);
              v2 = this;
            }
            goto LABEL_450;
          }
          v375 = 5;
        }
        (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v375))();
        goto LABEL_447;
      }
    }
    objc_msgSend(v728, "routeInfo");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v752;
    v736 = std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::__emplace_unique_key_args<VKRouteInfo * {__strong},std::piecewise_construct_t const&,std::tuple<VKRouteInfo * const {__strong}&>,std::tuple<>>(&v753, (unint64_t)v752, (id **)&__p);
    v16 = v15;
    v17 = (int32x2_t *)operator new(0x138uLL);
    v17[1] = 0;
    v18 = (unint64_t *)&v17[1];
    v17[2] = 0;
    *v17 = (int32x2_t)&off_1E42DB080;
    LOBYTE(v15) = *((_BYTE *)this + 254);
    v19 = *(int32x2_t *)((char *)this + 8);
    v20 = v16;
    v17[3] = (int32x2_t)&off_1E428ECD0;
    v21 = v17 + 3;
    v17[4] = 0;
    v17[5] = 0;
    v727 = v20;
    v17[6] = (int32x2_t)v20;
    v17[7] = v19;
    v22 = *(id *)(*(_QWORD *)&v19 + 3472);
    v17[11] = 0;
    v17[8] = (int32x2_t)v22;
    v17[9].i8[0] = 1;
    v17[9].i8[1] = (char)v15;
    v17[9].i16[1] = 1;
    {
      v699 = operator new();
      *(_QWORD *)(v699 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v699 + 24) = "VectorKitLabels";
      *(_OWORD *)(v699 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v699 = &off_1E42B5668;
      *(_QWORD *)(v699 + 8) = "VectorKitLabels";
      *(_OWORD *)(v699 + 72) = 0u;
      *(_OWORD *)(v699 + 88) = 0u;
      *(_OWORD *)(v699 + 104) = 0u;
      *(_OWORD *)(v699 + 120) = 0u;
      *(_OWORD *)(v699 + 136) = 0u;
      *(_OWORD *)(v699 + 152) = 0u;
      *(_OWORD *)(v699 + 168) = 0u;
      *(_OWORD *)(v699 + 184) = 0u;
      *(_OWORD *)(v699 + 200) = 0u;
      *(_OWORD *)(v699 + 216) = 0u;
      *(_OWORD *)(v699 + 232) = 0u;
      *(_QWORD *)(v699 + 248) = 0;
      *(_OWORD *)(v699 + 56) = 0u;
      v700 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v699 + 56), 0);
      if ((_DWORD)v700)
        geo::read_write_lock::logFailure(v700, (uint64_t)"initialization", v701);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v699 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v699 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v699;
    }
    v17[12] = (int32x2_t)mdm::Allocator::instance(void)::alloc;
    v17[13] = 0;
    v17[10] = (int32x2_t)&v17[11];
    v17[15] = 0;
    v17[16] = 0;
    v17[14] = 0;
    {
      v703 = operator new();
      *(_QWORD *)(v703 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v703 + 24) = "VectorKitLabels";
      *(_OWORD *)(v703 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v703 = &off_1E42B5668;
      *(_QWORD *)(v703 + 8) = "VectorKitLabels";
      *(_OWORD *)(v703 + 72) = 0u;
      *(_OWORD *)(v703 + 88) = 0u;
      *(_OWORD *)(v703 + 104) = 0u;
      *(_OWORD *)(v703 + 120) = 0u;
      *(_OWORD *)(v703 + 136) = 0u;
      *(_OWORD *)(v703 + 152) = 0u;
      *(_OWORD *)(v703 + 168) = 0u;
      *(_OWORD *)(v703 + 184) = 0u;
      *(_OWORD *)(v703 + 200) = 0u;
      *(_OWORD *)(v703 + 216) = 0u;
      *(_OWORD *)(v703 + 232) = 0u;
      *(_QWORD *)(v703 + 248) = 0;
      *(_OWORD *)(v703 + 56) = 0u;
      v704 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v703 + 56), 0);
      if ((_DWORD)v704)
        geo::read_write_lock::logFailure(v704, (uint64_t)"initialization", v705);
      v706 = malloc_create_zone(0, 0);
      *(_QWORD *)(v703 + 48) = v706;
      malloc_set_zone_name(v706, "VectorKitLabels");
      *(_QWORD *)(v703 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v703;
    }
    v17[17] = (int32x2_t)mdm::Allocator::instance(void)::alloc;
    v17[18] = 0;
    v17[19] = 0;
    v17[20] = 0;
    {
      v707 = operator new();
      *(_QWORD *)(v707 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v707 + 24) = "VectorKitLabels";
      *(_OWORD *)(v707 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v707 = &off_1E42B5668;
      *(_QWORD *)(v707 + 8) = "VectorKitLabels";
      *(_OWORD *)(v707 + 72) = 0u;
      *(_OWORD *)(v707 + 88) = 0u;
      *(_OWORD *)(v707 + 104) = 0u;
      *(_OWORD *)(v707 + 120) = 0u;
      *(_OWORD *)(v707 + 136) = 0u;
      *(_OWORD *)(v707 + 152) = 0u;
      *(_OWORD *)(v707 + 168) = 0u;
      *(_OWORD *)(v707 + 184) = 0u;
      *(_OWORD *)(v707 + 200) = 0u;
      *(_OWORD *)(v707 + 216) = 0u;
      *(_OWORD *)(v707 + 232) = 0u;
      *(_QWORD *)(v707 + 248) = 0;
      *(_OWORD *)(v707 + 56) = 0u;
      v708 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v707 + 56), 0);
      if ((_DWORD)v708)
        geo::read_write_lock::logFailure(v708, (uint64_t)"initialization", v709);
      v710 = malloc_create_zone(0, 0);
      *(_QWORD *)(v707 + 48) = v710;
      malloc_set_zone_name(v710, "VectorKitLabels");
      *(_QWORD *)(v707 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v707;
    }
    v17[21] = (int32x2_t)mdm::Allocator::instance(void)::alloc;
    v17[22] = 0;
    v17[23] = 0;
    v17[24] = 0;
    {
      v711 = operator new();
      *(_QWORD *)(v711 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v711 + 24) = "VectorKitLabels";
      *(_OWORD *)(v711 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v711 = &off_1E42B5668;
      *(_QWORD *)(v711 + 8) = "VectorKitLabels";
      *(_OWORD *)(v711 + 72) = 0u;
      *(_OWORD *)(v711 + 88) = 0u;
      *(_OWORD *)(v711 + 104) = 0u;
      *(_OWORD *)(v711 + 120) = 0u;
      *(_OWORD *)(v711 + 136) = 0u;
      *(_OWORD *)(v711 + 152) = 0u;
      *(_OWORD *)(v711 + 168) = 0u;
      *(_OWORD *)(v711 + 184) = 0u;
      *(_OWORD *)(v711 + 200) = 0u;
      *(_OWORD *)(v711 + 216) = 0u;
      *(_OWORD *)(v711 + 232) = 0u;
      *(_QWORD *)(v711 + 248) = 0;
      *(_OWORD *)(v711 + 56) = 0u;
      v712 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v711 + 56), 0);
      if ((_DWORD)v712)
        geo::read_write_lock::logFailure(v712, (uint64_t)"initialization", v713);
      v714 = malloc_create_zone(0, 0);
      *(_QWORD *)(v711 + 48) = v714;
      malloc_set_zone_name(v714, "VectorKitLabels");
      *(_QWORD *)(v711 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v711;
    }
    v17[25] = (int32x2_t)mdm::Allocator::instance(void)::alloc;
    v17[26] = 0;
    v17[27] = 0;
    v17[28] = 0;
    {
      v715 = operator new();
      *(_QWORD *)(v715 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v715 + 24) = "VectorKitLabels";
      *(_OWORD *)(v715 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v715 = &off_1E42B5668;
      *(_QWORD *)(v715 + 8) = "VectorKitLabels";
      *(_OWORD *)(v715 + 72) = 0u;
      *(_OWORD *)(v715 + 88) = 0u;
      *(_OWORD *)(v715 + 104) = 0u;
      *(_OWORD *)(v715 + 120) = 0u;
      *(_OWORD *)(v715 + 136) = 0u;
      *(_OWORD *)(v715 + 152) = 0u;
      *(_OWORD *)(v715 + 168) = 0u;
      *(_OWORD *)(v715 + 184) = 0u;
      *(_OWORD *)(v715 + 200) = 0u;
      *(_OWORD *)(v715 + 216) = 0u;
      *(_OWORD *)(v715 + 232) = 0u;
      *(_QWORD *)(v715 + 248) = 0;
      *(_OWORD *)(v715 + 56) = 0u;
      v716 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v715 + 56), 0);
      if ((_DWORD)v716)
        geo::read_write_lock::logFailure(v716, (uint64_t)"initialization", v717);
      v718 = malloc_create_zone(0, 0);
      *(_QWORD *)(v715 + 48) = v718;
      malloc_set_zone_name(v718, "VectorKitLabels");
      *(_QWORD *)(v715 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v715;
    }
    v17[29] = (int32x2_t)mdm::Allocator::instance(void)::alloc;
    v17[30] = 0;
    v17[31] = 0;
    v17[32] = 0;
    {
      v719 = operator new();
      *(_QWORD *)(v719 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v719 + 24) = "VectorKitLabels";
      *(_OWORD *)(v719 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v719 = &off_1E42B5668;
      *(_QWORD *)(v719 + 8) = "VectorKitLabels";
      *(_OWORD *)(v719 + 72) = 0u;
      *(_OWORD *)(v719 + 88) = 0u;
      *(_OWORD *)(v719 + 104) = 0u;
      *(_OWORD *)(v719 + 120) = 0u;
      *(_OWORD *)(v719 + 136) = 0u;
      *(_OWORD *)(v719 + 152) = 0u;
      *(_OWORD *)(v719 + 168) = 0u;
      *(_OWORD *)(v719 + 184) = 0u;
      *(_OWORD *)(v719 + 200) = 0u;
      *(_OWORD *)(v719 + 216) = 0u;
      *(_OWORD *)(v719 + 232) = 0u;
      *(_QWORD *)(v719 + 248) = 0;
      *(_OWORD *)(v719 + 56) = 0u;
      v720 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v719 + 56), 0);
      if ((_DWORD)v720)
        geo::read_write_lock::logFailure(v720, (uint64_t)"initialization", v721);
      v722 = malloc_create_zone(0, 0);
      *(_QWORD *)(v719 + 48) = v722;
      malloc_set_zone_name(v722, "VectorKitLabels");
      *(_QWORD *)(v719 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v719;
    }
    v17[33] = (int32x2_t)mdm::Allocator::instance(void)::alloc;
    v17[34] = 0;
    v17[35] = 0;
    v17[36] = 0;
    {
      v723 = operator new();
      *(_QWORD *)(v723 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v723 + 24) = "VectorKitLabels";
      *(_OWORD *)(v723 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v723 = &off_1E42B5668;
      *(_QWORD *)(v723 + 8) = "VectorKitLabels";
      *(_OWORD *)(v723 + 72) = 0u;
      *(_OWORD *)(v723 + 88) = 0u;
      *(_OWORD *)(v723 + 104) = 0u;
      *(_OWORD *)(v723 + 120) = 0u;
      *(_OWORD *)(v723 + 136) = 0u;
      *(_OWORD *)(v723 + 152) = 0u;
      *(_OWORD *)(v723 + 168) = 0u;
      *(_OWORD *)(v723 + 184) = 0u;
      *(_OWORD *)(v723 + 200) = 0u;
      *(_OWORD *)(v723 + 216) = 0u;
      *(_OWORD *)(v723 + 232) = 0u;
      *(_QWORD *)(v723 + 248) = 0;
      *(_OWORD *)(v723 + 56) = 0u;
      v724 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v723 + 56), 0);
      if ((_DWORD)v724)
        geo::read_write_lock::logFailure(v724, (uint64_t)"initialization", v725);
      v726 = malloc_create_zone(0, 0);
      *(_QWORD *)(v723 + 48) = v726;
      malloc_set_zone_name(v726, "VectorKitLabels");
      *(_QWORD *)(v723 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v723;
    }
    v17[37] = (int32x2_t)mdm::Allocator::instance(void)::alloc;
    v17[38] = vdup_n_s32(0x437F0000u);
    v756 = v17 + 3;
    v757 = (std::__shared_weak_count *)v17;
    v30 = (std::__shared_weak_count *)v17[5];
    if (v30)
    {
      if (v30->__shared_owners_ != -1)
      {
LABEL_37:
        v39 = (uint64_t)v756;
        v38 = (uint64_t)v757;
        if (v757)
        {
          v40 = (unint64_t *)&v757->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v42 = (std::__shared_weak_count *)v736[6];
        v736[5] = v39;
        v736[6] = v38;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = (uint64_t)v756;
        if (!v756[6].i8[3])
        {
          v756[6].i16[1] = 257;
          objc_msgSend(*(id *)(v45 + 24), "waypoints");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = objc_msgSend(v46, "count");
          v48 = *(_QWORD *)(v45 + 88);
          v49 = *(_QWORD *)(v45 + 96);
          v50 = (v49 - v48) >> 5;
          v51 = v47 - v50;
          if (v47 <= v50)
          {
            if (v47 < v50)
            {
              for (j = v48 + 32 * v47; v49 != j; v49 -= 32)
              {
                v68 = *(_QWORD *)(v49 - 8);
                *(_QWORD *)(v49 - 8) = 0;
                if (v68)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v68 + 8))(v68, v51);
                v69 = *(_QWORD *)(v49 - 16);
                *(_QWORD *)(v49 - 16) = 0;
                if (v69)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v69 + 8))(v69, v51);
                v70 = *(_QWORD *)(v49 - 24);
                *(_QWORD *)(v49 - 24) = 0;
                if (v70)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v70 + 8))(v70, v51);

              }
              *(_QWORD *)(v45 + 96) = j;
            }
          }
          else
          {
            std::vector<md::WaypointStoreWaypointData,geo::StdAllocator<md::WaypointStoreWaypointData,mdm::Allocator>>::__append(v45 + 88, v51);
          }

          v768 = 0u;
          v769 = 0u;
          v766 = 0u;
          v767 = 0u;
          objc_msgSend(*(id *)(v45 + 24), "waypoints");
          v71 = (std::__shared_weak_count *)objc_claimAutoreleasedReturnValue();
          v72 = -[std::__shared_weak_count countByEnumeratingWithState:objects:count:](v71, "countByEnumeratingWithState:objects:count:", &v766, &__p, 16);
          if (v72)
          {
            LODWORD(v73) = 0;
            v745 = *(_QWORD *)v767;
            __asm { FMOV            V0.2D, #0.5 }
            v730 = _Q0;
            v738 = v71;
            do
            {
              v77 = 0;
              v73 = (int)v73;
              v748 = v72;
              do
              {
                if (*(_QWORD *)v767 != v745)
                  objc_enumerationMutation(v71);
                v78 = *(void **)(*((_QWORD *)&v766 + 1) + 8 * v77);
                objc_msgSend(v78, "setNeedsTextUpdate:", 0);
                if (*(_BYTE *)(v45 + 48))
                  v79 = *(_BYTE *)(v45 + 49) != 0;
                else
                  v79 = 0;
                objc_msgSend(v78, "setIsOnSelectedRoute:", v79);
                v80 = objc_msgSend(v78, "polylineCoordinate");
                objc_msgSend(v78, "waypoint");
                v81 = objc_claimAutoreleasedReturnValue();
                v82 = (void *)v81;
                v83 = (uint64_t **)(v45 + 64);
                while (1)
                {
                  v84 = *v83;
                  v85 = v83;
                  if (!*v83)
                    break;
                  while (1)
                  {
                    v83 = (uint64_t **)v84;
                    v86 = v84[4];
                    if (v81 < v86)
                      break;
                    if (v86 >= v81)
                    {
                      v87 = (uint64_t *)v83;
                      goto LABEL_99;
                    }
                    v84 = v83[1];
                    if (!v84)
                    {
                      v85 = v83 + 1;
                      goto LABEL_95;
                    }
                  }
                }
LABEL_95:
                v87 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 72) + 16))(*(_QWORD *)(v45 + 72), 48, 8);
                v87[4] = (uint64_t)v82;
                v87[5] = 0xBF80000000000000;
                *v87 = 0;
                v87[1] = 0;
                v87[2] = (uint64_t)v83;
                *v85 = v87;
                v88 = **(_QWORD **)(v45 + 56);
                v89 = v87;
                if (v88)
                {
                  *(_QWORD *)(v45 + 56) = v88;
                  v89 = *v85;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v45 + 64), v89);
                v82 = 0;
                ++*(_QWORD *)(v45 + 80);
LABEL_99:
                v87[5] = v80;

                v90 = *(_QWORD *)(v45 + 88);
                objc_storeStrong((id *)(v90 + 32 * v73), v78);
                md::WaypointStore::buildFeatureForWaypoint((uint64_t *)&v758, v45, v78, 0);
                v91 = v758;
                *(_DWORD *)(v758 + 84) = v73;
                *(_DWORD *)(v91 + 72) = 1098907648;
                v92 = operator new();
                md::WaypointStoreFeatureNode::WaypointStoreFeatureNode(v92, v78, 0, &v758);
                v93 = v90 + 32 * v73;
                v96 = *(_QWORD *)(v93 + 8);
                v95 = (uint64_t *)(v93 + 8);
                v94 = v96;
                *v95 = v92;
                if (v96)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
                  v92 = *v95;
                }
                v98 = v757;
                v97 = (_QWORD *)v758;
                v99 = v756;
                if (v757)
                {
                  v100 = (unint64_t *)&v757->__shared_owners_;
                  do
                    v101 = __ldxr(v100);
                  while (__stxr(v101 + 1, v100));
                  p_shared_weak_owners = (unint64_t *)&v98->__shared_weak_owners_;
                  do
                    v103 = __ldxr(p_shared_weak_owners);
                  while (__stxr(v103 + 1, p_shared_weak_owners));
                  v97[36] = v92;
                  do
                    v104 = __ldxr(p_shared_weak_owners);
                  while (__stxr(v104 + 1, p_shared_weak_owners));
                }
                else
                {
                  *(_QWORD *)(v758 + 288) = v92;
                }
                v105 = (std::__shared_weak_count *)v97[38];
                v97[37] = v99;
                v97[38] = v98;
                if (v105)
                  std::__shared_weak_count::__release_weak(v105);
                if (v98)
                {
                  std::__shared_weak_count::__release_weak(v98);
                  v106 = (unint64_t *)&v98->__shared_owners_;
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
                v108 = *v95;
                v109 = *(uint64_t **)(v45 + 160);
                v110 = *(_QWORD *)(v45 + 168);
                if ((unint64_t)v109 < v110)
                {
                  if (v109)
                    *v109 = v108;
                  v111 = v109 + 1;
                  goto LABEL_144;
                }
                v112 = *(_QWORD *)(v45 + 152);
                v113 = ((uint64_t)v109 - v112) >> 3;
                v114 = v113 + 1;
                if ((unint64_t)(v113 + 1) >> 61)
                  abort();
                v115 = v110 - v112;
                if (v115 >> 2 > v114)
                  v114 = v115 >> 2;
                if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
                  v116 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v116 = v114;
                if (v116)
                {
                  v117 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 176) + 16))(*(_QWORD *)(v45 + 176), 8 * v116, 8);
                  v118 = (uint64_t *)(v117 + 8 * v113);
                  v119 = v117 + 8 * v116;
                  if (v117)
                    *v118 = v108;
                }
                else
                {
                  v119 = 0;
                  v118 = (uint64_t *)(8 * v113);
                }
                v121 = *(_QWORD *)(v45 + 152);
                v120 = *(_QWORD *)(v45 + 160);
                v122 = v120 - v121;
                if (v120 == v121)
                {
                  v124 = v118;
                  goto LABEL_142;
                }
                v123 = v122 - 8;
                if ((unint64_t)(v122 - 8) < 0x38)
                {
                  v124 = v118;
                }
                else
                {
                  v124 = v118;
                  if ((unint64_t)(v120 - (_QWORD)v118) >= 0x20)
                  {
                    v125 = (v123 >> 3) + 1;
                    v126 = v118 - 2;
                    v127 = (__int128 *)(v120 - 16);
                    v128 = v125 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v129 = *v127;
                      *((_OWORD *)v126 - 1) = *(v127 - 1);
                      *(_OWORD *)v126 = v129;
                      v126 -= 4;
                      v127 -= 2;
                      v128 -= 4;
                    }
                    while (v128);
                    v124 = &v118[-(v125 & 0x3FFFFFFFFFFFFFFCLL)];
                    v120 -= 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v125 == (v125 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_141;
                  }
                }
                do
                {
                  v130 = *(_QWORD *)(v120 - 8);
                  v120 -= 8;
                  *--v124 = v130;
                }
                while (v120 != v121);
LABEL_141:
                v120 = *(_QWORD *)(v45 + 152);
LABEL_142:
                v111 = v118 + 1;
                *(_QWORD *)(v45 + 152) = v124;
                *(_QWORD *)(v45 + 160) = v118 + 1;
                v131 = *(_QWORD *)(v45 + 168);
                *(_QWORD *)(v45 + 168) = v119;
                if (v120)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 176) + 40))(*(_QWORD *)(v45 + 176), v120, v131 - v120);
LABEL_144:
                *(_QWORD *)(v45 + 160) = v111;
                md::WaypointStore::buildFeatureForWaypoint(&v764, v45, v78, 1);
                v132 = v764;
                *(_DWORD *)(v764 + 80) = 1098907648;
                *(_DWORD *)(v132 + 84) = v73;
                v133 = operator new();
                md::WaypointStoreFeatureNode::WaypointStoreFeatureNode(v133, v78, 1, &v764);
                v134 = v90 + 32 * v73;
                v137 = *(_QWORD *)(v134 + 16);
                v136 = (uint64_t *)(v134 + 16);
                v135 = v137;
                *v136 = v133;
                if (v137)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
                  v133 = *v136;
                }
                v138 = (_QWORD *)v764;
                v139 = v756;
                v140 = v757;
                if (v757)
                {
                  v141 = (unint64_t *)&v757->__shared_owners_;
                  do
                    v142 = __ldxr(v141);
                  while (__stxr(v142 + 1, v141));
                  v143 = (unint64_t *)&v140->__shared_weak_owners_;
                  do
                    v144 = __ldxr(v143);
                  while (__stxr(v144 + 1, v143));
                  v138[36] = v133;
                  do
                    v145 = __ldxr(v143);
                  while (__stxr(v145 + 1, v143));
                }
                else
                {
                  *(_QWORD *)(v764 + 288) = v133;
                }
                v146 = (std::__shared_weak_count *)v138[38];
                v138[37] = v139;
                v138[38] = v140;
                if (v146)
                  std::__shared_weak_count::__release_weak(v146);
                if (v140)
                {
                  std::__shared_weak_count::__release_weak(v140);
                  v147 = (unint64_t *)&v140->__shared_owners_;
                  do
                    v148 = __ldaxr(v147);
                  while (__stlxr(v148 - 1, v147));
                  if (!v148)
                  {
                    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                    std::__shared_weak_count::__release_weak(v140);
                  }
                }
                v149 = *v136;
                v150 = *(uint64_t **)(v45 + 160);
                v151 = *(_QWORD *)(v45 + 168);
                if ((unint64_t)v150 < v151)
                {
                  if (v150)
                    *v150 = v149;
                  v152 = v150 + 1;
                  goto LABEL_189;
                }
                v153 = *(_QWORD *)(v45 + 152);
                v154 = ((uint64_t)v150 - v153) >> 3;
                v155 = v154 + 1;
                if ((unint64_t)(v154 + 1) >> 61)
                  abort();
                v156 = v151 - v153;
                if (v156 >> 2 > v155)
                  v155 = v156 >> 2;
                if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
                  v157 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v157 = v155;
                if (v157)
                {
                  v158 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 176) + 16))(*(_QWORD *)(v45 + 176), 8 * v157, 8);
                  v159 = (uint64_t *)(v158 + 8 * v154);
                  v160 = v158 + 8 * v157;
                  if (v158)
                    *v159 = v149;
                }
                else
                {
                  v160 = 0;
                  v159 = (uint64_t *)(8 * v154);
                }
                v71 = v738;
                v162 = *(_QWORD *)(v45 + 152);
                v161 = *(_QWORD *)(v45 + 160);
                v163 = v161 - v162;
                if (v161 == v162)
                {
                  v165 = v159;
                  goto LABEL_187;
                }
                v164 = v163 - 8;
                if ((unint64_t)(v163 - 8) < 0x38)
                {
                  v165 = v159;
                }
                else
                {
                  v165 = v159;
                  if ((unint64_t)(v161 - (_QWORD)v159) >= 0x20)
                  {
                    v166 = (v164 >> 3) + 1;
                    v167 = v159 - 2;
                    v168 = (__int128 *)(v161 - 16);
                    v169 = v166 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v170 = *v168;
                      *((_OWORD *)v167 - 1) = *(v168 - 1);
                      *(_OWORD *)v167 = v170;
                      v167 -= 4;
                      v168 -= 2;
                      v169 -= 4;
                    }
                    while (v169);
                    v165 = &v159[-(v166 & 0x3FFFFFFFFFFFFFFCLL)];
                    v161 -= 8 * (v166 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v166 == (v166 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_186;
                  }
                }
                do
                {
                  v171 = *(_QWORD *)(v161 - 8);
                  v161 -= 8;
                  *--v165 = v171;
                }
                while (v161 != v162);
LABEL_186:
                v161 = *(_QWORD *)(v45 + 152);
LABEL_187:
                v152 = v159 + 1;
                *(_QWORD *)(v45 + 152) = v165;
                *(_QWORD *)(v45 + 160) = v159 + 1;
                v172 = *(_QWORD *)(v45 + 168);
                *(_QWORD *)(v45 + 168) = v160;
                if (v161)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 176) + 40))(*(_QWORD *)(v45 + 176), v161, v172 - v161);
LABEL_189:
                *(_QWORD *)(v45 + 160) = v152;
                *(_QWORD *)(*v95 + 72) = *v136;
                v173 = v78;
                v174 = (char *)operator new(0x1D8uLL);
                *((_QWORD *)v174 + 2) = 0;
                *(_QWORD *)v174 = &off_1E42DD188;
                *((_QWORD *)v174 + 1) = 0;
                v762 = md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)(v174 + 24));
                v763 = (std::__shared_weak_count *)v174;
                *((_QWORD *)v174 + 26) = objc_msgSend(v173, "muid");
                objc_msgSend(v173, "routeCoordinate");
                v178 = *((_QWORD *)v174 + 27);
                if (*((_QWORD *)v174 + 28) != v178)
                {
                  v179 = v177;
                  if (fabs(v175) <= 85.0511169)
                  {
                    v741 = v176;
                    v184 = tan(v175 * 0.00872664626 + 0.785398163);
                    v185 = log(v184);
                    v186.f64[0] = v741;
                    v186.f64[1] = v185;
                    *(float64x2_t *)(v178 + 24) = vmlaq_f64(v730, (float64x2_t)xmmword_19FFB32D0, v186);
                    *(_WORD *)(v178 + 45) = 257;
                  }
                  else
                  {
                    v180 = v176 * 0.0174532925;
                    v181 = __sincos_stret(v175 * 0.0174532925);
                    v182 = 6378137.0 / sqrt(v181.__sinval * v181.__sinval * -0.00669437999 + 1.0);
                    v183 = __sincos_stret(v180);
                    *(double *)v178 = v182 * v181.__cosval * v183.__cosval;
                    *(double *)(v178 + 8) = v182 * v181.__cosval * v183.__sinval;
                    *(double *)(v178 + 16) = v181.__sinval * 0.99330562 * v182;
                    *(_BYTE *)(v178 + 44) = 1;
                  }
                  if (v179 != 1.79769313e308)
                  {
                    v187 = v179;
                    *(float *)(v178 + 40) = v187;
                  }
                }
                md::WaypointStore::styleAttributesForWaypoint(&v770, v45, v173, 2);
                v188 = v770;
                v770 = 0uLL;
                if (*((_QWORD *)&v188 + 1))
                {
                  v189 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
                  do
                    v190 = __ldxr(v189);
                  while (__stxr(v190 + 1, v189));
                }
                v191 = (std::__shared_weak_count *)*((_QWORD *)v174 + 8);
                *(_OWORD *)(v174 + 56) = v188;
                if (!v191)
                  goto LABEL_202;
                v192 = (unint64_t *)&v191->__shared_owners_;
                do
                  v193 = __ldaxr(v192);
                while (__stlxr(v193 - 1, v192));
                if (!v193)
                {
                  ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                  std::__shared_weak_count::__release_weak(v191);
                  if (!*((_QWORD *)&v188 + 1))
                    goto LABEL_208;
                }
                else
                {
LABEL_202:
                  if (!*((_QWORD *)&v188 + 1))
                    goto LABEL_208;
                }
                v194 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
                do
                  v195 = __ldaxr(v194);
                while (__stlxr(v195 - 1, v194));
                if (!v195)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v188 + 1) + 16))(*((_QWORD *)&v188 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v188 + 1));
                }
LABEL_208:
                v196 = (std::__shared_weak_count *)*((_QWORD *)&v770 + 1);
                if (*((_QWORD *)&v770 + 1))
                {
                  v197 = (unint64_t *)(*((_QWORD *)&v770 + 1) + 8);
                  do
                    v198 = __ldaxr(v197);
                  while (__stlxr(v198 - 1, v197));
                  if (!v198)
                  {
                    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                    std::__shared_weak_count::__release_weak(v196);
                  }
                }

                *((_DWORD *)v762 + 21) = v73;
                v199 = operator new();
                md::WaypointStoreFeatureNode::WaypointStoreFeatureNode(v199, v173, 2, &v762);
                v200 = v90 + 32 * v73;
                v203 = *(_QWORD *)(v200 + 24);
                v202 = (uint64_t *)(v200 + 24);
                v201 = v203;
                *v202 = v199;
                if (v203)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
                  v199 = *v202;
                }
                v204 = *(uint64_t **)(v45 + 160);
                v205 = *(_QWORD *)(v45 + 168);
                if ((unint64_t)v204 < v205)
                {
                  if (v204)
                    *v204 = v199;
                  v206 = v204 + 1;
                  goto LABEL_242;
                }
                v207 = *(_QWORD *)(v45 + 152);
                v208 = ((uint64_t)v204 - v207) >> 3;
                v209 = v208 + 1;
                if ((unint64_t)(v208 + 1) >> 61)
                  abort();
                v210 = v205 - v207;
                if (v210 >> 2 > v209)
                  v209 = v210 >> 2;
                if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFF8)
                  v211 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v211 = v209;
                if (v211)
                {
                  v212 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 176) + 16))(*(_QWORD *)(v45 + 176), 8 * v211, 8);
                  v213 = (uint64_t *)(v212 + 8 * v208);
                  v214 = v212 + 8 * v211;
                  if (v212)
                    *v213 = v199;
                }
                else
                {
                  v214 = 0;
                  v213 = (uint64_t *)(8 * v208);
                }
                v216 = *(_QWORD *)(v45 + 152);
                v215 = *(_QWORD *)(v45 + 160);
                v217 = v215 - v216;
                if (v215 == v216)
                {
                  v219 = v213;
                  goto LABEL_240;
                }
                v218 = v217 - 8;
                if ((unint64_t)(v217 - 8) < 0x38)
                {
                  v219 = v213;
                }
                else
                {
                  v219 = v213;
                  if ((unint64_t)(v215 - (_QWORD)v213) >= 0x20)
                  {
                    v220 = (v218 >> 3) + 1;
                    v221 = v213 - 2;
                    v222 = (__int128 *)(v215 - 16);
                    v223 = v220 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v224 = *v222;
                      *((_OWORD *)v221 - 1) = *(v222 - 1);
                      *(_OWORD *)v221 = v224;
                      v221 -= 4;
                      v222 -= 2;
                      v223 -= 4;
                    }
                    while (v223);
                    v219 = &v213[-(v220 & 0x3FFFFFFFFFFFFFFCLL)];
                    v215 -= 8 * (v220 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v220 == (v220 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_239;
                  }
                }
                do
                {
                  v225 = *(_QWORD *)(v215 - 8);
                  v215 -= 8;
                  *--v219 = v225;
                }
                while (v215 != v216);
LABEL_239:
                v215 = *(_QWORD *)(v45 + 152);
LABEL_240:
                v206 = v213 + 1;
                *(_QWORD *)(v45 + 152) = v219;
                *(_QWORD *)(v45 + 160) = v213 + 1;
                v226 = *(_QWORD *)(v45 + 168);
                *(_QWORD *)(v45 + 168) = v214;
                if (v215)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 176) + 40))(*(_QWORD *)(v45 + 176), v215, v226 - v215);
LABEL_242:
                *(_QWORD *)(v45 + 160) = v206;
                v227 = v763;
                if (!v763)
                  goto LABEL_246;
                v228 = (unint64_t *)&v763->__shared_owners_;
                do
                  v229 = __ldaxr(v228);
                while (__stlxr(v229 - 1, v228));
                if (!v229)
                {
                  ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                  std::__shared_weak_count::__release_weak(v227);
                  v230 = v765;
                  if (!v765)
                    goto LABEL_252;
                }
                else
                {
LABEL_246:
                  v230 = v765;
                  if (!v765)
                    goto LABEL_252;
                }
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldaxr(v231);
                while (__stlxr(v232 - 1, v231));
                if (!v232)
                {
                  ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                  std::__shared_weak_count::__release_weak(v230);
                }
LABEL_252:
                v233 = (std::__shared_weak_count *)*((_QWORD *)&v758 + 1);
                if (*((_QWORD *)&v758 + 1))
                {
                  v234 = (unint64_t *)(*((_QWORD *)&v758 + 1) + 8);
                  do
                    v235 = __ldaxr(v234);
                  while (__stlxr(v235 - 1, v234));
                  if (!v235)
                  {
                    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                    std::__shared_weak_count::__release_weak(v233);
                  }
                }
                ++v73;
                ++v77;
              }
              while (v77 != v748);
              v72 = -[std::__shared_weak_count countByEnumeratingWithState:objects:count:](v71, "countByEnumeratingWithState:objects:count:", &v766, &__p, 16);
            }
            while (v72);
          }

          objc_msgSend(*(id *)(v45 + 24), "anchorpoints");
          v236 = (void *)objc_claimAutoreleasedReturnValue();
          v237 = objc_msgSend(v236, "count");
          v238 = *(_QWORD *)(v45 + 248);
          v239 = *(_QWORD *)(v45 + 256);
          v240 = (v239 - v238) >> 5;
          v241 = v237 - v240;
          if (v237 <= v240)
          {
            if (v237 < v240)
            {
              for (k = v238 + 32 * v237; v239 != k; v239 -= 32)
              {
                v243 = *(_QWORD *)(v239 - 8);
                *(_QWORD *)(v239 - 8) = 0;
                if (v243)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v243 + 8))(v243, v241);
                v244 = *(_QWORD *)(v239 - 16);
                *(_QWORD *)(v239 - 16) = 0;
                if (v244)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v244 + 8))(v244, v241);
                v245 = *(_QWORD *)(v239 - 24);
                *(_QWORD *)(v239 - 24) = 0;
                if (v245)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v245 + 8))(v245, v241);

              }
              *(_QWORD *)(v45 + 256) = k;
            }
          }
          else
          {
            std::vector<md::WaypointStoreWaypointData,geo::StdAllocator<md::WaypointStoreWaypointData,mdm::Allocator>>::__append(v45 + 248, v241);
          }

          v760 = 0u;
          v761 = 0u;
          v758 = 0u;
          v759 = 0u;
          objc_msgSend(*(id *)(v45 + 24), "anchorpoints");
          v246 = (void *)objc_claimAutoreleasedReturnValue();
          v247 = objc_msgSend(v246, "countByEnumeratingWithState:objects:count:", &v758, &v770, 16);
          if (v247)
          {
            LODWORD(v248) = 0;
            v743 = v246;
            v746 = *(_QWORD *)v759;
            v249 = (uint64_t **)(v45 + 64);
            do
            {
              v250 = 0;
              v248 = (int)v248;
              v749 = v247;
              do
              {
                if (*(_QWORD *)v759 != v746)
                  objc_enumerationMutation(v246);
                v251 = *(void **)(*((_QWORD *)&v758 + 1) + 8 * v250);
                v252 = objc_msgSend(v251, "polylineCoordinate");
                objc_msgSend(v251, "waypoint");
                v253 = objc_claimAutoreleasedReturnValue();
                v254 = (void *)v253;
                v255 = *v249;
                v256 = (uint64_t **)(v45 + 64);
                v257 = (uint64_t **)(v45 + 64);
                if (*v249)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v257 = (uint64_t **)v255;
                      v258 = v255[4];
                      if (v253 >= v258)
                        break;
                      v255 = *v257;
                      v256 = v257;
                      if (!*v257)
                        goto LABEL_283;
                    }
                    if (v258 >= v253)
                      break;
                    v255 = v257[1];
                    if (!v255)
                    {
                      v256 = v257 + 1;
                      goto LABEL_283;
                    }
                  }
                  v259 = (uint64_t *)v257;
                }
                else
                {
LABEL_283:
                  v259 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 72) + 16))(*(_QWORD *)(v45 + 72), 48, 8);
                  v259[4] = (uint64_t)v254;
                  v259[5] = 0xBF80000000000000;
                  *v259 = 0;
                  v259[1] = 0;
                  v259[2] = (uint64_t)v257;
                  *v256 = v259;
                  v260 = **(_QWORD **)(v45 + 56);
                  v261 = v259;
                  if (v260)
                  {
                    *(_QWORD *)(v45 + 56) = v260;
                    v261 = *v256;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v45 + 64), v261);
                  v254 = 0;
                  ++*(_QWORD *)(v45 + 80);
                }
                v259[5] = v252;

                v246 = v743;
                objc_msgSend(v251, "setNeedsTextUpdate:", 0);
                if (*(_BYTE *)(v45 + 48))
                  v262 = *(_BYTE *)(v45 + 49) != 0;
                else
                  v262 = 0;
                objc_msgSend(v251, "setIsOnSelectedRoute:", v262);
                v263 = *(_QWORD *)(v45 + 248);
                objc_storeStrong((id *)(v263 + 32 * v248), v251);
                md::WaypointStore::buildFeatureForWaypoint(&v764, v45, v251, 3);
                *(_DWORD *)(v764 + 84) = v248;
                v264 = operator new();
                md::WaypointStoreFeatureNode::WaypointStoreFeatureNode(v264, v251, 3, &v764);
                v265 = v263 + 32 * v248;
                v268 = *(_QWORD *)(v265 + 16);
                v267 = (uint64_t *)(v265 + 16);
                v266 = v268;
                *v267 = v264;
                if (v268)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v266 + 8))(v266);
                  v264 = *v267;
                }
                v269 = *(uint64_t **)(v45 + 224);
                v270 = *(_QWORD *)(v45 + 232);
                if ((unint64_t)v269 < v270)
                {
                  if (v269)
                    *v269 = v264;
                  v271 = v269 + 1;
                  goto LABEL_319;
                }
                v272 = *(_QWORD *)(v45 + 216);
                v273 = ((uint64_t)v269 - v272) >> 3;
                v274 = v273 + 1;
                if ((unint64_t)(v273 + 1) >> 61)
                  abort();
                v275 = v270 - v272;
                if (v275 >> 2 > v274)
                  v274 = v275 >> 2;
                if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFF8)
                  v276 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v276 = v274;
                if (v276)
                {
                  v277 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 240) + 16))(*(_QWORD *)(v45 + 240), 8 * v276, 8);
                  v278 = (uint64_t *)(v277 + 8 * v273);
                  v279 = v277 + 8 * v276;
                  if (v277)
                    *v278 = v264;
                }
                else
                {
                  v279 = 0;
                  v278 = (uint64_t *)(8 * v273);
                }
                v281 = *(_QWORD *)(v45 + 216);
                v280 = *(_QWORD *)(v45 + 224);
                v282 = v280 - v281;
                if (v280 == v281)
                {
                  v284 = v278;
                  goto LABEL_317;
                }
                v283 = v282 - 8;
                if ((unint64_t)(v282 - 8) < 0x38)
                {
                  v284 = v278;
                }
                else
                {
                  v284 = v278;
                  if ((unint64_t)(v280 - (_QWORD)v278) >= 0x20)
                  {
                    v285 = (v283 >> 3) + 1;
                    v286 = v278 - 2;
                    v287 = (__int128 *)(v280 - 16);
                    v288 = v285 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v289 = *v287;
                      *((_OWORD *)v286 - 1) = *(v287 - 1);
                      *(_OWORD *)v286 = v289;
                      v286 -= 4;
                      v287 -= 2;
                      v288 -= 4;
                    }
                    while (v288);
                    v284 = &v278[-(v285 & 0x3FFFFFFFFFFFFFFCLL)];
                    v280 -= 8 * (v285 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v285 == (v285 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_316;
                  }
                }
                do
                {
                  v290 = *(_QWORD *)(v280 - 8);
                  v280 -= 8;
                  *--v284 = v290;
                }
                while (v280 != v281);
LABEL_316:
                v280 = *(_QWORD *)(v45 + 216);
LABEL_317:
                v271 = v278 + 1;
                *(_QWORD *)(v45 + 216) = v284;
                *(_QWORD *)(v45 + 224) = v278 + 1;
                v291 = *(_QWORD *)(v45 + 232);
                *(_QWORD *)(v45 + 232) = v279;
                if (v280)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 240) + 40))(*(_QWORD *)(v45 + 240), v280, v291 - v280);
LABEL_319:
                *(_QWORD *)(v45 + 224) = v271;
                v292 = v765;
                if (v765)
                {
                  v293 = (unint64_t *)&v765->__shared_owners_;
                  do
                    v294 = __ldaxr(v293);
                  while (__stlxr(v294 - 1, v293));
                  if (!v294)
                  {
                    ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                    std::__shared_weak_count::__release_weak(v292);
                  }
                }
                ++v248;
                ++v250;
              }
              while (v250 != v749);
              v247 = objc_msgSend(v743, "countByEnumeratingWithState:objects:count:", &v758, &v770, 16);
            }
            while (v247);
          }

          v45 = (uint64_t)v756;
        }
        v295 = *(_QWORD **)(v45 + 152);
        v296 = *(_QWORD **)(v45 + 160);
        if (v295 != v296)
        {
          do
          {
            (*(void (**)(_QWORD))(*(_QWORD *)*v295 + 88))(*v295);
            v297 = (void *)objc_claimAutoreleasedReturnValue();
            if (v756[6].i8[0])
              v298 = v756[6].i8[1] != 0;
            else
              v298 = 0;
            v299 = *v295;
            v300 = *(_BYTE *)(*v295 + 108);
            v301 = operator new(0x308uLL);
            v301[1] = 0;
            v301[2] = 0;
            *v301 = &off_1E42DD268;
            __p.__r_.__value_.__r.__words[0] = md::RouteWaypointLabelFeature::RouteWaypointLabelFeature((uint64_t)(v301 + 3), v297, v298, v300, (uint64_t *)(v299 + 88), *((_QWORD *)this + 1));
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v301;

            v302 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)this + 1) + 288) + 680);
            do
            {
              v303 = __ldaxr(v302);
              v304 = v303 + 1;
            }
            while (__stlxr(v304, v302));
            v301[12] = v304;
            v305 = (_QWORD *)v736[8];
            if ((unint64_t)v305 >= v736[9])
            {
              v309 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)(v736 + 7), (__int128 *)&__p);
            }
            else
            {
              if (v305)
              {
                *v305 = __p.__r_.__value_.__r.__words[0];
                size = __p.__r_.__value_.__l.__size_;
                v305[1] = __p.__r_.__value_.__l.__size_;
                if (size)
                {
                  v307 = (unint64_t *)(size + 8);
                  do
                    v308 = __ldxr(v307);
                  while (__stxr(v308 + 1, v307));
                }
              }
              v309 = v305 + 2;
            }
            v736[8] = (uint64_t)v309;
            v310 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v311 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v312 = __ldaxr(v311);
              while (__stlxr(v312 - 1, v311));
              if (!v312)
              {
                ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                std::__shared_weak_count::__release_weak(v310);
              }
            }
            ++v295;
          }
          while (v295 != v296);
          v45 = (uint64_t)v756;
        }
        v313 = *(_QWORD **)(v45 + 216);
        for (m = *(_QWORD **)(v45 + 224); v313 != m; ++v313)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v313 + 88))(*v313);
          v315 = (void *)objc_claimAutoreleasedReturnValue();
          if (v756[6].i8[0])
            v316 = v756[6].i8[1] != 0;
          else
            v316 = 0;
          v317 = *v313;
          v318 = *(_BYTE *)(*v313 + 108);
          v319 = operator new(0x308uLL);
          v319[1] = 0;
          v319[2] = 0;
          *v319 = &off_1E42DD268;
          __p.__r_.__value_.__r.__words[0] = md::RouteWaypointLabelFeature::RouteWaypointLabelFeature((uint64_t)(v319 + 3), v315, v316, v318, (uint64_t *)(v317 + 88), *((_QWORD *)this + 1));
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v319;

          v320 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)this + 1) + 288) + 680);
          do
          {
            v321 = __ldaxr(v320);
            v322 = v321 + 1;
          }
          while (__stlxr(v322, v320));
          v319[12] = v322;
          v323 = (_QWORD *)v736[8];
          if ((unint64_t)v323 >= v736[9])
          {
            v327 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)(v736 + 7), (__int128 *)&__p);
          }
          else
          {
            if (v323)
            {
              *v323 = __p.__r_.__value_.__r.__words[0];
              v324 = __p.__r_.__value_.__l.__size_;
              v323[1] = __p.__r_.__value_.__l.__size_;
              if (v324)
              {
                v325 = (unint64_t *)(v324 + 8);
                do
                  v326 = __ldxr(v325);
                while (__stxr(v326 + 1, v325));
              }
            }
            v327 = v323 + 2;
          }
          v736[8] = (uint64_t)v327;
          v328 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v329 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v330 = __ldaxr(v329);
            while (__stlxr(v330 - 1, v329));
            if (!v330)
            {
              ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
              std::__shared_weak_count::__release_weak(v328);
            }
          }
        }
        v331 = v757;
        if (v757)
        {
          v332 = (unint64_t *)&v757->__shared_owners_;
          do
            v333 = __ldaxr(v332);
          while (__stlxr(v333 - 1, v332));
          if (!v333)
          {
            ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
            std::__shared_weak_count::__release_weak(v331);
          }
        }

        goto LABEL_373;
      }
      do
        v31 = __ldxr(v18);
      while (__stxr(v31 + 1, v18));
      v32 = (unint64_t *)&v17[2];
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v17[4] = (int32x2_t)v21;
      v17[5] = (int32x2_t)v17;
      std::__shared_weak_count::__release_weak(v30);
    }
    else
    {
      do
        v34 = __ldxr(v18);
      while (__stxr(v34 + 1, v18));
      v35 = (unint64_t *)&v17[2];
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v17[4] = (int32x2_t)v21;
      v17[5] = (int32x2_t)v17;
    }
    do
      v37 = __ldaxr(v18);
    while (__stlxr(v37 - 1, v18));
    if (!v37)
    {
      (*(void (**)(int32x2_t *))(*(_QWORD *)v17 + 16))(v17);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
    }
    goto LABEL_37;
  }
  if (md::RouteLineSupport::didCurrentWaypointChange(this))
  {
    updated = md::RouteLineSupport::updateWaypointProximities((id *)v2);
    if (v4 == v3 && (updated & 1) == 0)
      goto LABEL_810;
  }
  else if (v4 == v3)
  {
    goto LABEL_810;
  }
LABEL_450:
  v376 = *((_QWORD *)v2 + 11);
  v729 = (uint64_t *)((char *)v2 + 88);
  for (n = *((_QWORD *)v2 + 12); n != v376; n -= 16)
  {
    v378 = *(std::__shared_weak_count **)(n - 8);
    if (v378)
    {
      v379 = (unint64_t *)&v378->__shared_owners_;
      do
        v380 = __ldaxr(v379);
      while (__stlxr(v380 - 1, v379));
      if (!v380)
      {
        ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
        std::__shared_weak_count::__release_weak(v378);
      }
    }
  }
  *((_QWORD *)this + 12) = v376;
  v381 = (md::RouteLineSupport *)*((_QWORD *)this + 5);
  if (v381 == (md::RouteLineSupport *)((char *)this + 48))
    goto LABEL_809;
  v382 = (int8x8_t)vdup_n_s32(0x437F0000u);
  while (2)
  {
    v747 = v381;
    v383 = *((_QWORD *)v381 + 5);
    if (!*(_BYTE *)(v383 + 50))
      goto LABEL_799;
    if (*((_BYTE *)this + 253))
      v384 = 13.0;
    else
      v384 = 16.0;
    v385 = *(_QWORD **)(v383 + 88);
    v386 = *(_QWORD **)(v383 + 96);
    while (v385 != v386)
    {
      v387 = v385[2];
      *(_BYTE *)(v387 + 80) = 0;
      *(_QWORD *)(v387 + 72) = 0;
      v388 = *(_QWORD *)(v385[2] + 88);
      *(_BYTE *)(v388 + 112) = 0;
      *(float *)(v388 + 80) = v384;
      v389 = v385[1];
      if (v389)
      {
        v390 = *(_QWORD *)(v389 + 88);
        *(float *)(v390 + 72) = v384;
        *(_BYTE *)(v390 + 112) = 0;
      }
      v391 = v385[3];
      if (v391)
        *(_BYTE *)(*(_QWORD *)(v391 + 88) + 112) = 0;
      v385 += 4;
    }
    v392 = *(_QWORD *)(v383 + 184);
    v393 = *(_QWORD *)(v383 + 192);
    if (v392 != v393)
    {
      do
      {
        v394 = *(_QWORD **)(*(_QWORD *)v392 + 88);
        v394[36] = 0;
        v394[37] = 0;
        v395 = (std::__shared_weak_count *)v394[38];
        v394[38] = 0;
        if (v395)
          std::__shared_weak_count::__release_weak(v395);
        v392 += 8;
      }
      while (v392 != v393);
      v392 = *(_QWORD *)(v383 + 184);
    }
    *(_QWORD *)(v383 + 192) = v392;
    v396 = *(_QWORD **)(v383 + 120);
    v397 = *(_QWORD **)(v383 + 128);
    while (v397 != v396)
    {
      v427 = *--v397;
      v426 = v427;
      *v397 = 0;
      if (v427)
        (*(void (**)(uint64_t))(*(_QWORD *)v426 + 8))(v426);
    }
    *(_QWORD *)(v383 + 128) = v396;
    memset(&__p, 0, sizeof(__p));
    v742 = v383;
    {
      v657 = operator new();
      *(_QWORD *)(v657 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v657 + 24) = "VectorKitLabels";
      *(_OWORD *)(v657 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v657 = &off_1E42B5668;
      *(_QWORD *)(v657 + 8) = "VectorKitLabels";
      *(_OWORD *)(v657 + 72) = 0u;
      *(_OWORD *)(v657 + 88) = 0u;
      *(_OWORD *)(v657 + 104) = 0u;
      *(_OWORD *)(v657 + 120) = 0u;
      *(_OWORD *)(v657 + 136) = 0u;
      *(_OWORD *)(v657 + 152) = 0u;
      *(_OWORD *)(v657 + 168) = 0u;
      *(_OWORD *)(v657 + 184) = 0u;
      *(_OWORD *)(v657 + 200) = 0u;
      *(_OWORD *)(v657 + 216) = 0u;
      *(_OWORD *)(v657 + 232) = 0u;
      *(_QWORD *)(v657 + 248) = 0;
      *(_OWORD *)(v657 + 56) = 0u;
      v658 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v657 + 56), 0);
      if ((_DWORD)v658)
        geo::read_write_lock::logFailure(v658, (uint64_t)"initialization", v659);
      v660 = malloc_create_zone(0, 0);
      *(_QWORD *)(v657 + 48) = v660;
      malloc_set_zone_name(v660, "VectorKitLabels");
      *(_QWORD *)(v657 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v657;
    }
    v773[0] = mdm::Allocator::instance(void)::alloc;
    v399 = v383;
    v400 = *(_QWORD *)(v383 + 96);
    v401 = *(_QWORD *)(v399 + 88);
    v402 = v400 - v401;
    if (v400 != v401)
    {
      if (v402 < 0)
        goto LABEL_875;
      v403 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v403;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v403;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v403[v402 >> 5];
      v404 = *(_QWORD *)(v742 + 88);
      v400 = *(_QWORD *)(v742 + 96);
      if (v404 != v400)
      {
        while (1)
        {
          v405 = *(id *)v404;
          if (objc_msgSend(v405, "when") == 3 || (objc_msgSend(v405, "isAtStart") & 1) != 0)
            goto LABEL_508;
          v406 = *(_QWORD *)(v404 + 16);
          v407 = __p.__r_.__value_.__r.__words[2];
          if ((unint64_t)v403 >= __p.__r_.__value_.__r.__words[2])
            break;
          if (v403)
            *v403 = v406;
          v408 = (std::string::size_type)(v403 + 1);
LABEL_507:
          __p.__r_.__value_.__l.__size_ = v408;
          v403 = (_QWORD *)v408;
LABEL_508:

          v404 += 32;
          if (v404 == v400)
          {
            v428 = v742;
            v400 = *(_QWORD *)(v742 + 88);
            v429 = *(_QWORD *)(v742 + 96);
            goto LABEL_521;
          }
        }
        v409 = __p.__r_.__value_.__r.__words[0];
        v410 = (uint64_t)((uint64_t)v403 - __p.__r_.__value_.__r.__words[0]) >> 3;
        v411 = v410 + 1;
        if ((unint64_t)(v410 + 1) >> 61)
          abort();
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v411)
          v411 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
        if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
          v412 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v412 = v411;
        if (v412)
        {
          v413 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v773[0] + 16))(v773[0], 8 * v412, 8);
          v414 = (char *)(v413 + 8 * v410);
          v415 = v413 + 8 * v412;
          if (v413)
            *(_QWORD *)v414 = v406;
          v416 = (std::string::size_type)v403 - v409;
          if (v403 != (_QWORD *)v409)
          {
LABEL_499:
            v417 = v416 - 8;
            if (v417 < 0x138
              || &v414[-(v417 & 0xFFFFFFFFFFFFFFF8) - 8] > v414 - 8
              || (_QWORD *)((char *)v403 - (v417 & 0xFFFFFFFFFFFFFFF8) - 8) > v403 - 1
              || (unint64_t)((char *)v403 - v414) < 0x20)
            {
              v418 = v403;
              v419 = (std::string::size_type)v414;
            }
            else
            {
              v421 = (v417 >> 3) + 1;
              v418 = &v403[-(v421 & 0x3FFFFFFFFFFFFFFCLL)];
              v422 = v414 - 16;
              v423 = (__int128 *)(v403 - 2);
              v424 = v421 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v425 = *v423;
                *((_OWORD *)v422 - 1) = *(v423 - 1);
                *(_OWORD *)v422 = v425;
                v422 -= 32;
                v423 -= 2;
                v424 -= 4;
              }
              while (v424);
              v419 = (std::string::size_type)&v414[-8 * (v421 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v421 == (v421 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_502;
            }
            do
            {
              v420 = *--v418;
              *(_QWORD *)(v419 - 8) = v420;
              v419 -= 8;
            }
            while (v418 != (_QWORD *)v409);
LABEL_502:
            v403 = (_QWORD *)v409;
            goto LABEL_505;
          }
        }
        else
        {
          v415 = 0;
          v414 = (char *)(8 * v410);
          v416 = (std::string::size_type)v403 - __p.__r_.__value_.__r.__words[0];
          if (v403 != (_QWORD *)__p.__r_.__value_.__l.__data_)
            goto LABEL_499;
        }
        v419 = (std::string::size_type)v414;
LABEL_505:
        v408 = (std::string::size_type)(v414 + 8);
        __p.__r_.__value_.__r.__words[0] = v419;
        __p.__r_.__value_.__r.__words[2] = v415;
        if (v403)
          (*(void (**)(_QWORD, _QWORD *, std::string::size_type))(*(_QWORD *)v773[0] + 40))(v773[0], v403, v407 - (_QWORD)v403);
        goto LABEL_507;
      }
    }
    v429 = v400;
    v428 = v742;
LABEL_521:
    v430 = v429 - v400;
    v431 = v430 >> 5;
    v432 = *(_QWORD *)(v428 + 120);
    v433 = v428;
    if (v430 >> 5 <= (unint64_t)((*(_QWORD *)(v428 + 136) - v432) >> 3))
      goto LABEL_543;
    if (v430 < 0)
LABEL_875:
      abort();
    v434 = *(_QWORD *)(v742 + 128);
    v435 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v742 + 144) + 16))(*(_QWORD *)(v742 + 144), v430 >> 2, 8);
    v436 = v434 - v432;
    v437 = v435 + ((v434 - v432) & 0xFFFFFFFFFFFFFFF8);
    v438 = v435 + 8 * v431;
    v439 = *(char **)(v742 + 120);
    v440 = *(char **)(v742 + 128);
    v433 = v742;
    if (v440 != v439)
    {
      v441 = v440 - v439 - 8;
      if (v441 > 0x77)
      {
        v444 = (unint64_t)&v440[-(v441 & 0xFFFFFFFFFFFFFFF8) - 8] >= v437
            || (v436 & 0xFFFFFFFFFFFFFFF8) - (v441 & 0xFFFFFFFFFFFFFFF8) + v435 - 8 >= (unint64_t)v440;
        v442 = v437;
        if (v444)
        {
          v445 = v436 >> 3;
          v446 = (v441 >> 3) + 1;
          v447 = (_OWORD *)(v435 + 8 * v445 - 16);
          v448 = v440 - 32;
          v449 = v446 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v451 = *(_OWORD *)v448;
            v450 = *((_OWORD *)v448 + 1);
            *(_OWORD *)v448 = 0uLL;
            *((_OWORD *)v448 + 1) = 0uLL;
            v448 -= 32;
            *(v447 - 1) = v451;
            *v447 = v450;
            v447 -= 2;
            v449 -= 4;
          }
          while (v449);
          v442 = v437 - 8 * (v446 & 0x3FFFFFFFFFFFFFFCLL);
          v440 -= 8 * (v446 & 0x3FFFFFFFFFFFFFFCLL);
          if (v446 == (v446 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_537;
        }
      }
      else
      {
        v442 = v437;
      }
      do
      {
        v452 = *((_QWORD *)v440 - 1);
        v440 -= 8;
        *(_QWORD *)v440 = 0;
        *(_QWORD *)(v442 - 8) = v452;
        v442 -= 8;
      }
      while (v440 != v439);
LABEL_537:
      v440 = *(char **)(v742 + 120);
      v453 = *(char **)(v742 + 128);
      *(_QWORD *)(v742 + 120) = v442;
      *(_QWORD *)(v742 + 128) = v437;
      v443 = *(_QWORD *)(v742 + 136);
      *(_QWORD *)(v742 + 136) = v438;
      while (v453 != v440)
      {
        v455 = *((_QWORD *)v453 - 1);
        v453 -= 8;
        v454 = v455;
        *(_QWORD *)v453 = 0;
        if (v455)
          (*(void (**)(uint64_t))(*(_QWORD *)v454 + 8))(v454);
      }
      v433 = v742;
      if (v440)
        goto LABEL_542;
      goto LABEL_543;
    }
    *(_QWORD *)(v742 + 120) = v437;
    *(_QWORD *)(v742 + 128) = v437;
    v443 = *(_QWORD *)(v742 + 136);
    *(_QWORD *)(v742 + 136) = v438;
    if (v440)
LABEL_542:
      (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v433 + 144) + 40))(*(_QWORD *)(v433 + 144), v440, v443 - (_QWORD)v440);
LABEL_543:
    v456 = fminf(*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v433 + 32) + 336) + 136)+ 20 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v433 + 32) + 336) + 158)+ 12), 2.0)* 30.0;
    *(float *)&v766 = v384;
    *((double *)&v766 + 1) = v456;
    *(_QWORD *)&v770 = &off_1E42CBBA0;
    *((_QWORD *)&v770 + 1) = v433;
    v771 = &v770;
    md::LabelClusterBuilder::createClusters((uint64_t)&v766, (uint64_t)&__p, (uint64_t)&v770);
    v458 = v771;
    if (v771 == &v770)
    {
      v458 = &v770;
      v459 = 4;
      goto LABEL_547;
    }
    if (v771)
    {
      v459 = 5;
LABEL_547:
      (*(void (**)(void))(*(_QWORD *)v458 + 8 * v459))();
    }
    if (__p.__r_.__value_.__r.__words[0])
      (*(void (**)(_QWORD, std::string::size_type, std::string::size_type))(*(_QWORD *)v773[0] + 40))(v773[0], __p.__r_.__value_.__r.__words[0], __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]);
    *(_BYTE *)(v433 + 50) = 0;
    v460 = *(int8x8_t ***)(v433 + 120);
    v461 = v382;
    v731 = *(int8x8_t ***)(v433 + 128);
    if (v460 == v731)
      goto LABEL_733;
    *(_QWORD *)&v457 = 0x8000007F7FFFFFLL;
    v732 = v457;
    do
    {
      v744 = v460;
      v462 = *v460;
      if ((*v460)[10].i8[0] != 1)
        goto LABEL_552;
      v750 = (std::__shared_weak_count *)operator new(0x1D8uLL);
      v750->__shared_owners_ = 0;
      v463 = (unint64_t *)&v750->__shared_owners_;
      v750->__shared_weak_owners_ = 0;
      v750->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD188;
      v737 = (int64x2_t *)&v750[1];
      md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)&v750[1]);
      v464 = *(std::__shared_weak_count **)(v742 + 16);
      if (!v464 || (v465 = *(_QWORD *)(v742 + 8), (v466 = std::__shared_weak_count::lock(v464)) == 0))
      {
        std::__throw_bad_weak_ptr[abi:nn180100]();
        __break(1u);
      }
      v739 = v466;
      v467 = (unint64_t *)&v466->__shared_owners_;
      do
        v468 = __ldxr(v467);
      while (__stxr(v468 + 1, v467));
      v469 = (unint64_t *)&v466->__shared_weak_owners_;
      do
        v470 = __ldxr(v469);
      while (__stxr(v470 + 1, v469));
      v750[13].__vftable = (std::__shared_weak_count_vtbl *)v462;
      do
        v471 = __ldxr(v469);
      while (__stxr(v471 + 1, v469));
      shared_weak_owners = (std::__shared_weak_count *)v750[13].__shared_weak_owners_;
      v473 = v739;
      v750[13].__shared_owners_ = v465;
      v750[13].__shared_weak_owners_ = (uint64_t)v739;
      if (shared_weak_owners)
      {
        std::__shared_weak_count::__release_weak(shared_weak_owners);
        v473 = v739;
      }
      std::__shared_weak_count::__release_weak(v473);
      do
        v474 = __ldaxr(v467);
      while (__stlxr(v474 - 1, v467));
      if (!v474)
      {
        ((void (*)(std::__shared_weak_count *))v739->__on_zero_shared)(v739);
        std::__shared_weak_count::__release_weak(v739);
      }
      LODWORD(v750[4].__vftable) = v462[1].i32[0];
      LODWORD(v750[4].__shared_owners_) = v462[1].i32[1];
      (*(void (**)(_QWORD))(**(_QWORD **)&v462[21] + 88))(*(_QWORD *)&v462[21]);
      v735 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v735, "name");
      v475 = (void *)objc_claimAutoreleasedReturnValue();
      v476 = v475 == 0;

      if (!v476)
      {
        objc_msgSend(v735, "name");
        v477 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        md::LabelExternalFeature::addTextForZoom(v737, 0, 0, (const char *)objc_msgSend(v477, "UTF8String"), 0);

      }
      v478 = v462[23].u32[0];
      if (v478 >= 0x63)
        v479 = 99;
      else
        v479 = v478;
      v480 = v742;
      v481 = *(void **)(v742 + 40);
      *(_QWORD *)&v766 = 0;
      *(_QWORD *)&v758 = 0;
      objc_msgSend(v481, "getClusterAnnotationTextForClusterCount:text:locale:", v479, &v766, &v758);
      v482 = (id)v766;
      v733 = (id)v758;
      v734 = v482;
      if (objc_msgSend(v482, "length"))
      {
        v480 = v742;
        md::LabelExternalFeature::addTextForZoom(v737, 0, 2, (const char *)objc_msgSend(objc_retainAutorelease(v482), "UTF8String"), 0);
      }
      v483 = v750[9].__vftable;
      if ((std::__shared_weak_count_vtbl *)v750[9].__shared_owners_ != v483)
      {
        v483->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v462[2];
        v483->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v462[3];
        v483->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v462[4];
        v483->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v462[5];
        v483->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v462[6];
        v484 = v462[7].i32[0];
        *(_DWORD *)((char *)&v483[1].~__shared_weak_count + 3) = *(__int32 *)((char *)v462[7].i32 + 3);
        LODWORD(v483[1].~__shared_weak_count) = v484;
      }
      {
        v589 = operator new();
        *(_QWORD *)(v589 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v589 + 24) = "VectorKitLabels";
        *(_OWORD *)(v589 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v589 = &off_1E42B5668;
        *(_QWORD *)(v589 + 8) = "VectorKitLabels";
        *(_OWORD *)(v589 + 72) = 0u;
        *(_OWORD *)(v589 + 88) = 0u;
        *(_OWORD *)(v589 + 104) = 0u;
        *(_OWORD *)(v589 + 120) = 0u;
        *(_OWORD *)(v589 + 136) = 0u;
        *(_OWORD *)(v589 + 152) = 0u;
        *(_OWORD *)(v589 + 168) = 0u;
        *(_OWORD *)(v589 + 184) = 0u;
        *(_OWORD *)(v589 + 200) = 0u;
        *(_OWORD *)(v589 + 216) = 0u;
        *(_OWORD *)(v589 + 232) = 0u;
        *(_QWORD *)(v589 + 248) = 0;
        *(_OWORD *)(v589 + 56) = 0u;
        v590 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v589 + 56), 0);
        if ((_DWORD)v590)
          geo::read_write_lock::logFailure(v590, (uint64_t)"initialization", v591);
        v592 = malloc_create_zone(0, 0);
        *(_QWORD *)(v589 + 48) = v592;
        malloc_set_zone_name(v592, "VectorKitLabels");
        *(_QWORD *)(v589 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v589;
        v480 = v742;
      }
      v486 = mdm::Allocator::instance(void)::alloc;
      if (*(_BYTE *)(v480 + 48))
        v487 = *(_BYTE *)(v480 + 49) != 0;
      else
        v487 = 0;
      v488 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
      v489 = v488;
      if (v488)
        *v488 = 0x500010023;
      v490 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v486 + 16))(v486, 16, 4);
      v491 = v490;
      if (v490)
      {
        v492 = 0x100010002;
        if (!v487)
          v492 = 65538;
        v490[1] = v492;
      }
      *v490 = *v489;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v486 + 40))(v486, v489, 8);
      v493 = v462[21];
      v494 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v486 + 16))(v486, 32, 4);
      v495 = v494;
      if (v494)
        v494[2] = 0x300000005;
      v494[1] = v491[1];
      *v494 = *v491;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v486 + 40))(v486, v491, 16);
      v495[3] = 0x100010024;
      v496 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v486 + 16))(v486, 64, 4);
      v497 = v496;
      if (v496)
        v496[4] = 0x20001001FLL;
      v498 = v496 + 8;
      v496[3] = v495[3];
      v496[2] = v495[2];
      v496[1] = v495[1];
      *v496 = *v495;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v486 + 40))(v486, v495, 32);
      v497[5] = 0x10001002DLL;
      v499 = v462[23].u32[0];
      v500 = 0x50403020000uLL >> (8 * v499);
      _CF = v499 >= 6;
      v501 = 0x60001005CLL;
      if (!_CF)
        v501 = ((v500 & 7) << 32) | 0x1005C;
      v497[6] = v501;
      v502 = v497 + 7;
      if (v493)
      {
        (*(void (**)(int8x8_t))(**(_QWORD **)&v493 + 88))(v493);
        v503 = (id)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v503, "isAtEnd") & 1) != 0)
        {
          v504 = 0x400000000;
        }
        else if (objc_msgSend(v503, "isAtStart"))
        {
          v504 = 0x300000000;
        }
        else
        {
          v504 = 0x200000000;
        }

        *v502 = v504 | 0x2C;
        if (*(_BYTE *)(*(_QWORD *)&v493 + 116))
        {
          v506 = *(unsigned int *)(*(_QWORD *)&v493 + 112);
          v507 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v486 + 16))(v486, 128, 4);
          v508 = (char *)v507;
          v509 = (uint64_t *)(v507 + 64);
          if (v507)
            *v509 = (v506 << 32) | 6;
          if ((unint64_t)((char *)v498 - (char *)v509) >= 0x20)
          {
            v510 = *((_OWORD *)v497 + 3);
            *(_OWORD *)(v507 + 32) = *((_OWORD *)v497 + 2);
            *(_OWORD *)(v507 + 48) = v510;
            v511 = *((_OWORD *)v497 + 1);
            *(_OWORD *)v507 = *(_OWORD *)v497;
            *(_OWORD *)(v507 + 16) = v511;
          }
          else
          {
            *(_QWORD *)(v507 + 56) = v497[7];
            *(_QWORD *)(v507 + 48) = v497[6];
            *(_QWORD *)(v507 + 40) = v497[5];
            *(_QWORD *)(v507 + 32) = v497[4];
            *(_QWORD *)(v507 + 24) = v497[3];
            *(_QWORD *)(v507 + 16) = v497[2];
            *(_QWORD *)(v507 + 8) = v497[1];
            *(_QWORD *)v507 = *v497;
          }
          v498 = (uint64_t *)(v507 + 128);
          v502 = (uint64_t *)(v507 + 72);
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v486 + 40))(v486, v497, 64);
          if (!*(_BYTE *)(*(_QWORD *)&v493 + 124))
          {
LABEL_606:
            v505 = (uint64_t)v498;
            goto LABEL_634;
          }
        }
        else
        {
          v502 = v497 + 8;
          v508 = (char *)v497;
          if (!*(_BYTE *)(*(_QWORD *)&v493 + 124))
            goto LABEL_606;
        }
        v512 = *(unsigned int *)(*(_QWORD *)&v493 + 120);
        v505 = (uint64_t)v498;
        if (v502 < v498)
        {
          *v502++ = (v512 << 32) | 4;
          goto LABEL_634;
        }
        v513 = ((char *)v502 - v508) >> 3;
        v514 = v513 + 1;
        if ((unint64_t)(v513 + 1) >> 61)
          abort();
        v515 = (char *)v498 - v508;
        if (((char *)v498 - v508) >> 2 > v514)
          v514 = ((char *)v498 - v508) >> 2;
        if (v515 >= 0x7FFFFFFFFFFFFFF8)
          v516 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v516 = v514;
        if (v516)
        {
          v517 = v512;
          v518 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v486 + 16))(v486, 8 * v516, 4);
          v519 = (uint64_t *)(v518 + 8 * v513);
          if (v518)
            *v519 = (v517 << 32) | 4;
          v515 = (char *)v498 - v508;
          v505 = v518 + 8 * v516;
          v520 = (char *)((char *)v502 - v508);
          if (v502 != (uint64_t *)v508)
          {
LABEL_621:
            v521 = (unint64_t)(v520 - 8);
            if (v521 < 0x38 || (unint64_t)((char *)v502 - (char *)v519) <= 0x1F)
            {
              v523 = v502;
              v497 = v519;
            }
            else
            {
              v522 = (v521 >> 3) + 1;
              v523 = &v502[-(v522 & 0x3FFFFFFFFFFFFFFCLL)];
              v524 = v519 - 2;
              v525 = v502 - 2;
              v526 = v522 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v527 = *(_OWORD *)v525;
                *((_OWORD *)v524 - 1) = *((_OWORD *)v525 - 1);
                *(_OWORD *)v524 = v527;
                v524 -= 4;
                v525 -= 4;
                v526 -= 4;
              }
              while (v526);
              v497 = &v519[-(v522 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v522 == (v522 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_631;
            }
            do
            {
              v528 = *--v523;
              *--v497 = v528;
            }
            while (v523 != (uint64_t *)v508);
LABEL_631:
            v502 = (uint64_t *)v508;
            goto LABEL_632;
          }
        }
        else
        {
          v505 = 0;
          v519 = (uint64_t *)(8 * v513);
          v520 = (char *)((char *)v502 - v508);
          if (v502 != (uint64_t *)v508)
            goto LABEL_621;
        }
        v515 = (char *)v498 - (char *)v502;
        v497 = v519;
LABEL_632:
        v529 = v519 + 1;
        (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(_QWORD *)v486 + 40))(v486, v502, v515);
        v502 = v529;
        goto LABEL_633;
      }
      v505 = (uint64_t)(v497 + 8);
LABEL_633:
      v508 = (char *)v497;
LABEL_634:
      _ZNSt3__111make_sharedB8nn180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(&v770);
      v530 = v770;
      if ((((char *)v502 - v508) & 0x7FFFFFFF8) != 0)
      {
        v531 = 0;
        v532 = 0;
        v533 = ((unint64_t)((char *)v502 - v508) >> 3);
        v534 = *(_BYTE *)(v770 + 33);
        while (1)
        {
          v535 = v534;
          v536 = *(_QWORD **)v530;
          if (v534)
            break;
LABEL_636:
          v536[v535] = *(_QWORD *)&v508[8 * v531];
          v534 = *(_BYTE *)(v530 + 33) + 1;
          *(_BYTE *)(v530 + 33) = v534;
          ++v531;
          v532 = 1;
          if (v531 == v533)
          {
            v536 = *(_QWORD **)v530;
            v535 = v534;
LABEL_653:
            qsort(v536, v535, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
            goto LABEL_654;
          }
        }
        if (v534 > 0x1Fu)
        {
          do
          {
            v540 = 0;
            v541 = (int *)v536;
            while (1)
            {
              v542 = *v541;
              v541 += 2;
              if (v542 == *(_DWORD *)&v508[8 * v531])
                break;
              if (v535 == ++v540)
                goto LABEL_647;
            }
            HIDWORD(v536[v540]) = *(_DWORD *)&v508[8 * v531 + 4];
LABEL_647:
            ++v531;
          }
          while (v531 != v533);
        }
        else
        {
          do
          {
            v537 = 0;
            v538 = (int *)v536;
            while (1)
            {
              v539 = *v538;
              v538 += 2;
              if (v539 == *(_DWORD *)&v508[8 * v531])
                break;
              if (v535 == ++v537)
                goto LABEL_636;
            }
            HIDWORD(v536[v537]) = *(_DWORD *)&v508[8 * v531++ + 4];
          }
          while (v531 != v533);
        }
        if ((v532 & 1) != 0)
          goto LABEL_653;
      }
LABEL_654:
      if (v508)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v486 + 40))(v486, v508, v505 - (_QWORD)v508);
        v530 = v770;
      }
      v543 = (std::__shared_weak_count *)*((_QWORD *)&v770 + 1);
      v770 = 0uLL;
      if (v543)
      {
        v544 = (unint64_t *)&v543->__shared_owners_;
        do
          v545 = __ldxr(v544);
        while (__stxr(v545 + 1, v544));
      }
      v546 = (std::__shared_weak_count *)v750[2].__shared_weak_owners_;
      v750[2].__shared_owners_ = v530;
      v750[2].__shared_weak_owners_ = (uint64_t)v543;
      if (!v546)
        goto LABEL_663;
      v547 = (unint64_t *)&v546->__shared_owners_;
      do
        v548 = __ldaxr(v547);
      while (__stlxr(v548 - 1, v547));
      if (!v548)
      {
        ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
        std::__shared_weak_count::__release_weak(v546);
        if (!v543)
          goto LABEL_669;
      }
      else
      {
LABEL_663:
        if (!v543)
          goto LABEL_669;
      }
      v549 = (unint64_t *)&v543->__shared_owners_;
      do
        v550 = __ldaxr(v549);
      while (__stlxr(v550 - 1, v549));
      if (!v550)
      {
        ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
        std::__shared_weak_count::__release_weak(v543);
      }
LABEL_669:
      v551 = (std::__shared_weak_count *)*((_QWORD *)&v770 + 1);
      if (*((_QWORD *)&v770 + 1))
      {
        v552 = (unint64_t *)(*((_QWORD *)&v770 + 1) + 8);
        do
          v553 = __ldaxr(v552);
        while (__stlxr(v553 - 1, v552));
        if (!v553)
        {
          ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
          std::__shared_weak_count::__release_weak(v551);
        }
      }
      extractCustomImageData(&__p, v735);
      md::LabelExternalFeature::setCustomImageData((uint64_t)v737, &__p);
      v554 = v774;
      if (v774 == v773)
      {
        v554 = v773;
        v555 = 4;
      }
      else
      {
        if (!v774)
          goto LABEL_679;
        v555 = 5;
      }
      (*(void (**)(void))(*v554 + 8 * v555))();
LABEL_679:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);

      do
        v556 = __ldaxr(v467);
      while (__stlxr(v556 - 1, v467));
      v433 = v742;
      if (!v556)
      {
        ((void (*)(std::__shared_weak_count *))v739->__on_zero_shared)(v739);
        std::__shared_weak_count::__release_weak(v739);
      }
      do
        v557 = __ldxr(v463);
      while (__stxr(v557 + 1, v463));
      v558 = (std::__shared_weak_count *)v462[12];
      v462[11] = (int8x8_t)v737;
      v462[12] = (int8x8_t)v750;
      if (v558)
      {
        v559 = (unint64_t *)&v558->__shared_owners_;
        do
          v560 = __ldaxr(v559);
        while (__stlxr(v560 - 1, v559));
        if (!v560)
        {
          ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
          std::__shared_weak_count::__release_weak(v558);
        }
      }
      do
        v561 = __ldaxr(v463);
      while (__stlxr(v561 - 1, v463));
      if (!v561)
      {
        ((void (*)(std::__shared_weak_count *))v750->__on_zero_shared)(v750);
        std::__shared_weak_count::__release_weak(v750);
      }
      v562 = *v744;
      v563 = *(int8x8_t ***)(v742 + 192);
      v564 = *(_QWORD *)(v742 + 200);
      if ((unint64_t)v563 >= v564)
      {
        v566 = *(_QWORD *)(v742 + 184);
        v567 = ((uint64_t)v563 - v566) >> 3;
        v568 = v567 + 1;
        if ((unint64_t)(v567 + 1) >> 61)
          abort();
        v569 = v564 - v566;
        if (v569 >> 2 > v568)
          v568 = v569 >> 2;
        if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFF8)
          v570 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v570 = v568;
        if (v570)
        {
          v571 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v742 + 208) + 16))(*(_QWORD *)(v742 + 208), 8 * v570, 8);
          v572 = (int8x8_t **)(v571 + 8 * v567);
          v573 = v571 + 8 * v570;
          if (v571)
            *v572 = v562;
        }
        else
        {
          v573 = 0;
          v572 = (int8x8_t **)(8 * v567);
        }
        v433 = v742;
        v575 = *(_QWORD *)(v742 + 184);
        v574 = *(_QWORD *)(v742 + 192);
        v576 = v574 - v575;
        if (v574 == v575)
        {
          v578 = v572;
          goto LABEL_719;
        }
        v577 = v576 - 8;
        if ((unint64_t)(v576 - 8) < 0x38)
        {
          v578 = v572;
        }
        else
        {
          v578 = v572;
          if ((unint64_t)(v574 - (_QWORD)v572) >= 0x20)
          {
            v579 = (v577 >> 3) + 1;
            v580 = v572 - 2;
            v581 = (__int128 *)(v574 - 16);
            v582 = v579 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v583 = *v581;
              *((_OWORD *)v580 - 1) = *(v581 - 1);
              *(_OWORD *)v580 = v583;
              v580 -= 4;
              v581 -= 2;
              v582 -= 4;
            }
            while (v582);
            v578 = &v572[-(v579 & 0x3FFFFFFFFFFFFFFCLL)];
            v574 -= 8 * (v579 & 0x3FFFFFFFFFFFFFFCLL);
            if (v579 == (v579 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_718;
          }
        }
        do
        {
          v584 = *(int8x8_t **)(v574 - 8);
          v574 -= 8;
          *--v578 = v584;
        }
        while (v574 != v575);
LABEL_718:
        v574 = *(_QWORD *)(v742 + 184);
LABEL_719:
        v565 = v572 + 1;
        *(_QWORD *)(v742 + 184) = v578;
        *(_QWORD *)(v742 + 192) = v572 + 1;
        v585 = *(_QWORD *)(v742 + 200);
        *(_QWORD *)(v742 + 200) = v573;
        if (v574)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v742 + 208) + 40))(*(_QWORD *)(v742 + 208), v574, v585 - v574);
        goto LABEL_721;
      }
      if (v563)
        *v563 = v562;
      v565 = v563 + 1;
LABEL_721:
      *(_QWORD *)(v433 + 192) = v565;
      v460 = v744;
      v586.i32[0] = (__int32)(*v744)[1];
      *((_QWORD *)&v587 + 1) = *((_QWORD *)&v732 + 1);
      v586.i32[1] = DWORD1(v732);
      v588.i32[0] = v732;
      v588.i32[1] = HIDWORD(*(_QWORD *)&(*v744)[1]);
      *(int8x8_t *)&v587 = vbsl_s8((int8x8_t)vcgt_f32(v588, v586), (*v744)[1], *(int8x8_t *)&v732);
      v732 = v587;
LABEL_552:
      ++v460;
    }
    while (v460 != v731);
    _ZF = *((float *)&v732 + 1) == 1.1755e-38 || *(float *)&v732 == 3.4028e38;
    if (_ZF)
      v594 = 0;
    else
      v594 = -1;
    v461 = vbsl_s8((int8x8_t)vdup_n_s32(v594), *(int8x8_t *)&v732, v382);
LABEL_733:
    *(int8x8_t *)(v433 + 280) = v461;
    v595 = *(_QWORD *)(v433 + 88);
    v596 = *(_QWORD *)(v433 + 96);
    while (v595 != v596)
    {
      v597 = *(_QWORD *)(v595 + 16);
      if (*(_BYTE *)(v597 + 80))
      {
        v598 = *(_QWORD *)(v597 + 88);
        v599 = *(_DWORD *)(v597 + 8);
        *(_BYTE *)(v598 + 112) = 1;
        *(_DWORD *)(v598 + 76) = v599;
        v600 = *(_QWORD *)(v597 + 72);
        if (v600)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v600 + 32))(v600) & 4) != 0)
          {
            v601 = *(_QWORD *)(v597 + 72);
            if (v601)
            {
              while (1)
              {
                v602 = v601;
                if (*(_BYTE *)(v601 + 80) == 1 && *(_QWORD *)(v601 + 136) == v597)
                  break;
                v603 = *(_QWORD *)(v601 + 72);
                if (!v603)
                  goto LABEL_749;
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v603 + 32))(v603) & 4) == 0)
                  goto LABEL_749;
                v604 = *(_QWORD *)(v602 + 72);
                if (!v604)
                  goto LABEL_749;
                v605 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v604 + 32))(v604);
                v601 = 0;
                v597 = v602;
                if ((v605 & 4) != 0)
                {
                  v601 = *(_QWORD *)(v602 + 72);
                  v597 = v602;
                }
              }
              v606 = *(_QWORD *)(v595 + 24);
              if (v606)
              {
                v607 = *(_QWORD *)(v606 + 88);
                v608 = *(_DWORD *)(v602 + 12);
                *(_BYTE *)(v607 + 112) = 1;
                *(_DWORD *)(v607 + 76) = v608;
              }
            }
          }
        }
      }
LABEL_749:
      if (objc_msgSend(*(id *)v595, "when") == 3)
      {
        v609 = *(_QWORD *)(v595 + 8);
        if (v609)
        {
          v610 = *(_QWORD *)(v609 + 88);
          *(_BYTE *)(v610 + 112) = 1;
          *(_DWORD *)(v610 + 76) = 1093664768;
        }
      }
      v595 += 32;
    }
    v611 = v747;
    v613 = *((_QWORD *)v747 + 11);
    v614 = *((_QWORD *)v747 + 12);
    v612 = (uint64_t *)((char *)v747 + 88);
    if (v614 != v613)
    {
      do
      {
        v615 = *(std::__shared_weak_count **)(v614 - 8);
        if (v615)
        {
          v616 = (unint64_t *)&v615->__shared_owners_;
          do
            v617 = __ldaxr(v616);
          while (__stlxr(v617 - 1, v616));
          if (!v617)
          {
            ((void (*)(std::__shared_weak_count *))v615->__on_zero_shared)(v615);
            std::__shared_weak_count::__release_weak(v615);
          }
        }
        v614 -= 16;
      }
      while (v614 != v613);
      v614 = *v612;
      v611 = v747;
    }
    *((_QWORD *)v611 + 12) = v613;
    v618 = *(_QWORD *)(*((_QWORD *)v611 + 5) + 192) - *(_QWORD *)(*((_QWORD *)v611 + 5) + 184);
    v619 = v618 >> 3;
    if (v618 >> 3 > (unint64_t)((*((_QWORD *)v611 + 13) - v614) >> 4))
    {
      if ((unint64_t)v618 >= 0x7FFFFFFFFFFFFFF9)
        abort();
      v620 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v747 + 14) + 16))(*((_QWORD *)v747 + 14), 2 * v618, 8);
      v621 = v620 + 16 * ((v613 - v614) >> 4);
      v622 = v620 + 16 * v619;
      v623 = (_QWORD *)*((_QWORD *)v747 + 11);
      v624 = (_QWORD *)*((_QWORD *)v747 + 12);
      if (v624 == v623)
      {
        *((_QWORD *)v747 + 11) = v621;
        *((_QWORD *)v747 + 12) = v621;
        v628 = *((_QWORD *)v747 + 13);
        *((_QWORD *)v747 + 13) = v622;
      }
      else
      {
        v625 = v620 + 16 * ((v613 - v614) >> 4);
        do
        {
          v626 = *((_OWORD *)v624 - 1);
          v624 -= 2;
          *(_OWORD *)(v625 - 16) = v626;
          v625 -= 16;
          *v624 = 0;
          v624[1] = 0;
        }
        while (v624 != v623);
        v624 = (_QWORD *)*((_QWORD *)v747 + 11);
        v627 = (_QWORD *)*((_QWORD *)v747 + 12);
        *((_QWORD *)v747 + 11) = v625;
        *((_QWORD *)v747 + 12) = v621;
        v628 = *((_QWORD *)v747 + 13);
        *((_QWORD *)v747 + 13) = v622;
        while (v627 != v624)
        {
          v629 = (std::__shared_weak_count *)*(v627 - 1);
          if (v629)
          {
            v630 = (unint64_t *)&v629->__shared_owners_;
            do
              v631 = __ldaxr(v630);
            while (__stlxr(v631 - 1, v630));
            if (!v631)
            {
              ((void (*)(std::__shared_weak_count *))v629->__on_zero_shared)(v629);
              std::__shared_weak_count::__release_weak(v629);
            }
          }
          v627 -= 2;
        }
      }
      v611 = v747;
      if (v624)
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)v747 + 14) + 40))(*((_QWORD *)v747 + 14), v624, v628 - (_QWORD)v624);
    }
    v632 = *((_QWORD *)v611 + 5);
    v633 = *(_QWORD **)(v632 + 184);
    v634 = *(_QWORD **)(v632 + 192);
    while (v633 != v634)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v633 + 88))(*v633);
      v635 = (void *)objc_claimAutoreleasedReturnValue();
      v636 = *((_QWORD *)v747 + 5);
      if (*(_BYTE *)(v636 + 48))
        v637 = *(_BYTE *)(v636 + 49) != 0;
      else
        v637 = 0;
      v638 = *v633;
      v639 = *(_BYTE *)(*v633 + 108);
      v640 = operator new(0x308uLL);
      v640[1] = 0;
      v640[2] = 0;
      *v640 = &off_1E42DD268;
      __p.__r_.__value_.__r.__words[0] = md::RouteWaypointLabelFeature::RouteWaypointLabelFeature((uint64_t)(v640 + 3), v635, v637, v639, (uint64_t *)(v638 + 88), *((_QWORD *)this + 1));
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v640;

      v641 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)this + 1) + 288) + 680);
      do
      {
        v642 = __ldaxr(v641);
        v643 = v642 + 1;
      }
      while (__stlxr(v643, v641));
      v640[12] = v643;
      v644 = (_QWORD *)*((_QWORD *)v747 + 12);
      if ((unint64_t)v644 >= *((_QWORD *)v747 + 13))
      {
        v648 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)v612, (__int128 *)&__p);
      }
      else
      {
        if (v644)
        {
          *v644 = __p.__r_.__value_.__r.__words[0];
          v645 = __p.__r_.__value_.__l.__size_;
          v644[1] = __p.__r_.__value_.__l.__size_;
          if (v645)
          {
            v646 = (unint64_t *)(v645 + 8);
            do
              v647 = __ldxr(v646);
            while (__stxr(v647 + 1, v646));
          }
        }
        v648 = v644 + 2;
      }
      *((_QWORD *)v747 + 12) = v648;
      v649 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v650 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v651 = __ldaxr(v650);
        while (__stlxr(v651 - 1, v650));
        if (!v651)
        {
          ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
          std::__shared_weak_count::__release_weak(v649);
        }
      }
      ++v633;
    }
    v652 = (_QWORD *)*((_QWORD *)v747 + 7);
    for (ii = (_QWORD *)*((_QWORD *)v747 + 8); v652 != ii; v652 += 2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v652 + 648))(*v652);
LABEL_799:
    std::vector<std::shared_ptr<md::RouteWaypointLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteWaypointLabelFeature>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>,std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>>(v729, *((_QWORD *)this + 12), *((_QWORD **)v747 + 11), *((_QWORD **)v747 + 12), (uint64_t)(*((_QWORD *)v747 + 12) - *((_QWORD *)v747 + 11)) >> 4);
    std::vector<std::shared_ptr<md::RouteWaypointLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteWaypointLabelFeature>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>,std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>>(v729, *((_QWORD *)this + 12), *((_QWORD **)v747 + 7), *((_QWORD **)v747 + 8), (uint64_t)(*((_QWORD *)v747 + 8) - *((_QWORD *)v747 + 7)) >> 4);
    v654 = v747;
    v655 = (md::RouteLineSupport *)*((_QWORD *)v747 + 1);
    if (v655)
    {
      do
      {
        v656 = v655;
        v655 = *(md::RouteLineSupport **)v655;
      }
      while (v655);
    }
    else
    {
      do
      {
        v656 = (md::RouteLineSupport *)*((_QWORD *)v654 + 2);
        _ZF = *(_QWORD *)v656 == (_QWORD)v654;
        v654 = v656;
      }
      while (!_ZF);
    }
    v381 = v656;
    if (v656 != (md::RouteLineSupport *)((char *)this + 48))
      continue;
    break;
  }
LABEL_809:
  md::RouteLineSupport::restyleFeatures(this);
  v2 = this;
LABEL_810:
  v661 = (uint64_t *)*((_QWORD *)v2 + 11);
  v662 = (uint64_t *)*((_QWORD *)v2 + 12);
  if (v661 == v662)
    return;
  v663 = 0;
  v664 = 0;
  v665 = 0;
  while (2)
  {
    if (*(_BYTE *)(*v661 + 697) != 2)
    {
      v666 = *(id *)(*v661 + 680);
      v667 = v666;
      if (v666 && objc_msgSend(v666, "needsTextUpdate"))
      {
        v668 = *v661;
        if ((unint64_t)v664 < v665)
        {
          *(_QWORD *)v664 = v668;
          v664 += 8;
          goto LABEL_818;
        }
        v670 = (v664 - v663) >> 3;
        v671 = v670 + 1;
        if ((unint64_t)(v670 + 1) >> 61)
          abort();
        if ((uint64_t)(v665 - (_QWORD)v663) >> 2 > v671)
          v671 = (uint64_t)(v665 - (_QWORD)v663) >> 2;
        if (v665 - (unint64_t)v663 >= 0x7FFFFFFFFFFFFFF8)
          v672 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v672 = v671;
        if (v672)
        {
          if (v672 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v673 = v672;
          v674 = operator new(8 * v672);
          v672 = v673;
        }
        else
        {
          v674 = 0;
        }
        v675 = &v674[8 * v670];
        *(_QWORD *)v675 = v668;
        v669 = v675 + 8;
        if (v664 != v663)
        {
          v676 = v664 - 8 - v663;
          if (v676 < 0x168)
          {
            v677 = v664;
            goto LABEL_833;
          }
          if (&v674[v664 - v663 - 8 - (v676 & 0xFFFFFFFFFFFFFFF8)] > &v674[v664 - v663 - 8])
          {
            v677 = v664;
            goto LABEL_833;
          }
          if (&v664[-(v676 & 0xFFFFFFFFFFFFFFF8) - 8] > v664 - 8)
          {
            v677 = v664;
            goto LABEL_833;
          }
          if ((unint64_t)(v663 - v674) < 0x20)
          {
            v677 = v664;
            goto LABEL_833;
          }
          v680 = (v676 >> 3) + 1;
          v677 = &v664[-8 * (v680 & 0x3FFFFFFFFFFFFFFCLL)];
          v681 = &v674[8 * v670 - 16];
          v682 = v664 - 16;
          v683 = v680 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v684 = *(_OWORD *)v682;
            *(v681 - 1) = *((_OWORD *)v682 - 1);
            *v681 = v684;
            v681 -= 2;
            v682 -= 32;
            v683 -= 4;
          }
          while (v683);
          v675 -= 8 * (v680 & 0x3FFFFFFFFFFFFFFCLL);
          if (v680 != (v680 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_833:
              v678 = *((_QWORD *)v677 - 1);
              v677 -= 8;
              *((_QWORD *)v675 - 1) = v678;
              v675 -= 8;
            }
            while (v677 != v663);
          }
        }
        v679 = &v674[8 * v672];
        if (v663)
          operator delete(v663);
        v663 = v675;
        v665 = (unint64_t)v679;
      }
      else
      {
LABEL_818:
        v669 = v664;
      }

      v664 = v669;
    }
    v661 += 2;
    if (v661 != v662)
      continue;
    break;
  }
  if (v663 != v664)
  {
    v685 = v663;
    do
    {
      v686 = *(id *)(*(_QWORD *)v685 + 680);
      objc_msgSend(v686, "setNeedsTextUpdate:", 0);
      v687 = (int64x2_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v685 + 72))(*(_QWORD *)v685);
      md::WaypointStore::updateExternalFeatureText(v687, (md::LabelExternalPointFeature *)v686, v688);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)v685 + 32))(*(_QWORD *)v685, 0, 0);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v685 + 536))(*(_QWORD *)v685, *((_QWORD *)this + 1));

      v685 += 8;
    }
    while (v685 != v664);
  }
  if (v663)
    operator delete(v663);
}

void sub_19F275790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a34);

  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy((uint64_t)&a37, a38);
  _Unwind_Resume(a1);
}

BOOL md::RouteLineSupport::didCurrentWaypointChange(md::RouteLineSupport *this)
{
  void *v2;
  id v3;
  void *v4;
  _BOOL8 v5;
  int v6;

  v2 = (void *)*((_QWORD *)this + 30);
  v3 = *((id *)this + 3);
  objc_msgSend(v3, "currentWaypoint");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2 == v4)
  {
    v6 = *((unsigned __int8 *)this + 248);
    v5 = v6 != objc_msgSend(*((id *)this + 3), "currentWaypointProximity");
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

void sub_19F275DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *md::StandardLabeler::layoutLabelsForStaging(md::StandardLabeler *this)
{
  md::Label **v2;
  md::Label **i;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  float32x2_t **v9;
  float32x2_t **j;
  uint64_t v11;
  _QWORD *v12;
  uint64_t **k;
  uint64_t **m;
  uint64_t **n;
  uint64_t **ii;
  md::Label **v17;
  md::Label **v18;
  unint64_t v19;
  md::Label *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v32;
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *result;
  uint64_t v41;
  __int16 v42;
  char v43;
  uint8_t buf[8];
  uint64_t v45;
  _QWORD v46[3];
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v42 = 257;
  v43 = 1;
  v2 = (md::Label **)*((_QWORD *)this + 9);
  for (i = (md::Label **)*((_QWORD *)this + 10); v2 != i; v2 += 2)
    md::Label::layoutForStaging(*v2, *((_QWORD *)this + 3), *((md::LabelPool **)this + 6), &v42);
  v49 = v48;
  v46[0] = &off_1E42CCC38;
  v47 = v46;
  v48[0] = &off_1E42CCBF0;
  v51 = v50;
  v50[0] = &off_1E42CCC38;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v4 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsCollision", (const char *)&unk_1A0189141, buf, 2u);
  }

  v5 = v47;
  if (v47 == v46)
  {
    v6 = 4;
    v5 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_12;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  v7 = v49;
  if (v49 == v48)
  {
    v8 = 4;
    v7 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_17;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_17:
  (*(void (**)(md::StandardLabeler *))(*(_QWORD *)this + 448))(this);
  v9 = (float32x2_t **)*((_QWORD *)this + 17);
  for (j = (float32x2_t **)*((_QWORD *)this + 18); v9 != j; ++v9)
    md::LabelCollider::addCollidableItem(*((char **)this + 7), *v9);
  *((_DWORD *)this + 95) = (*(uint64_t (**)(md::StandardLabeler *))(*(_QWORD *)this + 440))(this);
  *((_QWORD *)this + 48) = 0;
  v11 = *((_QWORD *)this + 3);
  if (*(_BYTE *)(v11 + 3610))
  {
    v12 = (_QWORD *)*((_QWORD *)this + 6);
    for (k = (uint64_t **)v12[35]; k; k = (uint64_t **)*k)
      (*(void (**)(uint64_t *, uint64_t))(*k[6] + 16))(k[6], v11);
    for (m = (uint64_t **)v12[49]; m; m = (uint64_t **)*m)
      (*(void (**)(uint64_t *, uint64_t))(*m[3] + 16))(m[3], v11);
    for (n = (uint64_t **)v12[56]; n; n = (uint64_t **)*n)
      (*(void (**)(uint64_t *, uint64_t))(*n[3] + 16))(n[3], v11);
    for (ii = (uint64_t **)v12[42]; ii; ii = (uint64_t **)*ii)
      (*(void (**)(uint64_t *, uint64_t))(*ii[2] + 16))(ii[2], v11);
  }
  v17 = (md::Label **)*((_QWORD *)this + 9);
  v18 = (md::Label **)*((_QWORD *)this + 10);
  if (v17 != v18)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 3) + 3610))
    {
      while (1)
      {
        v20 = *v17;
        if (!*((_BYTE *)*v17 + 1290))
          goto LABEL_33;
        if (*((_BYTE *)v20 + 1247))
          md::Label::updateReserveSpaceCollisionItem(*v17);
        v21 = *((_QWORD *)v20 + 42);
        if (v21)
          break;
LABEL_45:
        v27 = *((_QWORD *)this + 7);
        v28 = *((_QWORD *)*v17 + 41);
        v19 = *(_QWORD *)(v27 + 136);
        v29 = *(_QWORD *)(v27 + 144);
        v30 = (2 * v19) | 1;
        if (v19 >= v29 && v29 < v30)
        {
          if (v30 <= 0x7D0)
            v32 = 2000;
          else
            v32 = (2 * v19) | 1;
          v33 = (1 << -__clz(v32 - 1));
          v34 = malloc_type_realloc(*(void **)(v27 + 152), 8 * v33, 0x2004093837F09uLL);
          if (!v34)
            goto LABEL_33;
          *(_QWORD *)(v27 + 144) = v33;
          *(_QWORD *)(v27 + 152) = v34;
          v19 = *(_QWORD *)(v27 + 136);
        }
        *(_QWORD *)(*(_QWORD *)(v27 + 152) + 8 * v19) = v28;
        *(_QWORD *)(v27 + 136) = v19 + 1;
LABEL_33:
        v17 += 2;
        if (v17 == v18)
        {
          v38 = *((_QWORD *)this + 7);
          v39 = *(_QWORD *)(v38 + 136);
          if (v39)
          {
            std::__introsort<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **,false>(*(_QWORD *)(v38 + 152), (int8x16_t *)(*(_QWORD *)(v38 + 152) + 8 * v39), 126 - 2 * __clz(v39), 1);
            md::LabelCollider::collideItems(v38, *(md::LabelCollisionItemBase ***)(v38 + 152), *(_QWORD *)(v38 + 136));
            LODWORD(v39) = *(_DWORD *)(*((_QWORD *)this + 7) + 136);
          }
          *((_DWORD *)this + 96) = v39;
          goto LABEL_62;
        }
      }
      v22 = *((_QWORD *)this + 7);
      v23 = *(_QWORD *)(v22 + 136);
      v24 = *(_QWORD *)(v22 + 144);
      v25 = (2 * v23) | 1;
      if (v23 >= v24 && v24 < v25)
      {
        if (v25 <= 0x7D0)
          v35 = 2000;
        else
          v35 = (2 * v23) | 1;
        v36 = (1 << -__clz(v35 - 1));
        v37 = malloc_type_realloc(*(void **)(v22 + 152), 8 * v36, 0x2004093837F09uLL);
        if (!v37)
          goto LABEL_44;
        *(_QWORD *)(v22 + 144) = v36;
        *(_QWORD *)(v22 + 152) = v37;
        v23 = *(_QWORD *)(v22 + 136);
      }
      *(_QWORD *)(*(_QWORD *)(v22 + 152) + 8 * v23) = v21;
      *(_QWORD *)(v22 + 136) = v23 + 1;
LABEL_44:
      ++*((_DWORD *)this + 97);
      goto LABEL_45;
    }
    *(_WORD *)buf = 0;
    v45 = 0;
    do
    {
      if (*((_BYTE *)*v17 + 1290))
        md::Label::setCollisionResult((uint64_t)*v17, (uint64_t)buf);
      v17 += 2;
    }
    while (v17 != v18);
  }
LABEL_62:
  if (!v51)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19F2762C8);
  }
  (*(void (**)(_QWORD *))(*v51 + 48))(v51);
  result = v51;
  if (v51 == v50)
  {
    v41 = 4;
    result = v50;
  }
  else
  {
    if (!v51)
      return result;
    v41 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v41))();
}

void sub_19F2762D8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t md::Label::updateReserveSpaceCollisionItem(md::Label *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  char v13;
  int v14;
  char v15;

  *((_BYTE *)this + 1247) = 0;
  v2 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_BYTE *)this + 1248) = 0;
  *((_BYTE *)this + 1277) = 1;
  v15 = 0;
  if (*((_DWORD *)this + 181) != *((_DWORD *)this + 180))
  {
    result = *((_QWORD *)this + 36);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 504))(result, &v15);
      if (result)
      {
        if (v15)
        {
          *((_BYTE *)this + 1248) = 1;
        }
        else
        {
          v4 = result;
          v5 = operator new();
          *(_QWORD *)(v5 + 32) = 0;
          *(_QWORD *)(v5 + 44) = 0;
          *(_BYTE *)(v5 + 52) = 4;
          *(_QWORD *)v5 = &off_1E42948F0;
          *(_QWORD *)(v5 + 56) = this;
          *(_WORD *)(v5 + 64) = 1;
          v6 = *((_QWORD *)this + 42);
          *((_QWORD *)this + 42) = v5;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          v7 = operator new();
          *(_QWORD *)v7 = &off_1E42A3CE8;
          *(_QWORD *)(v7 + 8) = v4;
          *(_BYTE *)(v7 + 16) = 1;
          v8 = *((_QWORD *)this + 43);
          *((_QWORD *)this + 43) = v7;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          v9 = *((_QWORD *)this + 45);
          v10 = *((unsigned __int8 *)this + 369);
          v11 = (_DWORD *)*((_QWORD *)this + 42);
          v12 = SBYTE4(v9);
          if (SBYTE4(v9) >= 7)
            v12 = 7;
          if (v12 <= -3)
            LOBYTE(v12) = -3;
          v13 = v12 + 3;
          if ((BYTE4(v9) + 3) < 0xBu)
            v13 = BYTE4(v9) + 3;
          v14 = 1 << v13;
          v11[8] = v14;
          v11[9] = LabelCollisionOverlayGroupToLayersCollided[v10] | v14;
          v11[11] = 1 << SBYTE6(v9);
          v11[12] = v9;
          result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 752))(*((_QWORD *)this + 36));
          *((_BYTE *)this + 1277) = result ^ 1;
        }
      }
    }
  }
  return result;
}

char *md::MapStandardLabeler::addAdditionalItemsToCollider(char *this)
{
  float32x2_t *v1;

  v1 = (float32x2_t *)*((_QWORD *)this + 55);
  if (v1)
    return md::LabelCollider::addCollidableItem(*((char **)this + 7), v1);
  return this;
}

uint64_t md::MapStandardLabeler::addLinesToCollider(md::MapStandardLabeler *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  md::LabelMapTileCollisionInfo *v8;
  md::LabelMapTileCollisionInfo *v9;
  md::LabelMapTileCollisionInfo *v10;

  if (!*(_BYTE *)(*((_QWORD *)this + 3) + 3621))
    return 0;
  v2 = *((_QWORD *)this + 6);
  v3 = *(_DWORD *)(*((_QWORD *)this + 7) + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  if (v4 == v5)
  {
    v6 = *(_DWORD *)(*((_QWORD *)this + 7) + 8);
  }
  else
  {
    do
    {
      v7 = *(_QWORD **)v4;
      if (!*(_BYTE *)(*(_QWORD *)v4 + 122))
      {
        v8 = (md::LabelMapTileCollisionInfo *)v7[55];
        if (v8)
        {
          md::LabelMapTileCollisionInfo::addItemsToCollider(v8, *((md::LabelManager **)this + 3), *((md::LabelCollider **)this + 7));
          v7 = *(_QWORD **)v4;
        }
        v9 = (md::LabelMapTileCollisionInfo *)v7[57];
        if (v9)
        {
          md::LabelMapTileCollisionInfo::addItemsToCollider(v9, *((md::LabelManager **)this + 3), *((md::LabelCollider **)this + 7));
          v7 = *(_QWORD **)v4;
        }
        v10 = (md::LabelMapTileCollisionInfo *)v7[59];
        if (v10)
          md::LabelMapTileCollisionInfo::addItemsToCollider(v10, *((md::LabelManager **)this + 3), *((md::LabelCollider **)this + 7));
      }
      v4 += 16;
    }
    while (v4 != v5);
    v6 = *(_DWORD *)(*((_QWORD *)this + 7) + 8);
  }
  return (v6 - v3);
}

uint64_t std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    v3 = result;
    std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy(v3, a2[1]);
    v4 = (std::__shared_weak_count *)a2[5];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 48);
  }
  return result;
}

void md::LabelPool::addGlobalFeatureLabels(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t **v9;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  md::Label *v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  md::Label *v30;
  unsigned __int8 *v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  md::Label *v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t **v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v47;
  md::Label *v48;
  unsigned __int8 *v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  md::Label *v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  md::Label *v68;
  unsigned __int8 *v69;
  int v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  __int128 v76;
  md::Label *v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  char *v80;
  char *v81;

  if (a3 != a4)
  {
    v5 = a3;
    v8 = 0;
    v9 = (uint64_t **)(a1 + 680);
    __asm { FMOV            V0.2D, #1.0 }
    v76 = _Q0;
    while (1)
    {
      if (*(_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v5 + 552))(*v5, 0, 0, 0, 0))
      {
        v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 264))(*v5);
        if ((v15 - 6) < 2)
        {
          v36 = *(_QWORD *)(a1 + 8);
          LODWORD(v80) = 1;
          md::LabelPool::labelForCustomFeature((uint64_t *)&v77, a1, v36, v5, (unsigned int *)&v80, 1);
          v37 = v77;
          if (v77)
          {
            v38 = *v9;
            v39 = v9;
            v40 = v9;
            if (*v9)
            {
              while (1)
              {
                while (1)
                {
                  v40 = (uint64_t **)v38;
                  v41 = v38[4];
                  if ((unint64_t)v77 >= v41)
                    break;
                  v38 = *v40;
                  v39 = v40;
                  if (!*v40)
                    goto LABEL_46;
                }
                if (v41 >= (unint64_t)v77)
                  break;
                v38 = v40[1];
                if (!v38)
                {
                  v39 = v40 + 1;
                  goto LABEL_46;
                }
              }
            }
            else
            {
LABEL_46:
              v42 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 688) + 16))(*(_QWORD *)(a1 + 688), 48, 8);
              v43 = v42;
              v44 = v78;
              v42[4] = (uint64_t)v77;
              v42[5] = (uint64_t)v44;
              if (v44)
              {
                p_shared_owners = (unint64_t *)&v44->__shared_owners_;
                do
                  v46 = __ldxr(p_shared_owners);
                while (__stxr(v46 + 1, p_shared_owners));
              }
              *v42 = 0;
              v42[1] = 0;
              v42[2] = (uint64_t)v40;
              *v39 = v42;
              v47 = **(_QWORD **)(a1 + 672);
              if (v47)
              {
                *(_QWORD *)(a1 + 672) = v47;
                v43 = *v39;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 680), v43);
              ++*(_QWORD *)(a1 + 696);
              v48 = v77;
              v49 = (unsigned __int8 *)v77 + 1296;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 + 1, v49));
              if (!v50 && !*((_BYTE *)v48 + 820))
              {
                *((_BYTE *)v48 + 1214) = -1;
                md::Label::updateStateMachineForStaging((uint64_t)v48, 0, 37);
              }
              *((_BYTE *)v48 + 1261) = 0;
              *((_QWORD *)v48 + 153) = 0;
              v37 = v77;
            }
            md::Label::assignWorldPointToLabel(v37, *(LabelManager **)(a1 + 8));
          }
          v51 = v78;
          if (v78)
          {
            v52 = (unint64_t *)&v78->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          goto LABEL_3;
        }
        if (v15 != 1)
        {
          if (v15 == 3)
          {
            v16 = *v5;
            md::LineLabelFeature::updatePositions((md::LineLabelFeature *)*v5, *(md::LabelManager **)(a1 + 8), a2, 0);
            v77 = 0;
            v78 = 0;
            v79 = v76;
            md::LineLabelPlacer::placementsForRect(&v80, v16 + 192, (double *)&v77, a2);
            if (v8)
              operator delete(v8);
            v8 = v80;
            v17 = (unsigned int *)v81;
            v18 = (unsigned int *)v80;
            if (v80 != v81)
            {
              do
              {
                md::LabelPool::labelForCustomFeature((uint64_t *)&v77, a1, *(_QWORD *)(a1 + 8), v5, v18, 1);
                v19 = v77;
                if (v77)
                {
                  v20 = *v9;
                  v21 = v9;
                  v22 = v9;
                  if (*v9)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v22 = (uint64_t **)v20;
                        v23 = v20[4];
                        if ((unint64_t)v77 >= v23)
                          break;
                        v20 = *v22;
                        v21 = v22;
                        if (!*v22)
                          goto LABEL_21;
                      }
                      if (v23 >= (unint64_t)v77)
                        break;
                      v20 = v22[1];
                      if (!v20)
                      {
                        v21 = v22 + 1;
                        goto LABEL_21;
                      }
                    }
                  }
                  else
                  {
LABEL_21:
                    v24 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 688) + 16))(*(_QWORD *)(a1 + 688), 48, 8);
                    v25 = v24;
                    v26 = v78;
                    v24[4] = (uint64_t)v77;
                    v24[5] = (uint64_t)v26;
                    if (v26)
                    {
                      v27 = (unint64_t *)&v26->__shared_owners_;
                      do
                        v28 = __ldxr(v27);
                      while (__stxr(v28 + 1, v27));
                    }
                    *v24 = 0;
                    v24[1] = 0;
                    v24[2] = (uint64_t)v22;
                    *v21 = v24;
                    v29 = **(_QWORD **)(a1 + 672);
                    if (v29)
                    {
                      *(_QWORD *)(a1 + 672) = v29;
                      v25 = *v21;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 680), v25);
                    ++*(_QWORD *)(a1 + 696);
                    v30 = v77;
                    v31 = (unsigned __int8 *)v77 + 1296;
                    do
                      v32 = __ldaxr(v31);
                    while (__stlxr(v32 + 1, v31));
                    if (!v32 && !*((_BYTE *)v30 + 820))
                    {
                      *((_BYTE *)v30 + 1214) = -1;
                      md::Label::updateStateMachineForStaging((uint64_t)v30, 0, 37);
                    }
                    *((_BYTE *)v30 + 1261) = 0;
                    *((_QWORD *)v30 + 153) = 0;
                    v19 = v77;
                  }
                  md::Label::assignWorldPointToLabel(v19, *(LabelManager **)(a1 + 8));
                }
                v33 = v78;
                if (v78)
                {
                  v34 = (unint64_t *)&v78->__shared_owners_;
                  do
                    v35 = __ldaxr(v34);
                  while (__stlxr(v35 - 1, v34));
                  if (!v35)
                  {
                    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                    std::__shared_weak_count::__release_weak(v33);
                  }
                }
                ++v18;
              }
              while (v18 != v17);
            }
          }
          goto LABEL_3;
        }
        v54 = *v5;
        md::PointLabelFeature::updatePositions((md::PointLabelFeature *)*v5);
        v55 = *(unsigned int **)(v54 + 456);
        v56 = (unsigned int *)(v54 + 464);
        if (v55 != (unsigned int *)(v54 + 464))
          break;
      }
LABEL_3:
      v5 += 2;
      if (v5 == a4)
      {
        if (v8)
          operator delete(v8);
        return;
      }
    }
    while (1)
    {
      md::LabelPool::labelForCustomFeature((uint64_t *)&v77, a1, *(_QWORD *)(a1 + 8), v5, v55 + 8, 1);
      v57 = v77;
      if (v77)
      {
        v58 = *v9;
        v59 = v9;
        v60 = v9;
        if (*v9)
        {
          while (1)
          {
            while (1)
            {
              v60 = (uint64_t **)v58;
              v61 = v58[4];
              if ((unint64_t)v77 >= v61)
                break;
              v58 = *v60;
              v59 = v60;
              if (!*v60)
                goto LABEL_74;
            }
            if (v61 >= (unint64_t)v77)
              break;
            v58 = v60[1];
            if (!v58)
            {
              v59 = v60 + 1;
              goto LABEL_74;
            }
          }
        }
        else
        {
LABEL_74:
          v62 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 688) + 16))(*(_QWORD *)(a1 + 688), 48, 8);
          v63 = v62;
          v64 = v78;
          v62[4] = (uint64_t)v77;
          v62[5] = (uint64_t)v64;
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          *v62 = 0;
          v62[1] = 0;
          v62[2] = (uint64_t)v60;
          *v59 = v62;
          v67 = **(_QWORD **)(a1 + 672);
          if (v67)
          {
            *(_QWORD *)(a1 + 672) = v67;
            v63 = *v59;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 680), v63);
          ++*(_QWORD *)(a1 + 696);
          v68 = v77;
          v69 = (unsigned __int8 *)v77 + 1296;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 + 1, v69));
          if (!v70 && !*((_BYTE *)v68 + 820))
          {
            *((_BYTE *)v68 + 1214) = -1;
            md::Label::updateStateMachineForStaging((uint64_t)v68, 0, 37);
          }
          *((_BYTE *)v68 + 1261) = 0;
          *((_QWORD *)v68 + 153) = 0;
          v57 = v77;
        }
        md::Label::assignWorldPointToLabel(v57, *(LabelManager **)(a1 + 8));
      }
      v71 = v78;
      if (!v78)
        goto LABEL_90;
      v72 = (unint64_t *)&v78->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
        v74 = (unsigned int *)*((_QWORD *)v55 + 1);
        if (!v74)
        {
          do
          {
LABEL_94:
            v75 = (unsigned int *)*((_QWORD *)v55 + 2);
            _ZF = *(_QWORD *)v75 == (_QWORD)v55;
            v55 = v75;
          }
          while (!_ZF);
          goto LABEL_65;
        }
      }
      else
      {
LABEL_90:
        v74 = (unsigned int *)*((_QWORD *)v55 + 1);
        if (!v74)
          goto LABEL_94;
      }
      do
      {
        v75 = v74;
        v74 = *(unsigned int **)v74;
      }
      while (v74);
LABEL_65:
      v55 = v75;
      if (v75 == v56)
        goto LABEL_3;
    }
  }
}

void sub_19F276C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'md::MapNavLabeler::setFocusedPolyline(id *this, VKPolylineOverlay *a2)
{
  unsigned __int8 *v3;
  int v4;
  md::WaypointStore *v5;
  int v6;
  VKPolylineOverlay *v7;

  v7 = a2;
  objc_msgSend(this[6], "setRoute:");
  v3 = (unsigned __int8 *)this[7];
  v4 = v7 != 0;
  if (!*(_QWORD *)(*((_QWORD *)v3 + 1) + 184) && v3[254] != v4)
  {
    v3[254] = v4;
    v5 = (md::WaypointStore *)*((_QWORD *)v3 + 9);
    if (v5)
    {
      v6 = *((unsigned __int8 *)v5 + 49);
      if (v6 != v4)
      {
        if (*((_BYTE *)v5 + 48))
        {
          *((_BYTE *)v5 + 49) = v4;
          if ((v6 != 0) != (v7 != 0))
            md::WaypointStore::updateWaypointsForSelection(v5);
        }
        else
        {
          *((_BYTE *)v5 + 49) = v4;
        }
      }
    }
  }

}

void sub_19F276D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::MapNavLabeler::setFocusedPolyline(id *this, VKPolylineOverlay *a2)
{
  unsigned __int8 *v3;
  int v4;
  md::WaypointStore *v5;
  int v6;
  VKPolylineOverlay *v7;

  v7 = a2;
  objc_msgSend(this[7], "setRoute:");
  v3 = (unsigned __int8 *)this[8];
  v4 = v7 != 0;
  if (!*(_QWORD *)(*((_QWORD *)v3 + 1) + 184) && v3[254] != v4)
  {
    v3[254] = v4;
    v5 = (md::WaypointStore *)*((_QWORD *)v3 + 9);
    if (v5)
    {
      v6 = *((unsigned __int8 *)v5 + 49);
      if (v6 != v4)
      {
        if (*((_BYTE *)v5 + 48))
        {
          *((_BYTE *)v5 + 49) = v4;
          if ((v6 != 0) != (v7 != 0))
            md::WaypointStore::updateWaypointsForSelection(v5);
        }
        else
        {
          *((_BYTE *)v5 + 49) = v4;
        }
      }
    }
  }

}

void sub_19F276E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F276FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0,std::allocator<md::LabelManager::stylesheetDidFinishDecodingGlobalProperties(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>> const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 336);
  std::mutex::lock((std::mutex *)v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == *(_QWORD *)(v2 + 184))
  {
    if (v3 && (v4 = *(_QWORD *)(v3 + 16)) != 0)
    {
      v5 = atomic_load((unsigned __int8 *)(v4 + 2784));
      if ((v5 & 1) == 0)
        std::__assoc_sub_state::wait(*(std::__assoc_sub_state **)(v4 + 2808));
      v6 = *(_QWORD *)(v4 + 120);
      v7 = *(std::__shared_weak_count **)(v4 + 128);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (v6)
        LOBYTE(v6) = *(_BYTE *)(v6 + 256) != 0;
      *(_BYTE *)(v2 + 157) = v6;
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      *(_BYTE *)(v2 + 157) = 0;
    }
    md::LabelStyleCache::updateNavRoadSignScale((md::LabelStyleCache *)v2);
  }
  std::mutex::unlock((std::mutex *)v2);
}

void sub_19F2770B8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::LabelStyleCache::updateNavRoadSignScale(md::LabelStyleCache *this)
{
  std::__shared_weak_count_vtbl *v2;
  std::__shared_weak_count *on_zero_shared;
  float v4;
  unsigned __int8 v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  float v8;
  char v9;
  float v10;
  uint64_t v11;
  float v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (std::__shared_weak_count_vtbl *)*((_QWORD *)this + 23);
  if (!v2)
  {
    on_zero_shared = 0;
    v9 = 1;
    v10 = 1.0;
    v8 = 1.0;
    v4 = 1.0;
    goto LABEL_19;
  }
  on_zero_shared = (std::__shared_weak_count *)v2->__on_zero_shared;
  v4 = 1.0;
  if (!on_zero_shared)
  {
    v2 = 0;
LABEL_14:
    v9 = 1;
    v8 = 1.0;
    goto LABEL_15;
  }
  v5 = atomic_load((unsigned __int8 *)&on_zero_shared[116]);
  if ((v5 & 1) == 0)
    std::__assoc_sub_state::wait((std::__assoc_sub_state *)on_zero_shared[117].__vftable);
  v2 = on_zero_shared[5].__vftable;
  on_zero_shared = (std::__shared_weak_count *)on_zero_shared[5].__shared_owners_;
  if (on_zero_shared)
  {
    p_shared_owners = (unint64_t *)&on_zero_shared->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v2)
    goto LABEL_14;
  v8 = *((float *)&v2[5].~__shared_weak_count_0 + 1);
  v9 = (char)v2->__on_zero_shared;
  if (v9)
  {
    v9 = 0;
    v10 = *((float *)&v2[5].__on_zero_shared + 1);
    v11 = *((_QWORD *)this + 23);
    if (!v11)
      goto LABEL_19;
    goto LABEL_16;
  }
LABEL_15:
  v10 = 1.0;
  v11 = *((_QWORD *)this + 23);
  if (!v11)
    goto LABEL_19;
LABEL_16:
  if (*(_BYTE *)(*(_QWORD *)(v11 + 16) + 60) == 1)
    v4 = 0.75;
  else
    v4 = 1.0;
LABEL_19:
  switch(*((_BYTE *)this + 159))
  {
    case 0:
      if ((v9 & 1) != 0 || !BYTE1(v2->__on_zero_shared))
      {
        v12 = 0.9;
        goto LABEL_40;
      }
      v8 = *(float *)&v2[5].__get_deleter;
      break;
    case 1:
      if ((v9 & 1) == 0 && BYTE2(v2->__on_zero_shared))
        v8 = *((float *)&v2[5].__get_deleter + 1);
      break;
    case 2:
      if ((v9 & 1) != 0 || !BYTE3(v2->__on_zero_shared))
      {
        v12 = 1.15;
        goto LABEL_40;
      }
      v8 = *(float *)&v2[5].__on_zero_shared_weak;
      break;
    case 3:
      if ((v9 & 1) != 0 || !BYTE4(v2->__on_zero_shared))
      {
        v12 = 1.3;
        goto LABEL_40;
      }
      v8 = *((float *)&v2[5].__on_zero_shared_weak + 1);
      break;
    case 4:
    case 5:
      if ((v9 & 1) != 0 || !BYTE5(v2->__on_zero_shared))
      {
        v12 = 1.45;
LABEL_40:
        v8 = v8 * v12;
      }
      else
      {
        v8 = *(float *)&v2[6].~__shared_weak_count;
      }
      break;
    default:
      v8 = 0.0;
      break;
  }
  *((float *)this + 43) = v8 * v10;
  *((float *)this + 44) = v8 * v4;
  if (on_zero_shared)
  {
    v13 = (unint64_t *)&on_zero_shared->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
      std::__shared_weak_count::__release_weak(on_zero_shared);
    }
  }
}

_QWORD *std::__function::__func<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_0,std::allocator<md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::$_0>,void ()(void)>::operator()(_QWORD *result)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v1 = result[1];
  atomic_store(1u, (unsigned __int8 *)(v1 + 3378));
  v2 = atomic_load((unsigned __int8 *)(v1 + 3058));
  if ((v2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 136);
    if (v3)
    {
      result = *(_QWORD **)(v3 + 56);
      if (result)
      {
        v5 = v1;
        v4 = 9;
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, char *))(*result + 48))(result, &v5, &v4);
      }
    }
  }
  return result;
}

void grl::IconManager::imageForDataIDAndText(uint64_t a1@<X0>, unsigned int a2@<W1>, char *a3@<X2>, IconModifiers *a4@<X3>, float *a5@<X4>, unsigned int *a6@<X5>, _QWORD *a7@<X8>)
{
  float v14;
  grl::codec::IconMapPack *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t GlobalResourcePack;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  NSObject *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  char *v34;
  unsigned int v35;
  uint8_t buf[8];
  _QWORD v37[3];
  void *__p;
  __int128 v39;
  float v40[4];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v14 = ceilf(*a5);
  v35 = a2;
  std::string::basic_string[abi:nn180100]<0>(&__p, "Default");
  v40[0] = v14;
  grl::IconManager::retrieveResourcePack(buf, a1, (const void **)&__p, 2);
  v15 = *(grl::codec::IconMapPack **)buf;
  v16 = (std::__shared_weak_count *)v37[0];
  if (!v37[0])
    goto LABEL_6;
  v17 = (unint64_t *)(v37[0] + 8);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v15)
      goto LABEL_7;
  }
  else
  {
LABEL_6:
    if (v15)
    {
LABEL_7:
      v20 = v16;
      goto LABEL_22;
    }
  }
  GlobalResourcePack = (uint64_t)grl::IconManager::loadGlobalResourcePack(buf, a1, (uint64_t)&__p);
  v15 = *(grl::codec::IconMapPack **)buf;
  v20 = (std::__shared_weak_count *)v37[0];
  if (v37[0])
  {
    v22 = (unint64_t *)(v37[0] + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v26 = (std::__shared_weak_count *)v37[0];
  if (!v37[0])
    goto LABEL_21;
  v27 = (unint64_t *)(v37[0] + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (!v15)
      goto LABEL_31;
  }
  else
  {
LABEL_21:
    if (!v15)
      goto LABEL_31;
  }
LABEL_22:
  GlobalResourcePack = (uint64_t)grl::codec::IconMapPack::identifierForDataIDAndText((uint64_t)v15, &v35, a3);
  if ((_DWORD)GlobalResourcePack
    || (GlobalResourcePack = grl::codec::IconMapPack::dataIDFallback(v15, &v35), (_DWORD)GlobalResourcePack))
  {
    v29 = GlobalResourcePack;
    if (!v20)
      goto LABEL_36;
    goto LABEL_32;
  }
  if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
  v30 = GEOGetGeoResourceLibIconManagerLog::log;
  GlobalResourcePack = os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR);
  if ((_DWORD)GlobalResourcePack)
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v35;
    LOWORD(v37[0]) = 2048;
    *(double *)((char *)v37 + 2) = v14;
    _os_log_impl(&dword_19F029000, v30, OS_LOG_TYPE_ERROR, "Failed to find ID for Data Identifier\nData Identifier: %i - Content Scale: %f", buf, 0x12u);
  }
LABEL_31:
  v29 = 0;
  if (!v20)
    goto LABEL_36;
LABEL_32:
  v31 = (unint64_t *)&v20->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_36:
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  if (a6)
    *a6 = v29;
  if (v29)
  {
    *(_QWORD *)&v39 = 0;
    *((_QWORD *)&v39 + 1) = grl::Allocator::instance((grl::Allocator *)GlobalResourcePack);
    *(_QWORD *)v40 = 0;
    __p = &v39;
    grl::IconManager::imageForIconID(a1, v29, a4, (uint64_t)a5, &__p, (uint64_t)a6, a7);
    std::__tree<std::__value_type<unsigned short,grl::ImageData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::ImageData>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::ImageData>,grl::Allocator>>::destroy((uint64_t)&__p, (_QWORD *)v39);
  }
  else
  {
    if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
    v33 = GEOGetGeoResourceLibIconManagerLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
    {
      if (a3[23] >= 0)
        v34 = a3;
      else
        v34 = *(char **)a3;
      LODWORD(__p) = 67109378;
      HIDWORD(__p) = a2;
      LOWORD(v39) = 2080;
      *(_QWORD *)((char *)&v39 + 2) = v34;
      _os_log_impl(&dword_19F029000, v33, OS_LOG_TYPE_ERROR, "Failed to find Icon ID for Data ID: %i - Text: %s", (uint8_t *)&__p, 0x12u);
    }
    *a7 = 0;
    a7[1] = 0;
  }
}

uint64_t *grl::codec::IconMapPack::identifierForDataIDAndText(uint64_t a1, unsigned int *a2, char *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v6 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,unsigned int>,grl::Allocator>>::find<unsigned int>((_QWORD *)(a1 + 208), a2);
  if (v6)
  {
    v7 = v6;
    v8 = *((_QWORD *)a3 + 1);
    if (a3[23] >= 0)
    {
      v9 = a3[23];
    }
    else
    {
      a3 = *(char **)a3;
      v9 = v8;
    }
    v16 = grl::Allocator::instance((grl::Allocator *)v6);
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>::__init_with_size[abi:nn180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((uint64_t)v14, a3, &a3[v9], v9);
    v10 = std::__hash_table<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::__unordered_map_hasher<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,std::__unordered_map_equal<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,std::equal_to<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,std::hash<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>,true>,geo::StdAllocator<std::__hash_value_type<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>,unsigned int>,grl::Allocator>>::find<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,grl::Allocator>>>(v7 + 3, (uint64_t)v14);
    v11 = v10;
    if (v10)
      v7 = (uint64_t *)*((unsigned int *)v10 + 12);
    if (SHIBYTE(v15) < 0)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 40))(v16, v14[0], v15 & 0x7FFFFFFFFFFFFFFFLL);
      if (v11)
        return v7;
    }
    else if (v10)
    {
      return v7;
    }
  }
  v12 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,unsigned int>,grl::Allocator>>::find<unsigned int>((_QWORD *)(a1 + 152), a2);
  if (v12)
    return (uint64_t *)*((unsigned int *)v12 + 5);
  else
    return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,unsigned int>,grl::Allocator>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t **grl::IconManager::loadGlobalResourcePack(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t *v13;
  uint64_t *v14;

  v14 = 0;
  (*(void (**)(uint64_t **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(&v11, *(_QWORD *)(a2 + 8), 0, 2, 1);
  geo::make_unique<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>,std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const&>(&v13, v11);
  v6 = v13;
  v13 = 0;
  std::unique_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::reset[abi:nn180100](&v14, v6);
  std::unique_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::reset[abi:nn180100](&v13, 0);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  grl::IconManager::loadResourcePack(a1, a2, a3, 2u, &v14);
  return std::unique_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::reset[abi:nn180100](&v14, 0);
}

void grl::IconManager::loadResourcePack(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t **a5)
{
  std::__shared_mutex_base *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  const void **v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  std::mutex *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  const std::string::value_type *v25;
  int v26;
  int v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type size;
  std::string *v32;
  int v33;
  void *v34;
  char v35;
  int v36;
  size_t v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *p_str;
  size_t v41;
  int v43;
  __int128 v44;
  std::string::size_type v45;
  NSObject *v46;
  char *v47;
  const std::string::value_type *v48;
  double v49;
  std::string::size_type v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t v55;
  NSObject *v56;
  const std::string::value_type *v57;
  double v58;
  char *v59;
  NSObject *v60;
  std::string *v61;
  const std::string::value_type *v62;
  double v63;
  char *v64;
  std::__shared_weak_count *v65;
  NSObject *v66;
  std::string *v67;
  const std::string::value_type *v68;
  double v69;
  char *v70;
  std::string *v71;
  std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::string *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::mutex *v83;
  int v84;
  grl::codec::IconDataPack *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  std::string __str;
  std::string __p;
  double v95;
  __int16 v96;
  std::string *v97;
  __int16 v98;
  std::string *v99;
  std::string v100;
  double v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v8 = (std::__shared_mutex_base *)(a2 + 272);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a2 + 272));
  v9 = (uint64_t **)(a2 + 448);
  v10 = *(_QWORD *)(a2 + 448);
  if (!v10)
    goto LABEL_8;
  v11 = a2 + 448;
  do
  {
    v12 = std::less<std::pair<std::string,float>>::operator()[abi:nn180100]((const void **)(v10 + 32), (const void **)a3);
    v13 = (uint64_t *)(v10 + 8);
    if (!v12)
    {
      v13 = (uint64_t *)v10;
      v11 = v10;
    }
    v10 = *v13;
  }
  while (*v13);
  if ((uint64_t **)v11 == v9
    || std::less<std::pair<std::string,float>>::operator()[abi:nn180100]((const void **)a3, (const void **)(v11 + 32)))
  {
LABEL_8:
    std::__shared_mutex_base::unlock_shared(v8);
    std::__shared_mutex_base::lock(v8);
    v14 = *v9;
    v15 = (uint64_t **)(a2 + 448);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v14;
          v16 = (const void **)(v14 + 4);
          if (!std::less<std::pair<std::string,float>>::operator()[abi:nn180100]((const void **)a3, (const void **)v14 + 4))break;
          v14 = *v15;
          v9 = v15;
          if (!*v15)
            goto LABEL_15;
        }
        if (!std::less<std::pair<std::string,float>>::operator()[abi:nn180100](v16, (const void **)a3))
          break;
        v14 = v15[1];
        if (!v14)
        {
          v9 = v15 + 1;
          goto LABEL_15;
        }
      }
      v11 = (uint64_t)v15;
    }
    else
    {
LABEL_15:
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 456) + 16))(*(_QWORD *)(a2 + 456), 128, 8);
      v17 = (std::string *)(v11 + 32);
      if (*(char *)(a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      }
      else
      {
        v18 = *(_OWORD *)a3;
        *(_QWORD *)(v11 + 48) = *(_QWORD *)(a3 + 16);
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      }
      *(_DWORD *)(v11 + 56) = *(_DWORD *)(a3 + 24);
      *(_QWORD *)(v11 + 64) = 850045863;
      *(_OWORD *)(v11 + 72) = 0u;
      *(_OWORD *)(v11 + 88) = 0u;
      *(_OWORD *)(v11 + 104) = 0u;
      *(_QWORD *)(v11 + 120) = 0;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = v15;
      *v9 = (uint64_t *)v11;
      v19 = **(_QWORD **)(a2 + 440);
      v20 = (uint64_t *)v11;
      if (v19)
      {
        *(_QWORD *)(a2 + 440) = v19;
        v20 = *v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 448), v20);
      ++*(_QWORD *)(a2 + 464);
    }
    std::__shared_mutex_base::unlock(v8);
  }
  else
  {
    std::__shared_mutex_base::unlock_shared(v8);
  }
  v21 = (std::mutex *)(v11 + 64);
  std::mutex::lock((std::mutex *)(v11 + 64));
  grl::IconManager::retrieveResourcePack(&v91, a2, (const void **)a3, a4);
  if (v91)
  {
    v22 = v92;
    *a1 = v91;
    a1[1] = v22;
    goto LABEL_26;
  }
  v83 = (std::mutex *)(v11 + 64);
  std::string::basic_string[abi:nn180100]<0>(&__p, "");
  LODWORD(v95) = 0;
  v24 = **a5;
  v23 = (*a5)[1];
  if (v24 != v23)
  {
    v84 = 0;
    do
    {
      grl::codec::ResourcePack::PackExtension((const std::string *)v24, &v100);
      if (a4 > 2)
        v25 = 0;
      else
        v25 = (&off_1E4314FD8)[(char)a4];
      v26 = std::string::compare(&v100, v25);
      v27 = v26;
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v100.__r_.__value_.__l.__data_);
        if (!v27)
        {
LABEL_36:
          grl::codec::ResourcePack::RegionForPack((const std::string *)v24, (uint64_t)&__str);
          v28 = std::string::rfind(&__str, 45, 0xFFFFFFFFFFFFFFFFLL);
          if (v28 == -1)
          {
            v33 = 0;
          }
          else
          {
            v29 = v28;
            v30 = v28 + 1;
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __str.__r_.__value_.__l.__size_;
            if (v30 >= size)
            {
              v33 = 0;
            }
            else
            {
              v32 = std::string::basic_string(&v100, &__str, v30, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v89);
              if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              {
                v34 = (void *)v100.__r_.__value_.__r.__words[0];
                v33 = atoi(v100.__r_.__value_.__l.__data_);
                operator delete(v34);
              }
              else
              {
                v33 = atoi((const char *)v32);
              }
            }
            std::string::basic_string(&v100, &__str, 0, v29, (std::allocator<char> *)&v89);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __str = v100;
          }
          v35 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          v36 = *(char *)(a3 + 23);
          if (v36 >= 0)
            v37 = *(unsigned __int8 *)(a3 + 23);
          else
            v37 = *(_QWORD *)(a3 + 8);
          if (v36 >= 0)
            v38 = (const std::string::value_type *)a3;
          else
            v38 = *(const std::string::value_type **)a3;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            v39 = __str.__r_.__value_.__l.__size_;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if (v39 >= v37)
            v41 = v37;
          else
            v41 = v39;
          if (!memcmp(v38, p_str, v41) && v39 == v37)
          {
            LODWORD(v89) = 0;
            if (grl::codec::ResourcePack::PackSupportsContentScale((const std::string *)v24, (float *)&v89, *(float *)(a3 + 24)))
            {
              v43 = v89;
              if (*(float *)&v89 > *(float *)&v95 || *(float *)&v89 == *(float *)&v95 && v33 >= v84)
              {
                if (*(char *)(v24 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)v24, *(_QWORD *)(v24 + 8));
                  v43 = v89;
                }
                else
                {
                  v44 = *(_OWORD *)v24;
                  v100.__r_.__value_.__r.__words[2] = *(_QWORD *)(v24 + 16);
                  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v44;
                }
                LODWORD(v101) = v43;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p.__r_.__value_.__l.__data_);
                  v43 = LODWORD(v101);
                }
                __p = v100;
                LODWORD(v95) = v43;
                v84 = v33;
              }
            }
            v35 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          if (v35 < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      else if (!v26)
      {
        goto LABEL_36;
      }
      v24 += 24;
    }
    while (v24 != v23);
  }
  v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v45 = __p.__r_.__value_.__l.__size_;
  v21 = v83;
  if (!v45)
  {
    if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
    v46 = GEOGetGeoResourceLibIconManagerLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
    {
      if (a4 > 2)
        v47 = &str_3_5;
      else
        v47 = (&off_1E4314FF0)[(char)a4];
      if (*(char *)(a3 + 23) >= 0)
        v48 = (const std::string::value_type *)a3;
      else
        v48 = *(const std::string::value_type **)a3;
      v49 = *(float *)(a3 + 24);
      LODWORD(v100.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
      WORD2(v100.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v48;
      HIWORD(v100.__r_.__value_.__r.__words[2]) = 2048;
      v101 = v49;
      _os_log_impl(&dword_19F029000, v46, OS_LOG_TYPE_ERROR, "No packs of type %s available for key: [%s, %f]", (uint8_t *)&v100, 0x20u);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v100, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v100 = __p;
  }
  v50 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v50 = v100.__r_.__value_.__l.__size_;
  if (v50)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, std::string *))(**(_QWORD **)(a2 + 8) + 56))(&v89, *(_QWORD *)(a2 + 8), &v100);
    v51 = v89;
    if (v89)
    {
      v52 = v90;
      if (v90)
      {
        p_shared_owners = (unint64_t *)&v90->__shared_owners_;
        do
          v54 = __ldxr(p_shared_owners);
        while (__stxr(v54 + 1, p_shared_owners));
        grl::IconManager::decodePack(&v87, a2, v51, v52, a3, a4);
        do
          v55 = __ldaxr(p_shared_owners);
        while (__stlxr(v55 - 1, p_shared_owners));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      else
      {
        grl::IconManager::decodePack(&v87, a2, v89, 0, a3, a4);
      }
      if (v87)
      {
        v65 = v88;
        *a1 = v87;
        a1[1] = v65;
      }
      else
      {
        if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
        v66 = GEOGetGeoResourceLibIconManagerLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
        {
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = &v100;
          else
            v67 = (std::string *)v100.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 23) >= 0)
            v68 = (const std::string::value_type *)a3;
          else
            v68 = *(const std::string::value_type **)a3;
          v69 = *(float *)(a3 + 24);
          if (a4 > 2)
            v70 = &str_3_5;
          else
            v70 = (&off_1E4314FF0)[(char)a4];
          grl::buildStringFromResourceNames(**a5, 0xAAAAAAAAAAAAAAABLL * (((*a5)[1] - **a5) >> 3), &__str);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &__str;
          else
            v79 = (std::string *)__str.__r_.__value_.__r.__words[0];
          LODWORD(__p.__r_.__value_.__l.__data_) = 136316162;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
          WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v68;
          HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
          v95 = v69;
          v96 = 2080;
          v97 = (std::string *)v70;
          v98 = 2080;
          v99 = v79;
          _os_log_impl(&dword_19F029000, v66, OS_LOG_TYPE_ERROR, "Failed to decode pack for packName:%s packKey:%s.%f packType:%s resourceNames:%s", (uint8_t *)&__p, 0x34u);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v21 = v83;
        }
        *a1 = 0;
        a1[1] = 0;
        v80 = v88;
        if (v88)
        {
          v81 = (unint64_t *)&v88->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
      }
    }
    else
    {
      if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
      v60 = GEOGetGeoResourceLibIconManagerLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
      {
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v100;
        else
          v61 = (std::string *)v100.__r_.__value_.__r.__words[0];
        if (*(char *)(a3 + 23) >= 0)
          v62 = (const std::string::value_type *)a3;
        else
          v62 = *(const std::string::value_type **)a3;
        v63 = *(float *)(a3 + 24);
        if (a4 > 2)
          v64 = &str_3_5;
        else
          v64 = (&off_1E4314FF0)[(char)a4];
        grl::buildStringFromResourceNames(**a5, 0xAAAAAAAAAAAAAAABLL * (((*a5)[1] - **a5) >> 3), &__str);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = &__str;
        else
          v72 = (std::string *)__str.__r_.__value_.__r.__words[0];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v62;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        v95 = v63;
        v96 = 2080;
        v97 = (std::string *)v64;
        v98 = 2080;
        v99 = v72;
        _os_log_impl(&dword_19F029000, v60, OS_LOG_TYPE_ERROR, "Failed to stream resource for packName:%s packKey:%s.%f packType:%s resourceNames:%s", (uint8_t *)&__p, 0x34u);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v21 = v83;
      }
      *a1 = 0;
      a1[1] = 0;
    }
    v73 = v90;
    if (v90)
    {
      v74 = (unint64_t *)&v90->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  else
  {
    if (GEOGetGeoResourceLibIconManagerLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibIconManagerLog::onceToken, &__block_literal_global_1);
    v56 = GEOGetGeoResourceLibIconManagerLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibIconManagerLog::log, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a3 + 23) >= 0)
        v57 = (const std::string::value_type *)a3;
      else
        v57 = *(const std::string::value_type **)a3;
      v58 = *(float *)(a3 + 24);
      if (a4 > 2)
        v59 = &str_3_5;
      else
        v59 = (&off_1E4314FF0)[(char)a4];
      grl::buildStringFromResourceNames(**a5, 0xAAAAAAAAAAAAAAABLL * (((*a5)[1] - **a5) >> 3), &__str);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &__str;
      else
        v71 = (std::string *)__str.__r_.__value_.__r.__words[0];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v58;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
      v95 = *(double *)&v59;
      v96 = 2080;
      v97 = v71;
      _os_log_impl(&dword_19F029000, v56, OS_LOG_TYPE_ERROR, "Failed to resolve packName for packKey:%s.%f packType:%s with resourceNames:%s", (uint8_t *)&__p, 0x2Au);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v21 = v83;
    }
    *a1 = 0;
    a1[1] = 0;
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  v76 = v92;
  if (v92)
  {
    v77 = (unint64_t *)&v92->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
LABEL_26:
  std::mutex::unlock(v21);
}

std::string *grl::codec::ResourcePack::PackExtension@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  char v6;

  v4 = std::string::rfind(a1, 46, 0xFFFFFFFFFFFFFFFFLL) + 1;
  if (v4 > 1)
    return std::string::basic_string(a2, a1, v4, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v6);
  else
    return (std::string *)std::string::basic_string[abi:nn180100]<0>(a2, (char *)&str_1_1);
}

std::string *grl::codec::ResourcePack::RegionForPack@<X0>(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::string *result;
  uint64_t v6;
  _BYTE *v7;
  char v8;

  v4 = std::string::find(a1, 64, 0);
  if (v4 == -1)
    v4 = std::string::find(a1, 46, 0);
  result = std::string::basic_string((std::string *)a2, a1, 0, v4, (std::allocator<char> *)&v8);
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  for (; v6; --v6)
  {
    if (*v7 == 95)
      *v7 = 32;
    ++v7;
  }
  return result;
}

BOOL grl::codec::ResourcePack::PackSupportsContentScale(const std::string *a1, float *a2, float a3)
{
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string *v9;
  float v10;
  std::string __p;
  std::string v13;

  v6 = std::string::find(a1, 64, 0);
  if (v6 == -1)
  {
    v10 = 1.0;
  }
  else
  {
    v7 = v6;
    v8 = std::string::find(a1, 120, v6);
    std::string::basic_string(&v13, a1, v7 + 1, v8 - (v7 + 1), (std::allocator<char> *)&__p);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:nn180100]<0>(&__p, (char *)v9);
    v10 = std::stof(&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (a2)
    *a2 = v10;
  return v10 <= ceilf(a3);
}

void grl::IconManager::decodePack(grl::codec::IconDataPack **a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, int a6)
{
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  grl::codec::IconDataPack *v21;
  grl::codec::IconConfigPack *v22;
  char v23;
  char v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_mutex_base *v28;
  uint64_t v29;
  std::mutex *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  std::string *v39;
  unint64_t *v40;
  grl::codec::IconDataPack *v41;
  char v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  std::string *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  grl::codec::IconDataPack *v59;
  grl::Allocator *v60;
  grl::Allocator *v61;
  grl::Allocator *v62;
  grl::Allocator *v63;
  grl::Allocator *v64;
  grl::Allocator *v65;
  grl::Allocator *v66;
  grl::Allocator *v67;
  grl::Allocator *v68;
  grl::Allocator *v69;
  grl::Allocator *v70;
  grl::Allocator *v71;
  grl::Allocator *v72;
  grl::Allocator *v73;
  grl::Allocator *v74;
  char v75;
  char v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_mutex_base *v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  const void **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  std::string *v90;
  __int128 v91;
  uint64_t *v92;
  uint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint8x8_t v110;
  unint64_t v111;
  unsigned __int8 **v112;
  unsigned __int8 *j;
  unint64_t v114;
  BOOL v115;
  char *v116;
  unint64_t v117;
  std::string *v118;
  unint64_t v119;
  float v120;
  float v121;
  _BOOL8 v122;
  unint64_t v123;
  unint64_t v124;
  size_t v125;
  unsigned __int8 **v126;
  unsigned __int8 *i;
  unint64_t v128;
  BOOL v129;
  char *v130;
  unint64_t v131;
  std::string *v132;
  unint64_t v133;
  float v134;
  float v135;
  _BOOL8 v136;
  unint64_t v137;
  unint64_t v138;
  size_t v139;
  size_t v140;
  void *v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  size_t v145;
  uint8x8_t v146;
  size_t prime;
  void *v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD *v151;
  size_t v152;
  uint8x8_t v153;
  unint64_t v154;
  uint8x8_t v155;
  uint64_t v156;
  unint64_t v157;
  uint8x8_t v158;
  uint64_t v159;
  _QWORD *v160;
  size_t v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  _QWORD *v169;
  size_t v170;
  _QWORD *v171;
  _QWORD *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  _QWORD *v176;
  _QWORD *v177;
  std::mutex *v178;
  std::mutex *v179;
  std::__shared_mutex_base *v180;
  std::__shared_mutex_base *v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  unint64_t v186;
  std::mutex *v187;
  std::mutex *v188;
  std::mutex *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;

  if (a6 != 2)
  {
    if (a6 != 1)
    {
      if (a6)
        goto LABEL_76;
      if (a4)
      {
        p_shared_owners = (unint64_t *)&a4->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        if (!a3)
        {
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          goto LABEL_21;
        }
      }
      else if (!a3)
      {
        goto LABEL_76;
      }
      v19 = (std::__shared_weak_count *)operator new(0x1A8uLL);
      v19->__shared_owners_ = 0;
      v40 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5810;
      v21 = (grl::codec::IconDataPack *)&v19[1];
      v41 = grl::codec::IconDataPack::IconDataPack((grl::codec::IconDataPack *)&v19[1], -1);
      v190 = a3;
      v191 = a4;
      v42 = ((uint64_t (*)(grl::codec::IconDataPack *, uint64_t *))v19[1].__on_zero_shared_weak)(v41, &v190);
      v43 = v42;
      v44 = v191;
      if (!v191)
        goto LABEL_41;
      v45 = (unint64_t *)&v191->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        if ((v43 & 1) != 0)
        {
LABEL_42:
          grl::codec::IconDataPack::setImageAtlasSize(v21, *(_QWORD *)(a2 + 472));
          if (!*(_BYTE *)(a2 + 88))
          {
            v28 = (std::__shared_mutex_base *)(a2 + 104);
            std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a2 + 104));
            v47 = *(_QWORD *)(a2 + 96);
            if (v47)
            {
              v30 = (std::mutex *)(v47 + 240);
              std::mutex::lock((std::mutex *)(v47 + 240));
              v48 = *(_QWORD *)(a2 + 96);
              v49 = (_QWORD *)(v48 + 40);
              v50 = geo::LRUPolicy<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash>::get(v48 + 80, (_QWORD *)(v48 + 40), (float *)a5);
              if (v48 + 80 != v50)
              {
                do
LABEL_259:
                  v174 = __ldxr(v40);
                while (__stxr(v174 + 1, v40));
                v166 = *(std::__shared_weak_count **)(v50 + 56);
                *(_QWORD *)(v50 + 48) = v21;
                *(_QWORD *)(v50 + 56) = v19;
                if (!v166)
                  goto LABEL_265;
                v175 = (unint64_t *)&v166->__shared_owners_;
                do
                  v168 = __ldaxr(v175);
                while (__stlxr(v168 - 1, v175));
LABEL_263:
                if (!v168)
                {
                  ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                  std::__shared_weak_count::__release_weak(v166);
                }
LABEL_265:
                std::mutex::unlock(v30);
                goto LABEL_266;
              }
              v179 = v30;
              v181 = v28;
              v51 = std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::find<std::pair<std::string,float>>((_QWORD *)(v48 + 40), (float *)a5);
              if (v51)
              {
                v52 = (char *)v51;
                v53 = (uint64_t *)*((_QWORD *)v51 + 6);
                v54 = *v53;
                *(_QWORD *)(v54 + 8) = v53[1];
                *(_QWORD *)v53[1] = v54;
                --*(_QWORD *)(v48 + 96);
                std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,0>((uint64_t)(v53 + 2));
                operator delete(v53);
                std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::erase((_QWORD *)(v48 + 40), v52);
              }
              v55 = (char *)operator new(0x40uLL);
              v56 = (std::string *)(v55 + 16);
              *(_QWORD *)v55 = 0;
              *((_QWORD *)v55 + 1) = 0;
              if (*(char *)(a5 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
              }
              else
              {
                *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)a5;
                *((_QWORD *)v55 + 4) = *(_QWORD *)(a5 + 16);
              }
              *((_DWORD *)v55 + 10) = *(_DWORD *)(a5 + 24);
              *((_QWORD *)v55 + 6) = 0;
              *((_QWORD *)v55 + 7) = 0;
              *(_QWORD *)v55 = v48 + 80;
              v105 = *(_QWORD **)(v48 + 88);
              *((_QWORD *)v55 + 1) = v105;
              *v105 = v55;
              v106 = *(_QWORD *)(v48 + 96) + 1;
              *(_QWORD *)(v48 + 88) = v55;
              *(_QWORD *)(v48 + 96) = v106;
              v107 = grl::codec::PackKeyHash::operator()(a5);
              v108 = *(_QWORD *)(v48 + 48);
              v189 = (std::mutex *)v107;
              if (v108)
              {
                v109 = v107;
                v110 = (uint8x8_t)vcnt_s8((int8x8_t)v108);
                v110.i16[0] = vaddlv_u8(v110);
                v183 = v110.u32[0];
                if (v110.u32[0] > 1uLL)
                {
                  v111 = v107;
                  if (v107 >= v108)
                    v111 = v107 % v108;
                }
                else
                {
                  v111 = (v108 - 1) & v107;
                }
                v126 = *(unsigned __int8 ***)(*v49 + 8 * v111);
                v186 = v111;
                if (v126)
                {
                  for (i = *v126; i; i = *(unsigned __int8 **)i)
                  {
                    v128 = *((_QWORD *)i + 1);
                    if (v128 == v109)
                    {
                      v129 = std::equal_to<std::pair<std::string,float>>::operator()[abi:nn180100](i + 16, (float *)a5);
                      v111 = v186;
                      v109 = (unint64_t)v189;
                      if (v129)
                        goto LABEL_256;
                    }
                    else
                    {
                      if (v183 > 1)
                      {
                        if (v128 >= v108)
                          v128 %= v108;
                      }
                      else
                      {
                        v128 &= v108 - 1;
                      }
                      if (v128 != v111)
                        break;
                    }
                  }
                }
              }
              v185 = (_QWORD *)(v48 + 56);
              v130 = (char *)operator new(0x38uLL);
              v131 = (unint64_t)v189;
              *(_QWORD *)v130 = 0;
              *((_QWORD *)v130 + 1) = v189;
              v132 = (std::string *)(v130 + 16);
              if (*(char *)(a5 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v132, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
                v131 = (unint64_t)v189;
              }
              else
              {
                *(_OWORD *)&v132->__r_.__value_.__l.__data_ = *(_OWORD *)a5;
                *((_QWORD *)v130 + 4) = *(_QWORD *)(a5 + 16);
              }
              v133 = v186;
              *((_DWORD *)v130 + 10) = *(_DWORD *)(a5 + 24);
              *((_QWORD *)v130 + 6) = v55;
              v134 = (float)(unint64_t)(*(_QWORD *)(v48 + 64) + 1);
              v135 = *(float *)(v48 + 72);
              if (v108 && (float)(v135 * (float)v108) >= v134)
              {
LABEL_246:
                v171 = (_QWORD *)*v49;
                v172 = *(_QWORD **)(*v49 + 8 * v133);
                if (v172)
                {
                  *(_QWORD *)v130 = *v172;
                }
                else
                {
                  *(_QWORD *)v130 = *v185;
                  *v185 = v130;
                  v171[v133] = v185;
                  if (!*(_QWORD *)v130)
                    goto LABEL_255;
                  v173 = *(_QWORD *)(*(_QWORD *)v130 + 8);
                  if ((v108 & (v108 - 1)) != 0)
                  {
                    if (v173 >= v108)
                      v173 %= v108;
                  }
                  else
                  {
                    v173 &= v108 - 1;
                  }
                  v172 = (_QWORD *)(*v49 + 8 * v173);
                }
                *v172 = v130;
LABEL_255:
                ++*(_QWORD *)(v48 + 64);
LABEL_256:
                while (*(_QWORD *)(v48 + 96) > *(_QWORD *)(v48 + 32))
                  geo::Cache<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash,geo::LRUPolicy>::_pop((_QWORD *)(v48 + 32));
                v50 = *(_QWORD *)(v48 + 88);
                v30 = v179;
                v28 = v181;
                goto LABEL_259;
              }
              v136 = 1;
              if (v108 >= 3)
                v136 = (v108 & (v108 - 1)) != 0;
              v137 = v136 | (2 * v108);
              v138 = vcvtps_u32_f32(v134 / v135);
              if (v137 <= v138)
                v139 = v138;
              else
                v139 = v137;
              if (v139 == 1)
              {
                v139 = 2;
              }
              else if ((v139 & (v139 - 1)) != 0)
              {
                prime = std::__next_prime(v139);
                v131 = (unint64_t)v189;
                v139 = prime;
              }
              v108 = *(_QWORD *)(v48 + 48);
              if (v139 > v108)
              {
LABEL_168:
                if (!(v139 >> 61))
                {
                  v148 = operator new(8 * v139);
                  v149 = (_QWORD *)*v49;
                  *v49 = v148;
                  if (v149)
                    operator delete(v149);
                  v150 = 0;
                  *(_QWORD *)(v48 + 48) = v139;
                  do
                    *(_QWORD *)(*v49 + 8 * v150++) = 0;
                  while (v139 != v150);
                  v151 = (_QWORD *)*v185;
                  v131 = (unint64_t)v189;
                  if (*v185)
                  {
                    v152 = v151[1];
                    v153 = (uint8x8_t)vcnt_s8((int8x8_t)v139);
                    v153.i16[0] = vaddlv_u8(v153);
                    if (v153.u32[0] > 1uLL)
                    {
                      if (v152 >= v139)
                        v152 %= v139;
                    }
                    else
                    {
                      v152 &= v139 - 1;
                    }
                    *(_QWORD *)(*v49 + 8 * v152) = v185;
                    v169 = (_QWORD *)*v151;
                    if (*v151)
                    {
                      do
                      {
                        v170 = v169[1];
                        if (v153.u32[0] > 1uLL)
                        {
                          if (v170 >= v139)
                            v170 %= v139;
                        }
                        else
                        {
                          v170 &= v139 - 1;
                        }
                        if (v170 != v152)
                        {
                          if (!*(_QWORD *)(*v49 + 8 * v170))
                          {
                            *(_QWORD *)(*v49 + 8 * v170) = v151;
                            goto LABEL_237;
                          }
                          *v151 = *v169;
                          *v169 = **(_QWORD **)(*v49 + 8 * v170);
                          **(_QWORD **)(*v49 + 8 * v170) = v169;
                          v169 = v151;
                        }
                        v170 = v152;
LABEL_237:
                        v151 = v169;
                        v169 = (_QWORD *)*v169;
                        v152 = v170;
                      }
                      while (v169);
                    }
                  }
                  v108 = v139;
                  goto LABEL_241;
                }
LABEL_286:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              if (v139 < v108)
              {
                v157 = vcvtps_u32_f32((float)*(unint64_t *)(v48 + 64) / *(float *)(v48 + 72));
                if (v108 < 3
                  || (v158 = (uint8x8_t)vcnt_s8((int8x8_t)v108), v158.i16[0] = vaddlv_u8(v158), v158.u32[0] > 1uLL))
                {
                  v157 = std::__next_prime(v157);
                  v131 = (unint64_t)v189;
                }
                else
                {
                  v159 = 1 << -(char)__clz(v157 - 1);
                  if (v157 >= 2)
                    v157 = v159;
                }
                if (v139 <= v157)
                  v139 = v157;
                if (v139 >= v108)
                {
                  v108 = *(_QWORD *)(v48 + 48);
                }
                else
                {
                  if (v139)
                    goto LABEL_168;
                  v177 = (_QWORD *)*v49;
                  *v49 = 0;
                  if (v177)
                    operator delete(v177);
                  v108 = 0;
                  *(_QWORD *)(v48 + 48) = 0;
                  v131 = (unint64_t)v189;
                }
              }
LABEL_241:
              if ((v108 & (v108 - 1)) != 0)
              {
                if (v131 >= v108)
                  v133 = v131 % v108;
                else
                  v133 = v131;
              }
              else
              {
                v133 = (v108 - 1) & v131;
              }
              goto LABEL_246;
            }
LABEL_266:
            std::__shared_mutex_base::unlock_shared(v28);
          }
LABEL_267:
          *a1 = v21;
          a1[1] = (grl::codec::IconDataPack *)v19;
          return;
        }
      }
      else
      {
LABEL_41:
        if ((v42 & 1) != 0)
          goto LABEL_42;
      }
      do
        v87 = __ldaxr(v40);
      while (__stlxr(v87 - 1, v40));
LABEL_69:
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        v18 = v19;
        goto LABEL_75;
      }
LABEL_76:
      *a1 = 0;
      a1[1] = 0;
      return;
    }
    if (a4)
    {
      v16 = (unint64_t *)&a4->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      if (!a3)
      {
        do
          v13 = __ldaxr(v16);
        while (__stlxr(v13 - 1, v16));
        goto LABEL_21;
      }
    }
    else if (!a3)
    {
      goto LABEL_76;
    }
    v19 = (std::__shared_weak_count *)operator new(0x140uLL);
    v19->__shared_owners_ = 0;
    v20 = (unint64_t *)&v19->__shared_owners_;
    v19->__shared_weak_owners_ = 0;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5848;
    v21 = (grl::codec::IconDataPack *)&v19[1];
    v22 = grl::codec::IconConfigPack::IconConfigPack((grl::codec::IconConfigPack *)&v19[1], -1);
    v190 = a3;
    v191 = a4;
    v23 = ((uint64_t (*)(grl::codec::IconConfigPack *, uint64_t *))v19[1].__on_zero_shared_weak)(v22, &v190);
    v24 = v23;
    v25 = v191;
    if (!v191)
      goto LABEL_28;
    v26 = (unint64_t *)&v191->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if ((v24 & 1) != 0)
      {
LABEL_29:
        grl::codec::IconConfigPack::setLocationCacheSize(v21, *(_QWORD *)(a2 + 480));
        if (*(_BYTE *)(a2 + 88))
          goto LABEL_267;
        v28 = (std::__shared_mutex_base *)(a2 + 104);
        std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a2 + 104));
        v29 = *(_QWORD *)(a2 + 96);
        if (!v29)
          goto LABEL_266;
        v30 = (std::mutex *)(v29 + 304);
        std::mutex::lock((std::mutex *)(v29 + 304));
        v31 = *(_QWORD *)(a2 + 96);
        v32 = (_QWORD *)(v31 + 112);
        v33 = geo::LRUPolicy<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash>::get(v31 + 152, (_QWORD *)(v31 + 112), (float *)a5);
        if (v31 + 152 != v33)
        {
          do
LABEL_221:
            v165 = __ldxr(v20);
          while (__stxr(v165 + 1, v20));
          v166 = *(std::__shared_weak_count **)(v33 + 56);
          *(_QWORD *)(v33 + 48) = v21;
          *(_QWORD *)(v33 + 56) = v19;
          if (!v166)
            goto LABEL_265;
          v167 = (unint64_t *)&v166->__shared_owners_;
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          goto LABEL_263;
        }
        v178 = v30;
        v180 = v28;
        v34 = std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::find<std::pair<std::string,float>>((_QWORD *)(v31 + 112), (float *)a5);
        if (v34)
        {
          v35 = (char *)v34;
          v36 = (uint64_t *)*((_QWORD *)v34 + 6);
          v37 = *v36;
          *(_QWORD *)(v37 + 8) = v36[1];
          *(_QWORD *)v36[1] = v37;
          --*(_QWORD *)(v31 + 168);
          std::__destroy_at[abi:nn180100]<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,0>((uint64_t)(v36 + 2));
          operator delete(v36);
          std::__hash_table<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::__unordered_map_hasher<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,grl::codec::PackKeyHash,std::equal_to<std::pair<std::string,float>>,true>,std::__unordered_map_equal<std::pair<std::string,float>,std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>,std::equal_to<std::pair<std::string,float>>,grl::codec::PackKeyHash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,float>,std::__list_iterator<std::pair<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>>,void *>>>>::erase((_QWORD *)(v31 + 112), v35);
        }
        v38 = (char *)operator new(0x40uLL);
        v39 = (std::string *)(v38 + 16);
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
        if (*(char *)(a5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
        }
        else
        {
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = *(_OWORD *)a5;
          *((_QWORD *)v38 + 4) = *(_QWORD *)(a5 + 16);
        }
        *((_DWORD *)v38 + 10) = *(_DWORD *)(a5 + 24);
        *((_QWORD *)v38 + 6) = 0;
        *((_QWORD *)v38 + 7) = 0;
        *(_QWORD *)v38 = v31 + 152;
        v98 = *(_QWORD **)(v31 + 160);
        *((_QWORD *)v38 + 1) = v98;
        *v98 = v38;
        v99 = *(_QWORD *)(v31 + 168) + 1;
        *(_QWORD *)(v31 + 160) = v38;
        *(_QWORD *)(v31 + 168) = v99;
        v100 = grl::codec::PackKeyHash::operator()(a5);
        v101 = *(_QWORD *)(v31 + 120);
        v188 = (std::mutex *)v100;
        if (v101)
        {
          v102 = v100;
          v103 = (uint8x8_t)vcnt_s8((int8x8_t)v101);
          v103.i16[0] = vaddlv_u8(v103);
          v182 = v103.u32[0];
          if (v103.u32[0] > 1uLL)
          {
            v104 = v100;
            if (v100 >= v101)
              v104 = v100 % v101;
          }
          else
          {
            v104 = (v101 - 1) & v100;
          }
          v112 = *(unsigned __int8 ***)(*v32 + 8 * v104);
          v186 = v104;
          if (v112)
          {
            for (j = *v112; j; j = *(unsigned __int8 **)j)
            {
              v114 = *((_QWORD *)j + 1);
              if (v114 == v102)
              {
                v115 = std::equal_to<std::pair<std::string,float>>::operator()[abi:nn180100](j + 16, (float *)a5);
                v104 = v186;
                v102 = (unint64_t)v188;
                if (v115)
                  goto LABEL_218;
              }
              else
              {
                if (v182 > 1)
                {
                  if (v114 >= v101)
                    v114 %= v101;
                }
                else
                {
                  v114 &= v101 - 1;
                }
                if (v114 != v104)
                  break;
              }
            }
          }
        }
        v184 = (_QWORD *)(v31 + 128);
        v116 = (char *)operator new(0x38uLL);
        v117 = (unint64_t)v188;
        *(_QWORD *)v116 = 0;
        *((_QWORD *)v116 + 1) = v188;
        v118 = (std::string *)(v116 + 16);
        if (*(char *)(a5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v118, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
          v117 = (unint64_t)v188;
        }
        else
        {
          *(_OWORD *)&v118->__r_.__value_.__l.__data_ = *(_OWORD *)a5;
          *((_QWORD *)v116 + 4) = *(_QWORD *)(a5 + 16);
        }
        v119 = v186;
        *((_DWORD *)v116 + 10) = *(_DWORD *)(a5 + 24);
        *((_QWORD *)v116 + 6) = v38;
        v120 = (float)(unint64_t)(*(_QWORD *)(v31 + 136) + 1);
        v121 = *(float *)(v31 + 144);
        if (v101 && (float)(v121 * (float)v101) >= v120)
        {
LABEL_208:
          v162 = (_QWORD *)*v32;
          v163 = *(_QWORD **)(*v32 + 8 * v119);
          if (v163)
          {
            *(_QWORD *)v116 = *v163;
          }
          else
          {
            *(_QWORD *)v116 = *v184;
            *v184 = v116;
            v162[v119] = v184;
            if (!*(_QWORD *)v116)
              goto LABEL_217;
            v164 = *(_QWORD *)(*(_QWORD *)v116 + 8);
            if ((v101 & (v101 - 1)) != 0)
            {
              if (v164 >= v101)
                v164 %= v101;
            }
            else
            {
              v164 &= v101 - 1;
            }
            v163 = (_QWORD *)(*v32 + 8 * v164);
          }
          *v163 = v116;
LABEL_217:
          ++*(_QWORD *)(v31 + 136);
LABEL_218:
          while (*(_QWORD *)(v31 + 168) > *(_QWORD *)(v31 + 104))
            geo::Cache<std::pair<std::string,float>,std::shared_ptr<grl::codec::IconDataPack>,grl::codec::PackKeyHash,geo::LRUPolicy>::_pop((_QWORD *)(v31 + 104));
          v33 = *(_QWORD *)(v31 + 160);
          v30 = v178;
          v28 = v180;
          goto LABEL_221;
        }
        v122 = 1;
        if (v101 >= 3)
          v122 = (v101 & (v101 - 1)) != 0;
        v123 = v122 | (2 * v101);
        v124 = vcvtps_u32_f32(v120 / v121);
        if (v123 <= v124)
          v125 = v124;
        else
          v125 = v123;
        if (v125 == 1)
        {
          v125 = 2;
        }
        else if ((v125 & (v125 - 1)) != 0)
        {
          v140 = std::__next_prime(v125);
          v117 = (unint64_t)v188;
          v125 = v140;
        }
        v101 = *(_QWORD *)(v31 + 120);
        if (v125 > v101)
          goto LABEL_157;
        if (v125 < v101)
        {
          v154 = vcvtps_u32_f32((float)*(unint64_t *)(v31 + 136) / *(float *)(v31 + 144));
          if (v101 < 3
            || (v155 = (uint8x8_t)vcnt_s8((int8x8_t)v101), v155.i16[0] = vaddlv_u8(v155), v155.u32[0] > 1uLL))
          {
            v154 = std::__next_prime(v154);
            v117 = (unint64_t)v188;
          }
          else
          {
            v156 = 1 << -(char)__clz(v154 - 1);
            if (v154 >= 2)
              v154 = v156;
          }
          if (v125 <= v154)
            v125 = v154;
          if (v125 >= v101)
          {
            v101 = *(_QWORD *)(v31 + 120);
          }
          else
          {
            if (v125)
            {
LABEL_157:
              if (v125 >> 61)
                goto LABEL_286;
              v141 = operator new(8 * v125);
              v142 = (_QWORD *)*v32;
              *v32 = v141;
              if (v142)
                operator delete(v142);
              v143 = 0;
              *(_QWORD *)(v31 + 120) = v125;
              do
                *(_QWORD *)(*v32 + 8 * v143++) = 0;
              while (v125 != v143);
              v144 = (_QWORD *)*v184;
              v117 = (unint64_t)v188;
              if (*v184)
              {
                v145 = v144[1];
                v146 = (uint8x8_t)vcnt_s8((int8x8_t)v125);
                v146.i16[0] = vaddlv_u8(v146);
                if (v146.u32[0] > 1uLL)
                {
                  if (v145 >= v125)
                    v145 %= v125;
                }
                else
                {
                  v145 &= v125 - 1;
                }
                *(_QWORD *)(*v32 + 8 * v145) = v184;
                v160 = (_QWORD *)*v144;
                if (*v144)
                {
                  do
                  {
                    v161 = v160[1];
                    if (v146.u32[0] > 1uLL)
                    {
                      if (v161 >= v125)
                        v161 %= v125;
                    }
                    else
                    {
                      v161 &= v125 - 1;
                    }
                    if (v161 != v145)
                    {
                      if (!*(_QWORD *)(*v32 + 8 * v161))
                      {
                        *(_QWORD *)(*v32 + 8 * v161) = v144;
                        goto LABEL_199;
                      }
                      *v144 = *v160;
                      *v160 = **(_QWORD **)(*v32 + 8 * v161);
                      **(_QWORD **)(*v32 + 8 * v161) = v160;
                      v160 = v144;
                    }
                    v161 = v145;
LABEL_199:
                    v144 = v160;
                    v160 = (_QWORD *)*v160;
                    v145 = v161;
                  }
                  while (v160);
                }
              }
              v101 = v125;
              goto LABEL_203;
            }
            v176 = (_QWORD *)*v32;
            *v32 = 0;
            if (v176)
              operator delete(v176);
            v101 = 0;
            *(_QWORD *)(v31 + 120) = 0;
            v117 = (unint64_t)v188;
          }
        }
LABEL_203:
        if ((v101 & (v101 - 1)) != 0)
        {
          if (v117 >= v101)
            v119 = v117 % v101;
          else
            v119 = v117;
        }
        else
        {
          v119 = (v101 - 1) & v117;
        }
        goto LABEL_208;
      }
    }
    else
    {
LABEL_28:
      if ((v23 & 1) != 0)
        goto LABEL_29;
    }
    do
      v87 = __ldaxr(v20);
    while (__stlxr(v87 - 1, v20));
    goto LABEL_69;
  }
  if (a4)
  {
    v14 = (unint64_t *)&a4->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    if (!a3)
    {
      do
        v13 = __ldaxr(v14);
      while (__stlxr(v13 - 1, v14));
LABEL_21:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
        v18 = a4;
LABEL_75:
        std::__shared_weak_count::__release_weak(v18);
        goto LABEL_76;
      }
      goto LABEL_76;
    }
  }
  else if (!a3)
  {
    goto LABEL_76;
  }
  v57 = (std::__shared_weak_count *)operator new(0x1F8uLL);
  v57->__shared_owners_ = 0;
  v58 = (unint64_t *)&v57->__shared_owners_;
  v57->__shared_weak_owners_ = 0;
  v57->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E57D8;
  v57[2].std::__shared_count = 0u;
  *(_OWORD *)&v57[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[3].__shared_owners_ = 0u;
  v57[4].std::__shared_count = 0u;
  *(_OWORD *)&v57[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[5].__shared_owners_ = 0u;
  v57[6].std::__shared_count = 0u;
  *(_OWORD *)&v57[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[7].__shared_owners_ = 0u;
  v57[8].std::__shared_count = 0u;
  *(_OWORD *)&v57[8].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[9].__shared_owners_ = 0u;
  v57[10].std::__shared_count = 0u;
  *(_OWORD *)&v57[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[11].__shared_owners_ = 0u;
  v57[12].std::__shared_count = 0u;
  *(_OWORD *)&v57[12].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[13].__shared_owners_ = 0u;
  v57[14].std::__shared_count = 0u;
  *(_OWORD *)&v57[14].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[15].__shared_owners_ = 0u;
  v57[16].std::__shared_count = 0u;
  *(_OWORD *)&v57[16].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[17].__shared_owners_ = 0u;
  v57[18].std::__shared_count = 0u;
  *(_OWORD *)&v57[18].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v57[19].__shared_owners_ = 0u;
  v57[20].std::__shared_count = 0u;
  *(_OWORD *)&v57[1].__shared_owners_ = 0u;
  v57[20].__shared_weak_owners_ = 0;
  v57[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E42C27A8;
  v59 = (grl::codec::IconDataPack *)&v57[1];
  v60 = (grl::Allocator *)std::string::basic_string[abi:nn180100]<0>(&v57[1].__shared_owners_, "Default");
  LODWORD(v57[2].__shared_owners_) = 1065353216;
  v57[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42C2728;
  v57[2].__shared_weak_owners_ = 0;
  v57[3].__vftable = 0;
  v61 = (grl::Allocator *)grl::Allocator::instance(v60);
  v57[3].__shared_owners_ = (uint64_t)v61;
  v57[3].__shared_weak_owners_ = 0;
  v62 = (grl::Allocator *)grl::Allocator::instance(v61);
  v57[4].__vftable = (std::__shared_weak_count_vtbl *)v62;
  v57[4].__shared_owners_ = 0;
  LODWORD(v57[4].__shared_weak_owners_) = 1065353216;
  v57[5].__vftable = 0;
  v57[5].__shared_owners_ = 0;
  v63 = (grl::Allocator *)grl::Allocator::instance(v62);
  v57[5].__shared_weak_owners_ = (uint64_t)v63;
  v57[6].__vftable = 0;
  v64 = (grl::Allocator *)grl::Allocator::instance(v63);
  v57[6].__shared_owners_ = (uint64_t)v64;
  v57[6].__shared_weak_owners_ = 0;
  LODWORD(v57[7].__vftable) = 1065353216;
  v57[7].__shared_owners_ = 0;
  v57[7].__shared_weak_owners_ = 0;
  v65 = (grl::Allocator *)grl::Allocator::instance(v64);
  v57[8].__vftable = (std::__shared_weak_count_vtbl *)v65;
  v57[8].__shared_owners_ = 0;
  v66 = (grl::Allocator *)grl::Allocator::instance(v65);
  v57[8].__shared_weak_owners_ = (uint64_t)v66;
  v57[9].__vftable = 0;
  LODWORD(v57[9].__shared_owners_) = 1065353216;
  v57[9].__shared_weak_owners_ = 0;
  v57[10].__vftable = 0;
  v67 = (grl::Allocator *)grl::Allocator::instance(v66);
  v57[10].__shared_owners_ = (uint64_t)v67;
  v57[10].__shared_weak_owners_ = 0;
  v68 = (grl::Allocator *)grl::Allocator::instance(v67);
  v57[11].__vftable = (std::__shared_weak_count_vtbl *)v68;
  v57[11].__shared_owners_ = 0;
  LODWORD(v57[11].__shared_weak_owners_) = 1065353216;
  v57[12].__shared_owners_ = 0;
  v69 = (grl::Allocator *)grl::Allocator::instance(v68);
  v57[12].__shared_weak_owners_ = (uint64_t)v69;
  v57[13].__vftable = 0;
  v57[12].__vftable = (std::__shared_weak_count_vtbl *)&v57[12].__shared_owners_;
  v57[13].__shared_weak_owners_ = 0;
  v70 = (grl::Allocator *)grl::Allocator::instance(v69);
  v57[14].__vftable = (std::__shared_weak_count_vtbl *)v70;
  v57[14].__shared_owners_ = 0;
  v57[13].__shared_owners_ = (uint64_t)&v57[13].__shared_weak_owners_;
  v57[15].__vftable = 0;
  v71 = (grl::Allocator *)grl::Allocator::instance(v70);
  v57[15].__shared_owners_ = (uint64_t)v71;
  v57[15].__shared_weak_owners_ = 0;
  v57[14].__shared_weak_owners_ = (uint64_t)&v57[15];
  v57[16].__shared_owners_ = 0;
  v72 = (grl::Allocator *)grl::Allocator::instance(v71);
  v57[16].__shared_weak_owners_ = (uint64_t)v72;
  v57[17].__vftable = 0;
  v57[16].__vftable = (std::__shared_weak_count_vtbl *)&v57[16].__shared_owners_;
  v57[17].__shared_owners_ = 0;
  v57[17].__shared_weak_owners_ = 0;
  v73 = (grl::Allocator *)grl::Allocator::instance(v72);
  v57[18].__vftable = (std::__shared_weak_count_vtbl *)v73;
  v57[18].__shared_owners_ = 0;
  v74 = (grl::Allocator *)grl::Allocator::instance(v73);
  v57[18].__shared_weak_owners_ = (uint64_t)v74;
  v57[19].__vftable = 0;
  LODWORD(v57[19].__shared_owners_) = 1065353216;
  v57[20].__vftable = 0;
  v57[20].__shared_owners_ = grl::Allocator::instance(v74);
  v57[20].__shared_weak_owners_ = 0;
  v57[19].__shared_weak_owners_ = (uint64_t)&v57[20];
  v190 = a3;
  v191 = a4;
  v75 = ((uint64_t (*)(std::__shared_weak_count *, uint64_t *))v57[1].__on_zero_shared_weak)(&v57[1], &v190);
  v76 = v75;
  v77 = v191;
  if (v191)
  {
    v78 = (unint64_t *)&v191->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
      if ((v76 & 1) != 0)
        goto LABEL_55;
      do
LABEL_72:
        v88 = __ldaxr(v58);
      while (__stlxr(v88 - 1, v58));
      if (v88)
        goto LABEL_76;
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      v18 = v57;
      goto LABEL_75;
    }
  }
  if ((v75 & 1) == 0)
    goto LABEL_72;
LABEL_55:
  if (!*(_BYTE *)(a2 + 88))
  {
    v80 = (std::__shared_mutex_base *)(a2 + 104);
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a2 + 104));
    v81 = *(_QWORD *)(a2 + 96);
    if (v81)
    {
      v187 = (std::mutex *)(v81 + 176);
      std::mutex::lock((std::mutex *)(v81 + 176));
      v82 = *(uint64_t ***)(a2 + 96);
      v84 = (uint64_t *)(v82 + 1);
      v83 = (uint64_t)v82[1];
      if (v83)
      {
        while (1)
        {
          while (1)
          {
            v85 = (uint64_t *)v83;
            v86 = (const void **)(v83 + 32);
            if (!std::less<std::pair<std::string,float>>::operator()[abi:nn180100]((const void **)a5, (const void **)(v83 + 32)))break;
            v83 = *v85;
            v84 = v85;
            if (!*v85)
              goto LABEL_78;
          }
          if (!std::less<std::pair<std::string,float>>::operator()[abi:nn180100](v86, (const void **)a5))
            break;
          v83 = v85[1];
          if (!v83)
          {
            v84 = v85 + 1;
            goto LABEL_78;
          }
        }
        v89 = (uint64_t)v85;
      }
      else
      {
        v85 = (uint64_t *)(v82 + 1);
LABEL_78:
        v89 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v82[2] + 16))(v82[2], 80, 8);
        v90 = (std::string *)(v89 + 32);
        if (*(char *)(a5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v90, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
        }
        else
        {
          v91 = *(_OWORD *)a5;
          *(_QWORD *)(v89 + 48) = *(_QWORD *)(a5 + 16);
          *(_OWORD *)&v90->__r_.__value_.__l.__data_ = v91;
        }
        *(_DWORD *)(v89 + 56) = *(_DWORD *)(a5 + 24);
        *(_QWORD *)(v89 + 64) = 0;
        *(_QWORD *)(v89 + 72) = 0;
        *(_QWORD *)v89 = 0;
        *(_QWORD *)(v89 + 8) = 0;
        *(_QWORD *)(v89 + 16) = v85;
        *v84 = v89;
        v92 = (uint64_t *)**v82;
        v93 = (uint64_t *)v89;
        if (v92)
        {
          *v82 = v92;
          v93 = (uint64_t *)*v84;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v82[1], v93);
        v82[3] = (uint64_t *)((char *)v82[3] + 1);
      }
      do
        v94 = __ldxr(v58);
      while (__stxr(v94 + 1, v58));
      v95 = *(std::__shared_weak_count **)(v89 + 72);
      *(_QWORD *)(v89 + 64) = v59;
      *(_QWORD *)(v89 + 72) = v57;
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      std::mutex::unlock(v187);
    }
    std::__shared_mutex_base::unlock_shared(v80);
  }
  *a1 = v59;
  a1[1] = (grl::codec::IconDataPack *)v57;
}

void md::GeoResourceProvider::streamForResourceName(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count_vtbl *v10;
  _QWORD *v11;
  uint64_t v12;
  std::ios_base *v13;
  unint64_t v14;
  id v15;

  objc_msgSend(MEMORY[0x1E0D27410], "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "pathForResourceWithName:fallbackBundle:fallbackNameHandler:", v6, 0, &__block_literal_global_76);
  v15 = (id)objc_claimAutoreleasedReturnValue();

  if (v15 && objc_msgSend(objc_retainAutorelease(v15), "UTF8String"))
  {
    v7 = (std::__shared_weak_count *)operator new(0x258uLL);
    v7->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E6610;
    v9 = *(std::__shared_weak_count_vtbl **)(MEMORY[0x1E0DE4F40] + 8);
    v10 = *(std::__shared_weak_count_vtbl **)(MEMORY[0x1E0DE4F40] + 16);
    v7[1].__vftable = v9;
    v11 = &v7[1].__vftable;
    v12 = MEMORY[0x1E0DE4FA8] + 64;
    v7[18].__shared_weak_owners_ = MEMORY[0x1E0DE4FA8] + 64;
    *(std::__shared_weak_count_vtbl **)((char *)&v7[1].__vftable + (unint64_t)v9[-1].__on_zero_shared) = v10;
    v7[1].__shared_owners_ = 0;
    v13 = (std::ios_base *)((char *)&v7[1] + (unint64_t)v7[1].__vftable[-1].__on_zero_shared);
    std::ios_base::init(v13, &v7[1].__shared_weak_owners_);
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)(MEMORY[0x1E0DE4FA8] + 24);
    v7[18].__shared_weak_owners_ = v12;
    MEMORY[0x1A1AF492C](&v7[1].__shared_weak_owners_);
    if (!std::filebuf::open())
      std::ios_base::clear((std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)), *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) | 4);
    if (v7[6].__shared_weak_owners_)
    {
      *a2 = v11;
      a2[1] = v7;
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }

}

void sub_19F279920(_Unwind_Exception *a1)
{
  void *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  void *v5;

  std::istream::~istream();
  MEMORY[0x1A1AF4D64](v3);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v5);

  _Unwind_Resume(a1);
}

void grl::codec::IconConfigPack::setLocationCacheSize(grl::codec::IconConfigPack *this, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 232);
  std::mutex::lock((std::mutex *)((char *)this + 232));
  *((_QWORD *)this + 9) = a2;
  while (*((_QWORD *)this + 17) > *((_QWORD *)this + 9))
    geo::Cache<grl::codec::IconConfigPack::IconLocationIndex,std::shared_ptr<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>,grl::codec::IconConfigPack::IconLocationIndexHash,geo::LRUPolicy>::_pop((uint64_t)this + 72);
  std::mutex::unlock(v4);
}

grl::codec::IconConfigPack *grl::codec::IconConfigPack::IconConfigPack(grl::codec::IconConfigPack *this, uint64_t a2)
{
  grl::Allocator *v4;
  grl::Allocator *v5;
  grl::Allocator *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;

  *(_QWORD *)this = off_1E42C27A8;
  v4 = (grl::Allocator *)std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 1, "Default");
  *((_DWORD *)this + 8) = 1065353216;
  *(_QWORD *)this = &off_1E42C27E8;
  *((_QWORD *)this + 6) = 0;
  v5 = (grl::Allocator *)grl::Allocator::instance(v4);
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 7) = v5;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 9) = a2;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *((_QWORD *)this + 15) = (char *)this + 120;
  *((_QWORD *)this + 16) = (char *)this + 120;
  *((_QWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 178) = 0u;
  v6 = (grl::Allocator *)grl::Allocator::instance(v5);
  *((_QWORD *)this + 27) = v6;
  *((_QWORD *)this + 25) = (char *)this + 208;
  *((_OWORD *)this + 14) = xmmword_19FFB2DD0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_QWORD *)this + 36) = 0;
  grl::make_shared<std::map<grl::IconKey,std::shared_ptr<grl::codec::IconData>,std::less<grl::IconKey>,geo::StdAllocator<std::pair<grl::IconKey const,std::shared_ptr<grl::codec::IconData>>,grl::Allocator>>>(v6, &v11);
  std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100]((uint64_t)this + 152, &v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return this;
}

grl::codec::IconDataPack *grl::codec::IconDataPack::IconDataPack(grl::codec::IconDataPack *this, uint64_t a2)
{
  grl::Allocator *v4;
  grl::Allocator *v5;

  *(_QWORD *)this = off_1E42C27A8;
  v4 = (grl::Allocator *)std::string::basic_string[abi:nn180100]<0>((_QWORD *)this + 1, "Default");
  *((_DWORD *)this + 8) = 1065353216;
  *(_QWORD *)this = &off_1E42C2768;
  *((_QWORD *)this + 6) = 0;
  v5 = (grl::Allocator *)grl::Allocator::instance(v4);
  *((_QWORD *)this + 7) = v5;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 9) = a2;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *((_QWORD *)this + 15) = (char *)this + 120;
  *((_QWORD *)this + 16) = (char *)this + 120;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 21) = grl::Allocator::instance(v5);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 850045863;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_QWORD *)this + 49) = 0;
  return this;
}

void grl::codec::IconDataPack::setImageAtlasSize(grl::codec::IconDataPack *this, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 336);
  std::mutex::lock((std::mutex *)((char *)this + 336));
  *((_QWORD *)this + 9) = a2;
  while (*((_QWORD *)this + 17) > *((_QWORD *)this + 9))
    geo::Cache<unsigned short,std::shared_ptr<esl::QuartzImage>,std::hash<unsigned short>,geo::LRUPolicy>::_pop((uint64_t)this + 72);
  std::mutex::unlock(v4);
}

void grl::ResourceProvider::resourceNamesOfResourceAndPackType(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  std::mutex *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  grl::Allocator *v16;
  std::mutex *v17;
  std::string *v18;
  std::string *v19;
  std::string::size_type v20;
  _BOOL4 v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  grl::Allocator *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  NSObject *v37;
  void **v38;
  const char *v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  void *__p[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  std::string v59;
  void **v60;
  __int16 v61;
  void **v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  LOBYTE(v58) = a2;
  BYTE1(v58) = a3;
  *((_QWORD *)&v58 + 1) = a4;
  v10 = (std::mutex *)(a1 + 176);
  std::mutex::lock((std::mutex *)(a1 + 176));
  v11 = (uint64_t **)(a1 + 240);
  v12 = std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::find<grl::ResourceProvider::ResourceCacheKey>(a1 + 240, (unsigned __int8 *)&v58);
  if (a1 + 248 != v12)
  {
    v13 = *(_QWORD *)(v12 + 56);
    *a5 = *(_QWORD *)(v12 + 48);
    a5[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    std::mutex::unlock(v10);
    return;
  }
  std::mutex::unlock(v10);
  v55 = 0uLL;
  v56 = 0;
  v57 = grl::Allocator::instance(v16);
  (*(void (**)(uint64_t **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 24))(&v53, a1, a4);
  if (!v53)
  {
    v33 = (grl::Allocator *)operator new(0x38uLL);
    *((_QWORD *)v33 + 1) = 0;
    *((_QWORD *)v33 + 2) = 0;
    *((_QWORD *)v33 + 3) = 0;
    *(_QWORD *)v33 = &off_1E42DABB0;
    *((_QWORD *)v33 + 4) = 0;
    *((_QWORD *)v33 + 5) = 0;
    *((_QWORD *)v33 + 6) = grl::Allocator::instance(v33);
    *a5 = (char *)v33 + 24;
    a5[1] = v33;
    goto LABEL_36;
  }
  v17 = (std::mutex *)(a1 + 112);
  std::mutex::lock(v17);
  v18 = (std::string *)*v53;
  v19 = (std::string *)v53[1];
  v51[0] = &v55;
  while (v18 != v19)
  {
    v20 = std::string::rfind(v18, 46, 0xFFFFFFFFFFFFFFFFLL);
    if (v20 == -1)
      goto LABEL_22;
    std::string::basic_string(&v59, v18, v20 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v49);
    grl::ResourceTypeFromPackExtension((int64_t)&v59, v49);
    grl::codec::PackTypeFromExtension((int64_t)&v59, __p);
    v22 = LOBYTE(v49[0]) && LOBYTE(__p[0]) && BYTE1(v49[0]) == a2 && BYTE1(__p[0]) == a3;
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v22)
        goto LABEL_22;
LABEL_21:
      std::back_insert_iterator<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>::operator=[abi:nn180100]((unint64_t **)v51, (__int128 *)v18);
      goto LABEL_22;
    }
    operator delete(v59.__r_.__value_.__l.__data_);
    if (v22)
      goto LABEL_21;
LABEL_22:
    ++v18;
  }
  if ((_QWORD)v55 == *((_QWORD *)&v55 + 1) && *v53 != v53[1])
  {
    if (qword_1ECE65BB8 != -1)
      dispatch_once(&qword_1ECE65BB8, &__block_literal_global_2);
    v37 = _MergedGlobals_3;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_3, OS_LOG_TYPE_ERROR))
    {
      v38 = v51;
      grl::buildStringFromResourceNames(*v53, 0xAAAAAAAAAAAAAAABLL * ((v53[1] - *v53) >> 3), v51);
      if (v52 < 0)
        v38 = (void **)v51[0];
      if (a2 > 3)
        v39 = "";
      else
        v39 = off_1E4314D70[(char)a2];
      v40 = 0;
      v41 = 0;
      v50 = 2;
      strcpy((char *)v49, "00");
      do
      {
        v42 = v40;
        if (((a4 >> v41) & 1) != 0)
        {
          v43 = v41 ^ 1;
          if (v50 >= 0)
            v44 = v49;
          else
            v44 = (void **)v49[0];
          *((_BYTE *)v44 + v43) = 49;
        }
        v40 = 1;
        v41 = 1;
      }
      while ((v42 & 1) == 0);
      if (v50 >= 0)
        v45 = v49;
      else
        v45 = (void **)v49[0];
      grl::buildStringFromResourceNames(v55, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v55 + 1) - v55) >> 3), __p);
      if (v48 >= 0)
        v46 = __p;
      else
        v46 = (void **)__p[0];
      LODWORD(v59.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
      WORD2(v59.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v39;
      HIWORD(v59.__r_.__value_.__r.__words[2]) = 2080;
      v60 = v45;
      v61 = 2080;
      v62 = v46;
      _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_ERROR, "Resources names got filtered to empty set for resourceType:%s location:%s input:%s output:%s", (uint8_t *)&v59, 0x2Au);
      if (v48 < 0)
        operator delete(__p[0]);
      if (v50 < 0)
        operator delete(v49[0]);
      if (v52 < 0)
        operator delete(v51[0]);
    }
  }
  std::mutex::unlock(v17);
  std::mutex::lock(v10);
  v23 = (char *)operator new(0x38uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_1E42DABB0;
  v24 = v55;
  v25 = v57;
  *((_QWORD *)v23 + 5) = v56;
  *((_QWORD *)v23 + 6) = v25;
  v59.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
  *(_OWORD *)(v23 + 24) = v24;
  v55 = 0uLL;
  v56 = 0;
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)(v23 + 24);
  v26 = std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::__emplace_unique_key_args<grl::ResourceProvider::ResourceCacheKey,grl::ResourceProvider::ResourceCacheKey&,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>(v11, (unsigned __int8 *)&v58, &v58, (__int128 *)&v59);
  size = (std::__shared_weak_count *)v59.__r_.__value_.__l.__size_;
  if (v59.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(v59.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v30 = v26[7];
  *a5 = v26[6];
  a5[1] = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  std::mutex::unlock(v10);
LABEL_36:
  v34 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__destroy_vector::operator()[abi:nn180100]((uint64_t **)&v59);
}

int64_t grl::ResourceTypeFromPackExtension@<X0>(int64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v3;
  int v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  const char *v8;
  int64_t result;
  int64_t v10;
  int v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;

  v3 = 0;
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v5 + v6;
  while (1)
  {
    v8 = off_1E4314D90[v3];
    result = strlen(v8);
    if (!result)
      break;
    v10 = result;
    if (v6 >= result)
    {
      v12 = *v8;
      v13 = v6;
      result = v5;
      do
      {
        v14 = v13 - v10;
        if (v14 == -1)
          break;
        result = (int64_t)memchr((void *)result, v12, v14 + 1);
        if (!result)
          break;
        v15 = result;
        result = memcmp((const void *)result, v8, v10);
        if (!(_DWORD)result)
        {
          if (v15 == v7 || v15 - v5 == -1)
            break;
          goto LABEL_21;
        }
        result = v15 + 1;
        v13 = v7 - (v15 + 1);
      }
      while (v13 >= v10);
    }
    if (v3++ >= 3)
    {
      *a2 = 0;
      return result;
    }
  }
LABEL_21:
  *a2 = 1;
  a2[1] = v3;
  return result;
}

int64_t grl::codec::PackTypeFromExtension@<X0>(int64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;
  int v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  const char *v7;
  int64_t result;
  int64_t v9;
  int v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;

  v2 = 0;
  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = *(_QWORD *)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = v4 + v5;
  while (1)
  {
    v7 = &str_3_5;
    if (v2 <= 2)
      v7 = (&off_1E4314F70)[v2];
    result = strlen(v7);
    if (!result)
      break;
    v9 = result;
    if (v5 >= result)
    {
      v11 = *v7;
      v12 = v5;
      result = v4;
      do
      {
        v13 = v12 - v9;
        if (v13 == -1)
          break;
        result = (int64_t)memchr((void *)result, v11, v13 + 1);
        if (!result)
          break;
        v14 = result;
        result = memcmp((const void *)result, v7, v9);
        if (!(_DWORD)result)
        {
          if (v14 == v6 || v14 - v4 == -1)
            break;
          goto LABEL_23;
        }
        result = v14 + 1;
        v12 = v6 - (v14 + 1);
      }
      while (v12 >= v9);
    }
    if (v2++ >= 2)
    {
      *a2 = 0;
      return result;
    }
  }
LABEL_23:
  *a2 = 1;
  a2[1] = v2;
  return result;
}

_QWORD *std::__tree<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::__map_value_compare<grl::ResourceProvider::ResourceCacheKey,std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>,std::less<grl::ResourceProvider::ResourceCacheKey>,true>,std::allocator<std::__value_type<grl::ResourceProvider::ResourceCacheKey,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>>>::__emplace_unique_key_args<grl::ResourceProvider::ResourceCacheKey,grl::ResourceProvider::ResourceCacheKey&,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>> const>>(uint64_t **a1, unsigned __int8 *a2, _OWORD *a3, __int128 *a4)
{
  unsigned __int8 *v7;
  uint64_t **v8;
  _QWORD *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v8 = a1 + 1;
  v7 = (unsigned __int8 *)a1[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v10 = v7;
        v11 = v7 + 32;
        if (!grl::ResourceProvider::ResourceCacheKey::operator<(a2, v7 + 32))
          break;
        v7 = (unsigned __int8 *)*v10;
        v8 = (uint64_t **)v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (!grl::ResourceProvider::ResourceCacheKey::operator<(v11, a2))
        break;
      v7 = (unsigned __int8 *)v10[1];
      if (!v7)
      {
        v8 = (uint64_t **)(v10 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    v12 = v10;
    v10 = operator new(0x40uLL);
    v13 = *a4;
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v13;
    *(_QWORD *)a4 = 0;
    *((_QWORD *)a4 + 1) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v8 = v10;
    v14 = (uint64_t *)**a1;
    v15 = v10;
    if (v14)
    {
      *a1 = v14;
      v15 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

void md::GeoResourceProvider::resourceNames(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  grl::Allocator *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  NSObject *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  char *v29;
  const char *v30;
  const char *v31;
  char *v32;
  size_t v33;
  size_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t j;
  char *v57;
  const char *v58;
  const char *v59;
  char *v60;
  size_t v61;
  size_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  _QWORD *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  std::mutex *v97;
  void *v98;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  unint64_t v109;
  uint64_t v110;
  _BYTE v111[128];
  uint8_t v112[128];
  _BYTE buf[24];
  int v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v97 = (std::mutex *)(a1 + 112);
  std::mutex::lock((std::mutex *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 320);
  v6 = *(_QWORD *)(a1 + 328);
  v95 = (_QWORD *)a1;
  if (v5 == v6)
  {
    v7 = a2;
  }
  else
  {
    v7 = a2;
    while (((*(_DWORD *)v5 ^ a2) & 3) != 0)
    {
      v5 += 24;
      if (v5 == v6)
        goto LABEL_12;
    }
  }
  if (v5 == v6)
  {
LABEL_12:
    v108 = 0uLL;
    v109 = 0;
    v110 = grl::Allocator::instance(v4);
    if ((v7 & 1) == 0)
      goto LABEL_54;
    objc_msgSend(MEMORY[0x1E0D27410], "sharedManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "allResourceNames");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v12 || !objc_msgSend(v12, "count"))
    {
      if (GEOGetVectorKitVKGeoResourceProviderLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKGeoResourceProviderLog(void)::onceToken, &__block_literal_global_78);
      v24 = GEOGetVectorKitVKGeoResourceProviderLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKGeoResourceProviderLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "false";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/GeoResourceProvider.mm";
        *(_WORD *)&buf[22] = 1024;
        v114 = 125;
        _os_log_impl(&dword_19F029000, v24, OS_LOG_TYPE_ERROR, "A non-empty set of resource name of global resources is expected: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
      *a3 = 0;
      a3[1] = 0;

      goto LABEL_134;
    }
    v13 = objc_msgSend(v12, "count");
    v14 = v13;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - v108) >> 3) >= v13)
      goto LABEL_31;
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, 24 * v13, 8);
    v16 = v15 + 24 * ((*((_QWORD *)&v108 + 1) - (_QWORD)v108) / 24);
    v17 = v15 + 24 * v14;
    v19 = *((_QWORD *)&v108 + 1);
    v18 = v108;
    if (*((_QWORD *)&v108 + 1) == (_QWORD)v108)
    {
      *(_QWORD *)&v108 = v15 + 24 * ((*((_QWORD *)&v108 + 1) - (_QWORD)v108) / 24);
      *((_QWORD *)&v108 + 1) = v16;
      v23 = v109;
      v109 = v17;
      if (!v19)
        goto LABEL_31;
    }
    else
    {
      v20 = *((_QWORD *)&v108 + 1);
      v21 = v15 + 24 * ((*((_QWORD *)&v108 + 1) - (_QWORD)v108) / 24);
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *(_QWORD *)(v21 - 8) = *(_QWORD *)(v20 - 8);
        *(_OWORD *)(v21 - 24) = v22;
        v21 -= 24;
        *(_QWORD *)(v20 - 16) = 0;
        *(_QWORD *)(v20 - 8) = 0;
        *(_QWORD *)(v20 - 24) = 0;
        v20 -= 24;
      }
      while (v20 != v18);
      *(_QWORD *)&v108 = v21;
      *((_QWORD *)&v108 + 1) = v16;
      v23 = v109;
      v109 = v17;
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v19 = v18;
      if (!v18)
        goto LABEL_31;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v110 + 40))(v110, v19, v23 - v19);
LABEL_31:
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v25 = v12;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v104, v112, 16);
    v7 = a2;
    if (!v26)
      goto LABEL_53;
    v27 = *(_QWORD *)v105;
    while (1)
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v105 != v27)
          objc_enumerationMutation(v25);
        v30 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v104 + 1) + 8 * i)), "UTF8String");
        v31 = v30;
        *(_QWORD *)buf = v30;
        if (v30)
        {
          v32 = (char *)*((_QWORD *)&v108 + 1);
          if (*((_QWORD *)&v108 + 1) < v109)
          {
            if (!*((_QWORD *)&v108 + 1))
              goto LABEL_51;
            v33 = strlen(v30);
            if (v33 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v34 = v33;
            if (v33 >= 0x17)
            {
              v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v33 | 7) != 0x17)
                v36 = v33 | 7;
              v37 = v36 + 1;
              v35 = operator new(v36 + 1);
              *((_QWORD *)v32 + 1) = v34;
              *((_QWORD *)v32 + 2) = v37 | 0x8000000000000000;
              *(_QWORD *)v32 = v35;
              v7 = a2;
            }
            else
            {
              *(_BYTE *)(*((_QWORD *)&v108 + 1) + 23) = v33;
              v35 = v32;
              if (!v33)
              {
LABEL_50:
                v35[v34] = 0;
LABEL_51:
                v29 = v32 + 24;
LABEL_35:
                *((_QWORD *)&v108 + 1) = v29;
                continue;
              }
            }
            memmove(v35, v31, v34);
            goto LABEL_50;
          }
          v29 = std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__emplace_back_slow_path<char const*&>((uint64_t *)&v108, (const char **)buf);
          goto LABEL_35;
        }
      }
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v104, v112, 16);
      if (!v26)
      {
LABEL_53:

LABEL_54:
        if ((v7 & 2) != 0)
        {
          objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "allRegionalResourceNames");
          v39 = (void *)objc_claimAutoreleasedReturnValue();

          if (v39)
          {
            v98 = v39;
            v7 = a2;
            if (objc_msgSend(v39, "count"))
            {
              v40 = v108;
              v41 = objc_msgSend(v39, "count") - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 3);
              v42 = v108;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - v108) >> 3) < v41)
              {
                if (v41 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v43 = *((_QWORD *)&v108 + 1);
                v44 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, 24 * v41, 8);
                v45 = v44 + 24 * ((v43 - v42) / 24);
                v46 = v44 + 24 * v41;
                v48 = *((_QWORD *)&v108 + 1);
                v47 = v108;
                if (*((_QWORD *)&v108 + 1) == (_QWORD)v108)
                {
                  *(_QWORD *)&v108 = v44 + 24 * ((v43 - v42) / 24);
                  *((_QWORD *)&v108 + 1) = v108;
                  v52 = v109;
                  v109 = v46;
                }
                else
                {
                  v49 = v44 + 24 * ((v43 - v42) / 24);
                  do
                  {
                    v50 = *(_OWORD *)(v48 - 24);
                    *(_QWORD *)(v49 - 8) = *(_QWORD *)(v48 - 8);
                    *(_OWORD *)(v49 - 24) = v50;
                    v49 -= 24;
                    *(_QWORD *)(v48 - 16) = 0;
                    *(_QWORD *)(v48 - 8) = 0;
                    *(_QWORD *)(v48 - 24) = 0;
                    v48 -= 24;
                  }
                  while (v48 != v47);
                  v51 = *((_QWORD *)&v108 + 1);
                  v48 = v108;
                  *(_QWORD *)&v108 = v49;
                  *((_QWORD *)&v108 + 1) = v45;
                  v52 = v109;
                  v109 = v46;
                  while (v51 != v48)
                  {
                    if (*(char *)(v51 - 1) < 0)
                      operator delete(*(void **)(v51 - 24));
                    v51 -= 24;
                  }
                }
                if (v48)
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v110 + 40))(v110, v48, v52 - v48);
              }
              v102 = 0u;
              v103 = 0u;
              v100 = 0u;
              v101 = 0u;
              v53 = v39;
              v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v100, v111, 16);
              v7 = a2;
              if (v54)
              {
                v55 = *(_QWORD *)v101;
                do
                {
                  for (j = 0; j != v54; ++j)
                  {
                    if (*(_QWORD *)v101 != v55)
                      objc_enumerationMutation(v53);
                    v58 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v100 + 1) + 8 * j)), "UTF8String");
                    v59 = v58;
                    *(_QWORD *)buf = v58;
                    if (v58)
                    {
                      v60 = (char *)*((_QWORD *)&v108 + 1);
                      if (*((_QWORD *)&v108 + 1) < v109)
                      {
                        if (!*((_QWORD *)&v108 + 1))
                          goto LABEL_92;
                        v61 = strlen(v58);
                        if (v61 > 0x7FFFFFFFFFFFFFF7)
                          abort();
                        v62 = v61;
                        if (v61 >= 0x17)
                        {
                          v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v61 | 7) != 0x17)
                            v64 = v61 | 7;
                          v65 = v64 + 1;
                          v63 = operator new(v64 + 1);
                          *((_QWORD *)v60 + 1) = v62;
                          *((_QWORD *)v60 + 2) = v65 | 0x8000000000000000;
                          *(_QWORD *)v60 = v63;
                          v7 = a2;
                        }
                        else
                        {
                          *(_BYTE *)(*((_QWORD *)&v108 + 1) + 23) = v61;
                          v63 = v60;
                          if (!v61)
                          {
LABEL_91:
                            v63[v62] = 0;
                            v39 = v98;
LABEL_92:
                            v57 = v60 + 24;
LABEL_76:
                            *((_QWORD *)&v108 + 1) = v57;
                            continue;
                          }
                        }
                        memmove(v63, v59, v62);
                        goto LABEL_91;
                      }
                      v57 = std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::__emplace_back_slow_path<char const*&>((uint64_t *)&v108, (const char **)buf);
                      goto LABEL_76;
                    }
                  }
                  v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v100, v111, 16);
                }
                while (v54);
              }

            }
          }

        }
        v66 = (char *)operator new(0x38uLL);
        v67 = (std::__shared_weak_count *)v66;
        *((_QWORD *)v66 + 1) = 0;
        *((_QWORD *)v66 + 2) = 0;
        *(_QWORD *)v66 = &off_1E42E6760;
        *(_OWORD *)(v66 + 24) = v108;
        v68 = v110;
        *((_QWORD *)v66 + 5) = v109;
        *((_QWORD *)v66 + 6) = v68;
        v108 = 0uLL;
        v109 = 0;
        *(_QWORD *)buf = v7;
        *(_QWORD *)&buf[8] = v66 + 24;
        *(_QWORD *)&buf[16] = v66;
        v70 = (char *)v95[40];
        v69 = (char *)v95[41];
        v71 = v70;
        if (v70 != v69)
        {
          v71 = (char *)v95[40];
          while (((*(_DWORD *)v71 ^ a2) & 3) != 0)
          {
            v71 += 24;
            if (v71 == v69)
              goto LABEL_102;
          }
        }
        if (v71 != v69)
          goto LABEL_127;
LABEL_102:
        v72 = v95[42];
        if ((unint64_t)v69 < v72)
        {
          *(_QWORD *)v69 = a2;
          *((_QWORD *)v69 + 1) = v66 + 24;
          *((_QWORD *)v69 + 2) = v66;
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)&buf[16] = 0;
          v71 = v69;
          v95[41] = v69 + 24;
          goto LABEL_131;
        }
        v73 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v70) >> 3) + 1;
        if (v73 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (_QWORD)v70) >> 3);
        if (2 * v74 > v73)
          v73 = 2 * v74;
        if (v74 >= 0x555555555555555)
          v75 = 0xAAAAAAAAAAAAAAALL;
        else
          v75 = v73;
        if (v75 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v76 = (char *)operator new(24 * v75);
        v77 = &v76[8 * ((v69 - v70) >> 3)];
        *(_QWORD *)v77 = a2;
        *(_OWORD *)(v77 + 8) = *(_OWORD *)&buf[8];
        v78 = &v76[24 * v75];
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[16] = 0;
        v79 = v77 + 24;
        if (v70 == v69)
        {
          v81 = v95;
          v95[40] = v77;
          v95[41] = v79;
          v95[42] = v78;
          goto LABEL_123;
        }
        do
        {
          v80 = *((_QWORD *)v69 - 3);
          v69 -= 24;
          *((_QWORD *)v77 - 3) = v80;
          v77 -= 24;
          *(_OWORD *)(v77 + 8) = *(_OWORD *)(v69 + 8);
          *((_QWORD *)v69 + 1) = 0;
          *((_QWORD *)v69 + 2) = 0;
        }
        while (v69 != v70);
        v81 = v95;
        v70 = (char *)v95[40];
        v82 = (char *)v95[41];
        v95[40] = v77;
        v95[41] = v79;
        v95[42] = v78;
        if (v82 == v70)
        {
LABEL_123:
          v86 = v81;
        }
        else
        {
          do
          {
            v83 = (std::__shared_weak_count *)*((_QWORD *)v82 - 1);
            if (v83)
            {
              p_shared_owners = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldaxr(p_shared_owners);
              while (__stlxr(v85 - 1, p_shared_owners));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            v82 -= 24;
          }
          while (v82 != v70);
          v86 = v95;
        }
        if (v70)
        {
          operator delete(v70);
          v86 = v95;
        }
        v67 = *(std::__shared_weak_count **)&buf[16];
        v86[41] = v79;
        v71 = v79 - 24;
        if (v67)
        {
LABEL_127:
          v87 = (unint64_t *)&v67->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
LABEL_131:
        *a3 = *((_QWORD *)v71 + 1);
        v89 = *((_QWORD *)v71 + 2);
        a3[1] = v89;
        if (v89)
        {
          v90 = (unint64_t *)(v89 + 8);
          do
            v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
        }
LABEL_134:
        v92 = v108;
        if ((_QWORD)v108)
        {
          v93 = *((_QWORD *)&v108 + 1);
          v94 = v108;
          if (*((_QWORD *)&v108 + 1) != (_QWORD)v108)
          {
            do
            {
              if (*(char *)(v93 - 1) < 0)
                operator delete(*(void **)(v93 - 24));
              v93 -= 24;
            }
            while (v93 != v92);
            v94 = v108;
          }
          *((_QWORD *)&v108 + 1) = v92;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v110 + 40))(v110, v94, v109 - v94);
        }
        goto LABEL_142;
      }
    }
  }
  *a3 = *(_QWORD *)(v5 + 8);
  v8 = *(_QWORD *)(v5 + 16);
  a3[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
LABEL_142:
  std::mutex::unlock(v97);
}

void sub_19F27AEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;

  std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>::~vector[abi:nn180100](&a33);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  uint64_t ***v19;
  uint64_t **v20;
  unint64_t v21;
  uint64_t *v22;
  size_t v23;
  const void *v24;
  uint64_t *v25;
  uint64_t *v26;
  size_t v27;
  const void *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  __int128 *v40;
  _OWORD *v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char *v51;
  __int128 *v52;
  _OWORD *v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  char *v59;
  uint64_t v60;
  char v61;
  float v62;
  float v63;
  _BOOL8 v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  int8x8_t v68;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v75;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  v11 = *(uint64_t **)(a2 + 16);
  if (!v11)
    return a1;
LABEL_19:
  while (2)
  {
    v12 = *((unsigned __int8 *)v11 + 16);
    v13 = *((unsigned __int16 *)v11 + 9);
    v14 = (v13
         - 0x61C8864680B583EBLL
         + ((v12 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v12 - 0x61C8864680B583EBLL) >> 2)) ^ (v12 - 0x61C8864680B583EBLL);
    v15 = (uint64_t *)v11[11];
    v16 = ((unint64_t)&v15[8 * v14 - 0xC3910C8D016B07DLL] + (v14 >> 2) - 3) ^ v14;
    v17 = *(_QWORD *)(a1 + 8);
    if (v17)
    {
      v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        v2 = ((unint64_t)&v15[8 * v14 - 0xC3910C8D016B07DLL] + (v14 >> 2) - 3) ^ v14;
        if (v16 >= v17)
          v2 = v16 % v17;
      }
      else
      {
        v2 = v16 & (v17 - 1);
      }
      v19 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v2);
      if (v19)
      {
        v20 = *v19;
        if (*v19)
        {
          if (v18.u32[0] < 2uLL)
          {
            while (1)
            {
              v25 = v20[1];
              if (v25 == (uint64_t *)v16)
              {
                if (*((unsigned __int8 *)v20 + 16) == (_DWORD)v12
                  && *((unsigned __int16 *)v20 + 9) == (_DWORD)v13
                  && v20[11] == v15)
                {
                  v26 = v20[3];
                  v27 = (char *)v20[4] - (char *)v26;
                  v28 = (const void *)v11[3];
                  if (v27 == v11[4] - (_QWORD)v28 && !memcmp(v26, v28, v27))
                    goto LABEL_47;
                }
              }
              else if (((unint64_t)v25 & (v17 - 1)) != v2)
              {
                goto LABEL_49;
              }
              v20 = (uint64_t **)*v20;
              if (!v20)
                goto LABEL_49;
            }
          }
          do
          {
            v21 = (unint64_t)v20[1];
            if (v21 == v16)
            {
              if (*((unsigned __int8 *)v20 + 16) == (_DWORD)v12
                && *((unsigned __int16 *)v20 + 9) == (_DWORD)v13
                && v20[11] == v15)
              {
                v22 = v20[3];
                v23 = (char *)v20[4] - (char *)v22;
                v24 = (const void *)v11[3];
                if (v23 == v11[4] - (_QWORD)v24 && !memcmp(v22, v24, v23))
                {
LABEL_47:
                  v11 = (uint64_t *)*v11;
                  if (!v11)
                    return a1;
                  goto LABEL_19;
                }
              }
            }
            else
            {
              if (v21 >= v17)
                v21 %= v17;
              if (v21 != v2)
                break;
            }
            v20 = (uint64_t **)*v20;
          }
          while (v20);
        }
      }
    }
LABEL_49:
    v29 = operator new(0x78uLL);
    v75 = v29;
    *v29 = 0;
    v29[1] = v16;
    v30 = (char *)(v29 + 7);
    v29[2] = v11[2];
    v29[3] = v29 + 7;
    v29[4] = v29 + 7;
    v29[5] = v29 + 7;
    v29[6] = 32;
    v32 = (char *)v11[3];
    v31 = (char *)v11[4];
    v33 = v31 - v32;
    if ((unint64_t)(v31 - v32) < 0x21)
      goto LABEL_70;
    if (v33 <= 0x40)
      v34 = 64;
    else
      v34 = v31 - v32;
    v30 = (char *)malloc_type_malloc(v34, 0x100004077774924uLL);
    v35 = (char *)v29[3];
    v36 = (char *)v29[4];
    if (v35 == v36)
      goto LABEL_69;
    v37 = v36 - v35;
    if ((unint64_t)(v36 - v35) < 8)
    {
      v38 = v30;
      goto LABEL_68;
    }
    v38 = v30;
    if ((unint64_t)(v30 - v35) < 0x20)
      goto LABEL_68;
    if (v37 >= 0x20)
    {
      v39 = v37 & 0xFFFFFFFFFFFFFFE0;
      v40 = (__int128 *)(v35 + 16);
      v41 = v30 + 16;
      v42 = v37 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v43 = *v40;
        *(v41 - 1) = *(v40 - 1);
        *v41 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 32;
      }
      while (v42);
      if (v37 == v39)
        goto LABEL_69;
      if ((v37 & 0x18) != 0)
        goto LABEL_63;
      v35 += v39;
      v38 = &v30[v39];
      do
      {
LABEL_68:
        v49 = *v35++;
        *v38++ = v49;
      }
      while (v35 != v36);
      goto LABEL_69;
    }
    v39 = 0;
LABEL_63:
    v44 = v37 & 0xFFFFFFFFFFFFFFF8;
    v38 = &v30[v37 & 0xFFFFFFFFFFFFFFF8];
    v45 = v39 - (v37 & 0xFFFFFFFFFFFFFFF8);
    v46 = (uint64_t *)&v35[v39];
    v47 = &v30[v39];
    do
    {
      v48 = *v46++;
      *(_QWORD *)v47 = v48;
      v47 += 8;
      v45 += 8;
    }
    while (v45);
    if (v37 != v44)
    {
      v35 += v44;
      goto LABEL_68;
    }
LABEL_69:
    v29[3] = v30;
    v29[4] = v30;
    v29[6] = v34;
LABEL_70:
    if (v32 == v31)
      goto LABEL_88;
    if (v33 < 8)
    {
      v51 = v30;
      goto LABEL_86;
    }
    if ((unint64_t)(v30 - v32) < 0x20)
    {
      v51 = v30;
      goto LABEL_86;
    }
    if (v33 >= 0x20)
    {
      v50 = v33 & 0xFFFFFFFFFFFFFFE0;
      v52 = (__int128 *)(v32 + 16);
      v53 = v30 + 16;
      v54 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v55 = *v52;
        *(v53 - 1) = *(v52 - 1);
        *v53 = v55;
        v52 += 2;
        v53 += 2;
        v54 -= 32;
      }
      while (v54);
      if (v33 == v50)
        goto LABEL_87;
      if ((v33 & 0x18) != 0)
        goto LABEL_81;
      v32 += v50;
      v51 = &v30[v50];
      do
      {
LABEL_86:
        v61 = *v32++;
        *v51++ = v61;
      }
      while (v32 != v31);
      goto LABEL_87;
    }
    v50 = 0;
LABEL_81:
    v56 = v33 & 0xFFFFFFFFFFFFFFF8;
    v51 = &v30[v33 & 0xFFFFFFFFFFFFFFF8];
    v57 = v50 - (v33 & 0xFFFFFFFFFFFFFFF8);
    v58 = (uint64_t *)&v32[v50];
    v59 = &v30[v50];
    do
    {
      v60 = *v58++;
      *(_QWORD *)v59 = v60;
      v59 += 8;
      v57 += 8;
    }
    while (v57);
    if (v33 != v56)
    {
      v32 += v56;
      goto LABEL_86;
    }
LABEL_87:
    v30 = (char *)v29[4];
LABEL_88:
    v29[4] = &v30[v33];
    v29[11] = v11[11];
    *((_OWORD *)v29 + 6) = *((_OWORD *)v11 + 6);
    v29[14] = v11[14];
    v62 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v63 = *(float *)(a1 + 32);
    if (!v17 || (float)(v63 * (float)v17) < v62)
    {
      v64 = (v17 & (v17 - 1)) != 0;
      if (v17 < 3)
        v64 = 1;
      v65 = v64 | (2 * v17);
      v66 = vcvtps_u32_f32(v62 / v63);
      if (v65 <= v66)
        v67 = v66;
      else
        v67 = v65;
      if (v67 == 1)
      {
        v67 = 2;
      }
      else if ((v67 & (v67 - 1)) != 0)
      {
        v67 = std::__next_prime(v67);
      }
      v68 = *(int8x8_t *)(a1 + 8);
      if (v67 > *(_QWORD *)&v68)
        goto LABEL_100;
      if (v67 < *(_QWORD *)&v68)
      {
        v69 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v68 < 3uLL || (v70 = (uint8x8_t)vcnt_s8(v68), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
        {
          v69 = std::__next_prime(v69);
        }
        else
        {
          v71 = 1 << -(char)__clz(v69 - 1);
          if (v69 >= 2)
            v69 = v71;
        }
        if (v67 <= v69)
          v67 = v69;
        if (v67 < *(_QWORD *)&v68)
LABEL_100:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v67);
      }
      v17 = *(_QWORD *)(a1 + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v16 >= v17)
          v2 = v16 % v17;
        else
          v2 = v16;
      }
      else
      {
        v2 = (v17 - 1) & v16;
      }
    }
    v72 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v72)
    {
      *v75 = *v72;
      *v72 = v75;
    }
    else
    {
      *v75 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v75;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
      if (*v75)
      {
        v73 = *(_QWORD *)(*v75 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v73 >= v17)
            v73 %= v17;
        }
        else
        {
          v73 &= v17 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v73) = v75;
      }
    }
    ++*(_QWORD *)(a1 + 24);
    v11 = (uint64_t *)*v11;
    if (v11)
      continue;
    return a1;
  }
}

void sub_19F27B654(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::__unordered_map_hasher<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,true>,std::__unordered_map_equal<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,md::DaVinciGroundTileData::BuildingBatchTypeHash,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[4];
      if (v7)
      {
        v8 = v2[5];
        v5 = (void *)v2[4];
        if (v8 != v7)
        {
          do
          {
            v9 = *(void **)(v8 - 56);
            if (v9)
            {
              *(_QWORD *)(v8 - 48) = v9;
              operator delete(v9);
            }
            v10 = *(void **)(v8 - 80);
            if (v10)
            {
              *(_QWORD *)(v8 - 72) = v10;
              operator delete(v10);
            }
            v8 -= 80;
          }
          while (v8 != v7);
          v5 = (void *)v2[4];
        }
        v2[5] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void ___ZN3ggl18MetalDeviceContext8endFrameERKNS_14EndFrameParamsE_block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  NSObject *v5;
  NSObject *v6;
  os_signpost_id_t v7;
  uint8_t v8[16];
  uint8_t buf[16];

  if (GEOGetGeoGLPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_4_40479);
  v2 = (id)GEOGetGeoGLPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "GPUFrameScheduled", (const char *)&unk_1A0189141, buf, 2u);
  }

  if (GEOGetGeoGLPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLPerformanceLog_onceToken, &__block_literal_global_4_40479);
  v5 = (id)GEOGetGeoGLPerformanceLog_log;
  v6 = v5;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)v8 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v7, "GPUFrame", (const char *)&unk_1A0189141, v8, 2u);
  }

}

uint64_t ___registerStateCaptureCallbacks_block_invoke()
{
  _stateCaptureCallbackRegistration = 1;
  return _GEOConfigRegisterStateCaptureFunctions();
}

uint64_t std::__function::__func<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::ScenePropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[8];
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  _BYTE v25[24];
  _BYTE *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v6;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v8, v20);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v19 = v3 + 24;
  v24[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned __int8 *)(a1 + 32);
  v27[0] = &off_1E42DA490;
  v27[1] = v2;
  v28 = v27;
  v26 = 0;
  v13 = operator new(0x20uLL);
  *v13 = &off_1E42DA448;
  v13[1] = v2;
  v13[2] = a1 + 40;
  v13[3] = &v19;
  v26 = v13;
  gss::StyleSheet<gss::ScenePropertyID>::decodeStyl(v2, v10, v11, v12 != 0, (uint64_t)v27, (uint64_t)v25, &v19);
  v14 = v26;
  if (v26 == v25)
  {
    v15 = 4;
    v14 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  v16 = v28;
  if (v28 == v27)
  {
    v17 = 4;
    v16 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_11;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_11:
  v19 = *v5;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v5[3];
  v20[0] = v9 + 16;
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v24);
}

void sub_19F27BB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v29 = *(_QWORD **)(v27 - 128);
  if (v29 == v24)
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 152);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  v31 = *(_QWORD **)(v27 - 96);
  if (v31 == (_QWORD *)(v27 - 120))
  {
    v32 = 4;
    v31 = (_QWORD *)(v27 - 120);
  }
  else
  {
    if (!v31)
      goto LABEL_11;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_11:
  a9 = *v25;
  *(uint64_t *)((char *)&a9 + *(_QWORD *)(a9 - 24)) = v25[3];
  a10 = v26 + 16;
  if (a23 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v23);
  _Unwind_Resume(a1);
}

void md::LabelManager::updateStyleManagerClientStyleAttributes(md::LabelManager *this)
{
  uint64_t v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v1 = *((_QWORD *)this + 436);
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 520);
    v4 = *(std::__shared_weak_count **)(v1 + 528);
    if (!v4)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v3)
        return;
    }
    else
    {
LABEL_7:
      if (!v3)
        return;
    }
    v8 = *((_QWORD *)this + 436);
    v9 = *(_QWORD *)(v8 + 520);
    v10 = *(std::__shared_weak_count **)(v8 + 528);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(v9, 0x10004u, *((unsigned __int8 *)this + 3027) ^ 1);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_19F27BD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'md::LabelCustomFeatureSupport::styleManagerDidChange(md::LabelCustomFeatureSupport *this)
{
  _QWORD *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  v2 = (char *)this + 72;
  if (v1 != (_QWORD *)((char *)this + 72))
  {
    do
    {
      md::LabelCustomFeatureProvider::refreshFeatures((md::LabelCustomFeatureProvider *)(v1 + 5));
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != (_QWORD *)v2);
  }
}

void `non-virtual thunk to'md::MapNavLabeler::styleManagerDidChange(md::MapNavLabeler *this)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = (void *)*((_QWORD *)this + 5);
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 336);
  v5 = *(_QWORD *)(v3 + 184);
  v4 = *(std::__shared_weak_count **)(v3 + 192);
  v11 = v5;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  objc_msgSend(v2, "setStyleManager:", &v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_BYTE *)this + 810) = 1;
}

void sub_19F27BE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void md::LabelCustomFeatureProvider::featuresDidChangeForRect(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  char v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  BOOL v9;
  NSArray *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v1 = *(_QWORD **)(a1 + 64);
  v2 = (_QWORD *)(a1 + 72);
  if (v1 != (_QWORD *)(a1 + 72))
  {
    v4 = 0;
    do
    {
      if (GEOMapRectIntersectsRect())
      {
        *((_BYTE *)v1 + 176) = 0;
        v5 = (uint64_t *)v1[15];
        v6 = (uint64_t *)v1[16];
        if (v5 == v6)
          goto LABEL_9;
        v7 = 0;
        do
        {
          v8 = *v5++;
          v9 = *(_BYTE *)(v8 + 120) != 0;
          v7 |= v9;
          v4 |= v9;
          md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(*(md::LabelCustomFeatureSupport **)a1, *(md::LabelMapTile **)(v8 + 72), *(std::__shared_weak_count **)(v8 + 80));
        }
        while (v5 != v6);
        if ((v7 & 1) == 0)
        {
LABEL_9:
          v10 = (NSArray *)(id)v1[20];
          md::LabelCustomFeatureProvider::removeAnnotationsFromFeatureMap((md::LabelCustomFeatureProvider *)a1, v10, 0);

          v11 = (void *)v1[20];
          if (v11)
          {
            v1[20] = 0;

          }
        }
      }
      v12 = (_QWORD *)v1[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v1[2];
          v14 = *v13 == (_QWORD)v1;
          v1 = v13;
        }
        while (!v14);
      }
      v1 = v13;
    }
    while (v13 != v2);
    if ((v4 & 1) != 0)
    {
      v15 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(v15 + 3045) = 1;
      *(_BYTE *)(v15 + 3047) = 1;
      v16 = atomic_load((unsigned __int8 *)(v15 + 3058));
      if ((v16 & 1) != 0)
      {
        v17 = *(_QWORD *)(v15 + 136);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 56);
          if (v18)
          {
            v20 = v15;
            v19 = 9;
            (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v18 + 48))(v18, &v20, &v19);
          }
        }
      }
    }
  }
}

void sub_19F27C070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureProvider::refreshFeatures(md::LabelCustomFeatureProvider *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  if (*((_BYTE *)this + 240))
  {
    v2 = *((_QWORD *)this + 29);
    *(_WORD *)(v2 + 128) = 0;
    v3 = *(_QWORD *)(v2 + 112);
    if (v3)
    {
      *(_QWORD *)(v3 + 8) = 0;
      v4 = *(std::__shared_weak_count **)(v2 + 120);
      *(_QWORD *)(v2 + 112) = 0;
      *(_QWORD *)(v2 + 120) = 0;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    v7 = *(void **)(v2 + 80);
    if (v7)
    {
      *(_QWORD *)(v2 + 80) = 0;

    }
    md::LabelCustomFeatureProvider::clearFeatures(this, 1);
  }
  *(_BYTE *)(*(_QWORD *)this + 232) = 1;
  md::LabelCustomFeatureProvider::featuresDidChangeForRect((uint64_t)this);
}

uint64_t md::LabelWorldTraits::styleManagerDidChange(uint64_t this)
{
  uint64_t v1;
  float v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  if (*(_BYTE *)(this + 16) == 2)
  {
    v1 = this;
    this = md::LabelSettingsStyleCache::muninPointStyle(*(md::LabelSettingsStyleCache **)(*(_QWORD *)(*(_QWORD *)(this + 8) + 336)
                                                                                        + 200));
    v2 = *(float *)(this + 40);
    if (v2 == 0.0)
      v2 = 400.0;
    if (*(float *)(v1 + 44) != v2)
    {
      *(float *)(v1 + 44) = v2;
      v3 = *(uint64_t ***)(*(_QWORD *)(v1 + 8) + 168);
      v4 = *v3;
      v5 = v3[1];
      if (*v3 != v5)
      {
        do
        {
          v6 = *v4++;
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        }
        while (v4 != v5);
      }
    }
  }
  return this;
}

void md::MapNavLabeler::styleManagerDidChange(md::MapNavLabeler *this)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = (void *)*((_QWORD *)this + 7);
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 336);
  v5 = *(_QWORD *)(v3 + 184);
  v4 = *(std::__shared_weak_count **)(v3 + 192);
  v11 = v5;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  objc_msgSend(v2, "setStyleManager:", &v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_BYTE *)this + 826) = 1;
}

void sub_19F27C258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19F27C424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKCustomFeatureDataSourceObserverThunk;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureSupport::removeDataSourceInternal(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  float v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  id v19;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 80);
  if (v4)
  {
    v5 = (_QWORD *)(a1 + 80);
    do
    {
      v6 = v4[4];
      v7 = v6 >= (unint64_t)v3;
      if (v6 >= (unint64_t)v3)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != (_QWORD *)(a1 + 80) && v5[4] <= (unint64_t)v3)
    {
      v9 = v5[24];
      if (v9)
      {
        v10 = *(unsigned __int8 *)(v9 + 52);
        if ((v10 - 1) <= 1)
        {
          v10 = 3;
          *(_BYTE *)(v9 + 52) = 3;
          if (*(_BYTE *)(v9 + 80) == 1)
          {
            v11 = *(float *)(*(_QWORD *)v9 + 1504);
            v12 = *(float *)(*(_QWORD *)v9 + 1508);
            *(_DWORD *)(v9 + 84) = 0;
            v13 = 1.0 / sqrtf((float)(v11 * v11) + (float)(v12 * v12));
            *(float *)(v9 + 88) = v12;
            *(float *)(v9 + 92) = v13 * v11;
            *(float *)(v9 + 96) = -(float)(v12 * v13);
            *(float *)(v9 + 100) = v13;
            v10 = 3;
          }
        }
        atomic_store((v10 - 1) < 2, (unsigned __int8 *)(v9 + 55));
      }
      v19 = v3;
      objc_msgSend((id)v5[8], "clearObserver");
      v14 = (void *)v5[8];
      if (v14)
      {
        v5[8] = 0;

      }
      md::LabelCustomFeatureProvider::refreshTilesWithFeatures((md::LabelCustomFeatureProvider *)(v5 + 5));
      md::LabelCustomFeatureProvider::clearFeatures((md::LabelCustomFeatureProvider *)(v5 + 5), 0);
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        v17 = v5;
        do
        {
          v16 = (_QWORD *)v17[2];
          v18 = *v16 == (_QWORD)v17;
          v17 = v16;
        }
        while (!v18);
      }
      if (*(_QWORD **)(a1 + 72) == v5)
        *(_QWORD *)(a1 + 72) = v16;
      --*(_QWORD *)(a1 + 96);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v5);
      md::LabelCustomFeatureProvider::~LabelCustomFeatureProvider((md::LabelCustomFeatureProvider *)(v5 + 5));

      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), v5, 288);
      *(_BYTE *)(a1 + 232) = 1;
      v3 = v19;
    }
  }

}

void sub_19F27C5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureProvider::clearFeatures(md::LabelCustomFeatureProvider *this, char a2)
{
  char *v4;
  char *v5;
  void *v6;
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD **v18;
  uint64_t *v19;
  uint64_t **v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  void *v25;
  char *v26;
  char *v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;

  v4 = (char *)*((_QWORD *)this + 8);
  v5 = (char *)this + 72;
  if (v4 != (char *)this + 72)
  {
    do
    {
      v4[176] = 0;
      v25 = (void *)*((_QWORD *)v4 + 20);
      if (v25)
      {
        *((_QWORD *)v4 + 20) = 0;

      }
      v26 = (char *)*((_QWORD *)v4 + 1);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = *(char **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (char *)*((_QWORD *)v4 + 2);
          v28 = *(_QWORD *)v27 == (_QWORD)v4;
          v4 = v27;
        }
        while (!v28);
      }
      v4 = v27;
    }
    while (v27 != v5);
  }
  v42 = 0;
  HIDWORD(v43) = 0;
  if ((a2 & 1) == 0)
    goto LABEL_16;
  v6 = (void *)*((_QWORD *)this + 17);
  if (!v6)
    goto LABEL_16;
  v7 = v6;
  v8 = (_QWORD *)*((_QWORD *)this + 26);
  if (!v8)
    goto LABEL_15;
  v9 = (_QWORD *)((char *)this + 208);
  do
  {
    v10 = v8[4];
    v11 = v10 >= (unint64_t)v7;
    if (v10 >= (unint64_t)v7)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == (_QWORD *)((char *)this + 208) || (unint64_t)v7 < v9[4])
  {
LABEL_15:

LABEL_16:
    v13 = (void *)*((_QWORD *)this + 17);
    if (v13)
    {
      *((_QWORD *)this + 17) = 0;

    }
    v14 = 0;
    v15 = 0;
    LODWORD(v16) = 0;
    v17 = 0;
    goto LABEL_19;
  }

  v15 = v9[5];
  v14 = (std::__shared_weak_count *)v9[6];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  v42 = v14;
  v41 = v9[7];
  HIDWORD(v43) = HIDWORD(v41);
  std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::erase((uint64_t)this + 200, (uint64_t)v9);
  v16 = HIDWORD(v41);
  v17 = 1;
LABEL_19:
  v18 = (_QWORD **)((char *)this + 200);
  v19 = (uint64_t *)*((_QWORD *)this + 25);
  v20 = (uint64_t **)((char *)this + 208);
  if (v19 != (uint64_t *)((char *)this + 208))
  {
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19[5] + 88))(v19[5]);
      v29 = (uint64_t *)v19[1];
      if (v29)
      {
        do
        {
          v30 = (uint64_t **)v29;
          v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (uint64_t **)v19[2];
          v28 = *v30 == v19;
          v19 = (uint64_t *)v30;
        }
        while (!v28);
      }
      v19 = (uint64_t *)v30;
    }
    while (v30 != v20);
  }
  std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::destroy((uint64_t)this + 200, *((_QWORD *)this + 26));
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 25) = v20;
  *((_QWORD *)this + 26) = 0;
  if ((v17 & 1) == 0)
  {
LABEL_50:
    if (!v14)
      return;
    goto LABEL_51;
  }
  LODWORD(v43) = v16;
  v21 = *((id *)this + 17);
  v22 = (uint64_t)v21;
  v23 = (uint64_t *)*((_QWORD *)this + 26);
  v24 = (uint64_t **)((char *)this + 208);
  if (!v23)
  {
LABEL_44:
    v32 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 27) + 16))(*((_QWORD *)this + 27), 64, 8);
    v33 = v32;
    v32[4] = v22;
    v32[5] = v15;
    v32[6] = (uint64_t)v14;
    if (v14)
    {
      v34 = (unint64_t *)&v14->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v32[7] = v43;
    *v32 = 0;
    v32[1] = 0;
    v32[2] = (uint64_t)v24;
    *v20 = v32;
    v36 = (_QWORD *)**v18;
    if (v36)
    {
      *v18 = v36;
      v33 = *v20;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 26), v33);
    ++*((_QWORD *)this + 28);
    v14 = v42;
    goto LABEL_50;
  }
  while (1)
  {
    while (1)
    {
      v24 = (uint64_t **)v23;
      v31 = v23[4];
      if ((unint64_t)v21 >= v31)
        break;
      v23 = *v24;
      v20 = v24;
      if (!*v24)
        goto LABEL_44;
    }
    if (v31 >= (unint64_t)v21)
      break;
    v23 = v24[1];
    if (!v23)
    {
      v20 = v24 + 1;
      goto LABEL_44;
    }
  }

  if (v14)
  {
LABEL_51:
    v37 = (unint64_t *)&v14->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19F27C918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureAnnotation}* {__strong},md::LabelCustomFeatureProvider::FeatureInfo>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureAnnotation}*,md::LabelCustomFeatureProvider::FeatureInfo,std::less<objc_object  {objcproto25VKCustomFeatureAnnotation}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider::FeatureInfo,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    v4 = *(std::__shared_weak_count **)(a2 + 48);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 64);
  }
  return result;
}

void md::LabelCustomFeatureProvider::refreshTilesWithFeatures(md::LabelCustomFeatureProvider *this)
{
  char *v1;
  char *v2;
  char v4;
  id v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v1 = (char *)*((_QWORD *)this + 8);
  v2 = (char *)this + 72;
  if (v1 != (char *)this + 72)
  {
    v4 = 0;
    do
    {
      if (v1[176])
      {
        v5 = *((id *)v1 + 20);
        v6 = objc_msgSend(v5, "count");

        if (v6)
        {
          v7 = (uint64_t *)*((_QWORD *)v1 + 15);
          v8 = (uint64_t *)*((_QWORD *)v1 + 16);
          while (v7 != v8)
          {
            v9 = *v7++;
            v4 |= *(_BYTE *)(v9 + 120) != 0;
            md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(*(md::LabelCustomFeatureSupport **)this, *(md::LabelMapTile **)(v9 + 72), *(std::__shared_weak_count **)(v9 + 80));
          }
        }
      }
      v10 = (char *)*((_QWORD *)v1 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v1 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v1;
          v1 = v11;
        }
        while (!v12);
      }
      v1 = v11;
    }
    while (v11 != v2);
    if ((v4 & 1) != 0)
    {
      v13 = *((_QWORD *)this + 1);
      *(_BYTE *)(v13 + 3045) = 1;
      *(_BYTE *)(v13 + 3047) = 1;
      v14 = atomic_load((unsigned __int8 *)(v13 + 3058));
      if ((v14 & 1) != 0)
      {
        v15 = *(_QWORD *)(v13 + 136);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 56);
          if (v16)
          {
            v18 = v13;
            v17 = 9;
            (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v16 + 48))(v16, &v18, &v17);
          }
        }
      }
    }
  }
}

void sub_19F27CB04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,std::__map_value_compare<geo::QuadTile,std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,md::LabelCustomFeatureProvider::TileKeyLess,true>,geo::StdAllocator<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,std::__map_value_compare<geo::QuadTile,std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,md::LabelCustomFeatureProvider::TileKeyLess,true>,geo::StdAllocator<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,std::__map_value_compare<geo::QuadTile,std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,md::LabelCustomFeatureProvider::TileKeyLess,true>,geo::StdAllocator<std::__value_type<geo::QuadTile,md::LabelCustomFeatureProvider::TileInfo>,mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));
    *(_QWORD *)(a2 + 152) = &off_1E42B53F0;

    v4 = *(_QWORD *)(a2 + 120);
    if (v4)
    {
      *(_QWORD *)(a2 + 128) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 144) + 40))(*(_QWORD *)(a2 + 144), v4, *(_QWORD *)(a2 + 136) - v4);
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 184);
  }
  return result;
}

void md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::setCallbackQueue(_QWORD *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (a1[3])
  {
    GEOConfigRemoveBlockListener();
    v6 = (void *)a1[3];
    a1[3] = 0;

  }
  v7 = a3[3];
  if (!v7)
    goto LABEL_6;
  if ((_QWORD *)v7 != a3)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_6:
    v25 = (uint64_t *)v7;
    goto LABEL_8;
  }
  v25 = &v23;
  (*(void (**)(_QWORD *, uint64_t *))(*a3 + 24))(a3, &v23);
LABEL_8:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v23, a1 + 6);
  v8 = v25;
  if (v25 == &v23)
  {
    v9 = 4;
    v8 = &v23;
  }
  else
  {
    if (!v25)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  v10 = (std::__shared_weak_count *)a1[5];
  v23 = a1[4];
  v24 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v22 = v10;
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  _GEOConfigAddBlockListenerForKey();
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)a1[3];
  a1[3] = v15;

  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

}

void sub_19F27CDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void md::StyleLogic::setupDecodingCallbacks(uint64_t a1, std::__shared_weak_count *a2, uint64_t **a3)
{
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned __int8 v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  NSObject *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _QWORD v54[3];
  _QWORD *v55;
  _QWORD v56[3];
  _QWORD *v57;
  _QWORD v58[3];
  _QWORD *v59;
  __int128 v60;
  _QWORD v61[3];
  _QWORD *v62;
  _QWORD block[5];
  _BYTE v64[24];
  _BYTE *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    p_shared_weak_owners = (unint64_t *)&a2->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = *a3;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  else
  {
    v8 = *a3;
  }
  v56[0] = &off_1E42C8990;
  v56[1] = a1;
  v56[2] = a2;
  v57 = v56;
  v11 = *v8;
  v10 = (std::__shared_weak_count *)v8[1];
  if (!v10 || (v12 = std::__shared_weak_count::lock(v10), (v53 = v12) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
  }
  v13 = v12;
  v14 = v8[2];
  v15 = (uint64_t)v57;
  if (v57)
  {
    if (v57 == v56)
    {
      v59 = v58;
      (*(void (**)(_QWORD *, _QWORD *))(v56[0] + 24))(v56, v58);
      goto LABEL_15;
    }
    v15 = (*(uint64_t (**)(_QWORD *))(*v57 + 16))(v57);
  }
  v59 = (_QWORD *)v15;
LABEL_15:
  *(_QWORD *)&v60 = v11;
  *((_QWORD *)&v60 + 1) = v13;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v62 = 0;
  v18 = operator new(0x38uLL);
  v19 = v18;
  *v18 = &off_1E42D8288;
  if (v59)
  {
    if (v59 == v58)
    {
      v18[4] = v18 + 1;
      (*(void (**)(_QWORD *))(v58[0] + 24))(v58);
    }
    else
    {
      v18[4] = v59;
      v59 = 0;
    }
  }
  else
  {
    v18[4] = 0;
  }
  *(_OWORD *)(v19 + 5) = v60;
  v60 = 0uLL;
  v62 = v19;
  std::mutex::lock((std::mutex *)(v14 + 2888));
  v20 = atomic_load((unsigned __int8 *)(v14 + 2786));
  if ((v20 & 1) == 0)
  {
    v21 = *(uint64_t **)(v14 + 2960);
    if (v21
      || (v21 = (uint64_t *)operator new(),
          *v21 = 0,
          v21[1] = 0,
          v21[2] = 0,
          v21[3] = gss::Allocator::instance((gss::Allocator *)v21),
          v22 = *(uint64_t **)(v14 + 2960),
          *(_QWORD *)(v14 + 2960) = v21,
          !v22))
    {
LABEL_54:
      v34 = v21[1];
      if (v34 >= v21[2])
      {
        v36 = std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>::__push_back_slow_path<std::function<void ()(BOOL)> const&>(v21, (uint64_t)v61);
LABEL_63:
        v21[1] = v36;
        std::mutex::unlock((std::mutex *)(v14 + 2888));
        goto LABEL_64;
      }
      if (v34)
      {
        v35 = (uint64_t)v62;
        if (v62)
        {
          if (v62 == v61)
          {
            *(_QWORD *)(v34 + 24) = v34;
            (*(void (**)(_QWORD *, unint64_t))(*v62 + 24))(v62, v34);
            goto LABEL_62;
          }
          v35 = (*(uint64_t (**)(_QWORD *))(*v62 + 16))(v62);
        }
        *(_QWORD *)(v34 + 24) = v35;
      }
LABEL_62:
      v36 = v34 + 32;
      v21[1] = v34 + 32;
      goto LABEL_63;
    }
    v23 = *v22;
    if (!*v22)
    {
LABEL_53:
      MEMORY[0x1A1AF4E00](v22, 0x20C40DC1BFBCFLL);
      v21 = *(uint64_t **)(v14 + 2960);
      goto LABEL_54;
    }
    v24 = v22[1];
    v25 = *v22;
    if (v24 == v23)
    {
LABEL_52:
      v22[1] = v23;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22[3] + 40))(v22[3], v25, v22[2] - v25);
      goto LABEL_53;
    }
    while (1)
    {
      v28 = v24 - 32;
      v26 = *(_QWORD **)(v24 - 8);
      if ((_QWORD *)(v24 - 32) == v26)
      {
        v26 = (_QWORD *)(v24 - 32);
        v27 = 4;
      }
      else
      {
        if (!v26)
          goto LABEL_30;
        v27 = 5;
      }
      (*(void (**)(_QWORD *))(*v26 + 8 * v27))(v26);
LABEL_30:
      v24 = v28;
      if (v28 == v23)
      {
        v25 = *v22;
        goto LABEL_52;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v14 + 2888));
  if (*(_BYTE *)(v14 + 81))
  {
    if (gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken[0] != -1)
      dispatch_once(gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_184_19514);
    v29 = &gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  }
  else
  {
    if (gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken != -1)
      dispatch_once(&gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_185_19515);
    v29 = &gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  }
  v30 = (id)*v29;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN3gss10StyleSheetINS_10PropertyIDEE27addFinishedDecodingCallbackENSt3__18functionIFvbEEE_block_invoke;
  block[3] = &__block_descriptor_72_ea8_40c27_ZTSNSt3__18functionIFvbEEE_e5_v8__0l;
  block[4] = v14;
  v31 = v64;
  v32 = (uint64_t)v62;
  if (v62)
  {
    if (v62 == v61)
    {
      v65 = v64;
      (*(void (**)(_QWORD *, _BYTE *))(v61[0] + 24))(v61, v64);
      goto LABEL_46;
    }
    v32 = (*(uint64_t (**)(_QWORD *))(*v62 + 16))(v62);
  }
  v65 = (_BYTE *)v32;
LABEL_46:
  dispatch_async(v30, block);

  if (v65 == v64)
  {
    v33 = 4;
  }
  else
  {
    if (!v65)
      goto LABEL_64;
    v33 = 5;
    v31 = v65;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v33))(v31);
LABEL_64:
  v37 = v62;
  if (v62 == v61)
  {
    v38 = 4;
    v37 = v61;
    goto LABEL_68;
  }
  if (v62)
  {
    v38 = 5;
LABEL_68:
    (*(void (**)(_QWORD *))(*v37 + 8 * v38))(v37);
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v59;
  if (v59 == v58)
  {
    v43 = 4;
    v42 = v58;
    goto LABEL_78;
  }
  if (v59)
  {
    v43 = 5;
LABEL_78:
    (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
  }
  if (v53)
  {
    v44 = (unint64_t *)&v53->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v46 = v57;
  if (v57 == v56)
  {
    v47 = 4;
    v46 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_89;
    v47 = 5;
  }
  (*(void (**)(_QWORD *))(*v46 + 8 * v47))(v46);
LABEL_89:
  v48 = *a3;
  if (a2)
  {
    v49 = (unint64_t *)&a2->__shared_weak_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v54[0] = &off_1E42C89D8;
  v54[1] = a1;
  v54[2] = a2;
  v55 = v54;
  gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(v48, v54);
  v51 = v55;
  if (v55 == v54)
  {
    v52 = 4;
    v51 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_97;
    v52 = 5;
  }
  (*(void (**)(_QWORD *))(*v51 + 8 * v52))(v51);
LABEL_97:
  if (a2)
    std::__shared_weak_count::__release_weak(a2);
}

void sub_19F27D3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  std::__shared_weak_count *v28;
  std::mutex *v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  *(_QWORD *)(v30 + 8) = v31;
  std::mutex::unlock(v29);
  v33 = a28;
  if (a28 == &a25)
  {
    v34 = 4;
    v33 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_6:
  gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}::~function((uint64_t)&a19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  v35 = a18;
  if (a18 == &a15)
  {
    v36 = 4;
    v35 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_11:
  if (!v28)
    _Unwind_Resume(a1);
  std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(a1);
}

void gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  _QWORD v41[3];
  _QWORD *v42;
  __int128 v43;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD block[5];
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a2[3])
    return;
  v4 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3), (v40 = v6) == 0))
    std::__throw_bad_weak_ptr[abi:nn180100]();
  v7 = v6;
  v8 = a1[2];
  v9 = a2[3];
  if (v9)
  {
    if ((_QWORD *)v9 == a2)
    {
      v42 = v41;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v41);
      goto LABEL_9;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  v42 = (_QWORD *)v9;
LABEL_9:
  *(_QWORD *)&v43 = v4;
  *((_QWORD *)&v43 + 1) = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v45 = 0;
  v12 = operator new(0x38uLL);
  v13 = v12;
  *v12 = &off_1E42D82D0;
  if (v42)
  {
    if (v42 == v41)
    {
      v12[4] = v12 + 1;
      (*(void (**)(_QWORD *))(v41[0] + 24))(v41);
    }
    else
    {
      v12[4] = v42;
      v42 = 0;
    }
  }
  else
  {
    v12[4] = 0;
  }
  *(_OWORD *)(v13 + 5) = v43;
  v43 = 0uLL;
  v45 = v13;
  std::mutex::lock((std::mutex *)(v8 + 2824));
  v14 = atomic_load((unsigned __int8 *)(v8 + 2784));
  if ((v14 & 1) == 0)
  {
    v15 = *(uint64_t **)(v8 + 2952);
    if (v15
      || (v15 = (uint64_t *)operator new(),
          *v15 = 0,
          v15[1] = 0,
          v15[2] = 0,
          v15[3] = gss::Allocator::instance((gss::Allocator *)v15),
          v16 = *(uint64_t **)(v8 + 2952),
          *(_QWORD *)(v8 + 2952) = v15,
          !v16))
    {
LABEL_48:
      v28 = v15[1];
      if (v28 >= v15[2])
      {
        v30 = std::vector<std::function<void ()(BOOL)>,geo::StdAllocator<std::function<void ()(BOOL)>,gss::Allocator>>::__push_back_slow_path<std::function<void ()(BOOL)> const&>(v15, (uint64_t)v44);
LABEL_57:
        v15[1] = v30;
        std::mutex::unlock((std::mutex *)(v8 + 2824));
        goto LABEL_58;
      }
      if (v28)
      {
        v29 = (uint64_t)v45;
        if (v45)
        {
          if (v45 == v44)
          {
            *(_QWORD *)(v28 + 24) = v28;
            (*(void (**)(_QWORD *, unint64_t))(*v45 + 24))(v45, v28);
            goto LABEL_56;
          }
          v29 = (*(uint64_t (**)(_QWORD *))(*v45 + 16))(v45);
        }
        *(_QWORD *)(v28 + 24) = v29;
      }
LABEL_56:
      v30 = v28 + 32;
      v15[1] = v28 + 32;
      goto LABEL_57;
    }
    v17 = *v16;
    if (!*v16)
    {
LABEL_47:
      MEMORY[0x1A1AF4E00](v16, 0x20C40DC1BFBCFLL);
      v15 = *(uint64_t **)(v8 + 2952);
      goto LABEL_48;
    }
    v18 = v16[1];
    v19 = *v16;
    if (v18 == v17)
    {
LABEL_46:
      v16[1] = v17;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[3] + 40))(v16[3], v19, v16[2] - v19);
      goto LABEL_47;
    }
    while (1)
    {
      v22 = v18 - 32;
      v20 = *(_QWORD **)(v18 - 8);
      if ((_QWORD *)(v18 - 32) == v20)
      {
        v20 = (_QWORD *)(v18 - 32);
        v21 = 4;
      }
      else
      {
        if (!v20)
          goto LABEL_24;
        v21 = 5;
      }
      (*(void (**)(_QWORD *))(*v20 + 8 * v21))(v20);
LABEL_24:
      v18 = v22;
      if (v22 == v17)
      {
        v19 = *v16;
        goto LABEL_46;
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v8 + 2824));
  if (*(_BYTE *)(v8 + 81))
  {
    if (gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken[0] != -1)
      dispatch_once(gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_327);
    v23 = &gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  }
  else
  {
    if (gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken != -1)
      dispatch_once(&gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::onceToken, &__block_literal_global_109);
    v23 = &gss::StyleSheet<gss::PropertyID>::loadQueue(BOOL)::stylesheetLoadQueue;
  }
  v24 = (id)*v23;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3321888768;
  block[2] = ___ZN3gss10StyleSheetINS_10PropertyIDEE43addFinishedDecodingGlobalPropertiesCallbackENSt3__18functionIFvbEEE_block_invoke;
  block[3] = &__block_descriptor_72_ea8_40c27_ZTSNSt3__18functionIFvbEEE_e5_v8__0l;
  block[4] = v8;
  v25 = v47;
  v26 = (uint64_t)v45;
  if (v45)
  {
    if (v45 == v44)
    {
      v48 = v47;
      (*(void (**)(_QWORD *, _BYTE *))(v44[0] + 24))(v44, v47);
      goto LABEL_40;
    }
    v26 = (*(uint64_t (**)(_QWORD *))(*v45 + 16))(v45);
  }
  v48 = (_BYTE *)v26;
LABEL_40:
  dispatch_async(v24, block);

  if (v48 == v47)
  {
    v27 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_58;
    v27 = 5;
    v25 = v48;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v27))(v25);
LABEL_58:
  v31 = v45;
  if (v45 == v44)
  {
    v32 = 4;
    v31 = v44;
    goto LABEL_62;
  }
  if (v45)
  {
    v32 = 5;
LABEL_62:
    (*(void (**)(_QWORD *))(*v31 + 8 * v32))(v31);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v42;
  if (v42 == v41)
  {
    v37 = 4;
    v36 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_73;
    v37 = 5;
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v37))(v36);
LABEL_73:
  if (v40)
  {
    v38 = (unint64_t *)&v40->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_19F27D988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  std::mutex *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;

  v23 = v22;
  *(_QWORD *)(v21 + 8) = v23;
  std::mutex::unlock(v20);
  v25 = a20;
  if (a20 == &a17)
  {
    v26 = 4;
    v25 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}::~function((uint64_t)&a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 6);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingGlobalPropertiesCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x38uLL);
  *v2 = &off_1E42D82D0;
  v3 = v2 + 1;
  v4 = a1[4];
  if (!v4)
    goto LABEL_4;
  if ((_QWORD *)v4 != a1 + 1)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    goto LABEL_6;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  v5 = a1[6];
  v2[5] = a1[5];
  v2[6] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return v2;
}

void sub_19F27DB44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 6);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(uint64_t a1)
{

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = &off_1E42B5310;

  operator delete((void *)a1);
}

void std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(uint64_t a1)
{

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 8) = &off_1E42B5310;

  operator delete((void *)a1);
}

_QWORD *std::__function::__func<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1},std::allocator<gss::StylesheetManager<gss::PropertyID>::addFinishedDecodingCallback(std::function<void ()(std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>,BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x38uLL);
  *v2 = &off_1E42D8288;
  v3 = v2 + 1;
  v4 = a1[4];
  if (!v4)
    goto LABEL_4;
  if ((_QWORD *)v4 != a1 + 1)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    goto LABEL_6;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  v5 = a1[6];
  v2[5] = a1[5];
  v2[6] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return v2;
}

void sub_19F27DD48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t v1;
  char *v2;

  v1 = a1 + 8;
  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_1E42D0358;
  std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::ScenePropertyID>> md::StyleSheetExtension::initWithName<gss::ScenePropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_19F27DD9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__function::__func<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},std::allocator<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t v1;
  char *v2;

  v1 = a1 + 8;
  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_1E42D0310;
  std::__compressed_pair_elem<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1},0,false>::__compressed_pair_elem[abi:nn180100]<std::shared_ptr<gss::StyleSheet<gss::PropertyID>> md::StyleSheetExtension::initWithName<gss::PropertyID>(std::string const&,float,gss::TargetDisplay,md::StylesheetVendor &,VKResourceManager *,BOOL)::{lambda(BOOL)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_19F27DDF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_18,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_18>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5140;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D3D00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_1,std::allocator<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_1>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D13A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1360;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::StyleLogic::StyleLogic(float,VKSharedResources *,objc_object  {objcproto14MDRenderTarget}*,md::MapEngine *,md::MapEngineSettings const*,md::World *,std::shared_ptr<md::TaskContext> const&,md::AnimationRunner const*,BOOL,md::World *<md::RunLoopController> const&,VKMapPurpose)::$_0,std::allocator<VKMapPurpose>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E42C8AB0;
}

void sub_19F27DED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *__destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvmEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t std::__function::__func<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1},std::allocator<gss::StyleSheet<gss::PropertyID>::construct(unsigned char const*,unsigned long,std::string const&,float,gss::TargetDisplay,BOOL,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,std::shared_ptr<std::unordered_map<std::string,int,std::hash<std::string>,std::equal_to<std::string>,geo::StdAllocator<std::pair<std::string const,int>,gss::Allocator>>> const&,BOOL,BOOL,std::function<void ()(BOOL)>)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[8];
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];
  _BYTE v25[24];
  _BYTE *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v6;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v8, v20);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v19 = v3 + 24;
  v24[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned __int8 *)(a1 + 32);
  v27[0] = &off_1E42DA400;
  v27[1] = v2;
  v28 = v27;
  v26 = 0;
  v13 = operator new(0x20uLL);
  *v13 = &off_1E42DA3B8;
  v13[1] = v2;
  v13[2] = a1 + 40;
  v13[3] = &v19;
  v26 = v13;
  gss::StyleSheet<gss::PropertyID>::decodeStyl(v2, v10, v11, v12 != 0, (uint64_t)v27, (uint64_t)v25, &v19);
  v14 = v26;
  if (v26 == v25)
  {
    v15 = 4;
    v14 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  v16 = v28;
  if (v28 == v27)
  {
    v17 = 4;
    v16 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_11;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_11:
  v19 = *v5;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v5[3];
  v20[0] = v9 + 16;
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v24);
}

void sub_19F27E1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v29 = *(_QWORD **)(v27 - 128);
  if (v29 == v24)
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 152);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  v31 = *(_QWORD **)(v27 - 96);
  if (v31 == (_QWORD *)(v27 - 120))
  {
    v32 = 4;
    v31 = (_QWORD *)(v27 - 120);
  }
  else
  {
    if (!v31)
      goto LABEL_11;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_11:
  a9 = *v25;
  *(uint64_t *)((char *)&a9 + *(_QWORD *)(a9 - 24)) = v25[3];
  a10 = v26 + 16;
  if (a23 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AF4D64](v23);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabelPart::collisionWillStart(uint64_t this)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 440))(v3))
    v3 = *v1++;
  return this;
}

md::PolygonRenderResources *md::PolygonRenderResources::PolygonRenderResources(md::PolygonRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  VKSharedResources *v5;
  __int128 v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  __int128 v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  __int128 v44;
  unsigned __int8 v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  int8x16_t v53;
  int16x8_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int8x16_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int16x8_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int8x16_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int8x16_t v105;
  int16x8_t v106;
  int32x4_t v107;
  int8x16_t v108;
  int32x4_t v109;
  int8x16_t v110;
  int32x4_t v111;
  int8x16_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int32x4_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  __int128 v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  _QWORD *v149;
  __int128 v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  __int128 v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  _QWORD *v177;
  __int128 v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  char *v191;
  __int128 v192;
  unsigned __int8 v193;
  __int128 v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  __int128 v198;
  unint64_t *v199;
  unint64_t v200;
  int8x16_t v201;
  int16x8_t v202;
  int32x4_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int16x8_t v206;
  int32x4_t v207;
  int8x16_t v208;
  int32x4_t v209;
  int8x16_t v210;
  int32x4_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int16x8_t v221;
  int32x4_t v222;
  int8x16_t v223;
  int16x8_t v224;
  int32x4_t v225;
  int8x16_t v226;
  int32x4_t v227;
  int8x16_t v228;
  int32x4_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int16x8_t v244;
  int32x4_t v245;
  int16x8_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int16x8_t v253;
  int32x4_t v254;
  int16x8_t v255;
  int32x4_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int32x4_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int32x4_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  _QWORD *v284;
  __int128 v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  _QWORD *v298;
  __int128 v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  char *v312;
  __int128 v313;
  unsigned __int8 v314;
  __int128 v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t v318;
  __int128 v319;
  unint64_t *v320;
  unint64_t v321;
  int8x16_t v322;
  int16x8_t v323;
  int32x4_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int16x8_t v327;
  int32x4_t v328;
  int8x16_t v329;
  int32x4_t v330;
  int8x16_t v331;
  int32x4_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int16x8_t v339;
  int32x4_t v340;
  int8x16_t v341;
  int16x8_t v342;
  int32x4_t v343;
  int8x16_t v344;
  int32x4_t v345;
  int8x16_t v346;
  int32x4_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int8x16_t v350;
  int8x16_t v351;
  int8x16_t v352;
  int8x16_t v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int16x8_t v361;
  int32x4_t v362;
  int16x8_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  int8x16_t v372;
  int8x16_t v373;
  int8x16_t v374;
  int8x16_t v375;
  int16x8_t v376;
  int32x4_t v377;
  int16x8_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int8x16_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  uint64_t *v400;
  unsigned __int8 v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _OWORD *v417;
  __int128 *v418;
  uint64_t v419;
  __int128 v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  _OWORD *v435;
  __int128 *v436;
  uint64_t v437;
  __int128 v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t *v447;
  unsigned __int8 v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  _OWORD *v464;
  __int128 *v465;
  uint64_t v466;
  __int128 v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  _OWORD *v482;
  __int128 *v483;
  uint64_t v484;
  __int128 v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  _QWORD *v492;
  uint64_t v493;
  uint64_t *v494;
  unsigned __int8 v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  _OWORD *v511;
  __int128 *v512;
  uint64_t v513;
  __int128 v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  _OWORD *v529;
  __int128 *v530;
  uint64_t v531;
  __int128 v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  _QWORD *v537;
  uint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  unint64_t *v541;
  uint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  _QWORD *v546;
  uint64_t v547;
  unint64_t *v548;
  uint64_t v549;
  uint64_t v550;
  _QWORD *v551;
  uint64_t v552;
  _QWORD *v553;
  uint64_t v554;
  uint64_t *v555;
  unsigned __int8 v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  unint64_t v569;
  uint64_t v570;
  uint64_t v571;
  _OWORD *v572;
  __int128 *v573;
  uint64_t v574;
  __int128 v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  _OWORD *v590;
  __int128 *v591;
  uint64_t v592;
  __int128 v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  _QWORD *v598;
  uint64_t v599;
  _QWORD *v600;
  uint64_t v601;
  uint64_t *v602;
  unsigned __int8 v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  _OWORD *v619;
  __int128 *v620;
  uint64_t v621;
  __int128 v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  unint64_t v633;
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  _OWORD *v637;
  __int128 *v638;
  uint64_t v639;
  __int128 v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  _QWORD *v645;
  uint64_t v646;
  _QWORD *v647;
  uint64_t v648;
  uint64_t *v649;
  unsigned __int8 v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  unint64_t v663;
  uint64_t v664;
  uint64_t v665;
  _OWORD *v666;
  __int128 *v667;
  uint64_t v668;
  __int128 v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  unint64_t v680;
  unint64_t v681;
  uint64_t v682;
  uint64_t v683;
  _OWORD *v684;
  __int128 *v685;
  uint64_t v686;
  __int128 v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  _QWORD *v692;
  uint64_t v693;
  _QWORD *v694;
  uint64_t v695;
  char v696;
  uint64_t v697;
  char v698;
  uint64_t v699;
  int v700;
  _BOOL8 v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  unsigned __int8 v709;
  uint64_t *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t *v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t *v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  std::__shared_weak_count *v734;
  unint64_t *v735;
  unint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  int v742;
  uint64_t v743;
  ggl::PolygonStrokeMaskShader *v744;
  unsigned __int8 v745;
  unsigned __int8 v746;
  unsigned __int8 v747;
  ggl::PolygonAnimatableFillShader *v748;
  unsigned __int8 v749;
  unsigned __int8 v750;
  unsigned __int8 v751;
  ggl::HillshadeFillMaskShader *v752;
  unsigned __int8 v753;
  unsigned __int8 v754;
  unsigned __int8 v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  unsigned __int8 v768;
  unsigned __int8 v769;
  unsigned __int8 v770;
  unsigned __int8 v771;
  unsigned __int8 v772;
  unsigned __int8 v773;
  unsigned __int8 v774;
  unsigned __int8 v775;
  unsigned __int8 v776;
  VKSharedResources *v777;
  uint64_t *v778;
  uint64_t *v779;
  char *v780;
  char v781;
  char v782;
  char *v783;
  md::PolygonRenderResources *v784;
  __int16 v785;
  char v786;
  _BYTE v787[44];
  char v788;
  uint64_t v789;
  std::__shared_weak_count *v790;
  __int128 v791;
  __int128 v792;
  _QWORD v793[3];
  _QWORD *v794;
  _QWORD v795[3];
  _QWORD *v796;
  _QWORD v797[3];
  _QWORD *v798;
  _QWORD v799[3];
  _QWORD *v800;
  _QWORD v801[3];
  _QWORD *v802;
  _QWORD v803[3];
  _QWORD *v804;
  _QWORD v805[3];
  _QWORD *v806;
  _QWORD v807[3];
  _QWORD *v808;
  _QWORD v809[3];
  _QWORD *v810;
  _QWORD v811[3];
  _QWORD *v812;
  _QWORD v813[3];
  _QWORD *v814;
  _QWORD v815[3];
  _QWORD *v816;
  _QWORD v817[3];
  _QWORD *v818;
  _QWORD v819[3];
  _QWORD *v820;
  _QWORD v821[3];
  _QWORD *v822;
  _QWORD v823[3];
  _QWORD *v824;
  uint64_t v825;

  v825 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  *(_OWORD *)((char *)this + 856) = 0u;
  bzero(this, 0x350uLL);
  v6 = 0uLL;
  *((_QWORD *)this + 106) = (char *)this + 856;
  *((_QWORD *)this + 113) = 0;
  *((_BYTE *)this + 912) = 0;
  v779 = (uint64_t *)((char *)this + 920);
  *(_OWORD *)((char *)this + 920) = 0u;
  *((_BYTE *)this + 936) = 0;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_QWORD *)this + 128) = 0;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 111) = 0;
  *((_QWORD *)this + 110) = 0;
  if ((v7 & 1) == 0)
  {
    v6 = 0uLL;
    if (v742)
    {
      v743 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v743, "GeoGL", 0xA3D02C1100000005);
      v6 = 0uLL;
    }
  }
  v778 = (uint64_t *)((char *)this + 944);
  *((_QWORD *)this + 129) = ggl::Allocator::instance(void)::alloc;
  *((_OWORD *)this + 65) = v6;
  *((_OWORD *)this + 66) = v6;
  *((_QWORD *)this + 134) = 0;
  *((_QWORD *)this + 135) = 32;
  v784 = this;
  v8 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v8 = 0;
  v8[1] = 0;
  *((_QWORD *)this + 133) = v8;
  *((_QWORD *)this + 134) = v8;
  *((_QWORD *)this + 137) = 0;
  *((_QWORD *)this + 139) = 0;
  *((_QWORD *)this + 138) = 0;
  *((_DWORD *)this + 280) = 0;
  *((_QWORD *)this + 136) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 1124) = 65537;
  *((_DWORD *)this + 283) = 0;
  *((_QWORD *)this + 142) = 0x7FFF0200000700;
  *((_WORD *)this + 572) = 0;
  *((_BYTE *)this + 1146) = 3;
  *(_QWORD *)((char *)this + 1155) = 0;
  *(_QWORD *)((char *)this + 1147) = 0;
  *((_BYTE *)this + 1163) = 0;
  *(_QWORD *)((char *)this + 1220) = 0;
  *(_QWORD *)((char *)this + 1212) = 0;
  *((_WORD *)this + 638) = 257;
  *((_QWORD *)this + 161) = 0;
  *((_QWORD *)this + 160) = 0;
  *((_BYTE *)this + 1296) = 0;
  v777 = v5;
  v9 = -[VKSharedResources shaderLibrary](v5, "shaderLibrary");
  v10 = *(_QWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v10 + 1760);
  v12 = *(std::__shared_weak_count **)(v10 + 1768);
  v789 = v11;
  v790 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  memset(&v787[24], 0, 20);
  v787[0] = 1;
  *(_OWORD *)&v787[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v787[20] = 7;
  v788 = 15;
  v15 = operator new(0x198uLL);
  v15[1] = 0;
  v15[2] = 0;
  *v15 = &off_1E42DEF48;
  v16 = *(_OWORD *)&a3->colorFormatsCount;
  v791 = *(_OWORD *)a3->colorFormats;
  v792 = v16;
  v17 = ggl::PolygonStroke::MeshPipelineState::MeshPipelineState((uint64_t)(v15 + 3), &v789, (uint64_t)v787, &v791);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = v17;
  *((_QWORD *)this + 1) = v15;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v790;
  if (v790)
  {
    v22 = (unint64_t *)&v790->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(_QWORD *)(v9 + 80);
  v25 = *(_QWORD *)(v24 + 1760);
  v26 = *(std::__shared_weak_count **)(v24 + 1768);
  v789 = v25;
  v790 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  memset(&v787[20], 0, 24);
  v787[0] = 0;
  *(_OWORD *)&v787[4] = xmmword_19FFB3060;
  v788 = 0;
  v29 = operator new(0x198uLL);
  v29[1] = 0;
  v29[2] = 0;
  *v29 = &off_1E42DEF48;
  v30 = *(_OWORD *)&a3->colorFormatsCount;
  v791 = *(_OWORD *)a3->colorFormats;
  v792 = v30;
  v31 = ggl::PolygonStroke::MeshPipelineState::MeshPipelineState((uint64_t)(v29 + 3), &v789, (uint64_t)v787, &v791);
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = v31;
  *((_QWORD *)this + 3) = v29;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v790;
  if (v790)
  {
    v36 = (unint64_t *)&v790->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = *(_QWORD *)(v9 + 80);
  v39 = *(_QWORD *)(v38 + 1784);
  v40 = *(_QWORD *)(v38 + 1792);
  *(_QWORD *)&v791 = v39;
  *((_QWORD *)&v791 + 1) = v40;
  if (v40)
  {
    v41 = (unint64_t *)(v40 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v789 = 0;
  v43 = (char *)operator new(0x198uLL);
  *((_QWORD *)v43 + 1) = 0;
  *((_QWORD *)v43 + 2) = 0;
  *(_QWORD *)v43 = &off_1E42E3040;
  v44 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v787 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v787[16] = v44;
  if ((v45 & 1) == 0)
  {
    if ((_DWORD)v744)
    {
      if ((v745 & 1) == 0)
      {
        if ((_DWORD)v744)
        {
          if ((v768 & 1) == 0
          {
            if ((v774 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonCommonStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43D00 = 1;
          }
          ggl::PolygonStrokeMask::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonCommonStroke::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57D628 = &ggl::PolygonStrokeMask::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57D630 = 0;
          if ((v769 & 1) == 0
          {
            ggl::PolygonStrokeMask::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57D6B0 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57D6B8 = (uint64_t)ggl::PolygonCommonStroke::Polygon::reflection(void)::reflection;
          }
          qword_1EE57D638 = (uint64_t)&ggl::PolygonStrokeMask::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1EE57D640 = xmmword_19FFB35E0;
        }
      }
      ggl::PolygonStrokeMask::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonStrokeMask::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonStrokeMaskShader::typedReflection(v744);
      qword_1EE57D660 = (uint64_t)&ggl::PolygonStrokeMaskShader::typedReflection(void)::ref;
      if ((v746 & 1) == 0
      {
        ggl::PolygonStrokeMask::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57D760 = 0;
        qword_1EE57D768 = (uint64_t)"";
        dword_1EE57D770 = 0;
        qword_1EE57D778 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57D780 = 3;
      }
      qword_1EE57D668 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1EE57D670 = 1;
      qword_1EE57D678 = 0;
      unk_1EE57D680 = 1;
      qword_1EE57D688 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EE57D690 = 0;
      if ((v747 & 1) == 0
      {
        ggl::PolygonStrokeMask::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57D6D0 = 0;
        qword_1EE57D6D8 = (uint64_t)"view";
        dword_1EE57D6E0 = 3;
        qword_1EE57D6E8 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE57D6F0 = xmmword_19FFB35A0;
        qword_1EE57D700 = 1;
        unk_1EE57D708 = "transform";
        dword_1EE57D710 = 3;
        qword_1EE57D718 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57D720 = xmmword_19FFB3660;
        qword_1EE57D730 = 2;
        unk_1EE57D738 = "polygon";
        dword_1EE57D740 = 3;
        qword_1EE57D748 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineConstantPolygonBinding(void)::reflection;
        unk_1EE57D750 = 9;
      }
      qword_1EE57D698 = (uint64_t)&ggl::PolygonStrokeMask::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1EE57D6A0 = 3;
    }
  }
  v46 = v791;
  if (*((_QWORD *)&v791 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v791 + 1) + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    *((_DWORD *)v43 + 14) = 0;
    *((_QWORD *)v43 + 5) = 0;
    *((_QWORD *)v43 + 6) = 0;
    *((_QWORD *)v43 + 3) = &off_1E42B6760;
    *((_QWORD *)v43 + 4) = 0;
    *((_QWORD *)v43 + 8) = &ggl::PolygonStrokeMask::MeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v43 + 72) = v46;
    do
      v49 = __ldxr(v47);
    while (__stxr(v49 + 1, v47));
  }
  else
  {
    *((_DWORD *)v43 + 14) = 0;
    *((_QWORD *)v43 + 5) = 0;
    *((_QWORD *)v43 + 6) = 0;
    *((_QWORD *)v43 + 3) = &off_1E42B6760;
    *((_QWORD *)v43 + 4) = 0;
    *((_QWORD *)v43 + 8) = &ggl::PolygonStrokeMask::MeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v43 + 72) = v46;
  }
  v43[136] = 0;
  *(_OWORD *)(v43 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v43 + 156) = 0;
  *(_QWORD *)(v43 + 172) = 0;
  *(_QWORD *)(v43 + 164) = 0;
  v43[184] = 0;
  *(_OWORD *)(v43 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v43 + 204) = 0;
  *(_QWORD *)(v43 + 220) = 0;
  *(_QWORD *)(v43 + 212) = 0;
  v43[232] = 0;
  *(_OWORD *)(v43 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v43 + 252) = 0;
  *(_QWORD *)(v43 + 268) = 0;
  *(_QWORD *)(v43 + 260) = 0;
  v50 = *(_OWORD *)&v787[16];
  *(_OWORD *)(v43 + 280) = *(_OWORD *)v787;
  *(_OWORD *)(v43 + 296) = v50;
  v43[312] = 0;
  *((_QWORD *)v43 + 48) = 0;
  *((_OWORD *)v43 + 22) = 0u;
  *((_OWORD *)v43 + 23) = 0u;
  *((_OWORD *)v43 + 20) = 0u;
  *((_OWORD *)v43 + 21) = 0u;
  *((_QWORD *)v43 + 49) = 0x100000001;
  v43[400] = 0;
  v43[88] = 0;
  *(_WORD *)(v43 + 89) = v785;
  v43[91] = v786;
  *(_OWORD *)(v43 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v43 + 108) = v789;
  *((_DWORD *)v43 + 29) = 0;
  *((_QWORD *)v43 + 15) = 0;
  *((_DWORD *)v43 + 32) = 0;
  v43[132] = 8;
  if (*((_QWORD *)&v46 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
    }
  }
  v43[329] = 0;
  v53 = vceqzq_s8(*(int8x16_t *)(v43 + 328));
  v54 = vmovl_high_s8(v53);
  v55 = vmovl_s16(*(int16x4_t *)v54.i8);
  v56.i64[0] = v55.u32[0];
  v56.i64[1] = v55.u32[1];
  v57 = v56;
  v58 = vmovl_s8(*(int8x8_t *)v53.i8);
  v59 = vmovl_s16(*(int16x4_t *)v58.i8);
  v56.i64[0] = v59.u32[0];
  v56.i64[1] = v59.u32[1];
  v60 = v56;
  v61 = vmovl_high_s16(v54);
  v56.i64[0] = v61.u32[0];
  v56.i64[1] = v61.u32[1];
  v62 = v56;
  v63 = vmovl_high_s16(v58);
  v56.i64[0] = v63.u32[0];
  v56.i64[1] = v63.u32[1];
  v64 = v56;
  v56.i64[0] = v55.u32[2];
  v56.i64[1] = v55.u32[3];
  v65 = v56;
  v56.i64[0] = v59.u32[2];
  v56.i64[1] = v59.u32[3];
  v66 = v56;
  v56.i64[0] = v61.u32[2];
  v56.i64[1] = v61.u32[3];
  v67 = v56;
  v56.i64[0] = v63.u32[2];
  v56.i64[1] = v63.u32[3];
  v68 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v56);
  v69 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v67);
  v70 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v66);
  v71 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v62);
  v72 = vceqzq_s8(*(int8x16_t *)(v43 + 344));
  v73 = vmovl_high_s8(v72);
  v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v56.i64[0] = v74.u32[0];
  v56.i64[1] = v74.u32[1];
  v75 = v56;
  v76 = vmovl_s8(*(int8x8_t *)v72.i8);
  v77 = vmovl_s16(*(int16x4_t *)v76.i8);
  v56.i64[0] = v77.u32[0];
  v56.i64[1] = v77.u32[1];
  v78 = v56;
  v79 = vmovl_high_s16(v73);
  v56.i64[0] = v79.u32[0];
  v56.i64[1] = v79.u32[1];
  v80 = v56;
  v81 = vmovl_high_s16(v76);
  v56.i64[0] = v81.u32[0];
  v56.i64[1] = v81.u32[1];
  v82 = v56;
  v56.i64[0] = v74.u32[2];
  v56.i64[1] = v74.u32[3];
  v83 = v56;
  v56.i64[0] = v77.u32[2];
  v56.i64[1] = v77.u32[3];
  v84 = v56;
  v56.i64[0] = v79.u32[2];
  v56.i64[1] = v79.u32[3];
  v85 = v56;
  v56.i64[0] = v81.u32[2];
  v56.i64[1] = v81.u32[3];
  v86 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v85);
  v87 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v75), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v57));
  v88 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v78), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v60));
  v89 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v80), v71);
  v90 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v82), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v64));
  v91 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v83), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v65));
  v92 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v84), v70);
  v93 = vorrq_s8(v86, v69);
  v94 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v56), v68);
  v95 = vceqzq_s8(*(int8x16_t *)(v43 + 360));
  v96 = vmovl_high_s8(v95);
  v97 = vmovl_s16(*(int16x4_t *)v96.i8);
  v56.i64[0] = v97.i32[0];
  v56.i64[1] = v97.i32[1];
  v98 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v56);
  v99 = vceqzq_s8(*(int8x16_t *)(v43 + 376));
  v100 = vmovl_high_s8(v99);
  v101 = vmovl_s16(*(int16x4_t *)v100.i8);
  v56.i64[0] = v101.i32[0];
  v56.i64[1] = v101.i32[1];
  v102 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v56), v98), v87);
  v103 = vmovl_s8(*(int8x8_t *)v95.i8);
  v104 = vmovl_s16(*(int16x4_t *)v103.i8);
  v56.i64[0] = v104.i32[0];
  v56.i64[1] = v104.i32[1];
  v105 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v56);
  v106 = vmovl_s8(*(int8x8_t *)v99.i8);
  v107 = vmovl_s16(*(int16x4_t *)v106.i8);
  v56.i64[0] = v107.i32[0];
  v56.i64[1] = v107.i32[1];
  v108 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v56), v105), v88);
  v109 = vmovl_high_s16(v96);
  v56.i64[0] = v109.i32[0];
  v56.i64[1] = v109.i32[1];
  v110 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v56);
  v111 = vmovl_high_s16(v100);
  v56.i64[0] = v111.i32[0];
  v56.i64[1] = v111.i32[1];
  v112 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v56), v110), v89);
  v113 = vmovl_high_s16(v103);
  v56.i64[0] = v113.i32[0];
  v56.i64[1] = v113.i32[1];
  v114 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v56);
  v115 = vmovl_high_s16(v106);
  v56.i64[0] = v115.i32[0];
  v56.i64[1] = v115.i32[1];
  v116 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v56), v114), v90);
  v56.i64[0] = v97.i32[2];
  v56.i64[1] = v97.i32[3];
  v117 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v56);
  v56.i64[0] = v101.i32[2];
  v56.i64[1] = v101.i32[3];
  v118 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v56), v117), v91);
  v56.i64[0] = v104.i32[2];
  v56.i64[1] = v104.i32[3];
  v119 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v56);
  v56.i64[0] = v107.i32[2];
  v56.i64[1] = v107.i32[3];
  v120 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v56), v119), v92);
  v56.i64[0] = v109.i32[2];
  v56.i64[1] = v109.i32[3];
  v121 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v56);
  v56.i64[0] = v111.i32[2];
  v56.i64[1] = v111.i32[3];
  v122 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v56), v121), v93);
  v56.i64[0] = v113.i32[2];
  v56.i64[1] = v113.i32[3];
  v123 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v56);
  v56.i64[0] = v115.i32[2];
  v56.i64[1] = v115.i32[3];
  *((_QWORD *)v43 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v108, v102), vorrq_s8(v116, v112)), (int64x2_t)vorrq_s8(vorrq_s8(v120, v118), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v56), v123), v94), v122))));
  *((_QWORD *)v43 + 3) = &off_1E42BA1B0;
  v43[312] = 1;
  v124 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 4) = v43 + 24;
  *((_QWORD *)this + 5) = v43;
  if (v124)
  {
    v125 = (unint64_t *)&v124->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = (std::__shared_weak_count *)*((_QWORD *)&v791 + 1);
  if (*((_QWORD *)&v791 + 1))
  {
    v128 = (unint64_t *)(*((_QWORD *)&v791 + 1) + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = *(_QWORD *)(v9 + 80);
  v131 = *(_QWORD *)(v130 + 1640);
  v132 = *(std::__shared_weak_count **)(v130 + 1648);
  v789 = v131;
  v790 = v132;
  if (v132)
  {
    v133 = (unint64_t *)&v132->__shared_owners_;
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
  memset(&v787[24], 0, 20);
  v787[0] = 1;
  *(_OWORD *)&v787[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v787[20] = 7;
  v788 = 15;
  v135 = operator new(0x198uLL);
  v135[1] = 0;
  v135[2] = 0;
  *v135 = &off_1E42E3CF0;
  v136 = *(_OWORD *)&a3->colorFormatsCount;
  v791 = *(_OWORD *)a3->colorFormats;
  v792 = v136;
  v137 = ggl::PolygonAnimatableStroke::MeshPipelineState::MeshPipelineState((uint64_t)(v135 + 3), &v789, (uint64_t)v787, &v791);
  v138 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 6) = v137;
  *((_QWORD *)this + 7) = v135;
  if (v138)
  {
    v139 = (unint64_t *)&v138->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v790;
  if (v790)
  {
    v142 = (unint64_t *)&v790->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = *(_QWORD *)(v9 + 80);
  v145 = *(_QWORD *)(v144 + 1640);
  v146 = *(std::__shared_weak_count **)(v144 + 1648);
  v789 = v145;
  v790 = v146;
  if (v146)
  {
    v147 = (unint64_t *)&v146->__shared_owners_;
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
  }
  memset(&v787[20], 0, 24);
  v787[0] = 0;
  *(_OWORD *)&v787[4] = xmmword_19FFB3060;
  v788 = 0;
  v149 = operator new(0x198uLL);
  v149[1] = 0;
  v149[2] = 0;
  *v149 = &off_1E42E3CF0;
  v150 = *(_OWORD *)&a3->colorFormatsCount;
  v791 = *(_OWORD *)a3->colorFormats;
  v792 = v150;
  v151 = ggl::PolygonAnimatableStroke::MeshPipelineState::MeshPipelineState((uint64_t)(v149 + 3), &v789, (uint64_t)v787, &v791);
  v152 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 8) = v151;
  *((_QWORD *)this + 9) = v149;
  if (v152)
  {
    v153 = (unint64_t *)&v152->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v790;
  if (v790)
  {
    v156 = (unint64_t *)&v790->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = *(_QWORD *)(v9 + 80);
  v159 = *(_QWORD *)(v158 + 1664);
  v160 = *(std::__shared_weak_count **)(v158 + 1672);
  v789 = v159;
  v790 = v160;
  if (v160)
  {
    v161 = (unint64_t *)&v160->__shared_owners_;
    do
      v162 = __ldxr(v161);
    while (__stxr(v162 + 1, v161));
  }
  memset(&v787[20], 0, 24);
  v787[0] = 0;
  *(_OWORD *)&v787[4] = xmmword_19FFB3060;
  v788 = 15;
  v163 = operator new(0x198uLL);
  v163[1] = 0;
  v163[2] = 0;
  *v163 = &off_1E42DE960;
  v164 = *(_OWORD *)&a3->colorFormatsCount;
  v791 = *(_OWORD *)a3->colorFormats;
  v792 = v164;
  v165 = ggl::PolygonFill::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v163 + 3), &v789, (uint64_t)v787, &v791);
  v166 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 10) = v165;
  *((_QWORD *)this + 11) = v163;
  if (v166)
  {
    v167 = (unint64_t *)&v166->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = v790;
  if (v790)
  {
    v170 = (unint64_t *)&v790->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = *(_QWORD *)(v9 + 80);
  v173 = *(_QWORD *)(v172 + 1664);
  v174 = *(std::__shared_weak_count **)(v172 + 1672);
  v789 = v173;
  v790 = v174;
  if (v174)
  {
    v175 = (unint64_t *)&v174->__shared_owners_;
    do
      v176 = __ldxr(v175);
    while (__stxr(v176 + 1, v175));
  }
  memset(&v787[24], 0, 20);
  v787[0] = 1;
  *(_OWORD *)&v787[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v787[20] = 7;
  v788 = 15;
  v177 = operator new(0x198uLL);
  v177[1] = 0;
  v177[2] = 0;
  *v177 = &off_1E42DE960;
  v178 = *(_OWORD *)&a3->colorFormatsCount;
  v791 = *(_OWORD *)a3->colorFormats;
  v792 = v178;
  v179 = ggl::PolygonFill::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v177 + 3), &v789, (uint64_t)v787, &v791);
  v180 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 12) = v179;
  *((_QWORD *)this + 13) = v177;
  if (v180)
  {
    v181 = (unint64_t *)&v180->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = v790;
  if (v790)
  {
    v184 = (unint64_t *)&v790->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = *(_QWORD *)(v9 + 80);
  v187 = *(_QWORD *)(v186 + 1616);
  v188 = *(_QWORD *)(v186 + 1624);
  *(_QWORD *)&v791 = v187;
  *((_QWORD *)&v791 + 1) = v188;
  if (v188)
  {
    v189 = (unint64_t *)(v188 + 8);
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 1, v189));
  }
  v191 = (char *)operator new(0x198uLL);
  *((_QWORD *)v191 + 1) = 0;
  *((_QWORD *)v191 + 2) = 0;
  *(_QWORD *)v191 = &off_1E42E39E0;
  v192 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v787 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v787[16] = v192;
  if ((v193 & 1) == 0)
  {
    if ((_DWORD)v748)
    {
      if ((v749 & 1) == 0)
      {
        if ((_DWORD)v748)
        {
          if ((v770 & 1) == 0
          {
            if ((v775 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1ECE43B18 = 1;
          }
          ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1EE57EFB0 = &ggl::PolygonAnimatableFill::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57EFB8 = 0;
          if ((v771 & 1) == 0
          {
            ggl::PolygonAnimatableFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57EFE8 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57EFF0 = (uint64_t)ggl::PolygonAnimatableFill::Fill::reflection(void)::reflection;
            unk_1EE57EFF8 = ggl::AnimatableTexture::Variant::reflection(void)::reflection;
          }
          qword_1EE57EFC0 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57EFC8 = xmmword_19FFB2F50;
        }
      }
      ggl::PolygonAnimatableFill::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonAnimatableFillShader::typedReflection(v748);
      qword_1ECE31978 = (uint64_t)&ggl::PolygonAnimatableFillShader::typedReflection(void)::ref;
      if ((v750 & 1) == 0
      {
        ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57F0C8 = 0;
        qword_1EE57F0D0 = (uint64_t)"";
        dword_1EE57F0D8 = 0;
        qword_1EE57F0E0 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57F0E8 = 1;
      }
      qword_1ECE31980 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31988 = 1;
      qword_1ECE31990 = 0;
      unk_1ECE31998 = 2;
      qword_1ECE319A0 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE319A8 = 0;
      if ((v751 & 1) == 0
      {
        ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57F008 = 0;
        qword_1EE57F010 = (uint64_t)"view";
        dword_1EE57F018 = 3;
        qword_1EE57F020 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57F028 = xmmword_19FFB35A0;
        qword_1EE57F038 = 1;
        unk_1EE57F040 = "transform";
        dword_1EE57F048 = 3;
        qword_1EE57F050 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57F058 = xmmword_19FFB3660;
        qword_1EE57F068 = 2;
        unk_1EE57F070 = "fill";
        dword_1EE57F078 = 3;
        qword_1EE57F080 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantFillBinding(void)::reflection;
        unk_1EE57F088 = xmmword_19FFB4850;
        qword_1EE57F098 = 3;
        unk_1EE57F0A0 = "variant";
        dword_1EE57F0A8 = 3;
        qword_1EE57F0B0 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantVariantBinding(void)::reflection;
        unk_1EE57F0B8 = 1;
      }
      qword_1ECE319B0 = (uint64_t)&ggl::PolygonAnimatableFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE319B8 = 4;
    }
  }
  v194 = v791;
  if (*((_QWORD *)&v791 + 1))
  {
    v195 = (unint64_t *)(*((_QWORD *)&v791 + 1) + 8);
    do
      v196 = __ldxr(v195);
    while (__stxr(v196 + 1, v195));
    *((_DWORD *)v191 + 14) = 0;
    *((_QWORD *)v191 + 5) = 0;
    *((_QWORD *)v191 + 6) = 0;
    *((_QWORD *)v191 + 3) = &off_1E42B6760;
    *((_QWORD *)v191 + 4) = 0;
    *((_QWORD *)v191 + 8) = &ggl::PolygonAnimatableFill::CompressedMeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v191 + 72) = v194;
    do
      v197 = __ldxr(v195);
    while (__stxr(v197 + 1, v195));
  }
  else
  {
    *((_DWORD *)v191 + 14) = 0;
    *((_QWORD *)v191 + 5) = 0;
    *((_QWORD *)v191 + 6) = 0;
    *((_QWORD *)v191 + 3) = &off_1E42B6760;
    *((_QWORD *)v191 + 4) = 0;
    *((_QWORD *)v191 + 8) = &ggl::PolygonAnimatableFill::CompressedMeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v191 + 72) = v194;
  }
  v191[136] = 0;
  *(_OWORD *)(v191 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v191 + 156) = 0;
  *(_QWORD *)(v191 + 172) = 0;
  *(_QWORD *)(v191 + 164) = 0;
  v191[184] = 0;
  *(_OWORD *)(v191 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v191 + 204) = 0;
  *(_QWORD *)(v191 + 220) = 0;
  *(_QWORD *)(v191 + 212) = 0;
  v191[232] = 0;
  *(_OWORD *)(v191 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v191 + 252) = 0;
  *(_QWORD *)(v191 + 268) = 0;
  *(_QWORD *)(v191 + 260) = 0;
  v198 = *(_OWORD *)&v787[16];
  *(_OWORD *)(v191 + 280) = *(_OWORD *)v787;
  *(_OWORD *)(v191 + 296) = v198;
  v191[312] = 0;
  *((_QWORD *)v191 + 48) = 0;
  *((_OWORD *)v191 + 22) = 0u;
  *((_OWORD *)v191 + 23) = 0u;
  *((_OWORD *)v191 + 20) = 0u;
  *((_OWORD *)v191 + 21) = 0u;
  *((_QWORD *)v191 + 49) = 0x100000001;
  v191[400] = 0;
  v191[88] = 1;
  *(_WORD *)(v191 + 89) = v789;
  v191[91] = BYTE2(v789);
  *(_OWORD *)(v191 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v191 + 27) = 7;
  *((_QWORD *)v191 + 14) = 0;
  *((_QWORD *)v191 + 15) = 0;
  *((_DWORD *)v191 + 32) = 0;
  v191[132] = 15;
  if (*((_QWORD *)&v194 + 1))
  {
    v199 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v194 + 1) + 16))(*((_QWORD *)&v194 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v194 + 1));
    }
  }
  v191[329] = 0;
  v201 = vceqzq_s8(*(int8x16_t *)(v191 + 328));
  v202 = vmovl_high_s8(v201);
  v203 = vmovl_s16(*(int16x4_t *)v202.i8);
  v204.i64[0] = v203.u32[0];
  v204.i64[1] = v203.u32[1];
  v205 = v204;
  v206 = vmovl_s8(*(int8x8_t *)v201.i8);
  v207 = vmovl_s16(*(int16x4_t *)v206.i8);
  v204.i64[0] = v207.u32[0];
  v204.i64[1] = v207.u32[1];
  v208 = v204;
  v209 = vmovl_high_s16(v202);
  v204.i64[0] = v209.u32[0];
  v204.i64[1] = v209.u32[1];
  v210 = v204;
  v211 = vmovl_high_s16(v206);
  v204.i64[0] = v211.u32[0];
  v204.i64[1] = v211.u32[1];
  v212 = v204;
  v204.i64[0] = v203.u32[2];
  v204.i64[1] = v203.u32[3];
  v213 = v204;
  v204.i64[0] = v207.u32[2];
  v204.i64[1] = v207.u32[3];
  v214 = v204;
  v204.i64[0] = v209.u32[2];
  v204.i64[1] = v209.u32[3];
  v215 = v204;
  v204.i64[0] = v211.u32[2];
  v204.i64[1] = v211.u32[3];
  v216 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v204);
  v217 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v215);
  v218 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v214);
  v219 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v210);
  v220 = vceqzq_s8(*(int8x16_t *)(v191 + 344));
  v221 = vmovl_high_s8(v220);
  v222 = vmovl_s16(*(int16x4_t *)v221.i8);
  v204.i64[0] = v222.u32[0];
  v204.i64[1] = v222.u32[1];
  v223 = v204;
  v224 = vmovl_s8(*(int8x8_t *)v220.i8);
  v225 = vmovl_s16(*(int16x4_t *)v224.i8);
  v204.i64[0] = v225.u32[0];
  v204.i64[1] = v225.u32[1];
  v226 = v204;
  v227 = vmovl_high_s16(v221);
  v204.i64[0] = v227.u32[0];
  v204.i64[1] = v227.u32[1];
  v228 = v204;
  v229 = vmovl_high_s16(v224);
  v204.i64[0] = v229.u32[0];
  v204.i64[1] = v229.u32[1];
  v230 = v204;
  v204.i64[0] = v222.u32[2];
  v204.i64[1] = v222.u32[3];
  v231 = v204;
  v204.i64[0] = v225.u32[2];
  v204.i64[1] = v225.u32[3];
  v232 = v204;
  v204.i64[0] = v227.u32[2];
  v204.i64[1] = v227.u32[3];
  v233 = v204;
  v204.i64[0] = v229.u32[2];
  v204.i64[1] = v229.u32[3];
  v234 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v233);
  v235 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v223), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v205));
  v236 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v226), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v208));
  v237 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v228), v219);
  v238 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v230), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v212));
  v239 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v231), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v213));
  v240 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v232), v218);
  v241 = vorrq_s8(v234, v217);
  v242 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v204), v216);
  v243 = vceqzq_s8(*(int8x16_t *)(v191 + 360));
  v244 = vmovl_s8(*(int8x8_t *)v243.i8);
  v245 = vmovl_high_s16(v244);
  v246 = vmovl_high_s8(v243);
  v247 = vmovl_high_s16(v246);
  v248 = vmovl_s16(*(int16x4_t *)v244.i8);
  v249 = vmovl_s16(*(int16x4_t *)v246.i8);
  v204.i64[0] = v248.i32[0];
  v204.i64[1] = v248.i32[1];
  v250 = v204;
  v204.i64[0] = v249.i32[0];
  v204.i64[1] = v249.i32[1];
  v251 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v204);
  v252 = vceqzq_s8(*(int8x16_t *)(v191 + 376));
  v253 = vmovl_high_s8(v252);
  v254 = vmovl_s16(*(int16x4_t *)v253.i8);
  v204.i64[0] = v254.i32[0];
  v204.i64[1] = v254.i32[1];
  v255 = vmovl_s8(*(int8x8_t *)v252.i8);
  v256 = vmovl_s16(*(int16x4_t *)v255.i8);
  v257 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v204), v251), v235);
  v204.i64[0] = v256.i32[0];
  v204.i64[1] = v256.i32[1];
  v258 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v204), vbicq_s8((int8x16_t)xmmword_19FFB3170, v250));
  v204.i64[0] = v247.i32[0];
  v204.i64[1] = v247.i32[1];
  v259 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v204);
  v260 = vmovl_high_s16(v253);
  v261 = vorrq_s8(v258, v236);
  v204.i64[0] = v260.i32[0];
  v204.i64[1] = v260.i32[1];
  v262 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v204), v259);
  v204.i64[0] = v245.i32[0];
  v204.i64[1] = v245.i32[1];
  v263 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v204);
  v264 = vmovl_high_s16(v255);
  v204.i64[0] = v264.i32[0];
  v204.i64[1] = v264.i32[1];
  v265 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v204), v263), v238);
  v204.i64[0] = v249.i32[2];
  v204.i64[1] = v249.i32[3];
  v266 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v204);
  v204.i64[0] = v254.i32[2];
  v204.i64[1] = v254.i32[3];
  v267 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v204), v266), v239);
  v204.i64[0] = v248.i32[2];
  v204.i64[1] = v248.i32[3];
  v268 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v204);
  v204.i64[0] = v256.i32[2];
  v204.i64[1] = v256.i32[3];
  v269 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v204), v268), v240);
  v204.i64[0] = v247.i32[2];
  v204.i64[1] = v247.i32[3];
  v270 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v204);
  v204.i64[0] = v260.i32[2];
  v204.i64[1] = v260.i32[3];
  v271 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v204), v270), v241);
  v204.i64[0] = v245.i32[2];
  v204.i64[1] = v245.i32[3];
  v272 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v204);
  v204.i64[0] = v264.i32[2];
  v204.i64[1] = v264.i32[3];
  *((_QWORD *)v191 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v261, v257), vorrq_s8(v265, vorrq_s8(v262, v237))), (int64x2_t)vorrq_s8(vorrq_s8(v269, v267), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v204), v272), v242), v271))));
  *((_QWORD *)v191 + 3) = &off_1E42BAD30;
  v191[312] = 1;
  v273 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 14) = v191 + 24;
  *((_QWORD *)this + 15) = v191;
  if (v273)
  {
    v274 = (unint64_t *)&v273->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v276 = (std::__shared_weak_count *)*((_QWORD *)&v791 + 1);
  if (*((_QWORD *)&v791 + 1))
  {
    v277 = (unint64_t *)(*((_QWORD *)&v791 + 1) + 8);
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
    }
  }
  v279 = *(_QWORD *)(v9 + 80);
  v280 = *(_QWORD *)(v279 + 3152);
  v281 = *(std::__shared_weak_count **)(v279 + 3160);
  v789 = v280;
  v790 = v281;
  if (v281)
  {
    v282 = (unint64_t *)&v281->__shared_owners_;
    do
      v283 = __ldxr(v282);
    while (__stxr(v283 + 1, v282));
  }
  memset(&v787[24], 0, 20);
  v787[0] = 1;
  *(_OWORD *)&v787[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v787[20] = 7;
  v788 = 15;
  v284 = operator new(0x198uLL);
  v284[1] = 0;
  v284[2] = 0;
  *v284 = &off_1E42E5420;
  v285 = *(_OWORD *)&a3->colorFormatsCount;
  v791 = *(_OWORD *)a3->colorFormats;
  v792 = v285;
  v286 = ggl::VenueWall::MeshPipelineState::MeshPipelineState((uint64_t)(v284 + 3), &v789, (uint64_t)v787, &v791);
  v287 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 16) = v286;
  *((_QWORD *)this + 17) = v284;
  if (v287)
  {
    v288 = (unint64_t *)&v287->__shared_owners_;
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = v790;
  if (v790)
  {
    v291 = (unint64_t *)&v790->__shared_owners_;
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  v293 = *(_QWORD *)(v9 + 80);
  v294 = *(_QWORD *)(v293 + 1664);
  v295 = *(std::__shared_weak_count **)(v293 + 1672);
  v789 = v294;
  v790 = v295;
  if (v295)
  {
    v296 = (unint64_t *)&v295->__shared_owners_;
    do
      v297 = __ldxr(v296);
    while (__stxr(v297 + 1, v296));
  }
  memset(&v787[20], 0, 24);
  v787[0] = 0;
  *(_OWORD *)&v787[4] = xmmword_19FFB3060;
  v788 = 15;
  v298 = operator new(0x198uLL);
  v298[1] = 0;
  v298[2] = 0;
  *v298 = &off_1E42DE928;
  v299 = *(_OWORD *)&a3->colorFormatsCount;
  v791 = *(_OWORD *)a3->colorFormats;
  v792 = v299;
  v300 = ggl::PolygonFill::MeshPipelineState::MeshPipelineState((uint64_t)(v298 + 3), &v789, (uint64_t)v787, &v791);
  v301 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = v300;
  *((_QWORD *)this + 19) = v298;
  if (v301)
  {
    v302 = (unint64_t *)&v301->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v304 = v790;
  if (v790)
  {
    v305 = (unint64_t *)&v790->__shared_owners_;
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
      std::__shared_weak_count::__release_weak(v304);
    }
  }
  v307 = *(_QWORD *)(v9 + 80);
  v308 = *(_QWORD *)(v307 + 1808);
  v309 = *(_QWORD *)(v307 + 1816);
  *(_QWORD *)&v791 = v308;
  *((_QWORD *)&v791 + 1) = v309;
  if (v309)
  {
    v310 = (unint64_t *)(v309 + 8);
    do
      v311 = __ldxr(v310);
    while (__stxr(v311 + 1, v310));
  }
  v789 = 0;
  v312 = (char *)operator new(0x198uLL);
  *((_QWORD *)v312 + 1) = 0;
  *((_QWORD *)v312 + 2) = 0;
  *(_QWORD *)v312 = &off_1E42E2FD0;
  v313 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v787 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v787[16] = v313;
  if ((v314 & 1) == 0)
  {
    if ((_DWORD)v752)
    {
      if ((v753 & 1) == 0)
      {
        if ((_DWORD)v752)
        {
          if ((v772 & 1) == 0
          {
            if ((v776 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1ECE43B18 = 1;
          }
          ggl::HillshadeFillMask::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1EE57D3F0 = &ggl::HillshadeFillMask::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57D3F8 = 0;
          if ((v773 & 1) == 0
          {
            ggl::HillshadeFillMask::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57D478 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57D480 = (uint64_t)ggl::HillshadeFillMask::Fill::reflection(void)::reflection;
          }
          qword_1EE57D400 = (uint64_t)&ggl::HillshadeFillMask::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57D408 = xmmword_19FFB3410;
        }
      }
      ggl::HillshadeFillMask::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::HillshadeFillMask::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::HillshadeFillMaskShader::typedReflection(v752);
      qword_1EE57D428 = (uint64_t)&ggl::HillshadeFillMaskShader::typedReflection(void)::ref;
      if ((v754 & 1) == 0
      {
        ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57D528 = 0;
        qword_1EE57D530 = (uint64_t)"";
        dword_1EE57D538 = 0;
        qword_1EE57D540 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57D548 = 1;
      }
      qword_1EE57D430 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE57D438 = 1;
      qword_1EE57D440 = 0;
      unk_1EE57D448 = 0;
      qword_1EE57D450 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1EE57D458 = 0;
      if ((v755 & 1) == 0
      {
        ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57D498 = 0;
        qword_1EE57D4A0 = (uint64_t)"view";
        dword_1EE57D4A8 = 3;
        qword_1EE57D4B0 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57D4B8 = xmmword_19FFB35A0;
        qword_1EE57D4C8 = 1;
        unk_1EE57D4D0 = "transform";
        dword_1EE57D4D8 = 3;
        qword_1EE57D4E0 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57D4E8 = xmmword_19FFB3660;
        qword_1EE57D4F8 = 2;
        unk_1EE57D500 = "fill";
        dword_1EE57D508 = 3;
        qword_1EE57D510 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineConstantFillBinding(void)::reflection;
        unk_1EE57D518 = 4;
      }
      qword_1EE57D460 = (uint64_t)&ggl::HillshadeFillMask::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1EE57D468 = 3;
    }
  }
  v315 = v791;
  if (*((_QWORD *)&v791 + 1))
  {
    v316 = (unint64_t *)(*((_QWORD *)&v791 + 1) + 8);
    do
      v317 = __ldxr(v316);
    while (__stxr(v317 + 1, v316));
    *((_DWORD *)v312 + 14) = 0;
    *((_QWORD *)v312 + 5) = 0;
    *((_QWORD *)v312 + 6) = 0;
    *((_QWORD *)v312 + 3) = &off_1E42B6760;
    *((_QWORD *)v312 + 4) = 0;
    *((_QWORD *)v312 + 8) = &ggl::HillshadeFillMask::CompressedMeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v312 + 72) = v315;
    do
      v318 = __ldxr(v316);
    while (__stxr(v318 + 1, v316));
  }
  else
  {
    *((_DWORD *)v312 + 14) = 0;
    *((_QWORD *)v312 + 5) = 0;
    *((_QWORD *)v312 + 6) = 0;
    *((_QWORD *)v312 + 3) = &off_1E42B6760;
    *((_QWORD *)v312 + 4) = 0;
    *((_QWORD *)v312 + 8) = &ggl::HillshadeFillMask::CompressedMeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v312 + 72) = v315;
  }
  v312[136] = 0;
  *(_OWORD *)(v312 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v312 + 156) = 0;
  *(_QWORD *)(v312 + 172) = 0;
  *(_QWORD *)(v312 + 164) = 0;
  v312[184] = 0;
  *(_OWORD *)(v312 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v312 + 204) = 0;
  *(_QWORD *)(v312 + 220) = 0;
  *(_QWORD *)(v312 + 212) = 0;
  v312[232] = 0;
  *(_OWORD *)(v312 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v312 + 252) = 0;
  *(_QWORD *)(v312 + 268) = 0;
  *(_QWORD *)(v312 + 260) = 0;
  v319 = *(_OWORD *)&v787[16];
  *(_OWORD *)(v312 + 280) = *(_OWORD *)v787;
  *(_OWORD *)(v312 + 296) = v319;
  v312[312] = 0;
  *((_QWORD *)v312 + 48) = 0;
  *((_OWORD *)v312 + 22) = 0u;
  *((_OWORD *)v312 + 23) = 0u;
  *((_OWORD *)v312 + 20) = 0u;
  *((_OWORD *)v312 + 21) = 0u;
  *((_QWORD *)v312 + 49) = 0x100000001;
  v312[400] = 0;
  v312[88] = 0;
  *(_WORD *)(v312 + 89) = v785;
  v312[91] = v786;
  *(_OWORD *)(v312 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v312 + 108) = v789;
  *((_DWORD *)v312 + 29) = 0;
  *((_QWORD *)v312 + 15) = 0;
  *((_DWORD *)v312 + 32) = 0;
  v312[132] = 8;
  if (*((_QWORD *)&v315 + 1))
  {
    v320 = (unint64_t *)(*((_QWORD *)&v315 + 1) + 8);
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v315 + 1) + 16))(*((_QWORD *)&v315 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v315 + 1));
    }
  }
  *((_WORD *)v312 + 164) = 0;
  v322 = vceqzq_s8(*(int8x16_t *)(v312 + 328));
  v323 = vmovl_s8(*(int8x8_t *)v322.i8);
  v324 = vmovl_high_s16(v323);
  v325.i64[0] = v324.u32[2];
  v325.i64[1] = v324.u32[3];
  v326 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v325);
  v327 = vmovl_high_s8(v322);
  v328 = vmovl_high_s16(v327);
  v325.i64[0] = v328.u32[2];
  v325.i64[1] = v328.u32[3];
  v329 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v325);
  v330 = vmovl_s16(*(int16x4_t *)v323.i8);
  v325.i64[0] = v330.u32[2];
  v325.i64[1] = v330.u32[3];
  v331 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v325);
  v332 = vmovl_s16(*(int16x4_t *)v327.i8);
  v325.i64[0] = v332.u32[2];
  v325.i64[1] = v332.u32[3];
  v333 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v325);
  v325.i64[0] = v324.u32[0];
  v325.i64[1] = v324.u32[1];
  v334 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v325);
  v325.i64[0] = v328.u32[0];
  v325.i64[1] = v328.u32[1];
  v335 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v325);
  v325.i64[0] = v330.u32[0];
  v325.i64[1] = v330.u32[1];
  v336 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v325);
  v325.i64[0] = v332.u32[0];
  v325.i64[1] = v332.u32[1];
  v337 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v325);
  v338 = vceqzq_s8(*(int8x16_t *)(v312 + 344));
  v339 = vmovl_s8(*(int8x8_t *)v338.i8);
  v340 = vmovl_high_s16(v339);
  v325.i64[0] = v340.u32[2];
  v325.i64[1] = v340.u32[3];
  v341 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v325);
  v342 = vmovl_high_s8(v338);
  v343 = vmovl_high_s16(v342);
  v325.i64[0] = v343.u32[2];
  v325.i64[1] = v343.u32[3];
  v344 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v325);
  v345 = vmovl_s16(*(int16x4_t *)v339.i8);
  v325.i64[0] = v345.u32[2];
  v325.i64[1] = v345.u32[3];
  v346 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v325);
  v347 = vmovl_s16(*(int16x4_t *)v342.i8);
  v325.i64[0] = v347.u32[2];
  v325.i64[1] = v347.u32[3];
  v348 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v325);
  v325.i64[0] = v340.u32[0];
  v325.i64[1] = v340.u32[1];
  v349 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v325);
  v325.i64[0] = v343.u32[0];
  v325.i64[1] = v343.u32[1];
  v350 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v325);
  v325.i64[0] = v345.u32[0];
  v325.i64[1] = v345.u32[1];
  v351 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v325);
  v325.i64[0] = v347.u32[0];
  v325.i64[1] = v347.u32[1];
  v352 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v325), v337);
  v353 = vorrq_s8(v351, v336);
  v354 = vorrq_s8(v350, v335);
  v355 = vorrq_s8(v349, v334);
  v356 = vorrq_s8(v348, v333);
  v357 = vorrq_s8(v346, v331);
  v358 = vorrq_s8(v344, v329);
  v359 = vorrq_s8(v341, v326);
  v360 = vceqzq_s8(*(int8x16_t *)(v312 + 360));
  v361 = vmovl_s8(*(int8x8_t *)v360.i8);
  v362 = vmovl_high_s16(v361);
  v363 = vmovl_high_s8(v360);
  v364 = vmovl_high_s16(v363);
  v365 = vmovl_s16(*(int16x4_t *)v361.i8);
  v366 = vmovl_s16(*(int16x4_t *)v363.i8);
  v325.i64[0] = v366.i32[0];
  v325.i64[1] = v366.i32[1];
  v367 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v325);
  v325.i64[0] = v365.i32[0];
  v325.i64[1] = v365.i32[1];
  v368 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v325);
  v325.i64[0] = v364.i32[0];
  v325.i64[1] = v364.i32[1];
  v369 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v325);
  v325.i64[0] = v362.i32[0];
  v325.i64[1] = v362.i32[1];
  v370 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v325);
  v325.i64[0] = v362.i32[2];
  v325.i64[1] = v362.i32[3];
  v371 = v325;
  v325.i64[0] = v364.i32[2];
  v325.i64[1] = v364.i32[3];
  v372 = v325;
  v325.i64[0] = v365.i32[2];
  v325.i64[1] = v365.i32[3];
  v373 = v325;
  v325.i64[0] = v366.i32[2];
  v325.i64[1] = v366.i32[3];
  v374 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v325);
  v375 = vceqzq_s8(*(int8x16_t *)(v312 + 376));
  v376 = vmovl_high_s8(v375);
  v377 = vmovl_s16(*(int16x4_t *)v376.i8);
  v378 = vmovl_s8(*(int8x8_t *)v375.i8);
  v379 = vmovl_s16(*(int16x4_t *)v378.i8);
  v380 = vmovl_high_s16(v376);
  v381 = vmovl_high_s16(v378);
  v325.i64[0] = v381.i32[2];
  v325.i64[1] = v381.i32[3];
  v382 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v325);
  v325.i64[0] = v380.i32[2];
  v325.i64[1] = v380.i32[3];
  v383 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v325);
  v325.i64[0] = v379.i32[2];
  v325.i64[1] = v379.i32[3];
  v384 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v325);
  v325.i64[0] = v377.i32[2];
  v325.i64[1] = v377.i32[3];
  v385 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v325);
  v325.i64[0] = v381.i32[0];
  v325.i64[1] = v381.i32[1];
  v386 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v325);
  v325.i64[0] = v380.i32[0];
  v325.i64[1] = v380.i32[1];
  v387 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v325);
  v325.i64[0] = v379.i32[0];
  v325.i64[1] = v379.i32[1];
  v388 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v325);
  v325.i64[0] = v377.i32[0];
  v325.i64[1] = v377.i32[1];
  *((_QWORD *)v312 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v388, v368), v353), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v325), v367), v352)), vorrq_s8(vorrq_s8(vorrq_s8(v386, v370), v355), vorrq_s8(vorrq_s8(v387, v369), v354))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v384, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v373)), v357), vorrq_s8(vorrq_s8(v385, v374), v356)), vorrq_s8(vorrq_s8(vorrq_s8(v382, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v371)),
                                                v359),
                                              vorrq_s8(vorrq_s8(v383, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v372)), v358)))));
  *((_QWORD *)v312 + 3) = &off_1E42BA110;
  v312[312] = 1;
  v389 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 20) = v312 + 24;
  *((_QWORD *)this + 21) = v312;
  if (v389)
  {
    v390 = (unint64_t *)&v389->__shared_owners_;
    do
      v391 = __ldaxr(v390);
    while (__stlxr(v391 - 1, v390));
    if (!v391)
    {
      ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
      std::__shared_weak_count::__release_weak(v389);
    }
  }
  v392 = (std::__shared_weak_count *)*((_QWORD *)&v791 + 1);
  if (*((_QWORD *)&v791 + 1))
  {
    v393 = (unint64_t *)(*((_QWORD *)&v791 + 1) + 8);
    do
      v394 = __ldaxr(v393);
    while (__stlxr(v394 - 1, v393));
    if (!v394)
    {
      ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
      std::__shared_weak_count::__release_weak(v392);
    }
  }
  v395 = operator new(0xE8uLL);
  v395[1] = 0;
  v395[2] = 0;
  *v395 = &off_1E42E0FE0;
  v396 = ggl::BufferData::BufferData((uint64_t)(v395 + 3), qword_1EE571CC8, 2, 1, 6, 1);
  v395[28] = ggl::PolygonFill::Fill::reflection(void)::reflection;
  v395[3] = &off_1E42B8C90;
  *((_QWORD *)this + 121) = v396;
  v397 = (std::__shared_weak_count *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = v395;
  if (v397)
  {
    v398 = (unint64_t *)&v397->__shared_owners_;
    do
      v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
  v400 = (uint64_t *)operator new();
  v823[0] = &off_1E42D1000;
  v823[1] = this;
  v824 = v823;
  v821[0] = &off_1E42D1048;
  v821[1] = this;
  v822 = v821;
  v400[1] = 0;
  v400[2] = 0;
  *v400 = 0;
  {
    v756 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v756, "GeoGL", 0xA3D02C1100000005);
  }
  v402 = ggl::Allocator::instance(void)::alloc;
  v400[4] = 0;
  v400[3] = v402;
  v400[5] = 0;
  v400[6] = 0;
  {
    v757 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v757, "GeoGL", 0xA3D02C1100000005);
  }
  v400[7] = ggl::Allocator::instance(void)::alloc;
  v403 = (uint64_t)v824;
  if (!v824)
    goto LABEL_194;
  if (v824 != v823)
  {
    v403 = (*(uint64_t (**)(void))(*v824 + 16))();
LABEL_194:
    v400[11] = v403;
    goto LABEL_196;
  }
  v400[11] = (uint64_t)(v400 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v823[0] + 24))(v823, v400 + 8);
LABEL_196:
  v404 = (uint64_t)v822;
  if (!v822)
  {
LABEL_199:
    v400[15] = v404;
    goto LABEL_201;
  }
  if (v822 != v821)
  {
    v404 = (*(uint64_t (**)(void))(*v822 + 16))();
    goto LABEL_199;
  }
  v400[15] = (uint64_t)(v400 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v821[0] + 24))(v821, v400 + 12);
LABEL_201:
  v400[16] = 2000;
  v405 = *v400;
  if ((unint64_t)(v400[2] - *v400) > 0x31F)
    goto LABEL_214;
  v406 = v400[1];
  v407 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v400[3] + 16))(v400[3], 800, 8);
  v408 = v406 - v405;
  v409 = v407 + ((v406 - v405) & 0xFFFFFFFFFFFFFFF8);
  v411 = *v400;
  v410 = v400[1];
  v412 = v410 - *v400;
  if (v410 == *v400)
  {
    v414 = v407 + ((v406 - v405) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_212;
  }
  v413 = v412 - 8;
  this = v784;
  if ((unint64_t)(v412 - 8) >= 0x58)
  {
    v414 = v409;
    if (v410 - (v408 & 0xFFFFFFFFFFFFFFF8) - v407 >= 0x20)
    {
      v415 = v408 >> 3;
      v416 = (v413 >> 3) + 1;
      v417 = (_OWORD *)(v407 + 8 * v415 - 16);
      v418 = (__int128 *)(v410 - 16);
      v419 = v416 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v420 = *v418;
        *(v417 - 1) = *(v418 - 1);
        *v417 = v420;
        v417 -= 2;
        v418 -= 2;
        v419 -= 4;
      }
      while (v419);
      v414 = v409 - 8 * (v416 & 0x3FFFFFFFFFFFFFFCLL);
      v410 -= 8 * (v416 & 0x3FFFFFFFFFFFFFFCLL);
      if (v416 == (v416 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_211;
    }
  }
  else
  {
    v414 = v409;
  }
  do
  {
    v421 = *(_QWORD *)(v410 - 8);
    v410 -= 8;
    *(_QWORD *)(v414 - 8) = v421;
    v414 -= 8;
  }
  while (v410 != v411);
LABEL_211:
  v410 = *v400;
LABEL_212:
  *v400 = v414;
  v400[1] = v409;
  v422 = v400[2];
  v400[2] = v407 + 800;
  if (v410)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v400[3] + 40))(v400[3], v410, v422 - v410);
LABEL_214:
  v423 = v400[4];
  if ((unint64_t)(v400[6] - v423) > 0x31F)
    goto LABEL_227;
  v424 = v400[5];
  v425 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v400[7] + 16))(v400[7], 800, 8);
  v426 = v424 - v423;
  v427 = v425 + ((v424 - v423) & 0xFFFFFFFFFFFFFFF8);
  v429 = v400[4];
  v428 = v400[5];
  v430 = v428 - v429;
  if (v428 == v429)
  {
    v432 = v425 + ((v424 - v423) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_225;
  }
  v431 = v430 - 8;
  this = v784;
  if ((unint64_t)(v430 - 8) >= 0x58)
  {
    v432 = v427;
    if (v428 - (v426 & 0xFFFFFFFFFFFFFFF8) - v425 >= 0x20)
    {
      v433 = v426 >> 3;
      v434 = (v431 >> 3) + 1;
      v435 = (_OWORD *)(v425 + 8 * v433 - 16);
      v436 = (__int128 *)(v428 - 16);
      v437 = v434 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v438 = *v436;
        *(v435 - 1) = *(v436 - 1);
        *v435 = v438;
        v435 -= 2;
        v436 -= 2;
        v437 -= 4;
      }
      while (v437);
      v432 = v427 - 8 * (v434 & 0x3FFFFFFFFFFFFFFCLL);
      v428 -= 8 * (v434 & 0x3FFFFFFFFFFFFFFCLL);
      if (v434 == (v434 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_224;
    }
  }
  else
  {
    v432 = v427;
  }
  do
  {
    v439 = *(_QWORD *)(v428 - 8);
    v428 -= 8;
    *(_QWORD *)(v432 - 8) = v439;
    v432 -= 8;
  }
  while (v428 != v429);
LABEL_224:
  v428 = v400[4];
LABEL_225:
  v400[4] = v432;
  v400[5] = v427;
  v440 = v400[6];
  v400[6] = v425 + 800;
  if (v428)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v400[7] + 40))(v400[7], v428, v440 - v428);
LABEL_227:
  v441 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v400;
  if (v441)
  {
    v442 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v441);
    MEMORY[0x1A1AF4E00](v442, 0x10A0C40D234DDC7);
  }
  v443 = v822;
  if (v822 == v821)
  {
    v444 = 4;
    v443 = v821;
  }
  else
  {
    if (!v822)
      goto LABEL_234;
    v444 = 5;
  }
  (*(void (**)(void))(*v443 + 8 * v444))();
LABEL_234:
  v445 = v824;
  if (v824 == v823)
  {
    v446 = 4;
    v445 = v823;
    goto LABEL_238;
  }
  if (v824)
  {
    v446 = 5;
LABEL_238:
    (*(void (**)(void))(*v445 + 8 * v446))();
  }
  v447 = (uint64_t *)operator new();
  v819[0] = &off_1E42D1090;
  v819[1] = this;
  v820 = v819;
  v817[0] = &off_1E42D6C08;
  v818 = v817;
  v447[1] = 0;
  v447[2] = 0;
  *v447 = 0;
  {
    v758 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v758, "GeoGL", 0xA3D02C1100000005);
  }
  v449 = ggl::Allocator::instance(void)::alloc;
  v447[4] = 0;
  v447[3] = v449;
  v447[5] = 0;
  v447[6] = 0;
  {
    v759 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v759, "GeoGL", 0xA3D02C1100000005);
  }
  v447[7] = ggl::Allocator::instance(void)::alloc;
  v450 = (uint64_t)v820;
  if (!v820)
    goto LABEL_244;
  if (v820 != v819)
  {
    v450 = (*(uint64_t (**)(void))(*v820 + 16))();
LABEL_244:
    v447[11] = v450;
    goto LABEL_246;
  }
  v447[11] = (uint64_t)(v447 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v819[0] + 24))(v819, v447 + 8);
LABEL_246:
  v451 = (uint64_t)v818;
  if (!v818)
  {
LABEL_249:
    v447[15] = v451;
    goto LABEL_251;
  }
  if (v818 != v817)
  {
    v451 = (*(uint64_t (**)(void))(*v818 + 16))();
    goto LABEL_249;
  }
  v447[15] = (uint64_t)(v447 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v817[0] + 24))(v817, v447 + 12);
LABEL_251:
  v447[16] = 2000;
  v452 = *v447;
  if ((unint64_t)(v447[2] - *v447) > 0x31F)
    goto LABEL_264;
  v453 = v447[1];
  v454 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v447[3] + 16))(v447[3], 800, 8);
  v455 = v453 - v452;
  v456 = v454 + ((v453 - v452) & 0xFFFFFFFFFFFFFFF8);
  v458 = *v447;
  v457 = v447[1];
  v459 = v457 - *v447;
  if (v457 == *v447)
  {
    v461 = v454 + ((v453 - v452) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_262;
  }
  v460 = v459 - 8;
  this = v784;
  if ((unint64_t)(v459 - 8) >= 0x58)
  {
    v461 = v456;
    if (v457 - (v455 & 0xFFFFFFFFFFFFFFF8) - v454 >= 0x20)
    {
      v462 = v455 >> 3;
      v463 = (v460 >> 3) + 1;
      v464 = (_OWORD *)(v454 + 8 * v462 - 16);
      v465 = (__int128 *)(v457 - 16);
      v466 = v463 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v467 = *v465;
        *(v464 - 1) = *(v465 - 1);
        *v464 = v467;
        v464 -= 2;
        v465 -= 2;
        v466 -= 4;
      }
      while (v466);
      v461 = v456 - 8 * (v463 & 0x3FFFFFFFFFFFFFFCLL);
      v457 -= 8 * (v463 & 0x3FFFFFFFFFFFFFFCLL);
      if (v463 == (v463 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_261;
    }
  }
  else
  {
    v461 = v456;
  }
  do
  {
    v468 = *(_QWORD *)(v457 - 8);
    v457 -= 8;
    *(_QWORD *)(v461 - 8) = v468;
    v461 -= 8;
  }
  while (v457 != v458);
LABEL_261:
  v457 = *v447;
LABEL_262:
  *v447 = v461;
  v447[1] = v456;
  v469 = v447[2];
  v447[2] = v454 + 800;
  if (v457)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v447[3] + 40))(v447[3], v457, v469 - v457);
LABEL_264:
  v470 = v447[4];
  if ((unint64_t)(v447[6] - v470) > 0x31F)
    goto LABEL_277;
  v471 = v447[5];
  v472 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v447[7] + 16))(v447[7], 800, 8);
  v473 = v471 - v470;
  v474 = v472 + ((v471 - v470) & 0xFFFFFFFFFFFFFFF8);
  v476 = v447[4];
  v475 = v447[5];
  v477 = v475 - v476;
  if (v475 == v476)
  {
    v479 = v472 + ((v471 - v470) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_275;
  }
  v478 = v477 - 8;
  this = v784;
  if ((unint64_t)(v477 - 8) >= 0x58)
  {
    v479 = v474;
    if (v475 - (v473 & 0xFFFFFFFFFFFFFFF8) - v472 >= 0x20)
    {
      v480 = v473 >> 3;
      v481 = (v478 >> 3) + 1;
      v482 = (_OWORD *)(v472 + 8 * v480 - 16);
      v483 = (__int128 *)(v475 - 16);
      v484 = v481 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v485 = *v483;
        *(v482 - 1) = *(v483 - 1);
        *v482 = v485;
        v482 -= 2;
        v483 -= 2;
        v484 -= 4;
      }
      while (v484);
      v479 = v474 - 8 * (v481 & 0x3FFFFFFFFFFFFFFCLL);
      v475 -= 8 * (v481 & 0x3FFFFFFFFFFFFFFCLL);
      if (v481 == (v481 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_274;
    }
  }
  else
  {
    v479 = v474;
  }
  do
  {
    v486 = *(_QWORD *)(v475 - 8);
    v475 -= 8;
    *(_QWORD *)(v479 - 8) = v486;
    v479 -= 8;
  }
  while (v475 != v476);
LABEL_274:
  v475 = v447[4];
LABEL_275:
  v447[4] = v479;
  v447[5] = v474;
  v487 = v447[6];
  v447[6] = v472 + 800;
  if (v475)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v447[7] + 40))(v447[7], v475, v487 - v475);
LABEL_277:
  v488 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v447;
  if (v488)
  {
    v489 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v488);
    MEMORY[0x1A1AF4E00](v489, 0x10A0C40D234DDC7);
  }
  v490 = v818;
  if (v818 == v817)
  {
    v491 = 4;
    v490 = v817;
  }
  else
  {
    if (!v818)
      goto LABEL_284;
    v491 = 5;
  }
  (*(void (**)(void))(*v490 + 8 * v491))();
LABEL_284:
  v492 = v820;
  if (v820 == v819)
  {
    v493 = 4;
    v492 = v819;
    goto LABEL_288;
  }
  if (v820)
  {
    v493 = 5;
LABEL_288:
    (*(void (**)(void))(*v492 + 8 * v493))();
  }
  v494 = (uint64_t *)operator new();
  v815[0] = &off_1E42D10D8;
  v815[1] = this;
  v816 = v815;
  v813[0] = &off_1E42D1120;
  v813[1] = this;
  v814 = v813;
  v494[1] = 0;
  v494[2] = 0;
  *v494 = 0;
  {
    v760 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v760, "GeoGL", 0xA3D02C1100000005);
  }
  v496 = ggl::Allocator::instance(void)::alloc;
  v494[4] = 0;
  v494[3] = v496;
  v494[5] = 0;
  v494[6] = 0;
  {
    v761 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v761, "GeoGL", 0xA3D02C1100000005);
  }
  v494[7] = ggl::Allocator::instance(void)::alloc;
  v497 = (uint64_t)v816;
  if (!v816)
    goto LABEL_294;
  if (v816 != v815)
  {
    v497 = (*(uint64_t (**)(void))(*v816 + 16))();
LABEL_294:
    v494[11] = v497;
    goto LABEL_296;
  }
  v494[11] = (uint64_t)(v494 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v815[0] + 24))(v815, v494 + 8);
LABEL_296:
  v498 = (uint64_t)v814;
  if (!v814)
  {
LABEL_299:
    v494[15] = v498;
    goto LABEL_301;
  }
  if (v814 != v813)
  {
    v498 = (*(uint64_t (**)(void))(*v814 + 16))();
    goto LABEL_299;
  }
  v494[15] = (uint64_t)(v494 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v813[0] + 24))(v813, v494 + 12);
LABEL_301:
  v494[16] = 2000;
  v499 = *v494;
  if ((unint64_t)(v494[2] - *v494) > 0x31F)
    goto LABEL_314;
  v500 = v494[1];
  v501 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v494[3] + 16))(v494[3], 800, 8);
  v502 = v500 - v499;
  v503 = v501 + ((v500 - v499) & 0xFFFFFFFFFFFFFFF8);
  v505 = *v494;
  v504 = v494[1];
  v506 = v504 - *v494;
  if (v504 == *v494)
  {
    v508 = v501 + ((v500 - v499) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_312;
  }
  v507 = v506 - 8;
  this = v784;
  if ((unint64_t)(v506 - 8) >= 0x58)
  {
    v508 = v503;
    if (v504 - (v502 & 0xFFFFFFFFFFFFFFF8) - v501 >= 0x20)
    {
      v509 = v502 >> 3;
      v510 = (v507 >> 3) + 1;
      v511 = (_OWORD *)(v501 + 8 * v509 - 16);
      v512 = (__int128 *)(v504 - 16);
      v513 = v510 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v514 = *v512;
        *(v511 - 1) = *(v512 - 1);
        *v511 = v514;
        v511 -= 2;
        v512 -= 2;
        v513 -= 4;
      }
      while (v513);
      v508 = v503 - 8 * (v510 & 0x3FFFFFFFFFFFFFFCLL);
      v504 -= 8 * (v510 & 0x3FFFFFFFFFFFFFFCLL);
      if (v510 == (v510 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_311;
    }
  }
  else
  {
    v508 = v503;
  }
  do
  {
    v515 = *(_QWORD *)(v504 - 8);
    v504 -= 8;
    *(_QWORD *)(v508 - 8) = v515;
    v508 -= 8;
  }
  while (v504 != v505);
LABEL_311:
  v504 = *v494;
LABEL_312:
  *v494 = v508;
  v494[1] = v503;
  v516 = v494[2];
  v494[2] = v501 + 800;
  if (v504)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v494[3] + 40))(v494[3], v504, v516 - v504);
LABEL_314:
  v517 = v494[4];
  if ((unint64_t)(v494[6] - v517) > 0x31F)
    goto LABEL_327;
  v518 = v494[5];
  v519 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v494[7] + 16))(v494[7], 800, 8);
  v520 = v518 - v517;
  v521 = v519 + ((v518 - v517) & 0xFFFFFFFFFFFFFFF8);
  v523 = v494[4];
  v522 = v494[5];
  v524 = v522 - v523;
  if (v522 == v523)
  {
    v526 = v519 + ((v518 - v517) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_325;
  }
  v525 = v524 - 8;
  this = v784;
  if ((unint64_t)(v524 - 8) >= 0x58)
  {
    v526 = v521;
    if (v522 - (v520 & 0xFFFFFFFFFFFFFFF8) - v519 >= 0x20)
    {
      v527 = v520 >> 3;
      v528 = (v525 >> 3) + 1;
      v529 = (_OWORD *)(v519 + 8 * v527 - 16);
      v530 = (__int128 *)(v522 - 16);
      v531 = v528 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v532 = *v530;
        *(v529 - 1) = *(v530 - 1);
        *v529 = v532;
        v529 -= 2;
        v530 -= 2;
        v531 -= 4;
      }
      while (v531);
      v526 = v521 - 8 * (v528 & 0x3FFFFFFFFFFFFFFCLL);
      v522 -= 8 * (v528 & 0x3FFFFFFFFFFFFFFCLL);
      if (v528 == (v528 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_324;
    }
  }
  else
  {
    v526 = v521;
  }
  do
  {
    v533 = *(_QWORD *)(v522 - 8);
    v522 -= 8;
    *(_QWORD *)(v526 - 8) = v533;
    v526 -= 8;
  }
  while (v522 != v523);
LABEL_324:
  v522 = v494[4];
LABEL_325:
  v494[4] = v526;
  v494[5] = v521;
  v534 = v494[6];
  v494[6] = v519 + 800;
  if (v522)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v494[7] + 40))(v494[7], v522, v534 - v522);
LABEL_327:
  v535 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v494;
  if (v535)
  {
    v536 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v535);
    MEMORY[0x1A1AF4E00](v536, 0x10A0C40D234DDC7);
  }
  v537 = v814;
  if (v814 == v813)
  {
    v538 = 4;
    v537 = v813;
  }
  else
  {
    if (!v814)
      goto LABEL_334;
    v538 = 5;
  }
  (*(void (**)(void))(*v537 + 8 * v538))();
LABEL_334:
  v539 = v816;
  if (v816 == v815)
  {
    v540 = 4;
    v539 = v815;
  }
  else
  {
    if (!v816)
      goto LABEL_339;
    v540 = 5;
  }
  (*(void (**)(void))(*v539 + 8 * v540))();
LABEL_339:
  v541 = (unint64_t *)operator new();
  v811[0] = &off_1E42D1168;
  v811[1] = this;
  v812 = v811;
  v809[0] = &off_1E42D6158;
  v810 = v809;
  ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::FragmentedPool(v541, (uint64_t)v811, (uint64_t)v809);
  v542 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = v541;
  if (v542)
  {
    v543 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v542);
    MEMORY[0x1A1AF4E00](v543, 0x10A0C40D234DDC7);
  }
  v544 = v810;
  if (v810 == v809)
  {
    v545 = 4;
    v544 = v809;
  }
  else
  {
    if (!v810)
      goto LABEL_346;
    v545 = 5;
  }
  (*(void (**)(void))(*v544 + 8 * v545))();
LABEL_346:
  v546 = v812;
  if (v812 == v811)
  {
    v547 = 4;
    v546 = v811;
  }
  else
  {
    if (!v812)
      goto LABEL_351;
    v547 = 5;
  }
  (*(void (**)(void))(*v546 + 8 * v547))();
LABEL_351:
  v548 = (unint64_t *)operator new();
  v808 = v807;
  v805[0] = &off_1E42D6158;
  v807[0] = &off_1E42D11B0;
  v807[1] = this;
  v806 = v805;
  ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::FragmentedPool(v548, (uint64_t)v807, (uint64_t)v805);
  v549 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v548;
  if (v549)
  {
    v550 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v549);
    MEMORY[0x1A1AF4E00](v550, 0x10A0C40D234DDC7);
  }
  v551 = v806;
  if (v806 == v805)
  {
    v552 = 4;
    v551 = v805;
  }
  else
  {
    if (!v806)
      goto LABEL_358;
    v552 = 5;
  }
  (*(void (**)(void))(*v551 + 8 * v552))();
LABEL_358:
  v553 = v808;
  if (v808 == v807)
  {
    v554 = 4;
    v553 = v807;
    goto LABEL_362;
  }
  if (v808)
  {
    v554 = 5;
LABEL_362:
    (*(void (**)(void))(*v553 + 8 * v554))();
  }
  v555 = (uint64_t *)operator new();
  v803[0] = &off_1E42D11F8;
  v803[1] = this;
  v804 = v803;
  v801[0] = &off_1E42D6E48;
  v802 = v801;
  v555[1] = 0;
  v555[2] = 0;
  *v555 = 0;
  {
    v762 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v762, "GeoGL", 0xA3D02C1100000005);
  }
  v557 = ggl::Allocator::instance(void)::alloc;
  v555[4] = 0;
  v555[3] = v557;
  v555[5] = 0;
  v555[6] = 0;
  {
    v763 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v763, "GeoGL", 0xA3D02C1100000005);
  }
  v555[7] = ggl::Allocator::instance(void)::alloc;
  v558 = (uint64_t)v804;
  if (!v804)
    goto LABEL_368;
  if (v804 != v803)
  {
    v558 = (*(uint64_t (**)(void))(*v804 + 16))();
LABEL_368:
    v555[11] = v558;
    goto LABEL_370;
  }
  v555[11] = (uint64_t)(v555 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v803[0] + 24))(v803, v555 + 8);
LABEL_370:
  v559 = (uint64_t)v802;
  if (!v802)
  {
LABEL_373:
    v555[15] = v559;
    goto LABEL_375;
  }
  if (v802 != v801)
  {
    v559 = (*(uint64_t (**)(void))(*v802 + 16))();
    goto LABEL_373;
  }
  v555[15] = (uint64_t)(v555 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v801[0] + 24))(v801, v555 + 12);
LABEL_375:
  v555[16] = 2000;
  v560 = *v555;
  if ((unint64_t)(v555[2] - *v555) > 0x31F)
    goto LABEL_388;
  v561 = v555[1];
  v562 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v555[3] + 16))(v555[3], 800, 8);
  v563 = v561 - v560;
  v564 = v562 + ((v561 - v560) & 0xFFFFFFFFFFFFFFF8);
  v566 = *v555;
  v565 = v555[1];
  v567 = v565 - *v555;
  if (v565 == *v555)
  {
    v569 = v562 + ((v561 - v560) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_386;
  }
  v568 = v567 - 8;
  this = v784;
  if ((unint64_t)(v567 - 8) >= 0x58)
  {
    v569 = v564;
    if (v565 - (v563 & 0xFFFFFFFFFFFFFFF8) - v562 >= 0x20)
    {
      v570 = v563 >> 3;
      v571 = (v568 >> 3) + 1;
      v572 = (_OWORD *)(v562 + 8 * v570 - 16);
      v573 = (__int128 *)(v565 - 16);
      v574 = v571 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v575 = *v573;
        *(v572 - 1) = *(v573 - 1);
        *v572 = v575;
        v572 -= 2;
        v573 -= 2;
        v574 -= 4;
      }
      while (v574);
      v569 = v564 - 8 * (v571 & 0x3FFFFFFFFFFFFFFCLL);
      v565 -= 8 * (v571 & 0x3FFFFFFFFFFFFFFCLL);
      if (v571 == (v571 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_385;
    }
  }
  else
  {
    v569 = v564;
  }
  do
  {
    v576 = *(_QWORD *)(v565 - 8);
    v565 -= 8;
    *(_QWORD *)(v569 - 8) = v576;
    v569 -= 8;
  }
  while (v565 != v566);
LABEL_385:
  v565 = *v555;
LABEL_386:
  *v555 = v569;
  v555[1] = v564;
  v577 = v555[2];
  v555[2] = v562 + 800;
  if (v565)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v555[3] + 40))(v555[3], v565, v577 - v565);
LABEL_388:
  v578 = v555[4];
  if ((unint64_t)(v555[6] - v578) > 0x31F)
    goto LABEL_401;
  v579 = v555[5];
  v580 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v555[7] + 16))(v555[7], 800, 8);
  v581 = v579 - v578;
  v582 = v580 + ((v579 - v578) & 0xFFFFFFFFFFFFFFF8);
  v584 = v555[4];
  v583 = v555[5];
  v585 = v583 - v584;
  if (v583 == v584)
  {
    v587 = v580 + ((v579 - v578) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_399;
  }
  v586 = v585 - 8;
  this = v784;
  if ((unint64_t)(v585 - 8) >= 0x58)
  {
    v587 = v582;
    if (v583 - (v581 & 0xFFFFFFFFFFFFFFF8) - v580 >= 0x20)
    {
      v588 = v581 >> 3;
      v589 = (v586 >> 3) + 1;
      v590 = (_OWORD *)(v580 + 8 * v588 - 16);
      v591 = (__int128 *)(v583 - 16);
      v592 = v589 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v593 = *v591;
        *(v590 - 1) = *(v591 - 1);
        *v590 = v593;
        v590 -= 2;
        v591 -= 2;
        v592 -= 4;
      }
      while (v592);
      v587 = v582 - 8 * (v589 & 0x3FFFFFFFFFFFFFFCLL);
      v583 -= 8 * (v589 & 0x3FFFFFFFFFFFFFFCLL);
      if (v589 == (v589 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_398;
    }
  }
  else
  {
    v587 = v582;
  }
  do
  {
    v594 = *(_QWORD *)(v583 - 8);
    v583 -= 8;
    *(_QWORD *)(v587 - 8) = v594;
    v587 -= 8;
  }
  while (v583 != v584);
LABEL_398:
  v583 = v555[4];
LABEL_399:
  v555[4] = v587;
  v555[5] = v582;
  v595 = v555[6];
  v555[6] = v580 + 800;
  if (v583)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v555[7] + 40))(v555[7], v583, v595 - v583);
LABEL_401:
  v596 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v555;
  if (v596)
  {
    v597 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v596);
    MEMORY[0x1A1AF4E00](v597, 0x10A0C40D234DDC7);
  }
  v598 = v802;
  if (v802 == v801)
  {
    v599 = 4;
    v598 = v801;
  }
  else
  {
    if (!v802)
      goto LABEL_408;
    v599 = 5;
  }
  (*(void (**)(void))(*v598 + 8 * v599))();
LABEL_408:
  v600 = v804;
  if (v804 == v803)
  {
    v601 = 4;
    v600 = v803;
    goto LABEL_412;
  }
  if (v804)
  {
    v601 = 5;
LABEL_412:
    (*(void (**)(void))(*v600 + 8 * v601))();
  }
  v602 = (uint64_t *)operator new();
  v799[0] = &off_1E42D1240;
  v799[1] = this;
  v800 = v799;
  v797[0] = &off_1E42D6110;
  v798 = v797;
  v602[1] = 0;
  v602[2] = 0;
  *v602 = 0;
  {
    v764 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v764, "GeoGL", 0xA3D02C1100000005);
  }
  v604 = ggl::Allocator::instance(void)::alloc;
  v602[4] = 0;
  v602[3] = v604;
  v602[5] = 0;
  v602[6] = 0;
  {
    v765 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v765, "GeoGL", 0xA3D02C1100000005);
  }
  v602[7] = ggl::Allocator::instance(void)::alloc;
  v605 = (uint64_t)v800;
  if (!v800)
    goto LABEL_418;
  if (v800 != v799)
  {
    v605 = (*(uint64_t (**)(void))(*v800 + 16))();
LABEL_418:
    v602[11] = v605;
    goto LABEL_420;
  }
  v602[11] = (uint64_t)(v602 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v799[0] + 24))(v799, v602 + 8);
LABEL_420:
  v606 = (uint64_t)v798;
  if (!v798)
  {
LABEL_423:
    v602[15] = v606;
    goto LABEL_425;
  }
  if (v798 != v797)
  {
    v606 = (*(uint64_t (**)(void))(*v798 + 16))();
    goto LABEL_423;
  }
  v602[15] = (uint64_t)(v602 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v797[0] + 24))(v797, v602 + 12);
LABEL_425:
  v602[16] = 2000;
  v607 = *v602;
  if ((unint64_t)(v602[2] - *v602) > 0x31F)
    goto LABEL_438;
  v608 = v602[1];
  v609 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v602[3] + 16))(v602[3], 800, 8);
  v610 = v608 - v607;
  v611 = v609 + ((v608 - v607) & 0xFFFFFFFFFFFFFFF8);
  v613 = *v602;
  v612 = v602[1];
  v614 = v612 - *v602;
  if (v612 == *v602)
  {
    v616 = v609 + ((v608 - v607) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_436;
  }
  v615 = v614 - 8;
  this = v784;
  if ((unint64_t)(v614 - 8) >= 0x58)
  {
    v616 = v611;
    if (v612 - (v610 & 0xFFFFFFFFFFFFFFF8) - v609 >= 0x20)
    {
      v617 = v610 >> 3;
      v618 = (v615 >> 3) + 1;
      v619 = (_OWORD *)(v609 + 8 * v617 - 16);
      v620 = (__int128 *)(v612 - 16);
      v621 = v618 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v622 = *v620;
        *(v619 - 1) = *(v620 - 1);
        *v619 = v622;
        v619 -= 2;
        v620 -= 2;
        v621 -= 4;
      }
      while (v621);
      v616 = v611 - 8 * (v618 & 0x3FFFFFFFFFFFFFFCLL);
      v612 -= 8 * (v618 & 0x3FFFFFFFFFFFFFFCLL);
      if (v618 == (v618 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_435;
    }
  }
  else
  {
    v616 = v611;
  }
  do
  {
    v623 = *(_QWORD *)(v612 - 8);
    v612 -= 8;
    *(_QWORD *)(v616 - 8) = v623;
    v616 -= 8;
  }
  while (v612 != v613);
LABEL_435:
  v612 = *v602;
LABEL_436:
  *v602 = v616;
  v602[1] = v611;
  v624 = v602[2];
  v602[2] = v609 + 800;
  if (v612)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v602[3] + 40))(v602[3], v612, v624 - v612);
LABEL_438:
  v625 = v602[4];
  if ((unint64_t)(v602[6] - v625) > 0x31F)
    goto LABEL_451;
  v626 = v602[5];
  v627 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v602[7] + 16))(v602[7], 800, 8);
  v628 = v626 - v625;
  v629 = v627 + ((v626 - v625) & 0xFFFFFFFFFFFFFFF8);
  v631 = v602[4];
  v630 = v602[5];
  v632 = v630 - v631;
  if (v630 == v631)
  {
    v634 = v627 + ((v626 - v625) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_449;
  }
  v633 = v632 - 8;
  this = v784;
  if ((unint64_t)(v632 - 8) >= 0x58)
  {
    v634 = v629;
    if (v630 - (v628 & 0xFFFFFFFFFFFFFFF8) - v627 >= 0x20)
    {
      v635 = v628 >> 3;
      v636 = (v633 >> 3) + 1;
      v637 = (_OWORD *)(v627 + 8 * v635 - 16);
      v638 = (__int128 *)(v630 - 16);
      v639 = v636 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v640 = *v638;
        *(v637 - 1) = *(v638 - 1);
        *v637 = v640;
        v637 -= 2;
        v638 -= 2;
        v639 -= 4;
      }
      while (v639);
      v634 = v629 - 8 * (v636 & 0x3FFFFFFFFFFFFFFCLL);
      v630 -= 8 * (v636 & 0x3FFFFFFFFFFFFFFCLL);
      if (v636 == (v636 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_448;
    }
  }
  else
  {
    v634 = v629;
  }
  do
  {
    v641 = *(_QWORD *)(v630 - 8);
    v630 -= 8;
    *(_QWORD *)(v634 - 8) = v641;
    v634 -= 8;
  }
  while (v630 != v631);
LABEL_448:
  v630 = v602[4];
LABEL_449:
  v602[4] = v634;
  v602[5] = v629;
  v642 = v602[6];
  v602[6] = v627 + 800;
  if (v630)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v602[7] + 40))(v602[7], v630, v642 - v630);
LABEL_451:
  v643 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = v602;
  if (v643)
  {
    v644 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v643);
    MEMORY[0x1A1AF4E00](v644, 0x10A0C40D234DDC7);
  }
  v645 = v798;
  if (v798 == v797)
  {
    v646 = 4;
    v645 = v797;
  }
  else
  {
    if (!v798)
      goto LABEL_458;
    v646 = 5;
  }
  (*(void (**)(void))(*v645 + 8 * v646))();
LABEL_458:
  v647 = v800;
  if (v800 == v799)
  {
    v648 = 4;
    v647 = v799;
    goto LABEL_462;
  }
  if (v800)
  {
    v648 = 5;
LABEL_462:
    (*(void (**)(void))(*v647 + 8 * v648))();
  }
  v649 = (uint64_t *)operator new();
  v795[0] = &off_1E42D1288;
  v795[1] = this;
  v796 = v795;
  v793[0] = &off_1E42D6BC0;
  v794 = v793;
  v649[1] = 0;
  v649[2] = 0;
  *v649 = 0;
  {
    v766 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v766, "GeoGL", 0xA3D02C1100000005);
  }
  v651 = ggl::Allocator::instance(void)::alloc;
  v649[4] = 0;
  v649[3] = v651;
  v649[5] = 0;
  v649[6] = 0;
  {
    v767 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v767, "GeoGL", 0xA3D02C1100000005);
  }
  v649[7] = ggl::Allocator::instance(void)::alloc;
  v652 = (uint64_t)v796;
  if (!v796)
    goto LABEL_468;
  if (v796 != v795)
  {
    v652 = (*(uint64_t (**)(void))(*v796 + 16))();
LABEL_468:
    v649[11] = v652;
    goto LABEL_470;
  }
  v649[11] = (uint64_t)(v649 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v795[0] + 24))(v795, v649 + 8);
LABEL_470:
  v653 = (uint64_t)v794;
  if (!v794)
  {
LABEL_473:
    v649[15] = v653;
    goto LABEL_475;
  }
  if (v794 != v793)
  {
    v653 = (*(uint64_t (**)(void))(*v794 + 16))();
    goto LABEL_473;
  }
  v649[15] = (uint64_t)(v649 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v793[0] + 24))((uint64_t)v793, v649 + 12);
LABEL_475:
  v649[16] = 2000;
  v654 = *v649;
  if ((unint64_t)(v649[2] - *v649) > 0x31F)
    goto LABEL_488;
  v655 = v649[1];
  v656 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v649[3] + 16))(v649[3], 800, 8);
  v657 = v655 - v654;
  v658 = v656 + ((v655 - v654) & 0xFFFFFFFFFFFFFFF8);
  v660 = *v649;
  v659 = v649[1];
  v661 = v659 - *v649;
  if (v659 == *v649)
  {
    v663 = v656 + ((v655 - v654) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_486;
  }
  v662 = v661 - 8;
  this = v784;
  if ((unint64_t)(v661 - 8) >= 0x58)
  {
    v663 = v658;
    if (v659 - (v657 & 0xFFFFFFFFFFFFFFF8) - v656 >= 0x20)
    {
      v664 = v657 >> 3;
      v665 = (v662 >> 3) + 1;
      v666 = (_OWORD *)(v656 + 8 * v664 - 16);
      v667 = (__int128 *)(v659 - 16);
      v668 = v665 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v669 = *v667;
        *(v666 - 1) = *(v667 - 1);
        *v666 = v669;
        v666 -= 2;
        v667 -= 2;
        v668 -= 4;
      }
      while (v668);
      v663 = v658 - 8 * (v665 & 0x3FFFFFFFFFFFFFFCLL);
      v659 -= 8 * (v665 & 0x3FFFFFFFFFFFFFFCLL);
      if (v665 == (v665 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_485;
    }
  }
  else
  {
    v663 = v658;
  }
  do
  {
    v670 = *(_QWORD *)(v659 - 8);
    v659 -= 8;
    *(_QWORD *)(v663 - 8) = v670;
    v663 -= 8;
  }
  while (v659 != v660);
LABEL_485:
  v659 = *v649;
LABEL_486:
  *v649 = v663;
  v649[1] = v658;
  v671 = v649[2];
  v649[2] = v656 + 800;
  if (v659)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v649[3] + 40))(v649[3], v659, v671 - v659);
LABEL_488:
  v672 = v649[4];
  if ((unint64_t)(v649[6] - v672) > 0x31F)
    goto LABEL_501;
  v673 = v649[5];
  v674 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v649[7] + 16))(v649[7], 800, 8);
  v675 = v673 - v672;
  v676 = v674 + ((v673 - v672) & 0xFFFFFFFFFFFFFFF8);
  v678 = v649[4];
  v677 = v649[5];
  v679 = v677 - v678;
  if (v677 == v678)
  {
    v681 = v674 + ((v673 - v672) & 0xFFFFFFFFFFFFFFF8);
    this = v784;
    goto LABEL_499;
  }
  v680 = v679 - 8;
  this = v784;
  if ((unint64_t)(v679 - 8) >= 0x58)
  {
    v681 = v676;
    if (v677 - (v675 & 0xFFFFFFFFFFFFFFF8) - v674 >= 0x20)
    {
      v682 = v675 >> 3;
      v683 = (v680 >> 3) + 1;
      v684 = (_OWORD *)(v674 + 8 * v682 - 16);
      v685 = (__int128 *)(v677 - 16);
      v686 = v683 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v687 = *v685;
        *(v684 - 1) = *(v685 - 1);
        *v684 = v687;
        v684 -= 2;
        v685 -= 2;
        v686 -= 4;
      }
      while (v686);
      v681 = v676 - 8 * (v683 & 0x3FFFFFFFFFFFFFFCLL);
      v677 -= 8 * (v683 & 0x3FFFFFFFFFFFFFFCLL);
      if (v683 == (v683 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_498;
    }
  }
  else
  {
    v681 = v676;
  }
  do
  {
    v688 = *(_QWORD *)(v677 - 8);
    v677 -= 8;
    *(_QWORD *)(v681 - 8) = v688;
    v681 -= 8;
  }
  while (v677 != v678);
LABEL_498:
  v677 = v649[4];
LABEL_499:
  v649[4] = v681;
  v649[5] = v676;
  v689 = v649[6];
  v649[6] = v674 + 800;
  if (v677)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v649[7] + 40))(v649[7], v677, v689 - v677);
LABEL_501:
  v690 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v649;
  if (v690)
  {
    v691 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v690);
    MEMORY[0x1A1AF4E00](v691, 0x10A0C40D234DDC7);
  }
  v692 = v794;
  if (v794 == v793)
  {
    v693 = 4;
    v692 = v793;
  }
  else
  {
    if (!v794)
      goto LABEL_508;
    v693 = 5;
  }
  (*(void (**)(void))(*v692 + 8 * v693))();
LABEL_508:
  v694 = v796;
  if (v796 == v795)
  {
    v695 = 4;
    v694 = v795;
    goto LABEL_512;
  }
  if (v796)
  {
    v695 = 5;
LABEL_512:
    (*(void (**)(void))(*v694 + 8 * v695))();
  }
  v696 = 0;
  v697 = 0;
  v780 = (char *)this + 272;
  v698 = 1;
  do
  {
    v699 = 0;
    v781 = v698;
    v700 = v696 & 1;
    v782 = v697;
    v783 = &v780[8 * v697];
    do
    {
      v701 = v699 == 0;
      if (v699)
        v702 = 0x7F7F0100000000;
      else
        v702 = 0x7F7F0200000000;
      if (v699 == 2)
        v703 = 1024;
      else
        v703 = 1792;
      v704 = operator new();
      v705 = v703 | v701;
      *(_DWORD *)(v704 + 32) = 0;
      v706 = v703 | v701 | 0x7F7F0000000000;
      *(_QWORD *)(v704 + 16) = 0;
      *(_QWORD *)(v704 + 24) = 0;
      *(_QWORD *)v704 = &off_1E42B5DE8;
      *(_QWORD *)(v704 + 8) = 0;
      *(_QWORD *)(v704 + 36) = 66305;
      *(_DWORD *)(v704 + 44) = 0;
      *(_QWORD *)(v704 + 48) = v706;
      *(_WORD *)(v704 + 56) = 0;
      *(_BYTE *)(v704 + 58) = 3;
      *(_QWORD *)(v704 + 67) = 0;
      *(_QWORD *)(v704 + 59) = 0;
      *(_BYTE *)(v704 + 75) = 0;
      *(_QWORD *)(v704 + 132) = 0;
      *(_QWORD *)(v704 + 124) = 0;
      *(_WORD *)(v704 + 188) = 257;
      *(_QWORD *)(v704 + 192) = 0;
      *(_QWORD *)(v704 + 200) = 0;
      *(_BYTE *)(v704 + 208) = 0;
      v707 = *(_QWORD *)&v783[8 * v699];
      *(_QWORD *)&v783[8 * v699] = v704;
      if (v707)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v707 + 8))(v707);
        v704 = *(_QWORD *)&v783[8 * v699];
      }
      *(_BYTE *)(v704 + 208) = 1;
      *(_BYTE *)(v704 + 58) = 3;
      *(_BYTE *)(v704 + 56) = v700;
      v708 = operator new();
      v709 = v782 + v699;
      *(_DWORD *)(v708 + 32) = 0;
      v710 = (uint64_t *)((char *)v784 + 8 * ((v782 + v699) & 0xEF) + 400);
      *(_QWORD *)(v708 + 16) = 0;
      *(_QWORD *)(v708 + 24) = 0;
      *(_QWORD *)v708 = &off_1E42B5DE8;
      *(_QWORD *)(v708 + 8) = 0;
      *(_QWORD *)(v708 + 36) = 66304;
      *(_DWORD *)(v708 + 44) = 0;
      *(_QWORD *)(v708 + 48) = v706;
      *(_WORD *)(v708 + 56) = 0;
      *(_BYTE *)(v708 + 58) = 3;
      *(_QWORD *)(v708 + 67) = 0;
      *(_QWORD *)(v708 + 59) = 0;
      *(_BYTE *)(v708 + 75) = 0;
      *(_QWORD *)(v708 + 132) = 0;
      *(_QWORD *)(v708 + 124) = 0;
      *(_WORD *)(v708 + 188) = 257;
      *(_QWORD *)(v708 + 192) = 0;
      *(_QWORD *)(v708 + 200) = 0;
      *(_BYTE *)(v708 + 208) = 0;
      v711 = *v710;
      *v710 = v708;
      if (v711)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v711 + 8))(v711);
        v708 = *v710;
      }
      *(_BYTE *)(v708 + 208) = 1;
      *(_BYTE *)(v708 + 58) = 3;
      *(_BYTE *)(v708 + 56) = v700;
      v712 = operator new();
      *(_DWORD *)(v712 + 32) = 0;
      v713 = (uint64_t *)((char *)v784 + 8 * (v709 & 0xDF) + 528);
      *(_QWORD *)(v712 + 16) = 0;
      *(_QWORD *)(v712 + 24) = 0;
      *(_QWORD *)v712 = &off_1E42B5DE8;
      *(_QWORD *)(v712 + 8) = 0;
      *(_QWORD *)(v712 + 36) = 768;
      *(_DWORD *)(v712 + 44) = 0;
      *(_QWORD *)(v712 + 48) = v706;
      *(_WORD *)(v712 + 56) = 0;
      *(_BYTE *)(v712 + 58) = 3;
      *(_QWORD *)(v712 + 67) = 0;
      *(_QWORD *)(v712 + 59) = 0;
      *(_BYTE *)(v712 + 75) = 0;
      *(_QWORD *)(v712 + 132) = 0;
      *(_QWORD *)(v712 + 124) = 0;
      *(_WORD *)(v712 + 188) = 257;
      *(_QWORD *)(v712 + 192) = 0;
      *(_QWORD *)(v712 + 200) = 0;
      *(_BYTE *)(v712 + 208) = 0;
      v714 = *v713;
      *v713 = v712;
      if (v714)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v714 + 8))(v714);
        v712 = *v713;
      }
      *(_BYTE *)(v712 + 208) = 1;
      *(_BYTE *)(v712 + 58) = 3;
      *(_BYTE *)(v712 + 56) = v700;
      v715 = operator new();
      *(_DWORD *)(v715 + 32) = 0;
      v716 = (uint64_t *)((char *)v784 + 8 * (v709 & 0xCF) + 656);
      *(_QWORD *)(v715 + 16) = 0;
      *(_QWORD *)(v715 + 24) = 0;
      *(_QWORD *)v715 = &off_1E42B5DE8;
      *(_QWORD *)(v715 + 8) = 0;
      *(_QWORD *)(v715 + 36) = 1793;
      *(_DWORD *)(v715 + 44) = 0;
      *(_QWORD *)(v715 + 48) = v706;
      *(_WORD *)(v715 + 56) = 0;
      *(_BYTE *)(v715 + 58) = 3;
      *(_QWORD *)(v715 + 67) = 0;
      *(_QWORD *)(v715 + 59) = 0;
      *(_BYTE *)(v715 + 75) = 0;
      *(_QWORD *)(v715 + 132) = 0;
      *(_QWORD *)(v715 + 124) = 0;
      *(_WORD *)(v715 + 188) = 257;
      *(_QWORD *)(v715 + 192) = 0;
      *(_QWORD *)(v715 + 200) = 0;
      *(_BYTE *)(v715 + 208) = 0;
      v717 = *v716;
      *v716 = v715;
      if (v717)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v717 + 8))(v717);
        v715 = *v716;
      }
      *(_BYTE *)(v715 + 208) = 1;
      *(_BYTE *)(v715 + 58) = 3;
      *(_BYTE *)(v715 + 56) = v700;
      if (v700)
        v718 = v702;
      else
        v718 = 0x7F7F0000000000;
      v719 = operator new();
      v720 = v705 | v718;
      *(_DWORD *)(v719 + 32) = 0;
      v721 = (uint64_t *)((char *)v784 + 8 * (v709 & 0xF7) + 336);
      *(_QWORD *)(v719 + 16) = 0;
      *(_QWORD *)(v719 + 24) = 0;
      *(_QWORD *)v719 = &off_1E42B5DE8;
      *(_QWORD *)(v719 + 8) = 0;
      *(_QWORD *)(v719 + 36) = 66305;
      *(_DWORD *)(v719 + 44) = 0;
      *(_QWORD *)(v719 + 48) = v720;
      *(_WORD *)(v719 + 56) = 0;
      *(_BYTE *)(v719 + 58) = 3;
      *(_QWORD *)(v719 + 67) = 0;
      *(_QWORD *)(v719 + 59) = 0;
      *(_BYTE *)(v719 + 75) = 0;
      *(_QWORD *)(v719 + 132) = 0;
      *(_QWORD *)(v719 + 124) = 0;
      *(_WORD *)(v719 + 188) = 257;
      *(_QWORD *)(v719 + 192) = 0;
      *(_QWORD *)(v719 + 200) = 0;
      *(_BYTE *)(v719 + 208) = 0;
      v722 = *v721;
      *v721 = v719;
      if (v722)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v722 + 8))(v722);
        v719 = *v721;
      }
      *(_BYTE *)(v719 + 208) = 1;
      *(_BYTE *)(v719 + 58) = 3;
      *(_BYTE *)(v719 + 56) = v700;
      v723 = operator new();
      *(_DWORD *)(v723 + 32) = 0;
      v724 = (uint64_t *)((char *)v784 + 8 * (v709 & 0xE7) + 464);
      *(_QWORD *)(v723 + 16) = 0;
      *(_QWORD *)(v723 + 24) = 0;
      *(_QWORD *)v723 = &off_1E42B5DE8;
      *(_QWORD *)(v723 + 8) = 0;
      *(_QWORD *)(v723 + 36) = 66304;
      *(_DWORD *)(v723 + 44) = 0;
      *(_QWORD *)(v723 + 48) = v720;
      *(_WORD *)(v723 + 56) = 0;
      *(_BYTE *)(v723 + 58) = 3;
      *(_QWORD *)(v723 + 67) = 0;
      *(_QWORD *)(v723 + 59) = 0;
      *(_BYTE *)(v723 + 75) = 0;
      *(_QWORD *)(v723 + 132) = 0;
      *(_QWORD *)(v723 + 124) = 0;
      *(_WORD *)(v723 + 188) = 257;
      *(_QWORD *)(v723 + 192) = 0;
      *(_QWORD *)(v723 + 200) = 0;
      *(_BYTE *)(v723 + 208) = 0;
      v725 = *v724;
      *v724 = v723;
      if (v725)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v725 + 8))(v725);
        v723 = *v724;
      }
      *(_BYTE *)(v723 + 208) = 1;
      *(_BYTE *)(v723 + 58) = 3;
      *(_BYTE *)(v723 + 56) = v700;
      v726 = operator new();
      *(_DWORD *)(v726 + 32) = 0;
      v727 = (uint64_t *)((char *)v784 + 8 * (v709 & 0xD7) + 592);
      *(_QWORD *)(v726 + 16) = 0;
      *(_QWORD *)(v726 + 24) = 0;
      *(_QWORD *)v726 = &off_1E42B5DE8;
      *(_QWORD *)(v726 + 8) = 0;
      *(_QWORD *)(v726 + 36) = 768;
      *(_DWORD *)(v726 + 44) = 0;
      *(_QWORD *)(v726 + 48) = v720;
      *(_WORD *)(v726 + 56) = 0;
      *(_BYTE *)(v726 + 58) = 3;
      *(_QWORD *)(v726 + 67) = 0;
      *(_QWORD *)(v726 + 59) = 0;
      *(_BYTE *)(v726 + 75) = 0;
      *(_QWORD *)(v726 + 132) = 0;
      *(_QWORD *)(v726 + 124) = 0;
      *(_WORD *)(v726 + 188) = 257;
      *(_QWORD *)(v726 + 192) = 0;
      *(_QWORD *)(v726 + 200) = 0;
      *(_BYTE *)(v726 + 208) = 0;
      v728 = *v727;
      *v727 = v726;
      if (v728)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v728 + 8))(v728);
        v726 = *v727;
      }
      *(_BYTE *)(v726 + 208) = 1;
      *(_BYTE *)(v726 + 58) = 3;
      *(_BYTE *)(v726 + 56) = v700;
      v729 = operator new();
      *(_DWORD *)(v729 + 32) = 0;
      v730 = (uint64_t *)((char *)v784 + 8 * (v709 & 0xC7) + 720);
      *(_QWORD *)(v729 + 16) = 0;
      *(_QWORD *)(v729 + 24) = 0;
      *(_QWORD *)v729 = &off_1E42B5DE8;
      *(_QWORD *)(v729 + 8) = 0;
      *(_QWORD *)(v729 + 36) = 1793;
      *(_DWORD *)(v729 + 44) = 0;
      *(_QWORD *)(v729 + 48) = v720;
      *(_WORD *)(v729 + 56) = 0;
      *(_BYTE *)(v729 + 58) = 3;
      *(_QWORD *)(v729 + 67) = 0;
      *(_QWORD *)(v729 + 59) = 0;
      *(_BYTE *)(v729 + 75) = 0;
      *(_QWORD *)(v729 + 132) = 0;
      *(_QWORD *)(v729 + 124) = 0;
      *(_WORD *)(v729 + 188) = 257;
      *(_QWORD *)(v729 + 192) = 0;
      *(_QWORD *)(v729 + 200) = 0;
      *(_BYTE *)(v729 + 208) = 0;
      v731 = *v730;
      *v730 = v729;
      if (v731)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v731 + 8))(v731);
        v729 = *v730;
      }
      *(_BYTE *)(v729 + 208) = 1;
      *(_BYTE *)(v729 + 58) = 3;
      *(_BYTE *)(v729 + 56) = v700;
      v699 += 2;
    }
    while (v699 != 6);
    v698 = 0;
    v696 = 1;
    *((_BYTE *)v784 + 1296) = 1;
    *((_BYTE *)v784 + 1146) = 3;
    *((_BYTE *)v784 + 1144) = 0;
    v697 = 1;
  }
  while ((v781 & 1) != 0);
  v732 = operator new(0xE8uLL);
  v732[1] = 0;
  v732[2] = 0;
  *v732 = &off_1E42E1B08;
  v733 = ggl::BufferData::BufferData((uint64_t)(v732 + 3), qword_1EE54D030, 2, 1, 6, 1);
  v732[28] = ggl::AnimatableTexture::Variant::reflection(void)::reflection;
  v732[3] = &off_1E42B9350;
  *((_QWORD *)v784 + 119) = v733;
  v734 = (std::__shared_weak_count *)*((_QWORD *)v784 + 120);
  *((_QWORD *)v784 + 120) = v732;
  if (v734)
  {
    v735 = (unint64_t *)&v734->__shared_owners_;
    do
      v736 = __ldaxr(v735);
    while (__stlxr(v736 - 1, v735));
    if (!v736)
    {
      ((void (*)(std::__shared_weak_count *))v734->__on_zero_shared)(v734);
      std::__shared_weak_count::__release_weak(v734);
    }
  }
  v737 = operator new();
  *(_BYTE *)v737 = 0;
  *(_QWORD *)(v737 + 12) = 0;
  *(_QWORD *)(v737 + 4) = 0;
  *(_BYTE *)(v737 + 20) = 0;
  *(_DWORD *)(v737 + 24) = 1065353216;
  *(_BYTE *)(v737 + 28) = 0;
  *(_DWORD *)(v737 + 32) = 0;
  v738 = *v779;
  *v779 = v737;
  if (v738)
  {
    MEMORY[0x1A1AF4E00](v738, 0x1000C4049ECCB0CLL);
    v737 = *v779;
  }
  *(_BYTE *)v737 = 8;
  *(_OWORD *)(v737 + 4) = xmmword_19FFB34C0;
  v739 = operator new();
  *(_BYTE *)v739 = 0;
  *(_QWORD *)(v739 + 12) = 0;
  *(_QWORD *)(v739 + 4) = 0;
  *(_BYTE *)(v739 + 20) = 0;
  *(_DWORD *)(v739 + 24) = 1065353216;
  *(_BYTE *)(v739 + 28) = 0;
  *(_DWORD *)(v739 + 32) = 0;
  v740 = *v778;
  *v778 = v739;
  if (v740)
  {
    MEMORY[0x1A1AF4E00](v740, 0x1000C4049ECCB0CLL);
    v739 = *v778;
  }
  *(_BYTE *)v739 = 8;
  *(_OWORD *)(v739 + 4) = xmmword_19FFB34C0;

  return v784;
}

void sub_19F282888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ggl::Texture *a10, _QWORD **a11, void *a12, uint64_t *a13, uint64_t *a14)
{
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  void (***v29)(void);
  void (**v30)(void);
  unint64_t v31;
  _QWORD **v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;

  v19 = (_QWORD *)v15[11];
  if (v19 == v16)
  {
    v20 = 4;
  }
  else
  {
    if (!v19)
    {
      v21 = *v14;
      if (*v14)
        goto LABEL_16;
      goto LABEL_5;
    }
    v20 = 5;
    v16 = (_QWORD *)v15[11];
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v20))(v16);
  v21 = *v14;
  if (*v14)
  {
LABEL_16:
    v15[5] = v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[7] + 40))(v15[7], v21, v15[6] - v21);
    v22 = *v15;
    if (!*v15)
    {
LABEL_7:
      v23 = *(unint64_t **)(v17 + 24);
      if (v23 == &STACK[0x2C8])
      {
        v24 = 4;
        v23 = &STACK[0x2C8];
      }
      else
      {
        if (!v23)
          goto LABEL_12;
        v24 = 5;
      }
      (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_12:
      v25 = *(unint64_t **)(v17 + 56);
      if (v25 == &STACK[0x2E8])
      {
        v26 = 4;
        v25 = &STACK[0x2E8];
      }
      else
      {
        if (!v25)
        {
LABEL_21:
          MEMORY[0x1A1AF4E00](v15, 0x10A0C40D234DDC7);
          ggl::Texture::~Texture(a10);
          v27 = *(_QWORD **)(STACK[0x250] + 1064);
          do
          {
            if (v27[1])
            {
              v28 = 0;
              v29 = (void (***)(void))(v27 + 2);
              do
              {
                v30 = *v29;
                v29 += 15;
                (*v30)();
                ++v28;
              }
              while (v28 < v27[1]);
            }
            v27[1] = 0;
            v27 = (_QWORD *)*v27;
          }
          while (v27);
          v31 = STACK[0x250];
          v32 = *(_QWORD ***)(STACK[0x250] + 1064);
          *(_QWORD *)(STACK[0x250] + 1072) = v32;
          v33 = *v32;
          *v32 = 0;
          if (v33)
          {
            do
            {
              v34 = (_QWORD *)*v33;
              free(v33);
              v33 = v34;
            }
            while (v34);
            v32 = *(_QWORD ***)(v31 + 1064);
          }
          free(v32);
          v35 = *(void **)(v31 + 1040);
          if (v35)
          {
            *(_QWORD *)(v31 + 1048) = v35;
            operator delete(v35);
            v36 = *(_QWORD *)(v31 + 1008);
            if (!v36)
            {
LABEL_32:
              v37 = *(void **)(v31 + 984);
              if (!v37)
                goto LABEL_33;
              goto LABEL_43;
            }
          }
          else
          {
            v36 = *(_QWORD *)(v31 + 1008);
            if (!v36)
              goto LABEL_32;
          }
          v39 = *(_QWORD *)(v31 + 1016);
          v40 = v36;
          if (v39 != v36)
          {
            v41 = *(_QWORD *)(v31 + 1016);
            do
            {
              v43 = *(void **)(v41 - 24);
              v41 -= 24;
              v42 = v43;
              if (v43)
              {
                *(_QWORD *)(v39 - 16) = v42;
                operator delete(v42);
              }
              v39 = v41;
            }
            while (v41 != v36);
            v40 = *(_QWORD *)(v31 + 1008);
          }
          *(_QWORD *)(v31 + 1016) = v36;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v31 + 1032) + 40))(*(_QWORD *)(v31 + 1032), v40, *(_QWORD *)(v31 + 1024) - v40);
          v37 = *(void **)(v31 + 984);
          if (!v37)
          {
LABEL_33:
            v38 = *(std::__shared_weak_count **)(v31 + 976);
            if (!v38)
              goto LABEL_48;
LABEL_44:
            p_shared_owners = (unint64_t *)&v38->__shared_owners_;
            do
              v45 = __ldaxr(p_shared_owners);
            while (__stlxr(v45 - 1, p_shared_owners));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
LABEL_48:
            v46 = *(std::__shared_weak_count **)(STACK[0x250] + 960);
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v49 = *a13;
            *a13 = 0;
            if (v49)
              MEMORY[0x1A1AF4E00](v49, 0x1000C4049ECCB0CLL);
            v50 = *a14;
            *a14 = 0;
            v51 = (_QWORD *)STACK[0x250];
            if (v50)
              MEMORY[0x1A1AF4E00](v50, 0x1000C4049ECCB0CLL);
            std::__tree<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::__map_value_compare<altitude::DebugRenderFeatureId,std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>,std::less<altitude::DebugRenderFeatureId>,true>,std::allocator<std::__value_type<altitude::DebugRenderFeatureId,std::unique_ptr<altitude::DebugRenderFeature>>>>::destroy(*a11);
            v52 = 105;
            while (1)
            {
              v53 = v51[v52];
              v51[v52] = 0;
              if (v53)
                (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
              if (--v52 == 33)
              {
                v54 = v51[30];
                if (v54)
                {
                  v55 = v51[31];
                  v56 = (void *)v51[30];
                  if (v55 != v54)
                  {
                    do
                    {
                      v57 = *(std::__shared_weak_count **)(v55 - 8);
                      if (v57)
                      {
                        v58 = (unint64_t *)&v57->__shared_owners_;
                        do
                          v59 = __ldaxr(v58);
                        while (__stlxr(v59 - 1, v58));
                        if (!v59)
                        {
                          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                          std::__shared_weak_count::__release_weak(v57);
                        }
                      }
                      v55 -= 16;
                    }
                    while (v55 != v54);
                    v51 = (_QWORD *)STACK[0x250];
                    v56 = *(void **)(STACK[0x250] + 240);
                  }
                  v51[31] = v54;
                  operator delete(v56);
                }
                v60 = v51[29];
                v51[29] = 0;
                if (v60)
                {
                  v61 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v60);
                  MEMORY[0x1A1AF4E00](v61, 0x10A0C40D234DDC7);
                }
                v62 = v51[28];
                v51[28] = 0;
                if (v62)
                {
                  v63 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v62);
                  MEMORY[0x1A1AF4E00](v63, 0x10A0C40D234DDC7);
                }
                v64 = v51[27];
                v51[27] = 0;
                if (v64)
                {
                  v65 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v64);
                  MEMORY[0x1A1AF4E00](v65, 0x10A0C40D234DDC7);
                }
                v66 = v51[26];
                v51[26] = 0;
                if (v66)
                {
                  v67 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v66);
                  MEMORY[0x1A1AF4E00](v67, 0x10A0C40D234DDC7);
                }
                v68 = v51[25];
                v51[25] = 0;
                if (v68)
                {
                  v69 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v68);
                  MEMORY[0x1A1AF4E00](v69, 0x10A0C40D234DDC7);
                }
                v70 = v51[24];
                v51[24] = 0;
                if (v70)
                {
                  v71 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v70);
                  MEMORY[0x1A1AF4E00](v71, 0x10A0C40D234DDC7);
                }
                v72 = v51[23];
                v51[23] = 0;
                if (v72)
                {
                  v73 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v72);
                  MEMORY[0x1A1AF4E00](v73, 0x10A0C40D234DDC7);
                }
                v74 = v51[22];
                v51[22] = 0;
                if (v74)
                {
                  v75 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v74);
                  MEMORY[0x1A1AF4E00](v75, 0x10A0C40D234DDC7);
                }
                v76 = (std::__shared_weak_count *)v51[21];
                if (v76)
                {
                  v77 = (unint64_t *)&v76->__shared_owners_;
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
                v79 = *(std::__shared_weak_count **)(STACK[0x250] + 152);
                if (v79)
                {
                  v80 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v81 = __ldaxr(v80);
                  while (__stlxr(v81 - 1, v80));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                    std::__shared_weak_count::__release_weak(v79);
                  }
                }
                v82 = *(std::__shared_weak_count **)(STACK[0x250] + 136);
                if (v82)
                {
                  v83 = (unint64_t *)&v82->__shared_owners_;
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                    std::__shared_weak_count::__release_weak(v82);
                  }
                }
                v85 = *(std::__shared_weak_count **)(STACK[0x250] + 120);
                if (v85)
                {
                  v86 = (unint64_t *)&v85->__shared_owners_;
                  do
                    v87 = __ldaxr(v86);
                  while (__stlxr(v87 - 1, v86));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                }
                v88 = *(std::__shared_weak_count **)(STACK[0x250] + 104);
                if (v88)
                {
                  v89 = (unint64_t *)&v88->__shared_owners_;
                  do
                    v90 = __ldaxr(v89);
                  while (__stlxr(v90 - 1, v89));
                  if (!v90)
                  {
                    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                    std::__shared_weak_count::__release_weak(v88);
                  }
                }
                v91 = *(std::__shared_weak_count **)(STACK[0x250] + 88);
                if (v91)
                {
                  v92 = (unint64_t *)&v91->__shared_owners_;
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
                v94 = *(std::__shared_weak_count **)(STACK[0x250] + 72);
                if (v94)
                {
                  v95 = (unint64_t *)&v94->__shared_owners_;
                  do
                    v96 = __ldaxr(v95);
                  while (__stlxr(v96 - 1, v95));
                  if (!v96)
                  {
                    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                    std::__shared_weak_count::__release_weak(v94);
                  }
                }
                v97 = *(std::__shared_weak_count **)(STACK[0x250] + 56);
                if (v97)
                {
                  v98 = (unint64_t *)&v97->__shared_owners_;
                  do
                    v99 = __ldaxr(v98);
                  while (__stlxr(v99 - 1, v98));
                  if (!v99)
                  {
                    ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                    std::__shared_weak_count::__release_weak(v97);
                  }
                }
                v100 = *(std::__shared_weak_count **)(STACK[0x250] + 40);
                if (v100)
                {
                  v101 = (unint64_t *)&v100->__shared_owners_;
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  if (!v102)
                  {
                    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                    std::__shared_weak_count::__release_weak(v100);
                  }
                }
                v103 = *(std::__shared_weak_count **)(STACK[0x250] + 24);
                if (v103)
                {
                  v104 = (unint64_t *)&v103->__shared_owners_;
                  do
                    v105 = __ldaxr(v104);
                  while (__stlxr(v105 - 1, v104));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                    std::__shared_weak_count::__release_weak(v103);
                  }
                }
                v106 = *(std::__shared_weak_count **)(STACK[0x250] + 8);
                if (v106)
                {
                  v107 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }

                _Unwind_Resume(a1);
              }
            }
          }
LABEL_43:
          *(_QWORD *)(v31 + 992) = v37;
          operator delete(v37);
          v38 = *(std::__shared_weak_count **)(v31 + 976);
          if (!v38)
            goto LABEL_48;
          goto LABEL_44;
        }
        v26 = 5;
      }
      (*(void (**)(void))(*v25 + 8 * v26))();
      goto LABEL_21;
    }
LABEL_6:
    v15[1] = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[3] + 40))(v15[3], v22, v15[2] - v22);
    goto LABEL_7;
  }
LABEL_5:
  v22 = *v15;
  if (!*v15)
    goto LABEL_7;
  goto LABEL_6;
}

unint64_t *ggl::FragmentedPool<ggl::PolygonFill::CompressedMeshPipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v48 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "GeoGL", 0xA3D02C1100000005);
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v7;
  a1[5] = 0;
  a1[6] = 0;
  {
    v49 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "GeoGL", 0xA3D02C1100000005);
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_6;
  if (v9 != a2)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_6:
    a1[11] = v9;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 8);
LABEL_8:
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
  {
LABEL_11:
    a1[15] = v10;
    goto LABEL_13;
  }
  if (v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  v11 = *a1;
  if (a1[2] - *a1 > 0x31F)
    goto LABEL_26;
  v12 = a1[1];
  v13 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 800, 8);
  v14 = v12 - v11;
  v15 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  v17 = *a1;
  v16 = a1[1];
  v18 = v16 - *a1;
  if (v16 == *a1)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  v19 = v18 - 8;
  if (v18 - 8 >= 0x58)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    if (v16 - (v14 & 0xFFFFFFFFFFFFFFF8) - v13 >= 0x20)
    {
      v21 = v14 >> 3;
      v22 = (v19 >> 3) + 1;
      v23 = (_OWORD *)(v13 + 8 * v21 - 16);
      v24 = (__int128 *)(v16 - 16);
      v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v20 = v15 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v16 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
    }
  }
  else
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v27 = *(_QWORD *)(v16 - 8);
    v16 -= 8;
    *(_QWORD *)(v20 - 8) = v27;
    v20 -= 8;
  }
  while (v16 != v17);
LABEL_23:
  v16 = *a1;
LABEL_24:
  *a1 = v20;
  a1[1] = v15;
  v28 = a1[2];
  a1[2] = v13 + 800;
  if (v16)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v16, v28 - v16);
LABEL_26:
  v29 = a1[4];
  if (a1[6] - v29 > 0x31F)
    return a1;
  v30 = a1[5];
  v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[7] + 16))(a1[7], 800, 8);
  v32 = v30 - v29;
  v33 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  v35 = a1[4];
  v34 = a1[5];
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  v37 = v36 - 8;
  if (v36 - 8 >= 0x58)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    if (v34 - (v32 & 0xFFFFFFFFFFFFFFF8) - v31 >= 0x20)
    {
      v39 = v32 >> 3;
      v40 = (v37 >> 3) + 1;
      v41 = (_OWORD *)(v31 + 8 * v39 - 16);
      v42 = (__int128 *)(v34 - 16);
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v38 = v33 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v34 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
  }
  else
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v45 = *(_QWORD *)(v34 - 8);
    v34 -= 8;
    *(_QWORD *)(v38 - 8) = v45;
    v38 -= 8;
  }
  while (v34 != v35);
LABEL_36:
  v34 = a1[4];
LABEL_37:
  a1[4] = v38;
  a1[5] = v33;
  v46 = a1[6];
  a1[6] = v31 + 800;
  if (v34)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[7] + 40))(a1[7], v34, v46 - v34);
  return a1;
}

void sub_19F283AE4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_QWORD *)v1[11];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
    {
      v7 = *v3;
      if (*v3)
        goto LABEL_9;
      goto LABEL_5;
    }
    v6 = 5;
    v2 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
  v7 = *v3;
  if (*v3)
  {
LABEL_9:
    v1[5] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[7] + 40))(v1[7], v7, v1[6] - v7);
    v8 = *v1;
    if (*v1)
    {
LABEL_10:
      v1[1] = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v8, v1[2] - v8);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v8 = *v1;
  if (*v1)
    goto LABEL_10;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_11PolygonFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6158;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21PolygonAnimatableFill27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6E48;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17PolygonStrokeMask17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6C08;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17HillshadeFillMask27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6BC0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_11PolygonFill17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6110;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_9>,ggl::HillshadeFillMask::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1288;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_8>,ggl::PolygonFill::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1240;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::PolygonAnimatableFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D11F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D11B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1168;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,void ()(ggl::PolygonAnimatableStroke::MeshPipelineSetup *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1120;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::PolygonAnimatableStroke::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D10D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,void ()(ggl::PolygonStroke::MeshPipelineSetup *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1048;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::PolygonStroke::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1000;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::PolygonRenderResources::PolygonRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::PolygonStrokeMask::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1090;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0,std::allocator<md::CoastLineRenderResources::CoastLineRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_0>,ggl::PolygonFill::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1E58;
  a2[1] = v2;
  return result;
}

void _registerStateCaptureCallbacks()
{
  if (_registerStateCaptureCallbacks_onceToken[0] != -1)
    dispatch_once(_registerStateCaptureCallbacks_onceToken, &__block_literal_global_4_0);
}

BOOL geo::codec::decompressBinaryBlob(_DWORD *a1, unsigned int a2, uint64_t *a3, uint64_t *a4, int **a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  gcl::tmesh::DecoderImpl *v17;
  int16x8_t v18;
  _BOOL8 v19;
  gcl::tmesh::DecoderImpl *v20;
  uint64_t v22;
  int16x8_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  unint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  int v34;
  geo::codec::Allocator *AttributeInfo;
  char v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  geo::codec::Allocator *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  geo::codec::Allocator *v47;
  geo::codec::Allocator *v48;
  uint64_t v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  geo::codec::Allocator *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int **v66;
  unint64_t v67;
  BOOL *v68;
  unint64_t v69;
  int v70;
  int v71;
  char v72;
  int v73;
  unint64_t v74;
  uint64_t *v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v12 = *a6;
  for (i = a6[1]; i != v12; i -= 72)
  {
    v14 = *(_QWORD *)(i - 32);
    if (v14)
    {
      *(_QWORD *)(i - 24) = v14;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), v14, *(_QWORD *)(i - 16) - v14);
    }
    v15 = *(_QWORD *)(i - 64);
    if (v15)
    {
      *(_QWORD *)(i - 56) = v15;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 40) + 40))(*(_QWORD *)(i - 40), v15, *(_QWORD *)(i - 48) - v15);
    }
  }
  a6[1] = v12;
  v16 = (uint64_t *)operator new();
  v17 = (gcl::tmesh::DecoderImpl *)operator new();
  gcl::tmesh::DecoderImpl::DecoderImpl(v17);
  *v16 = (uint64_t)v17;
  v75 = v16;
  *(_QWORD *)&v76 = 0xEEB6CC7FFAA28E71;
  if (gcl::hls::checkBitstream(a1, a2, &v76, 2)
    || (v76 = 0uLL,
        BYTE8(v77) = 0,
        *(_QWORD *)&v77 = 0,
        !gcl::tmesh::DecoderImpl::parsePositionsAndConnectivityInfo((uint64_t)a1, a2, (uint64_t)&v76, v18))
    || v22 < 0)
  {
    v19 = 0;
    goto LABEL_10;
  }
  v24 = (int)v77;
  v25 = BYTE8(v77);
  v26 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2);
  if (SHIDWORD(v76) <= v26)
  {
    if (SHIDWORD(v76) < v26)
      a3[1] = *a3 + 12 * SHIDWORD(v76);
  }
  else
  {
    std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::__append((uint64_t)a3, SHIDWORD(v76) - v26);
  }
  v27 = *a4;
  v28 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 2);
  if (v24 <= v28)
  {
    if (v24 < v28)
      a4[1] = v27 + 12 * (int)v24;
  }
  else
  {
    std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::__append((uint64_t)a4, v24 - v28);
    v27 = *a4;
  }
  v29 = *a3;
  if (v25)
  {
    v30 = *a5;
    v31 = a5[1] - *a5;
    if (v24 <= v31)
    {
      if (v24 < v31)
        a5[1] = &v30[v24];
    }
    else
    {
      std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append((uint64_t)a5, v24 - v31);
      v30 = *a5;
    }
  }
  else
  {
    v30 = 0;
  }
  v74 = 0;
  if (gcl::tmesh::DecoderImpl::decompressPositionsAndConnectivity(*v16, (unint64_t)a1, a2, &v74, v29, v27, v30, v23))
  {
LABEL_31:
    v19 = 0;
    v16 = v75;
    if (!v75)
      return v19;
    goto LABEL_10;
  }
  if (v74 < a2)
  {
    if (a2 >= v74)
      v32 = a2 - v74;
    else
      v32 = 0;
    v33 = (_DWORD *)((char *)a1 + v74);
    while (1)
    {
      *(_QWORD *)&v76 = 0xEEB6CC7FFAA28E71;
      v34 = gcl::hls::checkBitstream(v33, v32, &v76, 2);
      v19 = v34 == 0;
      if (v34)
        goto LABEL_89;
      v78 = 0;
      v76 = 0u;
      v77 = 0u;
      AttributeInfo = (geo::codec::Allocator *)gcl::tmesh::Decoder::getAttributeInfo((uint64_t)v33, v32, (uint64_t)&v76);
      if ((_DWORD)AttributeInfo)
        goto LABEL_31;
      if ((HIDWORD(v77) - 1) >= 0x12)
      {
        v36 = 0;
        v37 = v77;
        v38 = (int)v77 * (uint64_t)SHIDWORD(v76);
        if (!(_DWORD)v38)
          goto LABEL_38;
      }
      else
      {
        v36 = byte_1A0087303[HIDWORD(v77) - 1];
        v37 = v77;
        v38 = (int)v77 * (uint64_t)SHIDWORD(v76);
        if (!(_DWORD)v38)
          goto LABEL_38;
      }
      *(_QWORD *)&v76 = 0;
      v40 = a6[1];
      v39 = a6[2];
      v73 = v78;
      if (v40 < v39)
      {
        if (v40)
        {
          *(_QWORD *)(v40 + 64) = 0;
          *(_OWORD *)(v40 + 32) = 0u;
          *(_OWORD *)(v40 + 48) = 0u;
          *(_OWORD *)v40 = 0u;
          *(_OWORD *)(v40 + 16) = 0u;
          v41 = (geo::codec::Allocator *)geo::codec::Allocator::instance(AttributeInfo);
          *(_QWORD *)(v40 + 32) = v41;
          *(_QWORD *)(v40 + 40) = 0;
          *(_QWORD *)(v40 + 48) = 0;
          *(_QWORD *)(v40 + 56) = 0;
          *(_QWORD *)(v40 + 64) = geo::codec::Allocator::instance(v41);
        }
        v42 = v40 + 72;
        goto LABEL_71;
      }
      v72 = v36;
      v43 = 0x8E38E38E38E38E39 * ((uint64_t)(v40 - *a6) >> 3);
      v44 = v43 + 1;
      if (v43 + 1 > 0x38E38E38E38E38ELL)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v45 = 0x8E38E38E38E38E39 * ((uint64_t)(v39 - *a6) >> 3);
      if (2 * v45 > v44)
        v44 = 2 * v45;
      if (v45 >= 0x1C71C71C71C71C7)
        v46 = 0x38E38E38E38E38ELL;
      else
        v46 = v44;
      if (v46)
      {
        v47 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6[3] + 16))(a6[3], 72 * v46, 8);
        v48 = v47;
        v49 = (uint64_t)v47 + 72 * v43;
        v50 = (char *)v47 + 72 * v46;
        if (v47)
        {
          v71 = v37;
          v51 = v33;
          v52 = (char *)v47 + 72 * v46;
          *(_QWORD *)(v49 + 64) = 0;
          *(_OWORD *)(v49 + 32) = 0u;
          *(_OWORD *)(v49 + 48) = 0u;
          *(_OWORD *)v49 = 0u;
          *(_OWORD *)(v49 + 16) = 0u;
          v53 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v47);
          v54 = (_QWORD *)((char *)v48 + 72 * v43);
          v54[4] = v53;
          v54[5] = 0;
          v54[6] = 0;
          v54[7] = 0;
          v54[8] = geo::codec::Allocator::instance(v53);
          v36 = v72;
          v50 = v52;
          v33 = v51;
          v37 = v71;
          v42 = v49 + 72;
          v55 = *a6;
          v56 = a6[1];
          if (v56 == *a6)
            goto LABEL_70;
        }
        else
        {
          v36 = v72;
          v42 = v49 + 72;
          v55 = *a6;
          v56 = a6[1];
          if (v56 == *a6)
          {
LABEL_70:
            *a6 = v49;
            a6[1] = v42;
            v62 = a6[2];
            a6[2] = (uint64_t)v50;
            if (!v56)
              goto LABEL_71;
            goto LABEL_68;
          }
        }
      }
      else
      {
        v50 = 0;
        v49 = 8 * ((uint64_t)(v40 - *a6) >> 3);
        v36 = v72;
        v42 = v49 + 72;
        v55 = *a6;
        v56 = a6[1];
        if (v56 == *a6)
          goto LABEL_70;
      }
      v57 = 0;
      do
      {
        v58 = v49 + v57;
        v59 = v56 + v57;
        v60 = *(_QWORD *)(v56 + v57 - 72);
        *(_QWORD *)(v58 - 56) = 0;
        *(_QWORD *)(v58 - 48) = 0;
        *(_QWORD *)(v58 - 72) = v60;
        *(_QWORD *)(v58 - 64) = 0;
        *(_QWORD *)(v58 - 40) = *(_QWORD *)(v56 + v57 - 40);
        *(_OWORD *)(v58 - 64) = *(_OWORD *)(v56 + v57 - 64);
        *(_QWORD *)(v58 - 48) = *(_QWORD *)(v56 + v57 - 48);
        *(_QWORD *)(v59 - 64) = 0;
        *(_QWORD *)(v59 - 56) = 0;
        *(_QWORD *)(v59 - 48) = 0;
        *(_QWORD *)(v58 - 32) = 0;
        *(_QWORD *)(v58 - 24) = 0;
        *(_QWORD *)(v58 - 16) = 0;
        *(_QWORD *)(v58 - 8) = *(_QWORD *)(v56 + v57 - 8);
        *(_OWORD *)(v58 - 32) = *(_OWORD *)(v56 + v57 - 32);
        *(_QWORD *)(v58 - 16) = *(_QWORD *)(v56 + v57 - 16);
        *(_QWORD *)(v59 - 32) = 0;
        *(_QWORD *)(v59 - 24) = 0;
        *(_QWORD *)(v59 - 16) = 0;
        v57 -= 72;
      }
      while (v56 + v57 != v55);
      v56 = *a6;
      v61 = a6[1];
      *a6 = v49 + v57;
      a6[1] = v42;
      v62 = a6[2];
      a6[2] = (uint64_t)v50;
      while (v61 != v56)
      {
        v63 = *(_QWORD *)(v61 - 32);
        if (v63)
        {
          *(_QWORD *)(v61 - 24) = v63;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v61 - 8) + 40))(*(_QWORD *)(v61 - 8), v63, *(_QWORD *)(v61 - 16) - v63);
        }
        v64 = *(_QWORD *)(v61 - 64);
        if (v64)
        {
          *(_QWORD *)(v61 - 56) = v64;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v61 - 40) + 40))(*(_QWORD *)(v61 - 40), v64, *(_QWORD *)(v61 - 48) - v64);
        }
        v61 -= 72;
      }
      v36 = v72;
      if (!v56)
        goto LABEL_71;
LABEL_68:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6[3] + 40))(a6[3], v56, v62 - v56);
LABEL_71:
      a6[1] = v42;
      *(_DWORD *)(v42 - 68) = v37;
      v66 = (int **)(v42 - 64);
      v65 = *(_QWORD *)(v42 - 64);
      v67 = (*(_QWORD *)(v42 - 56) - v65) >> 2;
      if (v38 <= v67)
      {
        if (v38 < v67)
          *(_QWORD *)(v42 - 56) = v65 + 4 * v38;
      }
      else
      {
        std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append(v42 - 64, v38 - v67);
      }
      *(_BYTE *)(v42 - 72) = v36;
      if (v73 == 1)
      {
        v68 = *(BOOL **)(v42 - 32);
        v69 = *(_QWORD *)(v42 - 24) - (_QWORD)v68;
        if (v38 <= v69)
        {
          if (v38 < v69)
            *(_QWORD *)(v42 - 24) = &v68[v38];
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__append(v42 - 32, v38 - v69);
          v68 = *(BOOL **)(v42 - 32);
        }
        v70 = gcl::tmesh::DecoderImpl::decompressVertexAttributes(*v75, (unint64_t)v33, v32, &v76, *v66, v68);
      }
      else
      {
        v70 = gcl::tmesh::DecoderImpl::decompressVertexAttributes(*v75, (unint64_t)v33, v32, &v76, *v66, 0);
      }
      if (v70)
        goto LABEL_31;
      v33 = (_DWORD *)((char *)v33 + v76);
      if (v32 >= (unint64_t)v76)
        v32 -= v76;
      else
        v32 = 0;
LABEL_38:
      if (!v32)
        goto LABEL_89;
    }
  }
  v19 = 1;
LABEL_89:
  v16 = v75;
  if (v75)
  {
LABEL_10:
    v20 = (gcl::tmesh::DecoderImpl *)*v16;
    *v16 = 0;
    if (v20)
    {
      gcl::tmesh::DecoderImpl::~DecoderImpl(v20);
      MEMORY[0x1A1AF4E00]();
    }
    MEMORY[0x1A1AF4E00](v16, 0x20C4093837F09);
  }
  return v19;
}

void sub_19F284434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t gcl::hls::checkBitstream(_DWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  unint64_t i;
  int v12;

  if (!a1 || a2 < 0 || (unint64_t)a2 < 4)
    return 3;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4 || (unint64_t)a2 < 0x10 || a1 == (_DWORD *)-16 || !a4)
    return 3;
  v4 = (unsigned __int8 *)(a1 + 2);
  v5 = 4 * a4;
  v6 = a1[3];
  while (*a3 != *a1)
  {
    ++a3;
    v5 -= 4;
    if (!v5)
      return 3;
  }
  v8 = 16;
  if (a2 > 16)
    v8 = a2;
  v9 = (a2 & (unint64_t)~(a2 >> 63)) - v8 + 16 > v6 || a2 < (uint64_t)v6;
  if (v9 || a1 == (_DWORD *)-8 || (unsigned __int8 *)((char *)a1 + v6) < v4)
    return 3;
  v10 = -1;
  for (i = v6 - 8; i; --i)
  {
    v12 = *v4++;
    v10 = __const__ZN3gcl12computeCRC32EPKhm_table[v12 ^ HIBYTE(v10)] ^ (v10 << 8);
  }
  if (a1[1] == v10)
    return 0;
  else
    return 3;
}

uint64_t std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) >= a2)
  {
    *(_QWORD *)(result + 8) = v4 + 12 * (12 * a2 / 0xC);
  }
  else
  {
    v6 = *(_QWORD *)result;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 12 * v10, 4);
      v6 = *(_QWORD *)v3;
      v4 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      result = 0;
    }
    v11 = result + 12 * v7;
    v12 = v11 + 12 * (12 * a2 / 0xC);
    if (v4 != v6)
    {
      do
      {
        v13 = *(_QWORD *)(v4 - 12);
        v4 -= 12;
        v14 = *(_DWORD *)(v4 + 8);
        *(_QWORD *)(v11 - 12) = v13;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v14;
      }
      while (v4 != v6);
      v6 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = v12;
    v15 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v10;
    if (v6)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v6, v15 - v6);
  }
  return result;
}

uint64_t gcl::tmesh::DecoderImpl::parsePositionsAndConnectivityInfo(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t a4)
{
  unint64_t v4;
  int v6;
  char v7;
  char v8;
  __int16 v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;

  if (a2 < 4)
    return 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4
    || a2 == 8
    || a2 == 9
    || (a2 & 0xFFFFFFFFFFFFFFFELL) == 0xA
    || v4 == 12
    || v4 == 16
    || v4 == 20
    || a2 == 24
    || a2 == 25
    || a2 == 26
    || a2 == 27)
  {
    return 0;
  }
  if ((unint64_t)a2 < 0x20)
    return 0;
  if (*(_DWORD *)a1 != -90009999)
    return 0;
  v6 = *(_DWORD *)(a1 + 4);
  v7 = *(_BYTE *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 9);
  v9 = *(_WORD *)(a1 + 10);
  v10 = *(_DWORD *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
  v12 = *(_DWORD *)(a1 + 20) & 0x7FFFFFFF;
  v13 = *(unsigned __int8 *)(a1 + 24);
  v14 = *(unsigned __int8 *)(a1 + 25);
  v15 = *(unsigned __int8 *)(a1 + 26);
  v16 = *(unsigned __int8 *)(a1 + 27);
  *(uint16x4_t *)a4.i8 = vshl_u16((uint16x4_t)vdup_n_s16(v15), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL);
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 4) = v7;
  *(_BYTE *)(a3 + 5) = v8;
  *(_WORD *)(a3 + 6) = v9;
  *(_DWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 12) = v11;
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = v16;
  *(_BYTE *)(a3 + 24) = v15 & 1;
  *(_DWORD *)(a3 + 28) = v6;
  *(_DWORD *)(a3 + 32) = v13;
  *(_DWORD *)(a3 + 36) = v14;
  a4.i32[0] &= 0xFF01FF01;
  a4.i16[2] &= 0xFF01u;
  a4.i16[3] &= 0xFF01u;
  *(_DWORD *)(a3 + 40) = vmovn_s16(a4).u32[0];
  *(_BYTE *)(a3 + 44) = (v15 & 0x20) != 0;
  return a1 + 32;
}

uint64_t std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v3 = result;
  v4 = *(_DWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 2)
  {
    if (a2)
    {
      v11 = 4 * a2;
      v12 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        v11 -= 4;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)result;
    v7 = v6 >> 2;
    v8 = (v6 >> 2) + a2;
    if (v8 >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)result;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * v10, 4);
    else
      result = 0;
    v13 = (_DWORD *)(result + 4 * v7);
    v14 = 4 * a2;
    v15 = &v13[a2];
    v16 = v13;
    do
    {
      if (v16)
        *v16 = 0;
      ++v16;
      v14 -= 4;
    }
    while (v14);
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)(v3 + 8);
    if (v18 != *(_QWORD *)v3)
    {
      v19 = v18 - *(_QWORD *)v3 - 4;
      if (v19 < 0x2C)
        goto LABEL_35;
      if ((unint64_t)(v18 - (v6 + result)) < 0x20)
        goto LABEL_35;
      v20 = (v19 >> 2) + 1;
      v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      v22 = v18 - v21;
      v13 = (_DWORD *)((char *)v13 - v21);
      v23 = (_OWORD *)(result + 4 * v7 - 16);
      v24 = (__int128 *)(v18 - 16);
      v25 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 8;
      }
      while (v25);
      v18 = v22;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_35:
        do
        {
          v27 = *(_DWORD *)(v18 - 4);
          v18 -= 4;
          *--v13 = v27;
        }
        while (v18 != v17);
      }
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v15;
    v28 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 4 * v10;
    if (v17)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v28 - v17);
  }
  return result;
}

uint64_t gcl::tmesh::Decoder::getAttributeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (a2 < 4)
    return 3;
  result = 3;
  if (a2 != 8)
  {
    v5 = a2 & 0x7FFFFFFFFFFFFFFCLL;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 4
      && a2 != 9
      && (a2 & 0xFFFFFFFFFFFFFFFELL) != 0xA
      && v5 != 12
      && v5 != 16
      && (unint64_t)(a2 - 20) >= 5
      && (unint64_t)a2 >= 0x1C
      && a1 != -32
      && (unint64_t)a2 >= 0x20
      && *(_DWORD *)a1 == -290009985)
    {
      result = 0;
      v6 = *(_BYTE *)(a1 + 8);
      v7 = *(_BYTE *)(a1 + 9);
      v8 = *(_WORD *)(a1 + 10);
      v9 = *(_DWORD *)(a1 + 12);
      v10 = *(_DWORD *)(a1 + 16);
      v11 = *(unsigned __int8 *)(a1 + 20);
      v12 = *(unsigned __int8 *)(a1 + 21);
      v13 = *(unsigned __int8 *)(a1 + 22);
      v14 = *(unsigned __int8 *)(a1 + 26);
      v15 = *(unsigned __int8 *)(a1 + 27);
      *(_BYTE *)(a3 + 4) = v6;
      *(_DWORD *)a3 = 0;
      *(_BYTE *)(a3 + 5) = v7;
      *(_WORD *)(a3 + 6) = v8;
      *(_DWORD *)(a3 + 8) = v9;
      *(_DWORD *)(a3 + 12) = v10 & 0x7FFFFFFF;
      *(_DWORD *)(a3 + 16) = v13;
      *(_DWORD *)(a3 + 20) = v12;
      *(_DWORD *)(a3 + 24) = v15;
      *(_DWORD *)(a3 + 28) = v11;
      *(_DWORD *)(a3 + 32) = v14;
    }
  }
  return result;
}

uint64_t gcl::tmesh::DecoderImpl::decompressPositionsAndConnectivity(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, int *a7, int16x8_t a8)
{
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t result;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned __int8 *inited;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  int v56;
  _DWORD *v57;

  *(_DWORD *)(a1 + 3872) = 0;
  if (!a5 || !a6)
    goto LABEL_59;
  v15 = (_DWORD *)gcl::tmesh::DecoderImpl::parsePositionsAndConnectivityInfo(a2, a3, a1 + 3776, a8);
  if (!v15)
    goto LABEL_16;
  if (v16 < 0)
    goto LABEL_16;
  v17 = *(unsigned int *)(a1 + 3784);
  if (a3 - v17 < 0)
    goto LABEL_16;
  if (!a2)
    goto LABEL_16;
  if ((unint64_t)v15 + v16 < a2)
    goto LABEL_16;
  v18 = a2 + v17;
  if (v18 < (unint64_t)v15)
    goto LABEL_16;
  v19 = v18 - (_QWORD)v15;
  if (v19 < 0)
    goto LABEL_16;
  if (*(_BYTE *)(a1 + 3780)
    || (v20 = *(_BYTE *)(a1 + 3781), (v20 & 0xFC) != 4)
    || (v21 = *(_DWORD *)(a1 + 3808), (v20 & 0xFE) == 4) && (v21 | 4) != 4 && *(_BYTE *)(a1 + 3800))
  {
    result = 4;
    goto LABEL_60;
  }
  if ((*(_DWORD *)(a1 + 3812) - 3) < 2 || (v21 | 2) == 3)
  {
LABEL_16:
    result = 3;
LABEL_60:
    *(_DWORD *)(a1 + 3872) = result;
    return result;
  }
  if ((unint64_t)v19 >= 4)
  {
    v24 = *v15;
    if ((v19 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    {
      v23 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = *(unsigned __int8 *)(a1 + 3820);
      if (!*(_BYTE *)(a1 + 3820))
        goto LABEL_21;
    }
    else
    {
      v23 = v15[1];
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) == 8)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v28 = *(unsigned __int8 *)(a1 + 3820);
        if (!*(_BYTE *)(a1 + 3820))
          goto LABEL_21;
      }
      else
      {
        v26 = v19 - 12;
        v27 = (unsigned __int8 *)(v15 + 3);
        v25 = v15[2];
        v28 = *(unsigned __int8 *)(a1 + 3820);
        if (!*(_BYTE *)(a1 + 3820))
          goto LABEL_21;
      }
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = *(unsigned __int8 *)(a1 + 3820);
    if (!*(_BYTE *)(a1 + 3820))
    {
LABEL_21:
      v29 = 0;
      v30 = 0;
      goto LABEL_36;
    }
  }
  if (v26)
  {
    v28 = *v27;
    if (v26 == 1)
    {
      v29 = 0;
    }
    else
    {
      v29 = v27[1];
      if (v26 != 2)
      {
        v26 -= 3;
        v30 = v27[2];
        v27 += 3;
        goto LABEL_36;
      }
    }
    v30 = 0;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v29 = 0;
    v28 = 0;
    v30 = 0;
    v27 = 0;
  }
LABEL_36:
  if (!v27)
    goto LABEL_16;
  v31 = (int)v28 <= (int)v29 ? v29 : v28;
  v32 = v28 <= v29 ? v29 : v28;
  v33 = v31 >= v30 ? v32 : v30;
  if (v33 >= 0x1D)
    goto LABEL_16;
  *(_DWORD *)(a1 + 2688) = v28;
  *(_DWORD *)(a1 + 2692) = v29;
  *(_DWORD *)(a1 + 2696) = v30;
  gcl::tmesh::DecoderImpl::init((gcl::tmesh::DecoderImpl *)a1, *(_DWORD *)(a1 + 3788), *(_DWORD *)(a1 + 3792));
  inited = gcl::tmesh::DecoderImpl::initArithmeticDecoder(a1, v27, v26);
  if (!inited)
    goto LABEL_16;
  v36 = v35;
  if (v35 < 0)
    goto LABEL_16;
  v37 = inited;
  v38 = a6;
  if (*(_BYTE *)(a1 + 3800))
    v38 = *(_QWORD *)(a1 + 128);
  v39 = *(_QWORD *)(a1 + 104);
  if (*(_BYTE *)(a1 + 3816))
    gcl::tmesh::DecoderImpl::decompressAdaptiveTraversal((_DWORD *)a1, v39, v38);
  else
    gcl::tmesh::DecoderImpl::decompress(a1, v39, v38);
  if (!*(_BYTE *)(a1 + 3800))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 56), 2uLL);
    v41 = *(_DWORD **)(a1 + 56);
    *v41 = 0;
    v41[1] = *(_DWORD *)(a1 + 3792);
    goto LABEL_63;
  }
  if (!a7)
  {
LABEL_59:
    result = 5;
    goto LABEL_60;
  }
  if (!gcl::tmesh::DecoderImpl::initArithmeticDecoder(a1, v37, v36) || v40 < 0)
    goto LABEL_16;
  gcl::tmesh::DecoderImpl::decompressTriangleOrder((gcl::tmesh::DecoderImpl *)a1, a7);
  gcl::tmesh::DecoderImpl::updateMappingInformation((std::vector<int> *)a1, a7, a6);
LABEL_63:
  result = *(unsigned int *)(a1 + 3872);
  if (!(_DWORD)result)
  {
    if (*(int *)(a1 + 3792) >= 1)
    {
      v42 = 0;
      v43 = 0;
      do
      {
        v44 = *(_QWORD *)(a1 + 128) + v42;
        v45 = *(_QWORD *)(a6 + v42);
        *(_DWORD *)(v44 + 8) = *(_DWORD *)(a6 + v42 + 8);
        *(_QWORD *)v44 = v45;
        ++v43;
        v42 += 12;
      }
      while (v43 < *(int *)(a1 + 3792));
    }
    v46 = *(_DWORD *)(a1 + 3788);
    if (v24 || v23 || v25)
    {
      if (v46 >= 1)
      {
        v52 = 0;
        v53 = 0;
        do
        {
          v54 = (_DWORD *)(*(_QWORD *)(a1 + 104) + v52);
          v55 = *v54 + v24;
          v56 = v54[1] + v23;
          LODWORD(v54) = v54[2] + v25;
          v57 = (_DWORD *)(a5 + v52);
          *v57 = v55;
          v57[1] = v56;
          v57[2] = (_DWORD)v54;
          ++v53;
          v52 += 12;
        }
        while (v53 < *(int *)(a1 + 3788));
      }
    }
    else if (v46 >= 1)
    {
      v47 = 0;
      v48 = 0;
      do
      {
        v49 = (uint64_t *)(*(_QWORD *)(a1 + 104) + v47);
        v50 = a5 + v47;
        v51 = *v49;
        *(_DWORD *)(v50 + 8) = *((_DWORD *)v49 + 2);
        *(_QWORD *)v50 = v51;
        ++v48;
        v47 += 12;
      }
      while (v48 < *(int *)(a1 + 3788));
    }
    result = 0;
    *a4 = *(unsigned int *)(a1 + 3784);
  }
  return result;
}

uint64_t gcl::tmesh::DecoderImpl::decompressVertexAttributes(uint64_t a1, unint64_t a2, unint64_t a3, _QWORD *a4, int *a5, BOOL *a6)
{
  uint64_t result;
  unint64_t v8;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  std::vector<int>::size_type v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int *v23;
  uint64_t v24;
  std::vector<int>::size_type v25;
  std::vector<int>::pointer begin;
  std::vector<int>::size_type v27;
  int v28;
  BOOL v29;
  int v30;
  int32x4_t **v31;
  uint64_t v32;
  int32x4_t *v33;
  __int32 v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  uint64_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int *v61;
  int32x4_t *v62;
  uint64_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  std::vector<int>::size_type v69;
  uint64_t v70;
  __int32 *v71;
  int *v72;
  int v73;
  int v74;
  unsigned __int8 *inited;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  std::vector<int>::pointer v80;
  int *v81;
  uint64_t v82;
  std::vector<int>::pointer v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int *v87;
  BOOL v88;
  uint64_t v89;
  int32x4_t *v90;
  int32x4_t *v91;
  int32x4_t v92;
  uint64_t v93;
  std::vector<int>::size_type v94;
  int *v95;
  int v96;
  uint64_t v98;
  std::vector<int> v100;

  if (*(_DWORD *)(a1 + 3872))
    return 6;
  if (!a2)
    return 5;
  result = 5;
  if ((a3 & 0x8000000000000000) == 0 && a5)
  {
    if (a3 < 4)
      return 3;
    v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    if ((a3 & 0xFFFFFFFFFFFFFFFCLL) == 4
      || a3 == 8
      || a3 == 9
      || (a3 & 0xFFFFFFFFFFFFFFFELL) == 0xA
      || v8 == 12
      || v8 == 16)
    {
      return 3;
    }
    result = 3;
    if (a3 - 20 >= 5 && a3 >= 0x20 && *(_DWORD *)a2 == -290009985)
    {
      v10 = *(_DWORD *)(a2 + 4);
      v11 = *(unsigned __int8 *)(a2 + 8);
      v12 = *(unsigned __int8 *)(a2 + 9);
      v13 = *(_WORD *)(a2 + 10);
      v14 = *(unsigned int *)(a2 + 12);
      v15 = *(_DWORD *)(a2 + 16) & 0x7FFFFFFF;
      v16 = *(unsigned __int8 *)(a2 + 20);
      v17 = *(unsigned __int8 *)(a2 + 21);
      v18 = *(unsigned __int8 *)(a2 + 22);
      v19 = *(unsigned __int8 *)(a2 + 23);
      v20 = *(unsigned __int8 *)(a2 + 24);
      v21 = *(unsigned __int8 *)(a2 + 26);
      v22 = *(unsigned __int8 *)(a2 + 27);
      *(_DWORD *)(a1 + 3824) = 0;
      *(_BYTE *)(a1 + 3828) = v11;
      *(_BYTE *)(a1 + 3829) = v12;
      *(_WORD *)(a1 + 3830) = v13;
      *(_DWORD *)(a1 + 3832) = v14;
      *(_DWORD *)(a1 + 3836) = v15;
      *(_DWORD *)(a1 + 3840) = v18;
      *(_DWORD *)(a1 + 3844) = v17;
      *(_DWORD *)(a1 + 3848) = v22;
      *(_DWORD *)(a1 + 3852) = v16;
      *(_DWORD *)(a1 + 3856) = v21;
      *(_DWORD *)(a1 + 3860) = v10;
      *(_DWORD *)(a1 + 3864) = v19;
      v98 = a1;
      *(_DWORD *)(a1 + 3868) = v20;
      v23 = (int *)(a2 + 32);
      if (a2 == -32 || a3 < v14 || a2 + a3 < a2)
        return 3;
      result = 3;
      if (a2 + v14 >= (unint64_t)v23 && v14 >= 0x20)
      {
        if (v11)
          return 4;
        result = 4;
        if ((v12 - 5) <= 2)
        {
          if (v15 == *(_DWORD *)(a1 + 3788) && (a6 || !v21))
          {
            v24 = v14 - 32;
            if ((v20 - 5) > 1)
            {
              if (v22 <= 0x1B)
              {
                std::vector<int>::vector(&v100, v18);
                v25 = v18;
                if (!(_DWORD)v18)
                {
                  v30 = 0;
                  v25 = 0;
                  goto LABEL_42;
                }
LABEL_36:
                begin = v100.__begin_;
                v27 = v18;
                do
                {
                  while (1)
                  {
                    v29 = v24 < 4;
                    v24 -= 4;
                    if (v29)
                      break;
                    v28 = *v23++;
                    *begin++ = v28;
                    if (!--v27)
                      goto LABEL_41;
                  }
                  v24 = 0;
                  v23 = 0;
                  ++begin;
                  --v27;
                }
                while (v27);
LABEL_41:
                v30 = 1;
LABEL_42:
                v31 = (int32x4_t **)(v98 + 2664);
                std::vector<int>::resize((std::vector<int> *)(v98 + 2664), v25);
                if (!v30)
                {
                  if (v23)
                  {
                    v36 = 0;
LABEL_71:
                    inited = gcl::tmesh::DecoderImpl::initArithmeticDecoder(v98, v23, v24);
                    v77 = 3;
                    if (inited && (v76 & 0x8000000000000000) == 0)
                    {
                      gcl::tmesh::DecoderImpl::decodeVertexAttributesAC((gcl::tmesh::DecoderImpl *)v98, a5, a6);
                      if ((v36 & 1) != 0 && *(int *)(v98 + 3788) >= 1 && v30)
                      {
                        LODWORD(v78) = 0;
                        v79 = 0;
                        v80 = v100.__begin_;
                        v81 = &v100.__begin_[v18];
                        v82 = v18 & 0xF8;
                        v83 = v100.__begin_ + 4;
                        do
                        {
                          v84 = (int)v78;
                          if (v18 >= 8
                            && ((v85 = (int)v78, v86 = &a5[v85], v87 = &a5[v18 + v85], v86 < v81)
                              ? (v88 = v80 >= v87)
                              : (v88 = 1),
                                v88))
                          {
                            v78 = v84 + v82;
                            v89 = v18 & 0xF8;
                            v90 = (int32x4_t *)v83;
                            v91 = (int32x4_t *)&a5[v84 + 4];
                            do
                            {
                              v92 = vaddq_s32(*v91, *v90);
                              v91[-1] = vaddq_s32(v91[-1], v90[-1]);
                              *v91 = v92;
                              v90 += 2;
                              v91 += 2;
                              v89 -= 8;
                            }
                            while (v89);
                            v93 = v18 & 0xF8;
                            if (v82 == v18)
                              goto LABEL_77;
                          }
                          else
                          {
                            v93 = 0;
                            v78 = v84;
                          }
                          v94 = v18 - v93;
                          v95 = &v80[v93];
                          do
                          {
                            v96 = *v95++;
                            a5[v78++] += v96;
                            --v94;
                          }
                          while (v94);
LABEL_77:
                          ++v79;
                        }
                        while (v79 < *(_DWORD *)(v98 + 3788));
                      }
                      v77 = 0;
                      *a4 = *(unsigned int *)(v98 + 3832);
                    }
                    goto LABEL_94;
                  }
LABEL_92:
                  v77 = 3;
LABEL_94:
                  if (v100.__begin_)
                  {
                    v100.__end_ = v100.__begin_;
                    operator delete(v100.__begin_);
                  }
                  return v77;
                }
                v32 = 0;
                do
                {
                  while (1)
                  {
                    v29 = v24-- < 1;
                    if (!v29)
                      break;
                    v23 = 0;
                    v24 = 0;
                    if (++v32 == v18)
                      goto LABEL_92;
                  }
                  v33 = *v31;
                  v34 = *(unsigned __int8 *)v23;
                  v23 = (int *)((char *)v23 + 1);
                  (*v31)->i32[v32++] = v34;
                }
                while (v32 != v18);
                if (!v23)
                  goto LABEL_92;
                if (v18 < 8)
                {
                  v35 = 0;
                  v36 = 0;
                  v37 = 1;
                  goto LABEL_68;
                }
                if (v18 >= 0x20)
                {
                  v35 = v18 & 0xE0;
                  v38 = *((int8x16_t *)v100.__begin_ + 2);
                  v39 = *((int8x16_t *)v100.__begin_ + 3);
                  v40 = *(int8x16_t *)v100.__begin_;
                  v41 = *((int8x16_t *)v100.__begin_ + 1);
                  v42 = *((int8x16_t *)v100.__begin_ + 6);
                  v43 = *((int8x16_t *)v100.__begin_ + 7);
                  v44 = *((int8x16_t *)v100.__begin_ + 4);
                  v45 = *((int8x16_t *)v100.__begin_ + 5);
                  v46.i64[0] = 0x1D0000001DLL;
                  v46.i64[1] = 0x1D0000001DLL;
                  v47 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[2]), (int16x8_t)vcgtq_s32(v46, v33[3]));
                  v48 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, *v33), (int16x8_t)vcgtq_s32(v46, v33[1]));
                  v49 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[6]), (int16x8_t)vcgtq_s32(v46, v33[7]));
                  v50 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[4]), (int16x8_t)vcgtq_s32(v46, v33[5]));
                  if (v35 == 32)
                  {
                    v51 = vuzp1q_s8(v48, v47);
                    v52 = vuzp1q_s8(v50, v49);
                  }
                  else
                  {
                    v53 = vuzp1q_s8(v50, v49);
                    v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 9));
                    v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 8));
                    v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 10));
                    v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 11));
                    v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 13));
                    v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 12));
                    v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 14));
                    v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 15));
                    v54 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[12]), (int16x8_t)vcgtq_s32(v46, v33[13])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[14]), (int16x8_t)vcgtq_s32(v46, v33[15])));
                    v51 = vandq_s8(vuzp1q_s8(v48, v47), vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[8]), (int16x8_t)vcgtq_s32(v46, v33[9])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[10]), (int16x8_t)vcgtq_s32(v46, v33[11]))));
                    v52 = vandq_s8(v53, v54);
                    if (v35 != 64)
                    {
                      v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 17));
                      v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 16));
                      v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 18));
                      v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 19));
                      v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 21));
                      v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 20));
                      v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 22));
                      v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 23));
                      v55.i64[0] = 0x1D0000001DLL;
                      v55.i64[1] = 0x1D0000001DLL;
                      v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[16]), (int16x8_t)vcgtq_s32(v55, v33[17])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[18]), (int16x8_t)vcgtq_s32(v55, v33[19]))));
                      v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[20]), (int16x8_t)vcgtq_s32(v55, v33[21])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[22]), (int16x8_t)vcgtq_s32(v55, v33[23]))));
                      if (v35 != 96)
                      {
                        v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 25));
                        v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 24));
                        v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 26));
                        v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 27));
                        v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 29));
                        v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 28));
                        v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 30));
                        v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 31));
                        v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[24]), (int16x8_t)vcgtq_s32(v55, v33[25])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[26]), (int16x8_t)vcgtq_s32(v55, v33[27]))));
                        v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[28]), (int16x8_t)vcgtq_s32(v55, v33[29])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[30]), (int16x8_t)vcgtq_s32(v55, v33[31]))));
                        if (v35 != 128)
                        {
                          v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 33));
                          v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 32));
                          v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 34));
                          v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 35));
                          v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 37));
                          v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 36));
                          v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 38));
                          v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 39));
                          v56.i64[0] = 0x1D0000001DLL;
                          v56.i64[1] = 0x1D0000001DLL;
                          v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[32]), (int16x8_t)vcgtq_s32(v56, v33[33])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[34]), (int16x8_t)vcgtq_s32(v56, v33[35]))));
                          v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[36]), (int16x8_t)vcgtq_s32(v56, v33[37])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[38]), (int16x8_t)vcgtq_s32(v56, v33[39]))));
                          if (v35 != 160)
                          {
                            v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 41));
                            v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 40));
                            v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 42));
                            v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 43));
                            v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 45));
                            v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 44));
                            v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 46));
                            v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 47));
                            v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[40]), (int16x8_t)vcgtq_s32(v56, v33[41])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[42]), (int16x8_t)vcgtq_s32(v56, v33[43]))));
                            v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[44]), (int16x8_t)vcgtq_s32(v56, v33[45])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[46]), (int16x8_t)vcgtq_s32(v56, v33[47]))));
                            if (v35 != 192)
                            {
                              v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 49));
                              v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 48));
                              v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 50));
                              v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 51));
                              v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 53));
                              v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 52));
                              v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 54));
                              v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 55));
                              v57.i64[0] = 0x1D0000001DLL;
                              v57.i64[1] = 0x1D0000001DLL;
                              v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[48]), (int16x8_t)vcgtq_s32(v57, v33[49])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[50]), (int16x8_t)vcgtq_s32(v57, v33[51]))));
                              v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[52]), (int16x8_t)vcgtq_s32(v57, v33[53])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[54]), (int16x8_t)vcgtq_s32(v57, v33[55]))));
                            }
                          }
                        }
                      }
                    }
                  }
                  v36 = vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v44, v40)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v45, v41))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v42, v38)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v43, v39)))))) & 1;
                  v37 = vminvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vandq_s8(v52, v51), 7uLL)));
                  if (v35 == v18)
                    goto LABEL_70;
                  if ((v18 & 0x18) == 0)
                  {
LABEL_68:
                    v69 = v18 - v35;
                    v70 = v35;
                    v71 = &v33->i32[v70];
                    v72 = &v100.__begin_[v70];
                    do
                    {
                      v73 = *v72++;
                      v36 |= v73 != 0;
                      v74 = *v71++;
                      v37 &= v74 < 29;
                      --v69;
                    }
                    while (v69);
                    goto LABEL_70;
                  }
                }
                else
                {
                  v36 = 0;
                  v35 = 0;
                  v37 = 1;
                }
                v58 = v35;
                v59 = (int8x8_t)-1;
                v59.i8[0] = v37;
                v60 = (int8x8_t)v36;
                v35 = v18 & 0xF8;
                v61 = &v100.__begin_[v58];
                v62 = (int32x4_t *)((char *)v33 + 4 * v58);
                v63 = v58 - v35;
                v64.i64[0] = 0x1D0000001DLL;
                v64.i64[1] = 0x1D0000001DLL;
                do
                {
                  v65 = *(int32x4_t *)v61;
                  v66 = *((int32x4_t *)v61 + 1);
                  v61 += 8;
                  v60 = vorr_s8(v60, vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v65), (int16x8_t)vceqzq_s32(v66)))));
                  v67 = *v62;
                  v68 = v62[1];
                  v62 += 2;
                  v59 = vand_s8(v59, vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_s32(v64, v67), (int16x8_t)vcgtq_s32(v64, v68))));
                  v63 += 8;
                }
                while (v63);
                v36 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v60, 7uLL))) & 1;
                v37 = vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v59, 7uLL)));
                if (v35 != v18)
                  goto LABEL_68;
LABEL_70:
                if ((v37 & 1) != 0)
                  goto LABEL_71;
                goto LABEL_92;
              }
            }
            else if ((_DWORD)v18 == 2)
            {
              result = 3;
              if (v22 - 28 < 0xFFFFFFE5)
                return result;
              v25 = 2;
              std::vector<int>::vector(&v100, 2uLL);
              goto LABEL_36;
            }
          }
          return 3;
        }
      }
    }
  }
  return result;
}

void sub_19F2858A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *gcl::tmesh::DecoderImpl::initArithmeticDecoder(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  __int128 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;

  if (a3 < 4)
    return 0;
  v10 = *a2;
  v8 = (unsigned __int8 *)(a2 + 1);
  v9 = (unsigned __int8 *)v10;
  if (v8)
  {
    v11 = &v9[(_QWORD)v8];
    if (!&v9[(_QWORD)v8])
      return 0;
  }
  else
  {
    v11 = v9;
    v8 = 0;
    if (!v9)
      return 0;
  }
  if (a3 - 4 - (_QWORD)v9 < 0)
    return 0;
  *(_DWORD *)(a1 + 2704) = (_DWORD)v9;
  *(_QWORD *)(a1 + 2712) = v8;
  *(_QWORD *)&v3 = 0xFFFF000000000000;
  *((_QWORD *)&v3 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 2728) = v3;
  *(_QWORD *)(a1 + 2744) = 16;
  if (!(_DWORD)v9)
  {
    v4 = -16777216;
    goto LABEL_13;
  }
  v4 = *v8 << 24;
  *(_DWORD *)(a1 + 2736) = v4;
  if ((_DWORD)v9 == 1)
  {
LABEL_13:
    v5 = v4 | 0xFF0000;
    goto LABEL_14;
  }
  v5 = v4 | (v8[1] << 16);
  *(_DWORD *)(a1 + 2736) = v5;
  if (v9 <= 2)
  {
LABEL_14:
    v6 = v5 | 0xFF00;
    goto LABEL_15;
  }
  v6 = v5 | (v8[2] << 8);
  *(_DWORD *)(a1 + 2736) = v6;
  if ((_DWORD)v9 == 3)
  {
LABEL_15:
    v7 = 255;
    goto LABEL_16;
  }
  v7 = v8[3];
LABEL_16:
  *(_DWORD *)(a1 + 2736) = v7 | v6;
  *(_QWORD *)(a1 + 2720) = 3;
  memcpy((void *)(a1 + 2752), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  return v11;
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;
  BOOL v3;
  std::vector<int>::size_type v4;

  v2 = this->__end_ - this->__begin_;
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<int>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::size_type v4;
  int *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    if (__n >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v4 = __n;
    v5 = (int *)operator new(4 * __n);
    this->__begin_ = v5;
    this->__end_cap_.__value_ = &v5[__n];
    bzero(v5, 4 * __n);
    this->__end_ = &v5[v4];
  }
  return this;
}

void sub_19F285A9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void gcl::tmesh::DecoderImpl::~DecoderImpl(gcl::tmesh::DecoderImpl *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v2 = (void *)*((_QWORD *)this + 333);
  if (v2)
  {
    *((_QWORD *)this + 334) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 330);
  if (v3)
  {
    *((_QWORD *)this + 331) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 327);
  if (v4)
  {
    *((_QWORD *)this + 328) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 324);
  if (v5)
  {
    *((_QWORD *)this + 325) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 321);
  if (v6)
  {
    *((_QWORD *)this + 322) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 318);
  if (v7)
  {
    *((_QWORD *)this + 319) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 315);
  if (v8)
  {
    *((_QWORD *)this + 316) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 312);
  if (v9)
  {
    *((_QWORD *)this + 313) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 309);
  if (v10)
  {
    *((_QWORD *)this + 310) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 306);
  if (v11)
  {
    *((_QWORD *)this + 307) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 303);
  if (v12)
  {
    *((_QWORD *)this + 304) = v12;
    operator delete(v12);
  }
  v13 = 1536;
  do
  {
    v14 = *(void **)((char *)this + v13 + 232);
    if (v14)
    {
      *(_QWORD *)((char *)this + v13 + 240) = v14;
      operator delete(v14);
    }
    v13 -= 24;
  }
  while (v13);
  v15 = (void *)*((_QWORD *)this + 28);
  if (v15)
  {
    *((_QWORD *)this + 29) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 25);
  if (v16)
  {
    *((_QWORD *)this + 26) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 22);
  if (v17)
  {
    *((_QWORD *)this + 23) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 19);
  if (v18)
  {
    *((_QWORD *)this + 20) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 16);
  if (v19)
  {
    *((_QWORD *)this + 17) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 13);
  if (v20)
  {
    *((_QWORD *)this + 14) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 10);
  if (v21)
  {
    *((_QWORD *)this + 11) = v21;
    operator delete(v21);
  }
  v22 = (void *)*((_QWORD *)this + 7);
  if (v22)
  {
    *((_QWORD *)this + 8) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 4);
  if (v23)
  {
    *((_QWORD *)this + 5) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 1);
  if (v24)
  {
    *((_QWORD *)this + 2) = v24;
    operator delete(v24);
  }
}

gcl::tmesh::DecoderImpl *gcl::tmesh::DecoderImpl::DecoderImpl(gcl::tmesh::DecoderImpl *this)
{
  *(_OWORD *)((char *)this + 236) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 63) = -1;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  bzero((char *)this + 256, 0x700uLL);
  memset_pattern16((char *)this + 2048, &memset_pattern_20, 0xAuLL);
  *((_WORD *)this + 1029) = 0x8000;
  memset_pattern16((char *)this + 2060, &memset_pattern_21, 0x50uLL);
  memset_pattern16((char *)this + 2140, &memset_pattern_22, 0x60uLL);
  *((_DWORD *)this + 559) = -2147450880;
  memset_pattern16((char *)this + 2240, &memset_pattern_23, 0x20uLL);
  *((_QWORD *)this + 284) = 0x8000800080008000;
  memset_pattern16((char *)this + 2280, &memset_pattern_24, 0x80uLL);
  memset_pattern16((char *)this + 2408, &memset_pattern_25, 6uLL);
  *((_WORD *)this + 1207) = 0x8000;
  memset_pattern16((char *)this + 2416, &memset_pattern_26, 6uLL);
  *((_QWORD *)this + 339) = 0;
  *((_QWORD *)this + 472) = 0;
  *((_QWORD *)this + 474) = 0;
  *((_QWORD *)this + 473) = 0;
  *((_BYTE *)this + 3800) = 0;
  *((_DWORD *)this + 951) = 0;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *(_OWORD *)((char *)this + 2440) = 0u;
  *(_OWORD *)((char *)this + 2456) = 0u;
  *(_OWORD *)((char *)this + 2472) = 0u;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *(_OWORD *)((char *)this + 2520) = 0u;
  *(_OWORD *)((char *)this + 2536) = 0u;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *((_QWORD *)this + 335) = 0;
  *((_QWORD *)this + 476) = 0x200000004;
  *((_DWORD *)this + 954) = 16843009;
  *((_BYTE *)this + 3820) = 1;
  *((_OWORD *)this + 239) = 0u;
  *((_OWORD *)this + 240) = 0u;
  *((_QWORD *)this + 482) = 0;
  *((_QWORD *)this + 483) = 0x200000004;
  *((_DWORD *)this + 968) = 6;
  return this;
}

void gcl::tmesh::DecoderImpl::init(gcl::tmesh::DecoderImpl *this, int a2, int a3)
{
  char **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int v79;
  char *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  const void **v85;
  char *v86;
  _BYTE *v87;
  const void *v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;

  v7 = *((_QWORD *)this + 13);
  v8 = *((_QWORD *)this + 14);
  v6 = (char **)((char *)this + 104);
  v9 = a2;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
  v11 = a2 >= v10;
  v12 = a2 - v10;
  if (v12 != 0 && v11)
  {
    std::vector<gcl::Vector3<int>>::__append(v6, v12);
  }
  else if (!v11)
  {
    *((_QWORD *)this + 14) = v7 + 12 * (int)v9;
  }
  *(_QWORD *)this = 0;
  v13 = *((_QWORD *)this + 7);
  if (*((_QWORD *)this + 8) != v13)
    *((_QWORD *)this + 8) = v13;
  v14 = *((_QWORD *)this + 16);
  *(_QWORD *)((char *)this + 3836) = 0;
  *((_DWORD *)this + 947) = a2;
  *((_DWORD *)this + 948) = a3;
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 17) - v14) >> 2);
  if (a3 <= v15)
  {
    if (a3 < v15)
      *((_QWORD *)this + 17) = v14 + 12 * a3;
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((char **)this + 16, a3 - v15);
  }
  v17 = (char *)*((_QWORD *)this + 4);
  v16 = (char *)*((_QWORD *)this + 5);
  v18 = v16 - v17;
  if ((unint64_t)(v16 - v17) <= 0x3F)
  {
    v19 = *((_QWORD *)this + 6);
    if (v19 - (uint64_t)v16 >= 64 - v18)
    {
      bzero(*((void **)this + 5), 64 - v18);
      *((_QWORD *)this + 5) = v17 + 64;
      goto LABEL_41;
    }
    v20 = v19 - (_QWORD)v17;
    v21 = 2 * v20;
    if (2 * v20 <= 0x40)
      v21 = 64;
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    v23 = (char *)operator new(v22);
    v24 = &v23[v18];
    v25 = &v23[v22];
    bzero(&v23[v18], 64 - v18);
    if (v16 == v17)
      goto LABEL_39;
    if (v18 >= 8 && (unint64_t)(v17 - v23) >= 0x20)
    {
      if (v18 < 0x20)
      {
        v26 = 0;
        goto LABEL_31;
      }
      v26 = v18 & 0xFFFFFFFFFFFFFFE0;
      v27 = v16 - 16;
      v28 = &v23[v16 - 16 - v17];
      v29 = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v30 = *(_OWORD *)v27;
        *((_OWORD *)v28 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)v28 = v30;
        v28 -= 32;
        v27 -= 32;
        v29 -= 32;
      }
      while (v29);
      if (v18 == v26)
        goto LABEL_38;
      if ((v18 & 0x18) != 0)
      {
LABEL_31:
        v24 -= v18 & 0xFFFFFFFFFFFFFFF8;
        v31 = &v16[-v26 - 8];
        v32 = (char *)(v31 - v17);
        v33 = v26 - (v18 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v34 = *(_QWORD *)v31;
          v31 -= 8;
          *(_QWORD *)&v32[(_QWORD)v23] = v34;
          v32 -= 8;
          v33 += 8;
        }
        while (v33);
        v16 -= v18 & 0xFFFFFFFFFFFFFFF8;
        if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_38;
        goto LABEL_36;
      }
      v24 -= v26;
      v16 -= v26;
    }
LABEL_36:
    v35 = v24 - 1;
    do
    {
      v36 = *--v16;
      *v35-- = v36;
    }
    while (v16 != v17);
LABEL_38:
    v16 = v17;
    v24 = v23;
LABEL_39:
    *((_QWORD *)this + 4) = v24;
    *((_QWORD *)this + 5) = v23 + 64;
    *((_QWORD *)this + 6) = v25;
    if (v16)
      operator delete(v16);
    goto LABEL_41;
  }
  if (v18 != 64)
    *((_QWORD *)this + 5) = v17 + 64;
LABEL_41:
  v37 = *((_QWORD *)this + 1);
  v38 = *((_QWORD *)this + 2) - v37;
  if (v38 > 0xFF)
  {
    if (v38 != 256)
      *((_QWORD *)this + 2) = v37 + 256;
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 8), 64 - (v38 >> 2));
  }
  v40 = (char *)*((_QWORD *)this + 19);
  v39 = (char *)*((_QWORD *)this + 20);
  v41 = (v39 - v40) >> 4;
  v42 = v9 - v41;
  if (v9 <= v41)
  {
    if (v9 < v41)
    {
      v39 = &v40[16 * v9];
      *((_QWORD *)this + 20) = v39;
    }
  }
  else
  {
    v43 = *((_QWORD *)this + 21);
    if (v42 <= (v43 - (uint64_t)v39) >> 4)
    {
      bzero(*((void **)this + 20), 16 * v42);
      v51 = &v39[16 * v42];
      *((_QWORD *)this + 20) = v51;
    }
    else
    {
      if (a2 < 0)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v44 = v43 - (_QWORD)v40;
      v45 = v44 >> 3;
      if (v44 >> 3 <= v9)
        v45 = v9;
      v11 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0;
      v46 = 0xFFFFFFFFFFFFFFFLL;
      if (!v11)
        v46 = v45;
      if (v46 >> 60)
        goto LABEL_128;
      v47 = 16 * v46;
      v48 = (char *)operator new(16 * v46);
      v49 = &v48[16 * v41];
      v50 = &v48[v47];
      bzero(v49, 16 * v42);
      v51 = &v49[16 * v42];
      if (v39 != v40)
      {
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v39 - 1);
          v49 -= 16;
          v39 -= 16;
        }
        while (v39 != v40);
        v39 = (char *)*((_QWORD *)this + 19);
      }
      *((_QWORD *)this + 19) = v49;
      *((_QWORD *)this + 20) = v51;
      *((_QWORD *)this + 21) = v50;
      if (v39)
      {
        operator delete(v39);
        v51 = (char *)*((_QWORD *)this + 20);
      }
    }
    v40 = (char *)*((_QWORD *)this + 19);
    v39 = v51;
  }
  if (v40 != v39)
    memset(v40, 255, (v39 - v40) & 0xFFFFFFFFFFFFFFF0);
  v52 = (char *)*((_QWORD *)this + 22);
  v53 = (char *)*((_QWORD *)this + 23);
  v54 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 2);
  if (v9 <= v54)
  {
    if (v9 < v54)
    {
      v53 = &v52[12 * (int)v9];
      *((_QWORD *)this + 23) = v53;
    }
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((char **)this + 22, v9 - v54);
    v52 = (char *)*((_QWORD *)this + 22);
    v53 = (char *)*((_QWORD *)this + 23);
  }
  if (v53 - v52 >= 1)
    memset(v52, 255, 12 * ((v53 - v52) / 0xCuLL - ((unint64_t)(v53 - v52) > 0xB)) + 12);
  v55 = (char *)*((_QWORD *)this + 25);
  v56 = (char *)*((_QWORD *)this + 26);
  v57 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 2);
  if (v9 <= v57)
  {
    if (v9 < v57)
    {
      v56 = &v55[12 * (int)v9];
      *((_QWORD *)this + 26) = v56;
    }
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((char **)this + 25, v9 - v57);
    v55 = (char *)*((_QWORD *)this + 25);
    v56 = (char *)*((_QWORD *)this + 26);
  }
  if (v56 - v55 >= 1)
    memset(v55, 255, 12 * ((v56 - v55) / 0xCuLL - ((unint64_t)(v56 - v55) > 0xB)) + 12);
  if (!*((_BYTE *)this + 3817) || !*((_BYTE *)this + 3816))
  {
    v58 = (char *)*((_QWORD *)this + 10);
    v59 = (char *)*((_QWORD *)this + 11);
    v60 = (v59 - v58) >> 2;
    if (v9 <= v60)
    {
      if (v9 < v60)
      {
        v59 = &v58[4 * v9];
        *((_QWORD *)this + 11) = v59;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 80), v9 - v60);
      v58 = (char *)*((_QWORD *)this + 10);
      v59 = (char *)*((_QWORD *)this + 11);
    }
    if (v59 - v58 >= 1)
      bzero(v58, 4 * (((unint64_t)(v59 - v58) >> 2) - ((unint64_t)(v59 - v58) > 3)) + 4);
  }
  if (*((_BYTE *)this + 3816))
  {
    v62 = (char *)*((_QWORD *)this + 28);
    v61 = (char *)*((_QWORD *)this + 29);
    v63 = (char *)(v61 - v62);
    v64 = 0xAAAAAAAAAAAAAAABLL * ((v61 - v62) >> 2);
    v65 = v9 - v64;
    if (v9 <= v64)
    {
      if (v9 >= v64)
      {
LABEL_113:
        v85 = (const void **)((char *)this + 256);
        while (1)
        {
          v88 = *v85;
          v87 = v85[1];
          v89 = v87 - (_BYTE *)*v85;
          if (v87 == *v85)
          {
            v91 = 0;
            v90 = 0;
          }
          else
          {
            if ((v89 & 0x8000000000000000) != 0)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v90 = (char *)operator new(v87 - (_BYTE *)*v85);
            memcpy(v90, v88, v89);
            if (v89 > 0x1FF)
            {
              v86 = v90;
              goto LABEL_115;
            }
            v89 >>= 3;
            v91 = &v90[8 * v89];
          }
          v92 = (char *)operator new(0x200uLL);
          if (v91 != v90)
          {
            v93 = (v91 - 8 - v90) & 0xFFFFFFFFFFFFFFF8;
            v86 = &v92[8 * v89 - v93 - 8];
            memcpy(v86, &v91[-v93 - 8], v93 + 8);
            if (!v90)
              goto LABEL_115;
LABEL_125:
            operator delete(v90);
            goto LABEL_115;
          }
          v86 = &v92[8 * v89];
          if (v90)
            goto LABEL_125;
LABEL_115:
          operator delete(v86);
          v85 += 3;
          if (v85 == (const void **)((char *)this + 1792))
            goto LABEL_126;
        }
      }
      v80 = &v62[12 * (int)v9];
    }
    else
    {
      v66 = *((_QWORD *)this + 30);
      if (0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v61) >> 2) < v65)
      {
        if (a2 < 0)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v67 = 0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v62) >> 2);
        v68 = 0x5555555555555556 * ((v66 - (uint64_t)v62) >> 2);
        if (v68 <= v9)
          v68 = v9;
        if (v67 >= 0xAAAAAAAAAAAAAAALL)
          v69 = 0x1555555555555555;
        else
          v69 = v68;
        if (v69 <= 0x1555555555555555)
        {
          v70 = (char *)operator new(12 * v69);
          v71 = &v70[4 * ((v61 - v62) >> 2)];
          v72 = &v70[12 * v9];
          v73 = 12 * v9 - (_QWORD)v63 - 12;
          v74 = v71;
          if (v73 < 0x54)
            goto LABEL_133;
          v75 = v73 / 0xC + 1;
          v74 = &v71[12 * (v75 & 0x3FFFFFFFFFFFFFF8)];
          v76 = v75 & 0x3FFFFFFFFFFFFFF8;
          v77 = &v70[4 * ((v61 - v62) >> 2)];
          do
          {
            *(_OWORD *)v77 = xmmword_1A0087840;
            *((_OWORD *)v77 + 1) = xmmword_1A0087830;
            *((_OWORD *)v77 + 4) = xmmword_1A0087830;
            *((_OWORD *)v77 + 5) = xmmword_1A0087820;
            *((_OWORD *)v77 + 2) = xmmword_1A0087820;
            *((_OWORD *)v77 + 3) = xmmword_1A0087840;
            v77 += 96;
            v76 -= 8;
          }
          while (v76);
          if (v75 != (v75 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_133:
            do
            {
              *(_QWORD *)v74 = 0xFFFFFFFF00000000;
              *((_DWORD *)v74 + 2) = -1;
              v74 += 12;
            }
            while (v74 != v72);
          }
          if (v61 != v62)
          {
            do
            {
              v78 = *(_QWORD *)(v61 - 12);
              v61 -= 12;
              v79 = *((_DWORD *)v61 + 2);
              *(_QWORD *)(v71 - 12) = v78;
              v71 -= 12;
              *((_DWORD *)v71 + 2) = v79;
            }
            while (v61 != v62);
            v61 = (char *)*((_QWORD *)this + 28);
          }
          *((_QWORD *)this + 28) = v71;
          *((_QWORD *)this + 29) = v72;
          *((_QWORD *)this + 30) = &v70[12 * v69];
          if (v61)
            operator delete(v61);
          goto LABEL_113;
        }
LABEL_128:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v80 = &v61[12 * v65];
      v81 = 12 * (int)v9 - (_QWORD)v63 - 12;
      if (v81 >= 0x54)
      {
        v83 = v81 / 0xC + 1;
        v82 = &v61[12 * (v83 & 0x3FFFFFFFFFFFFFF8)];
        v84 = v83 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          *(_OWORD *)v61 = xmmword_1A0087840;
          *((_OWORD *)v61 + 1) = xmmword_1A0087830;
          *((_OWORD *)v61 + 4) = xmmword_1A0087830;
          *((_OWORD *)v61 + 5) = xmmword_1A0087820;
          *((_OWORD *)v61 + 2) = xmmword_1A0087820;
          *((_OWORD *)v61 + 3) = xmmword_1A0087840;
          v61 += 96;
          v84 -= 8;
        }
        while (v84);
        if (v83 == (v83 & 0x3FFFFFFFFFFFFFF8))
          goto LABEL_112;
      }
      else
      {
        v82 = (char *)*((_QWORD *)this + 29);
      }
      do
      {
        *(_QWORD *)v82 = 0xFFFFFFFF00000000;
        *((_DWORD *)v82 + 2) = -1;
        v82 += 12;
      }
      while (v82 != v80);
    }
LABEL_112:
    *((_QWORD *)this + 29) = v80;
    goto LABEL_113;
  }
LABEL_126:
  memset_pattern16((char *)this + 2048, &memset_pattern_26, 0xAuLL);
  *((_WORD *)this + 1029) = 0x8000;
  memset_pattern16((char *)this + 2060, &memset_pattern_26, 0x10uLL);
  memset_pattern16((char *)this + 2076, &memset_pattern_26, 0x10uLL);
  memset_pattern16((char *)this + 2092, &memset_pattern_26, 0x10uLL);
  memset_pattern16((char *)this + 2108, &memset_pattern_26, 0x10uLL);
  memset_pattern16((char *)this + 2124, &memset_pattern_26, 0x10uLL);
  memset_pattern16((char *)this + 2140, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2146, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2152, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2158, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2164, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2170, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2176, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2182, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2188, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2194, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2200, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2206, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2212, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2218, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2224, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2230, &memset_pattern_26, 6uLL);
  memset_pattern16((char *)this + 2240, &memset_pattern_26, 0x20uLL);
  *((_DWORD *)this + 559) = -2147450880;
  *((_QWORD *)this + 284) = 0x8000800080008000;
  memset_pattern16((char *)this + 2416, &memset_pattern_26, 6uLL);
  gcl::tmesh::ACContext::init((std::vector<int> *)this + 101, 3);
  gcl::tmesh::ACContext::init((std::vector<int> *)this + 106, 3);
}

void sub_19F28679C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void gcl::tmesh::ACContext::init(std::vector<int> *this, int a2)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  std::vector<int>::pointer begin;
  unint64_t v8;
  std::vector<int>::pointer v9;
  unint64_t v10;
  std::vector<int>::pointer v11;
  unint64_t v12;
  std::vector<int>::pointer v13;
  int *end;
  unint64_t v15;
  int *v16;
  std::vector<int>::pointer v17;
  std::vector<int>::pointer v18;
  std::vector<int>::pointer v19;
  std::vector<int>::pointer v20;
  std::vector<int>::pointer v21;
  std::vector<int>::pointer v22;

  v3 = a2;
  v4 = ((char *)this->__end_ - (char *)this->__begin_) >> 1;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)this, v6);
  }
  else if (!v5)
  {
    this->__end_ = (std::vector<int>::pointer)((char *)this->__begin_ + 2 * v3);
  }
  begin = this[1].__begin_;
  v8 = ((char *)this[1].__end_ - (char *)begin) >> 1;
  if (v3 <= v8)
  {
    if (v3 < v8)
      this[1].__end_ = (std::vector<int>::pointer)((char *)begin + 2 * v3);
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[1], v3 - v8);
  }
  v9 = this[2].__begin_;
  v10 = ((char *)this[2].__end_ - (char *)v9) >> 1;
  if (v3 << 6 <= v10)
  {
    if (v3 << 6 < v10)
      this[2].__end_ = &v9[32 * v3];
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[2], (v3 << 6) - v10);
  }
  v11 = this[3].__begin_;
  v12 = ((char *)this[3].__end_ - (char *)v11) >> 1;
  if (v3 <= v12)
  {
    if (v3 < v12)
      this[3].__end_ = (std::vector<int>::pointer)((char *)v11 + 2 * v3);
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[3], v3 - v12);
  }
  v13 = this[4].__begin_;
  end = this[4].__end_;
  v15 = end - v13;
  if (v3 <= v15)
  {
    if (v3 < v15)
    {
      end = &v13[v3];
      this[4].__end_ = end;
    }
  }
  else
  {
    std::vector<int>::__append(this + 4, v3 - v15);
    v13 = this[4].__begin_;
    end = this[4].__end_;
  }
  if ((char *)end - (char *)v13 >= 1)
    memset_pattern16(v13, &unk_1A0087850, 4 * (((unint64_t)((char *)end - (char *)v13) >> 2) - ((unint64_t)((char *)end - (char *)v13) > 3))+ 4);
  v16 = this->__end_;
  if (this->__begin_ != v16)
    memset_pattern16(this->__begin_, &memset_pattern_26, ((char *)v16 - (char *)this->__begin_) & 0xFFFFFFFFFFFFFFFELL);
  v17 = this[1].__begin_;
  v18 = this[1].__end_;
  if (v17 != v18)
    memset_pattern16(v17, &memset_pattern_26, ((char *)v18 - (char *)v17) & 0xFFFFFFFFFFFFFFFELL);
  v19 = this[2].__begin_;
  v20 = this[2].__end_;
  if (v19 != v20)
    memset_pattern16(v19, &memset_pattern_26, ((char *)v20 - (char *)v19) & 0xFFFFFFFFFFFFFFFELL);
  v21 = this[3].__begin_;
  v22 = this[3].__end_;
  if (v21 != v22)
    memset_pattern16(v21, &memset_pattern_26, ((char *)v22 - (char *)v21) & 0xFFFFFFFFFFFFFFFELL);
}

void std::vector<gcl::ArithmeticContext>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      memset_pattern16(v5, &memset_pattern_26, 2 * a2);
      v6 = &v5[2 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    memset_pattern16(v14, &memset_pattern_26, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 1) + 1;
      v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[2 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_29:
        do
        {
          v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int *value;
  std::vector<int>::pointer end;
  int *v6;
  std::vector<int>::pointer begin;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  int *v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begin = this->__begin_;
    v8 = (char *)end - (char *)this->__begin_;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + __n;
    if (v10 >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * __n;
    v16 = (int *)&v13[4 * v12];
    bzero(v14, v15);
    v17 = (int *)&v14[v15];
    if (end != begin)
    {
      v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)((char *)end - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = (__int128 *)(end - 4);
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<gcl::Vector3<int>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  const float *v24;
  float *v25;
  uint64_t v26;
  int v27;
  float32x4x3_t v28;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(v5, v13);
      v6 = &v5[v13];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2) + a2;
    if (v9 > 0x1555555555555555)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(12 * v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = &v12[4 * (v8 >> 2)];
    v15 = &v12[12 * v11];
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = &v14[v16];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
LABEL_28:
        operator delete(v7);
    }
    else
    {
      v18 = v5 - v7 - 12;
      if (v18 < 0xB4)
        goto LABEL_25;
      v19 = v18 / 0xC;
      if (&v12[v8 - 12 * v19 - 12] < v5 && &v5[-12 * v19 - 12] < v14)
        goto LABEL_25;
      v21 = v19 + 1;
      v22 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v6 = &v5[-12 * v22];
      v23 = &v14[-12 * v22];
      v24 = (const float *)(v5 - 48);
      v25 = (float *)(v14 - 48);
      v26 = v22;
      do
      {
        v28 = vld3q_f32(v24);
        vst3q_f32(v25, v28);
        v25 -= 12;
        v24 -= 12;
        v26 -= 4;
      }
      while (v26);
      v14 -= 12 * v22;
      if (v21 != v22)
      {
LABEL_25:
        v23 = v14;
        do
        {
          v27 = *((_DWORD *)v6 - 3);
          v6 -= 12;
          *((_DWORD *)v23 - 3) = v27;
          v23 -= 12;
          *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
          *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
        }
        while (v6 != v7);
      }
      *a1 = v23;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
        goto LABEL_28;
    }
  }
}

void md::MeshSetStorage::finalize(md::MeshSetStorage *this)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;

  v24 = 0;
  v18 = 0;
  v19 = 0;
  ggl::BufferMemory::operator=((uint64_t *)this + 10, (uint64_t)&v18);
  if (v24)
  {
    v3 = v20;
    v2 = v21;
    if (v21 != v20)
    {
      v4 = (_QWORD *)v19;
      v5 = v22;
      v6 = v23;
      if (v18 && *(_BYTE *)(v19 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v18 + 64))();
      if (v5 && !v6)
      {
        v8 = v4[7];
        v7 = v4[8];
        if (v7 == v8)
          v8 = v4[10] - v4[9];
        if (v3 < v8)
          v8 = v3;
        if (v7 <= v2)
          v7 = v2;
        if (v7 == v8)
          v7 = v8 + v4[10] - v4[9];
        v4[7] = v8;
        v4[8] = v7;
      }
    }
  }
  v24 = 0;
  v18 = 0;
  v19 = 0;
  ggl::BufferMemory::operator=((uint64_t *)this + 16, (uint64_t)&v18);
  if (v24)
  {
    v10 = v20;
    v9 = v21;
    if (v21 != v20)
    {
      v11 = (_QWORD *)v19;
      v12 = v22;
      v13 = v23;
      if (v18 && *(_BYTE *)(v19 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v18 + 64))();
      if (v12 && !v13)
      {
        v15 = v11[7];
        v14 = v11[8];
        if (v14 == v15)
          v15 = v11[10] - v11[9];
        if (v10 < v15)
          v15 = v10;
        if (v14 <= v9)
          v14 = v9;
        if (v14 == v15)
          v14 = v15 + v11[10] - v11[9];
        v11[7] = v15;
        v11[8] = v14;
      }
    }
  }
  v17 = (_QWORD *)*((_QWORD *)this + 3);
  v16 = (_QWORD *)((char *)this + 24);
  std::__tree<gdc::LayerDataWithWorld>::destroy(v17);
  *(v16 - 1) = v16;
  *v16 = 0;
  v16[1] = 0;
}

double GEOMapRectEnclosingCameraProperties(double *a1, float a2)
{
  VKCamera *v4;
  double v5;
  __double2 v6;
  __double2 v7;
  double v8;
  double v9;
  double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  long double v16;
  long double v17;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  long double v22;
  long double v23;
  long double v24;
  __int128 v25;
  double v27[3];
  double v28;
  double v29;
  double v30;
  double v31;
  _OWORD v32[2];

  v4 = -[VKCamera initWithRunLoopController:]([VKCamera alloc], "initWithRunLoopController:", 0);
  -[VKCamera setAspectRatio:](v4, "setAspectRatio:", a2);
  v5 = a1[3];
  v6 = __sincos_stret(a1[2] * 0.00872664626);
  v7 = __sincos_stret(v5 * 0.00872664626);
  v28 = v7.__sinval * v6.__cosval;
  v29 = v7.__sinval * v6.__sinval;
  v30 = v7.__cosval * v6.__sinval;
  v31 = v7.__cosval * v6.__cosval;
  -[VKCamera setOrientation:](v4, "setOrientation:", &v28);
  v8 = *a1;
  v9 = a1[1];
  v10 = *a1 * 0.00872664626;
  v11 = tan(v10 + 0.785398163);
  v12 = v9 * 0.00277777778 + 0.5;
  v13 = log(v11) * 0.159154943 + 0.5;
  v14 = a1[3];
  v15 = a1[4];
  if (v14 < 90.0)
    v15 = v15 / cos(v14 * 0.0174532925);
  v16 = cos(v8 * 0.034906585) * -559.82 + 111132.92;
  v17 = v16 + cos(v8 * 0.0698131701) * 1.175;
  v18 = v17 + cos(v8 * 0.104719755) * -0.0023;
  v19 = tan(v10 + 0.78103484);
  v20 = log(v19);
  v21 = tan(v10 + 0.789761487);
  v22 = fabs((log(v21) - v20) * 0.159154943) * v15 / v18;
  v23 = v22 * (v29 + v29);
  v24 = v28 * -2.0 * v22;
  v27[0] = v12 - v24 * v30 + v23 * v31;
  v27[1] = v13 + v24 * v31 + v23 * v30;
  v27[2] = v22 + v24 * v28 - v23 * v29;
  -[VKCamera setPosition:](v4, "setPosition:", v27);
  v25 = *(_OWORD *)(MEMORY[0x1E0D266D8] + 16);
  v32[0] = *MEMORY[0x1E0D266D8];
  v32[1] = v25;
  VKCameraCalculateEnclosingRegion(v4, 0, (double *)v32, 0.0, 0.0, 0.0, 0.0);

  return *(double *)v32;
}

void sub_19F2872C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F287484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19F2879D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t md::Anchor::isGeocentric(md::Anchor *this)
{
  return 0;
}

uint64_t md::MercatorTerrainAnchor::followsTerrain(md::MercatorTerrainAnchor *this)
{
  return 1;
}

void md::AnchorManager::newAnchorAtCoordinate(unint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (**v12)();
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  size_t v41;
  _QWORD *i;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  uint64_t v62;

  *a1 = 0;
  a1[1] = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    if (a4)
    {
      v8 = operator new();
      v9 = *(_OWORD *)a3;
      v10 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)v8 = off_1E42AEF50;
      *(_QWORD *)(v8 + 8) = a2;
      *(_QWORD *)(v8 + 64) = 0;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      v61 = v9;
      v62 = v10;
      md::Anchor::setCoordinate(v8, &v61);
      *(_QWORD *)v8 = &off_1E429B250;
      v11 = (_QWORD *)operator new();
      v11[2] = 0;
      v12 = &off_1E42E7058;
    }
    else
    {
      v8 = operator new();
      v15 = *(_OWORD *)a3;
      v16 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)v8 = off_1E42AEF50;
      *(_QWORD *)(v8 + 8) = a2;
      *(_QWORD *)(v8 + 64) = 0;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      v61 = v15;
      v62 = v16;
      md::Anchor::setCoordinate(v8, &v61);
      *(_QWORD *)v8 = &off_1E428F7B8;
      v11 = (_QWORD *)operator new();
      v11[2] = 0;
      v12 = &off_1E42E6CD8;
    }
  }
  else if (*(_QWORD *)(a2 + 16))
  {
    v8 = operator new();
    v13 = *(_OWORD *)a3;
    v14 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)v8 = off_1E42AEF50;
    *(_QWORD *)(v8 + 8) = a2;
    *(_QWORD *)(v8 + 64) = 0;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    v61 = v13;
    v62 = v14;
    md::Anchor::setCoordinate(v8, &v61);
    *(_QWORD *)v8 = &off_1E4291AA8;
    *(_QWORD *)(v8 + 72) = 0;
    v11 = (_QWORD *)operator new();
    v11[2] = 0;
    v12 = &off_1E42E6DB8;
  }
  else if (a4)
  {
    v8 = operator new();
    v49 = *(_OWORD *)a3;
    v50 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)v8 = off_1E42AEF50;
    *(_QWORD *)(v8 + 8) = a2;
    *(_QWORD *)(v8 + 64) = 0;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    v61 = v49;
    v62 = v50;
    md::Anchor::setCoordinate(v8, &v61);
    *(_QWORD *)v8 = &off_1E42A3298;
    v11 = (_QWORD *)operator new();
    v11[2] = 0;
    v12 = &off_1E42E7138;
  }
  else
  {
    v8 = operator new();
    v58 = *(_OWORD *)a3;
    v59 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)v8 = off_1E42AEF50;
    *(_QWORD *)(v8 + 8) = a2;
    *(_QWORD *)(v8 + 64) = 0;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    v61 = v58;
    v62 = v59;
    md::Anchor::setCoordinate(v8, &v61);
    *(_QWORD *)v8 = &off_1E42971E8;
    v11 = (_QWORD *)operator new();
    v11[2] = 0;
    v12 = &off_1E42E6F40;
  }
  *v11 = v12;
  v11[1] = 0;
  v11[3] = v8;
  *a1 = v8;
  a1[1] = (unint64_t)v11;
  v17 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
  v18 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v17 >> 47) ^ v17);
  v19 = v18 ^ (v18 >> 47);
  v20 = 0x9DDFEA08EB382D69 * v19;
  v21 = *(_QWORD *)(a2 + 40);
  if (v21)
  {
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * v19;
      if (v20 >= v21)
        v4 = v20 % v21;
    }
    else
    {
      v4 = v20 & (v21 - 1);
    }
    v23 = *(_QWORD **)(*(_QWORD *)(a2 + 32) + 8 * v4);
    if (v23)
    {
      v24 = (_QWORD *)*v23;
      if (v24)
      {
        if (v22.u32[0] < 2uLL)
        {
          while (1)
          {
            v26 = v24[1];
            if (v26 == v20)
            {
              if (v24[2] == v8)
                return;
            }
            else if ((v26 & (v21 - 1)) != v4)
            {
              goto LABEL_28;
            }
            v24 = (_QWORD *)*v24;
            if (!v24)
              goto LABEL_28;
          }
        }
        do
        {
          v25 = v24[1];
          if (v25 == v20)
          {
            if (v24[2] == v8)
              return;
          }
          else
          {
            if (v25 >= v21)
              v25 %= v21;
            if (v25 != v4)
              break;
          }
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
    }
  }
LABEL_28:
  v27 = operator new(0x18uLL);
  *v27 = 0;
  v27[1] = v20;
  v27[2] = v8;
  v28 = (float)(unint64_t)(*(_QWORD *)(a2 + 56) + 1);
  v29 = *(float *)(a2 + 64);
  if (!v21 || (float)(v29 * (float)v21) < v28)
  {
    v30 = 1;
    if (v21 >= 3)
      v30 = (v21 & (v21 - 1)) != 0;
    v31 = v30 | (2 * v21);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v21 = *(_QWORD *)(a2 + 40);
    }
    if (prime <= v21)
    {
      if (prime >= v21)
        goto LABEL_67;
      v46 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 56) / *(float *)(a2 + 64));
      if (v21 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v46);
      }
      else
      {
        v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2)
          v46 = v48;
      }
      if (prime <= v46)
        prime = v46;
      if (prime >= v21)
      {
        v21 = *(_QWORD *)(a2 + 40);
LABEL_67:
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21)
            v4 = v20 % v21;
          else
            v4 = v20;
        }
        else
        {
          v4 = (v21 - 1) & v20;
        }
        goto LABEL_80;
      }
      if (!prime)
      {
        v60 = *(void **)(a2 + 32);
        *(_QWORD *)(a2 + 32) = 0;
        if (v60)
          operator delete(v60);
        v21 = 0;
        *(_QWORD *)(a2 + 40) = 0;
        goto LABEL_67;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v34 = operator new(8 * prime);
    v35 = *(void **)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v34;
    if (v35)
      operator delete(v35);
    v36 = 0;
    *(_QWORD *)(a2 + 40) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v36++) = 0;
    while (prime != v36);
    v38 = a2 + 48;
    v37 = *(_QWORD **)(a2 + 48);
    if (!v37)
    {
LABEL_66:
      v21 = prime;
      goto LABEL_67;
    }
    v39 = v37[1];
    v40 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v41 = v39 & v40;
      *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v41) = v38;
      for (i = (_QWORD *)*v37; *v37; i = (_QWORD *)*v37)
      {
        v43 = i[1] & v40;
        if (v43 == v41)
        {
          v37 = i;
        }
        else
        {
          v44 = *(_QWORD *)(a2 + 32);
          if (*(_QWORD *)(v44 + 8 * v43))
          {
            *v37 = *i;
            v45 = 8 * v43;
            *i = **(_QWORD **)(*(_QWORD *)(a2 + 32) + v45);
            **(_QWORD **)(*(_QWORD *)(a2 + 32) + v45) = i;
          }
          else
          {
            *(_QWORD *)(v44 + 8 * v43) = v37;
            v37 = i;
            v41 = v43;
          }
        }
      }
      goto LABEL_66;
    }
    if (v39 >= prime)
      v39 %= prime;
    *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v39) = v38;
    v51 = (_QWORD *)*v37;
    if (!*v37)
      goto LABEL_66;
    while (1)
    {
      v53 = v51[1];
      if (v53 >= prime)
        v53 %= prime;
      if (v53 != v39)
      {
        v54 = *(_QWORD *)(a2 + 32);
        if (!*(_QWORD *)(v54 + 8 * v53))
        {
          *(_QWORD *)(v54 + 8 * v53) = v37;
          goto LABEL_71;
        }
        *v37 = *v51;
        v52 = 8 * v53;
        *v51 = **(_QWORD **)(*(_QWORD *)(a2 + 32) + v52);
        **(_QWORD **)(*(_QWORD *)(a2 + 32) + v52) = v51;
        v51 = v37;
      }
      v53 = v39;
LABEL_71:
      v37 = v51;
      v51 = (_QWORD *)*v51;
      v39 = v53;
      if (!v51)
        goto LABEL_66;
    }
  }
LABEL_80:
  v55 = *(_QWORD *)(a2 + 32);
  v56 = *(_QWORD **)(v55 + 8 * v4);
  if (v56)
  {
    *v27 = *v56;
LABEL_88:
    *v56 = v27;
    goto LABEL_89;
  }
  *v27 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v27;
  *(_QWORD *)(v55 + 8 * v4) = a2 + 48;
  if (*v27)
  {
    v57 = *(_QWORD *)(*v27 + 8);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v57 >= v21)
        v57 %= v21;
    }
    else
    {
      v57 &= v21 - 1;
    }
    v56 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v57);
    goto LABEL_88;
  }
LABEL_89:
  ++*(_QWORD *)(a2 + 56);
}

void sub_19F2884AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::Anchor::setCoordinate(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  long double v5;
  long double v6;
  float64x2_t v7;
  float64_t v13;
  id WeakRetained;

  if (*(double *)a2 != *(double *)(a1 + 40)
    || *((double *)a2 + 1) != *(double *)(a1 + 48)
    || *((double *)a2 + 2) != *(double *)(a1 + 56))
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v3;
    v13 = *((double *)a2 + 1);
    v4 = *((_QWORD *)a2 + 2);
    v5 = tan(*(double *)a2 * 0.00872664626 + 0.785398163);
    v6 = log(v5);
    v7.f64[0] = v13;
    v7.f64[1] = v6;
    __asm { FMOV            V1.2D, #0.5 }
    *(float64x2_t *)(a1 + 16) = vmlaq_f64(_Q1, (float64x2_t)xmmword_19FFB32D0, v7);
    *(_QWORD *)(a1 + 32) = v4;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(WeakRetained, "anchorWorldPointDidChange:", a1);

  }
}

void sub_19F288630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_19F288698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void VKCameraCalculateEnclosingRegion(void *a1, _QWORD *a2, double *a3, float a4, float a5, float a6, float a7)
{
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  _OWORD *v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  id v44;
  void *v45;
  id v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  VKCameraState v60;
  __int128 v61;
  __int128 v62;
  _QWORD v63[36];
  CGPoint v64;

  v63[35] = *MEMORY[0x1E0C80C00];
  v13 = a1;
  objc_msgSend(v13, "footprint");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "cornerGroundPoints");

  objc_msgSend(v13, "footprint");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "cornerGroundPointsCount");

  v18 = (double *)objc_msgSend(v13, "scaledViewProjectionMatrix");
  if (v13)
  {
    objc_msgSend(v13, "cameraState");
    if (v17 >= 1)
      goto LABEL_3;
LABEL_7:
    v26 = INFINITY;
    v27 = -INFINITY;
    v20 = -INFINITY;
    v21 = INFINITY;
    goto LABEL_8;
  }
  v61 = 0u;
  v62 = 0u;
  memset(&v60.var0._rotation._imaginary._e[1], 0, 48);
  if (v17 < 1)
    goto LABEL_7;
LABEL_3:
  v58 = v18[1];
  v59 = *v18;
  v56 = v18[9];
  v57 = v18[5];
  v54 = a5 + -1.0;
  v55 = v18[13];
  v52 = a6 + -1.0;
  v53 = 1.0 - a7;
  v50 = v18[4];
  v51 = 1.0 - a4;
  v19 = v17;
  v20 = -INFINITY;
  v48 = v18[8];
  v49 = v18[3];
  v47 = v18[7];
  v21 = INFINITY;
  v22 = v63;
  v24 = v18[11];
  v23 = v18[12];
  v25 = (double *)(v15 + 16);
  v26 = INFINITY;
  v27 = -INFINITY;
  v28 = v18[15];
  do
  {
    v29 = *(v25 - 2);
    v30 = *(v25 - 1);
    v31 = *v25;
    v25 += 3;
    v32 = v23 + v29 * v59 + v30 * v50 + v31 * v48;
    v33 = v55 + v29 * v58 + v30 * v57 + v31 * v56;
    v34 = 1.0 / (v28 + v29 * v49 + v30 * v47 + v31 * v24);
    v35 = fmin(fmin(fmax(v34 * v33, v52), v51), 1.0);
    v64.x = fmin(fmax(v34 * v32, v54), v53) * 0.5 + 0.5;
    v64.y = v35 * 0.5 + 0.5;
    VKCameraMakeGroundPoint(&v60, v64, v35, &v60.var0._rotation._imaginary._e[1]);
    v21 = fmin(v21, v60.var0._translation._e[1]);
    v20 = fmax(v20, v60.var0._translation._e[1]);
    *((_QWORD *)v22 - 1) = *(_QWORD *)&v60.var0._translation._e[1];
    v26 = fmin(v26, v60.var0._translation._e[2]);
    v27 = fmax(v27, v60.var0._translation._e[2]);
    *v22 = *(_OWORD *)&v60.var0._translation._e[2];
    v22 = (_OWORD *)((char *)v22 + 24);
    --v19;
  }
  while (v19);
LABEL_8:
  v36 = *(double *)(MEMORY[0x1E0D266F8] + 8);
  v37 = *MEMORY[0x1E0D266F8] * v21;
  v38 = v36 - v27 * v36;
  v39 = *MEMORY[0x1E0D266F8] * (v20 - v21);
  v40 = v36 * (v27 - v26);
  if (a3)
  {
    *a3 = v37;
    a3[1] = v38;
    a3[2] = v39;
    a3[3] = v40;
  }
  if (a2)
  {
    v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D27208]), "initWithMapRect:", v37, v38, v39, v40);
    if (v17 >= 1)
    {
      v42 = v17;
      v43 = v63;
      do
      {
        v44 = objc_alloc(MEMORY[0x1E0D27140]);
        GEOCoordinate2DForMapPoint();
        v45 = (void *)objc_msgSend(v44, "initWithCoordinate:");
        objc_msgSend(v41, "addVertex:", v45);

        v43 += 3;
        --v42;
      }
      while (v42);
    }
    v46 = objc_retainAutorelease(v41);
    *a2 = v46;

  }
}

void sub_19F288C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id md::StandardRouteOverlayCache::polylineForRoute(md::StandardRouteOverlayCache *this, GEOComposedRoute *a2)
{
  GEOComposedRoute *v3;
  char *v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  GEOComposedRoute *v12;
  BOOL v13;
  GEOComposedRoute *v14;
  _BOOL4 v15;
  char *v16;
  char *v17;
  BOOL v18;
  id v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (char *)*((_QWORD *)this + 6);
  v5 = (char *)this + 56;
  if (v4 == (char *)this + 56)
  {
LABEL_19:
    v19 = 0;
    goto LABEL_22;
  }
  while (1)
  {
    v6 = *((id *)v4 + 4);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      objc_msgSend(v6, "polylines", 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (v8)
      {
        v9 = *(_QWORD *)v22;
        while (2)
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v22 != v9)
              objc_enumerationMutation(v7);
            v11 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
            objc_msgSend(v11, "composedRoute");
            v12 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
            v13 = v12 == v3;

            if (v13)
            {
              v19 = v11;

              goto LABEL_21;
            }
          }
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
          if (v8)
            continue;
          break;
        }
      }

      goto LABEL_13;
    }
    objc_msgSend(v6, "composedRoute");
    v14 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
    v15 = v14 == v3;

    if (v15)
      break;
LABEL_13:

    v16 = (char *)*((_QWORD *)v4 + 1);
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = *(char **)v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (char *)*((_QWORD *)v4 + 2);
        v18 = *(_QWORD *)v17 == (_QWORD)v4;
        v4 = v17;
      }
      while (!v18);
    }
    v4 = v17;
    if (v17 == v5)
      goto LABEL_19;
  }
  v6 = v6;
  v19 = v6;
LABEL_21:

LABEL_22:
  return v19;
}

void sub_19F288F04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F28905C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

double md::MapDataAccess::heightAtCoordinate(unsigned __int8 *a1, _OWORD *a2)
{
  unsigned int v2;
  double result;
  int8x8_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x8_t *v9;
  int8x8_t v10;
  uint8x8_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26[3];
  double v27;

  v2 = a1[8];
  result = 0.0;
  if (v2 > 6 || ((1 << v2) & 0xD) != 0)
    return result;
  if (((1 << v2) & 0x70) == 0)
  {
    v27 = 0.0;
    v8 = *(_QWORD *)a1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 1241))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v8 + 896) + 264);
      *(_OWORD *)v26 = *a2;
      v18 = altitude::IntersectorHeight::heightAtLatLon(*(_QWORD *)(v17 + 712), v26, &v27, 0xEu);
      result = v27;
      if (v18)
        return 0.0;
      return result;
    }
    v9 = *(int8x8_t **)(v8 + 1120);
    v10 = v9[2];
    if (!*(_QWORD *)&v10)
      return result;
    v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = 0x17767EADC5B287BLL;
      if (*(_QWORD *)&v10 <= 0x17767EADC5B287BuLL)
        v12 = 0x17767EADC5B287BuLL % *(_QWORD *)&v10;
    }
    else
    {
      v12 = (*(_QWORD *)&v10 - 1) & 0x17767EADC5B287BLL;
    }
    v20 = *(_QWORD **)(*(_QWORD *)&v9[1] + 8 * v12);
    if (!v20)
      return result;
    v21 = (_QWORD *)*v20;
    if (!v21)
      return result;
    if (v11.u32[0] < 2uLL)
    {
      v22 = *(_QWORD *)&v10 - 1;
      while (1)
      {
        v24 = v21[1];
        if (v24 == 0x17767EADC5B287BLL)
        {
          if (v21[2] == 0x17767EADC5B287BLL)
            goto LABEL_55;
        }
        else if ((v24 & v22) != v12)
        {
          return result;
        }
        v21 = (_QWORD *)*v21;
        if (!v21)
          return result;
      }
    }
    while (1)
    {
      v23 = v21[1];
      if (v23 == 0x17767EADC5B287BLL)
      {
        if (v21[2] == 0x17767EADC5B287BLL)
        {
LABEL_55:
          v25 = v21[5];
          if (v25 && *(_BYTE *)(v25 + 56))
            return COERCE_DOUBLE(md::ElevationLogic::heightAtCoordinate((_QWORD *)v25, (uint64_t)a2));
          return result;
        }
      }
      else
      {
        if (v23 >= *(_QWORD *)&v10)
          v23 %= *(_QWORD *)&v10;
        if (v23 != v12)
          return result;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        return result;
    }
  }
  v4 = *(int8x8_t **)(*(_QWORD *)a1 + 1120);
  v5 = v4[2];
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x17767EADC5B287BLL;
      if (*(_QWORD *)&v5 <= 0x17767EADC5B287BuLL)
        v7 = 0x17767EADC5B287BuLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x17767EADC5B287BLL;
    }
    v13 = *(_QWORD **)(*(_QWORD *)&v4[1] + 8 * v7);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v6.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v16 = v14[1];
            if (v16 == 0x17767EADC5B287BLL)
            {
              if (v14[2] == 0x17767EADC5B287BLL)
                goto LABEL_51;
            }
            else if ((v16 & v15) != v7)
            {
              return result;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              return result;
          }
        }
        do
        {
          v19 = v14[1];
          if (v19 == 0x17767EADC5B287BLL)
          {
            if (v14[2] == 0x17767EADC5B287BLL)
            {
LABEL_51:
              v25 = v14[5];
              if (!v25 || !*(_BYTE *)(v25 + 56) || !*(_BYTE *)(*(_QWORD *)(v25 + 160) + 80))
                return result;
              return COERCE_DOUBLE(md::ElevationLogic::heightAtCoordinate((_QWORD *)v25, (uint64_t)a2));
            }
          }
          else
          {
            if (v19 >= *(_QWORD *)&v5)
              v19 %= *(_QWORD *)&v5;
            if (v19 != v7)
              return result;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  return result;
}

float md::LabelAnimator::setupTextMorphAnimation(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, float result)
{
  int v7;
  int v13;
  uint64_t v14;
  BOOL v15;
  char v17;
  char v18;
  unsigned __int8 v19;
  __int128 *v20;
  __n128 v21;
  __int128 v22;
  __int128 *v23;
  __n128 v24;
  float v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (!(a2 | a3))
    return result;
  v7 = a6;
  v13 = BYTE4(a6);
  if (a2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 200))(&v31, a2);
    v14 = v31;
    v15 = v31 != v32;
    if (v31 != v32 || a3 == 0)
    {
      if (!v31)
        goto LABEL_10;
LABEL_9:
      v32 = v14;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 40))(v34, v14, v33 - v14);
      goto LABEL_10;
    }
  }
  else if (!a3)
  {
    return result;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a3 + 200))(&v26, a3);
  v22 = v26;
  v15 = (_QWORD)v26 != *((_QWORD *)&v26 + 1);
  if ((_QWORD)v26)
  {
    *((_QWORD *)&v26 + 1) = v26;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)&v27 + 1) + 40))(*((_QWORD *)&v27 + 1), v22, v27 - v22);
  }
  if (!a2)
  {
    if ((_QWORD)v22 != *((_QWORD *)&v22 + 1))
      return result;
    v19 = 1;
    goto LABEL_34;
  }
  v14 = v31;
  if (v31)
    goto LABEL_9;
LABEL_10:
  if (!v15)
  {
    if (a5 == 1)
      v17 = 5;
    else
      v17 = 4;
    if (a4 == 1)
      v18 = v17;
    else
      v18 = 3;
    if (!a3)
      v18 = 1;
    v19 = a2 ? v18 : 1;
    v20 = md::LabelAnimator::resolveParams(a1, 0, v19, 0, 1);
    v27 = v20[1];
    v28 = v20[2];
    v29 = v20[3];
    if (v13)
    {
      v21 = (__n128)*v20;
      v26 = *v20;
      LODWORD(v27) = v7;
      LODWORD(v28) = v7;
      LODWORD(v29) = v7;
      v30 = v7;
    }
    else
    {
      v30 = *((_DWORD *)v20 + 16);
      v21 = (__n128)*v20;
      v26 = *v20;
    }
    result = md::LabelAnimator::createMorphAnimation(a1, a2, (float *)a3, 0, (uint64_t)&v26, (float *)&v31, v21);
    if (a3)
    {
LABEL_34:
      v23 = md::LabelAnimator::resolveParams(a1, 1, v19, 0, 1);
      v27 = v23[1];
      v28 = v23[2];
      v29 = v23[3];
      if (v13)
      {
        v24 = (__n128)*v23;
        v26 = *v23;
        LODWORD(v27) = v7;
        LODWORD(v28) = v7;
        LODWORD(v29) = v7;
        v30 = v7;
      }
      else
      {
        v30 = *((_DWORD *)v23 + 16);
        v24 = (__n128)*v23;
        v26 = *v23;
      }
      return md::LabelAnimator::createMorphAnimation(a1, a3, (float *)a2, 1, (uint64_t)&v26, &v25, v24);
    }
  }
  return result;
}

void sub_19F289628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  if (v24)
  {
    if (a21)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a24 + 40))(a24, a21, a23 - a21);
  }
  _Unwind_Resume(exception_object);
}

float md::LabelAnimator::createMorphAnimation(uint64_t *a1, uint64_t a2, float *a3, int a4, uint64_t a5, float *a6, __n128 a7)
{
  float *v9;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  unsigned __int8 v24;
  float v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  unsigned __int8 v31;
  float v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  float result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  unint64_t v57;
  uint64_t v58;

  v9 = a3;
  if (a3)
  {
    v12 = (*(float (**)(float *))(*(_QWORD *)a3 + 296))(a3);
    a7.n128_f32[0] = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 296))(a2);
    v13 = v12 / a7.n128_f32[0];
    if (a4 == 1)
    {
      v14 = (*(float (**)(float *))(*(_QWORD *)v9 + 304))(v9) + v9[76];
      a7.n128_f32[0] = v15 + v9[77];
LABEL_5:
      v16 = v13;
      v54 = a7.n128_f32[0];
      v55 = v14;
      v57 = __PAIR64__(a7.n128_u32[0], LODWORD(v14));
      v17 = 0x3F80000000000000;
      v13 = 1.0;
      v9 = (float *)a2;
      goto LABEL_7;
    }
  }
  else
  {
    v13 = 0.0;
    v14 = 0.0;
    a7.n128_u32[0] = 0;
    if (a4 == 1)
      goto LABEL_5;
  }
  *(float *)&v57 = (*(float (**)(uint64_t, __n128))(*(_QWORD *)a2 + 304))(a2, a7) + *(float *)(a2 + 304);
  *((float *)&v57 + 1) = v18 + *(float *)(a2 + 308);
  v17 = 1065353216;
  v16 = 1.0;
  v54 = *((float *)&v57 + 1);
  v55 = *(float *)&v57;
  if (!v9)
  {
    v19 = 0.0;
    v21 = 0.0;
    goto LABEL_8;
  }
LABEL_7:
  v19 = (*(float (**)(float *))(*(_QWORD *)v9 + 304))(v9) + v9[76];
  v21 = v20 + v9[77];
LABEL_8:
  v22 = *(float *)(a5 + 8);
  v23 = operator new();
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)v23 = 0;
  {
    v51 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v51, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v25 = fmaxf(v22, 0.0);
  *(_QWORD *)(v23 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v23 + 32) = 0;
  *(_WORD *)(v23 + 40) = 0;
  v58 = v23;
  v26 = (uint64_t *)a1[8];
  if ((unint64_t)v26 >= a1[9])
  {
    v27 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)(a1 + 7), &v58);
  }
  else
  {
    if (v26)
      *v26 = v23;
    v27 = v26 + 1;
  }
  a1[8] = (uint64_t)v27;
  v28 = *(v27 - 1);
  md::LabelAnimationTrack::addItem(v28, *(unsigned __int8 *)(a5 + 4), 1, v25, *(float *)(a5 + 16));
  v29 = *(float *)(a5 + 24);
  v30 = operator new();
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)v30 = 0;
  {
    v52 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v52, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v32 = fmaxf(v29, 0.0);
  *(_QWORD *)(v30 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v30 + 32) = 0;
  *(_WORD *)(v30 + 40) = 0;
  v58 = v30;
  v33 = (uint64_t *)a1[8];
  if ((unint64_t)v33 >= a1[9])
  {
    v34 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)(a1 + 7), &v58);
  }
  else
  {
    if (v33)
      *v33 = v30;
    v34 = v33 + 1;
  }
  a1[8] = (uint64_t)v34;
  v35 = *(v34 - 1);
  md::LabelAnimationTrack::addItem(v35, *(unsigned __int8 *)(a5 + 20), 1, v32, *(float *)(a5 + 32));
  v37 = a1[3];
  v36 = a1[4];
  if (v36 - v37 == -144)
  {
    while (v36 != v37)
    {
      v39 = *(void **)(v36 - 144);
      v36 -= 144;
      v38 = v39;
      if (v39 != *(void **)(v36 + 16))
        free(v38);
    }
    a1[4] = v37;
  }
  else
  {
    std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append(a1 + 3);
    v37 = a1[4];
  }
  v40 = a1[3];
  *(_BYTE *)(a2 + 563) = 57 * ((v37 - v40) >> 4) - 1;
  v41 = (57 * ((v37 - v40) >> 4) - 1);
  v42 = v40 + 144 * v41;
  *(_QWORD *)(v42 + 72) = v28;
  *(_QWORD *)(v42 + 80) = v17;
  *(_QWORD *)(v42 + 56) = v35;
  *(float *)(v42 + 64) = v16;
  *(float *)(v42 + 68) = v13;
  v43 = fmaxf(*(float *)(a5 + 40), 0.0);
  if (*(_BYTE *)(a5 + 36) && v57 != __PAIR64__(LODWORD(v21), LODWORD(v19)))
  {
    v44 = operator new();
    *(_QWORD *)(v44 + 8) = 0;
    *(_QWORD *)(v44 + 16) = 0;
    *(_QWORD *)v44 = 0;
    {
      v53 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v44 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v44 + 32) = 0;
    *(_WORD *)(v44 + 40) = 0;
    v58 = v44;
    v46 = (uint64_t *)a1[8];
    if ((unint64_t)v46 >= a1[9])
    {
      v47 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)(a1 + 7), &v58);
    }
    else
    {
      if (v46)
        *v46 = v44;
      v47 = v46 + 1;
    }
    a1[8] = (uint64_t)v47;
    v48 = *(v47 - 1);
    md::LabelAnimationTrack::addItem(v48, *(unsigned __int8 *)(a5 + 36), 1, v43, *(float *)(a5 + 48));
    v49 = v40 + 144 * v41;
    *(_QWORD *)(v49 + 88) = v48;
    *(float *)(v49 + 96) = v55;
    *(float *)(v49 + 100) = v54;
    *(float *)(v49 + 104) = v19;
    *(float *)(v49 + 108) = v21;
    *(_WORD *)(v49 + 112) = 0;
  }
  result = fmaxf(fmaxf(*(float *)(a5 + 16) + v25, *(float *)(a5 + 32) + v32), *(float *)(a5 + 48) + v43);
  *a6 = result;
  return result;
}

void md::LabelAnimator::createFadeAnimation(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, float *a5, float a6)
{
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  int8x8_t *v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  float v30;
  int8x8_t *v31;
  int v32;
  uint64_t v33;
  geo::read_write_lock *v34;
  const char *v35;
  malloc_zone_t *zone;
  uint64_t v37;
  int v38;
  uint64_t v39;
  geo::read_write_lock *v40;
  const char *v41;
  malloc_zone_t *v42;
  uint64_t v43;
  uint64_t v44;

  *a5 = a6;
  v13 = a1[3];
  v14 = a1[4];
  v12 = a1 + 3;
  if (v14 - v13 == -144)
  {
    while (v14 != v13)
    {
      v16 = *(void **)(v14 - 144);
      v14 -= 144;
      v15 = v16;
      if (v16 != *(void **)(v14 + 16))
        free(v15);
    }
    a1[4] = v13;
  }
  else
  {
    std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append(a1 + 3);
    v13 = a1[4];
  }
  v17 = 57 * ((v13 - *v12) >> 4) - 1;
  *(_BYTE *)(a2 + 563) = 57 * ((v13 - *v12) >> 4) - 1;
  if (*(_BYTE *)(a4 + 4))
  {
    v18 = operator new();
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)v18 = 0;
    if ((v19 & 1) == 0)
    {
      v43 = v18;
      v18 = v43;
      if (v32)
      {
        v33 = operator new();
        *(_QWORD *)(v33 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v33 + 24) = "VectorKitLabels";
        *(_OWORD *)(v33 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v33 = &off_1E42B5668;
        *(_QWORD *)(v33 + 8) = "VectorKitLabels";
        *(_OWORD *)(v33 + 72) = 0u;
        *(_OWORD *)(v33 + 88) = 0u;
        *(_OWORD *)(v33 + 104) = 0u;
        *(_OWORD *)(v33 + 120) = 0u;
        *(_OWORD *)(v33 + 136) = 0u;
        *(_OWORD *)(v33 + 152) = 0u;
        *(_OWORD *)(v33 + 168) = 0u;
        *(_OWORD *)(v33 + 184) = 0u;
        *(_OWORD *)(v33 + 200) = 0u;
        *(_OWORD *)(v33 + 216) = 0u;
        *(_OWORD *)(v33 + 232) = 0u;
        *(_QWORD *)(v33 + 248) = 0;
        *(_OWORD *)(v33 + 56) = 0u;
        v34 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v33 + 56), 0);
        if ((_DWORD)v34)
          geo::read_write_lock::logFailure(v34, (uint64_t)"initialization", v35);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v33 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v33 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v33;
        v18 = v43;
      }
    }
    *(_QWORD *)(v18 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v18 + 32) = 0;
    *(_WORD *)(v18 + 40) = 0;
    v44 = v18;
    v20 = (uint64_t *)a1[8];
    if ((unint64_t)v20 >= a1[9])
    {
      v21 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)(a1 + 7), &v44);
    }
    else
    {
      if (v20)
        *v20 = v18;
      v21 = v20 + 1;
    }
    a1[8] = (uint64_t)v21;
    v22 = *(v21 - 1);
    v23 = *(float *)(a4 + 8) + a6;
    md::LabelAnimationTrack::addItem(v22, *(unsigned __int8 *)(a4 + 4), 1, v23, *(float *)(a4 + 16));
    v24 = (int8x8_t *)(a1[3] + 144 * v17);
    v24[9] = (int8x8_t)v22;
    v24[10] = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a3 == 1), 0x1FuLL)), (int8x8_t)0x3F80000000000000, (int8x8_t)1065353216);
    *a5 = fmaxf(*a5, *(float *)(a4 + 16) + v23);
  }
  if (*(_BYTE *)(a4 + 20))
  {
    v25 = operator new();
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v25 + 16) = 0;
    *(_QWORD *)v25 = 0;
    if ((v26 & 1) == 0)
    {
      v37 = v25;
      v25 = v37;
      if (v38)
      {
        v39 = operator new();
        *(_QWORD *)(v39 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v39 + 24) = "VectorKitLabels";
        *(_OWORD *)(v39 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v39 = &off_1E42B5668;
        *(_QWORD *)(v39 + 8) = "VectorKitLabels";
        *(_OWORD *)(v39 + 72) = 0u;
        *(_OWORD *)(v39 + 88) = 0u;
        *(_OWORD *)(v39 + 104) = 0u;
        *(_OWORD *)(v39 + 120) = 0u;
        *(_OWORD *)(v39 + 136) = 0u;
        *(_OWORD *)(v39 + 152) = 0u;
        *(_OWORD *)(v39 + 168) = 0u;
        *(_OWORD *)(v39 + 184) = 0u;
        *(_OWORD *)(v39 + 200) = 0u;
        *(_OWORD *)(v39 + 216) = 0u;
        *(_OWORD *)(v39 + 232) = 0u;
        *(_QWORD *)(v39 + 248) = 0;
        *(_OWORD *)(v39 + 56) = 0u;
        v40 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v39 + 56), 0);
        if ((_DWORD)v40)
          geo::read_write_lock::logFailure(v40, (uint64_t)"initialization", v41);
        v42 = malloc_create_zone(0, 0);
        *(_QWORD *)(v39 + 48) = v42;
        malloc_set_zone_name(v42, "VectorKitLabels");
        *(_QWORD *)(v39 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v39;
        v25 = v37;
      }
    }
    *(_QWORD *)(v25 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v25 + 32) = 0;
    *(_WORD *)(v25 + 40) = 0;
    v44 = v25;
    v27 = (uint64_t *)a1[8];
    if ((unint64_t)v27 >= a1[9])
    {
      v28 = std::vector<std::unique_ptr<md::LabelAnimationTrack>,geo::StdAllocator<std::unique_ptr<md::LabelAnimationTrack>,mdm::Allocator>>::__emplace_back_slow_path<md::LabelAnimationTrack*>((uint64_t)(a1 + 7), &v44);
    }
    else
    {
      if (v27)
        *v27 = v25;
      v28 = v27 + 1;
    }
    a1[8] = (uint64_t)v28;
    v29 = *(v28 - 1);
    v30 = *(float *)(a4 + 24) + a6;
    md::LabelAnimationTrack::addItem(v29, *(unsigned __int8 *)(a4 + 20), 1, v30, *(float *)(a4 + 32));
    v31 = (int8x8_t *)(a1[3] + 144 * v17);
    v31[7] = (int8x8_t)v29;
    v31[8] = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a3 == 1), 0x1FuLL)), (int8x8_t)0x3F80000000000000, (int8x8_t)1065353216);
    *a5 = fmaxf(*a5, *(float *)(a4 + 32) + v30);
  }
}

uint64_t md::LabelAnimationTrack::addItem(uint64_t result, unsigned int a2, char a3, float a4, float a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float (*v12)(float);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float (*v18)(float);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v9 = result;
  v10 = *(_QWORD *)(result + 8);
  v11 = *(_QWORD *)(result + 16);
  if (v10 >= v11)
  {
    v13 = (uint64_t)(v10 - *(_QWORD *)result) >> 5;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 59)
      abort();
    v15 = v11 - *(_QWORD *)result;
    if (v15 >> 4 > v14)
      v14 = v15 >> 4;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    if (v14)
    {
      v16 = 32 * v14;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 32 * v14, 8);
      v17 = result + 32 * v13;
      v14 = result + v16;
      if (result)
      {
        *(float *)v17 = a4;
        *(float *)(v17 + 4) = fmaxf(a5, 0.000001);
        *(_QWORD *)(v17 + 8) = 0;
        *(_BYTE *)(v17 + 16) = a3;
        if (a2 > 0x13)
          v18 = EaseConstantOne;
        else
          v18 = (float (*)(float))easingFunctions[a2];
        *(_QWORD *)(v17 + 24) = v18;
      }
    }
    else
    {
      v17 = 32 * v13;
    }
    v19 = v17 + 32;
    v21 = *(_QWORD *)v9;
    v20 = *(_QWORD *)(v9 + 8);
    if (v20 != *(_QWORD *)v9)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 16);
        *(_OWORD *)(v17 - 32) = *(_OWORD *)(v20 - 32);
        *(_OWORD *)(v17 - 16) = v22;
        v17 -= 32;
        v20 -= 32;
      }
      while (v20 != v21);
      v20 = *(_QWORD *)v9;
    }
    *(_QWORD *)v9 = v17;
    *(_QWORD *)(v9 + 8) = v19;
    v23 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v14;
    if (v20)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), v20, v23 - v20);
  }
  else
  {
    if (v10)
    {
      *(float *)v10 = a4;
      *(float *)(v10 + 4) = fmaxf(a5, 0.000001);
      *(_QWORD *)(v10 + 8) = 0;
      *(_BYTE *)(v10 + 16) = a3;
      if (a2 > 0x13)
        v12 = EaseConstantOne;
      else
        v12 = (float (*)(float))easingFunctions[a2];
      *(_QWORD *)(v10 + 24) = v12;
    }
    v19 = v10 + 32;
  }
  *(_QWORD *)(v9 + 8) = v19;
  return result;
}

void std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;

  v2 = a1[1];
  v3 = a1[2];
  if (v3 == v2)
  {
    v4 = 0x1C71C71C71C71C7;
    v5 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 4);
    v6 = v5 + 1;
    if (v5 + 1 > 0x1C71C71C71C71C7)
      abort();
    if (2 * v5 > v6)
      v6 = 2 * v5;
    if (v5 < 0xE38E38E38E38E3)
      v4 = v6;
    if (v4)
    {
      v7 = 144 * v4;
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 144 * v4, 8);
      v9 = v8 + 144 * v5;
      v10 = v8 + v7;
      if (v8)
      {
        *(_OWORD *)(v9 + 112) = 0u;
        *(_OWORD *)(v9 + 128) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 96) = 0u;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_QWORD *)v9 = v9 + 32;
        *(_QWORD *)(v9 + 8) = v9 + 32;
        *(_QWORD *)(v9 + 16) = v9 + 32;
        *(_QWORD *)(v9 + 24) = 1;
        v11 = v8 + 144 * v5;
        *(_DWORD *)(v11 + 68) = 1065353216;
        *(_DWORD *)(v11 + 84) = 1065353216;
        *(_QWORD *)(v11 + 96) = 0;
        *(_QWORD *)(v11 + 104) = 0;
        *(_QWORD *)(v11 + 88) = 0;
        *(_WORD *)(v11 + 112) = 0;
        *(_QWORD *)(v11 + 120) = 0;
        *(_QWORD *)(v11 + 128) = 0;
        *(_DWORD *)(v11 + 136) = 0;
      }
    }
    else
    {
      v9 = 144 * v5;
      v10 = 0;
    }
    v12 = v9 + 144;
    v13 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      *a1 = v9;
      a1[1] = v12;
      v31 = a1[2];
      a1[2] = v10;
    }
    else
    {
      do
      {
        v20 = v9;
        v21 = v14;
        v22 = v9 - 112;
        *(_QWORD *)(v9 - 144) = v9 - 112;
        v9 -= 144;
        v24 = *(_QWORD *)(v14 - 144);
        v14 -= 144;
        v23 = v24;
        *(_QWORD *)(v9 + 8) = v22;
        *(_QWORD *)(v9 + 16) = v22;
        v25 = *(_QWORD *)(v14 + 16);
        *(_QWORD *)(v9 + 24) = *(_QWORD *)(v14 + 24);
        if (v24 == v25)
        {
          *(_QWORD *)(v20 - 136) = v22 + *(_QWORD *)(v21 - 136) - v23;
          v26 = *(_QWORD *)(v21 - 136);
          if (v23 != v26)
          {
            v27 = 0;
            do
            {
              v28 = v20 + v27;
              v29 = *(_OWORD *)(v23 + v27);
              *(_QWORD *)(v28 - 96) = *(_QWORD *)(v23 + v27 + 16);
              *(_OWORD *)(v28 - 112) = v29;
              v27 += 24;
            }
            while (v23 + v27 != v26);
          }
        }
        else
        {
          v15 = *(_QWORD *)(v21 - 136);
          *(_QWORD *)(v20 - 144) = v23;
          *(_QWORD *)(v20 - 136) = v15;
          *(_OWORD *)v14 = 0uLL;
          *(_OWORD *)(v14 + 16) = 0uLL;
        }
        v16 = *(_OWORD *)(v21 - 88);
        *(_OWORD *)(v20 - 72) = *(_OWORD *)(v21 - 72);
        *(_OWORD *)(v20 - 88) = v16;
        v17 = *(_OWORD *)(v21 - 56);
        v18 = *(_OWORD *)(v21 - 40);
        v19 = *(_OWORD *)(v21 - 24);
        *(_DWORD *)(v20 - 8) = *(_DWORD *)(v21 - 8);
        *(_OWORD *)(v20 - 24) = v19;
        *(_OWORD *)(v20 - 40) = v18;
        *(_OWORD *)(v20 - 56) = v17;
      }
      while (v14 != v13);
      v14 = *a1;
      v30 = a1[1];
      *a1 = v9;
      a1[1] = v12;
      v31 = a1[2];
      a1[2] = v10;
      while (v30 != v14)
      {
        v33 = *(void **)(v30 - 144);
        v30 -= 144;
        v32 = v33;
        if (v33 != *(void **)(v30 + 16))
          free(v32);
      }
    }
    if (v14)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v14, v31 - v14);
  }
  else
  {
    if (v2)
    {
      *(_OWORD *)(v2 + 80) = 0u;
      *(_OWORD *)(v2 + 96) = 0u;
      *(_OWORD *)(v2 + 112) = 0u;
      *(_OWORD *)(v2 + 128) = 0u;
      *(_OWORD *)(v2 + 48) = 0u;
      *(_OWORD *)(v2 + 64) = 0u;
      *(_OWORD *)(v2 + 32) = 0u;
      *(_QWORD *)v2 = v2 + 32;
      *(_QWORD *)(v2 + 8) = v2 + 32;
      *(_QWORD *)(v2 + 16) = v2 + 32;
      *(_QWORD *)(v2 + 24) = 1;
      *(_DWORD *)(v2 + 68) = 1065353216;
      *(_DWORD *)(v2 + 84) = 1065353216;
      *(_QWORD *)(v2 + 96) = 0;
      *(_QWORD *)(v2 + 104) = 0;
      *(_QWORD *)(v2 + 88) = 0;
      *(_WORD *)(v2 + 112) = 0;
      *(_QWORD *)(v2 + 120) = 0;
      *(_QWORD *)(v2 + 128) = 0;
      *(_DWORD *)(v2 + 136) = 0;
    }
    a1[1] = v2 + 144;
  }
}

float md::LabelPart::partAnimationOrigin(md::LabelPart *this)
{
  return 0.0;
}

float md::LabelPart::animationSize(md::LabelPart *this)
{
  float *v1;
  float v2;
  float v3;
  float result;

  v1 = (float *)*((_QWORD *)this + 3);
  v2 = v1[20];
  v3 = v1[18];
  result = 0.0;
  if (v2 >= v3 && v1[21] >= v1[19])
    return v2 - v3;
  return result;
}

float md::TextLabelPart::animationSize(md::TextLabelPart *this)
{
  return *((float *)this + 157);
}

float md::IconLabelPart::partAnimationOrigin(md::IconLabelPart *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 80);
  if (v1)
    return *(float *)(v1 + 88) - *(float *)(v1 + 80);
  else
    return 0.0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addTiling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 120);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xCu, 268);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C0FF8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1228;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 120);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addSaturationRemapRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 192);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x15u, 277);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C0FF8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1228;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 192);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t *gms::ZoomablePropertyStore<gm::Matrix<float,2,1>>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t **v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t *v33;

  v4 = result;
  v5 = *a2;
  v6 = *a3;
  v7 = (_WORD)v6 << 8;
  v8 = *a4;
  if (result[7])
  {
    v9 = (uint64_t *)result[5];
    v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      v16 = (_QWORD *)result[5];
    }
    else
    {
      v11 = 0;
      v12 = (uint64_t *)result[5];
      do
      {
        v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            v14 = (uint64_t **)v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (uint64_t **)v12[2];
            v15 = *v14 == v12;
            v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      v16 = (_QWORD *)result[5];
      do
      {
        v17 = v11 >> 1;
        v18 = v16;
        if (v11 != 1)
        {
          v20 = v11 >> 1;
          v21 = v16;
          do
          {
            v23 = (_QWORD *)v21[1];
            if (v23)
            {
              do
              {
                v18 = v23;
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v21[2];
                v15 = *v18 == (_QWORD)v21;
                v21 = v18;
              }
              while (!v15);
            }
            v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 29) < v6)
        {
          v19 = (_QWORD *)v18[1];
          if (v19)
          {
            do
            {
              v16 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v18[2];
              v15 = *v16 == (_QWORD)v18;
              v18 = v16;
            }
            while (!v15);
          }
          v17 = v11 + ~v17;
        }
        v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 28) >= v6)
    {
      if (v16 == v9)
        goto LABEL_46;
      v27 = *v16;
      if (*v16)
      {
        do
        {
          v28 = v27;
          v27 = *(_QWORD *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = v16[2];
          v15 = *(_QWORD *)v28 == (_QWORD)v16;
          v16 = (_QWORD *)v28;
        }
        while (v15);
      }
      if (v5 >= *(unsigned __int8 *)(v28 + 29))
      {
LABEL_46:
        v29 = *v10;
        v25 = (uint64_t **)(result + 6);
        if (!*v10)
          goto LABEL_53;
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v29;
            v30 = *((unsigned __int8 *)v29 + 29);
            if (v6 >= v30)
              break;
            v29 = *v25;
            v10 = v25;
            if (!*v25)
              goto LABEL_53;
          }
          if (v30 >= v6)
            break;
          v29 = v25[1];
          if (!v29)
            goto LABEL_52;
        }
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(result + 6);
    v24 = result[6];
    if (!v24)
    {
      v25 = (uint64_t **)(result + 6);
LABEL_53:
      v31 = operator new(0x28uLL);
      v31[14] = v7 | v5;
      *((_QWORD *)v31 + 4) = v8;
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = v25;
      *v10 = (uint64_t *)v31;
      v32 = *(_QWORD *)v4[5];
      if (v32)
      {
        v4[5] = v32;
        v33 = *v10;
      }
      else
      {
        v33 = (uint64_t *)v31;
      }
      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[6], v33);
      ++v4[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        v25 = (uint64_t **)v24;
        v26 = *(unsigned __int8 *)(v24 + 29);
        if (v6 >= v26)
          break;
        v24 = (uint64_t)*v25;
        v10 = v25;
        if (!*v25)
          goto LABEL_53;
      }
      if (v26 >= v6)
        break;
      v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addBrightnessRemapRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 200);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x16u, 278);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C0FF8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1228;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 200);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::NonZoomablePropertyStore<gm::Matrix<float,2,1>>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 12) = v4;
  return result;
}

uint64_t md::LabelRenderer::renderLayers(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;

  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = 0;
  if (a2 != a3)
  {
    v7 = a3;
    v8 = a2;
    v9 = result;
    do
    {
      v10 = v8;
      if (v8 != v7)
      {
        v16 = v7 - v8;
        v17 = *(char *)(*v8 + 2);
        do
        {
          v18 = v16 >> 1;
          v19 = &v8[v16 >> 1];
          v20 = *(char *)(*v19 + 2);
          if (v17 >= v20 && (v17 != v20 || *(float *)(*v10 + 24) <= *(float *)(*v19 + 24)))
          {
            v8 = v19 + 1;
            v18 = v16 + ~v18;
          }
          v16 = v18;
        }
        while (v18);
      }
      v24 = 0;
      v25 = 0;
      v22 = 0;
      v23 = 0;
      if (v10 != v8)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        do
        {
          v15 = *v10;
          if (v11
            && (*(unsigned __int8 *)(v12 + 8) != *(unsigned __int8 *)(v15 + 8)
             || *(unsigned __int8 *)(v12 + 4) != *(unsigned __int8 *)(v15 + 4)
             || *(_QWORD *)(v12 + 16) != *(_QWORD *)(v15 + 16)
             || *(unsigned __int8 *)(v12 + 9) != *(unsigned __int8 *)(v15 + 9)
             || *(_BYTE *)(v12 + 29) != 1
             || *(_BYTE *)(v15 + 29) != 1
             || !*(_BYTE *)(v15 + 10)))
          {
            result = md::LabelRenderer::addGlyphRenderItem(v9, (unsigned int *)&v24, a4, a5, 1);
            v12 = 0;
            v11 = 0;
            v24 = 0;
            v25 = 0;
          }
          if (v13
            && (*(unsigned __int8 *)(v14 + 8) != *(unsigned __int8 *)(v15 + 8)
             || *(unsigned __int8 *)(v14 + 4) != *(unsigned __int8 *)(v15 + 4)
             || *(_QWORD *)(v14 + 16) != *(_QWORD *)(v15 + 16)
             || *(unsigned __int8 *)(v14 + 9) != *(unsigned __int8 *)(v15 + 9)
             || *(_BYTE *)(v14 + 29) != 1
             || *(_BYTE *)(v15 + 29) != 1))
          {
            if (*(_BYTE *)(v14 + 28) == 1)
              result = md::LabelRenderer::addGlyphRenderItem(v9, (unsigned int *)&v22, a4, a5, 0);
            else
              result = md::LabelRenderer::addIconRenderItem(v9, (unsigned int *)&v22, a4, a5);
            v14 = 0;
            v13 = 0;
          }
          if (*(_BYTE *)(v15 + 28) == 1 && *(_BYTE *)(v15 + 10))
          {
            if (!v12)
              v12 = v15;
            v24 = v12;
            v11 += *(unsigned __int16 *)(v15 + 32);
            v25 = v11;
          }
          if (!v14)
            v14 = v15;
          v22 = v14;
          v13 += *(unsigned __int16 *)(v15 + 32);
          v23 = v13;
          ++v10;
        }
        while (v10 != v8);
        if (v11)
          result = md::LabelRenderer::addGlyphRenderItem(v9, (unsigned int *)&v24, a4, a5, 1);
        v7 = a3;
        if (v13)
        {
          if (*(_BYTE *)(v14 + 28) == 1)
            result = md::LabelRenderer::addGlyphRenderItem(v9, (unsigned int *)&v22, a4, a5, 0);
          else
            result = md::LabelRenderer::addIconRenderItem(v9, (unsigned int *)&v22, a4, a5);
        }
      }
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t md::LabelRenderer::addGlyphRenderItem(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_mutex_base *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _OWORD *v139;
  __int128 *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _OWORD *v190;
  __int128 *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _OWORD *v199;
  __int128 *v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _OWORD *v273;
  __int128 *v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _OWORD *v281;
  __int128 *v282;
  uint64_t v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _OWORD *v290;
  __int128 *v291;
  uint64_t v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _OWORD *v299;
  __int128 *v300;
  uint64_t v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _OWORD *v308;
  __int128 *v309;
  uint64_t v310;
  __int128 v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  unint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _OWORD *v329;
  __int128 *v330;
  uint64_t v331;
  __int128 v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _OWORD *v337;
  __int128 *v338;
  uint64_t v339;
  __int128 v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _OWORD *v345;
  __int128 *v346;
  uint64_t v347;
  __int128 v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _OWORD *v354;
  __int128 *v355;
  uint64_t v356;
  __int128 v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *p_shared_owners;
  unint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t *v438;
  unint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t *v447;
  unint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t *v456;
  unint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t *v465;
  unint64_t v466;
  unint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _OWORD *v485;
  __int128 *v486;
  uint64_t v487;
  __int128 v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  _OWORD *v494;
  __int128 *v495;
  uint64_t v496;
  __int128 v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  uint64_t v502;
  _OWORD *v503;
  __int128 *v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t *v514;
  unint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  _QWORD *v519;
  uint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  unint64_t *v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t *v532;
  unint64_t v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t *v541;
  unint64_t v542;
  std::__shared_weak_count *v543;
  unint64_t *v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t *v550;
  unint64_t v551;
  std::__shared_weak_count *v552;
  unint64_t *v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t *v559;
  unint64_t v560;
  unint64_t *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  _QWORD *v574;
  uint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  unint64_t *v578;
  unint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t *v587;
  unint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t *v605;
  unint64_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t *v614;
  unint64_t v615;
  unint64_t *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  std::__shared_weak_count *v624;
  unint64_t *v625;
  unint64_t v626;
  _QWORD *v627;
  unint64_t *v628;
  unint64_t v629;
  unint64_t *v630;
  unint64_t *v631;
  unint64_t v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  _QWORD *v645;
  uint64_t v646;
  _QWORD *v647;
  uint64_t v648;
  unint64_t *v649;
  unint64_t v650;
  std::__shared_weak_count *v651;
  unint64_t *v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t *v657;
  unint64_t v658;
  std::__shared_weak_count *v659;
  unint64_t *v660;
  unint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  unint64_t *v666;
  unint64_t v667;
  unint64_t *v668;
  ggl::RenderItem *v669;
  uint64_t v670;
  int v671;
  _QWORD *v672;
  int v673;
  _QWORD *v674;
  _QWORD *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t result;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t v682;
  uint64_t v683;
  _OWORD *v684;
  __int128 *v685;
  uint64_t v686;
  __int128 v687;
  uint64_t v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  _OWORD *v692;
  __int128 *v693;
  uint64_t v694;
  __int128 v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  unint64_t *v703;
  unint64_t v704;
  std::__shared_weak_count *v705;
  unint64_t *v706;
  unint64_t v707;
  _QWORD *v708;
  uint64_t v709;
  _QWORD *v710;
  uint64_t v711;
  unint64_t *v712;
  unint64_t v713;
  std::__shared_weak_count *v714;
  unint64_t *v715;
  unint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  unint64_t *v721;
  unint64_t v722;
  std::__shared_weak_count *v723;
  unint64_t *v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  unint64_t *v730;
  unint64_t v731;
  std::__shared_weak_count *v732;
  unint64_t *v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t *v739;
  unint64_t v740;
  std::__shared_weak_count *v741;
  unint64_t *v742;
  unint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t *v748;
  unint64_t v749;
  unint64_t *v750;
  unint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  unint64_t *v761;
  unint64_t v762;
  std::__shared_weak_count *v763;
  unint64_t *v764;
  unint64_t v765;
  _QWORD *v766;
  uint64_t v767;
  _QWORD *v768;
  uint64_t v769;
  unint64_t *v770;
  unint64_t v771;
  std::__shared_weak_count *v772;
  unint64_t *v773;
  unint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t *v779;
  unint64_t v780;
  std::__shared_weak_count *v781;
  unint64_t *v782;
  unint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  unint64_t *v788;
  unint64_t v789;
  std::__shared_weak_count *v790;
  unint64_t *v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  unint64_t *v797;
  unint64_t v798;
  std::__shared_weak_count *v799;
  unint64_t *v800;
  unint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t *v806;
  unint64_t v807;
  unint64_t *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t *v816;
  unint64_t v817;
  std::__shared_weak_count *v818;
  unint64_t *v819;
  unint64_t v820;
  _QWORD *v821;
  uint64_t v822;
  _QWORD *v823;
  uint64_t v824;
  unint64_t *v825;
  unint64_t v826;
  std::__shared_weak_count *v827;
  unint64_t *v828;
  unint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  unint64_t *v834;
  unint64_t v835;
  std::__shared_weak_count *v836;
  unint64_t *v837;
  unint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  unint64_t *v843;
  unint64_t v844;
  std::__shared_weak_count *v845;
  unint64_t *v846;
  unint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t *v852;
  unint64_t v853;
  std::__shared_weak_count *v854;
  unint64_t *v855;
  unint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  unint64_t *v861;
  unint64_t v862;
  unint64_t *v863;
  int v864;
  uint64_t v865;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  _QWORD *v874;
  std::__shared_weak_count *v875;

  v8 = *(_QWORD *)a2;
  v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 4);
  v10 = a1 + 1008;
  v11 = 992;
  if (a5)
    v11 = 1008;
  v867 = v11;
  if (!a5)
    v10 = a1 + 992;
  v868 = v10;
  v12 = a1 + 1424;
  v13 = a1 + 1456;
  v14 = 1456;
  if (!*(_BYTE *)(a3 + 24))
  {
    v14 = 1440;
    v13 = a1 + 1440;
  }
  v864 = *(unsigned __int8 *)(v8 + 9);
  if (*(_BYTE *)(v8 + 9))
    v14 = 1424;
  else
    v12 = v13;
  v870 = v14;
  v871 = v12;
  if (v9 == 2)
  {
    v15 = 1;
    v16 = 0;
  }
  else
  {
    v15 = *(_BYTE *)(a1 + 1861) != 0;
    v16 = 0;
    if (!*(_BYTE *)(a1 + 1861))
      goto LABEL_15;
  }
  if ((a5 & 1) == 0)
    v16 = *(_BYTE *)(a1 + 1860) != 0;
LABEL_15:
  v17 = *(_QWORD *)(a1 + 1488 + 16 * *(unsigned int *)(a1 + 1540) + 64);
  if (!v17)
    v17 = *(_QWORD *)(a1 + 1872);
  v869 = v17;
  v18 = *(_QWORD *)(a1 + 16 * *(unsigned int *)(a1 + 1684) + 1696);
  if (!v18)
    v18 = *(_QWORD *)(a1 + 1888);
  v865 = v18;
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(v8 + 16);
  v21 = (std::__shared_mutex_base *)(v19 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v19 + 104));
  v22 = *(_QWORD *)(v19 + 600);
  if (v20 < (unint64_t)((*(_QWORD *)(v19 + 608) - v22) >> 3)
    && ((v23 = *(_QWORD *)(v22 + 8 * v20)) != 0 ? (v24 = HIDWORD(v20) == HIDWORD(v23)) : (v24 = 0), v24))
  {
    v26 = (uint64_t *)(*(_QWORD *)(v19 + 624) + 40 * v23);
    v25 = *(uint64_t **)(v19 + 632);
  }
  else
  {
    v25 = *(uint64_t **)(v19 + 632);
    v26 = v25;
  }
  std::__shared_mutex_base::unlock_shared(v21);
  v27 = 0;
  if (v26 == v25)
  {
    v28 = a2;
  }
  else
  {
    v28 = a2;
    if (v26)
      v27 = *v26;
  }
  v872 = v27;
  if (v9 != 3)
  {
    v42 = *(unsigned __int8 *)(*(_QWORD *)v28 + 4);
    if (v42 != 6)
    {
      if (v42 != 5)
      {
        if (v42 == 4)
        {
          v43 = *(_QWORD *)(a1 + 344);
          v44 = *(_QWORD *)(v43 + 8);
          if (v44 == *(_QWORD *)v43)
          {
            v129 = *(_QWORD *)(v43 + 88);
            if (!v129)
              goto LABEL_936;
            v34 = a3;
            v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 48))(v129);
            v45 = *(_QWORD **)(v43 + 40);
            v130 = *(_QWORD *)(v43 + 48);
            if ((unint64_t)v45 >= v130)
            {
              v164 = *(_QWORD *)(v43 + 32);
              v165 = ((uint64_t)v45 - v164) >> 3;
              v49 = v165 + 1;
              if ((unint64_t)(v165 + 1) >> 61)
                goto LABEL_937;
              v166 = v130 - v164;
              if (v166 >> 2 > v49)
                v49 = v166 >> 2;
              if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              if (v49)
              {
                v167 = 8 * v49;
                v168 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v43 + 56) + 16))(*(_QWORD *)(v43 + 56), 8 * v49, 8);
                v53 = (_QWORD *)(v168 + 8 * v165);
                v49 = v168 + v167;
                if (v168)
                  *v53 = v31;
              }
              else
              {
                v53 = (_QWORD *)(8 * v165);
              }
              v131 = v53 + 1;
              v269 = *(_QWORD *)(v43 + 32);
              v185 = *(_QWORD *)(v43 + 40);
              if (v185 == v269)
                goto LABEL_399;
              v270 = v185 - v269 - 8;
              if (v270 < 0x38)
              {
                v272 = *(_QWORD *)(v43 + 40);
              }
              else if ((unint64_t)(v185 - (_QWORD)v53) < 0x20)
              {
                v272 = *(_QWORD *)(v43 + 40);
              }
              else
              {
                v271 = (v270 >> 3) + 1;
                v272 = v185 - 8 * (v271 & 0x3FFFFFFFFFFFFFFCLL);
                v273 = v53 - 2;
                v274 = (__int128 *)(v185 - 16);
                v275 = v271 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v276 = *v274;
                  *(v273 - 1) = *(v274 - 1);
                  *v273 = v276;
                  v273 -= 2;
                  v274 -= 2;
                  v275 -= 4;
                }
                while (v275);
                v53 -= v271 & 0x3FFFFFFFFFFFFFFCLL;
                if (v271 == (v271 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_398;
              }
              do
              {
                v358 = *(_QWORD *)(v272 - 8);
                v272 -= 8;
                *--v53 = v358;
              }
              while (v272 != v269);
              goto LABEL_398;
            }
          }
          else
          {
            v31 = *(_QWORD **)(v44 - 8);
            *(_QWORD *)(v43 + 8) = v44 - 8;
            v45 = *(_QWORD **)(v43 + 40);
            v46 = *(_QWORD *)(v43 + 48);
            v34 = a3;
            if ((unint64_t)v45 >= v46)
            {
              v47 = *(_QWORD *)(v43 + 32);
              v48 = ((uint64_t)v45 - v47) >> 3;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 61)
                goto LABEL_937;
              v50 = v46 - v47;
              if (v50 >> 2 > v49)
                v49 = v50 >> 2;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              if (v49)
              {
                v51 = 8 * v49;
                v52 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v43 + 56) + 16))(*(_QWORD *)(v43 + 56), 8 * v49, 8);
                v53 = (_QWORD *)(v52 + 8 * v48);
                v49 = v52 + v51;
                if (v52)
                  *v53 = v31;
              }
              else
              {
                v53 = (_QWORD *)(8 * v48);
              }
              v131 = v53 + 1;
              v186 = *(_QWORD *)(v43 + 32);
              v185 = *(_QWORD *)(v43 + 40);
              if (v185 == v186)
                goto LABEL_399;
              v187 = v185 - v186 - 8;
              if (v187 < 0x38)
              {
                v189 = *(_QWORD *)(v43 + 40);
              }
              else if ((unint64_t)(v185 - (_QWORD)v53) < 0x20)
              {
                v189 = *(_QWORD *)(v43 + 40);
              }
              else
              {
                v188 = (v187 >> 3) + 1;
                v189 = v185 - 8 * (v188 & 0x3FFFFFFFFFFFFFFCLL);
                v190 = v53 - 2;
                v191 = (__int128 *)(v185 - 16);
                v192 = v188 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v193 = *v191;
                  *(v190 - 1) = *(v191 - 1);
                  *v190 = v193;
                  v190 -= 2;
                  v191 -= 2;
                  v192 -= 4;
                }
                while (v192);
                v53 -= v188 & 0x3FFFFFFFFFFFFFFCLL;
                if (v188 == (v188 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_398;
              }
              do
              {
                v312 = *(_QWORD *)(v189 - 8);
                v189 -= 8;
                *--v53 = v312;
              }
              while (v189 != v186);
LABEL_398:
              v185 = *(_QWORD *)(v43 + 32);
LABEL_399:
              *(_QWORD *)(v43 + 32) = v53;
              *(_QWORD *)(v43 + 40) = v131;
              v359 = *(_QWORD *)(v43 + 48);
              *(_QWORD *)(v43 + 48) = v49;
              if (v185)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v43 + 56) + 40))(*(_QWORD *)(v43 + 56), v185, v359 - v185);
LABEL_401:
              *(_QWORD *)(v43 + 40) = v131;
              v874 = v31;
              v360 = *(_QWORD *)(v43 + 120);
              if (!v360)
                goto LABEL_936;
              (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v360 + 48))(v360, &v874);
              v361 = v31[8];
              *(_QWORD *)(v361 + 88) = 0;
              v362 = *(_QWORD *)(a1 + 1408);
              *(_QWORD *)(v361 + 80) = v362;
              v363 = v31[20];
              v364 = *(_QWORD *)(a1 + 1416);
              if (v364)
              {
                v365 = (unint64_t *)(v364 + 8);
                do
                  v366 = __ldxr(v365);
                while (__stxr(v366 + 1, v365));
              }
              v367 = *(std::__shared_weak_count **)(v363 + 88);
              *(_QWORD *)(v363 + 80) = v362;
              *(_QWORD *)(v363 + 88) = v364;
              if (v367)
              {
                p_shared_owners = (unint64_t *)&v367->__shared_owners_;
                do
                  v369 = __ldaxr(p_shared_owners);
                while (__stlxr(v369 - 1, p_shared_owners));
                if (!v369)
                {
                  ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                  std::__shared_weak_count::__release_weak(v367);
                }
              }
              v370 = (_QWORD *)v31[8];
              v370[1] = 0;
              v371 = *(_QWORD *)(a1 + 1376);
              *v370 = v371;
              v372 = (_QWORD *)v31[20];
              v373 = *(_QWORD *)(a1 + 1384);
              if (v373)
              {
                v374 = (unint64_t *)(v373 + 8);
                do
                  v375 = __ldxr(v374);
                while (__stxr(v375 + 1, v374));
              }
              v376 = (std::__shared_weak_count *)v372[1];
              *v372 = v371;
              v372[1] = v373;
              if (v376)
              {
                v377 = (unint64_t *)&v376->__shared_owners_;
                do
                  v378 = __ldaxr(v377);
                while (__stlxr(v378 - 1, v377));
                if (!v378)
                {
                  ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                  std::__shared_weak_count::__release_weak(v376);
                }
              }
              v379 = v31[8];
              *(_QWORD *)(v379 + 24) = 0;
              v380 = *(_QWORD *)(a1 + v870);
              *(_QWORD *)(v379 + 16) = v380;
              v381 = v31[20];
              v382 = *(_QWORD *)(v871 + 8);
              if (v382)
              {
                v383 = (unint64_t *)(v382 + 8);
                do
                  v384 = __ldxr(v383);
                while (__stxr(v384 + 1, v383));
              }
              v385 = *(std::__shared_weak_count **)(v381 + 24);
              *(_QWORD *)(v381 + 16) = v380;
              *(_QWORD *)(v381 + 24) = v382;
              if (v385)
              {
                v386 = (unint64_t *)&v385->__shared_owners_;
                do
                  v387 = __ldaxr(v386);
                while (__stlxr(v387 - 1, v386));
                if (!v387)
                {
                  ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
                  std::__shared_weak_count::__release_weak(v385);
                }
              }
              v388 = v31[8];
              *(_QWORD *)(v388 + 56) = 0;
              v389 = *(_QWORD *)(a1 + 1496);
              *(_QWORD *)(v388 + 48) = v389;
              v390 = v31[20];
              v391 = *(_QWORD *)(a1 + 1504);
              if (v391)
              {
                v392 = (unint64_t *)(v391 + 8);
                do
                  v393 = __ldxr(v392);
                while (__stxr(v393 + 1, v392));
              }
              v394 = *(std::__shared_weak_count **)(v390 + 56);
              *(_QWORD *)(v390 + 48) = v389;
              *(_QWORD *)(v390 + 56) = v391;
              if (v394)
              {
                v395 = (unint64_t *)&v394->__shared_owners_;
                do
                  v396 = __ldaxr(v395);
                while (__stlxr(v396 - 1, v395));
                if (!v396)
                {
                  ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                  std::__shared_weak_count::__release_weak(v394);
                }
              }
              *(_QWORD *)(v31[12] + 16) = v869;
              v397 = v31[8];
              *(_QWORD *)(v397 + 40) = 0;
              v398 = *(_QWORD *)(a1 + 1640);
              *(_QWORD *)(v397 + 32) = v398;
              v399 = v31[20];
              v400 = *(_QWORD *)(a1 + 1648);
              if (v400)
              {
                v401 = (unint64_t *)(v400 + 8);
                do
                  v402 = __ldxr(v401);
                while (__stxr(v402 + 1, v401));
              }
              v403 = *(std::__shared_weak_count **)(v399 + 40);
              *(_QWORD *)(v399 + 32) = v398;
              *(_QWORD *)(v399 + 40) = v400;
              if (v403)
              {
                v404 = (unint64_t *)&v403->__shared_owners_;
                do
                  v405 = __ldaxr(v404);
                while (__stlxr(v405 - 1, v404));
                if (!v405)
                {
                  ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
                  std::__shared_weak_count::__release_weak(v403);
                }
              }
              *(_QWORD *)(v31[12] + 8) = v865;
              v406 = v31[8];
              *(_QWORD *)(v406 + 72) = 0;
              v407 = *(_QWORD *)(a1 + v867);
              *(_QWORD *)(v406 + 64) = v407;
              v408 = v31[20];
              v409 = *(_QWORD *)(v868 + 8);
              if (v409)
              {
                v410 = (unint64_t *)(v409 + 8);
                do
                  v411 = __ldxr(v410);
                while (__stxr(v411 + 1, v410));
              }
              v248 = *(std::__shared_weak_count **)(v408 + 72);
              *(_QWORD *)(v408 + 64) = v407;
              *(_QWORD *)(v408 + 72) = v409;
              if (!v248)
                goto LABEL_734;
              v412 = (unint64_t *)&v248->__shared_owners_;
              do
                v250 = __ldaxr(v412);
              while (__stlxr(v250 - 1, v412));
LABEL_732:
              if (v250)
                goto LABEL_734;
              goto LABEL_733;
            }
          }
          if (v45)
            *v45 = v31;
          v131 = v45 + 1;
          goto LABEL_401;
        }
        if (v15)
        {
          v79 = *(_QWORD *)(a1 + 1488 + 16 * *(unsigned int *)(a1 + 1540) + 64);
          if (!v79)
            v79 = *(_QWORD *)(a1 + 1872);
          v80 = *(_QWORD *)(a1 + 16 * *(unsigned int *)(a1 + 1684) + 1696);
          if (!v80)
            v80 = *(_QWORD *)(a1 + 1888);
          v34 = a3;
          if (a5)
          {
            v81 = *(_QWORD *)(a1 + 384);
            v82 = *(_QWORD *)(v81 + 8);
            if (v82 == *(_QWORD *)v81)
            {
              v251 = *(_QWORD *)(v81 + 88);
              if (!v251)
                goto LABEL_936;
              v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v251 + 48))(v251);
              v83 = *(_QWORD **)(v81 + 40);
              v252 = *(_QWORD *)(v81 + 48);
              if ((unint64_t)v83 >= v252)
              {
                v320 = *(_QWORD *)(v81 + 32);
                v321 = ((uint64_t)v83 - v320) >> 3;
                v87 = v321 + 1;
                if ((unint64_t)(v321 + 1) >> 61)
                  goto LABEL_937;
                v322 = v252 - v320;
                if (v322 >> 2 > v87)
                  v87 = v322 >> 2;
                if ((unint64_t)v322 >= 0x7FFFFFFFFFFFFFF8)
                  v87 = 0x1FFFFFFFFFFFFFFFLL;
                if (v87)
                {
                  v323 = 8 * v87;
                  v324 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v81 + 56) + 16))(*(_QWORD *)(v81 + 56), 8 * v87, 8);
                  v91 = (_QWORD *)(v324 + 8 * v321);
                  v87 = v324 + v323;
                  if (v324)
                    *v91 = v31;
                }
                else
                {
                  v91 = (_QWORD *)(8 * v321);
                }
                v253 = v91 + 1;
                v481 = *(_QWORD *)(v81 + 32);
                v349 = *(_QWORD *)(v81 + 40);
                if (v349 == v481)
                  goto LABEL_769;
                v482 = v349 - v481 - 8;
                if (v482 < 0x38)
                {
                  v484 = *(_QWORD *)(v81 + 40);
                }
                else if ((unint64_t)(v349 - (_QWORD)v91) < 0x20)
                {
                  v484 = *(_QWORD *)(v81 + 40);
                }
                else
                {
                  v483 = (v482 >> 3) + 1;
                  v484 = v349 - 8 * (v483 & 0x3FFFFFFFFFFFFFFCLL);
                  v485 = v91 - 2;
                  v486 = (__int128 *)(v349 - 16);
                  v487 = v483 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v488 = *v486;
                    *(v485 - 1) = *(v486 - 1);
                    *v485 = v488;
                    v485 -= 2;
                    v486 -= 2;
                    v487 -= 4;
                  }
                  while (v487);
                  v91 -= v483 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v483 == (v483 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_768;
                }
                do
                {
                  v696 = *(_QWORD *)(v484 - 8);
                  v484 -= 8;
                  *--v91 = v696;
                }
                while (v484 != v481);
                goto LABEL_768;
              }
            }
            else
            {
              v31 = *(_QWORD **)(v82 - 8);
              *(_QWORD *)(v81 + 8) = v82 - 8;
              v83 = *(_QWORD **)(v81 + 40);
              v84 = *(_QWORD *)(v81 + 48);
              if ((unint64_t)v83 >= v84)
              {
                v85 = *(_QWORD *)(v81 + 32);
                v86 = ((uint64_t)v83 - v85) >> 3;
                v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 61)
                  goto LABEL_937;
                v88 = v84 - v85;
                if (v88 >> 2 > v87)
                  v87 = v88 >> 2;
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
                  v87 = 0x1FFFFFFFFFFFFFFFLL;
                if (v87)
                {
                  v89 = 8 * v87;
                  v90 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v81 + 56) + 16))(*(_QWORD *)(v81 + 56), 8 * v87, 8);
                  v91 = (_QWORD *)(v90 + 8 * v86);
                  v87 = v90 + v89;
                  if (v90)
                    *v91 = v31;
                }
                else
                {
                  v91 = (_QWORD *)(8 * v86);
                }
                v253 = v91 + 1;
                v350 = *(_QWORD *)(v81 + 32);
                v349 = *(_QWORD *)(v81 + 40);
                if (v349 == v350)
                  goto LABEL_769;
                v351 = v349 - v350 - 8;
                if (v351 < 0x38)
                {
                  v353 = *(_QWORD *)(v81 + 40);
                }
                else if ((unint64_t)(v349 - (_QWORD)v91) < 0x20)
                {
                  v353 = *(_QWORD *)(v81 + 40);
                }
                else
                {
                  v352 = (v351 >> 3) + 1;
                  v353 = v349 - 8 * (v352 & 0x3FFFFFFFFFFFFFFCLL);
                  v354 = v91 - 2;
                  v355 = (__int128 *)(v349 - 16);
                  v356 = v352 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v357 = *v355;
                    *(v354 - 1) = *(v355 - 1);
                    *v354 = v357;
                    v354 -= 2;
                    v355 -= 2;
                    v356 -= 4;
                  }
                  while (v356);
                  v91 -= v352 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v352 == (v352 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_768;
                }
                do
                {
                  v679 = *(_QWORD *)(v353 - 8);
                  v353 -= 8;
                  *--v91 = v679;
                }
                while (v353 != v350);
LABEL_768:
                v349 = *(_QWORD *)(v81 + 32);
LABEL_769:
                *(_QWORD *)(v81 + 32) = v91;
                *(_QWORD *)(v81 + 40) = v253;
                v697 = *(_QWORD *)(v81 + 48);
                *(_QWORD *)(v81 + 48) = v87;
                if (v349)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v81 + 56) + 40))(*(_QWORD *)(v81 + 56), v349, v697 - v349);
LABEL_771:
                *(_QWORD *)(v81 + 40) = v253;
                v874 = v31;
                v698 = *(_QWORD *)(v81 + 120);
                if (!v698)
                  goto LABEL_936;
                (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v698 + 48))(v698, &v874);
                v699 = v31[8];
                *(_QWORD *)(v699 + 88) = 0;
                v700 = *(_QWORD *)(a1 + 1408);
                *(_QWORD *)(v699 + 80) = v700;
                v701 = v31[20];
                v702 = *(_QWORD *)(a1 + 1416);
                if (v702)
                {
                  v703 = (unint64_t *)(v702 + 8);
                  do
                    v704 = __ldxr(v703);
                  while (__stxr(v704 + 1, v703));
                }
                v705 = *(std::__shared_weak_count **)(v701 + 88);
                *(_QWORD *)(v701 + 80) = v700;
                *(_QWORD *)(v701 + 88) = v702;
                if (v705)
                {
                  v706 = (unint64_t *)&v705->__shared_owners_;
                  do
                    v707 = __ldaxr(v706);
                  while (__stlxr(v707 - 1, v706));
                  if (!v707)
                  {
                    ((void (*)(std::__shared_weak_count *))v705->__on_zero_shared)(v705);
                    std::__shared_weak_count::__release_weak(v705);
                  }
                }
                v708 = (_QWORD *)v31[8];
                v708[1] = 0;
                v709 = *(_QWORD *)(a1 + 1376);
                *v708 = v709;
                v710 = (_QWORD *)v31[20];
                v711 = *(_QWORD *)(a1 + 1384);
                if (v711)
                {
                  v712 = (unint64_t *)(v711 + 8);
                  do
                    v713 = __ldxr(v712);
                  while (__stxr(v713 + 1, v712));
                }
                v714 = (std::__shared_weak_count *)v710[1];
                *v710 = v709;
                v710[1] = v711;
                if (v714)
                {
                  v715 = (unint64_t *)&v714->__shared_owners_;
                  do
                    v716 = __ldaxr(v715);
                  while (__stlxr(v716 - 1, v715));
                  if (!v716)
                  {
                    ((void (*)(std::__shared_weak_count *))v714->__on_zero_shared)(v714);
                    std::__shared_weak_count::__release_weak(v714);
                  }
                }
                v717 = v31[8];
                *(_QWORD *)(v717 + 24) = 0;
                v718 = *(_QWORD *)(a1 + v870);
                *(_QWORD *)(v717 + 16) = v718;
                v719 = v31[20];
                v720 = *(_QWORD *)(v871 + 8);
                if (v720)
                {
                  v721 = (unint64_t *)(v720 + 8);
                  do
                    v722 = __ldxr(v721);
                  while (__stxr(v722 + 1, v721));
                }
                v723 = *(std::__shared_weak_count **)(v719 + 24);
                *(_QWORD *)(v719 + 16) = v718;
                *(_QWORD *)(v719 + 24) = v720;
                if (v723)
                {
                  v724 = (unint64_t *)&v723->__shared_owners_;
                  do
                    v725 = __ldaxr(v724);
                  while (__stlxr(v725 - 1, v724));
                  if (!v725)
                  {
                    ((void (*)(std::__shared_weak_count *))v723->__on_zero_shared)(v723);
                    std::__shared_weak_count::__release_weak(v723);
                  }
                }
                v726 = v31[8];
                *(_QWORD *)(v726 + 56) = 0;
                v727 = *(_QWORD *)(a1 + 1496);
                *(_QWORD *)(v726 + 48) = v727;
                v728 = v31[20];
                v729 = *(_QWORD *)(a1 + 1504);
                if (v729)
                {
                  v730 = (unint64_t *)(v729 + 8);
                  do
                    v731 = __ldxr(v730);
                  while (__stxr(v731 + 1, v730));
                }
                v732 = *(std::__shared_weak_count **)(v728 + 56);
                *(_QWORD *)(v728 + 48) = v727;
                *(_QWORD *)(v728 + 56) = v729;
                if (v732)
                {
                  v733 = (unint64_t *)&v732->__shared_owners_;
                  do
                    v734 = __ldaxr(v733);
                  while (__stlxr(v734 - 1, v733));
                  if (!v734)
                  {
                    ((void (*)(std::__shared_weak_count *))v732->__on_zero_shared)(v732);
                    std::__shared_weak_count::__release_weak(v732);
                  }
                }
                *(_QWORD *)(v31[12] + 16) = v79;
                *(_QWORD *)(v31[12] + 8) = v80;
                v735 = v31[8];
                *(_QWORD *)(v735 + 40) = 0;
                v736 = *(_QWORD *)(a1 + 1640);
                *(_QWORD *)(v735 + 32) = v736;
                v737 = v31[20];
                v738 = *(_QWORD *)(a1 + 1648);
                if (v738)
                {
                  v739 = (unint64_t *)(v738 + 8);
                  do
                    v740 = __ldxr(v739);
                  while (__stxr(v740 + 1, v739));
                }
                v741 = *(std::__shared_weak_count **)(v737 + 40);
                *(_QWORD *)(v737 + 32) = v736;
                *(_QWORD *)(v737 + 40) = v738;
                v28 = a2;
                if (v741)
                {
                  v742 = (unint64_t *)&v741->__shared_owners_;
                  do
                    v743 = __ldaxr(v742);
                  while (__stlxr(v743 - 1, v742));
                  if (!v743)
                  {
                    ((void (*)(std::__shared_weak_count *))v741->__on_zero_shared)(v741);
                    std::__shared_weak_count::__release_weak(v741);
                  }
                }
                v744 = v31[8];
                *(_QWORD *)(v744 + 72) = 0;
                v745 = *(_QWORD *)(a1 + v867);
                *(_QWORD *)(v744 + 64) = v745;
                v746 = v31[20];
                v747 = *(_QWORD *)(v868 + 8);
                if (v747)
                {
                  v748 = (unint64_t *)(v747 + 8);
                  do
                    v749 = __ldxr(v748);
                  while (__stxr(v749 + 1, v748));
                }
                v248 = *(std::__shared_weak_count **)(v746 + 72);
                *(_QWORD *)(v746 + 64) = v745;
                *(_QWORD *)(v746 + 72) = v747;
                if (!v248)
                  goto LABEL_734;
                v750 = (unint64_t *)&v248->__shared_owners_;
                do
                  v751 = __ldaxr(v750);
                while (__stlxr(v751 - 1, v750));
LABEL_934:
                if (!v751)
                {
LABEL_733:
                  ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                  std::__shared_weak_count::__release_weak(v248);
                  goto LABEL_734;
                }
                goto LABEL_734;
              }
            }
            if (v83)
              *v83 = v31;
            v253 = v83 + 1;
            goto LABEL_771;
          }
          if (v16)
          {
            v143 = *(_QWORD *)(a1 + 392);
            v144 = *(_QWORD *)(v143 + 8);
            if (v144 == *(_QWORD *)v143)
            {
              v314 = *(_QWORD *)(v143 + 88);
              if (!v314)
                goto LABEL_936;
              v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v314 + 48))(v314);
              v145 = *(_QWORD **)(v143 + 40);
              v315 = *(_QWORD *)(v143 + 48);
              if ((unint64_t)v145 >= v315)
              {
                v471 = *(_QWORD *)(v143 + 32);
                v472 = ((uint64_t)v145 - v471) >> 3;
                v149 = v472 + 1;
                if ((unint64_t)(v472 + 1) >> 61)
                  goto LABEL_937;
                v473 = v315 - v471;
                if (v473 >> 2 > v149)
                  v149 = v473 >> 2;
                if ((unint64_t)v473 >= 0x7FFFFFFFFFFFFFF8)
                  v149 = 0x1FFFFFFFFFFFFFFFLL;
                if (v149)
                {
                  v474 = 8 * v149;
                  v475 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v143 + 56) + 16))(*(_QWORD *)(v143 + 56), 8 * v149, 8);
                  v153 = (_QWORD *)(v475 + 8 * v472);
                  v149 = v475 + v474;
                  if (v475)
                    *v153 = v31;
                }
                else
                {
                  v153 = (_QWORD *)(8 * v472);
                }
                v316 = v153 + 1;
                v680 = *(_QWORD *)(v143 + 32);
                v489 = *(_QWORD *)(v143 + 40);
                if (v489 == v680)
                  goto LABEL_831;
                v681 = v489 - v680 - 8;
                if (v681 < 0x38)
                {
                  v683 = *(_QWORD *)(v143 + 40);
                }
                else if ((unint64_t)(v489 - (_QWORD)v153) < 0x20)
                {
                  v683 = *(_QWORD *)(v143 + 40);
                }
                else
                {
                  v682 = (v681 >> 3) + 1;
                  v683 = v489 - 8 * (v682 & 0x3FFFFFFFFFFFFFFCLL);
                  v684 = v153 - 2;
                  v685 = (__int128 *)(v489 - 16);
                  v686 = v682 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v687 = *v685;
                    *(v684 - 1) = *(v685 - 1);
                    *v684 = v687;
                    v684 -= 2;
                    v685 -= 2;
                    v686 -= 4;
                  }
                  while (v686);
                  v153 -= v682 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v682 == (v682 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_830;
                }
                do
                {
                  v754 = *(_QWORD *)(v683 - 8);
                  v683 -= 8;
                  *--v153 = v754;
                }
                while (v683 != v680);
                goto LABEL_830;
              }
            }
            else
            {
              v31 = *(_QWORD **)(v144 - 8);
              *(_QWORD *)(v143 + 8) = v144 - 8;
              v145 = *(_QWORD **)(v143 + 40);
              v146 = *(_QWORD *)(v143 + 48);
              if ((unint64_t)v145 >= v146)
              {
                v147 = *(_QWORD *)(v143 + 32);
                v148 = ((uint64_t)v145 - v147) >> 3;
                v149 = v148 + 1;
                if ((unint64_t)(v148 + 1) >> 61)
                  goto LABEL_937;
                v150 = v146 - v147;
                if (v150 >> 2 > v149)
                  v149 = v150 >> 2;
                if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8)
                  v149 = 0x1FFFFFFFFFFFFFFFLL;
                if (v149)
                {
                  v151 = 8 * v149;
                  v152 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v143 + 56) + 16))(*(_QWORD *)(v143 + 56), 8 * v149, 8);
                  v153 = (_QWORD *)(v152 + 8 * v148);
                  v149 = v152 + v151;
                  if (v152)
                    *v153 = v31;
                }
                else
                {
                  v153 = (_QWORD *)(8 * v148);
                }
                v316 = v153 + 1;
                v490 = *(_QWORD *)(v143 + 32);
                v489 = *(_QWORD *)(v143 + 40);
                if (v489 == v490)
                  goto LABEL_831;
                v491 = v489 - v490 - 8;
                if (v491 < 0x38)
                {
                  v493 = *(_QWORD *)(v143 + 40);
                }
                else if ((unint64_t)(v489 - (_QWORD)v153) < 0x20)
                {
                  v493 = *(_QWORD *)(v143 + 40);
                }
                else
                {
                  v492 = (v491 >> 3) + 1;
                  v493 = v489 - 8 * (v492 & 0x3FFFFFFFFFFFFFFCLL);
                  v494 = v153 - 2;
                  v495 = (__int128 *)(v489 - 16);
                  v496 = v492 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v497 = *v495;
                    *(v494 - 1) = *(v495 - 1);
                    *v494 = v497;
                    v494 -= 2;
                    v495 -= 2;
                    v496 -= 4;
                  }
                  while (v496);
                  v153 -= v492 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v492 == (v492 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_830;
                }
                do
                {
                  v752 = *(_QWORD *)(v493 - 8);
                  v493 -= 8;
                  *--v153 = v752;
                }
                while (v493 != v490);
LABEL_830:
                v489 = *(_QWORD *)(v143 + 32);
LABEL_831:
                *(_QWORD *)(v143 + 32) = v153;
                *(_QWORD *)(v143 + 40) = v316;
                v755 = *(_QWORD *)(v143 + 48);
                *(_QWORD *)(v143 + 48) = v149;
                if (v489)
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v143 + 56) + 40))(*(_QWORD *)(v143 + 56), v489, v755 - v489);
LABEL_833:
                *(_QWORD *)(v143 + 40) = v316;
                v874 = v31;
                v756 = *(_QWORD *)(v143 + 120);
                if (!v756)
                  goto LABEL_936;
                (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v756 + 48))(v756, &v874);
                v757 = v31[8];
                *(_QWORD *)(v757 + 88) = 0;
                v758 = *(_QWORD *)(a1 + 1408);
                *(_QWORD *)(v757 + 80) = v758;
                v759 = v31[20];
                v760 = *(_QWORD *)(a1 + 1416);
                if (v760)
                {
                  v761 = (unint64_t *)(v760 + 8);
                  do
                    v762 = __ldxr(v761);
                  while (__stxr(v762 + 1, v761));
                }
                v763 = *(std::__shared_weak_count **)(v759 + 88);
                *(_QWORD *)(v759 + 80) = v758;
                *(_QWORD *)(v759 + 88) = v760;
                if (v763)
                {
                  v764 = (unint64_t *)&v763->__shared_owners_;
                  do
                    v765 = __ldaxr(v764);
                  while (__stlxr(v765 - 1, v764));
                  if (!v765)
                  {
                    ((void (*)(std::__shared_weak_count *))v763->__on_zero_shared)(v763);
                    std::__shared_weak_count::__release_weak(v763);
                  }
                }
                v766 = (_QWORD *)v31[8];
                v766[1] = 0;
                v767 = *(_QWORD *)(a1 + 1376);
                *v766 = v767;
                v768 = (_QWORD *)v31[20];
                v769 = *(_QWORD *)(a1 + 1384);
                if (v769)
                {
                  v770 = (unint64_t *)(v769 + 8);
                  do
                    v771 = __ldxr(v770);
                  while (__stxr(v771 + 1, v770));
                }
                v772 = (std::__shared_weak_count *)v768[1];
                *v768 = v767;
                v768[1] = v769;
                if (v772)
                {
                  v773 = (unint64_t *)&v772->__shared_owners_;
                  do
                    v774 = __ldaxr(v773);
                  while (__stlxr(v774 - 1, v773));
                  if (!v774)
                  {
                    ((void (*)(std::__shared_weak_count *))v772->__on_zero_shared)(v772);
                    std::__shared_weak_count::__release_weak(v772);
                  }
                }
                v775 = v31[8];
                *(_QWORD *)(v775 + 24) = 0;
                v776 = *(_QWORD *)(a1 + v870);
                *(_QWORD *)(v775 + 16) = v776;
                v777 = v31[20];
                v778 = *(_QWORD *)(v871 + 8);
                if (v778)
                {
                  v779 = (unint64_t *)(v778 + 8);
                  do
                    v780 = __ldxr(v779);
                  while (__stxr(v780 + 1, v779));
                }
                v781 = *(std::__shared_weak_count **)(v777 + 24);
                *(_QWORD *)(v777 + 16) = v776;
                *(_QWORD *)(v777 + 24) = v778;
                if (v781)
                {
                  v782 = (unint64_t *)&v781->__shared_owners_;
                  do
                    v783 = __ldaxr(v782);
                  while (__stlxr(v783 - 1, v782));
                  if (!v783)
                  {
                    ((void (*)(std::__shared_weak_count *))v781->__on_zero_shared)(v781);
                    std::__shared_weak_count::__release_weak(v781);
                  }
                }
                v784 = v31[8];
                *(_QWORD *)(v784 + 56) = 0;
                v785 = *(_QWORD *)(a1 + 1496);
                *(_QWORD *)(v784 + 48) = v785;
                v786 = v31[20];
                v787 = *(_QWORD *)(a1 + 1504);
                if (v787)
                {
                  v788 = (unint64_t *)(v787 + 8);
                  do
                    v789 = __ldxr(v788);
                  while (__stxr(v789 + 1, v788));
                }
                v790 = *(std::__shared_weak_count **)(v786 + 56);
                *(_QWORD *)(v786 + 48) = v785;
                *(_QWORD *)(v786 + 56) = v787;
                if (v790)
                {
                  v791 = (unint64_t *)&v790->__shared_owners_;
                  do
                    v792 = __ldaxr(v791);
                  while (__stlxr(v792 - 1, v791));
                  if (!v792)
                  {
                    ((void (*)(std::__shared_weak_count *))v790->__on_zero_shared)(v790);
                    std::__shared_weak_count::__release_weak(v790);
                  }
                }
                *(_QWORD *)(v31[12] + 16) = v79;
                *(_QWORD *)(v31[12] + 8) = v80;
                v793 = v31[8];
                *(_QWORD *)(v793 + 40) = 0;
                v794 = *(_QWORD *)(a1 + 1640);
                *(_QWORD *)(v793 + 32) = v794;
                v795 = v31[20];
                v796 = *(_QWORD *)(a1 + 1648);
                if (v796)
                {
                  v797 = (unint64_t *)(v796 + 8);
                  do
                    v798 = __ldxr(v797);
                  while (__stxr(v798 + 1, v797));
                }
                v799 = *(std::__shared_weak_count **)(v795 + 40);
                *(_QWORD *)(v795 + 32) = v794;
                *(_QWORD *)(v795 + 40) = v796;
                v28 = a2;
                if (v799)
                {
                  v800 = (unint64_t *)&v799->__shared_owners_;
                  do
                    v801 = __ldaxr(v800);
                  while (__stlxr(v801 - 1, v800));
                  if (!v801)
                  {
                    ((void (*)(std::__shared_weak_count *))v799->__on_zero_shared)(v799);
                    std::__shared_weak_count::__release_weak(v799);
                  }
                }
                v802 = v31[8];
                *(_QWORD *)(v802 + 72) = 0;
                v803 = *(_QWORD *)(a1 + v867);
                *(_QWORD *)(v802 + 64) = v803;
                v804 = v31[20];
                v805 = *(_QWORD *)(v868 + 8);
                if (v805)
                {
                  v806 = (unint64_t *)(v805 + 8);
                  do
                    v807 = __ldxr(v806);
                  while (__stxr(v807 + 1, v806));
                }
                v248 = *(std::__shared_weak_count **)(v804 + 72);
                *(_QWORD *)(v804 + 64) = v803;
                *(_QWORD *)(v804 + 72) = v805;
                if (!v248)
                  goto LABEL_734;
                v808 = (unint64_t *)&v248->__shared_owners_;
                do
                  v751 = __ldaxr(v808);
                while (__stlxr(v751 - 1, v808));
                goto LABEL_934;
              }
            }
            if (v145)
              *v145 = v31;
            v316 = v145 + 1;
            goto LABEL_833;
          }
          v174 = *(_QWORD *)(a1 + 376);
          v175 = *(_QWORD *)(v174 + 8);
          if (v175 == *(_QWORD *)v174)
          {
            v317 = *(_QWORD *)(v174 + 88);
            if (!v317)
              goto LABEL_936;
            v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v317 + 48))(v317);
            v176 = *(_QWORD **)(v174 + 40);
            v318 = *(_QWORD *)(v174 + 48);
            if ((unint64_t)v176 >= v318)
            {
              v476 = *(_QWORD *)(v174 + 32);
              v477 = ((uint64_t)v176 - v476) >> 3;
              v180 = v477 + 1;
              if ((unint64_t)(v477 + 1) >> 61)
                goto LABEL_937;
              v478 = v318 - v476;
              if (v478 >> 2 > v180)
                v180 = v478 >> 2;
              if ((unint64_t)v478 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              if (v180)
              {
                v479 = 8 * v180;
                v480 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v174 + 56) + 16))(*(_QWORD *)(v174 + 56), 8 * v180, 8);
                v184 = (_QWORD *)(v480 + 8 * v477);
                v180 = v480 + v479;
                if (v480)
                  *v184 = v31;
              }
              else
              {
                v184 = (_QWORD *)(8 * v477);
              }
              v319 = v184 + 1;
              v688 = *(_QWORD *)(v174 + 32);
              v498 = *(_QWORD *)(v174 + 40);
              if (v498 == v688)
                goto LABEL_885;
              v689 = v498 - v688 - 8;
              if (v689 < 0x38)
              {
                v691 = *(_QWORD *)(v174 + 40);
              }
              else if ((unint64_t)(v498 - (_QWORD)v184) < 0x20)
              {
                v691 = *(_QWORD *)(v174 + 40);
              }
              else
              {
                v690 = (v689 >> 3) + 1;
                v691 = v498 - 8 * (v690 & 0x3FFFFFFFFFFFFFFCLL);
                v692 = v184 - 2;
                v693 = (__int128 *)(v498 - 16);
                v694 = v690 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v695 = *v693;
                  *(v692 - 1) = *(v693 - 1);
                  *v692 = v695;
                  v692 -= 2;
                  v693 -= 2;
                  v694 -= 4;
                }
                while (v694);
                v184 -= v690 & 0x3FFFFFFFFFFFFFFCLL;
                if (v690 == (v690 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_884;
              }
              do
              {
                v809 = *(_QWORD *)(v691 - 8);
                v691 -= 8;
                *--v184 = v809;
              }
              while (v691 != v688);
              goto LABEL_884;
            }
          }
          else
          {
            v31 = *(_QWORD **)(v175 - 8);
            *(_QWORD *)(v174 + 8) = v175 - 8;
            v176 = *(_QWORD **)(v174 + 40);
            v177 = *(_QWORD *)(v174 + 48);
            if ((unint64_t)v176 >= v177)
            {
              v178 = *(_QWORD *)(v174 + 32);
              v179 = ((uint64_t)v176 - v178) >> 3;
              v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 61)
                goto LABEL_937;
              v181 = v177 - v178;
              if (v181 >> 2 > v180)
                v180 = v181 >> 2;
              if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              if (v180)
              {
                v182 = 8 * v180;
                v183 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v174 + 56) + 16))(*(_QWORD *)(v174 + 56), 8 * v180, 8);
                v184 = (_QWORD *)(v183 + 8 * v179);
                v180 = v183 + v182;
                if (v183)
                  *v184 = v31;
              }
              else
              {
                v184 = (_QWORD *)(8 * v179);
              }
              v319 = v184 + 1;
              v499 = *(_QWORD *)(v174 + 32);
              v498 = *(_QWORD *)(v174 + 40);
              if (v498 == v499)
                goto LABEL_885;
              v500 = v498 - v499 - 8;
              if (v500 < 0x38)
              {
                v502 = *(_QWORD *)(v174 + 40);
              }
              else if ((unint64_t)(v498 - (_QWORD)v184) < 0x20)
              {
                v502 = *(_QWORD *)(v174 + 40);
              }
              else
              {
                v501 = (v500 >> 3) + 1;
                v502 = v498 - 8 * (v501 & 0x3FFFFFFFFFFFFFFCLL);
                v503 = v184 - 2;
                v504 = (__int128 *)(v498 - 16);
                v505 = v501 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v506 = *v504;
                  *(v503 - 1) = *(v504 - 1);
                  *v503 = v506;
                  v503 -= 2;
                  v504 -= 2;
                  v505 -= 4;
                }
                while (v505);
                v184 -= v501 & 0x3FFFFFFFFFFFFFFCLL;
                if (v501 == (v501 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_884;
              }
              do
              {
                v753 = *(_QWORD *)(v502 - 8);
                v502 -= 8;
                *--v184 = v753;
              }
              while (v502 != v499);
LABEL_884:
              v498 = *(_QWORD *)(v174 + 32);
LABEL_885:
              *(_QWORD *)(v174 + 32) = v184;
              *(_QWORD *)(v174 + 40) = v319;
              v810 = *(_QWORD *)(v174 + 48);
              *(_QWORD *)(v174 + 48) = v180;
              if (v498)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v174 + 56) + 40))(*(_QWORD *)(v174 + 56), v498, v810 - v498);
LABEL_887:
              *(_QWORD *)(v174 + 40) = v319;
              v874 = v31;
              v811 = *(_QWORD *)(v174 + 120);
              if (!v811)
                goto LABEL_936;
              (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v811 + 48))(v811, &v874);
              v812 = v31[8];
              *(_QWORD *)(v812 + 88) = 0;
              v813 = *(_QWORD *)(a1 + 1408);
              *(_QWORD *)(v812 + 80) = v813;
              v814 = v31[20];
              v815 = *(_QWORD *)(a1 + 1416);
              if (v815)
              {
                v816 = (unint64_t *)(v815 + 8);
                do
                  v817 = __ldxr(v816);
                while (__stxr(v817 + 1, v816));
              }
              v818 = *(std::__shared_weak_count **)(v814 + 88);
              *(_QWORD *)(v814 + 80) = v813;
              *(_QWORD *)(v814 + 88) = v815;
              if (v818)
              {
                v819 = (unint64_t *)&v818->__shared_owners_;
                do
                  v820 = __ldaxr(v819);
                while (__stlxr(v820 - 1, v819));
                if (!v820)
                {
                  ((void (*)(std::__shared_weak_count *))v818->__on_zero_shared)(v818);
                  std::__shared_weak_count::__release_weak(v818);
                }
              }
              v821 = (_QWORD *)v31[8];
              v821[1] = 0;
              v822 = *(_QWORD *)(a1 + 1376);
              *v821 = v822;
              v823 = (_QWORD *)v31[20];
              v824 = *(_QWORD *)(a1 + 1384);
              if (v824)
              {
                v825 = (unint64_t *)(v824 + 8);
                do
                  v826 = __ldxr(v825);
                while (__stxr(v826 + 1, v825));
              }
              v827 = (std::__shared_weak_count *)v823[1];
              *v823 = v822;
              v823[1] = v824;
              if (v827)
              {
                v828 = (unint64_t *)&v827->__shared_owners_;
                do
                  v829 = __ldaxr(v828);
                while (__stlxr(v829 - 1, v828));
                if (!v829)
                {
                  ((void (*)(std::__shared_weak_count *))v827->__on_zero_shared)(v827);
                  std::__shared_weak_count::__release_weak(v827);
                }
              }
              v830 = v31[8];
              *(_QWORD *)(v830 + 24) = 0;
              v831 = *(_QWORD *)(a1 + v870);
              *(_QWORD *)(v830 + 16) = v831;
              v832 = v31[20];
              v833 = *(_QWORD *)(v871 + 8);
              if (v833)
              {
                v834 = (unint64_t *)(v833 + 8);
                do
                  v835 = __ldxr(v834);
                while (__stxr(v835 + 1, v834));
              }
              v836 = *(std::__shared_weak_count **)(v832 + 24);
              *(_QWORD *)(v832 + 16) = v831;
              *(_QWORD *)(v832 + 24) = v833;
              if (v836)
              {
                v837 = (unint64_t *)&v836->__shared_owners_;
                do
                  v838 = __ldaxr(v837);
                while (__stlxr(v838 - 1, v837));
                if (!v838)
                {
                  ((void (*)(std::__shared_weak_count *))v836->__on_zero_shared)(v836);
                  std::__shared_weak_count::__release_weak(v836);
                }
              }
              v839 = v31[8];
              *(_QWORD *)(v839 + 56) = 0;
              v840 = *(_QWORD *)(a1 + 1496);
              *(_QWORD *)(v839 + 48) = v840;
              v841 = v31[20];
              v842 = *(_QWORD *)(a1 + 1504);
              if (v842)
              {
                v843 = (unint64_t *)(v842 + 8);
                do
                  v844 = __ldxr(v843);
                while (__stxr(v844 + 1, v843));
              }
              v845 = *(std::__shared_weak_count **)(v841 + 56);
              *(_QWORD *)(v841 + 48) = v840;
              *(_QWORD *)(v841 + 56) = v842;
              if (v845)
              {
                v846 = (unint64_t *)&v845->__shared_owners_;
                do
                  v847 = __ldaxr(v846);
                while (__stlxr(v847 - 1, v846));
                if (!v847)
                {
                  ((void (*)(std::__shared_weak_count *))v845->__on_zero_shared)(v845);
                  std::__shared_weak_count::__release_weak(v845);
                }
              }
              *(_QWORD *)(v31[12] + 16) = v79;
              *(_QWORD *)(v31[12] + 8) = v80;
              v848 = v31[8];
              *(_QWORD *)(v848 + 40) = 0;
              v849 = *(_QWORD *)(a1 + 1640);
              *(_QWORD *)(v848 + 32) = v849;
              v850 = v31[20];
              v851 = *(_QWORD *)(a1 + 1648);
              if (v851)
              {
                v852 = (unint64_t *)(v851 + 8);
                do
                  v853 = __ldxr(v852);
                while (__stxr(v853 + 1, v852));
              }
              v854 = *(std::__shared_weak_count **)(v850 + 40);
              *(_QWORD *)(v850 + 32) = v849;
              *(_QWORD *)(v850 + 40) = v851;
              v28 = a2;
              if (v854)
              {
                v855 = (unint64_t *)&v854->__shared_owners_;
                do
                  v856 = __ldaxr(v855);
                while (__stlxr(v856 - 1, v855));
                if (!v856)
                {
                  ((void (*)(std::__shared_weak_count *))v854->__on_zero_shared)(v854);
                  std::__shared_weak_count::__release_weak(v854);
                }
              }
              v857 = v31[8];
              *(_QWORD *)(v857 + 72) = 0;
              v858 = *(_QWORD *)(a1 + v867);
              *(_QWORD *)(v857 + 64) = v858;
              v859 = v31[20];
              v860 = *(_QWORD *)(v868 + 8);
              if (v860)
              {
                v861 = (unint64_t *)(v860 + 8);
                do
                  v862 = __ldxr(v861);
                while (__stxr(v862 + 1, v861));
              }
              v248 = *(std::__shared_weak_count **)(v859 + 72);
              *(_QWORD *)(v859 + 64) = v858;
              *(_QWORD *)(v859 + 72) = v860;
              if (!v248)
                goto LABEL_734;
              v863 = (unint64_t *)&v248->__shared_owners_;
              do
                v751 = __ldaxr(v863);
              while (__stlxr(v751 - 1, v863));
              goto LABEL_934;
            }
          }
          if (v176)
            *v176 = v31;
          v319 = v176 + 1;
          goto LABEL_887;
        }
        v34 = a3;
        v108 = *(unsigned __int8 *)(a3 + 24);
        v109 = *(_QWORD *)(a1 + 400);
        v110 = *(_QWORD *)(v109 + 8);
        if (v110 == *(_QWORD *)v109)
        {
          v161 = *(_QWORD *)(v109 + 88);
          if (!v161)
            goto LABEL_936;
          v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v161 + 48))(v161);
          v111 = *(_QWORD **)(v109 + 40);
          v162 = *(_QWORD *)(v109 + 48);
          if ((unint64_t)v111 >= v162)
          {
            v264 = *(_QWORD *)(v109 + 32);
            v265 = ((uint64_t)v111 - v264) >> 3;
            v115 = v265 + 1;
            if ((unint64_t)(v265 + 1) >> 61)
              goto LABEL_937;
            v266 = v162 - v264;
            if (v266 >> 2 > v115)
              v115 = v266 >> 2;
            if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFF8)
              v115 = 0x1FFFFFFFFFFFFFFFLL;
            if (v115)
            {
              v267 = 8 * v115;
              v268 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v109 + 56) + 16))(*(_QWORD *)(v109 + 56), 8 * v115, 8);
              v119 = (_QWORD *)(v268 + 8 * v265);
              v115 = v268 + v267;
              if (v268)
                *v119 = v31;
            }
            else
            {
              v119 = (_QWORD *)(8 * v265);
            }
            v163 = v119 + 1;
            v341 = *(_QWORD *)(v109 + 32);
            v303 = *(_QWORD *)(v109 + 40);
            if (v303 == v341)
              goto LABEL_667;
            v342 = v303 - v341 - 8;
            if (v342 < 0x38)
            {
              v344 = *(_QWORD *)(v109 + 40);
            }
            else if ((unint64_t)(v303 - (_QWORD)v119) < 0x20)
            {
              v344 = *(_QWORD *)(v109 + 40);
            }
            else
            {
              v343 = (v342 >> 3) + 1;
              v344 = v303 - 8 * (v343 & 0x3FFFFFFFFFFFFFFCLL);
              v345 = v119 - 2;
              v346 = (__int128 *)(v303 - 16);
              v347 = v343 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v348 = *v346;
                *(v345 - 1) = *(v346 - 1);
                *v345 = v348;
                v345 -= 2;
                v346 -= 2;
                v347 -= 4;
              }
              while (v347);
              v119 -= v343 & 0x3FFFFFFFFFFFFFFCLL;
              if (v343 == (v343 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_666;
            }
            do
            {
              v617 = *(_QWORD *)(v344 - 8);
              v344 -= 8;
              *--v119 = v617;
            }
            while (v344 != v341);
            goto LABEL_666;
          }
        }
        else
        {
          v31 = *(_QWORD **)(v110 - 8);
          *(_QWORD *)(v109 + 8) = v110 - 8;
          v111 = *(_QWORD **)(v109 + 40);
          v112 = *(_QWORD *)(v109 + 48);
          if ((unint64_t)v111 >= v112)
          {
            v113 = *(_QWORD *)(v109 + 32);
            v114 = ((uint64_t)v111 - v113) >> 3;
            v115 = v114 + 1;
            if ((unint64_t)(v114 + 1) >> 61)
              goto LABEL_937;
            v116 = v112 - v113;
            if (v116 >> 2 > v115)
              v115 = v116 >> 2;
            if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
              v115 = 0x1FFFFFFFFFFFFFFFLL;
            if (v115)
            {
              v117 = 8 * v115;
              v118 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v109 + 56) + 16))(*(_QWORD *)(v109 + 56), 8 * v115, 8);
              v119 = (_QWORD *)(v118 + 8 * v114);
              v115 = v118 + v117;
              if (v118)
                *v119 = v31;
            }
            else
            {
              v119 = (_QWORD *)(8 * v114);
            }
            v163 = v119 + 1;
            v304 = *(_QWORD *)(v109 + 32);
            v303 = *(_QWORD *)(v109 + 40);
            if (v303 == v304)
              goto LABEL_667;
            v305 = v303 - v304 - 8;
            if (v305 < 0x38)
            {
              v307 = *(_QWORD *)(v109 + 40);
            }
            else if ((unint64_t)(v303 - (_QWORD)v119) < 0x20)
            {
              v307 = *(_QWORD *)(v109 + 40);
            }
            else
            {
              v306 = (v305 >> 3) + 1;
              v307 = v303 - 8 * (v306 & 0x3FFFFFFFFFFFFFFCLL);
              v308 = v119 - 2;
              v309 = (__int128 *)(v303 - 16);
              v310 = v306 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v311 = *v309;
                *(v308 - 1) = *(v309 - 1);
                *v308 = v311;
                v308 -= 2;
                v309 -= 2;
                v310 -= 4;
              }
              while (v310);
              v119 -= v306 & 0x3FFFFFFFFFFFFFFCLL;
              if (v306 == (v306 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_666;
            }
            do
            {
              v470 = *(_QWORD *)(v307 - 8);
              v307 -= 8;
              *--v119 = v470;
            }
            while (v307 != v304);
LABEL_666:
            v303 = *(_QWORD *)(v109 + 32);
LABEL_667:
            *(_QWORD *)(v109 + 32) = v119;
            *(_QWORD *)(v109 + 40) = v163;
            v618 = *(_QWORD *)(v109 + 48);
            *(_QWORD *)(v109 + 48) = v115;
            if (v303)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v109 + 56) + 40))(*(_QWORD *)(v109 + 56), v303, v618 - v303);
            goto LABEL_669;
          }
        }
        if (v111)
          *v111 = v31;
        v163 = v111 + 1;
LABEL_669:
        *(_QWORD *)(v109 + 40) = v163;
        v874 = v31;
        v619 = *(_QWORD *)(v109 + 120);
        if (!v619)
          goto LABEL_936;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v619 + 48))(v619, &v874);
        md::LabelPipelineStateManager<ggl::GlyphWithNormalHalo::DefaultPipelineState,std::shared_ptr<ggl::GlyphWithNormalHaloShader>,ggl::ColorBufferOperation>::pipelineStateForFunctionConstants(&v874, a1 + 472, v864 == 0, v108 == 0, 0, a5, v864 != 0);
        v620 = v874;
        v621 = v875;
        if (v875)
        {
          v622 = (unint64_t *)&v875->__shared_owners_;
          do
            v623 = __ldxr(v622);
          while (__stxr(v623 + 1, v622));
        }
        if (v620 && *(_QWORD *)v620[5] == v31[1])
        {
          v627 = (_QWORD *)v31[2];
          if (v627 && v627 != v620)
            ggl::PipelineSetup::resetData((uint64_t)v31);
          if (v621)
          {
            v628 = (unint64_t *)&v621->__shared_owners_;
            do
              v629 = __ldxr(v628);
            while (__stxr(v629 + 1, v628));
          }
          v624 = (std::__shared_weak_count *)v31[3];
          v31[2] = v620;
          v31[3] = v621;
          if (!v624)
            goto LABEL_690;
          v630 = (unint64_t *)&v624->__shared_owners_;
          do
            v626 = __ldaxr(v630);
          while (__stlxr(v626 - 1, v630));
        }
        else
        {
          v624 = (std::__shared_weak_count *)v31[3];
          v31[2] = 0;
          v31[3] = 0;
          if (!v624)
          {
LABEL_690:
            if (v621)
            {
              v631 = (unint64_t *)&v621->__shared_owners_;
              do
                v632 = __ldaxr(v631);
              while (__stlxr(v632 - 1, v631));
              if (!v632)
              {
                ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
                std::__shared_weak_count::__release_weak(v621);
              }
            }
            v633 = v875;
            if (v875)
            {
              v634 = (unint64_t *)&v875->__shared_owners_;
              do
                v635 = __ldaxr(v634);
              while (__stlxr(v635 - 1, v634));
              if (!v635)
              {
                ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
                std::__shared_weak_count::__release_weak(v633);
              }
            }
            v636 = v31[8];
            *(_QWORD *)(v636 + 56) = 0;
            v637 = *(_QWORD *)(a1 + 1408);
            *(_QWORD *)(v636 + 48) = v637;
            v638 = v31[20];
            v639 = *(_QWORD *)(a1 + 1416);
            if (v639)
            {
              v640 = (unint64_t *)(v639 + 8);
              do
                v641 = __ldxr(v640);
              while (__stxr(v641 + 1, v640));
            }
            v642 = *(std::__shared_weak_count **)(v638 + 56);
            *(_QWORD *)(v638 + 48) = v637;
            *(_QWORD *)(v638 + 56) = v639;
            if (v642)
            {
              v643 = (unint64_t *)&v642->__shared_owners_;
              do
                v644 = __ldaxr(v643);
              while (__stlxr(v644 - 1, v643));
              if (!v644)
              {
                ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                std::__shared_weak_count::__release_weak(v642);
              }
            }
            v645 = (_QWORD *)v31[8];
            if (v864)
            {
              v645[1] = 0;
              v646 = *(_QWORD *)(a1 + 1392);
              *v645 = v646;
              v647 = (_QWORD *)v31[20];
              v648 = *(_QWORD *)(a1 + 1400);
              if (v648)
              {
                v649 = (unint64_t *)(v648 + 8);
                do
                  v650 = __ldxr(v649);
                while (__stxr(v650 + 1, v649));
              }
              v651 = (std::__shared_weak_count *)v647[1];
              *v647 = v646;
              v647[1] = v648;
              if (v651)
              {
                v652 = (unint64_t *)&v651->__shared_owners_;
                do
                  v653 = __ldaxr(v652);
                while (__stlxr(v653 - 1, v652));
                if (!v653)
                {
                  ((void (*)(std::__shared_weak_count *))v651->__on_zero_shared)(v651);
                  std::__shared_weak_count::__release_weak(v651);
                }
              }
            }
            else
            {
              v645[3] = 0;
              v654 = *(_QWORD *)(a1 + 1496);
              v645[2] = v654;
              v655 = v31[20];
              v656 = *(_QWORD *)(a1 + 1504);
              if (v656)
              {
                v657 = (unint64_t *)(v656 + 8);
                do
                  v658 = __ldxr(v657);
                while (__stxr(v658 + 1, v657));
              }
              v659 = *(std::__shared_weak_count **)(v655 + 24);
              *(_QWORD *)(v655 + 16) = v654;
              *(_QWORD *)(v655 + 24) = v656;
              if (v659)
              {
                v660 = (unint64_t *)&v659->__shared_owners_;
                do
                  v661 = __ldaxr(v660);
                while (__stlxr(v661 - 1, v660));
                if (!v661)
                {
                  ((void (*)(std::__shared_weak_count *))v659->__on_zero_shared)(v659);
                  std::__shared_weak_count::__release_weak(v659);
                }
              }
              *(_QWORD *)(v31[12] + 8) = v869;
            }
            v662 = v31[8];
            *(_QWORD *)(v662 + 40) = 0;
            v663 = *(_QWORD *)(a1 + v867);
            *(_QWORD *)(v662 + 32) = v663;
            v664 = v31[20];
            v665 = *(_QWORD *)(v868 + 8);
            if (v665)
            {
              v666 = (unint64_t *)(v665 + 8);
              do
                v667 = __ldxr(v666);
              while (__stxr(v667 + 1, v666));
            }
            v248 = *(std::__shared_weak_count **)(v664 + 40);
            *(_QWORD *)(v664 + 32) = v663;
            *(_QWORD *)(v664 + 40) = v665;
            if (!v248)
              goto LABEL_734;
            v668 = (unint64_t *)&v248->__shared_owners_;
            do
              v250 = __ldaxr(v668);
            while (__stlxr(v250 - 1, v668));
            goto LABEL_732;
          }
          v625 = (unint64_t *)&v624->__shared_owners_;
          do
            v626 = __ldaxr(v625);
          while (__stlxr(v626 - 1, v625));
        }
        if (!v626)
        {
          ((void (*)(std::__shared_weak_count *))v624->__on_zero_shared)(v624);
          std::__shared_weak_count::__release_weak(v624);
        }
        goto LABEL_690;
      }
      if (a5)
      {
        v68 = *(_QWORD *)(a1 + 360);
        v69 = *(_QWORD *)(v68 + 8);
        v34 = a3;
        if (v69 == *(_QWORD *)v68)
        {
          v155 = *(_QWORD *)(v68 + 88);
          if (!v155)
            goto LABEL_936;
          v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 48))(v155);
          v70 = *(_QWORD **)(v68 + 40);
          v156 = *(_QWORD *)(v68 + 48);
          if ((unint64_t)v70 >= v156)
          {
            v254 = *(_QWORD *)(v68 + 32);
            v255 = ((uint64_t)v70 - v254) >> 3;
            v74 = v255 + 1;
            if ((unint64_t)(v255 + 1) >> 61)
              goto LABEL_937;
            v256 = v156 - v254;
            if (v256 >> 2 > v74)
              v74 = v256 >> 2;
            if ((unint64_t)v256 >= 0x7FFFFFFFFFFFFFF8)
              v74 = 0x1FFFFFFFFFFFFFFFLL;
            if (v74)
            {
              v257 = 8 * v74;
              v258 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v68 + 56) + 16))(*(_QWORD *)(v68 + 56), 8 * v74, 8);
              v78 = (_QWORD *)(v258 + 8 * v255);
              v74 = v258 + v257;
              if (v258)
                *v78 = v31;
            }
            else
            {
              v78 = (_QWORD *)(8 * v255);
            }
            v157 = v78 + 1;
            v325 = *(_QWORD *)(v68 + 32);
            v285 = *(_QWORD *)(v68 + 40);
            if (v285 == v325)
              goto LABEL_559;
            v326 = v285 - v325 - 8;
            if (v326 < 0x38)
            {
              v328 = *(_QWORD *)(v68 + 40);
            }
            else if ((unint64_t)(v285 - (_QWORD)v78) < 0x20)
            {
              v328 = *(_QWORD *)(v68 + 40);
            }
            else
            {
              v327 = (v326 >> 3) + 1;
              v328 = v285 - 8 * (v327 & 0x3FFFFFFFFFFFFFFCLL);
              v329 = v78 - 2;
              v330 = (__int128 *)(v285 - 16);
              v331 = v327 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v332 = *v330;
                *(v329 - 1) = *(v330 - 1);
                *v329 = v332;
                v329 -= 2;
                v330 -= 2;
                v331 -= 4;
              }
              while (v331);
              v78 -= v327 & 0x3FFFFFFFFFFFFFFCLL;
              if (v327 == (v327 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_558;
            }
            do
            {
              v507 = *(_QWORD *)(v328 - 8);
              v328 -= 8;
              *--v78 = v507;
            }
            while (v328 != v325);
            goto LABEL_558;
          }
        }
        else
        {
          v31 = *(_QWORD **)(v69 - 8);
          *(_QWORD *)(v68 + 8) = v69 - 8;
          v70 = *(_QWORD **)(v68 + 40);
          v71 = *(_QWORD *)(v68 + 48);
          if ((unint64_t)v70 >= v71)
          {
            v72 = *(_QWORD *)(v68 + 32);
            v73 = ((uint64_t)v70 - v72) >> 3;
            v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 61)
              goto LABEL_937;
            v75 = v71 - v72;
            if (v75 >> 2 > v74)
              v74 = v75 >> 2;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
              v74 = 0x1FFFFFFFFFFFFFFFLL;
            if (v74)
            {
              v76 = 8 * v74;
              v77 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v68 + 56) + 16))(*(_QWORD *)(v68 + 56), 8 * v74, 8);
              v78 = (_QWORD *)(v77 + 8 * v73);
              v74 = v77 + v76;
              if (v77)
                *v78 = v31;
            }
            else
            {
              v78 = (_QWORD *)(8 * v73);
            }
            v157 = v78 + 1;
            v286 = *(_QWORD *)(v68 + 32);
            v285 = *(_QWORD *)(v68 + 40);
            if (v285 == v286)
              goto LABEL_559;
            v287 = v285 - v286 - 8;
            if (v287 < 0x38)
            {
              v289 = *(_QWORD *)(v68 + 40);
            }
            else if ((unint64_t)(v285 - (_QWORD)v78) < 0x20)
            {
              v289 = *(_QWORD *)(v68 + 40);
            }
            else
            {
              v288 = (v287 >> 3) + 1;
              v289 = v285 - 8 * (v288 & 0x3FFFFFFFFFFFFFFCLL);
              v290 = v78 - 2;
              v291 = (__int128 *)(v285 - 16);
              v292 = v288 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v293 = *v291;
                *(v290 - 1) = *(v291 - 1);
                *v290 = v293;
                v290 -= 2;
                v291 -= 2;
                v292 -= 4;
              }
              while (v292);
              v78 -= v288 & 0x3FFFFFFFFFFFFFFCLL;
              if (v288 == (v288 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_558;
            }
            do
            {
              v468 = *(_QWORD *)(v289 - 8);
              v289 -= 8;
              *--v78 = v468;
            }
            while (v289 != v286);
LABEL_558:
            v285 = *(_QWORD *)(v68 + 32);
LABEL_559:
            *(_QWORD *)(v68 + 32) = v78;
            *(_QWORD *)(v68 + 40) = v157;
            v508 = *(_QWORD *)(v68 + 48);
            *(_QWORD *)(v68 + 48) = v74;
            if (v285)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v68 + 56) + 40))(*(_QWORD *)(v68 + 56), v285, v508 - v285);
LABEL_561:
            *(_QWORD *)(v68 + 40) = v157;
            v874 = v31;
            v509 = *(_QWORD *)(v68 + 120);
            if (!v509)
              goto LABEL_936;
            (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v509 + 48))(v509, &v874);
            v510 = v31[8];
            *(_QWORD *)(v510 + 88) = 0;
            v511 = *(_QWORD *)(a1 + 1408);
            *(_QWORD *)(v510 + 80) = v511;
            v512 = v31[20];
            v513 = *(_QWORD *)(a1 + 1416);
            if (v513)
            {
              v514 = (unint64_t *)(v513 + 8);
              do
                v515 = __ldxr(v514);
              while (__stxr(v515 + 1, v514));
            }
            v516 = *(std::__shared_weak_count **)(v512 + 88);
            *(_QWORD *)(v512 + 80) = v511;
            *(_QWORD *)(v512 + 88) = v513;
            if (v516)
            {
              v517 = (unint64_t *)&v516->__shared_owners_;
              do
                v518 = __ldaxr(v517);
              while (__stlxr(v518 - 1, v517));
              if (!v518)
              {
                ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
                std::__shared_weak_count::__release_weak(v516);
              }
            }
            v519 = (_QWORD *)v31[8];
            v519[1] = 0;
            v520 = *(_QWORD *)(a1 + 1376);
            *v519 = v520;
            v521 = (_QWORD *)v31[20];
            v522 = *(_QWORD *)(a1 + 1384);
            if (v522)
            {
              v523 = (unint64_t *)(v522 + 8);
              do
                v524 = __ldxr(v523);
              while (__stxr(v524 + 1, v523));
            }
            v525 = (std::__shared_weak_count *)v521[1];
            *v521 = v520;
            v521[1] = v522;
            if (v525)
            {
              v526 = (unint64_t *)&v525->__shared_owners_;
              do
                v527 = __ldaxr(v526);
              while (__stlxr(v527 - 1, v526));
              if (!v527)
              {
                ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
                std::__shared_weak_count::__release_weak(v525);
              }
            }
            v528 = v31[8];
            *(_QWORD *)(v528 + 24) = 0;
            v529 = *(_QWORD *)(a1 + v870);
            *(_QWORD *)(v528 + 16) = v529;
            v530 = v31[20];
            v531 = *(_QWORD *)(v871 + 8);
            if (v531)
            {
              v532 = (unint64_t *)(v531 + 8);
              do
                v533 = __ldxr(v532);
              while (__stxr(v533 + 1, v532));
            }
            v534 = *(std::__shared_weak_count **)(v530 + 24);
            *(_QWORD *)(v530 + 16) = v529;
            *(_QWORD *)(v530 + 24) = v531;
            if (v534)
            {
              v535 = (unint64_t *)&v534->__shared_owners_;
              do
                v536 = __ldaxr(v535);
              while (__stlxr(v536 - 1, v535));
              if (!v536)
              {
                ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
                std::__shared_weak_count::__release_weak(v534);
              }
            }
            v537 = v31[8];
            *(_QWORD *)(v537 + 56) = 0;
            v538 = *(_QWORD *)(a1 + 1496);
            *(_QWORD *)(v537 + 48) = v538;
            v539 = v31[20];
            v540 = *(_QWORD *)(a1 + 1504);
            if (v540)
            {
              v541 = (unint64_t *)(v540 + 8);
              do
                v542 = __ldxr(v541);
              while (__stxr(v542 + 1, v541));
            }
            v543 = *(std::__shared_weak_count **)(v539 + 56);
            *(_QWORD *)(v539 + 48) = v538;
            *(_QWORD *)(v539 + 56) = v540;
            if (v543)
            {
              v544 = (unint64_t *)&v543->__shared_owners_;
              do
                v545 = __ldaxr(v544);
              while (__stlxr(v545 - 1, v544));
              if (!v545)
              {
                ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
                std::__shared_weak_count::__release_weak(v543);
              }
            }
            *(_QWORD *)(v31[12] + 16) = v869;
            v546 = v31[8];
            *(_QWORD *)(v546 + 40) = 0;
            v547 = *(_QWORD *)(a1 + 1640);
            *(_QWORD *)(v546 + 32) = v547;
            v548 = v31[20];
            v549 = *(_QWORD *)(a1 + 1648);
            if (v549)
            {
              v550 = (unint64_t *)(v549 + 8);
              do
                v551 = __ldxr(v550);
              while (__stxr(v551 + 1, v550));
            }
            v552 = *(std::__shared_weak_count **)(v548 + 40);
            *(_QWORD *)(v548 + 32) = v547;
            *(_QWORD *)(v548 + 40) = v549;
            if (v552)
            {
              v553 = (unint64_t *)&v552->__shared_owners_;
              do
                v554 = __ldaxr(v553);
              while (__stlxr(v554 - 1, v553));
              if (!v554)
              {
                ((void (*)(std::__shared_weak_count *))v552->__on_zero_shared)(v552);
                std::__shared_weak_count::__release_weak(v552);
              }
            }
            *(_QWORD *)(v31[12] + 8) = v865;
            v555 = v31[8];
            *(_QWORD *)(v555 + 72) = 0;
            v556 = *(_QWORD *)(a1 + 1008);
            *(_QWORD *)(v555 + 64) = v556;
            v557 = v31[20];
            v558 = *(_QWORD *)(a1 + 1016);
            if (v558)
            {
              v559 = (unint64_t *)(v558 + 8);
              do
                v560 = __ldxr(v559);
              while (__stxr(v560 + 1, v559));
            }
            v248 = *(std::__shared_weak_count **)(v557 + 72);
            *(_QWORD *)(v557 + 64) = v556;
            *(_QWORD *)(v557 + 72) = v558;
            if (!v248)
              goto LABEL_734;
            v561 = (unint64_t *)&v248->__shared_owners_;
            do
              v250 = __ldaxr(v561);
            while (__stlxr(v250 - 1, v561));
            goto LABEL_732;
          }
        }
        if (v70)
          *v70 = v31;
        v157 = v70 + 1;
        goto LABEL_561;
      }
      v97 = *(_QWORD *)(a1 + 352);
      v98 = *(_QWORD *)(v97 + 8);
      v34 = a3;
      if (v98 == *(_QWORD *)v97)
      {
        v158 = *(_QWORD *)(v97 + 88);
        if (!v158)
          goto LABEL_936;
        v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 48))(v158);
        v99 = *(_QWORD **)(v97 + 40);
        v159 = *(_QWORD *)(v97 + 48);
        if ((unint64_t)v99 >= v159)
        {
          v259 = *(_QWORD *)(v97 + 32);
          v260 = ((uint64_t)v99 - v259) >> 3;
          v103 = v260 + 1;
          if ((unint64_t)(v260 + 1) >> 61)
            goto LABEL_937;
          v261 = v159 - v259;
          if (v261 >> 2 > v103)
            v103 = v261 >> 2;
          if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFF8)
            v103 = 0x1FFFFFFFFFFFFFFFLL;
          if (v103)
          {
            v262 = 8 * v103;
            v263 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v97 + 56) + 16))(*(_QWORD *)(v97 + 56), 8 * v103, 8);
            v107 = (_QWORD *)(v263 + 8 * v260);
            v103 = v263 + v262;
            if (v263)
              *v107 = v31;
          }
          else
          {
            v107 = (_QWORD *)(8 * v260);
          }
          v160 = v107 + 1;
          v333 = *(_QWORD *)(v97 + 32);
          v294 = *(_QWORD *)(v97 + 40);
          if (v294 == v333)
            goto LABEL_613;
          v334 = v294 - v333 - 8;
          if (v334 < 0x38)
          {
            v336 = *(_QWORD *)(v97 + 40);
          }
          else if ((unint64_t)(v294 - (_QWORD)v107) < 0x20)
          {
            v336 = *(_QWORD *)(v97 + 40);
          }
          else
          {
            v335 = (v334 >> 3) + 1;
            v336 = v294 - 8 * (v335 & 0x3FFFFFFFFFFFFFFCLL);
            v337 = v107 - 2;
            v338 = (__int128 *)(v294 - 16);
            v339 = v335 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v340 = *v338;
              *(v337 - 1) = *(v338 - 1);
              *v337 = v340;
              v337 -= 2;
              v338 -= 2;
              v339 -= 4;
            }
            while (v339);
            v107 -= v335 & 0x3FFFFFFFFFFFFFFCLL;
            if (v335 == (v335 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_612;
          }
          do
          {
            v562 = *(_QWORD *)(v336 - 8);
            v336 -= 8;
            *--v107 = v562;
          }
          while (v336 != v333);
          goto LABEL_612;
        }
      }
      else
      {
        v31 = *(_QWORD **)(v98 - 8);
        *(_QWORD *)(v97 + 8) = v98 - 8;
        v99 = *(_QWORD **)(v97 + 40);
        v100 = *(_QWORD *)(v97 + 48);
        if ((unint64_t)v99 >= v100)
        {
          v101 = *(_QWORD *)(v97 + 32);
          v102 = ((uint64_t)v99 - v101) >> 3;
          v103 = v102 + 1;
          if ((unint64_t)(v102 + 1) >> 61)
            goto LABEL_937;
          v104 = v100 - v101;
          if (v104 >> 2 > v103)
            v103 = v104 >> 2;
          if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
            v103 = 0x1FFFFFFFFFFFFFFFLL;
          if (v103)
          {
            v105 = 8 * v103;
            v106 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v97 + 56) + 16))(*(_QWORD *)(v97 + 56), 8 * v103, 8);
            v107 = (_QWORD *)(v106 + 8 * v102);
            v103 = v106 + v105;
            if (v106)
              *v107 = v31;
          }
          else
          {
            v107 = (_QWORD *)(8 * v102);
          }
          v160 = v107 + 1;
          v295 = *(_QWORD *)(v97 + 32);
          v294 = *(_QWORD *)(v97 + 40);
          if (v294 == v295)
            goto LABEL_613;
          v296 = v294 - v295 - 8;
          if (v296 < 0x38)
          {
            v298 = *(_QWORD *)(v97 + 40);
          }
          else if ((unint64_t)(v294 - (_QWORD)v107) < 0x20)
          {
            v298 = *(_QWORD *)(v97 + 40);
          }
          else
          {
            v297 = (v296 >> 3) + 1;
            v298 = v294 - 8 * (v297 & 0x3FFFFFFFFFFFFFFCLL);
            v299 = v107 - 2;
            v300 = (__int128 *)(v294 - 16);
            v301 = v297 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v302 = *v300;
              *(v299 - 1) = *(v300 - 1);
              *v299 = v302;
              v299 -= 2;
              v300 -= 2;
              v301 -= 4;
            }
            while (v301);
            v107 -= v297 & 0x3FFFFFFFFFFFFFFCLL;
            if (v297 == (v297 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_612;
          }
          do
          {
            v469 = *(_QWORD *)(v298 - 8);
            v298 -= 8;
            *--v107 = v469;
          }
          while (v298 != v295);
LABEL_612:
          v294 = *(_QWORD *)(v97 + 32);
LABEL_613:
          *(_QWORD *)(v97 + 32) = v107;
          *(_QWORD *)(v97 + 40) = v160;
          v563 = *(_QWORD *)(v97 + 48);
          *(_QWORD *)(v97 + 48) = v103;
          if (v294)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v97 + 56) + 40))(*(_QWORD *)(v97 + 56), v294, v563 - v294);
LABEL_615:
          *(_QWORD *)(v97 + 40) = v160;
          v874 = v31;
          v564 = *(_QWORD *)(v97 + 120);
          if (!v564)
            goto LABEL_936;
          (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v564 + 48))(v564, &v874);
          v565 = v31[8];
          *(_QWORD *)(v565 + 88) = 0;
          v566 = *(_QWORD *)(a1 + 1408);
          *(_QWORD *)(v565 + 80) = v566;
          v567 = v31[20];
          v568 = *(_QWORD *)(a1 + 1416);
          if (v568)
          {
            v569 = (unint64_t *)(v568 + 8);
            do
              v570 = __ldxr(v569);
            while (__stxr(v570 + 1, v569));
          }
          v571 = *(std::__shared_weak_count **)(v567 + 88);
          *(_QWORD *)(v567 + 80) = v566;
          *(_QWORD *)(v567 + 88) = v568;
          if (v571)
          {
            v572 = (unint64_t *)&v571->__shared_owners_;
            do
              v573 = __ldaxr(v572);
            while (__stlxr(v573 - 1, v572));
            if (!v573)
            {
              ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
              std::__shared_weak_count::__release_weak(v571);
            }
          }
          v574 = (_QWORD *)v31[8];
          v574[1] = 0;
          v575 = *(_QWORD *)(a1 + 1376);
          *v574 = v575;
          v576 = (_QWORD *)v31[20];
          v577 = *(_QWORD *)(a1 + 1384);
          if (v577)
          {
            v578 = (unint64_t *)(v577 + 8);
            do
              v579 = __ldxr(v578);
            while (__stxr(v579 + 1, v578));
          }
          v580 = (std::__shared_weak_count *)v576[1];
          *v576 = v575;
          v576[1] = v577;
          if (v580)
          {
            v581 = (unint64_t *)&v580->__shared_owners_;
            do
              v582 = __ldaxr(v581);
            while (__stlxr(v582 - 1, v581));
            if (!v582)
            {
              ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
              std::__shared_weak_count::__release_weak(v580);
            }
          }
          v583 = v31[8];
          *(_QWORD *)(v583 + 24) = 0;
          v584 = *(_QWORD *)(a1 + v870);
          *(_QWORD *)(v583 + 16) = v584;
          v585 = v31[20];
          v586 = *(_QWORD *)(v871 + 8);
          if (v586)
          {
            v587 = (unint64_t *)(v586 + 8);
            do
              v588 = __ldxr(v587);
            while (__stxr(v588 + 1, v587));
          }
          v589 = *(std::__shared_weak_count **)(v585 + 24);
          *(_QWORD *)(v585 + 16) = v584;
          *(_QWORD *)(v585 + 24) = v586;
          if (v589)
          {
            v590 = (unint64_t *)&v589->__shared_owners_;
            do
              v591 = __ldaxr(v590);
            while (__stlxr(v591 - 1, v590));
            if (!v591)
            {
              ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
              std::__shared_weak_count::__release_weak(v589);
            }
          }
          v592 = v31[8];
          *(_QWORD *)(v592 + 56) = 0;
          v593 = *(_QWORD *)(a1 + 1496);
          *(_QWORD *)(v592 + 48) = v593;
          v594 = v31[20];
          v595 = *(_QWORD *)(a1 + 1504);
          if (v595)
          {
            v596 = (unint64_t *)(v595 + 8);
            do
              v597 = __ldxr(v596);
            while (__stxr(v597 + 1, v596));
          }
          v598 = *(std::__shared_weak_count **)(v594 + 56);
          *(_QWORD *)(v594 + 48) = v593;
          *(_QWORD *)(v594 + 56) = v595;
          if (v598)
          {
            v599 = (unint64_t *)&v598->__shared_owners_;
            do
              v600 = __ldaxr(v599);
            while (__stlxr(v600 - 1, v599));
            if (!v600)
            {
              ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
              std::__shared_weak_count::__release_weak(v598);
            }
          }
          *(_QWORD *)(v31[12] + 16) = v869;
          v601 = v31[8];
          *(_QWORD *)(v601 + 40) = 0;
          v602 = *(_QWORD *)(a1 + 1640);
          *(_QWORD *)(v601 + 32) = v602;
          v603 = v31[20];
          v604 = *(_QWORD *)(a1 + 1648);
          if (v604)
          {
            v605 = (unint64_t *)(v604 + 8);
            do
              v606 = __ldxr(v605);
            while (__stxr(v606 + 1, v605));
          }
          v607 = *(std::__shared_weak_count **)(v603 + 40);
          *(_QWORD *)(v603 + 32) = v602;
          *(_QWORD *)(v603 + 40) = v604;
          if (v607)
          {
            v608 = (unint64_t *)&v607->__shared_owners_;
            do
              v609 = __ldaxr(v608);
            while (__stlxr(v609 - 1, v608));
            if (!v609)
            {
              ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
              std::__shared_weak_count::__release_weak(v607);
            }
          }
          *(_QWORD *)(v31[12] + 8) = v865;
          v610 = v31[8];
          *(_QWORD *)(v610 + 72) = 0;
          v611 = *(_QWORD *)(a1 + 992);
          *(_QWORD *)(v610 + 64) = v611;
          v612 = v31[20];
          v613 = *(_QWORD *)(a1 + 1000);
          if (v613)
          {
            v614 = (unint64_t *)(v613 + 8);
            do
              v615 = __ldxr(v614);
            while (__stxr(v615 + 1, v614));
          }
          v248 = *(std::__shared_weak_count **)(v612 + 72);
          *(_QWORD *)(v612 + 64) = v611;
          *(_QWORD *)(v612 + 72) = v613;
          if (!v248)
            goto LABEL_734;
          v616 = (unint64_t *)&v248->__shared_owners_;
          do
            v250 = __ldaxr(v616);
          while (__stlxr(v250 - 1, v616));
          goto LABEL_732;
        }
      }
      if (v99)
        *v99 = v31;
      v160 = v99 + 1;
      goto LABEL_615;
    }
    v57 = *(_QWORD *)(a1 + 368);
    v58 = *(_QWORD *)(v57 + 8);
    if (v58 == *(_QWORD *)v57)
    {
      v132 = *(_QWORD *)(v57 + 88);
      if (!v132)
        goto LABEL_936;
      v34 = a3;
      v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 48))(v132);
      v59 = *(_QWORD **)(v57 + 40);
      v133 = *(_QWORD *)(v57 + 48);
      if ((unint64_t)v59 >= v133)
      {
        v169 = *(_QWORD *)(v57 + 32);
        v170 = ((uint64_t)v59 - v169) >> 3;
        v63 = v170 + 1;
        if ((unint64_t)(v170 + 1) >> 61)
          goto LABEL_937;
        v171 = v133 - v169;
        if (v171 >> 2 > v63)
          v63 = v171 >> 2;
        if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        if (v63)
        {
          v172 = 8 * v63;
          v173 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v57 + 56) + 16))(*(_QWORD *)(v57 + 56), 8 * v63, 8);
          v67 = (_QWORD *)(v173 + 8 * v170);
          v63 = v173 + v172;
          if (v173)
            *v67 = v31;
        }
        else
        {
          v67 = (_QWORD *)(8 * v170);
        }
        v134 = v67 + 1;
        v277 = *(_QWORD *)(v57 + 32);
        v194 = *(_QWORD *)(v57 + 40);
        if (v194 == v277)
          goto LABEL_453;
        v278 = v194 - v277 - 8;
        if (v278 < 0x38)
        {
          v280 = *(_QWORD *)(v57 + 40);
        }
        else if ((unint64_t)(v194 - (_QWORD)v67) < 0x20)
        {
          v280 = *(_QWORD *)(v57 + 40);
        }
        else
        {
          v279 = (v278 >> 3) + 1;
          v280 = v194 - 8 * (v279 & 0x3FFFFFFFFFFFFFFCLL);
          v281 = v67 - 2;
          v282 = (__int128 *)(v194 - 16);
          v283 = v279 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v284 = *v282;
            *(v281 - 1) = *(v282 - 1);
            *v281 = v284;
            v281 -= 2;
            v282 -= 2;
            v283 -= 4;
          }
          while (v283);
          v67 -= v279 & 0x3FFFFFFFFFFFFFFCLL;
          if (v279 == (v279 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_452;
        }
        do
        {
          v413 = *(_QWORD *)(v280 - 8);
          v280 -= 8;
          *--v67 = v413;
        }
        while (v280 != v277);
        goto LABEL_452;
      }
    }
    else
    {
      v31 = *(_QWORD **)(v58 - 8);
      *(_QWORD *)(v57 + 8) = v58 - 8;
      v59 = *(_QWORD **)(v57 + 40);
      v60 = *(_QWORD *)(v57 + 48);
      v34 = a3;
      if ((unint64_t)v59 >= v60)
      {
        v61 = *(_QWORD *)(v57 + 32);
        v62 = ((uint64_t)v59 - v61) >> 3;
        v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 61)
          goto LABEL_937;
        v64 = v60 - v61;
        if (v64 >> 2 > v63)
          v63 = v64 >> 2;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        if (v63)
        {
          v65 = 8 * v63;
          v66 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v57 + 56) + 16))(*(_QWORD *)(v57 + 56), 8 * v63, 8);
          v67 = (_QWORD *)(v66 + 8 * v62);
          v63 = v66 + v65;
          if (v66)
            *v67 = v31;
        }
        else
        {
          v67 = (_QWORD *)(8 * v62);
        }
        v134 = v67 + 1;
        v195 = *(_QWORD *)(v57 + 32);
        v194 = *(_QWORD *)(v57 + 40);
        if (v194 == v195)
          goto LABEL_453;
        v196 = v194 - v195 - 8;
        if (v196 < 0x38)
        {
          v198 = *(_QWORD *)(v57 + 40);
        }
        else if ((unint64_t)(v194 - (_QWORD)v67) < 0x20)
        {
          v198 = *(_QWORD *)(v57 + 40);
        }
        else
        {
          v197 = (v196 >> 3) + 1;
          v198 = v194 - 8 * (v197 & 0x3FFFFFFFFFFFFFFCLL);
          v199 = v67 - 2;
          v200 = (__int128 *)(v194 - 16);
          v201 = v197 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v202 = *v200;
            *(v199 - 1) = *(v200 - 1);
            *v199 = v202;
            v199 -= 2;
            v200 -= 2;
            v201 -= 4;
          }
          while (v201);
          v67 -= v197 & 0x3FFFFFFFFFFFFFFCLL;
          if (v197 == (v197 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_452;
        }
        do
        {
          v313 = *(_QWORD *)(v198 - 8);
          v198 -= 8;
          *--v67 = v313;
        }
        while (v198 != v195);
LABEL_452:
        v194 = *(_QWORD *)(v57 + 32);
LABEL_453:
        *(_QWORD *)(v57 + 32) = v67;
        *(_QWORD *)(v57 + 40) = v134;
        v414 = *(_QWORD *)(v57 + 48);
        *(_QWORD *)(v57 + 48) = v63;
        if (v194)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v57 + 56) + 40))(*(_QWORD *)(v57 + 56), v194, v414 - v194);
LABEL_455:
        *(_QWORD *)(v57 + 40) = v134;
        v874 = v31;
        v415 = *(_QWORD *)(v57 + 120);
        if (!v415)
          goto LABEL_936;
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v415 + 48))(v415, &v874);
        v416 = v31[8];
        *(_QWORD *)(v416 + 88) = 0;
        v417 = *(_QWORD *)(a1 + 1408);
        *(_QWORD *)(v416 + 80) = v417;
        v418 = v31[20];
        v419 = *(_QWORD *)(a1 + 1416);
        if (v419)
        {
          v420 = (unint64_t *)(v419 + 8);
          do
            v421 = __ldxr(v420);
          while (__stxr(v421 + 1, v420));
        }
        v422 = *(std::__shared_weak_count **)(v418 + 88);
        *(_QWORD *)(v418 + 80) = v417;
        *(_QWORD *)(v418 + 88) = v419;
        if (v422)
        {
          v423 = (unint64_t *)&v422->__shared_owners_;
          do
            v424 = __ldaxr(v423);
          while (__stlxr(v424 - 1, v423));
          if (!v424)
          {
            ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
            std::__shared_weak_count::__release_weak(v422);
          }
        }
        v425 = (_QWORD *)v31[8];
        v425[1] = 0;
        v426 = *(_QWORD *)(a1 + 1376);
        *v425 = v426;
        v427 = (_QWORD *)v31[20];
        v428 = *(_QWORD *)(a1 + 1384);
        if (v428)
        {
          v429 = (unint64_t *)(v428 + 8);
          do
            v430 = __ldxr(v429);
          while (__stxr(v430 + 1, v429));
        }
        v431 = (std::__shared_weak_count *)v427[1];
        *v427 = v426;
        v427[1] = v428;
        if (v431)
        {
          v432 = (unint64_t *)&v431->__shared_owners_;
          do
            v433 = __ldaxr(v432);
          while (__stlxr(v433 - 1, v432));
          if (!v433)
          {
            ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
            std::__shared_weak_count::__release_weak(v431);
          }
        }
        v434 = v31[8];
        *(_QWORD *)(v434 + 24) = 0;
        v435 = *(_QWORD *)(a1 + v870);
        *(_QWORD *)(v434 + 16) = v435;
        v436 = v31[20];
        v437 = *(_QWORD *)(v871 + 8);
        if (v437)
        {
          v438 = (unint64_t *)(v437 + 8);
          do
            v439 = __ldxr(v438);
          while (__stxr(v439 + 1, v438));
        }
        v440 = *(std::__shared_weak_count **)(v436 + 24);
        *(_QWORD *)(v436 + 16) = v435;
        *(_QWORD *)(v436 + 24) = v437;
        if (v440)
        {
          v441 = (unint64_t *)&v440->__shared_owners_;
          do
            v442 = __ldaxr(v441);
          while (__stlxr(v442 - 1, v441));
          if (!v442)
          {
            ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
            std::__shared_weak_count::__release_weak(v440);
          }
        }
        v443 = v31[8];
        *(_QWORD *)(v443 + 56) = 0;
        v444 = *(_QWORD *)(a1 + 1496);
        *(_QWORD *)(v443 + 48) = v444;
        v445 = v31[20];
        v446 = *(_QWORD *)(a1 + 1504);
        if (v446)
        {
          v447 = (unint64_t *)(v446 + 8);
          do
            v448 = __ldxr(v447);
          while (__stxr(v448 + 1, v447));
        }
        v449 = *(std::__shared_weak_count **)(v445 + 56);
        *(_QWORD *)(v445 + 48) = v444;
        *(_QWORD *)(v445 + 56) = v446;
        if (v449)
        {
          v450 = (unint64_t *)&v449->__shared_owners_;
          do
            v451 = __ldaxr(v450);
          while (__stlxr(v451 - 1, v450));
          if (!v451)
          {
            ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
            std::__shared_weak_count::__release_weak(v449);
          }
        }
        *(_QWORD *)(v31[12] + 16) = v869;
        v452 = v31[8];
        *(_QWORD *)(v452 + 40) = 0;
        v453 = *(_QWORD *)(a1 + 1640);
        *(_QWORD *)(v452 + 32) = v453;
        v454 = v31[20];
        v455 = *(_QWORD *)(a1 + 1648);
        if (v455)
        {
          v456 = (unint64_t *)(v455 + 8);
          do
            v457 = __ldxr(v456);
          while (__stxr(v457 + 1, v456));
        }
        v458 = *(std::__shared_weak_count **)(v454 + 40);
        *(_QWORD *)(v454 + 32) = v453;
        *(_QWORD *)(v454 + 40) = v455;
        if (v458)
        {
          v459 = (unint64_t *)&v458->__shared_owners_;
          do
            v460 = __ldaxr(v459);
          while (__stlxr(v460 - 1, v459));
          if (!v460)
          {
            ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
            std::__shared_weak_count::__release_weak(v458);
          }
        }
        *(_QWORD *)(v31[12] + 8) = v865;
        v461 = v31[8];
        *(_QWORD *)(v461 + 72) = 0;
        v462 = *(_QWORD *)(a1 + v867);
        *(_QWORD *)(v461 + 64) = v462;
        v463 = v31[20];
        v464 = *(_QWORD *)(v868 + 8);
        if (v464)
        {
          v465 = (unint64_t *)(v464 + 8);
          do
            v466 = __ldxr(v465);
          while (__stxr(v466 + 1, v465));
        }
        v248 = *(std::__shared_weak_count **)(v463 + 72);
        *(_QWORD *)(v463 + 64) = v462;
        *(_QWORD *)(v463 + 72) = v464;
        if (!v248)
          goto LABEL_734;
        v467 = (unint64_t *)&v248->__shared_owners_;
        do
          v250 = __ldaxr(v467);
        while (__stlxr(v250 - 1, v467));
        goto LABEL_732;
      }
    }
    if (v59)
      *v59 = v31;
    v134 = v59 + 1;
    goto LABEL_455;
  }
  v29 = *(_QWORD *)(a1 + 416);
  v30 = *(_QWORD *)(v29 + 8);
  if (v30 != *(_QWORD *)v29)
  {
    v31 = *(_QWORD **)(v30 - 8);
    *(_QWORD *)(v29 + 8) = v30 - 8;
    v32 = *(_QWORD **)(v29 + 40);
    v33 = *(_QWORD *)(v29 + 48);
    v34 = a3;
    if ((unint64_t)v32 >= v33)
    {
      v35 = *(_QWORD *)(v29 + 32);
      v36 = ((uint64_t)v32 - v35) >> 3;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61)
        goto LABEL_937;
      v38 = v33 - v35;
      if (v38 >> 2 > v37)
        v37 = v38 >> 2;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      if (v37)
      {
        v39 = 8 * v37;
        v40 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v29 + 56) + 16))(*(_QWORD *)(v29 + 56), 8 * v37, 8);
        v41 = (_QWORD *)(v40 + 8 * v36);
        v37 = v40 + v39;
        if (v40)
          *v41 = v31;
      }
      else
      {
        v41 = (_QWORD *)(8 * v36);
      }
      v56 = v41 + 1;
      v121 = *(_QWORD *)(v29 + 32);
      v120 = *(_QWORD *)(v29 + 40);
      if (v120 == v121)
        goto LABEL_226;
      v122 = v120 - v121 - 8;
      if (v122 < 0x38)
      {
        v124 = *(_QWORD *)(v29 + 40);
      }
      else if ((unint64_t)(v120 - (_QWORD)v41) < 0x20)
      {
        v124 = *(_QWORD *)(v29 + 40);
      }
      else
      {
        v123 = (v122 >> 3) + 1;
        v124 = v120 - 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
        v125 = v41 - 2;
        v126 = (__int128 *)(v120 - 16);
        v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v128 = *v126;
          *(v125 - 1) = *(v126 - 1);
          *v125 = v128;
          v125 -= 2;
          v126 -= 2;
          v127 -= 4;
        }
        while (v127);
        v41 -= v123 & 0x3FFFFFFFFFFFFFFCLL;
        if (v123 == (v123 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_225;
      }
      do
      {
        v154 = *(_QWORD *)(v124 - 8);
        v124 -= 8;
        *--v41 = v154;
      }
      while (v124 != v121);
LABEL_225:
      v120 = *(_QWORD *)(v29 + 32);
LABEL_226:
      *(_QWORD *)(v29 + 32) = v41;
      *(_QWORD *)(v29 + 40) = v56;
      v204 = *(_QWORD *)(v29 + 48);
      *(_QWORD *)(v29 + 48) = v37;
      if (v120)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v29 + 56) + 40))(*(_QWORD *)(v29 + 56), v120, v204 - v120);
      goto LABEL_228;
    }
    goto LABEL_55;
  }
  v54 = *(_QWORD *)(v29 + 88);
  if (!v54)
  {
LABEL_936:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_937:
    abort();
  }
  v34 = a3;
  v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 48))(v54);
  v32 = *(_QWORD **)(v29 + 40);
  v55 = *(_QWORD *)(v29 + 48);
  if ((unint64_t)v32 >= v55)
  {
    v92 = *(_QWORD *)(v29 + 32);
    v93 = ((uint64_t)v32 - v92) >> 3;
    v37 = v93 + 1;
    if ((unint64_t)(v93 + 1) >> 61)
      goto LABEL_937;
    v94 = v55 - v92;
    if (v94 >> 2 > v37)
      v37 = v94 >> 2;
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    if (v37)
    {
      v95 = 8 * v37;
      v96 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v29 + 56) + 16))(*(_QWORD *)(v29 + 56), 8 * v37, 8);
      v41 = (_QWORD *)(v96 + 8 * v93);
      v37 = v96 + v95;
      if (v96)
        *v41 = v31;
    }
    else
    {
      v41 = (_QWORD *)(8 * v93);
    }
    v56 = v41 + 1;
    v135 = *(_QWORD *)(v29 + 32);
    v120 = *(_QWORD *)(v29 + 40);
    if (v120 == v135)
      goto LABEL_226;
    v136 = v120 - v135 - 8;
    if (v136 < 0x38)
    {
      v138 = *(_QWORD *)(v29 + 40);
    }
    else if ((unint64_t)(v120 - (_QWORD)v41) < 0x20)
    {
      v138 = *(_QWORD *)(v29 + 40);
    }
    else
    {
      v137 = (v136 >> 3) + 1;
      v138 = v120 - 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
      v139 = v41 - 2;
      v140 = (__int128 *)(v120 - 16);
      v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v142 = *v140;
        *(v139 - 1) = *(v140 - 1);
        *v139 = v142;
        v139 -= 2;
        v140 -= 2;
        v141 -= 4;
      }
      while (v141);
      v41 -= v137 & 0x3FFFFFFFFFFFFFFCLL;
      if (v137 == (v137 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_225;
    }
    do
    {
      v203 = *(_QWORD *)(v138 - 8);
      v138 -= 8;
      *--v41 = v203;
    }
    while (v138 != v135);
    goto LABEL_225;
  }
LABEL_55:
  if (v32)
    *v32 = v31;
  v56 = v32 + 1;
LABEL_228:
  *(_QWORD *)(v29 + 40) = v56;
  v874 = v31;
  v205 = *(_QWORD *)(v29 + 120);
  if (!v205)
    goto LABEL_936;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v205 + 48))(v205, &v874);
  v206 = v31[8];
  *(_QWORD *)(v206 + 72) = 0;
  v207 = *(_QWORD *)(a1 + 1408);
  *(_QWORD *)(v206 + 64) = v207;
  v208 = v31[20];
  v209 = *(_QWORD *)(a1 + 1416);
  if (v209)
  {
    v210 = (unint64_t *)(v209 + 8);
    do
      v211 = __ldxr(v210);
    while (__stxr(v211 + 1, v210));
  }
  v212 = *(std::__shared_weak_count **)(v208 + 72);
  *(_QWORD *)(v208 + 64) = v207;
  *(_QWORD *)(v208 + 72) = v209;
  if (v212)
  {
    v213 = (unint64_t *)&v212->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = (_QWORD *)v31[8];
  v215[1] = 0;
  v216 = *(_QWORD *)(a1 + 1376);
  *v215 = v216;
  v217 = (_QWORD *)v31[20];
  v218 = *(_QWORD *)(a1 + 1384);
  if (v218)
  {
    v219 = (unint64_t *)(v218 + 8);
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 1, v219));
  }
  v221 = (std::__shared_weak_count *)v217[1];
  *v217 = v216;
  v217[1] = v218;
  if (v221)
  {
    v222 = (unint64_t *)&v221->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v224 = v31[8];
  *(_QWORD *)(v224 + 24) = 0;
  v225 = *(_QWORD *)(a1 + v870);
  *(_QWORD *)(v224 + 16) = v225;
  v226 = v31[20];
  v227 = *(_QWORD *)(v871 + 8);
  if (v227)
  {
    v228 = (unint64_t *)(v227 + 8);
    do
      v229 = __ldxr(v228);
    while (__stxr(v229 + 1, v228));
  }
  v230 = *(std::__shared_weak_count **)(v226 + 24);
  *(_QWORD *)(v226 + 16) = v225;
  *(_QWORD *)(v226 + 24) = v227;
  if (v230)
  {
    v231 = (unint64_t *)&v230->__shared_owners_;
    do
      v232 = __ldaxr(v231);
    while (__stlxr(v232 - 1, v231));
    if (!v232)
    {
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
    }
  }
  v233 = v31[8];
  *(_QWORD *)(v233 + 40) = 0;
  v234 = *(_QWORD *)(a1 + 1496);
  *(_QWORD *)(v233 + 32) = v234;
  v235 = v31[20];
  v236 = *(_QWORD *)(a1 + 1504);
  if (v236)
  {
    v237 = (unint64_t *)(v236 + 8);
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 1, v237));
  }
  v239 = *(std::__shared_weak_count **)(v235 + 40);
  *(_QWORD *)(v235 + 32) = v234;
  *(_QWORD *)(v235 + 40) = v236;
  if (v239)
  {
    v240 = (unint64_t *)&v239->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  *(_QWORD *)(v31[12] + 8) = v869;
  v242 = v31[8];
  *(_QWORD *)(v242 + 56) = 0;
  v243 = *(_QWORD *)(a1 + v867);
  *(_QWORD *)(v242 + 48) = v243;
  v244 = v31[20];
  v245 = *(_QWORD *)(v868 + 8);
  if (v245)
  {
    v246 = (unint64_t *)(v245 + 8);
    do
      v247 = __ldxr(v246);
    while (__stxr(v247 + 1, v246));
  }
  v248 = *(std::__shared_weak_count **)(v244 + 56);
  *(_QWORD *)(v244 + 48) = v243;
  *(_QWORD *)(v244 + 56) = v245;
  if (v248)
  {
    v249 = (unint64_t *)&v248->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    goto LABEL_732;
  }
LABEL_734:
  *(_QWORD *)v31[12] = v872;
  v669 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 336));
  v670 = *(_QWORD *)v28;
  v671 = *(unsigned __int8 *)(*(_QWORD *)v28 + 8);
  if (v671 == 2)
  {
    v673 = *(unsigned __int8 *)(v34 + 8);
    v675 = a4 + 2;
    v674 = a4 + 3;
LABEL_740:
    if (v673)
      v672 = v675;
    else
      v672 = v674;
    goto LABEL_743;
  }
  if (v671 == 1)
  {
    v673 = *(unsigned __int8 *)(v34 + 8);
    v674 = a4;
    v675 = a4 + 1;
    goto LABEL_740;
  }
  if (!*(_BYTE *)(*(_QWORD *)v28 + 8))
  {
    v672 = a4;
LABEL_743:
    *((_QWORD *)v669 + 3) = *v672;
  }
  *((_QWORD *)v669 + 4) = v31;
  *((_QWORD *)v669 + 8) = a1 + 1024;
  v676 = *(unsigned __int16 *)(v670 + 38);
  v677 = v28[2];
  *((_QWORD *)v669 + 9) = 6 * v676;
  *((_QWORD *)v669 + 10) = 6 * (v677 + v676);
  *((_QWORD *)v669 + 11) = 0;
  *((_QWORD *)v669 + 12) = 1;
  result = ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(v34 + 16), v669);
  ++*(_DWORD *)(a1 + 1812);
  return result;
}

uint64_t md::LabelRenderer::addIconRenderItem(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_mutex_base *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  __int128 *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  __int128 *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _OWORD *v143;
  __int128 *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _OWORD *v151;
  __int128 *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _OWORD *v159;
  __int128 *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD *v167;
  __int128 *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  __int128 *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int8x16_t v187;
  int16x8_t v188;
  int32x4_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int16x8_t v192;
  int32x4_t v193;
  int8x16_t v194;
  int32x4_t v195;
  int8x16_t v196;
  int32x4_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t **v204;
  _QWORD *v205;
  uint64_t **v206;
  unint64_t v207;
  BOOL v208;
  _QWORD *v209;
  int v210;
  std::__shared_weak_count *v211;
  int v212;
  unint64_t *v213;
  __int128 v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t **v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224;
  BOOL v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  int8x16_t v271;
  int16x8_t v272;
  int32x4_t v273;
  int8x16_t v274;
  int8x16_t v275;
  int16x8_t v276;
  int32x4_t v277;
  int8x16_t v278;
  int32x4_t v279;
  int8x16_t v280;
  int32x4_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int8x16_t v284;
  int8x16_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t **v288;
  _QWORD *v289;
  uint64_t **v290;
  unint64_t v291;
  BOOL v292;
  _QWORD *v293;
  std::__shared_weak_count *v294;
  int v295;
  unint64_t *v296;
  __int128 v297;
  unint64_t v298;
  uint64_t *v299;
  uint64_t **v300;
  unint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  std::__shared_weak_count *v307;
  BOOL v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *p_shared_owners;
  unint64_t v316;
  unint64_t *v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t *v401;
  unint64_t v402;
  unint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t *v438;
  unint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t *v447;
  unint64_t v448;
  unint64_t *v449;
  ggl::RenderItem *v450;
  uint64_t v451;
  int v452;
  _QWORD *v453;
  int v454;
  _QWORD *v455;
  _QWORD *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t result;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  unsigned int *v466;
  int v467;
  int v468;
  uint64_t v470;
  std::__shared_weak_count *v471;
  std::__shared_weak_count *v472;
  std::__shared_weak_count *v473;
  std::__shared_weak_count *v474;
  __int128 v475;
  __int128 v476;

  v4 = a3;
  v5 = a2;
  v7 = *(_QWORD *)(a1 + 16 * *(unsigned int *)(a1 + 1540) + 1552);
  if (!v7)
    v7 = *(_QWORD *)(a1 + 1872);
  v470 = v7;
  v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 9);
  v9 = a1 + 1456;
  v10 = 1456;
  if (!*(_BYTE *)(a3 + 24))
  {
    v10 = 1440;
    v9 = a1 + 1440;
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 9))
    v11 = 1424;
  else
    v11 = v10;
  if (*(_BYTE *)(*(_QWORD *)a2 + 9))
    v12 = a1 + 1424;
  else
    v12 = v9;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v15 = (std::__shared_mutex_base *)(v13 + 104);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v13 + 104));
  v16 = *(_QWORD *)(v13 + 600);
  if (v14 < (unint64_t)((*(_QWORD *)(v13 + 608) - v16) >> 3)
    && ((v17 = *(_QWORD *)(v16 + 8 * v14)) != 0 ? (v18 = HIDWORD(v14) == HIDWORD(v17)) : (v18 = 0), v18))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v13 + 624) + 40 * v17);
    v19 = *(uint64_t **)(v13 + 632);
  }
  else
  {
    v19 = *(uint64_t **)(v13 + 632);
    v20 = v19;
  }
  std::__shared_mutex_base::unlock_shared(v15);
  if (v20 == v19 || v20 == 0)
    v22 = 0;
  else
    v22 = *v20;
  v23 = *(unsigned __int8 *)(*(_QWORD *)v5 + 4);
  if (!*(_BYTE *)(*(_QWORD *)v5 + 4))
  {
    v38 = *(_QWORD *)(a1 + 16 * *(unsigned int *)(a1 + 1684) + 1696);
    if (!v38)
      v38 = *(_QWORD *)(a1 + 1888);
    v39 = *(unsigned __int8 *)(v4 + 24);
    v40 = *(_QWORD *)(a1 + 432);
    v41 = *(_QWORD *)(v40 + 8);
    v465 = v38;
    if (v41 == *(_QWORD *)v40)
    {
      v80 = *(_QWORD *)(v40 + 88);
      if (!v80)
        goto LABEL_512;
      v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 48))(v80);
      v42 = *(_QWORD **)(v40 + 40);
      v81 = *(_QWORD *)(v40 + 48);
      if ((unint64_t)v42 >= v81)
      {
        v95 = *(_QWORD *)(v40 + 32);
        v96 = ((uint64_t)v42 - v95) >> 3;
        v46 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 61)
          goto LABEL_513;
        v97 = v81 - v95;
        if (v97 >> 2 > v46)
          v46 = v97 >> 2;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        if (v46)
        {
          v98 = v8;
          v99 = 8 * v46;
          v100 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v40 + 56) + 16))(*(_QWORD *)(v40 + 56), 8 * v46, 8);
          v51 = (_QWORD *)(v100 + 8 * v96);
          v46 = v100 + v99;
          if (v100)
            *v51 = v27;
          v8 = v98;
        }
        else
        {
          v51 = (_QWORD *)(8 * v96);
        }
        v82 = v51 + 1;
        v155 = *(_QWORD *)(v40 + 32);
        v120 = *(_QWORD *)(v40 + 40);
        if (v120 == v155)
          goto LABEL_308;
        v156 = v120 - v155 - 8;
        if (v156 < 0x38)
        {
          v158 = *(_QWORD *)(v40 + 40);
        }
        else if ((unint64_t)(v120 - (_QWORD)v51) < 0x20)
        {
          v158 = *(_QWORD *)(v40 + 40);
        }
        else
        {
          v157 = (v156 >> 3) + 1;
          v158 = v120 - 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
          v159 = v51 - 2;
          v160 = (__int128 *)(v120 - 16);
          v161 = v157 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v162 = *v160;
            *(v159 - 1) = *(v160 - 1);
            *v159 = v162;
            v159 -= 2;
            v160 -= 2;
            v161 -= 4;
          }
          while (v161);
          v51 -= v157 & 0x3FFFFFFFFFFFFFFCLL;
          if (v157 == (v157 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_307;
        }
        do
        {
          v267 = *(_QWORD *)(v158 - 8);
          v158 -= 8;
          *--v51 = v267;
        }
        while (v158 != v155);
        goto LABEL_307;
      }
    }
    else
    {
      v27 = *(_QWORD **)(v41 - 8);
      *(_QWORD *)(v40 + 8) = v41 - 8;
      v42 = *(_QWORD **)(v40 + 40);
      v43 = *(_QWORD *)(v40 + 48);
      if ((unint64_t)v42 >= v43)
      {
        v44 = *(_QWORD *)(v40 + 32);
        v45 = ((uint64_t)v42 - v44) >> 3;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 61)
          goto LABEL_513;
        v47 = v43 - v44;
        if (v47 >> 2 > v46)
          v46 = v47 >> 2;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        if (v46)
        {
          v48 = v8;
          v49 = 8 * v46;
          v50 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v40 + 56) + 16))(*(_QWORD *)(v40 + 56), 8 * v46, 8);
          v51 = (_QWORD *)(v50 + 8 * v45);
          v46 = v50 + v49;
          if (v50)
            *v51 = v27;
          v8 = v48;
        }
        else
        {
          v51 = (_QWORD *)(8 * v45);
        }
        v82 = v51 + 1;
        v121 = *(_QWORD *)(v40 + 32);
        v120 = *(_QWORD *)(v40 + 40);
        if (v120 == v121)
          goto LABEL_308;
        v122 = v120 - v121 - 8;
        if (v122 < 0x38)
        {
          v124 = *(_QWORD *)(v40 + 40);
        }
        else if ((unint64_t)(v120 - (_QWORD)v51) < 0x20)
        {
          v124 = *(_QWORD *)(v40 + 40);
        }
        else
        {
          v123 = (v122 >> 3) + 1;
          v124 = v120 - 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
          v125 = v51 - 2;
          v126 = (__int128 *)(v120 - 16);
          v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v128 = *v126;
            *(v125 - 1) = *(v126 - 1);
            *v125 = v128;
            v125 -= 2;
            v126 -= 2;
            v127 -= 4;
          }
          while (v127);
          v51 -= v123 & 0x3FFFFFFFFFFFFFFCLL;
          if (v123 == (v123 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_307;
        }
        do
        {
          v180 = *(_QWORD *)(v124 - 8);
          v124 -= 8;
          *--v51 = v180;
        }
        while (v124 != v121);
LABEL_307:
        v120 = *(_QWORD *)(v40 + 32);
LABEL_308:
        *(_QWORD *)(v40 + 32) = v51;
        *(_QWORD *)(v40 + 40) = v82;
        v268 = *(_QWORD *)(v40 + 48);
        *(_QWORD *)(v40 + 48) = v46;
        if (v120)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v40 + 56) + 40))(*(_QWORD *)(v40 + 56), v120, v268 - v120);
        goto LABEL_310;
      }
    }
    if (v42)
      *v42 = v27;
    v82 = v42 + 1;
LABEL_310:
    *(_QWORD *)(v40 + 40) = v82;
    *(_QWORD *)&v475 = v27;
    v269 = *(_QWORD *)(v40 + 120);
    if (!v269)
      goto LABEL_512;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v269 + 48))(v269, &v475);
    LOWORD(v270) = 1;
    WORD1(v270) = v39 ^ 1;
    BYTE4(v270) = v8;
    BYTE5(v270) = 1;
    HIWORD(v270) = 1;
    v271 = vceqzq_s8((int8x16_t)v270);
    v272 = vmovl_s8(*(int8x8_t *)v271.i8);
    v273 = vmovl_high_s16(v272);
    v274.i64[0] = v273.u32[2];
    v274.i64[1] = v273.u32[3];
    v275 = v274;
    v276 = vmovl_high_s8(v271);
    v277 = vmovl_high_s16(v276);
    v274.i64[0] = v277.u32[2];
    v274.i64[1] = v277.u32[3];
    v278 = v274;
    v279 = vmovl_s16(*(int16x4_t *)v272.i8);
    v274.i64[0] = v279.u32[2];
    v274.i64[1] = v279.u32[3];
    v280 = v274;
    v281 = vmovl_s16(*(int16x4_t *)v276.i8);
    v274.i64[0] = v281.u32[2];
    v274.i64[1] = v281.u32[3];
    v282 = v274;
    v274.i64[0] = v273.u32[0];
    v274.i64[1] = v273.u32[1];
    v283 = v274;
    v274.i64[0] = v277.u32[0];
    v274.i64[1] = v277.u32[1];
    v284 = v274;
    v274.i64[0] = v279.u32[0];
    v274.i64[1] = v279.u32[1];
    v285 = v274;
    v274.i64[0] = v281.u32[0];
    v274.i64[1] = v281.u32[1];
    v286 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v285), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v274)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v283), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v284))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v280), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v282)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v275), vbicq_s8((int8x16_t)xmmword_19FFB3080, v278)))));
    v287 = v286;
    v288 = (uint64_t **)(a1 + 816);
    v289 = *(_QWORD **)(a1 + 816);
    v468 = v8;
    if (v289)
    {
      v290 = (uint64_t **)(a1 + 816);
      do
      {
        v291 = v289[4];
        v292 = v291 >= v286;
        if (v291 >= v286)
          v293 = v289;
        else
          v293 = v289 + 1;
        if (v292)
          v290 = (uint64_t **)v289;
        v289 = (_QWORD *)*v293;
      }
      while (*v293);
      if (v290 != v288 && v286 >= (unint64_t)v290[4])
      {
        v306 = (std::__shared_weak_count *)v290[5];
        v307 = (std::__shared_weak_count *)v290[6];
        v474 = v307;
        if (!v307)
        {
          v308 = 1;
          if (!v306)
            goto LABEL_343;
LABEL_342:
          if (*(_QWORD *)v306[1].__shared_weak_owners_ == v27[1])
          {
            v314 = (std::__shared_weak_count *)v27[2];
            if (v314 && v314 != v306)
              ggl::PipelineSetup::resetData((uint64_t)v27);
            if (!v308)
            {
              p_shared_owners = (unint64_t *)&v307->__shared_owners_;
              do
                v316 = __ldxr(p_shared_owners);
              while (__stxr(v316 + 1, p_shared_owners));
            }
            v311 = (std::__shared_weak_count *)v27[3];
            v27[2] = v306;
            v27[3] = v307;
            if (!v311)
              goto LABEL_358;
            v317 = (unint64_t *)&v311->__shared_owners_;
            do
              v313 = __ldaxr(v317);
            while (__stlxr(v313 - 1, v317));
            goto LABEL_356;
          }
LABEL_343:
          v311 = (std::__shared_weak_count *)v27[3];
          v27[2] = 0;
          v27[3] = 0;
          if (!v311)
          {
LABEL_358:
            if (!v308)
            {
              v318 = (unint64_t *)&v307->__shared_owners_;
              do
                v319 = __ldaxr(v318);
              while (__stlxr(v319 - 1, v318));
              if (!v319)
              {
                ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                std::__shared_weak_count::__release_weak(v307);
              }
            }
            if (v474)
            {
              v320 = (unint64_t *)&v474->__shared_owners_;
              do
                v321 = __ldaxr(v320);
              while (__stlxr(v321 - 1, v320));
              if (!v321)
              {
                ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
                std::__shared_weak_count::__release_weak(v474);
              }
            }
            v322 = v27[8];
            *(_QWORD *)(v322 + 56) = 0;
            v323 = *(_QWORD *)(a1 + 1408);
            *(_QWORD *)(v322 + 48) = v323;
            v324 = v27[20];
            v325 = *(_QWORD *)(a1 + 1416);
            if (v325)
            {
              v326 = (unint64_t *)(v325 + 8);
              do
                v327 = __ldxr(v326);
              while (__stxr(v327 + 1, v326));
            }
            v328 = *(std::__shared_weak_count **)(v324 + 56);
            *(_QWORD *)(v324 + 48) = v323;
            *(_QWORD *)(v324 + 56) = v325;
            if (v328)
            {
              v329 = (unint64_t *)&v328->__shared_owners_;
              do
                v330 = __ldaxr(v329);
              while (__stlxr(v330 - 1, v329));
              if (!v330)
              {
                ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                std::__shared_weak_count::__release_weak(v328);
              }
            }
            if (v468)
            {
              v331 = (_QWORD *)v27[8];
              v331[1] = 0;
              v332 = *(_QWORD *)(a1 + 1392);
              *v331 = v332;
              v333 = (_QWORD *)v27[20];
              v334 = *(_QWORD *)(a1 + 1400);
              if (v334)
              {
                v335 = (unint64_t *)(v334 + 8);
                do
                  v336 = __ldxr(v335);
                while (__stxr(v336 + 1, v335));
              }
              v337 = (std::__shared_weak_count *)v333[1];
              *v333 = v332;
              v333[1] = v334;
              if (v337)
              {
                v338 = (unint64_t *)&v337->__shared_owners_;
                do
                  v339 = __ldaxr(v338);
                while (__stlxr(v339 - 1, v338));
                if (!v339)
                {
                  ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                  std::__shared_weak_count::__release_weak(v337);
                }
              }
            }
            v340 = v27[8];
            *(_QWORD *)(v340 + 40) = 0;
            v341 = *(_QWORD *)(a1 + 1496);
            *(_QWORD *)(v340 + 32) = v341;
            v342 = v27[20];
            v343 = *(_QWORD *)(a1 + 1504);
            if (v343)
            {
              v344 = (unint64_t *)(v343 + 8);
              do
                v345 = __ldxr(v344);
              while (__stxr(v345 + 1, v344));
            }
            v346 = *(std::__shared_weak_count **)(v342 + 40);
            *(_QWORD *)(v342 + 32) = v341;
            *(_QWORD *)(v342 + 40) = v343;
            if (v346)
            {
              v347 = (unint64_t *)&v346->__shared_owners_;
              do
                v348 = __ldaxr(v347);
              while (__stlxr(v348 - 1, v347));
              if (!v348)
              {
                ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                std::__shared_weak_count::__release_weak(v346);
              }
            }
            *(_QWORD *)(v27[12] + 8) = v470;
            *(_QWORD *)v27[12] = v465;
            v349 = v27[8];
            *(_QWORD *)(v349 + 24) = 0;
            v350 = *(_QWORD *)(a1 + 1640);
            *(_QWORD *)(v349 + 16) = v350;
            v351 = v27[20];
            v352 = *(_QWORD *)(a1 + 1648);
            if (v352)
            {
              v353 = (unint64_t *)(v352 + 8);
              do
                v354 = __ldxr(v353);
              while (__stxr(v354 + 1, v353));
            }
            v254 = *(std::__shared_weak_count **)(v351 + 24);
            *(_QWORD *)(v351 + 16) = v350;
            *(_QWORD *)(v351 + 24) = v352;
            if (!v254)
              goto LABEL_499;
            v355 = (unint64_t *)&v254->__shared_owners_;
            do
              v256 = __ldaxr(v355);
            while (__stlxr(v256 - 1, v355));
            goto LABEL_497;
          }
          v312 = (unint64_t *)&v311->__shared_owners_;
          do
            v313 = __ldaxr(v312);
          while (__stlxr(v313 - 1, v312));
LABEL_356:
          if (!v313)
          {
            ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
            std::__shared_weak_count::__release_weak(v311);
          }
          goto LABEL_358;
        }
        v356 = (unint64_t *)&v307->__shared_owners_;
        do
          v357 = __ldxr(v356);
        while (__stxr(v357 + 1, v356));
        v308 = v307 == 0;
LABEL_339:
        v309 = (unint64_t *)&v307->__shared_owners_;
        do
          v310 = __ldxr(v309);
        while (__stxr(v310 + 1, v309));
LABEL_341:
        if (!v306)
          goto LABEL_343;
        goto LABEL_342;
      }
    }
    v463 = v4;
    v294 = (std::__shared_weak_count *)operator new(0x198uLL);
    v295 = v8;
    v294->__shared_owners_ = 0;
    v296 = (unint64_t *)&v294->__shared_owners_;
    v294->__shared_weak_owners_ = 0;
    v294->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A258;
    v297 = *(_OWORD *)(a1 + 744);
    v475 = *(_OWORD *)(a1 + 728);
    v476 = v297;
    ggl::Icon::ShadowPipelineState::ShadowPipelineState((uint64_t)&v294[1], (_QWORD *)(a1 + 712), a1 + 760, &v475, 1, v39 != 1, 0, v295 != 0, 1, 1);
    v472 = v294 + 1;
    v474 = v294;
    *(_QWORD *)&v475 = v287;
    *((_QWORD *)&v475 + 1) = v294 + 1;
    *(_QWORD *)&v476 = v294;
    do
      v298 = __ldxr(v296);
    while (__stxr(v298 + 1, v296));
    v299 = *v288;
    v300 = (uint64_t **)(a1 + 816);
    if (*v288)
    {
      while (1)
      {
        while (1)
        {
          v300 = (uint64_t **)v299;
          v301 = v299[4];
          if (v287 >= v301)
            break;
          v299 = *v300;
          v288 = v300;
          if (!*v300)
            goto LABEL_331;
        }
        if (v301 >= v287)
          break;
        v299 = v300[1];
        if (!v299)
        {
          v288 = v300 + 1;
          goto LABEL_331;
        }
      }
    }
    else
    {
LABEL_331:
      v302 = (uint64_t *)operator new(0x38uLL);
      v302[4] = v287;
      v302[5] = (uint64_t)&v294[1];
      v302[6] = (uint64_t)v294;
      *((_QWORD *)&v475 + 1) = 0;
      *(_QWORD *)&v476 = 0;
      *v302 = 0;
      v302[1] = 0;
      v302[2] = (uint64_t)v300;
      *v288 = v302;
      v303 = **(_QWORD **)(a1 + 808);
      if (v303)
      {
        *(_QWORD *)(a1 + 808) = v303;
        v302 = *v288;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 816), v302);
      ++*(_QWORD *)(a1 + 824);
      v294 = (std::__shared_weak_count *)v476;
      if (!(_QWORD)v476)
      {
LABEL_338:
        v306 = v472;
        v307 = v474;
        v308 = v474 == 0;
        v4 = v463;
        if (!v474)
          goto LABEL_341;
        goto LABEL_339;
      }
    }
    v304 = (unint64_t *)&v294->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
    goto LABEL_338;
  }
  if (v23 == 9)
  {
    v466 = v5;
    v52 = *(_QWORD *)(a1 + 16 * *(unsigned int *)(a1 + 1684) + 1696);
    if (!v52)
      v52 = *(_QWORD *)(a1 + 1888);
    v53 = *(_QWORD *)(a1 + 440);
    v54 = *(_QWORD *)(v53 + 8);
    if (v54 == *(_QWORD *)v53)
    {
      v83 = *(_QWORD *)(v53 + 88);
      if (!v83)
        goto LABEL_512;
      v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 48))(v83);
      v55 = *(_QWORD **)(v53 + 40);
      v84 = *(_QWORD *)(v53 + 48);
      if ((unint64_t)v55 >= v84)
      {
        v101 = *(_QWORD *)(v53 + 32);
        v102 = ((uint64_t)v55 - v101) >> 3;
        v59 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_513;
        v103 = v84 - v101;
        if (v103 >> 2 > v59)
          v59 = v103 >> 2;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        if (v59)
        {
          v104 = 8 * v59;
          v105 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v53 + 56) + 16))(*(_QWORD *)(v53 + 56), 8 * v59, 8);
          v63 = (_QWORD *)(v105 + 8 * v102);
          v59 = v105 + v104;
          if (v105)
            *v63 = v27;
        }
        else
        {
          v63 = (_QWORD *)(8 * v102);
        }
        v85 = v63 + 1;
        v163 = *(_QWORD *)(v53 + 32);
        v129 = *(_QWORD *)(v53 + 40);
        if (v129 == v163)
          goto LABEL_410;
        v164 = v129 - v163 - 8;
        if (v164 < 0x38)
        {
          v166 = *(_QWORD *)(v53 + 40);
        }
        else if ((unint64_t)(v129 - (_QWORD)v63) < 0x20)
        {
          v166 = *(_QWORD *)(v53 + 40);
        }
        else
        {
          v165 = (v164 >> 3) + 1;
          v166 = v129 - 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
          v167 = v63 - 2;
          v168 = (__int128 *)(v129 - 16);
          v169 = v165 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v170 = *v168;
            *(v167 - 1) = *(v168 - 1);
            *v167 = v170;
            v167 -= 2;
            v168 -= 2;
            v169 -= 4;
          }
          while (v169);
          v63 -= v165 & 0x3FFFFFFFFFFFFFFCLL;
          if (v165 == (v165 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_409;
        }
        do
        {
          v358 = *(_QWORD *)(v166 - 8);
          v166 -= 8;
          *--v63 = v358;
        }
        while (v166 != v163);
        goto LABEL_409;
      }
    }
    else
    {
      v27 = *(_QWORD **)(v54 - 8);
      *(_QWORD *)(v53 + 8) = v54 - 8;
      v55 = *(_QWORD **)(v53 + 40);
      v56 = *(_QWORD *)(v53 + 48);
      if ((unint64_t)v55 >= v56)
      {
        v57 = *(_QWORD *)(v53 + 32);
        v58 = ((uint64_t)v55 - v57) >> 3;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_513;
        v60 = v56 - v57;
        if (v60 >> 2 > v59)
          v59 = v60 >> 2;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        if (v59)
        {
          v61 = 8 * v59;
          v62 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v53 + 56) + 16))(*(_QWORD *)(v53 + 56), 8 * v59, 8);
          v63 = (_QWORD *)(v62 + 8 * v58);
          v59 = v62 + v61;
          if (v62)
            *v63 = v27;
        }
        else
        {
          v63 = (_QWORD *)(8 * v58);
        }
        v85 = v63 + 1;
        v130 = *(_QWORD *)(v53 + 32);
        v129 = *(_QWORD *)(v53 + 40);
        if (v129 == v130)
          goto LABEL_410;
        v131 = v129 - v130 - 8;
        if (v131 < 0x38)
        {
          v133 = *(_QWORD *)(v53 + 40);
        }
        else if ((unint64_t)(v129 - (_QWORD)v63) < 0x20)
        {
          v133 = *(_QWORD *)(v53 + 40);
        }
        else
        {
          v132 = (v131 >> 3) + 1;
          v133 = v129 - 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
          v134 = v63 - 2;
          v135 = (__int128 *)(v129 - 16);
          v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v137 = *v135;
            *(v134 - 1) = *(v135 - 1);
            *v134 = v137;
            v134 -= 2;
            v135 -= 2;
            v136 -= 4;
          }
          while (v136);
          v63 -= v132 & 0x3FFFFFFFFFFFFFFCLL;
          if (v132 == (v132 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_409;
        }
        do
        {
          v181 = *(_QWORD *)(v133 - 8);
          v133 -= 8;
          *--v63 = v181;
        }
        while (v133 != v130);
LABEL_409:
        v129 = *(_QWORD *)(v53 + 32);
LABEL_410:
        *(_QWORD *)(v53 + 32) = v63;
        *(_QWORD *)(v53 + 40) = v85;
        v359 = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 48) = v59;
        if (v129)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 56) + 40))(*(_QWORD *)(v53 + 56), v129, v359 - v129);
LABEL_412:
        *(_QWORD *)(v53 + 40) = v85;
        *(_QWORD *)&v475 = v27;
        v360 = *(_QWORD *)(v53 + 120);
        if (!v360)
          goto LABEL_512;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v360 + 48))(v360, &v475);
        *(_QWORD *)v27[12] = v22;
        v361 = v27[8];
        *(_QWORD *)(v361 + 72) = 0;
        v362 = *(_QWORD *)(a1 + 1408);
        *(_QWORD *)(v361 + 64) = v362;
        v363 = v27[20];
        v364 = *(_QWORD *)(a1 + 1416);
        v5 = v466;
        if (v364)
        {
          v365 = (unint64_t *)(v364 + 8);
          do
            v366 = __ldxr(v365);
          while (__stxr(v366 + 1, v365));
        }
        v367 = *(std::__shared_weak_count **)(v363 + 72);
        *(_QWORD *)(v363 + 64) = v362;
        *(_QWORD *)(v363 + 72) = v364;
        if (v367)
        {
          v368 = (unint64_t *)&v367->__shared_owners_;
          do
            v369 = __ldaxr(v368);
          while (__stlxr(v369 - 1, v368));
          if (!v369)
          {
            ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
            std::__shared_weak_count::__release_weak(v367);
          }
        }
        v370 = (_QWORD *)v27[8];
        v370[1] = 0;
        v371 = *(_QWORD *)(a1 + 1376);
        *v370 = v371;
        v372 = (_QWORD *)v27[20];
        v373 = *(_QWORD *)(a1 + 1384);
        if (v373)
        {
          v374 = (unint64_t *)(v373 + 8);
          do
            v375 = __ldxr(v374);
          while (__stxr(v375 + 1, v374));
        }
        v376 = (std::__shared_weak_count *)v372[1];
        *v372 = v371;
        v372[1] = v373;
        if (v376)
        {
          v377 = (unint64_t *)&v376->__shared_owners_;
          do
            v378 = __ldaxr(v377);
          while (__stlxr(v378 - 1, v377));
          if (!v378)
          {
            ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
            std::__shared_weak_count::__release_weak(v376);
          }
        }
        v379 = v27[8];
        *(_QWORD *)(v379 + 24) = 0;
        v380 = *(_QWORD *)(a1 + v11);
        *(_QWORD *)(v379 + 16) = v380;
        v381 = v27[20];
        v382 = *(_QWORD *)(v12 + 8);
        if (v382)
        {
          v383 = (unint64_t *)(v382 + 8);
          do
            v384 = __ldxr(v383);
          while (__stxr(v384 + 1, v383));
        }
        v385 = *(std::__shared_weak_count **)(v381 + 24);
        *(_QWORD *)(v381 + 16) = v380;
        *(_QWORD *)(v381 + 24) = v382;
        if (v385)
        {
          v386 = (unint64_t *)&v385->__shared_owners_;
          do
            v387 = __ldaxr(v386);
          while (__stlxr(v387 - 1, v386));
          if (!v387)
          {
            ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
            std::__shared_weak_count::__release_weak(v385);
          }
        }
        v388 = v27[8];
        *(_QWORD *)(v388 + 56) = 0;
        v389 = *(_QWORD *)(a1 + 1496);
        *(_QWORD *)(v388 + 48) = v389;
        v390 = v27[20];
        v391 = *(_QWORD *)(a1 + 1504);
        if (v391)
        {
          v392 = (unint64_t *)(v391 + 8);
          do
            v393 = __ldxr(v392);
          while (__stxr(v393 + 1, v392));
        }
        v394 = *(std::__shared_weak_count **)(v390 + 56);
        *(_QWORD *)(v390 + 48) = v389;
        *(_QWORD *)(v390 + 56) = v391;
        if (v394)
        {
          v395 = (unint64_t *)&v394->__shared_owners_;
          do
            v396 = __ldaxr(v395);
          while (__stlxr(v396 - 1, v395));
          if (!v396)
          {
            ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
            std::__shared_weak_count::__release_weak(v394);
          }
        }
        *(_QWORD *)(v27[12] + 16) = v470;
        *(_QWORD *)(v27[12] + 8) = v52;
        v397 = v27[8];
        *(_QWORD *)(v397 + 40) = 0;
        v398 = *(_QWORD *)(a1 + 1640);
        *(_QWORD *)(v397 + 32) = v398;
        v399 = v27[20];
        v400 = *(_QWORD *)(a1 + 1648);
        if (v400)
        {
          v401 = (unint64_t *)(v400 + 8);
          do
            v402 = __ldxr(v401);
          while (__stxr(v402 + 1, v401));
        }
        v254 = *(std::__shared_weak_count **)(v399 + 40);
        *(_QWORD *)(v399 + 32) = v398;
        *(_QWORD *)(v399 + 40) = v400;
        if (!v254)
          goto LABEL_499;
        v403 = (unint64_t *)&v254->__shared_owners_;
        do
          v256 = __ldaxr(v403);
        while (__stlxr(v256 - 1, v403));
LABEL_497:
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
        goto LABEL_499;
      }
    }
    if (v55)
      *v55 = v27;
    v85 = v55 + 1;
    goto LABEL_412;
  }
  if (v23 != 7)
  {
    v64 = v5;
    v65 = *(_QWORD *)(a1 + 16 * *(unsigned int *)(a1 + 1684) + 1696);
    if (!v65)
      v65 = *(_QWORD *)(a1 + 1888);
    v66 = *(_QWORD *)(a1 + 448);
    v67 = *(_QWORD *)(v66 + 8);
    if (v67 == *(_QWORD *)v66)
    {
      v86 = *(_QWORD *)(v66 + 88);
      if (!v86)
        goto LABEL_512;
      v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 48))(v86);
      v68 = *(_QWORD **)(v66 + 40);
      v87 = *(_QWORD *)(v66 + 48);
      if ((unint64_t)v68 >= v87)
      {
        v106 = *(_QWORD *)(v66 + 32);
        v107 = ((uint64_t)v68 - v106) >> 3;
        v72 = v107 + 1;
        if ((unint64_t)(v107 + 1) >> 61)
          goto LABEL_513;
        v108 = v87 - v106;
        if (v108 >> 2 > v72)
          v72 = v108 >> 2;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        if (v72)
        {
          v109 = 8 * v72;
          v110 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v66 + 56) + 16))(*(_QWORD *)(v66 + 56), 8 * v72, 8);
          v76 = (_QWORD *)(v110 + 8 * v107);
          v72 = v110 + v109;
          if (v110)
            *v76 = v27;
        }
        else
        {
          v76 = (_QWORD *)(8 * v107);
        }
        v88 = v76 + 1;
        v171 = *(_QWORD *)(v66 + 32);
        v138 = *(_QWORD *)(v66 + 40);
        if (v138 == v171)
          goto LABEL_456;
        v172 = v138 - v171 - 8;
        if (v172 < 0x38)
        {
          v174 = *(_QWORD *)(v66 + 40);
        }
        else if ((unint64_t)(v138 - (_QWORD)v76) < 0x20)
        {
          v174 = *(_QWORD *)(v66 + 40);
        }
        else
        {
          v173 = (v172 >> 3) + 1;
          v174 = v138 - 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
          v175 = v76 - 2;
          v176 = (__int128 *)(v138 - 16);
          v177 = v173 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v178 = *v176;
            *(v175 - 1) = *(v176 - 1);
            *v175 = v178;
            v175 -= 2;
            v176 -= 2;
            v177 -= 4;
          }
          while (v177);
          v76 -= v173 & 0x3FFFFFFFFFFFFFFCLL;
          if (v173 == (v173 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_455;
        }
        do
        {
          v404 = *(_QWORD *)(v174 - 8);
          v174 -= 8;
          *--v76 = v404;
        }
        while (v174 != v171);
        goto LABEL_455;
      }
    }
    else
    {
      v27 = *(_QWORD **)(v67 - 8);
      *(_QWORD *)(v66 + 8) = v67 - 8;
      v68 = *(_QWORD **)(v66 + 40);
      v69 = *(_QWORD *)(v66 + 48);
      if ((unint64_t)v68 >= v69)
      {
        v70 = *(_QWORD *)(v66 + 32);
        v71 = ((uint64_t)v68 - v70) >> 3;
        v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 61)
          goto LABEL_513;
        v73 = v69 - v70;
        if (v73 >> 2 > v72)
          v72 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        if (v72)
        {
          v74 = 8 * v72;
          v75 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v66 + 56) + 16))(*(_QWORD *)(v66 + 56), 8 * v72, 8);
          v76 = (_QWORD *)(v75 + 8 * v71);
          v72 = v75 + v74;
          if (v75)
            *v76 = v27;
        }
        else
        {
          v76 = (_QWORD *)(8 * v71);
        }
        v88 = v76 + 1;
        v139 = *(_QWORD *)(v66 + 32);
        v138 = *(_QWORD *)(v66 + 40);
        if (v138 == v139)
          goto LABEL_456;
        v140 = v138 - v139 - 8;
        if (v140 < 0x38)
        {
          v142 = *(_QWORD *)(v66 + 40);
        }
        else if ((unint64_t)(v138 - (_QWORD)v76) < 0x20)
        {
          v142 = *(_QWORD *)(v66 + 40);
        }
        else
        {
          v141 = (v140 >> 3) + 1;
          v142 = v138 - 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
          v143 = v76 - 2;
          v144 = (__int128 *)(v138 - 16);
          v145 = v141 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v146 = *v144;
            *(v143 - 1) = *(v144 - 1);
            *v143 = v146;
            v143 -= 2;
            v144 -= 2;
            v145 -= 4;
          }
          while (v145);
          v76 -= v141 & 0x3FFFFFFFFFFFFFFCLL;
          if (v141 == (v141 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_455;
        }
        do
        {
          v182 = *(_QWORD *)(v142 - 8);
          v142 -= 8;
          *--v76 = v182;
        }
        while (v142 != v139);
LABEL_455:
        v138 = *(_QWORD *)(v66 + 32);
LABEL_456:
        *(_QWORD *)(v66 + 32) = v76;
        *(_QWORD *)(v66 + 40) = v88;
        v405 = *(_QWORD *)(v66 + 48);
        *(_QWORD *)(v66 + 48) = v72;
        if (v138)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v66 + 56) + 40))(*(_QWORD *)(v66 + 56), v138, v405 - v138);
LABEL_458:
        *(_QWORD *)(v66 + 40) = v88;
        *(_QWORD *)&v475 = v27;
        v406 = *(_QWORD *)(v66 + 120);
        if (!v406)
          goto LABEL_512;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v406 + 48))(v406, &v475);
        v407 = v27[8];
        *(_QWORD *)(v407 + 72) = 0;
        v408 = *(_QWORD *)(a1 + 1408);
        *(_QWORD *)(v407 + 64) = v408;
        v409 = v27[20];
        v410 = *(_QWORD *)(a1 + 1416);
        v5 = v64;
        if (v410)
        {
          v411 = (unint64_t *)(v410 + 8);
          do
            v412 = __ldxr(v411);
          while (__stxr(v412 + 1, v411));
        }
        v413 = *(std::__shared_weak_count **)(v409 + 72);
        *(_QWORD *)(v409 + 64) = v408;
        *(_QWORD *)(v409 + 72) = v410;
        if (v413)
        {
          v414 = (unint64_t *)&v413->__shared_owners_;
          do
            v415 = __ldaxr(v414);
          while (__stlxr(v415 - 1, v414));
          if (!v415)
          {
            ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
            std::__shared_weak_count::__release_weak(v413);
          }
        }
        v416 = (_QWORD *)v27[8];
        v416[1] = 0;
        v417 = *(_QWORD *)(a1 + 1376);
        *v416 = v417;
        v418 = (_QWORD *)v27[20];
        v419 = *(_QWORD *)(a1 + 1384);
        if (v419)
        {
          v420 = (unint64_t *)(v419 + 8);
          do
            v421 = __ldxr(v420);
          while (__stxr(v421 + 1, v420));
        }
        v422 = (std::__shared_weak_count *)v418[1];
        *v418 = v417;
        v418[1] = v419;
        if (v422)
        {
          v423 = (unint64_t *)&v422->__shared_owners_;
          do
            v424 = __ldaxr(v423);
          while (__stlxr(v424 - 1, v423));
          if (!v424)
          {
            ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
            std::__shared_weak_count::__release_weak(v422);
          }
        }
        v425 = v27[8];
        *(_QWORD *)(v425 + 24) = 0;
        v426 = *(_QWORD *)(a1 + v11);
        *(_QWORD *)(v425 + 16) = v426;
        v427 = v27[20];
        v428 = *(_QWORD *)(v12 + 8);
        if (v428)
        {
          v429 = (unint64_t *)(v428 + 8);
          do
            v430 = __ldxr(v429);
          while (__stxr(v430 + 1, v429));
        }
        v431 = *(std::__shared_weak_count **)(v427 + 24);
        *(_QWORD *)(v427 + 16) = v426;
        *(_QWORD *)(v427 + 24) = v428;
        if (v431)
        {
          v432 = (unint64_t *)&v431->__shared_owners_;
          do
            v433 = __ldaxr(v432);
          while (__stlxr(v433 - 1, v432));
          if (!v433)
          {
            ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
            std::__shared_weak_count::__release_weak(v431);
          }
        }
        v434 = v27[8];
        *(_QWORD *)(v434 + 56) = 0;
        v435 = *(_QWORD *)(a1 + 1496);
        *(_QWORD *)(v434 + 48) = v435;
        v436 = v27[20];
        v437 = *(_QWORD *)(a1 + 1504);
        if (v437)
        {
          v438 = (unint64_t *)(v437 + 8);
          do
            v439 = __ldxr(v438);
          while (__stxr(v439 + 1, v438));
        }
        v440 = *(std::__shared_weak_count **)(v436 + 56);
        *(_QWORD *)(v436 + 48) = v435;
        *(_QWORD *)(v436 + 56) = v437;
        if (v440)
        {
          v441 = (unint64_t *)&v440->__shared_owners_;
          do
            v442 = __ldaxr(v441);
          while (__stlxr(v442 - 1, v441));
          if (!v442)
          {
            ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
            std::__shared_weak_count::__release_weak(v440);
          }
        }
        *(_QWORD *)(v27[12] + 8) = v470;
        *(_QWORD *)v27[12] = v65;
        v443 = v27[8];
        *(_QWORD *)(v443 + 40) = 0;
        v444 = *(_QWORD *)(a1 + 1640);
        *(_QWORD *)(v443 + 32) = v444;
        v445 = v27[20];
        v446 = *(_QWORD *)(a1 + 1648);
        if (v446)
        {
          v447 = (unint64_t *)(v446 + 8);
          do
            v448 = __ldxr(v447);
          while (__stxr(v448 + 1, v447));
        }
        v254 = *(std::__shared_weak_count **)(v445 + 40);
        *(_QWORD *)(v445 + 32) = v444;
        *(_QWORD *)(v445 + 40) = v446;
        if (!v254)
          goto LABEL_499;
        v449 = (unint64_t *)&v254->__shared_owners_;
        do
          v256 = __ldaxr(v449);
        while (__stlxr(v256 - 1, v449));
        goto LABEL_497;
      }
    }
    if (v68)
      *v68 = v27;
    v88 = v68 + 1;
    goto LABEL_458;
  }
  v24 = *(unsigned __int8 *)(v4 + 24);
  v25 = *(_QWORD *)(a1 + 424);
  v26 = *(_QWORD *)(v25 + 8);
  v461 = v22;
  if (v26 != *(_QWORD *)v25)
  {
    v27 = *(_QWORD **)(v26 - 8);
    *(_QWORD *)(v25 + 8) = v26 - 8;
    v28 = *(_QWORD **)(v25 + 40);
    v29 = *(_QWORD *)(v25 + 48);
    if ((unint64_t)v28 >= v29)
    {
      v30 = *(_QWORD *)(v25 + 32);
      v31 = ((uint64_t)v28 - v30) >> 3;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        goto LABEL_513;
      v33 = v29 - v30;
      if (v33 >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      if (v32)
      {
        v34 = v8;
        v35 = 8 * v32;
        v36 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v25 + 56) + 16))(*(_QWORD *)(v25 + 56), 8 * v32, 8);
        v37 = (_QWORD *)(v36 + 8 * v31);
        v32 = v36 + v35;
        if (v36)
          *v37 = v27;
        v8 = v34;
      }
      else
      {
        v37 = (_QWORD *)(8 * v31);
      }
      v79 = v37 + 1;
      v112 = *(_QWORD *)(v25 + 32);
      v111 = *(_QWORD *)(v25 + 40);
      if (v111 == v112)
        goto LABEL_213;
      v113 = v111 - v112 - 8;
      if (v113 < 0x38)
      {
        v115 = *(_QWORD *)(v25 + 40);
      }
      else if ((unint64_t)(v111 - (_QWORD)v37) < 0x20)
      {
        v115 = *(_QWORD *)(v25 + 40);
      }
      else
      {
        v114 = (v113 >> 3) + 1;
        v115 = v111 - 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
        v116 = v37 - 2;
        v117 = (__int128 *)(v111 - 16);
        v118 = v114 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v119 = *v117;
          *(v116 - 1) = *(v117 - 1);
          *v116 = v119;
          v116 -= 2;
          v117 -= 2;
          v118 -= 4;
        }
        while (v118);
        v37 -= v114 & 0x3FFFFFFFFFFFFFFCLL;
        if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_212;
      }
      do
      {
        v179 = *(_QWORD *)(v115 - 8);
        v115 -= 8;
        *--v37 = v179;
      }
      while (v115 != v112);
LABEL_212:
      v111 = *(_QWORD *)(v25 + 32);
LABEL_213:
      *(_QWORD *)(v25 + 32) = v37;
      *(_QWORD *)(v25 + 40) = v79;
      v184 = *(_QWORD *)(v25 + 48);
      *(_QWORD *)(v25 + 48) = v32;
      if (v111)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v25 + 56) + 40))(*(_QWORD *)(v25 + 56), v111, v184 - v111);
      goto LABEL_215;
    }
    goto LABEL_77;
  }
  v77 = *(_QWORD *)(v25 + 88);
  if (!v77)
  {
LABEL_512:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_513:
    abort();
  }
  v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 48))(v77);
  v28 = *(_QWORD **)(v25 + 40);
  v78 = *(_QWORD *)(v25 + 48);
  if ((unint64_t)v28 >= v78)
  {
    v89 = *(_QWORD *)(v25 + 32);
    v90 = ((uint64_t)v28 - v89) >> 3;
    v32 = v90 + 1;
    if ((unint64_t)(v90 + 1) >> 61)
      goto LABEL_513;
    v91 = v78 - v89;
    if (v91 >> 2 > v32)
      v32 = v91 >> 2;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    if (v32)
    {
      v92 = v8;
      v93 = 8 * v32;
      v94 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v25 + 56) + 16))(*(_QWORD *)(v25 + 56), 8 * v32, 8);
      v37 = (_QWORD *)(v94 + 8 * v90);
      v32 = v94 + v93;
      if (v94)
        *v37 = v27;
      v8 = v92;
    }
    else
    {
      v37 = (_QWORD *)(8 * v90);
    }
    v79 = v37 + 1;
    v147 = *(_QWORD *)(v25 + 32);
    v111 = *(_QWORD *)(v25 + 40);
    if (v111 == v147)
      goto LABEL_213;
    v148 = v111 - v147 - 8;
    if (v148 < 0x38)
    {
      v150 = *(_QWORD *)(v25 + 40);
    }
    else if ((unint64_t)(v111 - (_QWORD)v37) < 0x20)
    {
      v150 = *(_QWORD *)(v25 + 40);
    }
    else
    {
      v149 = (v148 >> 3) + 1;
      v150 = v111 - 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
      v151 = v37 - 2;
      v152 = (__int128 *)(v111 - 16);
      v153 = v149 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v154 = *v152;
        *(v151 - 1) = *(v152 - 1);
        *v151 = v154;
        v151 -= 2;
        v152 -= 2;
        v153 -= 4;
      }
      while (v153);
      v37 -= v149 & 0x3FFFFFFFFFFFFFFCLL;
      if (v149 == (v149 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_212;
    }
    do
    {
      v183 = *(_QWORD *)(v150 - 8);
      v150 -= 8;
      *--v37 = v183;
    }
    while (v150 != v147);
    goto LABEL_212;
  }
LABEL_77:
  if (v28)
    *v28 = v27;
  v79 = v28 + 1;
LABEL_215:
  *(_QWORD *)(v25 + 40) = v79;
  *(_QWORD *)&v475 = v27;
  v185 = *(_QWORD *)(v25 + 120);
  if (!v185)
    goto LABEL_512;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v185 + 48))(v185, &v475);
  LOWORD(v186) = v8 ^ 1;
  WORD1(v186) = v24 ^ 1;
  WORD2(v186) = v8;
  HIWORD(v186) = 1;
  v187 = vceqzq_s8((int8x16_t)v186);
  v188 = vmovl_s8(*(int8x8_t *)v187.i8);
  v189 = vmovl_high_s16(v188);
  v190.i64[0] = v189.u32[2];
  v190.i64[1] = v189.u32[3];
  v191 = v190;
  v192 = vmovl_high_s8(v187);
  v193 = vmovl_high_s16(v192);
  v190.i64[0] = v193.u32[2];
  v190.i64[1] = v193.u32[3];
  v194 = v190;
  v195 = vmovl_s16(*(int16x4_t *)v188.i8);
  v190.i64[0] = v195.u32[2];
  v190.i64[1] = v195.u32[3];
  v196 = v190;
  v197 = vmovl_s16(*(int16x4_t *)v192.i8);
  v190.i64[0] = v197.u32[2];
  v190.i64[1] = v197.u32[3];
  v198 = v190;
  v190.i64[0] = v189.u32[0];
  v190.i64[1] = v189.u32[1];
  v199 = v190;
  v190.i64[0] = v193.u32[0];
  v190.i64[1] = v193.u32[1];
  v200 = v190;
  v190.i64[0] = v195.u32[0];
  v190.i64[1] = v195.u32[1];
  v201 = v190;
  v190.i64[0] = v197.u32[0];
  v190.i64[1] = v197.u32[1];
  v202 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v201), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v190)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v199), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v200))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v196), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v198)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v191), vbicq_s8((int8x16_t)xmmword_19FFB3080, v194)))));
  v203 = v202;
  v204 = (uint64_t **)(a1 + 696);
  v205 = *(_QWORD **)(a1 + 696);
  v467 = v8;
  if (!v205)
    goto LABEL_227;
  v206 = (uint64_t **)(a1 + 696);
  do
  {
    v207 = v205[4];
    v208 = v207 >= v202;
    if (v207 >= v202)
      v209 = v205;
    else
      v209 = v205 + 1;
    if (v208)
      v206 = (uint64_t **)v205;
    v205 = (_QWORD *)*v209;
  }
  while (*v209);
  if (v206 == v204 || v202 < (unint64_t)v206[4])
  {
LABEL_227:
    v464 = v27;
    v462 = v4;
    v210 = v8 ^ 1;
    v211 = (std::__shared_weak_count *)operator new(0x198uLL);
    v212 = v8;
    v211->__shared_owners_ = 0;
    v213 = (unint64_t *)&v211->__shared_owners_;
    v211->__shared_weak_owners_ = 0;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4348;
    v214 = *(_OWORD *)(a1 + 624);
    v475 = *(_OWORD *)(a1 + 608);
    v476 = v214;
    ggl::Icon::IconPipelineState::IconPipelineState((uint64_t)&v211[1], (_QWORD *)(a1 + 592), a1 + 640, &v475, v210 != 0, v24 != 1, 0, v212 != 0, 0, 1);
    v471 = v211 + 1;
    v473 = v211;
    *(_QWORD *)&v475 = v203;
    *((_QWORD *)&v475 + 1) = v211 + 1;
    *(_QWORD *)&v476 = v211;
    do
      v215 = __ldxr(v213);
    while (__stxr(v215 + 1, v213));
    v216 = *v204;
    v217 = (uint64_t **)(a1 + 696);
    v27 = v464;
    if (*v204)
    {
      while (1)
      {
        while (1)
        {
          v217 = (uint64_t **)v216;
          v218 = v216[4];
          if (v203 >= v218)
            break;
          v216 = *v217;
          v204 = v217;
          if (!*v217)
            goto LABEL_236;
        }
        if (v218 >= v203)
          break;
        v216 = v217[1];
        if (!v216)
        {
          v204 = v217 + 1;
          goto LABEL_236;
        }
      }
    }
    else
    {
LABEL_236:
      v219 = (uint64_t *)operator new(0x38uLL);
      v219[4] = v203;
      v219[5] = (uint64_t)&v211[1];
      v219[6] = (uint64_t)v211;
      *((_QWORD *)&v475 + 1) = 0;
      *(_QWORD *)&v476 = 0;
      *v219 = 0;
      v219[1] = 0;
      v219[2] = (uint64_t)v217;
      *v204 = v219;
      v220 = **(_QWORD **)(a1 + 688);
      if (v220)
      {
        *(_QWORD *)(a1 + 688) = v220;
        v219 = *v204;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 696), v219);
      ++*(_QWORD *)(a1 + 704);
      v211 = (std::__shared_weak_count *)v476;
      if (!(_QWORD)v476)
      {
LABEL_243:
        v223 = v471;
        v224 = v473;
        v225 = v473 == 0;
        v4 = v462;
        if (!v473)
          goto LABEL_246;
        goto LABEL_244;
      }
    }
    v221 = (unint64_t *)&v211->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
    goto LABEL_243;
  }
  v223 = (std::__shared_weak_count *)v206[5];
  v224 = (std::__shared_weak_count *)v206[6];
  v473 = v224;
  if (!v224)
  {
    v225 = 1;
    if (!v223)
      goto LABEL_248;
    goto LABEL_247;
  }
  v265 = (unint64_t *)&v224->__shared_owners_;
  do
    v266 = __ldxr(v265);
  while (__stxr(v266 + 1, v265));
  v225 = v224 == 0;
LABEL_244:
  v226 = (unint64_t *)&v224->__shared_owners_;
  do
    v227 = __ldxr(v226);
  while (__stxr(v227 + 1, v226));
LABEL_246:
  if (!v223)
  {
LABEL_248:
    v228 = (std::__shared_weak_count *)v27[3];
    v27[2] = 0;
    v27[3] = 0;
    if (!v228)
      goto LABEL_263;
    v229 = (unint64_t *)&v228->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    goto LABEL_261;
  }
LABEL_247:
  if (*(_QWORD *)v223[1].__shared_weak_owners_ != v27[1])
    goto LABEL_248;
  v231 = (std::__shared_weak_count *)v27[2];
  if (v231 && v231 != v223)
    ggl::PipelineSetup::resetData((uint64_t)v27);
  if (!v225)
  {
    v232 = (unint64_t *)&v224->__shared_owners_;
    do
      v233 = __ldxr(v232);
    while (__stxr(v233 + 1, v232));
  }
  v228 = (std::__shared_weak_count *)v27[3];
  v27[2] = v223;
  v27[3] = v224;
  if (v228)
  {
    v234 = (unint64_t *)&v228->__shared_owners_;
    do
      v230 = __ldaxr(v234);
    while (__stlxr(v230 - 1, v234));
LABEL_261:
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
LABEL_263:
  if (!v225)
  {
    v235 = (unint64_t *)&v224->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  if (v473)
  {
    v237 = (unint64_t *)&v473->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
      std::__shared_weak_count::__release_weak(v473);
    }
  }
  *(_QWORD *)v27[12] = v461;
  v239 = v27[8];
  *(_QWORD *)(v239 + 40) = 0;
  v240 = *(_QWORD *)(a1 + 1408);
  *(_QWORD *)(v239 + 32) = v240;
  v241 = v27[20];
  v242 = *(_QWORD *)(a1 + 1416);
  if (v242)
  {
    v243 = (unint64_t *)(v242 + 8);
    do
      v244 = __ldxr(v243);
    while (__stxr(v244 + 1, v243));
  }
  v245 = *(std::__shared_weak_count **)(v241 + 40);
  *(_QWORD *)(v241 + 32) = v240;
  *(_QWORD *)(v241 + 40) = v242;
  if (v245)
  {
    v246 = (unint64_t *)&v245->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = (_QWORD *)v27[8];
  if (v467)
  {
    v248[1] = 0;
    v249 = *(_QWORD *)(a1 + 1392);
    *v248 = v249;
    v250 = (_QWORD *)v27[20];
    v251 = *(_QWORD *)(a1 + 1400);
    if (v251)
    {
      v252 = (unint64_t *)(v251 + 8);
      do
        v253 = __ldxr(v252);
      while (__stxr(v253 + 1, v252));
    }
    v254 = (std::__shared_weak_count *)v250[1];
    *v250 = v249;
    v250[1] = v251;
    if (v254)
    {
      v255 = (unint64_t *)&v254->__shared_owners_;
      do
        v256 = __ldaxr(v255);
      while (__stlxr(v256 - 1, v255));
      goto LABEL_497;
    }
  }
  else
  {
    v248[3] = 0;
    v257 = *(_QWORD *)(a1 + 1496);
    v248[2] = v257;
    v258 = v27[20];
    v259 = *(_QWORD *)(a1 + 1504);
    if (v259)
    {
      v260 = (unint64_t *)(v259 + 8);
      do
        v261 = __ldxr(v260);
      while (__stxr(v261 + 1, v260));
    }
    v262 = *(std::__shared_weak_count **)(v258 + 24);
    *(_QWORD *)(v258 + 16) = v257;
    *(_QWORD *)(v258 + 24) = v259;
    if (v262)
    {
      v263 = (unint64_t *)&v262->__shared_owners_;
      do
        v264 = __ldaxr(v263);
      while (__stlxr(v264 - 1, v263));
      if (!v264)
      {
        ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
        std::__shared_weak_count::__release_weak(v262);
      }
    }
    *(_QWORD *)(v27[12] + 8) = v470;
  }
LABEL_499:
  v450 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(a1 + 336));
  v451 = *(_QWORD *)v5;
  v452 = *(unsigned __int8 *)(*(_QWORD *)v5 + 8);
  if (v452 == 2)
  {
    v454 = *(unsigned __int8 *)(v4 + 8);
    v455 = a4 + 2;
    v456 = a4 + 3;
    goto LABEL_505;
  }
  if (v452 == 1)
  {
    v454 = *(unsigned __int8 *)(v4 + 8);
    v456 = a4;
    v455 = a4 + 1;
LABEL_505:
    if (v454)
      v453 = v455;
    else
      v453 = v456;
    goto LABEL_508;
  }
  if (*(_BYTE *)(*(_QWORD *)v5 + 8))
    goto LABEL_509;
  v453 = a4;
LABEL_508:
  *((_QWORD *)v450 + 3) = *v453;
LABEL_509:
  *((_QWORD *)v450 + 4) = v27;
  *((_QWORD *)v450 + 8) = a1 + 1232;
  v457 = *(unsigned __int16 *)(v451 + 38);
  if (*(_BYTE *)(v4 + 25))
    v457 += *(unsigned __int16 *)(v451 + 32);
  v458 = 6 * v457;
  v459 = 6 * (v457 + v5[2]);
  *((_QWORD *)v450 + 9) = v458;
  *((_QWORD *)v450 + 10) = v459;
  *((_QWORD *)v450 + 11) = 0;
  *((_QWORD *)v450 + 12) = 1;
  result = ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(v4 + 16), v450);
  ++*(_DWORD *)(a1 + 1816);
  return result;
}

void sub_19F28FB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F28FB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::AnchorManager::~AnchorManager(md::AnchorManager *this)
{
  md::AnchorManager::~AnchorManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t **i;
  _QWORD **v3;
  char *j;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  *(_QWORD *)this = &off_1E428D6E8;
  if (*((_QWORD *)this + 2))
  {
    *((_QWORD *)this + 2) = 0;
    for (i = (uint64_t **)*((_QWORD *)this + 6); i; i = (uint64_t **)*i)
      (*(void (**)(uint64_t *))(*i[2] + 104))(i[2]);
  }
  v3 = (_QWORD **)((char *)this + 48);
  for (j = (char *)this + 48; ; (*(void (**)(_QWORD))(**((_QWORD **)j + 2) + 96))(*((_QWORD *)j + 2)))
  {
    j = *(char **)j;
    if (!j)
      break;
  }
  v5 = *v3;
  if (*v3)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    operator delete(v7);
}

void sub_19F28FC7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 32);
  _Unwind_Resume(a1);
}

void md::RasterRenderLayer::~RasterRenderLayer(md::RasterRenderLayer *this)
{
  md::RasterRenderResources *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E4292F70;
  v2 = (md::RasterRenderResources *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v2)
  {
    md::RasterRenderResources::~RasterRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::~CartographicTiledRenderLayer((uint64_t)this);
  JUMPOUT(0x1A1AF4E00);
}

{
  md::RasterRenderResources *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E4292F70;
  v2 = (md::RasterRenderResources *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v2)
  {
    md::RasterRenderResources::~RasterRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::~CartographicTiledRenderLayer((uint64_t)this);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::RasterTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A4ED8;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::RasterTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F28FE60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

_QWORD *gms::MaterialSheet<ggl::Texture2D>::_init(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  geo::read_write_lock *v17;
  const char *v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *result;
  uint64_t v26;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  v5 = gss::Allocator::instance((gss::Allocator *)v4);
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 64) = v5;
  *a1 = v4;
  v6 = (std::__shared_weak_count *)operator new();
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7F38;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a1[1] = (uint64_t)v6;
  v8 = *(std::__shared_weak_count **)(v4 + 8);
  if (v8)
  {
    if (v8->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *(_QWORD *)v4 = v4;
    *(_QWORD *)(v4 + 8) = v6;
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    *(_QWORD *)v4 = v4;
    *(_QWORD *)(v4 + 8) = v6;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  v16 = operator new();
  *(_QWORD *)(v16 + 192) = 0;
  *(_OWORD *)(v16 + 160) = 0u;
  *(_OWORD *)(v16 + 176) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 144) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  v17 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)v16, 0);
  if ((_DWORD)v17)
    geo::read_write_lock::logFailure(v17, (uint64_t)"initialization", v18);
  *(_OWORD *)(v16 + 232) = 0u;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  v19 = (_QWORD *)operator new();
  *v19 = &off_1E42E7F00;
  v19[1] = 0;
  v19[2] = 0;
  v19[3] = v16;
  v20 = *a1;
  v21 = *(std::__shared_weak_count **)(*a1 + 32);
  *(_QWORD *)(v20 + 24) = v16;
  *(_QWORD *)(v20 + 32) = v19;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *a1;
  if (*a2 == 1)
  {
    result = 0;
  }
  else
  {
    result = (_QWORD *)operator new();
    *result = off_1E42BF350;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
  }
  v26 = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(v24 + 16) = result;
  if (v26)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
  return result;
}

void sub_19F29011C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19F290164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<gms::MaterialSheet<ggl::Texture2D>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

double md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_19FFB38D0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 72) = _Q1;
  *(_OWORD *)(a1 + 88) = xmmword_19FFB38E0;
  *(_OWORD *)(a1 + 104) = xmmword_19FFB38F0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_WORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 132) = xmmword_19FFB38D0;
  *(_OWORD *)(a1 + 148) = _Q1;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB38E0;
  *(_OWORD *)(a1 + 180) = xmmword_19FFB38F0;
  *(_BYTE *)(a1 + 196) = 1;
  *(_DWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 204) = 0;
  *(_WORD *)(a1 + 208) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 216) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 256) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 296) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = _Q1;
  *(_QWORD *)(a1 + 384) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 424) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 464) = 0x3FF0000000000000;
  return result;
}

void md::RegistryManager::addCollectorSubscription(uint64_t *a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _QWORD *i;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  void *v49;

  if (!std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned int>,std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::hash<std::pair<unsigned long,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned int>,std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::hash<std::pair<unsigned long,unsigned int>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>>>::find<std::pair<unsigned long,unsigned int>>(a1, a2, a3))
  {
    v9 = a3;
    v10 = ((a2 - 0x61C8864680B583EBLL) << 6)
        + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
        + a3
        - 0x61C8864680B583EBLL;
    v11 = v10 ^ (a2 - 0x61C8864680B583EBLL);
    v12 = a1[1];
    if (v12)
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        v4 = v10 ^ (a2 - 0x61C8864680B583EBLL);
        if (v11 >= v12)
          v4 = v11 % v12;
      }
      else
      {
        v4 = v11 & (v12 - 1);
      }
      v14 = *(uint64_t ***)(*a1 + 8 * v4);
      if (v14)
      {
        v15 = *v14;
        if (v15)
        {
          if (v13.u32[0] < 2uLL)
          {
            while (1)
            {
              v19 = v15[1];
              if (v19 == v11)
              {
                if (v15[2] == a2 && *((_DWORD *)v15 + 6) == a3)
                  return;
              }
              else if ((v19 & (v12 - 1)) != v4)
              {
                goto LABEL_29;
              }
              v15 = (uint64_t *)*v15;
              if (!v15)
                goto LABEL_29;
            }
          }
          do
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == a2 && *((_DWORD *)v15 + 6) == a3)
                return;
            }
            else
            {
              if (v17 >= v12)
                v17 %= v12;
              if (v17 != v4)
                break;
            }
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
      }
    }
LABEL_29:
    v20 = operator new(0x40uLL);
    *v20 = 0;
    v20[1] = v11;
    v20[2] = a2;
    v20[3] = v9;
    v21 = v20 + 4;
    v22 = a4[3];
    if (v22)
    {
      if ((_QWORD *)v22 == a4)
      {
        v20[7] = v21;
        (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v21);
LABEL_34:
        v23 = a1 + 2;
        v24 = (float)(unint64_t)(a1[3] + 1);
        v25 = *((float *)a1 + 8);
        if (v12 && (float)(v25 * (float)v12) >= v24)
        {
LABEL_84:
          v46 = *a1;
          v47 = *(_QWORD **)(*a1 + 8 * v4);
          if (v47)
          {
            *v20 = *v47;
          }
          else
          {
            *v20 = *v23;
            *v23 = v20;
            *(_QWORD *)(v46 + 8 * v4) = v23;
            if (!*v20)
            {
LABEL_93:
              ++a1[3];
              return;
            }
            v48 = *(_QWORD *)(*v20 + 8);
            if ((v12 & (v12 - 1)) != 0)
            {
              if (v48 >= v12)
                v48 %= v12;
            }
            else
            {
              v48 &= v12 - 1;
            }
            v47 = (_QWORD *)(*a1 + 8 * v48);
          }
          *v47 = v20;
          goto LABEL_93;
        }
        v26 = 1;
        if (v12 >= 3)
          v26 = (v12 & (v12 - 1)) != 0;
        v27 = v26 | (2 * v12);
        v28 = vcvtps_u32_f32(v24 / v25);
        if (v27 <= v28)
          prime = v28;
        else
          prime = v27;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v12 = a1[1];
        if (prime <= v12)
        {
          if (prime >= v12)
            goto LABEL_71;
          v40 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
          if (v12 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
          {
            v40 = std::__next_prime(v40);
          }
          else
          {
            v42 = 1 << -(char)__clz(v40 - 1);
            if (v40 >= 2)
              v40 = v42;
          }
          if (prime <= v40)
            prime = v40;
          if (prime >= v12)
          {
            v12 = a1[1];
LABEL_71:
            if ((v12 & (v12 - 1)) != 0)
            {
              if (v11 >= v12)
                v4 = v11 % v12;
              else
                v4 = v11;
            }
            else
            {
              v4 = (v12 - 1) & v11;
            }
            goto LABEL_84;
          }
          if (!prime)
          {
            v49 = (void *)*a1;
            *a1 = 0;
            if (v49)
              operator delete(v49);
            v12 = 0;
            a1[1] = 0;
            goto LABEL_71;
          }
        }
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v30 = operator new(8 * prime);
        v31 = (void *)*a1;
        *a1 = (uint64_t)v30;
        if (v31)
          operator delete(v31);
        v32 = 0;
        a1[1] = prime;
        do
          *(_QWORD *)(*a1 + 8 * v32++) = 0;
        while (prime != v32);
        v33 = (_QWORD *)*v23;
        if (!*v23)
        {
LABEL_70:
          v12 = prime;
          goto LABEL_71;
        }
        v34 = v33[1];
        v35 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v36 = v34 & v35;
          *(_QWORD *)(*a1 + 8 * v36) = v23;
          for (i = (_QWORD *)*v33; *v33; i = (_QWORD *)*v33)
          {
            v38 = i[1] & v35;
            if (v38 == v36)
            {
              v33 = i;
            }
            else if (*(_QWORD *)(*a1 + 8 * v38))
            {
              *v33 = *i;
              v39 = 8 * v38;
              *i = **(_QWORD **)(*a1 + v39);
              **(_QWORD **)(*a1 + v39) = i;
            }
            else
            {
              *(_QWORD *)(*a1 + 8 * v38) = v33;
              v33 = i;
              v36 = v38;
            }
          }
          goto LABEL_70;
        }
        if (v34 >= prime)
          v34 %= prime;
        *(_QWORD *)(*a1 + 8 * v34) = v23;
        v43 = (_QWORD *)*v33;
        if (!*v33)
          goto LABEL_70;
        while (1)
        {
          v45 = v43[1];
          if (v45 >= prime)
            v45 %= prime;
          if (v45 != v34)
          {
            if (!*(_QWORD *)(*a1 + 8 * v45))
            {
              *(_QWORD *)(*a1 + 8 * v45) = v33;
              goto LABEL_75;
            }
            *v33 = *v43;
            v44 = 8 * v45;
            *v43 = **(_QWORD **)(*a1 + v44);
            **(_QWORD **)(*a1 + v44) = v43;
            v43 = v33;
          }
          v45 = v34;
LABEL_75:
          v33 = v43;
          v43 = (_QWORD *)*v43;
          v34 = v45;
          if (!v43)
            goto LABEL_70;
        }
      }
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    }
    v20[7] = v22;
    goto LABEL_34;
  }
}

void sub_19F2906F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)v1[7];
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = (_QWORD *)v1[7];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::__unordered_map_hasher<std::pair<unsigned long,unsigned int>,std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::hash<std::pair<unsigned long,unsigned int>>,std::equal_to<std::pair<unsigned long,unsigned int>>,true>,std::__unordered_map_equal<std::pair<unsigned long,unsigned int>,std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>,std::equal_to<std::pair<unsigned long,unsigned int>>,std::hash<std::pair<unsigned long,unsigned int>>,true>,std::allocator<std::__hash_value_type<std::pair<unsigned long,unsigned int>,std::function<std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>>>>::find<std::pair<unsigned long,unsigned int>>(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *result;
  uint64_t v9;
  unint64_t v11;
  uint64_t v13;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = (((a2 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
      + a3
      - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = (((a2 - 0x61C8864680B583EBLL) << 6)
        + ((unint64_t)(a2 - 0x61C8864680B583EBLL) >> 2)
        + a3
        - 0x61C8864680B583EBLL) ^ (a2 - 0x61C8864680B583EBLL);
    if (v4 >= *(_QWORD *)&v3)
      v6 = v4 % *(_QWORD *)&v3;
  }
  else
  {
    v6 = v4 & (*(_QWORD *)&v3 - 1);
  }
  v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = *v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      v9 = *(_QWORD *)&v3 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == v4)
        {
          if (result[2] == a2 && *((_DWORD *)result + 6) == a3)
            return result;
        }
        else if ((v13 & v9) != v6)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v11 == v4)
      {
        if (result[2] == a2 && *((_DWORD *)result + 6) == a3)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v3)
          v11 %= *(_QWORD *)&v3;
        if (v11 != v6)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_4,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_4>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42D01F0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_3,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_3>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42D01A8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_2,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_2>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42D0160;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_1>,std::unique_ptr<gdc::EntityCollector> ()(gdc::Registry *)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E42D0118;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t md::InstanceData::identity(md::InstanceData *this)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E42DADE0;
  result = md::InstanceData::InstanceData((uint64_t)(v2 + 3), 1u, 0);
  *(_QWORD *)this = result;
  *((_QWORD *)this + 1) = v2;
  v4 = (_QWORD *)v2[3];
  v5 = v4[6] - v4[5];
  v6 = v4[9];
  v7 = v5 % v4[1];
  *(_DWORD *)v6 = 1065353216;
  *(_QWORD *)(v6 + 4) = 0;
  *(_QWORD *)(v6 + 12) = 0;
  *(_DWORD *)(v6 + 20) = 1065353216;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 40) = 1065353216;
  *(_QWORD *)(v6 + 44) = 0;
  *(_QWORD *)(v6 + 52) = 0;
  *(_DWORD *)(v6 + 60) = 1065353216;
  v8 = v5 - v7;
  if (v8)
  {
    if (v4[8] > v8)
      v8 = v4[8];
    v4[7] = 0;
    v4[8] = v8;
  }
  *((_BYTE *)v2 + 44) = 1;
  return result;
}

void sub_19F290970(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t md::InstanceData::InstanceData(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 20) = 0;
  v6 = operator new(0xE0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E42DF450;
  v7 = ggl::BufferData::BufferData((uint64_t)(v6 + 3), qword_1EE54AD80, 3, a3, 6, a2);
  v6[3] = &off_1E42B6F08;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

void sub_19F290A44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::setCallbackQueue(_QWORD *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (a1[3])
  {
    GEOConfigRemoveBlockListener();
    v6 = (void *)a1[3];
    a1[3] = 0;

  }
  v7 = a3[3];
  if (!v7)
    goto LABEL_6;
  if ((_QWORD *)v7 != a3)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_6:
    v28 = (uint64_t *)v7;
    goto LABEL_8;
  }
  v28 = &v26;
  (*(void (**)(_QWORD *, uint64_t *))(*a3 + 24))(a3, &v26);
LABEL_8:
  v8 = a1 + 6;
  if (a1 + 6 != &v26)
  {
    v9 = v28;
    v10 = (_QWORD *)a1[9];
    if (v28 == &v26)
    {
      if (v10 == v8)
      {
        (*(void (**)(uint64_t *, _QWORD *))(v26 + 24))(&v26, v29);
        (*(void (**)(uint64_t *))(*v28 + 32))(v28);
        v28 = 0;
        (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)a1[9] + 24))(a1[9], &v26);
        (*(void (**)(_QWORD))(*(_QWORD *)a1[9] + 32))(a1[9]);
        a1[9] = 0;
        v28 = &v26;
        (*(void (**)(_QWORD *, _QWORD *))(v29[0] + 24))(v29, a1 + 6);
        (*(void (**)(_QWORD *))(v29[0] + 32))(v29);
      }
      else
      {
        (*(void (**)(uint64_t *, _QWORD *))(v26 + 24))(&v26, a1 + 6);
        (*(void (**)(uint64_t *))(*v28 + 32))(v28);
        v28 = (uint64_t *)a1[9];
      }
      a1[9] = v8;
    }
    else if (v10 == v8)
    {
      (*(void (**)(_QWORD *, uint64_t *))(a1[6] + 24))(a1 + 6, &v26);
      (*(void (**)(_QWORD))(*(_QWORD *)a1[9] + 32))(a1[9]);
      a1[9] = v28;
      v28 = &v26;
    }
    else
    {
      v28 = (uint64_t *)a1[9];
      a1[9] = v9;
    }
  }
  v11 = v28;
  if (v28 == &v26)
  {
    v12 = 4;
    v11 = &v26;
  }
  else
  {
    if (!v28)
      goto LABEL_22;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_22:
  v13 = (std::__shared_weak_count *)a1[5];
  v26 = a1[4];
  v27 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v25 = v13;
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  _GEOConfigAddBlockListenerForKey();
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = (void *)a1[3];
  a1[3] = v18;

  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v22 = v27;
  if (v27)
  {
    v23 = (unint64_t *)&v27->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

}

void sub_19F290D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void geo::small_vector_base<unsigned short>::insert(char **a1, char *a2, _WORD *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;
  __int16 v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  _OWORD *v41;
  unint64_t v42;
  __int128 v43;
  __int16 v44;

  v6 = *a1;
  v5 = a1[1];
  v7 = (a2 - *a1) >> 1;
  if (v5 == a2)
  {
    v27 = (unint64_t)a1[3];
    if (v27 >= v7 + 1)
    {
LABEL_41:
      *(_WORD *)a2 = *a3;
      a1[1] = a2 + 2;
      return;
    }
    v28 = a1[2];
    v29 = (1 << -(char)__clz(v27 + 1));
    if (v27 >= 0xFFFFFFFFFFFFFFFELL)
      v30 = 1;
    else
      v30 = v29;
    if (v30 <= v7 + 1)
      v31 = v7 + 1;
    else
      v31 = v30;
    v32 = (char *)malloc_type_malloc(2 * v31, 0x1000040BDFB0063uLL);
    v33 = *a1;
    v34 = a1[1];
    if (*a1 != v34)
    {
      v35 = v34 - v33 - 2;
      v36 = v32;
      v37 = *a1;
      if (v35 >= 0x1E)
      {
        v36 = v32;
        v37 = *a1;
        if ((unint64_t)(v32 - v33) >= 0x20)
        {
          v38 = (v35 >> 1) + 1;
          v39 = 2 * (v38 & 0xFFFFFFFFFFFFFFF0);
          v36 = &v32[v39];
          v40 = (__int128 *)(v33 + 16);
          v41 = v32 + 16;
          v42 = v38 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v43 = *v40;
            *(v41 - 1) = *(v40 - 1);
            *v41 = v43;
            v40 += 2;
            v41 += 2;
            v42 -= 16;
          }
          while (v42);
          if (v38 == (v38 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_38;
          v37 = &v33[v39];
        }
      }
      do
      {
        v44 = *(_WORD *)v37;
        v37 += 2;
        *(_WORD *)v36 = v44;
        v36 += 2;
      }
      while (v37 != v34);
    }
LABEL_38:
    if (v6 != v28)
      free(v33);
    *a1 = v32;
    a2 = &v32[2 * v7];
    a1[3] = (char *)v31;
    goto LABEL_41;
  }
  v8 = &v6[2 * v7];
  v9 = (v5 - v6) >> 1;
  if ((char *)v9 == a1[3])
  {
    v10 = a1[2];
    v11 = (1 << -(char)__clz(v9 + 1));
    if ((unint64_t)(v5 - v6) >= 0xFFFFFFFFFFFFFFFCLL)
      v12 = 1;
    else
      v12 = v11;
    if (v12 <= v9 + 1)
      v13 = v9 + 1;
    else
      v13 = v12;
    v14 = (char *)malloc_type_malloc(2 * v13, 0x1000040BDFB0063uLL);
    v15 = *a1;
    v16 = a1[1];
    if (*a1 == v16)
      goto LABEL_17;
    v17 = v16 - v15 - 2;
    v18 = v14;
    v19 = *a1;
    if (v17 >= 0x1E)
    {
      v18 = v14;
      v19 = *a1;
      if ((unint64_t)(v14 - v15) >= 0x20)
      {
        v20 = (v17 >> 1) + 1;
        v21 = 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
        v18 = &v14[v21];
        v22 = (__int128 *)(v15 + 16);
        v23 = v14 + 16;
        v24 = v20 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 16;
        }
        while (v24);
        if (v20 == (v20 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_17;
        v19 = &v15[v21];
      }
    }
    do
    {
      v26 = *(_WORD *)v19;
      v19 += 2;
      *(_WORD *)v18 = v26;
      v18 += 2;
    }
    while (v19 != v16);
LABEL_17:
    if (v6 != v10)
      free(v15);
    *a1 = v14;
    v5 = &v14[2 * v9];
    a1[3] = (char *)v13;
  }
  a1[1] = v5 + 2;
  if (v5 != v8)
    memmove(v8 + 2, v8, v5 - v8);
  *(_WORD *)v8 = *a3;
}

void sub_19F2912DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  void *v21;
  void *v22;
  char *v24;
  uint64_t v25;

  v24 = a21;
  if (a21 == &a18)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::setCallbackQueue(_QWORD *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (a1[3])
  {
    GEOConfigRemoveBlockListener();
    v6 = (void *)a1[3];
    a1[3] = 0;

  }
  v7 = a3[3];
  if (!v7)
    goto LABEL_6;
  if ((_QWORD *)v7 != a3)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_6:
    v25 = (uint64_t *)v7;
    goto LABEL_8;
  }
  v25 = &v23;
  (*(void (**)(_QWORD *, uint64_t *))(*a3 + 24))(a3, &v23);
LABEL_8:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v23, a1 + 6);
  v8 = v25;
  if (v25 == &v23)
  {
    v9 = 4;
    v8 = &v23;
  }
  else
  {
    if (!v25)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  v10 = (std::__shared_weak_count *)a1[5];
  v23 = a1[4];
  v24 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v22 = v10;
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  _GEOConfigAddBlockListenerForKey();
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)a1[3];
  a1[3] = v15;

  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

}

void sub_19F291564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void VKLockScreenLog(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  void *v10;
  void *v11;

  v9 = a1;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "enableLoggingInLockScreen")
    && (objc_msgSend(v10, "isInstalledInLockScreen") & 1) != 0)
  {
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v9, &a9);
    NSLog((NSString *)CFSTR("VK LOCK SCREEN: %@"), v11);

  }
}

void sub_19F291674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

__n128 std::__function::__func<std::__bind<void (md::MapEngine::*)(double),md::MapEngine*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::MapEngine::*)(double),md::MapEngine*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42C6D08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

void sub_19F291BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19F291D00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>>>>::__construct_node_hash<std::pair<unsigned char const,std::vector<std::pair<gm::Range<unsigned char>,unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  _QWORD *v13;
  char *v14;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  v9 = *a3;
  result[3] = 0;
  *((_BYTE *)result + 16) = v9;
  result[4] = 0;
  result[5] = 0;
  v11 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = (_BYTE *)*((_QWORD *)a3 + 2);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    v13 = result;
    if (0xAAAAAAAAAAAAAAABLL * v12 >= 0x5555555555555556)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v12);
    v13[3] = v14;
    v13[4] = v14;
    v13[5] = &v14[v12];
    result = memcpy(v14, v11, 3 * ((v12 - 3) / 3) + 3);
    v13[4] = &v14[3 * ((v12 - 3) / 3) + 3];
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_19F291E10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabelPart::setCollisionResult(uint64_t this, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(this + 576);
  for (i = *(uint64_t **)(this + 584);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 448))(v5, a2))
  {
    v5 = *v2++;
  }
  return this;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7B80;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Clut20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D73A0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_23TextureWithReverseAlpha20Pos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7088;
}

void std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_3,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_3>,ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0CA0;
}

void std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_2,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_2>,ggl::Clut::Pos2DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0C58;
}

void std::__function::__func<md::RasterRenderResources::RasterRenderResources(void)::$_1,std::allocator<md::RasterRenderResources::RasterRenderResources(void)::$_1>,ggl::Textured::Pos2DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D0C10;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured40SRGBBlendColormappedPos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7CA0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured29SRGBBlendPos2DUVPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7C10;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16PolygonSolidFill17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D65D8;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_2>,ggl::Textured::SRGBBlendColormappedPos2DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D1990;
}

void std::__function::__func<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1,std::allocator<md::COverlayRenderResources::COverlayRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,BOOL)::$_1>,ggl::Textured::SRGBBlendPos2DUVPipelineSetup * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D1948;
}

void md::LabelRenderLayer::~LabelRenderLayer(md::LabelRenderLayer *this)
{
  md::LabelRenderLayer::~LabelRenderLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  *(_QWORD *)this = &off_1E4291BA8;
  v2 = (_QWORD *)*((_QWORD *)this + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    operator delete(v5);
  }
  v6 = (_QWORD *)*((_QWORD *)this + 30);
  if (v6)
  {
    do
    {
      v11 = (_QWORD *)*v6;
      v12 = v6[5];
      v6[5] = 0;
      if (v12)
        std::default_delete<md::LabelMapTileSourceData>::operator()[abi:nn180100](v12);
      operator delete(v6);
      v6 = v11;
    }
    while (v11);
  }
  v7 = (void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 24);
  while (v8)
  {
    v13 = v8;
    v8 = (_QWORD *)*v8;
    v14 = (std::__shared_weak_count *)v13[3];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 25) + 40))(*((_QWORD *)this + 25), v13, 32);
  }
  v9 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v9)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v9, 8 * *((_QWORD *)this + 22));
  md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::~LabelCachingStore((uint64_t *)this + 7);
  *(_QWORD *)this = off_1E428C468;
  v10 = (void *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 2) = v10;
    operator delete(v10);
  }
}

_QWORD *std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *> *>>(_QWORD *result, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v3 = (unint64_t)result;
  v4 = result[1];
  if (!v4)
    goto LABEL_5;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*result + 8 * i) = 0;
  result[5] = 0;
  v6 = (_QWORD *)result[3];
  result[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v16 = a2[2];
      v15 = a2[3];
      if (v15)
      {
        v17 = (unint64_t *)(v15 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v19 = (std::__shared_weak_count *)v6[3];
      v6[2] = v16;
      v6[3] = v15;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v14 = (_QWORD *)*v6;
      result = (_QWORD *)std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__node_insert_multi(v3, v6);
      a2 = (_QWORD *)*a2;
      v6 = v14;
      if (!v14)
        goto LABEL_5;
    }
    do
    {
      v22 = v6;
      v6 = (_QWORD *)*v6;
      v23 = (std::__shared_weak_count *)v22[3];
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 32) + 40))(*(_QWORD *)(v3 + 32), v22, 32);
    }
    while (v6);
  }
  else
  {
LABEL_5:
    while (a2)
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 32) + 16))(*(_QWORD *)(v3 + 32), 32, 8);
      *v7 = 0;
      v7[1] = 0;
      v8 = a2[2];
      v9 = a2[3];
      v7[2] = v8;
      v7[3] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v8 = v7[2];
      }
      v12 = HIDWORD(v8);
      v13 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      v7[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ (v13 >> 47) ^ v13)) >> 47));
      result = (_QWORD *)std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__node_insert_multi(v3, v7);
      a2 = (_QWORD *)*a2;
    }
  }
  return result;
}

void sub_19F2922CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 32) + 40))(*(_QWORD *)(v1 + 32), v2, 32);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__node_insert_multi(unint64_t result, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  _QWORD *j;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *i;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  _BOOL4 v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  int v44;
  _BOOL4 v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v3 = result;
  v4 = a2[2];
  v5 = HIDWORD(v4);
  v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  v8 = *(_QWORD *)(result + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(result + 40) + 1);
  v10 = *(float *)(result + 48);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    v11 = 1;
    if (v8 >= 3)
      v11 = (v8 & (v8 - 1)) != 0;
    v12 = v11 | (2 * v8);
    v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13)
      v14 = v13;
    else
      v14 = v12;
    if (v14 == 1)
    {
      v14 = 2;
    }
    else if ((v14 & (v14 - 1)) != 0)
    {
      result = std::__next_prime(v14);
      v14 = result;
      v8 = *(_QWORD *)(v3 + 8);
    }
    if (v14 > v8)
      goto LABEL_13;
    if (v14 >= v8)
      goto LABEL_39;
    result = vcvtps_u32_f32((float)*(unint64_t *)(v3 + 40) / *(float *)(v3 + 48));
    if (v8 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      result = std::__next_prime(result);
    }
    else
    {
      v28 = 1 << -(char)__clz(result - 1);
      if (result >= 2)
        result = v28;
    }
    if (v14 <= result)
      v14 = result;
    if (v14 >= v8)
    {
      v8 = *(_QWORD *)(v3 + 8);
      goto LABEL_39;
    }
    if (v14)
    {
LABEL_13:
      result = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), 8 * v14, 8);
      v15 = *(_QWORD *)v3;
      *(_QWORD *)v3 = result;
      if (v15)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), v15, 8 * *(_QWORD *)(v3 + 8));
      v16 = 0;
      *(_QWORD *)(v3 + 8) = v14;
      do
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v16++) = 0;
      while (v14 != v16);
      v18 = v3 + 24;
      v17 = *(_QWORD **)(v3 + 24);
      if (v17)
      {
        v19 = v17[1];
        v20 = v14 - 1;
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v19 >= v14)
            v19 %= v14;
          *(_QWORD *)(*(_QWORD *)v3 + 8 * v19) = v18;
          for (i = (_QWORD *)*v17; *v17; i = (_QWORD *)*v17)
          {
            v38 = i[1];
            if (v38 >= v14)
              v38 %= v14;
            if (v38 == v19)
            {
              v17 = i;
            }
            else
            {
              v39 = i;
              if (*(_QWORD *)(*(_QWORD *)v3 + 8 * v38))
              {
                do
                {
                  v40 = v39;
                  v39 = (_QWORD *)*v39;
                }
                while (v39 && i[2] == v39[2]);
                *v17 = v39;
                v41 = 8 * v38;
                *v40 = **(_QWORD **)(*(_QWORD *)v3 + v41);
                **(_QWORD **)(*(_QWORD *)v3 + v41) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)v3 + 8 * v38) = v17;
                v17 = i;
                v19 = v38;
              }
            }
          }
        }
        else
        {
          v21 = v19 & v20;
          *(_QWORD *)(*(_QWORD *)v3 + 8 * v21) = v18;
          for (j = (_QWORD *)*v17; *v17; j = (_QWORD *)*v17)
          {
            v23 = j[1] & v20;
            if (v23 == v21)
            {
              v17 = j;
            }
            else
            {
              v24 = j;
              if (*(_QWORD *)(*(_QWORD *)v3 + 8 * v23))
              {
                do
                {
                  v25 = v24;
                  v24 = (_QWORD *)*v24;
                }
                while (v24 && j[2] == v24[2]);
                *v17 = v24;
                v26 = 8 * v23;
                *v25 = **(_QWORD **)(*(_QWORD *)v3 + v26);
                **(_QWORD **)(*(_QWORD *)v3 + v26) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)v3 + 8 * v23) = v17;
                v17 = j;
                v21 = v23;
              }
            }
          }
        }
      }
      v8 = v14;
    }
    else
    {
      v51 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      if (v51)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), v51, 8 * *(_QWORD *)(v3 + 8));
      v8 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
LABEL_39:
  v30 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] >= 2uLL)
  {
    v42 = v7;
    if (v8 <= v7)
      v42 = v7 % v8;
    v43 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v42);
    if (!v43)
    {
      v36 = 0;
      v49 = a2[1];
      if (v49 < v8)
        goto LABEL_77;
      goto LABEL_76;
    }
    v44 = 0;
    do
    {
      v36 = v43;
      v43 = (_QWORD *)*v43;
      if (!v43)
        break;
      v47 = v43[1];
      v48 = v47;
      if (v47 >= v8)
        v48 = v47 % v8;
      if (v48 != v42)
        break;
      v45 = v47 == v7 && v43[2] == a2[2];
      v46 = v44 & !v45;
      v44 |= v45;
    }
    while (v46 != 1);
  }
  else
  {
    v31 = (v8 - 1) & v7;
    v32 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v31);
    if (!v32)
    {
      v36 = 0;
      v49 = a2[1];
      goto LABEL_74;
    }
    v33 = 0;
    do
    {
      v36 = v32;
      v32 = (_QWORD *)*v32;
      if (!v32)
        break;
      v37 = v32[1];
      if ((v37 & (v8 - 1)) != v31)
        break;
      v34 = v37 == v7 && v32[2] == a2[2];
      v35 = v33 & !v34;
      v33 |= v34;
    }
    while ((v35 & 1) == 0);
  }
  v49 = a2[1];
  if (v30.u32[0] <= 1uLL)
  {
LABEL_74:
    v49 &= v8 - 1;
    goto LABEL_77;
  }
  if (v49 >= v8)
LABEL_76:
    v49 %= v8;
LABEL_77:
  if (!v36)
  {
    *a2 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = a2;
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v49) = v3 + 24;
    if (!*a2)
      goto LABEL_91;
    v50 = *(_QWORD *)(*a2 + 8);
    if (v30.u32[0] > 1uLL)
    {
      if (v50 >= v8)
        v50 %= v8;
    }
    else
    {
      v50 &= v8 - 1;
    }
LABEL_90:
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v50) = a2;
    goto LABEL_91;
  }
  *a2 = *v36;
  *v36 = a2;
  if (*a2)
  {
    v50 = *(_QWORD *)(*a2 + 8);
    if (v30.u32[0] > 1uLL)
    {
      if (v50 >= v8)
        v50 %= v8;
    }
    else
    {
      v50 &= v8 - 1;
    }
    if (v50 != v49)
      goto LABEL_90;
  }
LABEL_91:
  ++*(_QWORD *)(v3 + 40);
  return result;
}

uint64_t gss::Queryable<gss::ScenePropertyID>::lock(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  geo::read_write_lock *v6;
  const char *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  geo::read_write_lock *v14;
  const char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned __int8 v31;
  int v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned __int8 v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int8 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned __int8 v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  unint64_t *v87;
  unint64_t v88;
  char v89;
  unint64_t *v90;
  unint64_t v91;
  gss::Allocator *v92;
  uint64_t v93;
  gss::Allocator *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  geo::read_write_lock *v102;
  const char *v103;
  geo::read_write_lock *v104;
  const char *v105;
  __int128 v106;
  unint64_t *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  geo::read_write_lock *v110;
  const char *v111;
  unint64_t *v112;
  unint64_t v113;
  __int128 v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  pthread_rwlock_t *v120;
  __int128 v121;

  v121 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_154;
  *((_QWORD *)&v121 + 1) = std::__shared_weak_count::lock(v4);
  if (!*((_QWORD *)&v121 + 1))
    goto LABEL_154;
  *(_QWORD *)&v121 = *(_QWORD *)(a1 + 8);
  if (!(_QWORD)v121)
    goto LABEL_154;
  v6 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v6)
    geo::read_write_lock::logFailure(v6, (uint64_t)"read lock", v7);
  if (((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 32))(a1, &v121) & 1) == 0
    && *(_QWORD *)(a1 + 24))
  {
    if (!a2)
      goto LABEL_150;
    v8 = v121;
    v121 = 0uLL;
    v9 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v8;
    if (!v9)
      goto LABEL_150;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    goto LABEL_148;
  }
  v12 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v12)
    geo::read_write_lock::logFailure(v12, (uint64_t)"unlock", v13);
  v120 = (pthread_rwlock_t *)(a1 + 32);
  v14 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v14)
    geo::read_write_lock::logFailure(v14, (uint64_t)"write lock", v15);
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 32))(a1, &v121))
  {
    v16 = *(_QWORD *)(v121 + 520);
    v17 = *(std::__shared_weak_count **)(v121 + 528);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      *(_DWORD *)(a1 + 232) = *(_DWORD *)(v16 + 248);
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 232) = *(_DWORD *)(v16 + 248);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v21 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v21)
      std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v21);
  }
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v118, a1);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v116, a1);
  v22 = v121;
  v23 = *(_QWORD *)(v121 + 520);
  v24 = *(std::__shared_weak_count **)(v121 + 528);
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (v23)
  {
    v27 = *(_QWORD *)(v22 + 520);
    v28 = *(std::__shared_weak_count **)(v22 + 528);
    if (!v28)
    {
      v36 = atomic_load((unsigned __int8 *)(v27 + 254));
      v32 = v36 & 1;
      if (!v24)
        goto LABEL_47;
      goto LABEL_42;
    }
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    v31 = atomic_load((unsigned __int8 *)(v27 + 254));
    v32 = v31 & 1;
    do
      v33 = __ldaxr(v29);
    while (__stlxr(v33 - 1, v29));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      if (!v24)
        goto LABEL_47;
      goto LABEL_42;
    }
  }
  else
  {
    v32 = 0;
  }
  if (!v24)
    goto LABEL_47;
LABEL_42:
  v34 = (unint64_t *)&v24->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_47:
  v37 = v118;
  if (v118)
  {
    v38 = (uint64_t *)(a1 + 24);
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_129;
    v39 = *(_QWORD *)(v121 + 16);
    v40 = *(_QWORD *)(v121 + 24);
    *(_QWORD *)&v115 = v39;
    *((_QWORD *)&v115 + 1) = v40;
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = atomic_load((unsigned __int8 *)(v37 + 122));
    if ((v43 & 1) == 0)
      gss::CartoStyle<gss::ScenePropertyID>::populateStyles(v37, v39);
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    if (*((_QWORD *)&v115 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v115 + 1) + 16))(*((_QWORD *)&v115 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115 + 1));
      }
    }
    v47 = v116;
    if (!v116)
      goto LABEL_76;
  }
  else
  {
    v47 = v116;
    if (v116)
      v48 = v32;
    else
      v48 = 0;
    if (v48 != 1)
      goto LABEL_129;
    v38 = (uint64_t *)(a1 + 24);
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_129;
  }
  v49 = *(_QWORD *)(v121 + 16);
  v50 = *(_QWORD *)(v121 + 24);
  *(_QWORD *)&v115 = v49;
  *((_QWORD *)&v115 + 1) = v50;
  if (v50)
  {
    v51 = (unint64_t *)(v50 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = atomic_load((unsigned __int8 *)(v47 + 122));
  if ((v53 & 1) == 0)
    gss::CartoStyle<gss::ScenePropertyID>::populateStyles(v47, v49);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
  if (*((_QWORD *)&v115 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v115 + 1) + 16))(*((_QWORD *)&v115 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115 + 1));
    }
  }
LABEL_76:
  v56 = operator new();
  v57 = v56;
  if (v32)
  {
    v58 = v121;
    v59 = *(_QWORD *)(v121 + 520);
    v44 = *(std::__shared_weak_count **)(v121 + 528);
    if (v44)
    {
      v60 = (unint64_t *)&v44->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    if (v59)
    {
      v62 = *(_QWORD *)(v58 + 520);
      v2 = *(std::__shared_weak_count **)(v58 + 528);
      if (v2)
      {
        v63 = (unint64_t *)&v2->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v65 = 0;
      v66 = v62 + 256;
    }
    else
    {
      v66 = 0;
      v65 = 1;
    }
  }
  else
  {
    v66 = 0;
    v65 = 1;
  }
  *(_QWORD *)v56 = v66;
  *(_BYTE *)(v56 + 10) = 1;
  *(_QWORD *)(v56 + 64) = 0;
  *(_QWORD *)(v56 + 69) = 0;
  *(_OWORD *)(v56 + 16) = 0u;
  *(_OWORD *)(v56 + 32) = 0u;
  *(_OWORD *)(v56 + 45) = 0u;
  v67 = v118;
  v68 = v119;
  if (v119)
  {
    v69 = (unint64_t *)&v119->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    v71 = *(std::__shared_weak_count **)(v56 + 24);
    *(_QWORD *)(v56 + 16) = v67;
    *(_QWORD *)(v56 + 24) = v68;
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else
  {
    *(_QWORD *)(v56 + 16) = v118;
    *(_QWORD *)(v56 + 24) = 0;
  }
  v75 = v116;
  v74 = v117;
  if (v117)
  {
    v76 = (unint64_t *)&v117->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  v78 = *(std::__shared_weak_count **)(v57 + 40);
  *(_QWORD *)(v57 + 32) = v75;
  *(_QWORD *)(v57 + 40) = v74;
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v118 == 0;
  v82 = v118 != 0;
  *(_BYTE *)(v57 + 8) = v118 != 0;
  v83 = v116 == 0;
  v84 = v116 != 0;
  *(_BYTE *)(v57 + 9) = v116 != 0;
  if (v83)
    v82 = 0;
  *(_BYTE *)(v57 + 10) = v82;
  *(_BYTE *)(v57 + 11) = v81;
  *(_BYTE *)(v57 + 12) = v84;
  v85 = *v38;
  *v38 = v57;
  if (v85)
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v85);
  if (v2)
    v86 = v65;
  else
    v86 = 1;
  if ((v86 & 1) == 0)
  {
    v87 = (unint64_t *)&v2->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v89 = v32 ^ 1;
  if (!v44)
    v89 = 1;
  if ((v89 & 1) == 0)
  {
    v90 = (unint64_t *)&v44->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *(_QWORD *)((char *)&v115 + 7) = 0;
  *(_QWORD *)&v115 = 0;
  HIBYTE(v115) = 1;
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 64))(a1, &v115, 0);
  gss::BaseRenderStyle<gss::PropertyID>::resolveConditionalStyles(*v38, (uint64_t)&v115, 0);
  if (!BYTE14(v115) && (_QWORD)v115)
  {
    v93 = gss::Allocator::instance(v92);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v93 + 40))(v93, v115, WORD6(v115));
  }
  *(_QWORD *)((char *)&v115 + 7) = 0;
  *(_QWORD *)&v115 = 0;
  HIBYTE(v115) = 1;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 64))(a1, &v115, 1);
  gss::BaseRenderStyle<gss::PropertyID>::resolveConditionalStyles(*v38, (uint64_t)&v115, 1u);
  if (!BYTE14(v115) && (_QWORD)v115)
  {
    v95 = gss::Allocator::instance(v94);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v95 + 40))(v95, v115, WORD6(v115));
  }
LABEL_129:
  v96 = v117;
  if (v117)
  {
    v97 = (unint64_t *)&v117->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v119;
  if (v119)
  {
    v100 = (unint64_t *)&v119->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = (geo::read_write_lock *)pthread_rwlock_unlock(v120);
  if ((_DWORD)v102)
    geo::read_write_lock::logFailure(v102, (uint64_t)"unlock", v103);
  v104 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v104)
    geo::read_write_lock::logFailure(v104, (uint64_t)"read lock", v105);
  if (!*(_QWORD *)(a1 + 24))
  {
    v110 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 32));
    if ((_DWORD)v110)
      geo::read_write_lock::logFailure(v110, (uint64_t)"unlock", v111);
LABEL_154:
    v108 = 0;
    v109 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
    if (!*((_QWORD *)&v121 + 1))
      return v108;
    goto LABEL_155;
  }
  if (!a2)
    goto LABEL_150;
  v106 = v121;
  v121 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v106;
  if (!v9)
    goto LABEL_150;
  v107 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v107);
  while (__stlxr(v11 - 1, v107));
LABEL_148:
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_150:
  v108 = 1;
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (!*((_QWORD *)&v121 + 1))
    return v108;
LABEL_155:
  v112 = (unint64_t *)&v109->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
  }
  return v108;
}

void sub_19F293068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  pthread_rwlock_t *v12;
  va_list va3;
  va_list va4;

  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v12 = va_arg(va4, pthread_rwlock_t *);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  geo::write_lock_guard::~write_lock_guard((pthread_rwlock_t **)va3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  _Unwind_Resume(a1);
}

BOOL gss::Queryable<gss::ScenePropertyID>::needsUpdate(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = *(_DWORD *)(a1 + 232);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 520);
  v4 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 528);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (!v3)
  {
    v11 = 0;
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 520);
  v8 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 528);
  if (!v8)
  {
    v11 = *(_DWORD *)(v7 + 248);
    if (!v4)
      return v2 != v11;
    goto LABEL_15;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v11 = *(_DWORD *)(v7 + 248);
  do
    v12 = __ldaxr(v9);
  while (__stlxr(v12 - 1, v9));
  if (v12)
  {
LABEL_14:
    if (!v4)
      return v2 != v11;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v4)
    return v2 != v11;
LABEL_15:
  v13 = (unint64_t *)&v4->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v2 != v11;
}

void gss::StylesheetQuery<gss::ScenePropertyID>::getAttributeMapForStyle(uint64_t a1, uint64_t *a2, int a3)
{
  BOOL v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  gss::Allocator *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if (*((_BYTE *)a2 + 14))
    v6 = 1;
  else
    v6 = *a2 == 0;
  if (!v6)
  {
    v7 = gss::Allocator::instance((gss::Allocator *)a1);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *a2, *((unsigned __int16 *)a2 + 6));
  }
  *(uint64_t *)((char *)a2 + 7) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 15) = 1;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v23 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8);
      v22 = v11;
      if (!v11)
        goto LABEL_22;
      v12 = a1 + 272;
      if (a3)
      {
        gss::StylesheetManager<gss::ScenePropertyID>::targetStyleAttributes(&v20, v11, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), v12);
        v14 = *((unsigned __int8 *)a2 + 14);
        if (&v20 != a2)
        {
          if (*((_BYTE *)a2 + 14) || !*a2)
            goto LABEL_18;
          goto LABEL_17;
        }
      }
      else
      {
        gss::StylesheetManager<gss::ScenePropertyID>::sourceStyleAttributes(&v20, v11, *(uint64_t **)(a1 + 240), *(uint64_t **)(a1 + 248), v12);
        v14 = *((unsigned __int8 *)a2 + 14);
        if (&v20 != a2)
        {
          if (*((_BYTE *)a2 + 14) || !*a2)
            goto LABEL_18;
LABEL_17:
          v15 = gss::Allocator::instance(v13);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, *a2, *((unsigned __int16 *)a2 + 6));
          *a2 = 0;
LABEL_18:
          v16 = v21;
          *a2 = v20;
          *((_DWORD *)a2 + 2) = v16;
          *((_WORD *)a2 + 6) = WORD2(v16);
          *((_WORD *)a2 + 7) = HIWORD(v21);
LABEL_22:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          return;
        }
      }
      if (!v14 && *a2)
      {
        v17 = gss::Allocator::instance(v13);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, *a2, *((unsigned __int16 *)a2 + 6));
      }
      goto LABEL_22;
    }
  }
}

void sub_19F293368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *gss::StylesheetQuery<gss::ScenePropertyID>::targetCartoStyle@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  *a2 = 0;
  a2[1] = 0;
  result = *(std::__shared_weak_count **)(a1 + 312);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *(_QWORD *)(a1 + 304);
  }
  return result;
}

std::__shared_weak_count *gss::StylesheetQuery<gss::ScenePropertyID>::sourceCartoStyle@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  *a2 = 0;
  a2[1] = 0;
  result = *(std::__shared_weak_count **)(a1 + 296);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *(_QWORD *)(a1 + 288);
  }
  return result;
}

void md::LogicManager::resetFrequencyCounter(md::LogicManager *this)
{
  NSObject *v2;
  uint8_t v3[16];

  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_DEBUG, "[VLR] Reset Frame Counter", v3, 2u);
  }

  *((_QWORD *)this + 11) = 1;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::~CartographicTiledRenderLayer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _BYTE *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E42A5098;
  v2 = *(void **)(a1 + 320);
  if (v2)
  {
    *(_QWORD *)(a1 + 328) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 296);
  if (v3)
  {
    *(_QWORD *)(a1 + 304) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 272);
  if (v4)
  {
    *(_QWORD *)(a1 + 280) = v4;
    operator delete(v4);
  }
  geo::Pool<md::MapTileDataRenderable<md::PolygonTileData>>::disposeElements(a1 + 224);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 232));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  v5 = *(_BYTE **)(a1 + 104);
  if (v5)
  {
    do
    {
      if (v5[112])
        v5[112] = 0;
      v9 = *(_BYTE **)v5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v10 != *((void **)v5 + 6))
        free(v10);
      operator delete(v5);
      v5 = v9;
    }
    while (v9);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == (_QWORD *)(a1 + 56))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_20:
  *(_QWORD *)a1 = off_1E428C468;
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_19F293700(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v1 + 232));
  _Unwind_Resume(a1);
}

_QWORD *md::CartographicRenderer::clearScene(_QWORD *this)
{
  _QWORD **v1;
  _QWORD **v2;

  v1 = (_QWORD **)this[5];
  v2 = (_QWORD **)this[6];
  while (v1 != v2)
  {
    this = *v1;
    if (*v1)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 48))(this);
    ++v1;
  }
  return this;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::PolygonTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::MapTileDataRenderable<md::PolygonTileData>>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 400 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F293AEC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::ElevatedPolygonRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::ElevatedPolygonRenderable>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 464 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F293E90(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 400 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F294234(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::TrafficTileData>>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::TrafficTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::MapTileDataRenderable<md::TrafficTileData>>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 400 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F2945D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledRenderLayer<HillshadeRenderable>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<HillshadeRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void geo::Pool<HillshadeRenderable>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 400 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F29497C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledRenderLayer<md::BuildingTileDataRenderable>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::BuildingTileDataRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::BuildingTileDataRenderable>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 768 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F294D24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::renderablesWillLeaveView(uint64_t a1, char **a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  void **v17;
  _QWORD *v18;
  unint64_t v19;
  const void *v20;
  size_t v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  size_t v25;
  const void *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  size_t v37;
  size_t v38;
  size_t v39;
  _QWORD *i;
  size_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  size_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  float v54;
  char **v55;
  _QWORD *v56;
  char *v57;
  void *__p;
  char v59;

  v6 = (_QWORD *)(a1 + 104);
  v5 = *(_QWORD **)(a1 + 104);
  v7 = (_QWORD *)(a1 + 88);
  if (v5)
  {
    do
    {
      while (*(float *)(v5[16] + 404) > 0.0)
      {
        v5 = (_QWORD *)*v5;
        if (!v5)
          goto LABEL_13;
      }
      v8 = (_QWORD *)*v5;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v7, v5);
      v9 = __p;
      if (__p)
      {
        if (v59)
        {
          if (*((_BYTE *)__p + 112))
            *((_BYTE *)__p + 112) = 0;
          v10 = (void *)v9[4];
          if (v10 != (void *)v9[6])
            free(v10);
        }
        operator delete(v9);
      }
      v5 = v8;
    }
    while (v8);
  }
LABEL_13:
  v11 = *a2;
  v57 = a2[1];
  if (*a2 != v57)
  {
    v55 = a2;
    v56 = v6;
    while (1)
    {
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 384);
      v14 = *(_QWORD *)(v13 + 120);
      v15 = *(_QWORD *)(a1 + 96);
      if (v15)
      {
        v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          v2 = *(_QWORD *)(v13 + 120);
          if (v14 >= v15)
            v2 = v14 % v15;
        }
        else
        {
          v2 = (v15 - 1) & v14;
        }
        v17 = *(void ***)(*v7 + 8 * v2);
        if (v17)
        {
          v18 = *v17;
          if (*v17)
          {
            if (v16.u32[0] >= 2uLL)
            {
              while (1)
              {
                v19 = v18[1];
                if (v19 == v14)
                {
                  if (*((unsigned __int8 *)v18 + 16) == *(unsigned __int8 *)(v13 + 16)
                    && *((unsigned __int16 *)v18 + 12) == *(unsigned __int16 *)(v13 + 24)
                    && v18[12] == *(_QWORD *)(v13 + 96))
                  {
                    v20 = (const void *)v18[4];
                    v21 = v18[5] - (_QWORD)v20;
                    v22 = *(const void **)(v13 + 32);
                    if (v21 == *(_QWORD *)(v13 + 40) - (_QWORD)v22 && !memcmp(v20, v22, v21))
                      goto LABEL_107;
                  }
                }
                else
                {
                  if (v19 >= v15)
                    v19 %= v15;
                  if (v19 != v2)
                    goto LABEL_45;
                }
                v18 = (_QWORD *)*v18;
                if (!v18)
                  goto LABEL_45;
              }
            }
            do
            {
              v23 = v18[1];
              if (v23 == v14)
              {
                if (*((unsigned __int8 *)v18 + 16) == *(unsigned __int8 *)(v13 + 16)
                  && *((unsigned __int16 *)v18 + 12) == *(unsigned __int16 *)(v13 + 24)
                  && v18[12] == *(_QWORD *)(v13 + 96))
                {
                  v24 = (const void *)v18[4];
                  v25 = v18[5] - (_QWORD)v24;
                  v26 = *(const void **)(v13 + 32);
                  if (v25 == *(_QWORD *)(v13 + 40) - (_QWORD)v26 && !memcmp(v24, v26, v25))
                  {
                    v6 = v56;
                    goto LABEL_107;
                  }
                }
              }
              else if ((v23 & (v15 - 1)) != v2)
              {
                break;
              }
              v18 = (_QWORD *)*v18;
            }
            while (v18);
            v6 = v56;
          }
        }
      }
LABEL_45:
      v18 = operator new(0x88uLL);
      *v18 = 0;
      v18[1] = v14;
      *((_BYTE *)v18 + 16) = *(_BYTE *)(v13 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v18 + 3), v13 + 24);
      *((_BYTE *)v18 + 112) = 0;
      if (*(_BYTE *)(v13 + 112))
      {
        *((_DWORD *)v18 + 29) = *(_DWORD *)(v13 + 116);
        *((_BYTE *)v18 + 112) = 1;
      }
      v18[15] = *(_QWORD *)(v13 + 120);
      v18[16] = 0;
      v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 112) + 1);
      v28 = *(float *)(a1 + 120);
      if (!v15 || (float)(v28 * (float)v15) < v27)
        break;
LABEL_97:
      v49 = (_QWORD *)*v7;
      v50 = *(_QWORD **)(*v7 + 8 * v2);
      if (v50)
      {
        *v18 = *v50;
      }
      else
      {
        *v18 = *v6;
        *v6 = v18;
        v49[v2] = v6;
        if (!*v18)
          goto LABEL_106;
        v51 = *(_QWORD *)(*v18 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v51 >= v15)
            v51 %= v15;
        }
        else
        {
          v51 &= v15 - 1;
        }
        v50 = (_QWORD *)(*v7 + 8 * v51);
      }
      *v50 = v18;
LABEL_106:
      ++*(_QWORD *)(a1 + 112);
LABEL_107:
      v18[16] = v12;
      v11 += 8;
      if (v11 == v57)
      {
        v53 = *v55;
        v11 = v55[1];
        goto LABEL_119;
      }
    }
    v29 = (v15 & (v15 - 1)) != 0;
    if (v15 < 3)
      v29 = 1;
    v30 = v29 | (2 * v15);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v15 = *(_QWORD *)(a1 + 96);
    if (prime <= v15)
    {
      if (prime >= v15)
        goto LABEL_84;
      v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 112) / *(float *)(a1 + 120));
      if (v15 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (prime <= v43)
        prime = v43;
      if (prime >= v15)
      {
        v15 = *(_QWORD *)(a1 + 96);
LABEL_84:
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v14 >= v15)
            v2 = v14 % v15;
          else
            v2 = v14;
        }
        else
        {
          v2 = (v15 - 1) & v14;
        }
        goto LABEL_97;
      }
      if (!prime)
      {
        v52 = (_QWORD *)*v7;
        *v7 = 0;
        if (v52)
          operator delete(v52);
        v15 = 0;
        *(_QWORD *)(a1 + 96) = 0;
        goto LABEL_84;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v33 = operator new(8 * prime);
    v34 = (_QWORD *)*v7;
    *v7 = v33;
    if (v34)
      operator delete(v34);
    v35 = 0;
    *(_QWORD *)(a1 + 96) = prime;
    do
      *(_QWORD *)(*v7 + 8 * v35++) = 0;
    while (prime != v35);
    v36 = (_QWORD *)*v6;
    if (!*v6)
    {
LABEL_83:
      v15 = prime;
      goto LABEL_84;
    }
    v37 = v36[1];
    v38 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v39 = v37 & v38;
      *(_QWORD *)(*v7 + 8 * v39) = v6;
      for (i = (_QWORD *)*v36; *v36; i = (_QWORD *)*v36)
      {
        v41 = i[1] & v38;
        if (v41 == v39)
        {
          v36 = i;
        }
        else if (*(_QWORD *)(*v7 + 8 * v41))
        {
          *v36 = *i;
          v42 = 8 * v41;
          *i = **(_QWORD **)(*v7 + v42);
          **(_QWORD **)(*v7 + v42) = i;
        }
        else
        {
          *(_QWORD *)(*v7 + 8 * v41) = v36;
          v36 = i;
          v39 = v41;
        }
      }
      goto LABEL_83;
    }
    if (v37 >= prime)
      v37 %= prime;
    *(_QWORD *)(*v7 + 8 * v37) = v6;
    v46 = (_QWORD *)*v36;
    if (!*v36)
      goto LABEL_83;
    while (1)
    {
      v48 = v46[1];
      if (v48 >= prime)
        v48 %= prime;
      if (v48 != v37)
      {
        if (!*(_QWORD *)(*v7 + 8 * v48))
        {
          *(_QWORD *)(*v7 + 8 * v48) = v36;
          goto LABEL_88;
        }
        *v36 = *v46;
        v47 = 8 * v48;
        *v46 = **(_QWORD **)(*v7 + v47);
        **(_QWORD **)(*v7 + v47) = v46;
        v46 = v36;
      }
      v48 = v37;
LABEL_88:
      v36 = v46;
      v46 = (_QWORD *)*v46;
      v37 = v48;
      if (!v46)
        goto LABEL_83;
    }
  }
  v53 = *a2;
LABEL_119:
  if (*(_BYTE *)(*(_QWORD *)(a1 + 376) + 17) == 1)
    v54 = 1.0;
  else
    v54 = 0.0;
  md::BuildingRenderLayer::animateTiles(a1, v53, v11, 1.0, 0.0, v54, 0.0);
}

void sub_19F29533C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  if (*(_BYTE *)(v1 + 112))
    *(_BYTE *)(v1 + 112) = 0;
  v3 = *(void **)(v1 + 32);
  if (v3 != *(void **)(v1 + 48))
    free(v3);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void md::BuildingRenderLayer::animateTiles(uint64_t a1, char *a2, char *a3, float a4, float a5, float a6, float a7)
{
  char *v10;
  float v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  VKTimedAnimation *v19;
  id v20;
  void *v21;
  id v22;
  VKTimedAnimation *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[7];
  float v33;
  float v34;
  float v35;
  _QWORD v36[4];
  id v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  float v41;
  float v42;
  float v43;
  float v44;

  v10 = a2;
  if (!*(_BYTE *)(a1 + 408))
  {
    if (a2 == a3)
      return;
    v25 = a3 - a2 - 8;
    if (v25 >= 8)
    {
      v26 = (v25 >> 3) + 1;
      v27 = (uint64_t *)(a2 + 8);
      v28 = v26 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v29 = *(v27 - 1);
        v30 = *v27;
        *(_DWORD *)(v29 + 400) = 1065353216;
        *(_DWORD *)(v30 + 400) = 1065353216;
        *(float *)(v29 + 404) = a5;
        *(float *)(v30 + 404) = a5;
        *(float *)(v29 + 412) = a7;
        *(float *)(v30 + 412) = a7;
        v27 += 2;
        v28 -= 2;
      }
      while (v28);
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFELL))
        return;
      v10 = &a2[8 * (v26 & 0x3FFFFFFFFFFFFFFELL)];
    }
    do
    {
      v31 = *(_QWORD *)v10;
      v10 += 8;
      *(_DWORD *)(v31 + 400) = 1065353216;
      *(float *)(v31 + 404) = a5;
      *(float *)(v31 + 412) = a7;
    }
    while (v10 != a3);
    return;
  }
  if (a2 != a3)
  {
    if (a4 <= a5)
      v14 = 0.0;
    else
      v14 = 1.0;
    if (a5 <= a4)
      v15 = &__block_literal_global_4_9962;
    else
      v15 = &__block_literal_global_9961;
    v16 = MEMORY[0x1E0C809B0];
    do
    {
      v17 = *(_QWORD *)v10;
      v18 = (double *)(*(_QWORD *)v10 + 56);
      md::MercatorTerrainHeightCache::invalidateRect(*(_QWORD **)(a1 + 456), v18);
      v19 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", 0.449999988);
      *(float *)(v17 + 400) = v14;
      *(float *)(v17 + 404) = a4;
      *(float *)(v17 + 412) = a6;
      v20 = *(id *)(v17 + 424);
      objc_msgSend(v20, "stop");
      v21 = (void *)MEMORY[0x1A1AF5730](v15);
      -[VKTimedAnimation setTimingFunction:](v19, "setTimingFunction:", VKAnimationCurveLinear);
      v36[0] = v16;
      v36[1] = 3221225472;
      v36[2] = ___ZN2md19BuildingRenderLayer12animateTilesERKN3geo5sliceINSt3__111__wrap_iterIPKPNS_26BuildingTileDataRenderableEEEEEffff_block_invoke_3;
      v36[3] = &unk_1E42EFAE0;
      v38 = a1;
      v39 = v17;
      v41 = a4;
      v42 = a5;
      v22 = v21;
      v43 = a6;
      v44 = a7;
      v37 = v22;
      v40 = v18;
      -[VKTimedAnimation setStepHandler:](v19, "setStepHandler:", v36);
      v32[0] = v16;
      v32[1] = 3221225472;
      v32[2] = ___ZN2md19BuildingRenderLayer12animateTilesERKN3geo5sliceINSt3__111__wrap_iterIPKPNS_26BuildingTileDataRenderableEEEEEffff_block_invoke_4;
      v32[3] = &__block_descriptor_68_e8_v12__0B8l;
      v32[4] = a1;
      v32[5] = v17;
      v33 = a4;
      v34 = a5;
      v35 = a7;
      v32[6] = v18;
      -[VKAnimation setCompletionHandler:](v19, "setCompletionHandler:", v32);
      if (md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 464), &v19->super))
      {
        v23 = v19;
        v24 = *(void **)(v17 + 424);
        *(_QWORD *)(v17 + 424) = v23;

      }
      v10 += 8;
    }
    while (v10 != a3);
  }
}

void sub_19F2955E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::clearScene(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;

  if (*(_DWORD *)(a1 + 52) == 1)
  {
    v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v10);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_BYTE **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112])
          v2[112] = 0;
        v8 = *(_BYTE **)v2;
        v9 = (void *)*((_QWORD *)v2 + 4);
        if (v9 != *((void **)v2 + 6))
          free(v9);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 104) = 0;
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::VenueTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 136));
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (_QWORD *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  v7 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 208);
  *(v6 - 4) = v5;
  *v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::VenueTileData> *,md::MapTileDataRenderable<md::VenueTileData> *)> &,md::MapTileDataRenderable<md::VenueTileData> **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19F2960A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

BOOL md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t **i;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t ***v20;
  uint64_t **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  size_t v25;
  const void *v26;
  uint64_t *v27;
  uint64_t *v28;
  size_t v29;
  const void *v30;
  _BOOL8 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;

  v3 = *(_QWORD *)(a2 + 384);
  v2 = *(std::__shared_weak_count **)(a2 + 392);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(unsigned __int8 *)(a2 + 48);
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = v2;
    for (i = (uint64_t **)a1[17]; i; i = (uint64_t **)*i)
    {
LABEL_14:
      v15 = *((unsigned __int8 *)i + 48);
      v16 = *((char *)i + 48) > (char)v7;
      v17 = (unint64_t)i[4];
      if (v7 == v15)
        v16 = v3 < v17;
      if (!v16)
      {
        v18 = v17 < v3;
        if (v7 == v15)
          v19 = v18;
        else
          v19 = (char)v15 < (char)v7;
        if (!v19)
        {
          v31 = 1;
          if (v9)
            goto LABEL_52;
          goto LABEL_59;
        }
        ++i;
      }
    }
  }
  else
  {
    v9 = 0;
    v7 = *(unsigned __int8 *)(a2 + 48);
    i = (uint64_t **)a1[17];
    if (i)
      goto LABEL_14;
  }
  v11 = (int8x8_t)a1[12];
  if (!*(_QWORD *)&v11)
    goto LABEL_48;
  v12 = *(_QWORD *)(v3 + 120);
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = *(_QWORD *)(v3 + 120);
    if (v12 >= *(_QWORD *)&v11)
      v14 = v12 % *(_QWORD *)&v11;
  }
  else
  {
    v14 = (*(_QWORD *)&v11 - 1) & v12;
  }
  v20 = *(uint64_t ****)(a1[11] + 8 * v14);
  if (v20)
  {
    v21 = *v20;
    if (*v20)
    {
      if (v13.u32[0] < 2uLL)
      {
        v22 = *(_QWORD *)&v11 - 1;
        while (1)
        {
          v27 = v21[1];
          if ((uint64_t *)v12 == v27)
          {
            if (*((unsigned __int8 *)v21 + 16) == *(unsigned __int8 *)(v3 + 16)
              && *((unsigned __int16 *)v21 + 12) == *(unsigned __int16 *)(v3 + 24)
              && v21[12] == *(uint64_t **)(v3 + 96))
            {
              v28 = v21[4];
              v29 = (char *)v21[5] - (char *)v28;
              v30 = *(const void **)(v3 + 32);
              if (v29 == *(_QWORD *)(v3 + 40) - (_QWORD)v30 && !memcmp(v28, v30, v29))
                goto LABEL_49;
            }
          }
          else if (((unint64_t)v27 & v22) != v14)
          {
            goto LABEL_48;
          }
          v21 = (uint64_t **)*v21;
          if (!v21)
            goto LABEL_49;
        }
      }
      do
      {
        v23 = (unint64_t)v21[1];
        if (v12 == v23)
        {
          if (*((unsigned __int8 *)v21 + 16) == *(unsigned __int8 *)(v3 + 16)
            && *((unsigned __int16 *)v21 + 12) == *(unsigned __int16 *)(v3 + 24)
            && v21[12] == *(uint64_t **)(v3 + 96))
          {
            v24 = v21[4];
            v25 = (char *)v21[5] - (char *)v24;
            v26 = *(const void **)(v3 + 32);
            if (v25 == *(_QWORD *)(v3 + 40) - (_QWORD)v26 && !memcmp(v24, v26, v25))
              break;
          }
        }
        else
        {
          if (v23 >= *(_QWORD *)&v11)
            v23 %= *(_QWORD *)&v11;
          if (v23 != v14)
            goto LABEL_48;
        }
        v21 = (uint64_t **)*v21;
      }
      while (v21);
    }
  }
  else
  {
LABEL_48:
    v21 = 0;
  }
LABEL_49:
  v31 = v21 != 0;
  if (v9)
  {
LABEL_52:
    v32 = (unint64_t *)&v9->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 - 1, v32));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_59:
  if (v2)
  {
    v35 = (unint64_t *)&v2->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v31;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, _QWORD *a2@<X0>, char ***a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  _QWORD *v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char **v49;
  char **v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char **v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  uint64_t **v76;
  _QWORD *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int16 v82[2];
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v78 = *(uint64_t **)(v15 + 32);
          if (v78)
          {
            v16 = a2[24];
            if (v16)
            {
              if (v16 >> 61)
                abort();
              v17 = v16;
              v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            v19 = (_QWORD *)v6[22];
            v77 = v6 + 23;
            if (v19 != v6 + 23)
            {
              v76 = (uint64_t **)(v6 + 29);
              v79 = v6;
              do
              {
                v21 = v19[4];
                v20 = (std::__shared_weak_count *)v19[5];
                v84 = v21;
                v85 = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v23 = __ldxr(p_shared_owners);
                  while (__stxr(v23 + 1, p_shared_owners));
                }
                v82[0] = *(_WORD *)(v21 + 168);
                v83 = *(_QWORD *)(v21 + 172);
                v24 = *(double *)(v21 + 600);
                v25 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(this);
                v27 = *(unsigned __int8 *)(v26 + 128);
                md::GeometryContext::transformConstantData((double *)&v80, v78, (unsigned __int8 *)v82, v27, v24, v25);
                v28 = *((_BYTE *)v19 + 48);
                v29 = (char *)v6[33];
                if (!v29)
                {
                  v30 = (char *)malloc_type_malloc(v6[32], 0x160B39uLL);
                  v31 = v30;
                  v32 = v76;
                  while (1)
                  {
                    v33 = *v32;
                    v34 = v32;
                    if (!*v32)
                      break;
                    while (1)
                    {
                      v32 = (uint64_t **)v33;
                      v35 = v33[4];
                      if ((unint64_t)v30 < v35)
                        break;
                      if (v35 >= (unint64_t)v30)
                        goto LABEL_43;
                      v33 = v32[1];
                      if (!v33)
                      {
                        v34 = v32 + 1;
                        goto LABEL_40;
                      }
                    }
                  }
LABEL_40:
                  v36 = (uint64_t *)operator new(0x28uLL);
                  v36[4] = (uint64_t)v31;
                  *v36 = 0;
                  v36[1] = 0;
                  v36[2] = (uint64_t)v32;
                  *v34 = v36;
                  v37 = *(_QWORD *)v79[28];
                  if (v37)
                  {
                    v79[28] = v37;
                    v36 = *v34;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v79[29], v36);
                  ++v79[30];
LABEL_43:
                  v6 = v79;
                  v29 = (char *)v79[33];
                  v38 = 400 * v79[31] - 400;
                  if ((v38 & 0x8000000000000000) == 0)
                  {
                    v39 = &v31[v38];
                    do
                    {
                      *(_QWORD *)v39 = v29;
                      v40 = v39 - 400;
                      v29 = v39;
                      v39 = v40;
                    }
                    while (v40 >= v31);
                    v29 = v40 + 400;
                  }
                  v79[33] = v29;
                }
                v6[33] = *(_QWORD *)v29;
                if (v20)
                {
                  v41 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v21, (uint64_t)v20, v28, (v27 - 1) < 3u, &v80);
                if (v20)
                {
                  v43 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                *(_QWORD *)v29 = &off_1E426F2C0;
                v45 = v85;
                *((_QWORD *)v29 + 48) = v84;
                *((_QWORD *)v29 + 49) = v45;
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                v49 = a3[1];
                v48 = (unint64_t)a3[2];
                if ((unint64_t)v49 < v48)
                {
                  *v49 = v29;
                  v50 = v49 + 1;
                  goto LABEL_83;
                }
                v51 = *a3;
                v52 = (char *)v49 - (char *)*a3;
                v53 = v52 >> 3;
                v54 = (v52 >> 3) + 1;
                if (v54 >> 61)
                  abort();
                v55 = v48 - (_QWORD)v51;
                if (v55 >> 2 > v54)
                  v54 = v55 >> 2;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                  v56 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  if (v56 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v57 = operator new(8 * v56);
                }
                else
                {
                  v57 = 0;
                }
                v58 = (char **)&v57[8 * v53];
                *v58 = v29;
                v50 = v58 + 1;
                if (v49 == v51)
                {
                  v51 = v49;
                  v6 = v79;
                }
                else
                {
                  v59 = (char *)(v49 - 1) - (char *)v51;
                  if (v59 < 0x58)
                  {
                    v6 = v79;
                    do
                    {
LABEL_79:
                      v66 = *--v49;
                      *--v58 = v66;
                    }
                    while (v49 != v51);
                    v51 = *a3;
                    goto LABEL_81;
                  }
                  v60 = (char *)v49 - &v57[v52];
                  v6 = v79;
                  if (v60 < 0x20)
                    goto LABEL_79;
                  v61 = (v59 >> 3) + 1;
                  v62 = &v57[8 * v53 - 16];
                  v63 = (__int128 *)(v49 - 2);
                  v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v65 = *v63;
                    *(v62 - 1) = *(v63 - 1);
                    *v62 = v65;
                    v62 -= 2;
                    v63 -= 2;
                    v64 -= 4;
                  }
                  while (v64);
                  v58 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  v49 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_79;
                }
LABEL_81:
                *a3 = v58;
                a3[1] = v50;
                a3[2] = (char **)&v57[8 * v56];
                if (v51)
                  operator delete(v51);
LABEL_83:
                a3[1] = v50;
                v67 = v81;
                if (!v81)
                  goto LABEL_87;
                v68 = (unint64_t *)&v81->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                else
                {
LABEL_87:
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (v72)
                {
LABEL_91:
                  v73 = (_QWORD *)v19[1];
                  if (!v73)
                    goto LABEL_97;
                  goto LABEL_92;
                }
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
                v73 = (_QWORD *)v19[1];
                if (!v73)
                {
                  do
                  {
LABEL_97:
                    v74 = (_QWORD *)v19[2];
                    v75 = *v74 == (_QWORD)v19;
                    v19 = v74;
                  }
                  while (!v75);
                  goto LABEL_29;
                }
                do
                {
LABEL_92:
                  v74 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
LABEL_29:
                v19 = v74;
              }
              while (v74 != v77);
            }
          }
        }
      }
    }
  }
}

void sub_19F296A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

_QWORD **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::VenueRenderLayer::renderablesWillEnterView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  md::VenueRenderLayer::_updateStyles(*a3, a3[1]);
}

void md::VenueRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  float v25;
  _QWORD *v26;
  unint64_t v27;
  float32x4_t *v28;
  double *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unint64_t v33;
  float64x2_t v34[8];

  v3 = *(uint64_t **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
  {
    v7 = 0;
    goto LABEL_48;
  }
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x4927EB92E562CC46;
    if (*(_QWORD *)&v4 <= 0x4927EB92E562CC46uLL)
      v6 = 0x4927EB92E562CC46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x4927EB92E562CC46;
  }
  v8 = *v3;
  v9 = *(_QWORD **)(v8 + 8 * v6);
  if (!v9)
    goto LABEL_25;
  v10 = (_QWORD *)*v9;
  if (!v10)
    goto LABEL_25;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v12 = v10[1];
      if (v12 == 0x4927EB92E562CC46)
      {
        if (v10[2] == 0x4927EB92E562CC46)
          goto LABEL_23;
      }
      else if ((v12 & (*(_QWORD *)&v4 - 1)) != v6)
      {
        goto LABEL_25;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v11 = v10[1];
    if (v11 == 0x4927EB92E562CC46)
      break;
    if (v11 >= *(_QWORD *)&v4)
      v11 %= *(_QWORD *)&v4;
    if (v11 != v6)
      goto LABEL_25;
LABEL_12:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_25;
  }
  if (v10[2] != 0x4927EB92E562CC46)
    goto LABEL_12;
LABEL_23:
  v13 = v10[5];
  if (*(_QWORD *)(v13 + 8) == 0x4927EB92E562CC46)
  {
    v7 = *(_QWORD *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
LABEL_26:
  if (v5.u32[0] > 1uLL)
  {
    v14 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v14 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v14 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v15 = *(_QWORD **)(v8 + 8 * v14);
  if (!v15)
    goto LABEL_48;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_48;
  if (v5.u32[0] < 2uLL)
  {
    v17 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v19 = v16[1];
      if (v19 == 0x1AF456233693CD46)
      {
        if (v16[2] == 0x1AF456233693CD46)
          goto LABEL_46;
      }
      else if ((v19 & v17) != v14)
      {
        goto LABEL_48;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v18 = v16[1];
    if (v18 != 0x1AF456233693CD46)
    {
      if (v18 >= *(_QWORD *)&v4)
        v18 %= *(_QWORD *)&v4;
      if (v18 != v14)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v16[2] != 0x1AF456233693CD46)
    {
LABEL_35:
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v20 = v16[5];
  if (*(_QWORD *)(v20 + 8) == 0x1AF456233693CD46)
  {
    v21 = *(double **)(v20 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v21 = 0;
LABEL_49:
  v22 = *a2;
  v23 = a2[1];
  if (*a2 != v23)
  {
    do
    {
      v24 = *v22;
      v25 = v21[471] * v21[173] / (v21[171] * (*(double *)(*v22 + 72) - *(double *)(*v22 + 56)));
      *(float *)(v24 + 368) = v25;
      v26 = *(_QWORD **)(v24 + 216);
      v27 = v26[1];
      if (v27)
        v28 = (float32x4_t *)v26[9];
      else
        v28 = 0;
      if (v7)
        v29 = (double *)(v7 + 144);
      else
        v29 = v21 + 101;
      gm::operator*<double,4,4,4>(v34[0].f64, v29, (double *)(v24 + 88));
      v30 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[6]), v34[7]);
      v31 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[4]), v34[5]);
      v32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[2]), v34[3]);
      *v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34[0]), v34[1]);
      v28[1] = v32;
      v28[2] = v31;
      v28[3] = v30;
      v28[4].i32[0] = *(_DWORD *)(v24 + 368);
      if (v27)
      {
        v33 = v26[8];
        if (v33 <= v27)
          v33 = v27;
        v26[7] = 0;
        v26[8] = v33;
      }
      ++v22;
    }
    while (v22 != v23);
  }
}

void md::VenueRenderLayer::_updateStyles(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      v4 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v3 + 384) + 48))(*(_QWORD *)(*(_QWORD *)v3 + 384));
      v5 = *v4;
      v6 = v4[1];
      if (*v4 != v6)
      {
        do
        {
          v7 = *(id *)(v5 + 8);
          objc_msgSend(v7, "setNeedsTextureUpdate");

          v5 += 24;
        }
        while (v5 != v6);
      }
      v3 += 8;
    }
    while (v3 != a2);
  }
}

void sub_19F2970D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::renderableDidChange()
{
  return 0;
}

void geo::Pool<md::MapTileDataRenderable<md::VenueTileData>>::disposeElements(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28 = &v29;
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = &v29;
      v5 = &v29;
      if (v29)
      {
        v6 = v29;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t **)v6;
            v7 = v6[4];
            if ((unint64_t)v2 >= v7)
              break;
            v6 = *v5;
            v4 = v5;
            if (!*v5)
              goto LABEL_12;
          }
          if (v7 >= (unint64_t)v2)
            break;
          v6 = v5[1];
          if (!v6)
          {
            v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *v4 = v8;
        if (*v28)
        {
          v28 = (uint64_t **)*v28;
          v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        v3 = ++v30;
        v2 = *(_QWORD **)(a1 + 40);
      }
      v2 = (_QWORD *)*v2;
      *(_QWORD *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)a1;
  v11 = (_QWORD *)(a1 + 8);
  v12 = v3 == *(_QWORD *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11)
      goto LABEL_47;
    goto LABEL_49;
  }
  v14 = 1;
  do
  {
    if (v14)
    {
      v15 = 0;
      v16 = v10[4];
      do
      {
        v17 = (void (***)(_QWORD))(v16 + 400 * v15);
        v18 = v29;
        if (!v29)
          goto LABEL_28;
        v19 = &v29;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[4];
          v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            v23 = (uint64_t **)v20;
            v19 = (uint64_t **)v20;
          }
          v18 = *v23;
        }
        while (v18);
        if (v19 == &v29)
          goto LABEL_28;
        if (v22 < (unint64_t)v17)
          v20 = (uint64_t *)v21;
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          v9 = *(_QWORD *)(a1 + 24);
        }
        ++v15;
        v14 = v9;
      }
      while (v15 < v9);
    }
    v24 = (_QWORD *)v10[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v10[2];
        v12 = *v25 == (_QWORD)v10;
        v10 = v25;
      }
      while (!v12);
    }
    v10 = v25;
  }
  while (v25 != v11);
  v10 = *(_QWORD **)a1;
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v12 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v12);
      }
      v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_19F297358(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t md::LabelRenderLayer::clearScene(md::LabelRenderLayer *this)
{
  md::LabelManager *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (md::LabelManager *)*((_QWORD *)this + 6);
  if (v2)
  {
    v6[0] = &off_1E42C9A28;
    v6[1] = v2;
    v6[2] = 0;
    v7 = v6;
    md::LabelManager::queueCommand(v2, 19, 1, v6);
    v3 = v7;
    if (v7 == v6)
    {
      v4 = 4;
      v3 = v6;
      goto LABEL_6;
    }
    if (v7)
    {
      v4 = 5;
LABEL_6:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
  }
  return md::LabelCachingStore<geo::QuadTile,std::shared_ptr<md::StandardLabelMapTile>,std::weak_ptr<md::StandardLabelMapTile>,geo::QuadTileHash,std::equal_to<geo::QuadTile>>::clear((uint64_t)this + 56);
}

void sub_19F297420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t md::VenueTileData::polygonGroups(md::VenueTileData *this)
{
  return (uint64_t)this + 752;
}

_QWORD *md::GridRenderLayer::layout(md::GridRenderLayer *this, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int8x8_t v48;
  uint64_t v49;
  uint64_t *v50;
  int8x8_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  float v118;
  int v119;
  float v120;
  BOOL v121;
  float v122;
  BOOL v123;
  float v124;
  float v125;
  unsigned int v126;
  uint64_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  long double v134;
  double v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  unsigned __int16 *v140;
  unsigned __int16 *v141;
  unsigned __int16 *v142;
  uint64_t v143;
  BOOL v144;
  _QWORD *v145;
  unsigned __int16 *v146;
  int8x8_t v147;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  unint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  unsigned __int16 *v178;
  unsigned __int16 *v179;
  unsigned __int16 *v180;
  unsigned __int16 *v181;
  unsigned __int16 *v182;
  unsigned __int16 *v183;
  unsigned __int16 *v184;
  unsigned __int16 *v185;
  int v186;
  _BOOL4 v187;
  BOOL v188;
  unsigned __int16 *v189;
  int v190;
  unsigned __int16 *v191;
  unsigned __int16 *v192;
  unsigned __int16 *v193;
  unsigned __int16 *v194;
  unsigned __int16 *v195;
  unsigned __int16 *v196;
  uint64_t v197;
  _BOOL4 v198;
  BOOL v199;
  unsigned __int16 *v200;
  uint64_t v201;
  _BOOL4 v202;
  unsigned __int8 v203;
  int v204;
  int v205;
  _BOOL4 v206;
  _BOOL4 v207;
  uint64_t v208;
  NSObject *v209;
  uint64_t *v210;
  int8x8_t v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  BOOL v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  char *v231;
  uint64_t *v232;
  uint64_t *v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  unsigned __int8 v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  float64_t v272;
  float64_t *v273;
  float64_t v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  float64x2_t v281;
  uint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  char *v307;
  std::__shared_weak_count *v308;
  uint64_t v309;
  float64x2_t v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  float64x2_t v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  uint64_t v332;
  int v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t *v341;
  char *v342;
  char *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  char *v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint8x8_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  uint64_t **v371;
  uint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  float v376;
  float v377;
  uint64_t *v378;
  _BOOL8 v379;
  unint64_t v380;
  unint64_t v381;
  size_t prime;
  unint64_t v383;
  uint8x8_t v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD *v387;
  unint64_t v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  float64_t v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  float64_t v400;
  unint64_t *v401;
  unint64_t v402;
  int v403;
  double v404;
  uint64_t v405;
  int v406;
  int v407;
  double v408;
  double v409;
  float v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  std::__shared_weak_count *v417;
  std::__shared_weak_count_vtbl *v418;
  void (__cdecl *v419)(std::__shared_weak_count *__hidden);
  float32x4_t *on_zero_shared_weak;
  double *v421;
  double v422;
  double v423;
  double v424;
  float64_t v425;
  double v426;
  double v427;
  double v428;
  float64_t v429;
  float64_t v430;
  double v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  unsigned int v435;
  double v436;
  float v437;
  _QWORD *shared_weak_owners;
  unint64_t v439;
  uint64_t v440;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  _QWORD *v447;
  int v448;
  int v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  float64x2_t *v453;
  float64x2_t v454;
  double v455;
  double v456;
  double v457;
  void *v458;
  float v459;
  long double v460;
  double v461;
  uint64_t v462;
  double v463;
  float64x2_t v464;
  std::__shared_weak_count *v465;
  uint64_t shared_owners;
  std::__shared_weak_count_vtbl *v467;
  double v468;
  _DWORD *v469;
  std::__shared_weak_count *v470;
  uint64_t v471;
  std::__shared_weak_count_vtbl *v472;
  float *v473;
  float v474;
  std::__shared_weak_count *v475;
  uint64_t v476;
  std::__shared_weak_count_vtbl *v477;
  float32x4_t *v478;
  std::__shared_weak_count *v479;
  uint64_t v480;
  std::__shared_weak_count_vtbl *v481;
  float32x4_t *v482;
  unint64_t v483;
  _QWORD *v484;
  _QWORD *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  _QWORD *result;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  double v495;
  double v496;
  uint64_t v497;
  ggl::CommandBuffer *v498;
  uint64_t v499;
  uint64_t *v500;
  _BOOL4 v501;
  uint64_t *v502;
  float32x4_t v503;
  float32x4_t v504;
  md::GridRenderLayer *v505;
  md::GridRenderLayer *v506;
  int v507;
  _QWORD *v508;
  float32x4_t v509;
  float32x4_t v510;
  _DWORD *v511;
  float32x4_t v512;
  float32x4_t v513;
  int v514;
  uint64_t v515;
  float64x2_t v516;
  float32x4_t v517;
  float32x4_t v518;
  uint64_t v519;
  uint64_t v520;
  float32x4_t *v521;
  uint64_t v522;
  uint64_t v523;
  _DWORD *v524;
  float64x2_t v525[8];
  uint64_t v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  float64x2_t v534;
  __int128 v535;
  _BYTE v536[24];
  __int128 v537;
  __int128 v538;
  __int128 v539;
  uint64_t v540;
  uint64_t v541;
  __int128 v542;
  __int128 v543;
  uint64_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  _BYTE v548[32];
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  _WORD v552[2];
  uint64_t v553;
  uint64_t v554;
  _BYTE v555[24];
  _BYTE v556[56];
  _BYTE v557[40];
  uint64_t v558;
  std::__shared_weak_count *v559;
  std::__shared_weak_count *v560;
  uint64_t v561;
  uint64_t v562;
  __int16 v563;
  std::__shared_weak_count_vtbl *v564;
  _QWORD v565[3];
  _QWORD *v566;
  _QWORD v567[3];
  _QWORD *v568;
  _QWORD v569[3];
  _QWORD *v570;
  _BYTE buf[80];
  float64x2_t v572;
  float64x2_t v573;
  __int128 v574;
  uint64_t v575;

  v575 = *MEMORY[0x1E0C80C00];
  v567[0] = &off_1E42CC2F0;
  v567[1] = a2;
  v568 = v567;
  v565[0] = &off_1E42CC338;
  v565[1] = a2;
  v566 = v565;
  v570 = v569;
  v569[0] = &off_1E42CC338;
  v569[1] = a2;
  std::__function::__func<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::GridRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v567);
  v4 = v566;
  if (v566 == v565)
  {
    v5 = 4;
    v4 = v565;
  }
  else
  {
    if (!v566)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v568;
  if (v568 == v567)
  {
    v7 = 4;
    v6 = v567;
    goto LABEL_10;
  }
  if (v568)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = (_QWORD *)*((_QWORD *)this + 6);
  v9 = v8[35];
  v10 = (uint64_t *)v8[42];
  if ((uint64_t *)v9 != v10)
  {
    v505 = this;
    v11 = 0;
    v12 = 0;
    v13 = v8[40];
    v14 = v8 + 37;
    while (v12 != v13)
    {
      v15 = *(_QWORD *)(v9 + 64);
      v16 = std::__hash_table<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>,true>,std::__unordered_map_equal<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::equal_to<md::GridRenderResources::TileMeshEntry>,md::GridRenderResources::TileMeshEntryHash,true>,std::allocator<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>>>::find<md::GridRenderResources::TileMeshEntry>(v8 + 37, (unsigned __int8 *)(v9 + 16));
      if (v16)
      {
        v17 = (int8x8_t)v8[38];
        v18 = v16[1];
        v19 = (uint8x8_t)vcnt_s8(v17);
        v19.i16[0] = vaddlv_u8(v19);
        if (v19.u32[0] > 1uLL)
        {
          if (v18 >= *(_QWORD *)&v17)
            v18 %= *(_QWORD *)&v17;
        }
        else
        {
          v18 &= *(_QWORD *)&v17 - 1;
        }
        v20 = *(uint64_t **)(*v14 + 8 * v18);
        do
        {
          v21 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20 != v16);
        if (v21 == v8 + 39)
          goto LABEL_34;
        v22 = v21[1];
        if (v19.u32[0] > 1uLL)
        {
          if (v22 >= *(_QWORD *)&v17)
            v22 %= *(_QWORD *)&v17;
        }
        else
        {
          v22 &= *(_QWORD *)&v17 - 1;
        }
        if (v22 != v18)
        {
LABEL_34:
          if (!*v16)
            goto LABEL_35;
          v23 = *(_QWORD *)(*v16 + 8);
          if (v19.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&v17)
              v23 %= *(_QWORD *)&v17;
          }
          else
          {
            v23 &= *(_QWORD *)&v17 - 1;
          }
          if (v23 != v18)
LABEL_35:
            *(_QWORD *)(*v14 + 8 * v18) = 0;
        }
        v24 = *v16;
        if (*v16)
        {
          v25 = *(_QWORD *)(v24 + 8);
          if (v19.u32[0] > 1uLL)
          {
            if (v25 >= *(_QWORD *)&v17)
              v25 %= *(_QWORD *)&v17;
          }
          else
          {
            v25 &= *(_QWORD *)&v17 - 1;
          }
          if (v25 != v18)
          {
            *(_QWORD *)(*v14 + 8 * v25) = v21;
            v24 = *v16;
          }
        }
        *v21 = v24;
        --v8[40];
        operator delete(v16);
        v10 = (uint64_t *)v8[42];
      }
      v11 += v15;
      v9 = *(_QWORD *)(v9 + 8);
      ++v12;
      if ((uint64_t *)v9 == v10)
        goto LABEL_44;
    }
    v10 = (uint64_t *)v9;
LABEL_44:
    v26 = (uint64_t *)v8[35];
    this = v505;
    if (v26 != v10)
    {
      v27 = *v10;
      v28 = *v26;
      *(_QWORD *)(v28 + 8) = *(_QWORD *)(*v10 + 8);
      **(_QWORD **)(v27 + 8) = v28;
      do
      {
        v29 = (uint64_t *)v26[1];
        --v8[36];
        v30 = (std::__shared_weak_count *)v26[7];
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        operator delete(v26);
        v26 = v29;
      }
      while (v29 != v10);
    }
    v33 = v8[43];
    v121 = v33 >= v11;
    v34 = v33 - v11;
    if (!v121)
      v34 = 0;
    v8[43] = v34;
  }
  v8[42] = v8 + 34;
  v35.n128_f32[0] = md::LayoutContext::frameState((md::LayoutContext *)a2);
  if (*(unsigned __int8 *)(v36 + 128) - 1 <= 2)
  {
    v37 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
    v38 = v37[3];
    v39 = v37[4];
    v40 = v39 - v38;
    if (v39 == v38)
      goto LABEL_66;
    v41 = 0;
    v42 = v40 >> 3;
    while (1)
    {
      v43 = *(unsigned __int8 **)(v38 + 8 * v41);
      if (*v43 == *((unsigned __int8 *)this + 57))
      {
        v44 = *((_QWORD *)v43 + 1);
        v45 = v37[15];
        if (v44 < (v37[16] - v45) >> 3)
          break;
      }
      if (++v41 >= v42)
        goto LABEL_66;
    }
    v46 = *(_QWORD *)(v45 + 8 * v44);
    if (!v46)
LABEL_66:
      v498 = 0;
    else
      v498 = *(ggl::CommandBuffer **)(*(_QWORD *)(v46 + 24) + 8 * *((unsigned __int8 *)this + 58));
    v50 = a2[1];
    v51 = (int8x8_t)v50[1];
    if (!*(_QWORD *)&v51)
    {
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      goto LABEL_253;
    }
    v35.n128_u64[0] = (unint64_t)vcnt_s8(v51);
    v35.n128_u16[0] = vaddlv_u8((uint8x8_t)v35.n128_u64[0]);
    if (v35.n128_u32[0] > 1uLL)
    {
      v52 = 0x336A901A15BB7353;
      if (*(_QWORD *)&v51 <= 0x336A901A15BB7353uLL)
        v52 = 0x336A901A15BB7353uLL % *(_QWORD *)&v51;
    }
    else
    {
      v52 = (*(_QWORD *)&v51 - 1) & 0x336A901A15BB7353;
    }
    v62 = *v50;
    v63 = *(_QWORD **)(*v50 + 8 * v52);
    if (!v63)
      goto LABEL_132;
    v64 = (_QWORD *)*v63;
    if (!v64)
      goto LABEL_132;
    if (v35.n128_u32[0] < 2uLL)
    {
      while (1)
      {
        v66 = v64[1];
        if (v66 == 0x336A901A15BB7353)
        {
          if (v64[2] == 0x336A901A15BB7353)
            goto LABEL_130;
        }
        else if ((v66 & (*(_QWORD *)&v51 - 1)) != v52)
        {
          goto LABEL_132;
        }
        v64 = (_QWORD *)*v64;
        if (!v64)
          goto LABEL_132;
      }
    }
    while (1)
    {
      v65 = v64[1];
      if (v65 == 0x336A901A15BB7353)
      {
        if (v64[2] == 0x336A901A15BB7353)
        {
LABEL_130:
          v73 = v64[5];
          if (*(_QWORD *)(v73 + 8) == 0x336A901A15BB7353)
          {
            v55 = *(_DWORD **)(v73 + 32);
            goto LABEL_133;
          }
LABEL_132:
          v55 = 0;
LABEL_133:
          if (v35.n128_u32[0] > 1uLL)
          {
            v74 = 0xE42D19AFCA302E68;
            if (*(_QWORD *)&v51 <= 0xE42D19AFCA302E68)
              v74 = 0xE42D19AFCA302E68 % *(_QWORD *)&v51;
          }
          else
          {
            v74 = (*(_QWORD *)&v51 - 1) & 0xE42D19AFCA302E68;
          }
          v75 = *(_QWORD **)(v62 + 8 * v74);
          if (!v75)
            goto LABEL_184;
          v76 = (_QWORD *)*v75;
          if (!v76)
            goto LABEL_184;
          if (v35.n128_u32[0] < 2uLL)
          {
            while (1)
            {
              v78 = v76[1];
              if (v78 == 0xE42D19AFCA302E68)
              {
                if (v76[2] == 0xE42D19AFCA302E68)
                  goto LABEL_182;
              }
              else if ((v78 & (*(_QWORD *)&v51 - 1)) != v74)
              {
                goto LABEL_184;
              }
              v76 = (_QWORD *)*v76;
              if (!v76)
                goto LABEL_184;
            }
          }
          while (2)
          {
            v77 = v76[1];
            if (v77 != 0xE42D19AFCA302E68)
            {
              if (v77 >= *(_QWORD *)&v51)
                v77 %= *(_QWORD *)&v51;
              if (v77 != v74)
                goto LABEL_184;
              goto LABEL_142;
            }
            if (v76[2] != 0xE42D19AFCA302E68)
            {
LABEL_142:
              v76 = (_QWORD *)*v76;
              if (!v76)
                goto LABEL_184;
              continue;
            }
            break;
          }
LABEL_182:
          v88 = v76[5];
          if (*(_QWORD *)(v88 + 8) == 0xE42D19AFCA302E68)
          {
            v54 = *(_QWORD *)(v88 + 32);
            goto LABEL_185;
          }
LABEL_184:
          v54 = 0;
LABEL_185:
          if (v35.n128_u32[0] > 1uLL)
          {
            v89 = 0x1AF456233693CD46;
            if (*(_QWORD *)&v51 <= 0x1AF456233693CD46uLL)
              v89 = 0x1AF456233693CD46uLL % *(_QWORD *)&v51;
          }
          else
          {
            v89 = (*(_QWORD *)&v51 - 1) & 0x1AF456233693CD46;
          }
          v90 = *(_QWORD **)(v62 + 8 * v89);
          if (!v90)
            goto LABEL_207;
          v91 = (_QWORD *)*v90;
          if (!v91)
            goto LABEL_207;
          if (v35.n128_u32[0] < 2uLL)
          {
            while (1)
            {
              v93 = v91[1];
              if (v93 == 0x1AF456233693CD46)
              {
                if (v91[2] == 0x1AF456233693CD46)
                  goto LABEL_205;
              }
              else if ((v93 & (*(_QWORD *)&v51 - 1)) != v89)
              {
                goto LABEL_207;
              }
              v91 = (_QWORD *)*v91;
              if (!v91)
                goto LABEL_207;
            }
          }
          while (2)
          {
            v92 = v91[1];
            if (v92 != 0x1AF456233693CD46)
            {
              if (v92 >= *(_QWORD *)&v51)
                v92 %= *(_QWORD *)&v51;
              if (v92 != v89)
                goto LABEL_207;
              goto LABEL_194;
            }
            if (v91[2] != 0x1AF456233693CD46)
            {
LABEL_194:
              v91 = (_QWORD *)*v91;
              if (!v91)
                goto LABEL_207;
              continue;
            }
            break;
          }
LABEL_205:
          v94 = v91[5];
          if (*(_QWORD *)(v94 + 8) == 0x1AF456233693CD46)
          {
            v56 = *(_QWORD *)(v94 + 32);
            goto LABEL_208;
          }
LABEL_207:
          v56 = 0;
LABEL_208:
          if (v35.n128_u32[0] > 1uLL)
          {
            v95 = 0x99BED48DEFBBD82BLL;
            if (*(_QWORD *)&v51 <= 0x99BED48DEFBBD82BLL)
              v95 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v51;
          }
          else
          {
            v95 = (*(_QWORD *)&v51 - 1) & 0x99BED48DEFBBD82BLL;
          }
          v96 = *(_QWORD **)(v62 + 8 * v95);
          if (!v96)
            goto LABEL_230;
          v97 = (_QWORD *)*v96;
          if (!v97)
            goto LABEL_230;
          if (v35.n128_u32[0] < 2uLL)
          {
            while (1)
            {
              v99 = v97[1];
              if (v99 == 0x99BED48DEFBBD82BLL)
              {
                if (v97[2] == 0x99BED48DEFBBD82BLL)
                  goto LABEL_228;
              }
              else if ((v99 & (*(_QWORD *)&v51 - 1)) != v95)
              {
                goto LABEL_230;
              }
              v97 = (_QWORD *)*v97;
              if (!v97)
                goto LABEL_230;
            }
          }
          while (2)
          {
            v98 = v97[1];
            if (v98 != 0x99BED48DEFBBD82BLL)
            {
              if (v98 >= *(_QWORD *)&v51)
                v98 %= *(_QWORD *)&v51;
              if (v98 != v95)
                goto LABEL_230;
              goto LABEL_217;
            }
            if (v97[2] != 0x99BED48DEFBBD82BLL)
            {
LABEL_217:
              v97 = (_QWORD *)*v97;
              if (!v97)
                goto LABEL_230;
              continue;
            }
            break;
          }
LABEL_228:
          v100 = v97[5];
          if (*(_QWORD *)(v100 + 8) == 0x99BED48DEFBBD82BLL)
          {
            v53 = *(_QWORD *)(v100 + 32);
            goto LABEL_231;
          }
LABEL_230:
          v53 = 0;
LABEL_231:
          if (v35.n128_u32[0] > 1uLL)
          {
            v101 = 0x3070CB6B3C7F21D3;
            if (*(_QWORD *)&v51 <= 0x3070CB6B3C7F21D3uLL)
              v101 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v51;
          }
          else
          {
            v101 = (*(_QWORD *)&v51 - 1) & 0x3070CB6B3C7F21D3;
          }
          v102 = *(_QWORD **)(v62 + 8 * v101);
          if (!v102)
            goto LABEL_253;
          v103 = (_QWORD *)*v102;
          if (!v103)
            goto LABEL_253;
          if (v35.n128_u32[0] < 2uLL)
          {
            v104 = *(_QWORD *)&v51 - 1;
            while (1)
            {
              v106 = v103[1];
              if (v106 == 0x3070CB6B3C7F21D3)
              {
                if (v103[2] == 0x3070CB6B3C7F21D3)
                  goto LABEL_251;
              }
              else if ((v106 & v104) != v101)
              {
                goto LABEL_253;
              }
              v103 = (_QWORD *)*v103;
              if (!v103)
                goto LABEL_253;
            }
          }
          while (1)
          {
            v105 = v103[1];
            if (v105 == 0x3070CB6B3C7F21D3)
            {
              if (v103[2] == 0x3070CB6B3C7F21D3)
              {
LABEL_251:
                v107 = v103[5];
                if (*(_QWORD *)(v107 + 8) == 0x3070CB6B3C7F21D3)
                {
                  v494 = *(_QWORD *)(v107 + 32);
LABEL_254:
                  v511 = v55;
                  if (v55 && v54 && v56 && v53)
                  {
                    v108 = *((_QWORD *)this + 6);
                    v109 = *(_QWORD **)(v108 + 16);
                    v110 = v109[1];
                    if (v110)
                      v111 = (_DWORD *)v109[9];
                    else
                      v111 = 0;
                    v111[16] = *v55;
                    v111[17] = v55[1];
                    v111[18] = v55[2];
                    v111[19] = v55[3];
                    if (v111 && v110)
                    {
                      if (v109[8] > v110)
                        v110 = v109[8];
                      v109[7] = 0;
                      v109[8] = v110;
                    }
                    v112 = *(_QWORD *)(v108 + 32);
                    *(_OWORD *)v536 = 0uLL;
                    v113 = *(_QWORD *)(v112 + 8);
                    *(_QWORD *)&v114 = 0;
                    *((_QWORD *)&v114 + 1) = v112;
                    if (v113)
                      v115 = *(_QWORD *)(v112 + 72);
                    else
                      v115 = 0;
                    v116 = 0;
                    *(_OWORD *)v536 = v114;
                    *(_QWORD *)&v536[16] = 0;
                    *(_QWORD *)&v537 = v113;
                    *(_QWORD *)&v538 = v115;
                    v117 = 1;
                    WORD4(v537) = 1;
                    v499 = v56;
                    v118 = *(double *)(v56 + 32);
                    do
                    {
                      v119 = v117;
                      v117 *= 8;
                      v120 = (float)v117;
                      v121 = (float)v117 >= v118 || v116++ >= 0xF;
                    }
                    while (!v121);
                    v122 = (float)(fminf(fmaxf((float)v119, v118), v120) - (float)v119) / (float)(v120 - (float)v119);
                    v123 = (float)v119 <= v118;
                    v124 = 0.0;
                    if (v123)
                      v124 = 1.0;
                    if ((float)v119 != v120)
                      v124 = v122;
                    v125 = (float)(v124 * v124) * (float)((float)(v124 * -2.0) + 3.0);
                    v35.n128_f64[0] = log2((double)v119);
                    if (v35.n128_f64[0] >= 7)
                      v126 = (v35.n128_f64[0] - 6) / 3;
                    else
                      v126 = 0;
                    *(float *)(v115 + 24) = v125;
                    *(_DWORD *)v115 = v511[4];
                    *(_DWORD *)(v115 + 4) = v511[5];
                    *(_DWORD *)(v115 + 8) = v511[6];
                    *(_DWORD *)(v115 + 12) = v511[7];
                    v127 = v499;
                    v128 = *(double *)(v499 + 40);
                    v130 = *(double *)(v499 + 368);
                    v129 = *(double *)(v499 + 376);
                    if (v129 >= v130)
                    {
                      v35.n128_u64[0] = *(_QWORD *)(v499 + 456);
                    }
                    else
                    {
                      v131 = v129 * v130;
                      v132 = v129 / v130;
                      if (v131 <= 0.0)
                        v133 = 1.0;
                      else
                        v133 = v132;
                      v134 = tan(*(double *)(v499 + 456) * 0.5);
                      v35.n128_f64[0] = atan(v133 * v134);
                      v127 = v499;
                      v35.n128_f64[0] = v35.n128_f64[0] + v35.n128_f64[0];
                    }
                    v135 = v35.n128_f64[0] * -0.5 + 1.48352986;
                    v136 = 0;
                    if (v135 < v128)
                      v136 = v511[15];
                    *(_DWORD *)(v115 + 48) = v136;
                    v137 = *(unsigned __int8 *)(v108 + 353);
                    v138 = *(unsigned __int8 *)(v108 + 352);
                    v35.n128_u64[0] = 0;
                    v495 = 0.0;
                    if (*(_BYTE *)(v127 + 3776))
                    {
                      if (*((_BYTE *)v511 + 48))
                      {
                        v35.n128_u64[0] = *((_QWORD *)v511 + 5);
                        v495 = v35.n128_f64[0];
                      }
                      v139 = 8;
                    }
                    else
                    {
                      v139 = 1;
                    }
                    v140 = *(unsigned __int16 **)(*(_QWORD *)v53 + 112);
                    v141 = *(unsigned __int16 **)(*(_QWORD *)v53 + 120);
                    v506 = this;
                    v142 = v140;
                    if (v140 != v141)
                    {
                      while (*v142 != v139)
                      {
                        v142 += 56;
                        if (v142 == v141)
                        {
                          v142 = *(unsigned __int16 **)(*(_QWORD *)v53 + 120);
                          break;
                        }
                      }
                      if (v140 != v141)
                      {
                        while (*v140 != 1)
                        {
                          v140 += 56;
                          if (v140 == v141)
                          {
                            v140 = *(unsigned __int16 **)(*(_QWORD *)v53 + 120);
                            break;
                          }
                        }
                      }
                    }
                    v143 = *((_QWORD *)v142 + 11);
                    if (v143)
                      v144 = v143 == *((_QWORD *)v140 + 5);
                    else
                      v144 = 0;
                    if (!v144 || *((_BYTE *)v511 + 56))
                      goto LABEL_473;
                    v145 = v140 + 8;
                    v146 = v142 + 40;
                    while (1)
                    {
                      v146 = *(unsigned __int16 **)v146;
                      if (!v146)
                        break;
                      if (!std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(v145, (unsigned __int8 *)v146 + 16))goto LABEL_473;
                    }
                    v147 = (int8x8_t)v50[1];
                    v35.n128_u64[0] = (unint64_t)vcnt_s8(v147);
                    v35.n128_u16[0] = vaddlv_u8((uint8x8_t)v35.n128_u64[0]);
                    if (v35.n128_u32[0] > 1uLL)
                    {
                      v148 = 0xE42D19AFCA302E68;
                      if (*(_QWORD *)&v147 <= 0xE42D19AFCA302E68)
                        v148 = 0xE42D19AFCA302E68 % *(_QWORD *)&v147;
                    }
                    else
                    {
                      v148 = (*(_QWORD *)&v147 - 1) & 0xE42D19AFCA302E68;
                    }
                    v149 = *v50;
                    v150 = *(_QWORD **)(*v50 + 8 * v148);
                    if (!v150)
                      goto LABEL_353;
                    v151 = (_QWORD *)*v150;
                    if (!v151)
                      goto LABEL_353;
                    if (v35.n128_u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v153 = v151[1];
                        if (v153 == 0xE42D19AFCA302E68)
                        {
                          if (v151[2] == 0xE42D19AFCA302E68)
                            goto LABEL_351;
                        }
                        else if ((v153 & (*(_QWORD *)&v147 - 1)) != v148)
                        {
                          goto LABEL_353;
                        }
                        v151 = (_QWORD *)*v151;
                        if (!v151)
                          goto LABEL_353;
                      }
                    }
                    while (2)
                    {
                      v152 = v151[1];
                      if (v152 != 0xE42D19AFCA302E68)
                      {
                        if (v152 >= *(_QWORD *)&v147)
                          v152 %= *(_QWORD *)&v147;
                        if (v152 != v148)
                          goto LABEL_353;
                        goto LABEL_322;
                      }
                      if (v151[2] != 0xE42D19AFCA302E68)
                      {
LABEL_322:
                        v151 = (_QWORD *)*v151;
                        if (!v151)
                          goto LABEL_353;
                        continue;
                      }
                      break;
                    }
LABEL_351:
                    v158 = v151[5];
                    if (*(_QWORD *)(v158 + 8) == 0xE42D19AFCA302E68)
                    {
                      v159 = *(uint64_t **)(v158 + 32);
                      goto LABEL_354;
                    }
LABEL_353:
                    v159 = 0;
LABEL_354:
                    if (v35.n128_u32[0] > 1uLL)
                    {
                      v160 = 0x99BED48DEFBBD82BLL;
                      if (*(_QWORD *)&v147 <= 0x99BED48DEFBBD82BLL)
                        v160 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v147;
                    }
                    else
                    {
                      v160 = (*(_QWORD *)&v147 - 1) & 0x99BED48DEFBBD82BLL;
                    }
                    v161 = *(_QWORD **)(v149 + 8 * v160);
                    if (!v161)
                      goto LABEL_376;
                    v162 = (_QWORD *)*v161;
                    if (!v162)
                      goto LABEL_376;
                    if (v35.n128_u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v164 = v162[1];
                        if (v164 == 0x99BED48DEFBBD82BLL)
                        {
                          if (v162[2] == 0x99BED48DEFBBD82BLL)
                            goto LABEL_374;
                        }
                        else if ((v164 & (*(_QWORD *)&v147 - 1)) != v160)
                        {
                          goto LABEL_376;
                        }
                        v162 = (_QWORD *)*v162;
                        if (!v162)
                          goto LABEL_376;
                      }
                    }
                    while (2)
                    {
                      v163 = v162[1];
                      if (v163 != 0x99BED48DEFBBD82BLL)
                      {
                        if (v163 >= *(_QWORD *)&v147)
                          v163 %= *(_QWORD *)&v147;
                        if (v163 != v160)
                          goto LABEL_376;
                        goto LABEL_363;
                      }
                      if (v162[2] != 0x99BED48DEFBBD82BLL)
                      {
LABEL_363:
                        v162 = (_QWORD *)*v162;
                        if (!v162)
                          goto LABEL_376;
                        continue;
                      }
                      break;
                    }
LABEL_374:
                    v165 = v162[5];
                    if (*(_QWORD *)(v165 + 8) == 0x99BED48DEFBBD82BLL)
                    {
                      v166 = *(uint64_t **)(v165 + 32);
                      goto LABEL_377;
                    }
LABEL_376:
                    v166 = 0;
LABEL_377:
                    if (v35.n128_u32[0] > 1uLL)
                    {
                      v167 = 0xD2404CDD1F9A6950;
                      if (*(_QWORD *)&v147 <= 0xD2404CDD1F9A6950)
                        v167 = 0xD2404CDD1F9A6950 % *(_QWORD *)&v147;
                    }
                    else
                    {
                      v167 = (*(_QWORD *)&v147 - 1) & 0xD2404CDD1F9A6950;
                    }
                    v168 = *(_QWORD **)(v149 + 8 * v167);
                    if (!v168)
                      goto LABEL_399;
                    v169 = (_QWORD *)*v168;
                    if (!v169)
                      goto LABEL_399;
                    if (v35.n128_u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v171 = v169[1];
                        if (v171 == 0xD2404CDD1F9A6950)
                        {
                          if (v169[2] == 0xD2404CDD1F9A6950)
                            goto LABEL_397;
                        }
                        else if ((v171 & (*(_QWORD *)&v147 - 1)) != v167)
                        {
                          goto LABEL_399;
                        }
                        v169 = (_QWORD *)*v169;
                        if (!v169)
                          goto LABEL_399;
                      }
                    }
                    while (2)
                    {
                      v170 = v169[1];
                      if (v170 != 0xD2404CDD1F9A6950)
                      {
                        if (v170 >= *(_QWORD *)&v147)
                          v170 %= *(_QWORD *)&v147;
                        if (v170 != v167)
                          goto LABEL_399;
                        goto LABEL_386;
                      }
                      if (v169[2] != 0xD2404CDD1F9A6950)
                      {
LABEL_386:
                        v169 = (_QWORD *)*v169;
                        if (!v169)
                          goto LABEL_399;
                        continue;
                      }
                      break;
                    }
LABEL_397:
                    v172 = v169[5];
                    if (*(_QWORD *)(v172 + 8) == 0xD2404CDD1F9A6950)
                    {
                      v173 = *(_QWORD *)(v172 + 32);
                      goto LABEL_400;
                    }
LABEL_399:
                    v173 = 0;
LABEL_400:
                    if (v35.n128_u32[0] >= 2uLL)
                    {
                      v175 = 0x336A901A15BB7353;
                      if (*(_QWORD *)&v147 <= 0x336A901A15BB7353uLL)
                        v175 = 0x336A901A15BB7353uLL % *(_QWORD *)&v147;
                      v174 = *(_QWORD **)(v149 + 8 * v175);
                      do
                      {
                        do
                          v174 = (_QWORD *)*v174;
                        while (v174[1] != 0x336A901A15BB7353);
                      }
                      while (v174[2] != 0x336A901A15BB7353);
                    }
                    else
                    {
                      v174 = *(_QWORD **)(v149 + 8 * ((*(_QWORD *)&v147 - 1) & 0x336A901A15BB7353));
                      do
                      {
                        do
                          v174 = (_QWORD *)*v174;
                        while (v174[1] != 0x336A901A15BB7353);
                      }
                      while (v174[2] != 0x336A901A15BB7353);
                    }
                    v176 = *(unsigned __int8 *)(*(_QWORD *)(v174[5] + 32) + 32);
                    v177 = *v166;
                    v178 = *(unsigned __int16 **)(*v166 + 184);
                    v179 = *(unsigned __int16 **)(*v166 + 192);
                    if (v178 == v179)
                    {
LABEL_419:
                      v183 = *(unsigned __int16 **)(v177 + 208);
                      v184 = *(unsigned __int16 **)(v177 + 216);
                      if (v183 == v184)
                      {
                        v187 = 1;
                      }
                      else
                      {
                        v185 = *(unsigned __int16 **)(v177 + 120);
                        do
                        {
                          v189 = *(unsigned __int16 **)(v177 + 112);
                          if (v189 != v185)
                          {
                            v189 = *(unsigned __int16 **)(v177 + 112);
                            while (*v189 != *v183)
                            {
                              v189 += 56;
                              if (v189 == v185)
                              {
                                v189 = *(unsigned __int16 **)(v177 + 120);
                                break;
                              }
                            }
                          }
                          v186 = *((unsigned __int8 *)v189 + 8);
                          v187 = v186 != 0;
                          ++v183;
                          if (v186)
                            v188 = v183 == v184;
                          else
                            v188 = 1;
                        }
                        while (!v188);
                      }
                    }
                    else
                    {
                      v180 = *(unsigned __int16 **)(v177 + 120);
                      v181 = *(unsigned __int16 **)(*v166 + 184);
                      while (1)
                      {
                        v182 = *(unsigned __int16 **)(v177 + 112);
                        if (v182 != v180)
                        {
                          v182 = *(unsigned __int16 **)(v177 + 112);
                          while (*v182 != *v181)
                          {
                            v182 += 56;
                            if (v182 == v180)
                            {
                              v182 = *(unsigned __int16 **)(v177 + 120);
                              break;
                            }
                          }
                        }
                        if (!*((_BYTE *)v182 + 8))
                          break;
                        if (++v181 == v179)
                          goto LABEL_419;
                      }
                      v187 = 0;
                    }
                    v190 = *(unsigned __int8 *)(v177 + 280);
                    if (v178 == v179)
                    {
LABEL_441:
                      v193 = *(unsigned __int16 **)(v177 + 208);
                      v194 = *(unsigned __int16 **)(v177 + 216);
                      if (v193 == v194)
                      {
                        v198 = 0;
                      }
                      else
                      {
                        v196 = *(unsigned __int16 **)(v177 + 112);
                        v195 = *(unsigned __int16 **)(v177 + 120);
                        do
                        {
                          v200 = v196;
                          if (v196 != v195)
                          {
                            v200 = v196;
                            while (*v200 != *v193)
                            {
                              v200 += 56;
                              if (v200 == v195)
                              {
                                v200 = v195;
                                break;
                              }
                            }
                          }
                          v197 = *((_QWORD *)v200 + 5);
                          v198 = v197 != 0;
                          ++v193;
                          if (v197)
                            v199 = 1;
                          else
                            v199 = v193 == v194;
                        }
                        while (!v199);
                      }
                    }
                    else
                    {
                      v191 = *(unsigned __int16 **)(v177 + 120);
                      while (1)
                      {
                        v192 = *(unsigned __int16 **)(v177 + 112);
                        if (v192 != v191)
                        {
                          v192 = *(unsigned __int16 **)(v177 + 112);
                          while (*v192 != *v178)
                          {
                            v192 += 56;
                            if (v192 == v191)
                            {
                              v192 = *(unsigned __int16 **)(v177 + 120);
                              break;
                            }
                          }
                        }
                        if (*((_QWORD *)v192 + 5))
                          break;
                        if (++v178 == v179)
                          goto LABEL_441;
                      }
                      v198 = 1;
                    }
                    v201 = *v159;
                    v202 = v201 != 0;
                    v203 = atomic_load((unsigned __int8 *)(*(_QWORD *)(v201 + 16) + 2787));
                    v204 = v203 & 1;
                    if (v173)
                      v205 = *(_BYTE *)(v173 + 74) != 0;
                    else
                      v205 = 0;
                    if (v176)
                      v206 = v187;
                    else
                      v206 = 0;
                    if (v190)
                      v206 = 0;
                    if (v201)
                      v207 = v206;
                    else
                      v207 = 0;
                    if (!v204)
                      v207 = 0;
                    if ((v207 & ~v205 & v198 & 1) != 0)
                      goto LABEL_745;
                    v501 = v202;
                    v507 = v190;
                    v514 = v176;
                    md::LayoutContext::frameState((md::LayoutContext *)a2);
                    v35.n128_f64[0] = trunc(*(double *)(v208 + 88) * 1000.0);
                    if (v35.n128_f64[0] - *((double *)v506 + 8) > 3000.0)
                    {
                      *((_QWORD *)v506 + 8) = v35.n128_u64[0];
                      if (GEOGetVectorKitVKMapIsOpaqueStateLog::onceToken != -1)
                        dispatch_once(&GEOGetVectorKitVKMapIsOpaqueStateLog::onceToken, &__block_literal_global_684);
                      v209 = GEOGetVectorKitVKMapIsOpaqueStateLog::log;
                      if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKMapIsOpaqueStateLog::log, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)buf = 67110656;
                        *(_DWORD *)&buf[4] = v514;
                        *(_WORD *)&buf[8] = 1024;
                        *(_DWORD *)&buf[10] = v187;
                        *(_WORD *)&buf[14] = 1024;
                        *(_DWORD *)&buf[16] = v507;
                        *(_WORD *)&buf[20] = 1024;
                        *(_DWORD *)&buf[22] = v198;
                        *(_WORD *)&buf[26] = 1024;
                        *(_DWORD *)&buf[28] = v501;
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v204;
                        *(_WORD *)&buf[38] = 1024;
                        *(_DWORD *)&buf[40] = v205;
                        _os_log_impl(&dword_19F029000, v209, OS_LOG_TYPE_INFO, "Allow Opaque:%d, Finished Loading Required:%d, Has Tile Exclusion Areas:%d, Has Any Tiles:%d, Has Style Manager:%d, Is Style Manager Valid:%d, Has Pending Materials:%d", buf, 0x2Cu);
                      }
                    }
LABEL_473:
                    v210 = a2[1];
                    v211 = (int8x8_t)v210[1];
                    if (!*(_QWORD *)&v211)
                      goto LABEL_496;
                    v35.n128_u64[0] = (unint64_t)vcnt_s8(v211);
                    v35.n128_u16[0] = vaddlv_u8((uint8x8_t)v35.n128_u64[0]);
                    if (v35.n128_u32[0] > 1uLL)
                    {
                      v212 = 0x44B2D9808992962CLL;
                      if (*(_QWORD *)&v211 <= 0x44B2D9808992962CuLL)
                        v212 = 0x44B2D9808992962CuLL % *(_QWORD *)&v211;
                    }
                    else
                    {
                      v212 = (*(_QWORD *)&v211 - 1) & 0x44B2D9808992962CLL;
                    }
                    v213 = *(_QWORD **)(*v210 + 8 * v212);
                    if (!v213)
                      goto LABEL_496;
                    v214 = (_QWORD *)*v213;
                    if (!v214)
                      goto LABEL_496;
                    if (v35.n128_u32[0] < 2uLL)
                    {
                      v215 = *(_QWORD *)&v211 - 1;
                      while (1)
                      {
                        v217 = v214[1];
                        if (v217 == 0x44B2D9808992962CLL)
                        {
                          if (v214[2] == 0x44B2D9808992962CLL)
                            goto LABEL_494;
                        }
                        else if ((v217 & v215) != v212)
                        {
                          goto LABEL_496;
                        }
                        v214 = (_QWORD *)*v214;
                        if (!v214)
                          goto LABEL_496;
                      }
                    }
                    while (2)
                    {
                      v216 = v214[1];
                      if (v216 != 0x44B2D9808992962CLL)
                      {
                        if (v216 >= *(_QWORD *)&v211)
                          v216 %= *(_QWORD *)&v211;
                        if (v216 != v212)
                          goto LABEL_496;
                        goto LABEL_483;
                      }
                      if (v214[2] != 0x44B2D9808992962CLL)
                      {
LABEL_483:
                        v214 = (_QWORD *)*v214;
                        if (!v214)
                          goto LABEL_496;
                        continue;
                      }
                      break;
                    }
LABEL_494:
                    v218 = v214[5];
                    if (*(_QWORD *)(v218 + 8) == 0x44B2D9808992962CLL)
                    {
                      v497 = *(_QWORD *)(v218 + 32);
                      goto LABEL_497;
                    }
LABEL_496:
                    v497 = 0;
LABEL_497:
                    v219 = (uint64_t *)*((_QWORD *)v142 + 10);
                    if (!v219)
                    {
LABEL_745:
                      if ((_QWORD)v538)
                      {
                        v445 = *(_QWORD *)&v536[16];
                        v446 = v537;
                        if ((_QWORD)v537 != *(_QWORD *)&v536[16])
                        {
                          v447 = *(_QWORD **)&v536[8];
                          v448 = BYTE8(v537);
                          v449 = BYTE9(v537);
                          if (*(_QWORD *)v536 && *(_BYTE *)(*(_QWORD *)&v536[8] + 17) != 2)
                            (*(void (**)(void))(**(_QWORD **)v536 + 64))();
                          if (v448 && !v449)
                          {
                            v451 = v447[7];
                            v450 = v447[8];
                            if (v450 == v451)
                              v451 = v447[10] - v447[9];
                            if (v445 < v451)
                              v451 = v445;
                            if (v450 <= v446)
                              v450 = v446;
                            if (v450 == v451)
                              v450 = v451 + v447[10] - v447[9];
                            v447[7] = v451;
                            v447[8] = v450;
                          }
                        }
                      }
                      goto LABEL_803;
                    }
                    v496 = pow((double)(v137 / v138), -(double)v126);
                    while (2)
                    {
                      if (*((_BYTE *)v511 + 56))
                        v220 = v497 == 0;
                      else
                        v220 = 1;
                      if (v220
                        || (v221 = std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>((_QWORD *)(v497 + 8), (unsigned __int8 *)v219 + 16)) == 0|| (v222 = v221[5], v222 == v497 + 48))
                      {
                        v223 = 0;
                        v227 = 0;
                        v226 = 0;
                        v228 = 0;
                        v224 = v495;
                        v225 = v499;
                      }
                      else
                      {
                        v223 = *(_QWORD *)(v222 + 40);
                        v224 = 0.0;
                        v225 = v499;
                        if (*(_BYTE *)(v222 + 80))
                        {
                          v227 = *(_QWORD *)(v222 + 56);
                          v226 = *(_QWORD *)(v222 + 64);
                          v228 = *(_QWORD *)(v222 + 72);
                        }
                        else
                        {
                          v227 = 0;
                          v226 = 0;
                          v228 = 0;
                        }
                      }
                      v229 = *(unsigned __int8 *)(v225 + 3776);
                      v230 = *((_QWORD *)v506 + 6);
                      v552[0] = *((_WORD *)v219 + 8);
                      v553 = *(uint64_t *)((char *)v219 + 20);
                      v515 = v223;
                      v554 = v223;
                      v231 = (char *)(v230 + 272);
                      v508 = (_QWORD *)(v230 + 296);
                      v232 = std::__hash_table<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>,true>,std::__unordered_map_equal<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::equal_to<md::GridRenderResources::TileMeshEntry>,md::GridRenderResources::TileMeshEntryHash,true>,std::allocator<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>>>::find<md::GridRenderResources::TileMeshEntry>((_QWORD *)(v230 + 296), (unsigned __int8 *)v552);
                      if (v232)
                      {
                        v233 = v232;
                        v234 = (char *)v232[6];
                        v235 = (char *)operator new(0x48uLL);
                        v236 = v235;
                        *((_WORD *)v235 + 8) = *((_WORD *)v234 + 8);
                        *(_QWORD *)(v235 + 20) = *(_QWORD *)(v234 + 20);
                        *(_OWORD *)(v235 + 40) = *(_OWORD *)(v234 + 40);
                        v237 = *((_QWORD *)v234 + 7);
                        *((_QWORD *)v235 + 7) = v237;
                        if (v237)
                        {
                          v238 = (unint64_t *)(v237 + 8);
                          do
                            v239 = __ldxr(v238);
                          while (__stxr(v239 + 1, v238));
                        }
                        *((_QWORD *)v235 + 8) = *((_QWORD *)v234 + 8);
                        v240 = *(_QWORD *)(v230 + 272);
                        *(_QWORD *)(v240 + 8) = v235;
                        *(_QWORD *)v235 = v240;
                        *(_QWORD *)(v230 + 272) = v235;
                        *((_QWORD *)v235 + 1) = v231;
                        v241 = *(_QWORD *)(v230 + 288);
                        v242 = *(char **)(v230 + 336);
                        if (v242 == v234)
                        {
                          v243 = (char *)*((_QWORD *)v234 + 1);
                          goto LABEL_517;
                        }
                        v243 = v235;
                        if (v242 == v231)
LABEL_517:
                          *(_QWORD *)(v230 + 336) = v243;
                        v244 = *(_QWORD *)v234;
                        *(_QWORD *)(v244 + 8) = *((_QWORD *)v234 + 1);
                        **((_QWORD **)v234 + 1) = v244;
                        *(_QWORD *)(v230 + 288) = v241;
                        v245 = (std::__shared_weak_count *)*((_QWORD *)v234 + 7);
                        if (v245)
                        {
                          v246 = (unint64_t *)&v245->__shared_owners_;
                          do
                            v247 = __ldaxr(v246);
                          while (__stlxr(v247 - 1, v246));
                          if (!v247)
                          {
                            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                            std::__shared_weak_count::__release_weak(v245);
                          }
                        }
                        operator delete(v234);
                        v233[6] = (uint64_t)v236;
                        if (v231 != v236)
                        {
                          v248 = (std::__shared_weak_count *)*((_QWORD *)v236 + 7);
                          v559 = (std::__shared_weak_count *)*((_QWORD *)v236 + 6);
                          v560 = v248;
                          if (v248)
                          {
                            v249 = (unint64_t *)&v248->__shared_owners_;
                            do
                              v250 = __ldxr(v249);
                            while (__stxr(v250 + 1, v249));
                          }
                          goto LABEL_727;
                        }
                      }
                      v251 = operator new(0xE8uLL);
                      v502 = (uint64_t *)(v230 + 272);
                      v251[1] = 0;
                      v251[2] = 0;
                      *v251 = &off_1E42E2278;
                      v252 = ggl::BufferData::BufferData((uint64_t)(v251 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
                      v251[28] = ggl::Tile::View::reflection(void)::reflection;
                      v251[3] = &off_1E42B97B0;
                      *(_QWORD *)&v545.f64[0] = v252;
                      *(_QWORD *)&v545.f64[1] = v251;
                      v253 = operator new(0xE8uLL);
                      v253[1] = 0;
                      v253[2] = 0;
                      *v253 = &off_1E42E2C18;
                      v254 = ggl::BufferData::BufferData((uint64_t)(v253 + 3), qword_1EE547CA8, 2, 1, 6, 1);
                      v253[28] = ggl::GridBase::GridView::reflection(void)::reflection;
                      v253[3] = &off_1E42B9E90;
                      v526 = v254;
                      *(_QWORD *)&v527 = v253;
                      v255 = v229 - 1;
                      v256 = v515;
                      if ((v229 - 1) > 2)
                      {
                        v525[0] = 0uLL;
                        if (!v515)
                          goto LABEL_538;
LABEL_530:
                        v257 = (_QWORD *)operator new();
                        v258 = v257;
                        v259 = *(_QWORD *)(v230 + 88);
                        v260 = *(std::__shared_weak_count **)(v230 + 96);
                        if (v260)
                        {
                          v261 = (unint64_t *)&v260->__shared_owners_;
                          do
                            v262 = __ldxr(v261);
                          while (__stxr(v262 + 1, v261));
                          ggl::PipelineSetup::PipelineSetup(v257, v259, (uint64_t)v260);
                          v263 = (unint64_t *)&v260->__shared_owners_;
                          do
                            v264 = __ldaxr(v263);
                          while (__stlxr(v264 - 1, v263));
                          if (!v264)
                          {
                            ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                            std::__shared_weak_count::__release_weak(v260);
                          }
                        }
                        else
                        {
                          ggl::PipelineSetup::PipelineSetup(v257, v259, 0);
                        }
                        *v258 = &off_1E42747A8;
                        v271 = v258[8];
                        v272 = v545.f64[0];
                        *(float64_t *)v271 = v545.f64[0];
                        *(_QWORD *)(v271 + 8) = 0;
                        v273 = (float64_t *)v258[20];
                        v274 = v545.f64[1];
                        if (*(_QWORD *)&v545.f64[1])
                        {
                          v275 = (unint64_t *)(*(_QWORD *)&v545.f64[1] + 8);
                          do
                            v276 = __ldxr(v275);
                          while (__stxr(v276 + 1, v275));
                        }
                        v277 = (std::__shared_weak_count *)*((_QWORD *)v273 + 1);
                        *v273 = v272;
                        v273[1] = v274;
                        if (v277)
                        {
                          v278 = (unint64_t *)&v277->__shared_owners_;
                          do
                            v279 = __ldaxr(v278);
                          while (__stlxr(v279 - 1, v278));
                          if (!v279)
                          {
                            ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                            std::__shared_weak_count::__release_weak(v277);
                          }
                        }
                        v280 = v258[8];
                        v281 = v525[0];
                        *(float64_t *)(v280 + 16) = v525[0].f64[0];
                        *(_QWORD *)(v280 + 24) = 0;
                        v282 = v258[20];
                        if (*(_QWORD *)&v281.f64[1])
                        {
                          v283 = (unint64_t *)(*(_QWORD *)&v281.f64[1] + 8);
                          do
                            v284 = __ldxr(v283);
                          while (__stxr(v284 + 1, v283));
                        }
                        v285 = *(std::__shared_weak_count **)(v282 + 24);
                        *(float64x2_t *)(v282 + 16) = v281;
                        if (v285)
                        {
                          v286 = (unint64_t *)&v285->__shared_owners_;
                          do
                            v287 = __ldaxr(v286);
                          while (__stlxr(v287 - 1, v286));
                          if (!v287)
                          {
                            ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                            std::__shared_weak_count::__release_weak(v285);
                          }
                        }
                        v288 = v258[8];
                        v289 = v526;
                        v290 = v527;
                        *(_QWORD *)(v288 + 32) = v526;
                        *(_QWORD *)(v288 + 40) = 0;
                        v291 = v258[20];
                        if (v290)
                        {
                          v292 = (unint64_t *)(v290 + 8);
                          do
                            v293 = __ldxr(v292);
                          while (__stxr(v293 + 1, v292));
                        }
                        v294 = *(std::__shared_weak_count **)(v291 + 40);
                        *(_QWORD *)(v291 + 32) = v289;
                        *(_QWORD *)(v291 + 40) = v290;
                        if (v294)
                        {
                          v295 = (unint64_t *)&v294->__shared_owners_;
                          do
                            v296 = __ldaxr(v295);
                          while (__stlxr(v296 - 1, v295));
                          if (!v296)
                          {
                            ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                            std::__shared_weak_count::__release_weak(v294);
                          }
                        }
                        v297 = v258[8];
                        *(_QWORD *)(v297 + 56) = 0;
                        v298 = *(_QWORD *)(v230 + 32);
                        *(_QWORD *)(v297 + 48) = v298;
                        v299 = v258[20];
                        v300 = *(_QWORD *)(v230 + 40);
                        if (v300)
                        {
                          v301 = (unint64_t *)(v300 + 8);
                          do
                            v302 = __ldxr(v301);
                          while (__stxr(v302 + 1, v301));
                        }
                        v303 = *(std::__shared_weak_count **)(v299 + 56);
                        *(_QWORD *)(v299 + 48) = v298;
                        *(_QWORD *)(v299 + 56) = v300;
                        if (v303)
                        {
                          v304 = (unint64_t *)&v303->__shared_owners_;
                          do
                            v305 = __ldaxr(v304);
                          while (__stlxr(v305 - 1, v304));
                          if (!v305)
                          {
                            ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                            std::__shared_weak_count::__release_weak(v303);
                          }
                        }
                        v266 = v219;
                        v269 = (uint64_t *)(v230 + 128);
                      }
                      else
                      {
                        md::GeometryContext::transformConstantData(v525[0].f64, (uint64_t *)v494, (unsigned __int8 *)v219 + 16, v229, 0.0, 0.0);
                        if (v515)
                          goto LABEL_530;
LABEL_538:
                        v265 = (_QWORD *)operator new();
                        v258 = v265;
                        v266 = v219;
                        v267 = v230 + 64;
                        v268 = 48;
                        if (v255 >= 3u)
                          v267 = v230 + 48;
                        else
                          v268 = 64;
                        ggl::Grid::GridPipelineSetup::GridPipelineSetup(v265, *(_QWORD *)(v230 + v268), *(std::__shared_weak_count **)(v267 + 8), (uint64_t *)&v545, (uint64_t *)v525, &v526, (uint64_t *)(v230 + 32));
                        v269 = (uint64_t *)(v230 + 120);
                        v270 = 96;
                        if (*(unsigned __int8 *)(v494 + 320) - 1 < 3)
                          v270 = 112;
                        v256 = *(_QWORD *)(v494 + v270);
                      }
                      v306 = *v269;
                      v307 = (char *)operator new(0xE0uLL);
                      v308 = (std::__shared_weak_count *)v307;
                      *((_QWORD *)v307 + 1) = 0;
                      v309 = (uint64_t)(v307 + 8);
                      *((_QWORD *)v307 + 2) = 0;
                      *(_QWORD *)v307 = &off_1E42DBC88;
                      v310 = v545;
                      if (*(_QWORD *)&v545.f64[1])
                      {
                        v311 = (unint64_t *)(*(_QWORD *)&v545.f64[1] + 8);
                        do
                          v312 = __ldxr(v311);
                        while (__stxr(v312 + 1, v311));
                      }
                      v313 = v526;
                      v314 = (std::__shared_weak_count *)v527;
                      if ((_QWORD)v527)
                      {
                        v315 = (unint64_t *)(v527 + 8);
                        do
                          v316 = __ldxr(v315);
                        while (__stxr(v316 + 1, v315));
                      }
                      v317 = v525[0];
                      if (*(_QWORD *)&v525[0].f64[1])
                      {
                        v318 = (unint64_t *)(*(_QWORD *)&v525[0].f64[1] + 8);
                        do
                          v319 = __ldxr(v318);
                        while (__stxr(v319 + 1, v318));
                      }
                      *((_WORD *)v307 + 12) = *((_WORD *)v266 + 8);
                      v500 = v266;
                      *(_QWORD *)(v307 + 28) = *(uint64_t *)((char *)v266 + 20);
                      *((float64x2_t *)v307 + 3) = v310;
                      if (*(_QWORD *)&v310.f64[1])
                      {
                        v320 = (unint64_t *)(*(_QWORD *)&v310.f64[1] + 8);
                        do
                          v321 = __ldxr(v320);
                        while (__stxr(v321 + 1, v320));
                      }
                      *((_QWORD *)v307 + 8) = v313;
                      *((_QWORD *)v307 + 9) = v314;
                      if (v314)
                      {
                        v322 = (unint64_t *)&v314->__shared_owners_;
                        do
                          v323 = __ldxr(v322);
                        while (__stxr(v323 + 1, v322));
                      }
                      *((float64x2_t *)v307 + 5) = v317;
                      if (*(_QWORD *)&v317.f64[1])
                      {
                        v324 = (unint64_t *)(*(_QWORD *)&v317.f64[1] + 8);
                        do
                          v325 = __ldxr(v324);
                        while (__stxr(v325 + 1, v324));
                      }
                      *((_QWORD *)v307 + 12) = v258;
                      *((_QWORD *)v307 + 13) = &off_1E42B59B0;
                      *((_QWORD *)v307 + 15) = "";
                      *((_QWORD *)v307 + 16) = v306;
                      *((_QWORD *)v307 + 17) = v258;
                      *((_DWORD *)v307 + 36) = 0;
                      *((_QWORD *)v307 + 19) = 0;
                      *((_DWORD *)v307 + 40) = 1065353216;
                      *((_QWORD *)v307 + 21) = v256;
                      *((_QWORD *)v307 + 22) = 0;
                      *((_QWORD *)v307 + 23) = 0;
                      *((_QWORD *)v307 + 24) = 0;
                      *(int64x2_t *)(v307 + 200) = vdupq_n_s64(1uLL);
                      *((_QWORD *)v307 + 27) = 0;
                      if (!*(_QWORD *)&v317.f64[1])
                        goto LABEL_600;
                      v326 = (unint64_t *)(*(_QWORD *)&v317.f64[1] + 8);
                      do
                        v327 = __ldaxr(v326);
                      while (__stlxr(v327 - 1, v326));
                      if (!v327)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)&v317.f64[1] + 16))(*(_QWORD *)&v317.f64[1]);
                        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v317.f64[1]);
                        if (v314)
                        {
LABEL_601:
                          v328 = (unint64_t *)&v314->__shared_owners_;
                          do
                            v329 = __ldaxr(v328);
                          while (__stlxr(v329 - 1, v328));
                          if (!v329)
                          {
                            ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                            std::__shared_weak_count::__release_weak(v314);
                          }
                        }
                      }
                      else
                      {
LABEL_600:
                        if (v314)
                          goto LABEL_601;
                      }
                      if (*(_QWORD *)&v310.f64[1])
                      {
                        v330 = (unint64_t *)(*(_QWORD *)&v310.f64[1] + 8);
                        do
                          v331 = __ldaxr(v330);
                        while (__stlxr(v331 - 1, v330));
                        if (!v331)
                        {
                          (*(void (**)(_QWORD))(**(_QWORD **)&v310.f64[1] + 16))(*(_QWORD *)&v310.f64[1]);
                          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v310.f64[1]);
                        }
                      }
                      v559 = v308 + 1;
                      v560 = v308;
                      v332 = HIBYTE(v552[0]);
                      v333 = v553;
                      v334 = HIDWORD(v553);
                      v335 = LOBYTE(v552[0]);
                      *(_WORD *)v555 = v552[0];
                      *(_QWORD *)&v555[4] = v553;
                      v336 = v554;
                      *(_QWORD *)v556 = v554;
                      *(_QWORD *)&v556[8] = v308 + 1;
                      *(_QWORD *)&v556[16] = v308;
                      do
                        v337 = __ldxr((unint64_t *)v309);
                      while (__stxr(v337 + 1, (unint64_t *)v309));
                      buf[0] = v335;
                      buf[1] = v332;
                      *(_DWORD *)&buf[4] = v333;
                      *(_DWORD *)&buf[8] = v334;
                      *(_QWORD *)&buf[24] = v336;
                      *(_QWORD *)&buf[32] = v308 + 1;
                      *(_QWORD *)&buf[40] = v308;
                      do
                        v338 = __ldxr((unint64_t *)v309);
                      while (__stxr(v338 + 1, (unint64_t *)v309));
                      *(_QWORD *)&buf[48] = 0;
                      v339 = std::__hash_table<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::__unordered_map_hasher<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>,true>,std::__unordered_map_equal<md::GridRenderResources::TileMeshEntry,std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>,std::equal_to<md::GridRenderResources::TileMeshEntry>,md::GridRenderResources::TileMeshEntryHash,true>,std::allocator<std::__hash_value_type<md::GridRenderResources::TileMeshEntry,std::__list_iterator<geo::MarkedLRUCache<md::GridRenderResources::TileMeshEntry,std::shared_ptr<md::GridTileRenderable>,md::GridRenderResources::TileMeshEntryHash,std::equal_to<md::GridRenderResources::TileMeshEntry>>::CacheEntry,void *>>>>::find<md::GridRenderResources::TileMeshEntry>(v508, buf);
                      if (v339)
                      {
                        v340 = v339;
                        v341 = (uint64_t *)v339[6];
                        v342 = (char *)operator new(0x48uLL);
                        v343 = v342;
                        v342[16] = v335;
                        v342[17] = v332;
                        *(_QWORD *)(v342 + 20) = *(_QWORD *)&buf[4];
                        *(_OWORD *)(v342 + 40) = *(_OWORD *)&buf[24];
                        *((_QWORD *)v342 + 7) = v308;
                        do
                          v344 = __ldxr((unint64_t *)v309);
                        while (__stxr(v344 + 1, (unint64_t *)v309));
                        *((_QWORD *)v342 + 8) = 0;
                        v345 = *(_QWORD *)(v230 + 272);
                        *(_QWORD *)(v345 + 8) = v342;
                        *(_QWORD *)v342 = v345;
                        *(_QWORD *)(v230 + 272) = v342;
                        *((_QWORD *)v342 + 1) = v502;
                        v346 = *(_QWORD *)(v230 + 288);
                        *(_QWORD *)(v230 + 288) = v346 + 1;
                        v347 = *(uint64_t **)(v230 + 336);
                        if (v347 == v341)
                        {
                          v348 = (char *)v341[1];
                          goto LABEL_629;
                        }
                        v348 = v342;
                        if (v347 == v502)
LABEL_629:
                          *(_QWORD *)(v230 + 336) = v348;
                        v364 = v341[8];
                        v365 = *(_QWORD *)(v230 + 344);
                        v121 = v365 >= v364;
                        v366 = v365 - v364;
                        if (!v121)
                          v366 = 0;
                        *(_QWORD *)(v230 + 344) = v366;
                        v367 = *v341;
                        *(_QWORD *)(v367 + 8) = v341[1];
                        *(_QWORD *)v341[1] = v367;
                        *(_QWORD *)(v230 + 288) = v346;
                        v368 = (std::__shared_weak_count *)v341[7];
                        if (v368)
                        {
                          v369 = (unint64_t *)&v368->__shared_owners_;
                          do
                            v370 = __ldaxr(v369);
                          while (__stlxr(v370 - 1, v369));
                          if (!v370)
                          {
                            ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                            std::__shared_weak_count::__release_weak(v368);
                          }
                        }
                        operator delete(v341);
                        v340[6] = (uint64_t)v343;
                        v308 = *(std::__shared_weak_count **)&buf[40];
                        if (!*(_QWORD *)&buf[40])
                        {
LABEL_707:
                          v391 = *(std::__shared_weak_count **)&v556[16];
                          v219 = v500;
                          if (!*(_QWORD *)&v556[16])
                            goto LABEL_711;
                          v392 = (unint64_t *)(*(_QWORD *)&v556[16] + 8);
                          do
                            v393 = __ldaxr(v392);
                          while (__stlxr(v393 - 1, v392));
                          if (!v393)
                          {
                            ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
                            std::__shared_weak_count::__release_weak(v391);
                            v394 = v525[0].f64[1];
                            if (*(_QWORD *)&v525[0].f64[1])
                            {
LABEL_712:
                              v395 = (unint64_t *)(*(_QWORD *)&v394 + 8);
                              do
                                v396 = __ldaxr(v395);
                              while (__stlxr(v396 - 1, v395));
                              if (!v396)
                              {
                                (*(void (**)(float64_t))(**(_QWORD **)&v394 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v394));
                                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v394);
                              }
                            }
                          }
                          else
                          {
LABEL_711:
                            v394 = v525[0].f64[1];
                            if (*(_QWORD *)&v525[0].f64[1])
                              goto LABEL_712;
                          }
                          v397 = (std::__shared_weak_count *)v527;
                          if (!(_QWORD)v527)
                            goto LABEL_721;
                          v398 = (unint64_t *)(v527 + 8);
                          do
                            v399 = __ldaxr(v398);
                          while (__stlxr(v399 - 1, v398));
                          if (!v399)
                          {
                            ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                            std::__shared_weak_count::__release_weak(v397);
                            v400 = v545.f64[1];
                            if (!*(_QWORD *)&v545.f64[1])
                              goto LABEL_727;
                          }
                          else
                          {
LABEL_721:
                            v400 = v545.f64[1];
                            if (!*(_QWORD *)&v545.f64[1])
                              goto LABEL_727;
                          }
                          v401 = (unint64_t *)(*(_QWORD *)&v400 + 8);
                          do
                            v402 = __ldaxr(v401);
                          while (__stlxr(v402 - 1, v401));
                          if (!v402)
                          {
                            (*(void (**)(float64_t))(**(_QWORD **)&v400 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v400));
                            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v400);
                          }
LABEL_727:
                          v403 = 1 << *((_BYTE *)v219 + 17);
                          v404 = 1.0 / (double)v403;
                          v405 = *((int *)v219 + 6);
                          v406 = v403 + ~*((_DWORD *)v219 + 5);
                          *(double *)buf = v404 * (double)v405;
                          *(double *)&buf[8] = v404 * (double)v406;
                          *(double *)&buf[16] = v404 + (double)v405 * v404;
                          *(double *)&buf[24] = v404 + (double)v406 * v404;
                          gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v545, (double *)buf, v224, v224);
                          v407 = 1 << *((_BYTE *)v219 + 17);
                          v408 = 1.0 / (double)v407;
                          v409 = v408 * (double)(v407 + ~*((_DWORD *)v219 + 5));
                          v410 = gdc::GlobeTileUtils::computeGlobeCoeffsFromMercatorRect(v409, v409 + v408);
                          v412 = v411;
                          v414 = v413;
                          v416 = v415;
                          v417 = v559;
                          v418 = v559[1].__vftable;
                          v419 = v418->~__shared_weak_count_0;
                          if (v419)
                          {
                            on_zero_shared_weak = (float32x4_t *)v418[1].__on_zero_shared_weak;
                            if (v515)
                              goto LABEL_729;
LABEL_731:
                            v572.f64[1] = 0.0;
                            memset(&buf[8], 0, 72);
                            *((_QWORD *)&v574 + 1) = 0x3FF0000000000000;
                            v573 = *(float64x2_t *)&v548[8];
                            *(_QWORD *)&v574 = *(_QWORD *)&v548[24];
                            *(double *)buf = v549.f64[0] - *(double *)&v548[8];
                            *(double *)&buf[40] = v549.f64[1] - *(double *)&v548[16];
                            v572.f64[0] = v550.f64[0] - *(double *)&v548[24];
                            v422 = v547.f64[0];
                            v423 = v422 + v422;
                            v424 = (v422 + v422) * v422;
                            v425 = (v547.f64[1] + v547.f64[1]) * v547.f64[1];
                            v426 = v546.f64[1];
                            v427 = v426 + v426;
                            v428 = (v426 + v426) * v547.f64[0];
                            v429 = (v547.f64[1] + v547.f64[1]) * *(double *)v548;
                            v430 = v547.f64[1] * (v426 + v426);
                            v431 = 1.0 - (v426 + v426) * v426;
                            *(double *)v555 = 1.0 - (v424 + v425);
                            *(double *)&v555[8] = v429 + v428;
                            *(double *)&v556[8] = v428 - v429;
                            *(double *)&v556[16] = v431 - v425;
                            *(double *)&v556[40] = *(double *)v548 * v423 + v430;
                            *(double *)&v556[48] = v423 * v547.f64[1] - *(double *)v548 * v427;
                            *(double *)&v555[16] = v430 - *(double *)v548 * v423;
                            *(double *)&v556[24] = *(double *)v548 * v427 + v423 * v547.f64[1];
                            *(double *)v557 = v431 - v424;
                            *(_QWORD *)v556 = 0;
                            *(_QWORD *)&v556[32] = 0;
                            *(_QWORD *)&v557[8] = 0;
                            *(float64x2_t *)&v557[16] = v545;
                            *(float64_t *)&v557[32] = v546.f64[0];
                            v558 = 0x3FF0000000000000;
                            gm::operator*<double,4,4,4>((double *)v552, (double *)v555, (double *)buf);
                            v421 = (double *)v552;
                          }
                          else
                          {
                            on_zero_shared_weak = 0;
                            if (!v515)
                              goto LABEL_731;
LABEL_729:
                            *(_OWORD *)v555 = xmmword_19FFB32C0;
                            *(_QWORD *)v556 = 0;
                            *(_QWORD *)&v555[16] = 0;
                            memset(&v556[24], 0, 32);
                            *(_OWORD *)&v556[8] = xmmword_19FFB33A0;
                            *(_OWORD *)v557 = xmmword_19FFB32C0;
                            *(_QWORD *)&v557[16] = v227;
                            *(_QWORD *)&v557[24] = v226;
                            *(_QWORD *)&v557[32] = v228;
                            v558 = 0x3FF0000000000000;
                            v421 = (double *)v555;
                          }
                          gm::operator*<double,4,4,4>((double *)buf, (double *)(v499 + 808), v421);
                          v432 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v573), (float64x2_t)v574);
                          v433 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&buf[64]), v572);
                          v434 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&buf[32]), *(float64x2_t *)&buf[48]);
                          *on_zero_shared_weak = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)buf), *(float64x2_t *)&buf[16]);
                          on_zero_shared_weak[1] = v434;
                          on_zero_shared_weak[2] = v433;
                          on_zero_shared_weak[3] = v432;
                          on_zero_shared_weak[4].i32[0] = 1065353216;
                          v435 = *((unsigned __int8 *)v219 + 17);
                          v436 = (double)(1 << (19 - v435));
                          if (v435 >= 0x13)
                            v436 = 1.0;
                          v437 = v436 * v496;
                          shared_weak_owners = (_QWORD *)v417[1].__shared_weak_owners_;
                          v439 = shared_weak_owners[1];
                          v440 = shared_weak_owners[9];
                          *(float *)v440 = v437;
                          *(_DWORD *)(v440 + 4) = 0;
                          *(_DWORD *)(v440 + 8) = 0;
                          *(float *)(v440 + 12) = v410;
                          *(_DWORD *)(v440 + 16) = 0;
                          *(float *)(v440 + 20) = v437;
                          *(_DWORD *)(v440 + 24) = 0;
                          *(_DWORD *)(v440 + 28) = v412;
                          *(_QWORD *)(v440 + 32) = 0;
                          *(_DWORD *)(v440 + 40) = 1065353216;
                          *(_DWORD *)(v440 + 44) = v414;
                          *(_QWORD *)(v440 + 48) = 0;
                          *(_DWORD *)(v440 + 56) = 0;
                          *(_DWORD *)(v440 + 60) = v416;
                          *(_DWORD *)(v440 + 64) = *v511;
                          *(_DWORD *)(v440 + 68) = v511[1];
                          *(_DWORD *)(v440 + 72) = v511[2];
                          *(_DWORD *)(v440 + 76) = v511[3];
                          if (shared_weak_owners[8] > v439)
                            v439 = shared_weak_owners[8];
                          shared_weak_owners[7] = 0;
                          shared_weak_owners[8] = v439;
                          if (v419)
                          {
                            get_deleter = v418[1].__get_deleter;
                            if ((unint64_t)get_deleter <= (unint64_t)v419)
                              get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v419;
                            v418[1].__on_zero_shared = 0;
                            v418[1].__get_deleter = get_deleter;
                          }
                          ggl::CommandBuffer::pushRenderItem((uint64_t)v498, (ggl::RenderItem *)&v417[3].__shared_owners_);
                          v442 = v560;
                          if (v560)
                          {
                            v443 = (unint64_t *)&v560->__shared_owners_;
                            do
                              v444 = __ldaxr(v443);
                            while (__stlxr(v444 - 1, v443));
                            if (!v444)
                            {
                              ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
                              std::__shared_weak_count::__release_weak(v442);
                            }
                          }
                          v219 = (uint64_t *)*v219;
                          if (!v219)
                            goto LABEL_745;
                          continue;
                        }
LABEL_703:
                        v389 = (unint64_t *)&v308->__shared_owners_;
                        do
                          v390 = __ldaxr(v389);
                        while (__stlxr(v390 - 1, v389));
                        if (!v390)
                        {
                          ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                          std::__shared_weak_count::__release_weak(v308);
                        }
                        goto LABEL_707;
                      }
                      break;
                    }
                    v349 = (char *)operator new(0x48uLL);
                    v350 = v349;
                    v349[16] = v335;
                    v349[17] = v332;
                    v351 = *(_QWORD *)&buf[4];
                    *(_QWORD *)(v349 + 20) = *(_QWORD *)&buf[4];
                    v352 = *(_QWORD *)&buf[24];
                    *(_OWORD *)(v349 + 40) = *(_OWORD *)&buf[24];
                    *((_QWORD *)v349 + 7) = v308;
                    v493 = v351;
                    v353 = v352;
                    do
                      v354 = __ldxr((unint64_t *)v309);
                    while (__stxr(v354 + 1, (unint64_t *)v309));
                    *((_QWORD *)v349 + 8) = 0;
                    v355 = *(_QWORD *)(v230 + 272);
                    *(_QWORD *)(v355 + 8) = v349;
                    *(_QWORD *)v349 = v355;
                    *(_QWORD *)(v230 + 272) = v349;
                    *((_QWORD *)v349 + 1) = v502;
                    ++*(_QWORD *)(v230 + 288);
                    if (*(uint64_t **)(v230 + 336) == v502)
                      *(_QWORD *)(v230 + 336) = v349;
                    v356 = (v332
                          - 0x61C8864680B583EBLL
                          + ((v335 - 0x61C8864680B583EBLL) << 6)
                          + ((unint64_t)(v335 - 0x61C8864680B583EBLL) >> 2)) ^ (v335 - 0x61C8864680B583EBLL);
                    v357 = ((int)v351 - 0x61C8864680B583EBLL + (v356 << 6) + (v356 >> 2)) ^ v356;
                    v358 = ((SHIDWORD(v351) - 0x61C8864680B583EBLL + (v357 << 6) + (v357 >> 2)) ^ v357)
                         - 0x61C8864680B583EBLL;
                    v359 = 0x9DDFEA08EB382D69 * (((8 * v352) + 8) ^ HIDWORD(v352));
                    v360 = 0x9DDFEA08EB382D69 * (HIDWORD(v352) ^ (v359 >> 47) ^ v359);
                    v361 = ((v358 << 6)
                          - 0x61C8864680B583EBLL
                          + (v358 >> 2)
                          - 0x622015F714C7D297 * (v360 ^ (v360 >> 47))) ^ v358;
                    v362 = *(_QWORD *)(v230 + 304);
                    if (v362)
                    {
                      v363 = (uint8x8_t)vcnt_s8((int8x8_t)v362);
                      v363.i16[0] = vaddlv_u8(v363);
                      if (v363.u32[0] > 1uLL)
                      {
                        v309 = ((v358 << 6)
                              - 0x61C8864680B583EBLL
                              + (v358 >> 2)
                              - 0x622015F714C7D297 * (v360 ^ (v360 >> 47))) ^ v358;
                        if (v361 >= v362)
                          v309 = v361 % v362;
                      }
                      else
                      {
                        v309 = v361 & (v362 - 1);
                      }
                      v371 = *(uint64_t ***)(*v508 + 8 * v309);
                      if (v371)
                      {
                        v372 = *v371;
                        if (v372)
                        {
                          if (v363.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v374 = v372[1];
                              if (v374 == v361)
                              {
                                if (*((unsigned __int8 *)v372 + 16) == (_DWORD)v335
                                  && *((unsigned __int8 *)v372 + 17) == (_DWORD)v332
                                  && *(uint64_t *)((char *)v372 + 20) == v351
                                  && v372[5] == v353)
                                {
                                  goto LABEL_703;
                                }
                              }
                              else if ((v374 & (v362 - 1)) != v309)
                              {
                                goto LABEL_664;
                              }
                              v372 = (uint64_t *)*v372;
                              if (!v372)
                                goto LABEL_664;
                            }
                          }
                          do
                          {
                            v373 = v372[1];
                            if (v373 == v361)
                            {
                              if (*((unsigned __int8 *)v372 + 16) == (_DWORD)v335
                                && *((unsigned __int8 *)v372 + 17) == (_DWORD)v332
                                && *(uint64_t *)((char *)v372 + 20) == v351
                                && v372[5] == v353)
                              {
                                goto LABEL_703;
                              }
                            }
                            else
                            {
                              if (v373 >= v362)
                                v373 %= v362;
                              if (v373 != v309)
                                break;
                            }
                            v372 = (uint64_t *)*v372;
                          }
                          while (v372);
                        }
                      }
                    }
LABEL_664:
                    v375 = operator new(0x38uLL);
                    *v375 = 0;
                    v375[1] = v361;
                    *((_BYTE *)v375 + 16) = v335;
                    *((_BYTE *)v375 + 17) = v332;
                    *(_QWORD *)((char *)v375 + 20) = v493;
                    v375[5] = v353;
                    v375[6] = v350;
                    v376 = (float)(unint64_t)(*(_QWORD *)(v230 + 320) + 1);
                    v377 = *(float *)(v230 + 328);
                    if (v362 && (float)(v377 * (float)v362) >= v376)
                    {
                      v378 = (uint64_t *)(v230 + 296);
                    }
                    else
                    {
                      v379 = (v362 & (v362 - 1)) != 0;
                      if (v362 < 3)
                        v379 = 1;
                      v380 = v379 | (2 * v362);
                      v381 = vcvtps_u32_f32(v376 / v377);
                      if (v380 <= v381)
                        prime = v381;
                      else
                        prime = v380;
                      v378 = (uint64_t *)(v230 + 296);
                      if (prime == 1)
                      {
                        prime = 2;
                      }
                      else if ((prime & (prime - 1)) != 0)
                      {
                        prime = std::__next_prime(prime);
                        v362 = *(_QWORD *)(v230 + 304);
                      }
                      if (prime > v362)
                        goto LABEL_677;
                      if (prime < v362)
                      {
                        v383 = vcvtps_u32_f32((float)*(unint64_t *)(v230 + 320) / *(float *)(v230 + 328));
                        if (v362 < 3
                          || (v384 = (uint8x8_t)vcnt_s8((int8x8_t)v362),
                              v384.i16[0] = vaddlv_u8(v384),
                              v384.u32[0] > 1uLL))
                        {
                          v383 = std::__next_prime(v383);
                        }
                        else
                        {
                          v385 = 1 << -(char)__clz(v383 - 1);
                          if (v383 >= 2)
                            v383 = v385;
                        }
                        if (prime <= v383)
                          prime = v383;
                        if (prime < v362)
LABEL_677:
                          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v508, prime);
                      }
                      v362 = *(_QWORD *)(v230 + 304);
                      if ((v362 & (v362 - 1)) != 0)
                      {
                        if (v361 >= v362)
                          v309 = v361 % v362;
                        else
                          v309 = v361;
                      }
                      else
                      {
                        v309 = (v362 - 1) & v361;
                      }
                    }
                    v386 = *v378;
                    v387 = *(_QWORD **)(*v378 + 8 * v309);
                    if (v387)
                    {
                      *v375 = *v387;
                      goto LABEL_701;
                    }
                    *v375 = *(_QWORD *)(v230 + 312);
                    *(_QWORD *)(v230 + 312) = v375;
                    *(_QWORD *)(v386 + 8 * v309) = v230 + 312;
                    if (*v375)
                    {
                      v388 = *(_QWORD *)(*v375 + 8);
                      if ((v362 & (v362 - 1)) != 0)
                      {
                        if (v388 >= v362)
                          v388 %= v362;
                      }
                      else
                      {
                        v388 &= v362 - 1;
                      }
                      v387 = (_QWORD *)(*v378 + 8 * v388);
LABEL_701:
                      *v387 = v375;
                    }
                    ++*(_QWORD *)(v230 + 320);
                    goto LABEL_703;
                  }
                  goto LABEL_803;
                }
LABEL_253:
                v494 = 0;
                goto LABEL_254;
              }
            }
            else
            {
              if (v105 >= *(_QWORD *)&v51)
                v105 %= *(_QWORD *)&v51;
              if (v105 != v101)
                goto LABEL_253;
            }
            v103 = (_QWORD *)*v103;
            if (!v103)
              goto LABEL_253;
          }
        }
      }
      else
      {
        if (v65 >= *(_QWORD *)&v51)
          v65 %= *(_QWORD *)&v51;
        if (v65 != v52)
          goto LABEL_132;
      }
      v64 = (_QWORD *)*v64;
      if (!v64)
        goto LABEL_132;
    }
  }
  v47 = a2[1];
  v48 = (int8x8_t)v47[1];
  if (!*(_QWORD *)&v48)
    goto LABEL_803;
  v35.n128_u64[0] = (unint64_t)vcnt_s8(v48);
  v35.n128_u16[0] = vaddlv_u8((uint8x8_t)v35.n128_u64[0]);
  if (v35.n128_u32[0] > 1uLL)
  {
    v49 = 0x336A901A15BB7353;
    if (*(_QWORD *)&v48 <= 0x336A901A15BB7353uLL)
      v49 = 0x336A901A15BB7353uLL % *(_QWORD *)&v48;
  }
  else
  {
    v49 = (*(_QWORD *)&v48 - 1) & 0x336A901A15BB7353;
  }
  v57 = *v47;
  v58 = *(_QWORD **)(*v47 + 8 * v49);
  if (!v58)
    goto LABEL_109;
  v59 = (_QWORD *)*v58;
  if (!v59)
    goto LABEL_109;
  if (v35.n128_u32[0] < 2uLL)
  {
    while (1)
    {
      v61 = v59[1];
      if (v61 == 0x336A901A15BB7353)
      {
        if (v59[2] == 0x336A901A15BB7353)
          goto LABEL_107;
      }
      else if ((v61 & (*(_QWORD *)&v48 - 1)) != v49)
      {
        goto LABEL_109;
      }
      v59 = (_QWORD *)*v59;
      if (!v59)
        goto LABEL_109;
    }
  }
  while (1)
  {
    v60 = v59[1];
    if (v60 == 0x336A901A15BB7353)
      break;
    if (v60 >= *(_QWORD *)&v48)
      v60 %= *(_QWORD *)&v48;
    if (v60 != v49)
      goto LABEL_109;
LABEL_78:
    v59 = (_QWORD *)*v59;
    if (!v59)
      goto LABEL_109;
  }
  if (v59[2] != 0x336A901A15BB7353)
    goto LABEL_78;
LABEL_107:
  v67 = v59[5];
  if (*(_QWORD *)(v67 + 8) == 0x336A901A15BB7353)
  {
    v68 = *(float **)(v67 + 32);
    goto LABEL_110;
  }
LABEL_109:
  v68 = 0;
LABEL_110:
  if (v35.n128_u32[0] > 1uLL)
  {
    v69 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v48 <= 0xE42D19AFCA302E68)
      v69 = 0xE42D19AFCA302E68 % *(_QWORD *)&v48;
  }
  else
  {
    v69 = (*(_QWORD *)&v48 - 1) & 0xE42D19AFCA302E68;
  }
  v70 = *(_QWORD **)(v57 + 8 * v69);
  if (!v70)
    goto LABEL_156;
  v70 = (_QWORD *)*v70;
  if (!v70)
    goto LABEL_156;
  if (v35.n128_u32[0] < 2uLL)
  {
    while (1)
    {
      v72 = v70[1];
      if (v72 == 0xE42D19AFCA302E68)
      {
        if (v70[2] == 0xE42D19AFCA302E68)
          goto LABEL_153;
      }
      else if ((v72 & (*(_QWORD *)&v48 - 1)) != v69)
      {
        goto LABEL_155;
      }
      v70 = (_QWORD *)*v70;
      if (!v70)
        goto LABEL_156;
    }
  }
  while (2)
  {
    v71 = v70[1];
    if (v71 != 0xE42D19AFCA302E68)
    {
      if (v71 >= *(_QWORD *)&v48)
        v71 %= *(_QWORD *)&v48;
      if (v71 != v69)
        goto LABEL_155;
      goto LABEL_119;
    }
    if (v70[2] != 0xE42D19AFCA302E68)
    {
LABEL_119:
      v70 = (_QWORD *)*v70;
      if (!v70)
        goto LABEL_156;
      continue;
    }
    break;
  }
LABEL_153:
  v79 = v70[5];
  if (*(_QWORD *)(v79 + 8) == 0xE42D19AFCA302E68)
  {
    v70 = *(_QWORD **)(v79 + 32);
    goto LABEL_156;
  }
LABEL_155:
  v70 = 0;
LABEL_156:
  if (v35.n128_u32[0] > 1uLL)
  {
    v80 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v48 <= 0x3070CB6B3C7F21D3uLL)
      v80 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v48;
  }
  else
  {
    v80 = (*(_QWORD *)&v48 - 1) & 0x3070CB6B3C7F21D3;
  }
  v81 = *(_QWORD **)(v57 + 8 * v80);
  if (!v81)
    goto LABEL_779;
  v82 = (_QWORD *)*v81;
  if (!*v81)
    goto LABEL_779;
  v83 = *(_QWORD *)&v48 - 1;
  if (v35.n128_u32[0] < 2uLL)
  {
    while (1)
    {
      v84 = v82[1];
      if (v84 == 0x3070CB6B3C7F21D3)
      {
        if (v82[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_176;
      }
      else if ((v84 & v83) != v80)
      {
        goto LABEL_779;
      }
      v82 = (_QWORD *)*v82;
      if (!v82)
        goto LABEL_779;
    }
  }
  while (2)
  {
    v85 = v82[1];
    if (v85 != 0x3070CB6B3C7F21D3)
    {
      if (v85 >= *(_QWORD *)&v48)
        v85 %= *(_QWORD *)&v48;
      if (v85 != v80)
        goto LABEL_779;
      goto LABEL_170;
    }
    if (v82[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_170:
      v82 = (_QWORD *)*v82;
      if (!v82)
        goto LABEL_779;
      continue;
    }
    break;
  }
LABEL_176:
  v86 = v82[5];
  if (*(_QWORD *)(v86 + 8) != 0x3070CB6B3C7F21D3 || !v68 || !v70 || !*(_QWORD *)(v86 + 32))
    goto LABEL_779;
  if (v35.n128_u32[0] > 1uLL)
  {
    v87 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v48 <= 0x1AF456233693CD46uLL)
      v87 = 0x1AF456233693CD46uLL % *(_QWORD *)&v48;
  }
  else
  {
    v87 = v83 & 0x1AF456233693CD46;
  }
  v154 = *(_QWORD **)(v57 + 8 * v87);
  if (!v154)
    goto LABEL_763;
  v155 = (_QWORD *)*v154;
  if (!v155)
    goto LABEL_763;
  if (v35.n128_u32[0] < 2uLL)
  {
    while (1)
    {
      v156 = v155[1];
      if (v156 == 0x1AF456233693CD46)
      {
        if (v155[2] == 0x1AF456233693CD46)
          goto LABEL_761;
      }
      else if ((v156 & v83) != v87)
      {
        goto LABEL_763;
      }
      v155 = (_QWORD *)*v155;
      if (!v155)
        goto LABEL_763;
    }
  }
  while (2)
  {
    v157 = v155[1];
    if (v157 != 0x1AF456233693CD46)
    {
      if (v157 >= *(_QWORD *)&v48)
        v157 %= *(_QWORD *)&v48;
      if (v157 != v87)
        goto LABEL_763;
      goto LABEL_345;
    }
    if (v155[2] != 0x1AF456233693CD46)
    {
LABEL_345:
      v155 = (_QWORD *)*v155;
      if (!v155)
        goto LABEL_763;
      continue;
    }
    break;
  }
LABEL_761:
  v452 = v155[5];
  if (*(_QWORD *)(v452 + 8) == 0x1AF456233693CD46)
  {
    v453 = *(float64x2_t **)(v452 + 32);
    goto LABEL_764;
  }
LABEL_763:
  v453 = 0;
LABEL_764:
  v454 = v453[31];
  v455 = v453[194].f64[0];
  if (fabs(v455) > 2.22044605e-16)
    v454 = vmlaq_n_f64(v454, v453[193], -v453[32].f64[0] / v455);
  v456 = v453[61].f64[0];
  memset(&buf[40], 0, 40);
  memset(&buf[8], 0, 32);
  *(_QWORD *)buf = 0x3FF0000000000000;
  *(_QWORD *)&buf[40] = 0x3FF0000000000000;
  v572 = (float64x2_t)0x3FF0000000000000uLL;
  v516 = v454;
  v573 = v454;
  v574 = xmmword_19FFB33A0;
  v457 = v453[87].f64[0];
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v458 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v458, "gridZAdjustment");
  *(double *)&v574 = v457 + v459 * 0.0000000249532021;

  memset(&v556[16], 0, 40);
  memset(&v557[8], 0, 32);
  *(_OWORD *)v556 = 0u;
  *(_OWORD *)&v555[8] = 0u;
  *(double *)v555 = v456;
  *(double *)&v556[16] = v456;
  v558 = 0x3FF0000000000000;
  *(_QWORD *)v557 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>((double *)v552, (double *)buf, (double *)v555);
  gm::operator*<double,4,4,4>(v545.f64, &v453[50].f64[1], (double *)v552);
  v460 = v456 * 1000000.0;
  v461 = log10(v460);
  *(double *)&v462 = __exp10(floor(v461));
  v463 = v460 / *(double *)&v462;
  v538 = 0u;
  v540 = 0;
  v543 = 0u;
  v542 = 0u;
  v539 = 0u;
  v537 = 0u;
  *(_OWORD *)&v536[8] = 0u;
  *(double *)v536 = v463;
  *(double *)&v538 = v463;
  v544 = 0x3FF0000000000000;
  v541 = 0x3FF0000000000000;
  v529 = 0u;
  v531 = 0;
  v530 = 0u;
  v528 = 0u;
  v527 = 0u;
  v526 = 0x3FF0000000000000;
  *(_QWORD *)&v529 = 0x3FF0000000000000;
  v533 = 0;
  v532 = 0x3FF0000000000000;
  v464 = vdivq_f64(vmulq_f64(v516, (float64x2_t)vdupq_n_s64(0x412E848000000000uLL)), (float64x2_t)vdupq_lane_s64(v462, 0));
  v534 = vsubq_f64(v464, vrndmq_f64(v464));
  v535 = xmmword_19FFB33A0;
  gm::operator*<double,4,4,4>(v525[0].f64, (double *)&v526, (double *)v536);
  v465 = *(std::__shared_weak_count **)(*((_QWORD *)this + 6) + 16);
  v524 = 0;
  v522 = 0;
  v523 = 0;
  shared_owners = v465->__shared_owners_;
  v559 = 0;
  v560 = v465;
  v561 = 0;
  v562 = shared_owners;
  v563 = 1;
  if (shared_owners)
    v467 = v465[3].__vftable;
  else
    v467 = 0;
  v468 = v463 * 0.1;
  v564 = v467;
  ggl::BufferMemory::operator=(&v522, (uint64_t)&v559);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v559);
  v469 = v524;
  v524[16] = *(_DWORD *)v68;
  v469[17] = *((_DWORD *)v68 + 1);
  v469[18] = *((_DWORD *)v68 + 2);
  v469[19] = *((_DWORD *)v68 + 3);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v522);
  v470 = *(std::__shared_weak_count **)(*((_QWORD *)this + 6) + 32);
  v524 = 0;
  v522 = 0;
  v523 = 0;
  v471 = v470->__shared_owners_;
  v559 = 0;
  v560 = v470;
  v561 = 0;
  v562 = v471;
  v563 = 1;
  if (v471)
    v472 = v470[3].__vftable;
  else
    v472 = 0;
  v564 = v472;
  ggl::BufferMemory::operator=(&v522, (uint64_t)&v559);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v559);
  v473 = (float *)v524;
  *v524 = *((_DWORD *)v68 + 4);
  v473[1] = v68[5];
  v473[2] = v68[6];
  v473[3] = v68[7];
  v474 = v468;
  v473[6] = v474;
  v473[12] = 0.0;
  v517 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v545), v546);
  v512 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v547), *(float64x2_t *)v548);
  v509 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v548[16]), v549);
  v503 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v550), v551);
  v475 = (std::__shared_weak_count *)**((_QWORD **)this + 6);
  v521 = 0;
  v519 = 0;
  v520 = 0;
  v476 = v475->__shared_owners_;
  v559 = 0;
  v560 = v475;
  v561 = 0;
  v562 = v476;
  v563 = 1;
  if (v476)
    v477 = v475[3].__vftable;
  else
    v477 = 0;
  v564 = v477;
  ggl::BufferMemory::operator=(&v519, (uint64_t)&v559);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v559);
  v478 = v521;
  *v521 = v517;
  v478[1] = v512;
  v478[2] = v509;
  v478[3] = v503;
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v519);
  v518 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v525[0]), v525[1]);
  v513 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v525[2]), v525[3]);
  v510 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v525[4]), v525[5]);
  v504 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v525[6]), v525[7]);
  v479 = *(std::__shared_weak_count **)(*((_QWORD *)this + 6) + 16);
  v521 = 0;
  v519 = 0;
  v520 = 0;
  v480 = v479->__shared_owners_;
  v559 = 0;
  v560 = v479;
  v561 = 0;
  v562 = v480;
  v563 = 1;
  if (v480)
    v481 = v479[3].__vftable;
  else
    v481 = 0;
  v564 = v481;
  ggl::BufferMemory::operator=(&v519, (uint64_t)&v559);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v559);
  v482 = v521;
  *v521 = v518;
  v482[1] = v513;
  v482[2] = v510;
  v482[3] = v504;
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v519);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v522);
  v47 = a2[1];
  v48 = (int8x8_t)v47[1];
LABEL_779:
  if (v48)
  {
    v35.n128_u64[0] = (unint64_t)vcnt_s8(v48);
    v35.n128_u16[0] = vaddlv_u8((uint8x8_t)v35.n128_u64[0]);
    if (v35.n128_u32[0] > 1uLL)
    {
      v483 = 0xE42D19AFCA302E68;
      if (*(_QWORD *)&v48 <= 0xE42D19AFCA302E68)
        v483 = 0xE42D19AFCA302E68 % *(_QWORD *)&v48;
    }
    else
    {
      v483 = (*(_QWORD *)&v48 - 1) & 0xE42D19AFCA302E68;
    }
    v484 = *(_QWORD **)(*v47 + 8 * v483);
    if (v484)
    {
      v485 = (_QWORD *)*v484;
      if (v485)
      {
        if (v35.n128_u32[0] < 2uLL)
        {
          v486 = *(_QWORD *)&v48 - 1;
          while (1)
          {
            v488 = v485[1];
            if (v488 == 0xE42D19AFCA302E68)
            {
              if (v485[2] == 0xE42D19AFCA302E68)
                goto LABEL_800;
            }
            else if ((v488 & v486) != v483)
            {
              goto LABEL_803;
            }
            v485 = (_QWORD *)*v485;
            if (!v485)
              goto LABEL_803;
          }
        }
        do
        {
          v487 = v485[1];
          if (v487 == 0xE42D19AFCA302E68)
          {
            if (v485[2] == 0xE42D19AFCA302E68)
            {
LABEL_800:
              v489 = v485[5];
              if (*(_QWORD *)(v489 + 8) == 0xE42D19AFCA302E68 && *(_QWORD *)(v489 + 32))
              {
                v490 = md::PassList::commandBufferForId(*(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8), *((_BYTE *)this + 57), *((_BYTE *)this + 58));
                ggl::CommandBuffer::pushRenderItem(v490, (ggl::RenderItem *)(*((_QWORD *)this + 6) + 152));
              }
              break;
            }
          }
          else
          {
            if (v487 >= *(_QWORD *)&v48)
              v487 %= *(_QWORD *)&v48;
            if (v487 != v483)
              break;
          }
          v485 = (_QWORD *)*v485;
        }
        while (v485);
      }
    }
  }
LABEL_803:
  if (!v570)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *, __n128))(*v570 + 48))(v570, v35);
  result = v570;
  if (v570 == v569)
  {
    v492 = 4;
    result = v569;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v492))();
  }
  else if (v570)
  {
    v492 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v492))();
  }
  return result;
}

