void md::LabelNavEtaLabeler::searchForPlacementWithinSection(md::NavContext const*,geo::Frustum<double> const&,md::RouteLabelState const&,GEOComposedRoute *,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>> const&,md::EtaPlacementScore const*,md::EtaLabelPlacement &,unsigned char)const::$_0::operator()(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  size_t prime;
  void *v15;
  BOOL v16;
  unint64_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint64_t *i;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  unsigned __int8 *v34;
  _QWORD *v35;
  float *v36;
  float v37;
  int v38;
  _BYTE *v39;
  unsigned int v40;
  float *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  float v45[4];
  __int128 v46;
  uint64_t v47;
  void *v48[2];
  void *__p[2];
  float v50;

  v10 = *(_QWORD *)a1;
  v11 = md::LabelNavEtaLabeler::scoreEtaLabelPosition(*(_QWORD *)a1, *(_QWORD **)(a1 + 8), a2, *(float *)(a1 + 80));
  v13 = v12;
  prime = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  *(_OWORD *)v48 = 0u;
  *(_OWORD *)__p = 0u;
  v50 = 1.0;
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v48, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v15 = v48[1];
    v16 = (void *)prime >= v48[1];
    if ((void *)prime > v48[1])
      goto LABEL_17;
  }
  else
  {
    v15 = 0;
    v16 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v16)
  {
    v17 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v50);
    if ((unint64_t)v15 < 3
      || (v18 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v18.i16[0] = vaddlv_u8(v18), v18.u32[0] > 1uLL))
    {
      v17 = std::__next_prime(v17);
    }
    else
    {
      v19 = 1 << -(char)__clz(v17 - 1);
      if (v17 >= 2)
        v17 = v19;
    }
    if (prime <= v17)
      prime = v17;
    if (prime < (unint64_t)v15)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 16); i; i = (uint64_t *)*i)
  {
    v24 = *((float *)i + 7);
    v25 = *((float *)i + 5);
    if (v24 >= v25 && (v26 = *((float *)i + 8), v27 = *((float *)i + 6), v26 >= v27))
    {
      v32 = a2[1];
      v31 = *a2 + v25;
      v28 = v32 + v27;
      v30 = *a2 + v24;
      v29 = v32 + v26;
    }
    else
    {
      v28 = 3.4028e38;
      v29 = -3.4028e38;
      v30 = -3.4028e38;
      v31 = 3.4028e38;
    }
    v33 = *(_QWORD *)(a1 + 8);
    v45[0] = v31;
    v45[1] = v28;
    v45[2] = v30;
    v45[3] = v29;
    md::LabelNavEtaLabeler::scoreEtaLabelRect((uint64_t)&v46, (_QWORD *)v10, v33, v45, (float *)(a1 + 108));
    v34 = (unsigned __int8 *)(i + 2);
    v35 = std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>((uint64_t)v48, *((_BYTE *)i + 16), (_BYTE *)i + 16);
    *(_OWORD *)((char *)v35 + 20) = v46;
    *(_QWORD *)((char *)v35 + 36) = v47;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) == 3
      && *((float *)std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>((uint64_t)v48, *v34, (_BYTE *)i + 16)+ 7) >= 1.0|| v11 < *(float *)(a1 + 124)|| *((float *)std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>((uint64_t)v48, *v34, (_BYTE *)i + 16)+ 6) >= 1.0)
    {
      continue;
    }
    v36 = (float *)std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>((uint64_t)v48, *v34, (_BYTE *)i + 16);
    v37 = (float)(v36[6] + v36[5]) + (float)(v36[7] + v36[8]);
    if (v37 >= 1.0)
      v38 = (int)fminf(-(float)(*(float *)(v10 + 248) - (float)(v37 * *(float *)(v10 + 248))), 254.0) + 1;
    else
      LOBYTE(v38) = 0;
    v39 = *(_BYTE **)(a1 + 32);
    v40 = *v39;
    if (v40 == v38)
    {
      v41 = *(float **)(a1 + 16);
      if (v13 >= v41[1])
        continue;
    }
    else
    {
      if (v40 <= v38)
        continue;
      v41 = *(float **)(a1 + 16);
    }
    *v41 = v11;
    v41[1] = v13;
    *v39 = v38;
    v21 = std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>((uint64_t)v48, *v34, (_BYTE *)i + 16);
    v22 = *(_QWORD *)(a1 + 24);
    v23 = *(_OWORD *)((char *)v21 + 20);
    *(_QWORD *)(v22 + 16) = *(_QWORD *)((char *)v21 + 36);
    *(_OWORD *)v22 = v23;
    **(_BYTE **)(a1 + 40) = *v34;
    **(_QWORD **)(a1 + 48) = a3;
    **(_QWORD **)(a1 + 56) = a4;
    **(float **)(a1 + 64) = a5;
  }
  v42 = __p[0];
  if (__p[0])
  {
    do
    {
      v43 = (_QWORD *)*v42;
      operator delete(v42);
      v42 = v43;
    }
    while (v43);
  }
  v44 = v48[0];
  v48[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_19F5FE3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F5FE3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::__unordered_map_hasher<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::hash<md::RoadSignOrientation>,std::equal_to<md::RoadSignOrientation>,true>,std::__unordered_map_equal<md::RoadSignOrientation,std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>,std::equal_to<md::RoadSignOrientation>,std::hash<md::RoadSignOrientation>,true>,std::allocator<std::__hash_value_type<md::RoadSignOrientation,md::LabelRectScore>>>::__emplace_unique_key_args<md::RoadSignOrientation,std::piecewise_construct_t const&,std::tuple<md::RoadSignOrientation const&>,std::tuple<>>(uint64_t a1, unsigned __int8 a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  *(_QWORD *)((char *)v10 + 36) = 0;
  *(_QWORD *)((char *)v10 + 20) = 0;
  *(_QWORD *)((char *)v10 + 28) = 0;
  *((_BYTE *)v10 + 40) = 1;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F5FE6D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::pair[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;

  *a1 = *(id *)a2;
  v4 = *(id *)(a2 + 8);
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 32);
  a1[3] = 0;
  a1[1] = v4;
  a1[4] = v5;
  a1[5] = 0;
  a1[2] = a1 + 3;
  std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *> *,long>>>(a1 + 2, *(_QWORD **)(a2 + 16), (_QWORD *)(a2 + 24));
  a1[6] = &off_1E42B4DD0;
  a1[7] = 0;
  v6 = *(id *)(a2 + 56);
  v7 = (void *)a1[7];
  a1[7] = v6;

  return a1;
}

void sub_19F5FE774(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v2, *(_QWORD *)(v1 + 24));

  _Unwind_Resume(a1);
}

uint64_t std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>::~pair(uint64_t a1)
{
  *(_QWORD *)(a1 + 48) = &off_1E42B4DD0;

  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a1 + 16, *(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t std::__split_buffer<std::pair<md::RouteRangeAnnotationRequest,geo::_retain_ptr<VKLabelNavRouteEta * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    *(_QWORD *)(i - 24) = &off_1E42B4DD0;

    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(i - 56, *(_QWORD *)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

id *geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>::operator[](uint64_t a1, uint64_t a2)
{
  id *v4;
  char v5;
  id *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  char v13;
  id *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  id *v23;
  id *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  id *v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  id *v47;
  uint64_t *v48;
  uint64_t v49;
  id *v50;
  unint64_t *v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  char *v57;
  id *v58;
  id *v59;
  BOOL v60;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  uint64_t *v87;
  uint64_t v88[3];
  __int128 v89;
  __int128 v90;
  int v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;

  v4 = *(id **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    goto LABEL_4;
  while (1)
  {
    v5 = md::RouteRangeAnnotationRequest::operator==((id *)a2, (uint64_t)v4);
    v6 = *(id **)(a1 + 8);
    if ((v5 & 1) != 0)
      break;
    v4 += 48;
    if (v4 == v6)
      goto LABEL_4;
  }
  if (v4 == v6)
  {
LABEL_4:
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    memset(v71, 0, sizeof(v71));
    v69 = 0u;
    v70 = 0u;
    v65 = 0u;
    v66 = 0u;
    v64 = 0u;
    LODWORD(v66) = 1065353216;
    v68 = 0uLL;
    v67 = 0uLL;
    {
      v62 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v62, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *((_QWORD *)&v68 + 1) = mdm::Allocator::instance(void)::alloc;
    LODWORD(v71[0]) = 2139095039;
    memset((char *)v71 + 4, 0, 24);
    BYTE12(v71[1]) = 1;
    *(_QWORD *)&v73 = 0;
    v82 = 0uLL;
    v83 = 0;
    {
      v63 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v63, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v84 = mdm::Allocator::instance(void)::alloc;
    v85 = *(id *)a2;
    v9 = *(id *)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 32);
    v88[0] = 0;
    v88[1] = v10;
    v88[2] = 0;
    v86 = v9;
    v87 = v88;
    std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *> *,long>>>((uint64_t *)&v87, *(_QWORD **)(a2 + 16), (_QWORD *)(a2 + 24));
    v11 = v64;
    v64 = 0uLL;
    v89 = v11;
    v90 = v65;
    v91 = v66;
    if (*((_QWORD *)&v65 + 1))
    {
      v12 = *(_QWORD *)(v65 + 8);
      if ((*((_QWORD *)&v11 + 1) & (*((_QWORD *)&v11 + 1) - 1)) != 0)
      {
        if (v12 >= *((_QWORD *)&v11 + 1))
          v12 %= *((_QWORD *)&v11 + 1);
      }
      else
      {
        v12 &= *((_QWORD *)&v11 + 1) - 1;
      }
      *(_QWORD *)(v11 + 8 * v12) = &v90;
      v65 = 0uLL;
    }
    v93 = v67;
    v97 = v71[0];
    v98 = v71[1];
    v95 = v69;
    v96 = v70;
    v105 = v78;
    v106 = v79;
    v107 = v80;
    v108 = v81;
    v101 = v74;
    v102 = v75;
    v103 = v76;
    v104 = v77;
    v99 = v72;
    v100 = v73;
    v92 = BYTE8(v66);
    v94 = v68;
    *(_QWORD *)&v68 = 0;
    v67 = 0uLL;
    v109 = v82;
    v111 = v84;
    v110 = v83;
    v83 = 0;
    v82 = 0uLL;
    v4 = *(id **)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
    {
      while (1)
      {
        v13 = md::RouteRangeAnnotationRequest::operator==(&v85, (uint64_t)v4);
        v14 = *(id **)(a1 + 8);
        if ((v13 & 1) != 0)
          break;
        v4 += 48;
        if (v4 == v14)
        {
          v4 = *(id **)(a1 + 8);
          goto LABEL_19;
        }
      }
      if (v4 != v14)
        goto LABEL_50;
    }
LABEL_19:
    v15 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v4 >= v15)
    {
      v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 7);
      if (v17 + 1 > 0xAAAAAAAAAAAAAALL)
        abort();
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a1) >> 7);
      v19 = 2 * v18;
      if (2 * v18 <= v17 + 1)
        v19 = v17 + 1;
      if (v18 >= 0x55555555555555)
        v20 = 0xAAAAAAAAAAAAAALL;
      else
        v20 = v19;
      v116 = a1 + 16;
      if (v20)
      {
        if (v20 > 0xAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v21 = (char *)operator new(384 * v20);
      }
      else
      {
        v21 = 0;
      }
      v112 = v21;
      v113 = &v21[384 * v17];
      v114 = v113;
      v115 = &v21[384 * v20];
      std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>::pair[abi:nn180100](v113, (uint64_t)&v85);
      v22 = v113;
      v16 = v114 + 384;
      v23 = *(id **)a1;
      v24 = *(id **)(a1 + 8);
      if (v24 == *(id **)a1)
      {
        *(_QWORD *)a1 = v113;
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = v115;
        if (!v24)
          goto LABEL_49;
      }
      else
      {
        v25 = 0;
        do
        {
          v38 = (__int128 *)&v24[v25 - 48];
          v39 = *v38;
          v24[v25 - 47] = 0;
          *(_QWORD *)v38 = 0;
          *(_OWORD *)&v22[v25 * 8 - 384] = v39;
          v40 = (uint64_t *)&v22[v25 * 8 - 368];
          v41 = (uint64_t *)&v24[v25 - 46];
          *v40 = *v41;
          v42 = (uint64_t)&v22[v25 * 8 - 360];
          v43 = &v24[v25 - 45];
          *(_OWORD *)v42 = *(_OWORD *)v43;
          v44 = (uint64_t *)&v24[v25 - 43];
          v45 = *v44;
          *(_QWORD *)&v22[v25 * 8 - 344] = *v44;
          if (v45)
          {
            *(_QWORD *)(*(_QWORD *)v42 + 16) = v42;
            *v41 = (uint64_t)v43;
            *v43 = 0;
            *v44 = 0;
          }
          else
          {
            *v40 = v42;
          }
          v46 = &v22[v25 * 8];
          v47 = &v24[v25];
          v48 = (uint64_t *)&v24[v25 - 42];
          v49 = *v48;
          *v48 = 0;
          v50 = &v24[v25 - 41];
          *(_QWORD *)&v22[v25 * 8 - 336] = v49;
          v51 = (unint64_t *)&v22[v25 * 8 - 328];
          *v51 = (unint64_t)*v50;
          *v50 = 0;
          v52 = &v22[v25 * 8 - 320];
          v53 = (uint64_t *)&v24[v25 - 40];
          v54 = *v53;
          *(_QWORD *)v52 = *v53;
          v55 = v24[v25 - 39];
          *(_QWORD *)&v22[v25 * 8 - 312] = v55;
          *(_DWORD *)&v22[v25 * 8 - 304] = v24[v25 - 38];
          if (v55)
          {
            v26 = *(_QWORD *)(v54 + 8);
            v56 = *v51;
            if ((v56 & (v56 - 1)) != 0)
            {
              if (v26 >= v56)
                v26 %= v56;
            }
            else
            {
              v26 &= v56 - 1;
            }
            *(_QWORD *)(v49 + 8 * v26) = v52;
            *v53 = 0;
            v24[v25 - 39] = 0;
          }
          *(v46 - 296) = *((_BYTE *)v47 - 296);
          v27 = v46 - 288;
          v28 = (char *)(v47 - 36);
          *((_QWORD *)v27 + 1) = 0;
          *((_QWORD *)v27 + 2) = 0;
          *(_QWORD *)v27 = 0;
          *((_QWORD *)v46 - 33) = *(v47 - 33);
          *(_OWORD *)v27 = *((_OWORD *)v47 - 18);
          *((_QWORD *)v46 - 34) = *(v47 - 34);
          *((_QWORD *)v28 + 2) = 0;
          *(v47 - 35) = 0;
          *(_QWORD *)v28 = 0;
          v29 = *((_OWORD *)v47 - 12);
          v31 = *((_OWORD *)v47 - 15);
          v30 = *((_OWORD *)v47 - 14);
          *((_OWORD *)v46 - 13) = *((_OWORD *)v47 - 13);
          *((_OWORD *)v46 - 12) = v29;
          *((_OWORD *)v46 - 15) = v31;
          *((_OWORD *)v46 - 14) = v30;
          *((_OWORD *)v46 - 16) = *((_OWORD *)v47 - 16);
          v32 = *((_OWORD *)v47 - 10);
          v33 = *((_OWORD *)v47 - 9);
          v34 = *((_OWORD *)v47 - 7);
          *((_OWORD *)v46 - 8) = *((_OWORD *)v47 - 8);
          *((_OWORD *)v46 - 7) = v34;
          *((_OWORD *)v46 - 10) = v32;
          *((_OWORD *)v46 - 9) = v33;
          v35 = *((_OWORD *)v47 - 6);
          v36 = *((_OWORD *)v47 - 5);
          v37 = *((_OWORD *)v47 - 3);
          *((_OWORD *)v46 - 4) = *((_OWORD *)v47 - 4);
          *((_OWORD *)v46 - 3) = v37;
          *((_OWORD *)v46 - 6) = v35;
          *((_OWORD *)v46 - 5) = v36;
          *((_OWORD *)v46 - 11) = *((_OWORD *)v47 - 11);
          *((_QWORD *)v46 - 3) = 0;
          *((_QWORD *)v46 - 2) = 0;
          *((_QWORD *)v46 - 4) = 0;
          *((_QWORD *)v46 - 1) = *(v47 - 1);
          *((_OWORD *)v46 - 2) = *((_OWORD *)v47 - 2);
          *((_QWORD *)v46 - 2) = *(v47 - 2);
          *(v47 - 4) = 0;
          *(v47 - 3) = 0;
          *(v47 - 2) = 0;
          v25 -= 48;
        }
        while (&v24[v25] != v23);
        v57 = &v22[v25 * 8];
        v24 = *(id **)a1;
        v58 = *(id **)(a1 + 8);
        *(_QWORD *)a1 = v57;
        *(_QWORD *)(a1 + 8) = v16;
        *(_QWORD *)(a1 + 16) = v115;
        if (v58 != v24)
        {
          v59 = v58 - 48;
          do
          {
            md::RouteLabelState::~RouteLabelState((md::RouteLabelState *)(v59 + 6));
            std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v59 + 2), (uint64_t)v59[3]);

            v60 = v59 == v24;
            v59 -= 48;
          }
          while (!v60);
        }
        if (!v24)
          goto LABEL_49;
      }
      operator delete(v24);
    }
    else
    {
      std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>::pair[abi:nn180100](v4, (uint64_t)&v85);
      v16 = v4 + 48;
      *(_QWORD *)(a1 + 8) = v16;
    }
LABEL_49:
    *(_QWORD *)(a1 + 8) = v16;
    v4 = (id *)(v16 - 48);
LABEL_50:
    md::RouteLabelState::~RouteLabelState((md::RouteLabelState *)&v89);
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v87, v88[0]);

    md::RouteLabelState::~RouteLabelState((md::RouteLabelState *)&v64);
  }
  return v4 + 6;
}

void sub_19F5FEEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;

  std::__split_buffer<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>::~__split_buffer(v52 - 104);
  std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>::~pair((uint64_t)&a52);
  md::RouteLabelState::~RouteLabelState((md::RouteLabelState *)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::PolylineCollider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB7B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PolylineCollider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB7B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::PolylineCollider>::__on_zero_shared(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

_QWORD *std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>::pair[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;

  *a1 = *(id *)a2;
  v4 = *(id *)(a2 + 8);
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 32);
  a1[3] = 0;
  a1[1] = v4;
  a1[4] = v5;
  a1[5] = 0;
  a1[2] = a1 + 3;
  std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *> *,long>>>(a1 + 2, *(_QWORD **)(a2 + 16), (_QWORD *)(a2 + 24));
  md::RouteLabelState::RouteLabelState((md::RouteLabelState *)(a1 + 6), (const md::RouteLabelState *)(a2 + 48));
  return a1;
}

void sub_19F5FF068(_Unwind_Exception *a1)
{
  md::RouteRangeAnnotationRequest *v1;

  md::RouteRangeAnnotationRequest::~RouteRangeAnnotationRequest(v1);
  _Unwind_Resume(a1);
}

void sub_19F5FF07C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v2, *(_QWORD *)(v1 + 24));

  _Unwind_Resume(a1);
}

uint64_t std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>::~pair(uint64_t a1)
{
  md::RouteLabelState::~RouteLabelState((md::RouteLabelState *)(a1 + 48));
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a1 + 16, *(_QWORD *)(a1 + 24));

  return a1;
}

uint64_t std::__split_buffer<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 384;
    md::RouteLabelState::~RouteLabelState((md::RouteLabelState *)(i - 336));
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(i - 368, *(_QWORD *)(i - 360));

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void md::RouteRangeAnnotationRequest::~RouteRangeAnnotationRequest(md::RouteRangeAnnotationRequest *this)
{
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)this + 16, *((_QWORD *)this + 3));

}

uint64_t std::__split_buffer<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(i - 32, *(_QWORD *)(i - 24));

  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

uint64_t std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::__emplace_hint_unique_key_args<md::RouteRangeAnnotationRequest,md::RouteRangeAnnotationRequest const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v29;

  v6 = a2;
  v8 = (uint64_t *)(a1 + 8);
  if (a1 + 8 == a2)
    goto LABEL_15;
  v9 = *(_QWORD *)a3;
  v10 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)a3 != v10)
  {
    if (*(_QWORD *)a3 >= v10)
    {
      v11 = v10 >= v9;
      if (v10 != v9)
        goto LABEL_5;
      goto LABEL_10;
    }
LABEL_15:
    v17 = *(_QWORD *)v6;
    if (*(_QWORD *)a1 == v6)
    {
      v19 = v6;
      if (v17)
        goto LABEL_27;
    }
    else
    {
      if (v17)
      {
        v18 = *(_QWORD *)v6;
        do
        {
          v19 = v18;
          v18 = *(_QWORD *)(v18 + 8);
        }
        while (v18);
      }
      else
      {
        v20 = v6;
        do
        {
          v19 = *(_QWORD *)(v20 + 16);
          v21 = *(_QWORD *)v19 == v20;
          v20 = v19;
        }
        while (v21);
      }
      v22 = *(_QWORD *)(v19 + 32);
      if (v22 == *(_QWORD *)a3)
      {
        if (objc_msgSend(*(id *)(v19 + 40), "compare:", *(_QWORD *)(a3 + 8)) != -1)
          goto LABEL_43;
        if (*(_QWORD *)v6)
        {
LABEL_27:
          v29 = (uint64_t *)v19;
          v14 = (uint64_t *)(v19 + 8);
          v6 = *v14;
          if (*v14)
            return v6;
          goto LABEL_44;
        }
      }
      else
      {
        if (v22 >= *(_QWORD *)a3)
          goto LABEL_43;
        if (v17)
          goto LABEL_27;
      }
    }
    v29 = (uint64_t *)v6;
    v14 = (uint64_t *)v6;
    v6 = *(_QWORD *)v6;
    if (v6)
      return v6;
    goto LABEL_44;
  }
  if (objc_msgSend(*(id *)(a3 + 8), "compare:", *(_QWORD *)(a2 + 40)) == -1)
    goto LABEL_15;
  v12 = *(_QWORD *)(v6 + 32);
  v11 = v12 >= *(_QWORD *)a3;
  if (v12 != *(_QWORD *)a3)
  {
LABEL_5:
    if (v11)
      return v6;
    goto LABEL_11;
  }
LABEL_10:
  if (objc_msgSend(*(id *)(v6 + 40), "compare:", *(_QWORD *)(a3 + 8)) != -1)
    return v6;
LABEL_11:
  v14 = (uint64_t *)(v6 + 8);
  v13 = *(_QWORD *)(v6 + 8);
  if (v13)
  {
    v15 = *(uint64_t **)(v6 + 8);
    do
    {
      v16 = v15;
      v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  else
  {
    v23 = (uint64_t *)v6;
    do
    {
      v16 = (uint64_t *)v23[2];
      v21 = *v16 == (_QWORD)v23;
      v23 = v16;
    }
    while (!v21);
  }
  if (v16 != v8)
  {
    v24 = v16[4];
    if (*(_QWORD *)a3 == v24)
    {
      if (objc_msgSend(*(id *)(a3 + 8), "compare:", v16[5]) == -1)
      {
        if (*v14)
        {
LABEL_40:
          v29 = v16;
          v14 = v16;
          v6 = *v16;
          if (*v16)
            return v6;
          goto LABEL_44;
        }
        goto LABEL_49;
      }
    }
    else if (*(_QWORD *)a3 < v24)
    {
      goto LABEL_39;
    }
LABEL_43:
    v14 = std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::__find_equal<md::RouteRangeAnnotationRequest>(a1, &v29, (unint64_t *)a3);
    v6 = *v14;
    if (*v14)
      return v6;
    goto LABEL_44;
  }
LABEL_39:
  if (v13)
    goto LABEL_40;
LABEL_49:
  v29 = (uint64_t *)v6;
  v6 = *v14;
  if (*v14)
    return v6;
LABEL_44:
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), 80, 8);
  geo::StdAllocator<std::__tree_node<md::RouteRangeAnnotationRequest,void *>,mdm::Allocator>::construct<md::RouteRangeAnnotationRequest,md::RouteRangeAnnotationRequest const&>((uint64_t *)(v6 + 32), a4);
  v25 = v29;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v14 = v6;
  v26 = **(_QWORD **)a1;
  v27 = (uint64_t *)v6;
  if (v26)
  {
    *(_QWORD *)a1 = v26;
    v27 = (uint64_t *)*v14;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
  ++*(_QWORD *)(a1 + 24);
  return v6;
}

void sub_19F5FF494(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 16) + 40))(*(_QWORD *)(v1 + 16), v2, 80);
  _Unwind_Resume(exception_object);
}

uint64_t *geo::StdAllocator<std::__tree_node<md::RouteRangeAnnotationRequest,void *>,mdm::Allocator>::construct<md::RouteRangeAnnotationRequest,md::RouteRangeAnnotationRequest const&>(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  id v4;
  uint64_t v5;

  if (result)
  {
    v3 = result;
    *result = (uint64_t)*(id *)a2;
    v4 = *(id *)(a2 + 8);
    v3[2] = 0;
    v5 = *(_QWORD *)(a2 + 32);
    v3[3] = 0;
    v3[1] = (uint64_t)v4;
    v3[4] = v5;
    v3[5] = 0;
    v3[2] = (uint64_t)(v3 + 3);
    return std::map<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__tree_node<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,void *> *,long>>>(v3 + 2, *(_QWORD **)(a2 + 16), (_QWORD *)(a2 + 24));
  }
  return result;
}

void sub_19F5FF52C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v2, *(_QWORD *)(v1 + 24));

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::__find_equal<md::RouteRangeAnnotationRequest>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      v7 = v4;
      v8 = *a3;
      v9 = v4[4];
      if (*a3 == v9)
      {
        if (objc_msgSend((id)a3[1], "compare:", v7[5]) == -1)
          goto LABEL_3;
        v11 = v7[4];
        v10 = v11 >= *a3;
        if (v11 == *a3)
        {
LABEL_12:
          if (objc_msgSend((id)v7[5], "compare:", a3[1]) != -1)
            goto LABEL_16;
          goto LABEL_13;
        }
LABEL_7:
        if (v10)
          goto LABEL_16;
LABEL_13:
        v5 = v7 + 1;
        v4 = (uint64_t *)v7[1];
        if (!v4)
          goto LABEL_16;
      }
      else
      {
        if (*a3 >= v9)
        {
          v10 = v9 >= v8;
          if (v9 == v8)
            goto LABEL_12;
          goto LABEL_7;
        }
LABEL_3:
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_16;
      }
    }
  }
  v7 = (uint64_t *)(a1 + 8);
LABEL_16:
  *a2 = v7;
  return v5;
}

void std::__function::__func<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_1,std::allocator<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_1>,BOOL ()(md::RouteRangeAnnotationRequest const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_1,std::allocator<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_1>,BOOL ()(md::RouteRangeAnnotationRequest const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEED0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_1,std::allocator<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_1>,BOOL ()(md::RouteRangeAnnotationRequest const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEED0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_1,std::allocator<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_1>,BOOL ()(md::RouteRangeAnnotationRequest const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)(a1 + 8);
  objc_msgSend(*(id *)(a2 + 8), "etaDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "routeEtaType");

  v5 = (int8x8_t)v2[1];
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = v4;
      if (v4 >= *(_QWORD *)&v5)
        v7 = v4 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & v4;
    }
    v8 = *(_QWORD **)(*v2 + 8 * v7);
    if (v8)
    {
      v8 = (_QWORD *)*v8;
      if (v8)
      {
        if (v6.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v4 == v11)
            {
              if (v8[2] == v4)
                return v8 != 0;
            }
            else if ((v11 & v9) != v7)
            {
              goto LABEL_21;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              return v8 != 0;
          }
        }
        do
        {
          v10 = v8[1];
          if (v4 == v10)
          {
            if (v8[2] == v4)
              return v8 != 0;
          }
          else
          {
            if (v10 >= *(_QWORD *)&v5)
              v10 %= *(_QWORD *)&v5;
            if (v10 != v7)
              goto LABEL_21;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
  else
  {
LABEL_21:
    v8 = 0;
  }
  return v8 != 0;
}

void sub_19F5FF794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__54(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__55(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(result + 48);
  if (v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 56);
    v4 = *(_QWORD *)(result + 48);
    if (v3 != v1)
    {
      do
      {
        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v3 - 32, *(_QWORD *)(v3 - 24));

        v5 = *(void **)(v3 - 48);
        v3 -= 48;

      }
      while (v3 != v1);
      v4 = *(_QWORD *)(v2 + 48);
    }
    *(_QWORD *)(v2 + 56) = v1;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 72) + 40))(*(_QWORD *)(v2 + 72), v4, *(_QWORD *)(v2 + 64) - v4);
  }
  return result;
}

void ___ZN2md18LabelNavEtaLabeler25extractAndSortAnnotationsEP11VKRouteInfoNSt3__18functionIFbRKNS_27RouteRangeAnnotationRequestEEEE_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  __int128 v46;
  __int128 *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v3 = a2;
  v4 = a1[6];
  v5 = (void *)a1[4];
  v6 = v3;
  objc_msgSend(v5, "route");
  *(_QWORD *)&v46 = objc_claimAutoreleasedReturnValue();
  *((_QWORD *)&v46 + 1) = v6;
  *(_QWORD *)&v48 = 0;
  {
    v45 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v45, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)&v48 + 1) = mdm::Allocator::instance(void)::alloc;
  v49 = 0;
  v47 = &v48;
  v8 = a1[10];
  if (!v8 || ((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 48))(v8, &v46) & 1) == 0)
  {
    v9 = (_QWORD **)(v4 + 576);
    v10 = std::__tree<md::RouteRangeAnnotationRequest,std::less<md::RouteRangeAnnotationRequest>,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::__find_equal<md::RouteRangeAnnotationRequest>(v4 + 576, &v50, (unint64_t *)&v46);
    if (!*v10)
    {
      v11 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 592) + 16))(*(_QWORD *)(v4 + 592), 80, 8);
      geo::StdAllocator<std::__tree_node<md::RouteRangeAnnotationRequest,void *>,mdm::Allocator>::construct<md::RouteRangeAnnotationRequest,md::RouteRangeAnnotationRequest const&>(v11 + 4, (uint64_t)&v46);
      v12 = v50;
      *v11 = 0;
      v11[1] = 0;
      v11[2] = v12;
      *v10 = (uint64_t)v11;
      v13 = (_QWORD *)**v9;
      if (v13)
      {
        *v9 = v13;
        v11 = (uint64_t *)*v10;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 584), v11);
      ++*(_QWORD *)(v4 + 600);
    }
    v14 = *(_QWORD *)(a1[5] + 8);
    v15 = *(_QWORD *)(v14 + 56);
    v16 = *(_QWORD *)(v14 + 64);
    if (v15 >= v16)
    {
      v21 = *(_QWORD *)(v14 + 48);
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v21) >> 4);
      v23 = v22 + 1;
      if (v22 + 1 > 0x555555555555555)
        abort();
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v21) >> 4);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x2AAAAAAAAAAAAAALL)
        v25 = 0x555555555555555;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 72) + 16))(*(_QWORD *)(v14 + 72), 48 * v25, 8);
        v27 = v26 + 48 * v22;
        v28 = v26 + 48 * v25;
        if (v26)
        {
          v29 = v46;
          v46 = 0uLL;
          *(_OWORD *)v27 = v29;
          v30 = v26 + 48 * v22;
          *(_QWORD *)(v30 + 16) = v47;
          v31 = v30 + 16;
          v32 = v31 + 8;
          *(_OWORD *)(v31 + 8) = v48;
          v33 = v49;
          *(_QWORD *)(v31 + 24) = v49;
          if (v33)
          {
            *(_QWORD *)(*(_QWORD *)v32 + 16) = v32;
            v47 = &v48;
            *(_QWORD *)&v48 = 0;
            v49 = 0;
          }
          else
          {
            *(_QWORD *)v31 = v32;
          }
        }
      }
      else
      {
        v28 = 0;
        v27 = 48 * v22;
      }
      v20 = v27 + 48;
      v34 = *(_QWORD *)(v14 + 48);
      v35 = *(_QWORD *)(v14 + 56);
      if (v35 == v34)
      {
        *(_QWORD *)(v14 + 48) = v27;
        *(_QWORD *)(v14 + 56) = v20;
        v43 = *(_QWORD *)(v14 + 64);
        *(_QWORD *)(v14 + 64) = v28;
        if (!v35)
          goto LABEL_36;
      }
      else
      {
        v36 = 0;
        do
        {
          v37 = v27 + v36;
          v38 = v35 + v36;
          v39 = *(_OWORD *)(v35 + v36 - 48);
          *(_QWORD *)(v38 - 48) = 0;
          *(_QWORD *)(v38 - 40) = 0;
          *(_OWORD *)(v37 - 48) = v39;
          *(_QWORD *)(v37 - 32) = *(_QWORD *)(v35 + v36 - 32);
          v40 = v27 + v36 - 24;
          *(_OWORD *)(v37 - 24) = *(_OWORD *)(v35 + v36 - 24);
          v41 = *(_QWORD *)(v35 + v36 - 8);
          *(_QWORD *)(v37 - 8) = v41;
          if (v41)
          {
            *(_QWORD *)(*(_QWORD *)v40 + 16) = v40;
            *(_QWORD *)(v38 - 32) = v38 - 24;
            *(_QWORD *)(v38 - 24) = 0;
            *(_QWORD *)(v38 - 8) = 0;
          }
          else
          {
            *(_QWORD *)(v37 - 32) = v40;
          }
          v36 -= 48;
        }
        while (v35 + v36 != v34);
        v35 = *(_QWORD *)(v14 + 48);
        v42 = *(_QWORD *)(v14 + 56);
        *(_QWORD *)(v14 + 48) = v27 + v36;
        *(_QWORD *)(v14 + 56) = v20;
        v43 = *(_QWORD *)(v14 + 64);
        *(_QWORD *)(v14 + 64) = v28;
        while (v42 != v35)
        {
          std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v42 - 32, *(_QWORD *)(v42 - 24));

          v44 = *(void **)(v42 - 48);
          v42 -= 48;

        }
        if (!v35)
          goto LABEL_36;
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 72) + 40))(*(_QWORD *)(v14 + 72), v35, v43 - v35);
    }
    else
    {
      if (v15)
      {
        v17 = v46;
        v46 = 0uLL;
        *(_OWORD *)v15 = v17;
        *(_QWORD *)(v15 + 16) = v47;
        v18 = v15 + 24;
        *(_OWORD *)(v15 + 24) = v48;
        v19 = v49;
        *(_QWORD *)(v15 + 40) = v49;
        if (!v19)
        {
          *(_QWORD *)(v15 + 16) = v18;
          v20 = v15 + 48;
          goto LABEL_36;
        }
        *(_QWORD *)(*(_QWORD *)v18 + 16) = v18;
        v47 = &v48;
        *(_QWORD *)&v48 = 0;
        v49 = 0;
      }
      v20 = v15 + 48;
    }
LABEL_36:
    *(_QWORD *)(v14 + 56) = v20;
  }
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v47, v48);

}

void sub_19F5FFC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;

  if (v10)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 592) + 40))(*(_QWORD *)(v11 + 592), v10, 80);
  md::RouteRangeAnnotationRequest::~RouteRangeAnnotationRequest((md::RouteRangeAnnotationRequest *)&a9);

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  BOOL v69;
  BOOL v70;
  __int128 v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  _BOOL4 v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 *v118;
  __int128 v119;
  uint64_t *v120;
  void *v121;
  void *v122;
  uint64_t i;
  void **v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t **v144;
  uint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  void *v152;
  int64_t v153;
  uint64_t v154;
  int64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  __int128 v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  void **v164;
  void *v165;
  void *v166;
  uint64_t v167;
  void *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  uint64_t v179;
  void *v180;
  int64_t v181;
  __int128 *v182;
  __int128 *v183;
  void *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  BOOL v188;
  __int128 v189;
  __int128 *v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  __int128 *v194;
  void *v195;
  void *v196;
  uint64_t v197;
  void *v198;
  _QWORD *v199;
  uint64_t v200;
  __int128 **v201;
  uint64_t v202;
  __int128 *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 *v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  void *v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  __int128 v223;
  __int128 *v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  void *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  BOOL v241;
  void *v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  __int128 *v254;
  __int128 v255;
  uint64_t *v256;
  void *v257;
  void *j;
  void *v259;
  void *v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  void *v282;
  __int128 *v283;
  __int128 *v284;
  __int128 *v286;
  int64_t v287;
  __int128 *v288;
  __int128 *v289;
  int64_t v290;
  uint64_t *v291;
  __int128 v292;
  __int128 *v293;
  __int128 v294;
  uint64_t v295;
  __int128 v296;
  uint64_t *v297;
  __int128 v298;
  void *v299;

void sub_19F6012D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26)
{
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a11, a26);

  _Unwind_Resume(a1);
}

uint64_t *std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v3 - 32, *(_QWORD *)(v3 - 24));

        v5 = *(void **)(v3 - 48);
        v3 -= 48;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

BOOL md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  objc_msgSend(*(id *)(a1 + 8), "etaDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "routeEtaType");

  objc_msgSend(*(id *)(a2 + 8), "etaDescription");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "routeEtaType");

  v8 = *(void **)(a1 + 8);
  if (v5 == v7)
  {
    v9 = objc_msgSend(v8, "start");
    v10 = objc_msgSend(*(id *)(a2 + 8), "start");
    return v9 < v10
        || *((float *)&v9 + 1) < *((float *)&v10 + 1) && (_DWORD)v9 == (_DWORD)v10;
  }
  else
  {
    objc_msgSend(v8, "etaDescription");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "routeEtaType");

    objc_msgSend(*(id *)(a2 + 8), "etaDescription");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "routeEtaType");

    return v13 < v15;
  }
}

void sub_19F6015BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(__int128 *a1, _QWORD *a2)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;

  v4 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v18 = v4;
  v5 = a1 + 1;
  v19 = (__int128 *)*((_QWORD *)a1 + 2);
  v6 = (uint64_t)a1 + 24;
  v20 = *(__int128 *)((char *)a1 + 24);
  v21 = *((_QWORD *)a1 + 5);
  if (v21)
  {
    *(_QWORD *)(v20 + 16) = &v20;
    *((_QWORD *)a1 + 2) = v6;
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)a1 + 5) = 0;
  }
  else
  {
    v19 = &v20;
  }
  v7 = (void *)*a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;

  v9 = a2[1];
  a2[1] = 0;
  v10 = (void *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v9;

  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)v5, *((_QWORD *)a1 + 3));
  *((_QWORD *)a1 + 2) = a2[2];
  v12 = a2 + 3;
  v11 = a2[3];
  *((_QWORD *)a1 + 3) = v11;
  v13 = a2[5];
  *((_QWORD *)a1 + 5) = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v6;
    a2[2] = v12;
    a2[3] = 0;
    a2[5] = 0;
  }
  else
  {
    *v5 = v6;
  }
  v14 = (void *)*a2;
  *a2 = v18;

  v15 = (void *)a2[1];
  a2[1] = *((_QWORD *)&v18 + 1);

  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(a2 + 2), a2[3]);
  v16 = v20;
  a2[2] = v19;
  a2[3] = v16;
  v17 = v21;
  a2[5] = v21;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v12;
    v16 = 0;
    v19 = &v20;
    *(_QWORD *)&v20 = 0;
    v21 = 0;
  }
  else
  {
    a2[2] = v12;
  }
  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v19, v16);

}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>(__int128 *a1, __int128 *a2, _QWORD *a3)
{
  BOOL v6;
  _BOOL4 v7;
  __int128 *v8;

  v6 = md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a2, (uint64_t)a1);
  v7 = md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a3, (uint64_t)a2);
  if (v6)
  {
    if (v7)
    {
      v8 = a1;
    }
    else
    {
      std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a1, a2);
      if (!md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a3, (uint64_t)a2))return;
      v8 = a2;
    }
    std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(v8, a3);
  }
  else if (v7)
  {
    std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a2, a3);
    if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a2, (uint64_t)a1))
    {
      std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a1, a2);
    }
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>(__int128 *a1, __int128 *a2, __int128 *a3, _QWORD *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>(a1, a2, a3);
  if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a4, (uint64_t)a3))
  {
    std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a3, a4);
    if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a3, (uint64_t)a2))
    {
      std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a2, a3);
      if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a2, (uint64_t)a1))
      {
        std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a1, a2);
      }
    }
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*,0>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, _QWORD *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>(a1, a2, a3, a4);
  if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a5, (uint64_t)a4))
  {
    std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a4, a5);
    if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a4, (uint64_t)a3))
    {
      std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a3, a4);
      if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a3, (uint64_t)a2))
      {
        std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a2, a3);
        if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)a2, (uint64_t)a1))
        {
          std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a1, a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>(__int128 *a1, __int128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t v40;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      if (!md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)(a2 - 3), (uint64_t)a1))return 1;
      std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>(a1, v6);
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>(a1, a1 + 3, (_QWORD *)a2 - 6);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>(a1, a1 + 3, a1 + 6, (_QWORD *)a2 - 6);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*,0>(a1, a1 + 3, a1 + 6, a1 + 9, (_QWORD *)a2 - 6);
      return 1;
    default:
      v7 = (uint64_t)(a1 + 6);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>(a1, a1 + 3, (_QWORD *)a1 + 12);
      v8 = (uint64_t)(a1 + 9);
      if (a1 + 9 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (2)
  {
    if (!md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()(v8, v7))goto LABEL_8;
    v12 = *(_OWORD *)v8;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    v37 = v12;
    v13 = *(uint64_t **)(v8 + 16);
    v39 = *(_OWORD *)(v8 + 24);
    v14 = *(_QWORD *)(v8 + 40);
    v38 = v13;
    v40 = v14;
    if (v14)
    {
      *(_QWORD *)(v39 + 16) = &v39;
      *(_QWORD *)(v8 + 16) = v8 + 24;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 40) = 0;
    }
    else
    {
      v38 = (uint64_t *)&v39;
    }
    v15 = v9;
    while (1)
    {
      v16 = v15;
      v17 = (_QWORD *)((char *)a1 + v15);
      v18 = *(_QWORD *)((char *)a1 + v15 + 96);
      v17[12] = 0;
      v19 = (void *)v17[18];
      v17[18] = v18;

      v20 = v17[13];
      v17[13] = 0;
      v21 = (void *)v17[19];
      v17[19] = v20;

      v22 = v17 + 21;
      std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v17 + 20), v17[21]);
      v17[20] = v17[14];
      v23 = v17 + 15;
      v24 = v17[15];
      v17[21] = v24;
      v25 = v17[17];
      v17[23] = v25;
      if (!v25)
        break;
      *(_QWORD *)(v24 + 16) = v22;
      v17[14] = v23;
      *v23 = 0;
      v17[17] = 0;
      if (v16 == -96)
        goto LABEL_20;
LABEL_18:
      v26 = md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)&v37, (uint64_t)a1 + v16 + 48);
      v15 = v16 - 48;
      if (!v26)
      {
        v27 = (uint64_t **)((char *)a1 + v16 + 112);
        v28 = (uint64_t)a1 + v15 + 144;
        v29 = (_QWORD *)((char *)a1 + v16 + 136);
        v30 = (uint64_t *)((char *)a1 + v16 + 120);
        goto LABEL_21;
      }
    }
    v17[20] = v22;
    if (v16 != -96)
      goto LABEL_18;
LABEL_20:
    v27 = (uint64_t **)((char *)a1 + v16 + 112);
    v29 = (_QWORD *)((char *)a1 + v16 + 136);
    v30 = (uint64_t *)((char *)a1 + v16 + 120);
    v28 = (uint64_t)a1;
LABEL_21:
    v31 = v37;
    *(_QWORD *)&v37 = 0;
    v32 = *(void **)v28;
    *(_QWORD *)v28 = v31;

    v33 = *((_QWORD *)&v37 + 1);
    *((_QWORD *)&v37 + 1) = 0;
    v34 = *(void **)(v28 + 8);
    *(_QWORD *)(v28 + 8) = v33;

    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)v27, *v30);
    v35 = v39;
    *v27 = v38;
    *v30 = v35;
    v36 = v40;
    *v29 = v40;
    if (v36)
    {
      v11 = 0;
      *(_QWORD *)(v35 + 16) = v30;
      v38 = (uint64_t *)&v39;
      *(_QWORD *)&v39 = 0;
      v40 = 0;
    }
    else
    {
      *v27 = v30;
      v11 = v39;
    }
    ++v10;
    std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v38, v11);

    if (v10 == 8)
      return v8 + 48 == (_QWORD)a2;
LABEL_8:
    v7 = v8;
    v9 += 48;
    v8 += 48;
    if ((__int128 *)v8 != a2)
      continue;
    return 1;
  }
}

void sub_19F601C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  md::RouteRangeAnnotationRequest::~RouteRangeAnnotationRequest((md::RouteRangeAnnotationRequest *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c62_ZTSNSt3__18functionIFbRKN2md27RouteRangeAnnotationRequestEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 80);
  if (result)
  {
    if (result == a2 + 56)
    {
      *(_QWORD *)(a1 + 80) = a1 + 56;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 80) + 24))(*(_QWORD *)(a2 + 80), a1 + 56);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 80) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
  }
  return result;
}

_QWORD *__destroy_helper_block_ea8_56c62_ZTSNSt3__18functionIFbRKN2md27RouteRangeAnnotationRequestEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 56);
  result = *(_QWORD **)(a1 + 80);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_0,std::allocator<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_0>,BOOL ()(md::RouteRangeAnnotationRequest const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_0,std::allocator<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_0>,BOOL ()(md::RouteRangeAnnotationRequest const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CEE88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_0,std::allocator<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_0>,BOOL ()(md::RouteRangeAnnotationRequest const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CEE88;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_0,std::allocator<md::LabelNavEtaLabeler::updateLabelPositions(md::NavContext *,std::vector<md::AvoidanceRectWithPriority,geo::StdAllocator<md::AvoidanceRectWithPriority,mdm::Allocator>> const&)::$_0>,BOOL ()(md::RouteRangeAnnotationRequest const&)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)(a1 + 8);
  objc_msgSend(*(id *)(a2 + 8), "etaDescription");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "routeEtaType");

  v5 = (int8x8_t)v2[1];
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = v4;
      if (v4 >= *(_QWORD *)&v5)
        v7 = v4 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & v4;
    }
    v8 = *(_QWORD **)(*v2 + 8 * v7);
    if (v8)
    {
      v8 = (_QWORD *)*v8;
      if (v8)
      {
        if (v6.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v4 == v11)
            {
              if (v8[2] == v4)
                return v8 != 0;
            }
            else if ((v11 & v9) != v7)
            {
              goto LABEL_21;
            }
            v8 = (_QWORD *)*v8;
            if (!v8)
              return v8 != 0;
          }
        }
        do
        {
          v10 = v8[1];
          if (v4 == v10)
          {
            if (v8[2] == v4)
              return v8 != 0;
          }
          else
          {
            if (v10 >= *(_QWORD *)&v5)
              v10 %= *(_QWORD *)&v5;
            if (v10 != v7)
              goto LABEL_21;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
  else
  {
LABEL_21:
    v8 = 0;
  }
  return v8 != 0;
}

void sub_19F601EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::LabelNavEtaLabeler::indexForRoute(id *this, GEOComposedRoute *a2)
{
  GEOComposedRoute *v3;
  void *v4;
  GEOComposedRoute *v5;
  unint64_t i;
  id v7;
  void *v8;
  unint64_t v9;
  id v10;
  void *v11;
  void *v12;
  GEOComposedRoute *v13;
  uint64_t v14;

  v3 = a2;
  objc_msgSend(this[3], "routeInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "route");
  v5 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();

  if (v5 != v3)
  {
    for (i = 0; ; ++i)
    {
      v7 = this[3];
      objc_msgSend(v7, "alternateRoutes");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "count");

      if (i >= v9)
        break;
      v10 = this[3];
      objc_msgSend(v10, "alternateRoutes");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectAtIndex:", i);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "route");
      v13 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();

      if (v13 == v3)
      {
        v14 = (i + 1);
        goto LABEL_8;
      }
    }
  }
  v14 = 0;
LABEL_8:

  return v14;
}

void sub_19F601FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::LabelNavEtaLabeler::clearETALabels(md::LabelNavEtaLabeler *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  int v7;
  id v8;
  char *v9;
  char *v10;
  BOOL v11;

  std::__tree<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::__map_value_compare<VKLabelNavRouteEta * {__strong},std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::less<VKLabelNavRouteEta * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKLabelNavRouteEta * {__strong},geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,mdm::Allocator>>::destroy((uint64_t)this + 352, *((_QWORD *)this + 45));
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 44) = (char *)this + 360;
  *((_QWORD *)this + 45) = 0;
  v2 = (char *)*((_QWORD *)this + 32);
  v3 = (char *)this + 264;
  if (v2 != (char *)this + 264)
  {
    do
    {
      v4 = *((_QWORD *)v2 + 5);
      v5 = *((_QWORD *)v2 + 6);
      while (v4 != v5)
      {
        v6 = *(id *)(v4 + 56);
        v7 = objc_msgSend(v6, "hasLabel");

        if (v7)
        {
          v8 = *(id *)(v4 + 56);
          objc_msgSend(v8, "clearLabel");

        }
        v4 += 72;
      }
      v9 = (char *)*((_QWORD *)v2 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v2 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (!v11);
      }
      v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_19F6020D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::RouteElevationSourceContext::~RouteElevationSourceContext(md::RouteElevationSourceContext *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 6));
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  while (v2)
  {
    v4 = v2;
    v2 = (_QWORD *)*v2;
    v5 = (std::__shared_weak_count *)v4[6];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    operator delete(v4);
  }
  v3 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v3)
    operator delete(v3);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E42DA960;
  *(_QWORD *)(a1 + 136) = off_1E42DA9B0;
  v2 = a1 + 136;
  *(_QWORD *)(a1 + 16) = off_1E42DA988;
  *(_QWORD *)(a1 + 24) = off_1E42DA790;
  if (*(char *)(a1 + 111) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 40))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 104) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](v2);
  return a1;
}

void std::basic_stringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = off_1E42DA960;
  *(_QWORD *)(a1 + 136) = off_1E42DA9B0;
  v1 = a1 + 136;
  *(_QWORD *)(a1 + 16) = off_1E42DA988;
  *(_QWORD *)(a1 + 24) = off_1E42DA790;
  if (*(char *)(a1 + 111) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 40))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 104) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](v1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'std::basic_stringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_stringstream(uint64_t a1)
{
  *(_QWORD *)(a1 - 16) = off_1E42DA960;
  *(_QWORD *)(a1 + 120) = off_1E42DA9B0;
  *(_QWORD *)a1 = off_1E42DA988;
  *(_QWORD *)(a1 + 8) = off_1E42DA790;
  if (*(char *)(a1 + 95) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 88) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  JUMPOUT(0x1A1AF4D64);
}

{
  uint64_t v1;

  *(_QWORD *)(a1 - 16) = off_1E42DA960;
  *(_QWORD *)(a1 + 120) = off_1E42DA9B0;
  v1 = a1 + 120;
  *(_QWORD *)a1 = off_1E42DA988;
  *(_QWORD *)(a1 + 8) = off_1E42DA790;
  if (*(char *)(a1 + 95) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 88) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](v1);
  JUMPOUT(0x1A1AF4E00);
}

void `virtual thunk to'std::basic_stringstream<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::~basic_stringstream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_1E42DA960;
  *((_QWORD *)v1 + 17) = off_1E42DA9B0;
  *((_QWORD *)v1 + 2) = off_1E42DA988;
  *((_QWORD *)v1 + 3) = off_1E42DA790;
  if (v1[111] < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v1 + 14) + 40))(*((_QWORD *)v1 + 14), *((_QWORD *)v1 + 11), *((_QWORD *)v1 + 13) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  JUMPOUT(0x1A1AF4D64);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_1E42DA960;
  *((_QWORD *)v1 + 17) = off_1E42DA9B0;
  *((_QWORD *)v1 + 2) = off_1E42DA988;
  *((_QWORD *)v1 + 3) = off_1E42DA790;
  if (v1[111] < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v1 + 14) + 40))(*((_QWORD *)v1 + 14), *((_QWORD *)v1 + 11), *((_QWORD *)v1 + 13) & 0x7FFFFFFFFFFFFFFFLL);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AF4D64](v1 + 136);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::unordered_map<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,std::shared_ptr<md::FlyoverDsmTileData>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t **v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime != 1)
  {
    if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(*(_QWORD *)(a2 + 8));
      v6 = *(int8x8_t *)(a1 + 8);
      v7 = prime >= *(_QWORD *)&v6;
      if (prime > *(_QWORD *)&v6)
        goto LABEL_17;
    }
    else
    {
      v6 = 0;
      v7 = 1;
      if (prime)
        goto LABEL_17;
    }
    if (v7)
      goto LABEL_18;
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime >= *(_QWORD *)&v6)
      goto LABEL_18;
    goto LABEL_17;
  }
  prime = 2;
LABEL_17:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
LABEL_18:
  v11 = *(uint64_t **)(a2 + 16);
  if (!v11)
    return a1;
  v12 = (_QWORD *)(a1 + 16);
LABEL_20:
  while (2)
  {
    v13 = *((unsigned __int8 *)v11 + 16);
    v14 = *((unsigned __int8 *)v11 + 17);
    v15 = (v14
         - 0x61C8864680B583EBLL
         + ((v13 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v13 - 0x61C8864680B583EBLL) >> 2)) ^ (v13 - 0x61C8864680B583EBLL);
    v16 = *((int *)v11 + 5);
    v17 = *((int *)v11 + 6);
    v18 = (v16 - 0x61C8864680B583EBLL + (v15 << 6) + (v15 >> 2)) ^ v15;
    v19 = (v17 - 0x61C8864680B583EBLL + (v18 << 6) + (v18 >> 2)) ^ v18;
    v20 = *(_QWORD *)(a1 + 8);
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v2 = (v17 - 0x61C8864680B583EBLL + (v18 << 6) + (v18 >> 2)) ^ v18;
        if (v19 >= v20)
          v2 = v19 % v20;
      }
      else
      {
        v2 = v19 & (v20 - 1);
      }
      v22 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
      if (v22)
      {
        v23 = *v22;
        if (v23)
        {
          if (v21.u32[0] < 2uLL)
          {
            while (1)
            {
              v25 = v23[1];
              if (v25 == v19)
              {
                if (__PAIR64__(*((unsigned __int8 *)v23 + 17), *((unsigned __int8 *)v23 + 16)) == __PAIR64__(v14, v13)
                  && *(uint64_t *)((char *)v23 + 20) == __PAIR64__(v17, v16))
                {
                  goto LABEL_42;
                }
              }
              else if ((v25 & (v20 - 1)) != v2)
              {
                goto LABEL_44;
              }
              v23 = (uint64_t *)*v23;
              if (!v23)
                goto LABEL_44;
            }
          }
          do
          {
            v24 = v23[1];
            if (v24 == v19)
            {
              if (__PAIR64__(*((unsigned __int8 *)v23 + 17), *((unsigned __int8 *)v23 + 16)) == __PAIR64__(v14, v13)
                && *(uint64_t *)((char *)v23 + 20) == __PAIR64__(v17, v16))
              {
LABEL_42:
                v11 = (uint64_t *)*v11;
                if (!v11)
                  return a1;
                goto LABEL_20;
              }
            }
            else
            {
              if (v24 >= v20)
                v24 %= v20;
              if (v24 != v2)
                break;
            }
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
      }
    }
LABEL_44:
    v26 = operator new(0x38uLL);
    *v26 = 0;
    v26[1] = v19;
    *((_WORD *)v26 + 8) = *((_WORD *)v11 + 8);
    *(_QWORD *)((char *)v26 + 20) = *(uint64_t *)((char *)v11 + 20);
    v26[5] = v11[5];
    v27 = v11[6];
    v26[6] = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v31 = *(float *)(a1 + 32);
    if (!v20 || (float)(v31 * (float)v20) < v30)
    {
      v32 = (v20 & (v20 - 1)) != 0;
      if (v20 < 3)
        v32 = 1;
      v33 = v32 | (2 * v20);
      v34 = vcvtps_u32_f32(v30 / v31);
      if (v33 <= v34)
        v35 = v34;
      else
        v35 = v33;
      if (v35 == 1)
      {
        v35 = 2;
      }
      else if ((v35 & (v35 - 1)) != 0)
      {
        v35 = std::__next_prime(v35);
      }
      v36 = *(int8x8_t *)(a1 + 8);
      if (v35 > *(_QWORD *)&v36)
        goto LABEL_59;
      if (v35 < *(_QWORD *)&v36)
      {
        v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
        {
          v37 = std::__next_prime(v37);
        }
        else
        {
          v39 = 1 << -(char)__clz(v37 - 1);
          if (v37 >= 2)
            v37 = v39;
        }
        if (v35 <= v37)
          v35 = v37;
        if (v35 < *(_QWORD *)&v36)
LABEL_59:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v35);
      }
      v20 = *(_QWORD *)(a1 + 8);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v19 >= v20)
          v2 = v19 % v20;
        else
          v2 = v19;
      }
      else
      {
        v2 = (v20 - 1) & v19;
      }
    }
    v40 = *(_QWORD *)a1;
    v41 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v41)
    {
      *v26 = *v41;
      goto LABEL_83;
    }
    *v26 = *v12;
    *v12 = v26;
    *(_QWORD *)(v40 + 8 * v2) = v12;
    if (*v26)
    {
      v42 = *(_QWORD *)(*v26 + 8);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v42 >= v20)
          v42 %= v20;
      }
      else
      {
        v42 &= v20 - 1;
      }
      v41 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
LABEL_83:
      *v41 = v26;
    }
    ++*(_QWORD *)(a1 + 24);
    v11 = (uint64_t *)*v11;
    if (v11)
      continue;
    return a1;
  }
}

void sub_19F6029D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned char,std::greater<unsigned char>,std::allocator<unsigned char>>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v9 = v5[1];
        v10 = v6;
        if (v7)
        {
          do
          {
            v8 = (uint64_t *)v9;
            v9 = *(_QWORD *)(v9 + 8);
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = *((unsigned __int8 *)v4 + 25);
        if (*((unsigned __int8 *)v8 + 25) <= v12)
          break;
      }
      v13 = (uint64_t **)v6;
      v14 = (uint64_t **)v6;
      if (!v7)
        goto LABEL_19;
      v13 = (uint64_t **)(v8 + 1);
      if (!v8[1])
      {
        v14 = (uint64_t **)v8;
LABEL_19:
        v16 = operator new(0x20uLL);
        v16[25] = *((_BYTE *)v4 + 25);
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v14;
        *v13 = (uint64_t *)v16;
        v17 = *(_QWORD *)*v5;
        if (v17)
        {
          *v5 = v17;
          v18 = *v13;
        }
        else
        {
          v18 = (uint64_t *)v16;
        }
        result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v18);
        ++v5[2];
      }
LABEL_23:
      v19 = (_QWORD *)v4[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v4[2];
          v11 = *v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v11);
      }
      v4 = v20;
      if (v20 == a3)
        return result;
    }
    v13 = (uint64_t **)v6;
    v14 = (uint64_t **)v6;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v7;
          v15 = *((unsigned __int8 *)v7 + 25);
          if (v12 <= v15)
            break;
          v7 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_19;
        }
        if (v15 <= v12)
          goto LABEL_23;
        v13 = v14 + 1;
        v7 = v14[1];
        if (!v7)
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[6];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,std::shared_ptr<md::FlyoverDsmTileData>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[6];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN2md18LabelNavEtaLabeler9debugDrawERKNS_13LayoutContextEPNS_10NavContextE_block_invoke(uint64_t a1, uint64_t a2)
{
  float32x2_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v12;
  GEOComposedRoute *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  float32x2_t *v17;
  void *v18;
  _BYTE *v19;
  id v20;
  PolylineCoordinate *v21;
  void *v22;
  float v23;
  const GEOComposedRoute *v24;
  float v25;
  float offset;
  double v27;
  int v28;
  float64x2_t *v29;
  double v30;
  double v31;
  float v32;
  unsigned int index;
  double v34;
  float64x2_t *v35;
  double v36;
  double v37;
  float32x2_t v38;
  float32x2_t v39;
  float v40;
  float32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  int v46;
  float v47;
  double v48;
  float64x2_t *v49;
  double v50;
  double v51;
  float32x2_t v52;
  float v53;
  float v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  double v58;
  float64x2_t *v59;
  double v60;
  double v61;
  float32x2_t v62;
  float v63;
  float v64;
  float v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  float32x2_t v75;
  PolylineCoordinate *v76;
  PolylineCoordinate *v77;
  PolylineCoordinate *v78;
  double v79[2];
  PolylineCoordinate v80[2];
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  PolylineCoordinate v84;

  if (*(_DWORD *)(a1 + 440))
  {
    v3 = a2;
    v4 = a1;
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 32);
    v73 = a1 + 48;
    v71 = a1 + 444;
    __asm { FMOV            V0.2S, #20.0 }
    v75 = _D0;
    v69 = a1;
    v70 = a2;
    do
    {
      v12 = (id *)(v3 + 24 * v5);
      objc_msgSend(*v12, "route", v69, v70);
      v13 = (GEOComposedRoute *)objc_claimAutoreleasedReturnValue();
      v14 = md::LabelNavEtaLabeler::indexForRoute((id *)v6, v13);

      v15 = *(_DWORD *)(v71 + 4 * (v14 % 3));
      v72 = v5;
      v16 = *(_QWORD *)(v4 + 40);
      v17 = *(float32x2_t **)(v4 + 432);
      objc_msgSend(*v12, "route");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (_BYTE *)(v4 + 4 * ((*(_DWORD *)(v4 + 440) - 1) % 3u));
      v20 = v18;
      v17[12].i8[0] = v19[456];
      v17[12].i8[1] = v19[457];
      v17[12].i8[2] = v19[458];
      v17[12].i8[3] = v19[459];
      v74 = v20;
      (*(void (**)(PolylineCoordinate **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v6 + 40) + 24))(&v77, *(_QWORD *)(v6 + 40), v73);
      v21 = v77;
      v76 = v78;
      if (v77 != v78)
      {
        v22 = v74;
        do
        {
          v23 = *(float *)(*(_QWORD *)(v16 + 8) + 176);
          v24 = v22;
          v25 = *(float *)&v21[1].index;
          offset = v21->offset;
          if (v21->index != LODWORD(v25) || vabds_f32(offset, v21[1].offset) >= 0.00000011921)
          {
            if (offset == 0.0)
            {
              v28 = 1;
              v32 = v21->offset;
            }
            else
            {
              v80[0] = *v21;
              v27 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(v6 + 48), v24, v80);
              v28 = 0;
              v29 = *(float64x2_t **)(v16 + 24);
              v2 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v29[60], v29[54], v27), v29[56], v30), v29[58], v31), 1.0 / (v29[61].f64[1] + v29[55].f64[1] * v27 + v29[57].f64[1] * v30 + v29[59].f64[1] * v31)));
              v32 = v21->offset;
              v25 = *(float *)&v21[1].index;
            }
            if (v32 <= 0.0)
              index = v21->index;
            else
              index = v21->index + 1;
            if (index == LODWORD(v25))
            {
              v80[0] = (PolylineCoordinate)LODWORD(v25);
              v34 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(v6 + 48), v24, v80);
              v35 = *(float64x2_t **)(v16 + 24);
              v38 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v35[60], v35[54], v34), v35[56], v36), v35[58], v37), 1.0 / (v35[61].f64[1] + v35[55].f64[1] * v34 + v35[57].f64[1] * v36 + v35[59].f64[1] * v37)));
              if (offset == 0.0)
              {
                v40 = 20.0;
                v28 = 0;
              }
              else
              {
                v39 = vsub_f32(v38, v2);
                v40 = sqrtf(vaddv_f32(vmul_f32(v39, v39)));
                v17[1] = v2;
                ggl::DebugConsole::drawSymbol(v17, v15);
                if (v40 >= 20.0)
                {
                  v41 = vmul_f32(vmul_n_f32(v39, 1.0 / v40), v75);
                  do
                  {
                    v40 = v40 + -20.0;
                    v2 = vadd_f32(v2, v41);
                    v17[1] = v2;
                    ggl::DebugConsole::drawSymbol(v17, v15);
                  }
                  while (v40 >= 20.0);
                }
                v28 = 0;
              }
            }
            else
            {
              v40 = 20.0;
              if (index >= LODWORD(v25))
              {
                v38 = v2;
              }
              else
              {
                v42 = *(_QWORD *)(v16 + 24);
                *(_OWORD *)&v80[0].index = *(_OWORD *)(v42 + 136);
                v81 = *(_QWORD *)(v42 + 152);
                v82 = *(_OWORD *)(v42 + 160);
                v83 = *(_QWORD *)(v42 + 176);
                v43 = *(_QWORD *)(v6 + 40);
                v84.index = index;
                v84.offset = v25;
                if ((*(unsigned int (**)(uint64_t, uint64_t, const GEOComposedRoute *, PolylineCoordinate *, PolylineCoordinate *, double *))(*(_QWORD *)v43 + 32))(v43, v73, v24, v80, &v84, v79))
                {
                  md::RouteSimplifier::simplifiedRibbonIndices(*(_QWORD *)(v6 + 48), v24, index, SLODWORD(v25), (_QWORD *)(v6 + 80), v23 * ((v79[0] + v79[0]) * *(double *)(v42 + 312)) / *(float *)(v42 + 1064));
                  v45 = *(unsigned int **)(v6 + 80);
                  v44 = *(unsigned int **)(v6 + 88);
                  v22 = v74;
                  if (v45 == v44)
                  {
                    v46 = v28;
                    v38 = v2;
                  }
                  else
                  {
                    do
                    {
                      v84 = (PolylineCoordinate)*v45;
                      v48 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(v6 + 48), v24, &v84);
                      v49 = *(float64x2_t **)(v16 + 24);
                      v38 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v49[60], v49[54], v48), v49[56], v50), v49[58], v51), 1.0/ (v49[61].f64[1] + v49[55].f64[1] * v48 + v49[57].f64[1] * v50 + v49[59].f64[1] * v51)));
                      if (!v28)
                      {
                        v52 = vsub_f32(v38, v2);
                        v53 = sqrtf(vaddv_f32(vmul_f32(v52, v52)));
                        v54 = 20.0 - v40;
                        if (v53 < (float)(20.0 - v40))
                        {
                          v47 = v53;
                        }
                        else
                        {
                          v47 = v53 - v54;
                          v55 = vmul_n_f32(v52, 1.0 / v53);
                          v56 = vmla_n_f32(v2, v55, v54);
                          v17[1] = v56;
                          ggl::DebugConsole::drawSymbol(v17, v15);
                          v40 = 0.0;
                          if (v47 >= 20.0)
                          {
                            v57 = vmul_f32(v55, v75);
                            do
                            {
                              v47 = v47 + -20.0;
                              v56 = vadd_f32(v56, v57);
                              v17[1] = v56;
                              ggl::DebugConsole::drawSymbol(v17, v15);
                            }
                            while (v47 >= 20.0);
                          }
                        }
                        v40 = v40 + v47;
                      }
                      v28 = 0;
                      v46 = 0;
                      ++v45;
                      v2 = v38;
                    }
                    while (v45 != v44);
                  }
                }
                else
                {
                  v46 = v28;
                  v38 = v2;
                  v22 = v74;
                }
                v28 = v46;
              }
            }
            if (v21[1].offset == 0.0)
            {
              v2 = v38;
            }
            else
            {
              v80[0] = v21[1];
              v58 = md::RouteSimplifier::worldPointForPolylineCoordinate(*(md::RouteSimplifier **)(v6 + 48), v24, v80);
              v59 = *(float64x2_t **)(v16 + 24);
              v2 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v59[60], v59[54], v58), v59[56], v60), v59[58], v61), 1.0 / (v59[61].f64[1] + v59[55].f64[1] * v58 + v59[57].f64[1] * v60 + v59[59].f64[1] * v61)));
              if (!v28)
              {
                v62 = vsub_f32(v2, v38);
                v63 = sqrtf(vaddv_f32(vmul_f32(v62, v62)));
                v64 = 20.0 - v40;
                if (v63 >= (float)(20.0 - v40))
                {
                  v65 = v63 - v64;
                  v66 = vmul_n_f32(v62, 1.0 / v63);
                  v67 = vmla_n_f32(v38, v66, v64);
                  v17[1] = v67;
                  ggl::DebugConsole::drawSymbol(v17, v15);
                  if (v65 >= 20.0)
                  {
                    v68 = vmul_f32(v66, v75);
                    do
                    {
                      v65 = v65 + -20.0;
                      v67 = vadd_f32(v67, v68);
                      v17[1] = v67;
                      ggl::DebugConsole::drawSymbol(v17, v15);
                    }
                    while (v65 >= 20.0);
                  }
                }
              }
            }
          }

          v21 += 2;
        }
        while (v21 != v76);
        v21 = v77;
        v4 = v69;
        v3 = v70;
      }
      if (v21)
      {
        v78 = v21;
        operator delete(v21);
      }

      v5 = v72 + 1;
    }
    while (v72 + 1 < (unint64_t)*(unsigned int *)(v4 + 440));
  }
}

void sub_19F6032C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{

  _Unwind_Resume(a1);
}

void md::LabelNavEtaLabeler::intersectSimplifiedRouteSectionWithFrustum<md::LabelNavEtaLabeler::debugDraw(md::LayoutContext const&,md::NavContext *)::$_1>(md::NavContext const*,geo::Frustum<double> const&,GEOComposedRoute *,float,gm::Range<geo::PolylineCoordinate> const&,md::LabelNavEtaLabeler::debugDraw(md::LayoutContext const&,md::NavContext *)::$_1)const::{lambda(gm::Matrix<double,3,1> const&,gm::Matrix<double,3,1> const&,md::LabelNavEtaLabeler::debugDraw(md::LayoutContext const&,md::NavContext *)::$_1)#1}::operator()(uint64_t a1, float64x2_t *a2, float64x2_t *a3, float32x2_t *a4)
{
  double v6;
  float64x2_t v7;
  double v9;
  double v10;
  uint64_t v12;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  double v29;
  float32x2_t v30;
  double v31;
  double v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  double v36;

  v29 = a3[1].f64[0];
  v27 = a2[1].f64[0];
  v6 = v29 - v27;
  v28 = *a3;
  v26 = *a2;
  v7 = vsubq_f64(*a3, *a2);
  v33 = *a2;
  v34 = a2[1].f64[0];
  v25 = v7;
  v35 = v7;
  v36 = v29 - v27;
  v32 = 0.0;
  v31 = 0.0;
  if (geo::Intersect::internal::intersection<double,std::array<gm::Plane3<double>,6ul>>((double *)a1, v33.f64, 2u, &v32, &v31))
  {
    _Q18 = v26;
    v9 = v27;
    if (v32 > 0.0)
    {
      v9 = v34 + v6 * v32;
      _Q18 = vmlaq_n_f64(v33, v25, v32);
    }
    _Q20 = v28;
    v10 = v29;
    if (v31 < 1.0)
    {
      v10 = v34 + v6 * v31;
      _Q20 = vmlaq_n_f64(v33, v25, v31);
    }
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 24);
    _D2 = *(_QWORD *)(v12 + 920);
    __asm { FMLA            D4, D2, V18.D[1] }
    v19 = *(double *)(v12 + 952);
    v20 = *(float64x2_t *)(v12 + 864);
    v21 = *(float64x2_t *)(v12 + 896);
    v22 = vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(v12 + 960), v20, _Q18.f64[0]), v21, _Q18, 1);
    v23 = *(float64x2_t *)(v12 + 928);
    __asm { FMLA            D3, D2, V20.D[1] }
    v30 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(*(float64x2_t *)(v12 + 960), v20, _Q20.f64[0]), v21, _Q20, 1), v23, v10), 1.0 / (_D3 + v19 * v10)));
    a4[1] = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(v22, v23, v9), 1.0 / (_D4 + v19 * v9)));
    ggl::DebugConsole::drawLine((uint64_t)a4, (float *)&v30);
  }
}

uint64_t __copy_helper_block_ea8_444c83_ZTSZN2md18LabelNavEtaLabeler9debugDrawERKNS_13LayoutContextEPNS_10NavContextEE3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 444);
  *(_DWORD *)(result + 452) = *(_DWORD *)(a2 + 452);
  *(_QWORD *)(result + 444) = v2;
  *(_DWORD *)(result + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(result + 460) = *(_DWORD *)(a2 + 460);
  *(_DWORD *)(result + 464) = *(_DWORD *)(a2 + 464);
  return result;
}

void md::LabelNavEtaLabeler::extractPolylineOverlayInfo(md::LabelNavEtaLabeler *this, VKRouteInfo *a2, float a3)
{
  VKRouteInfo *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  float v9;
  float v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  VKRouteInfo *v18;

  v5 = a2;
  if (v5)
  {
    v6 = *((_QWORD *)this + 13);
    v18 = v5;
    -[VKRouteInfo route](v5, "route");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v6 + 56))(v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v9 = (*(float (**)(_QWORD, void *))(**((_QWORD **)this + 13) + 128))(*((_QWORD *)this + 13), v8);
      v10 = (*(float (**)(_QWORD, void *, float))(**((_QWORD **)this + 13) + 72))(*((_QWORD *)this + 13), v8, a3);
      v11 = (uint64_t *)*((_QWORD *)this + 53);
      if (v11)
      {
        while (1)
        {
          while (1)
          {
            v13 = v11;
            v14 = v11[4];
            if (v14 <= (unint64_t)v18)
              break;
            v11 = (uint64_t *)*v13;
            v12 = v13;
            if (!*v13)
              goto LABEL_11;
          }
          if (v14 >= (unint64_t)v18)
            break;
          v11 = (uint64_t *)v13[1];
          if (!v11)
          {
            v12 = v13 + 1;
            goto LABEL_11;
          }
        }
        v15 = (uint64_t)v13;
      }
      else
      {
        v12 = (uint64_t *)((char *)this + 424);
        v13 = (uint64_t *)((char *)this + 424);
LABEL_11:
        v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 54) + 16))(*((_QWORD *)this + 54), 48, 8);
        *(_QWORD *)(v15 + 32) = v18;
        *(_QWORD *)(v15 + 40) = 0;
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 16) = v13;
        *v12 = v15;
        v16 = **((_QWORD **)this + 52);
        v17 = (uint64_t *)v15;
        if (v16)
        {
          *((_QWORD *)this + 52) = v16;
          v17 = (uint64_t *)*v12;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 53), v17);
        ++*((_QWORD *)this + 55);
      }
      *(float *)(v15 + 40) = v9;
      *(float *)(v15 + 44) = v10;
    }

    v5 = v18;
  }

}

void sub_19F603634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void md::ElevationLogic::~ElevationLogic(md::ElevationLogic *this)
{
  md::ElevationLogic::~ElevationLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  void *v2;
  void *v3;
  md::ElevationLogic *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)this = &off_1E428F198;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    objc_msgSend(v2, "stop");
    v3 = (void *)*((_QWORD *)this + 18);
    if (v3)
    {
      *((_QWORD *)this + 18) = 0;

    }
  }
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 336);
  if (*((_BYTE *)this + 328))
  {
    v4 = (md::ElevationLogic *)*((_QWORD *)this + 40);
    if (v4 == (md::ElevationLogic *)((char *)this + 296))
    {
      v5 = 4;
      v4 = (md::ElevationLogic *)((char *)this + 296);
      goto LABEL_9;
    }
    if (v4)
    {
      v5 = 5;
LABEL_9:
      (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *((_QWORD *)this + 17) = &off_1E42B4C90;

  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

double md::ElevationLogic::didBecomeInactive(md::ElevationLogic *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 11) = 0u;
  return result;
}

void md::ElevationLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  unsigned __int8 *v20;
  char *ChildNode;
  char *v22;
  long double v23;
  long double v24;
  float64x2_t v25;
  const QuadTile *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  double v46;
  float64x2_t v47;
  _BYTE v48[32];
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD v53[7];
  int v54;
  _QWORD v55[7];
  int v56;
  _QWORD v57[7];
  int v58;
  _QWORD v59[7];
  int v60;
  _QWORD v61[7];
  int v62;
  _QWORD v63[7];
  int v64;
  _QWORD v65[7];
  int v66;
  _QWORD v67[7];
  int v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  _BYTE v71[16];
  float64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _BYTE v77[16];
  float64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _BYTE v83[16];
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  _BYTE v89[16];
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _QWORD v95[7];
  int v96;
  _QWORD v97[7];
  int v98;
  _QWORD v99[7];
  int v100;
  _QWORD v101[7];
  int v102;
  __int128 v103[2];

  strcpy((char *)a2, "ElevationLogic");
  *(_WORD *)(a2 + 23) = 14;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 280) + 1128);
  v5 = *v4;
  v6 = v4[1];
  if (v5 == v6)
    goto LABEL_7;
  while (*(_BYTE *)v5 != 29)
  {
    v5 += 16;
    if (v5 == v6)
      goto LABEL_7;
  }
  if (v5 == v6)
LABEL_7:
    v7 = 0;
  else
    v7 = *(int *)(v5 + 8);
  BYTE7(v103[1]) = 10;
  strcpy((char *)v103, "groundMode");
  v102 = 0;
  memset(&v101[4], 0, 24);
  v101[0] = v7;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v103, (uint64_t)v101);
  BYTE7(v103[1]) = 14;
  strcpy((char *)v103, "forceElevation");
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v100 = 0;
  memset(&v99[4], 0, 24);
  v99[0] = objc_msgSend(v8, "daVinciForceElevatedGround");
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v103, (uint64_t)v99);

  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 160) + 80);
  BYTE7(v103[1]) = 16;
  strcpy((char *)v103, "isGroundElevated");
  v98 = 0;
  memset(&v97[4], 0, 24);
  v97[0] = v9;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v103, (uint64_t)v97);
  v10 = (char *)operator new(0x28uLL);
  *(_QWORD *)&v103[0] = v10;
  *(__int128 *)((char *)v103 + 8) = xmmword_19FFB3840;
  strcpy(v10, "groundElevationTransitionProgress");
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 76) != 0;
  v96 = 0;
  memset(&v95[4], 0, 24);
  v95[0] = v11;
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v103, (uint64_t)v95);
  operator delete(v10);
  v12 = *(_QWORD *)(a1 + 280);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 1064);
    v14 = *(std::__shared_weak_count **)(v12 + 1072);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v18 = *(double *)(v13 + 8);
      v17 = *(double *)(v13 + 16);
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      v46 = v17;
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      v18 = *(double *)(v13 + 8);
      v46 = *(double *)(v13 + 16);
    }
    v20 = *(unsigned __int8 **)(a1 + 160);
    BYTE7(v103[1]) = 17;
    strcpy((char *)v103, "ShouldElevateInfo");
    ChildNode = gdc::DebugTreeNode::createChildNode(a2, v103);
    BYTE7(v103[1]) = 10;
    strcpy((char *)v103, "FocusPoint");
    v22 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, v103);
    v23 = tan(v18 * 0.5 + 0.785398163);
    v24 = log(v23);
    v25.f64[0] = v46;
    v25.f64[1] = v24;
    __asm { FMOV            V2.2D, #0.5 }
    v47 = vmlaq_f64(_Q2, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v25);
    BYTE7(v103[1]) = 3;
    strcpy((char *)v103, "lat");
    v93 = 0;
    v91 = 0;
    v92 = 0;
    v94 = 2;
    v90 = v18 * 57.2957795;
    gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)v103, (uint64_t)v89);
    BYTE7(v103[1]) = 3;
    strcpy((char *)v103, "lon");
    v87 = 0;
    v85 = 0;
    v86 = 0;
    v88 = 2;
    v84 = v46 * 57.2957795;
    gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)v103, (uint64_t)v83);
    BYTE7(v103[1]) = 1;
    strcpy((char *)v103, "x");
    v81 = 0;
    v79 = 0;
    v80 = 0;
    v82 = 2;
    v78 = v47.f64[0];
    gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)v103, (uint64_t)v77);
    BYTE7(v103[1]) = 1;
    strcpy((char *)v103, "y");
    v75 = 0;
    v73 = 0;
    v74 = 0;
    v76 = 2;
    v72 = v47.f64[1];
    gdc::DebugTreeNode::addProperty((uint64_t)v22, (uint64_t)v103, (uint64_t)v71);
    v31 = *(const QuadTile **)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 896) + 320);
    if (v31)
    {
      LOWORD(v103[0]) = 6655;
      DWORD1(v103[0]) = 0x1FFFFFF - vcvtmd_s64_f64(v47.f64[1] * 33554432.0);
      DWORD2(v103[0]) = vcvtmd_s64_f64(v47.f64[0] * 33554432.0);
      md::DaVinciGroundMetaData::queryMetaTileFromTile((md::DaVinciGroundMetaData *)&v69, v31);
      if (v69)
      {
        v32 = *(unsigned __int8 *)(v69 + 169);
        v33 = *(int *)(v69 + 172);
        v34 = *(int *)(v69 + 176);
        BYTE7(v103[1]) = 8;
        strcpy((char *)v103, "Metadata");
        v35 = gdc::DebugTreeNode::createChildNode((uint64_t)ChildNode, v103);
        BYTE7(v103[1]) = 1;
        strcpy((char *)v103, "x");
        v68 = 0;
        memset(&v67[4], 0, 24);
        v67[0] = v34;
        gdc::DebugTreeNode::addProperty((uint64_t)v35, (uint64_t)v103, (uint64_t)v67);
        BYTE7(v103[1]) = 1;
        strcpy((char *)v103, "y");
        v66 = 0;
        memset(&v65[4], 0, 24);
        v65[0] = v33;
        gdc::DebugTreeNode::addProperty((uint64_t)v35, (uint64_t)v103, (uint64_t)v65);
        BYTE7(v103[1]) = 1;
        strcpy((char *)v103, "z");
        v64 = 0;
        memset(&v63[4], 0, 24);
        v63[0] = v32;
        gdc::DebugTreeNode::addProperty((uint64_t)v35, (uint64_t)v103, (uint64_t)v63);
      }
      v36 = v70;
      if (v70)
      {
        v37 = (unint64_t *)&v70->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    BYTE7(v103[1]) = 19;
    strcpy((char *)v103, "shouldElevateGround");
    v39 = v20[40];
    v62 = 0;
    memset(&v61[4], 0, 24);
    v61[0] = v39;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v103, (uint64_t)v61);
    v40 = v20[41];
    BYTE7(v103[1]) = 11;
    strcpy((char *)v103, "hasMetaData");
    v60 = 0;
    memset(&v59[4], 0, 24);
    v59[0] = v40;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v103, (uint64_t)v59);
    v41 = v20[42];
    BYTE7(v103[1]) = 13;
    strcpy((char *)v103, "needsMetaData");
    v58 = 0;
    memset(&v57[4], 0, 24);
    v57[0] = v41;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v103, (uint64_t)v57);
    v42 = v20[43];
    BYTE7(v103[1]) = 19;
    strcpy((char *)v103, "targetInCuratedArea");
    v56 = 0;
    memset(&v55[4], 0, 24);
    v55[0] = v42;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v103, (uint64_t)v55);
    v43 = v20[44];
    BYTE7(v103[1]) = 17;
    strcpy((char *)v103, "targetIsInLowZoom");
    v54 = 0;
    memset(&v53[4], 0, 24);
    v53[0] = v43;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v103, (uint64_t)v53);
    v44 = v20[46];
    BYTE7(v103[1]) = 5;
    strcpy((char *)v103, "flags");
    v45 = 0x3030303030303030;
    if (v44)
    {
      if ((v20[45] & 1) != 0)
        v45 = 0x3130303030303030;
      if ((v20[45] & 2) != 0)
        v45 |= 0x31000000000000uLL;
      if ((v20[45] & 4) != 0)
        v45 |= 0x310000000000uLL;
      if ((v20[45] & 8) != 0)
        v45 |= 0x3100000000uLL;
      if ((v20[45] & 0x10) != 0)
        v45 = v45 & 0xFFFFFFFF00FFFFFFLL | 0x31000000;
      if ((v20[45] & 0x20) != 0)
        v45 = v45 & 0xFFFFFFFFFF00FFFFLL | 0x310000;
      if ((v20[45] & 0x40) != 0)
        v45 = v45 & 0xFFFFFFFFFFFF00FFLL | 0x3100;
      if ((char)v20[45] < 0)
        v45 = v45 & 0xFFFFFFFFFFFFFF00 | 0x31;
    }
    v50 = 0;
    v51 = 0x800000000000000;
    v52 = 4;
    v49 = v45;
    gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v103, (uint64_t)v48);
  }
}

void sub_19F603E6C(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];

  if (*(_QWORD *)(a3 + 8) == 0x8BD499FBD96FBB9ELL && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::ElevationLogic,md::ElevationContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_1,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_1,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBC30;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CBBE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0,std::allocator<md::ElevationLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::ResolvedDependencies const&,md::ElevationContext &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CBBE8;
  a2[1] = v2;
  return result;
}

_QWORD *md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SettingsContext>,gdc::TypeList<md::LayerDataLogicContext>>::resolveDependencies(_QWORD *result, uint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_71;
  }
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = 0xE42D19AFCA302E68;
    if (a3 <= 0xE42D19AFCA302E68)
      v4 = 0xE42D19AFCA302E68 % a3;
  }
  else
  {
    v4 = (a3 - 1) & 0xE42D19AFCA302E68;
  }
  v7 = *(_QWORD **)(a2 + 8 * v4);
  if (!v7)
    goto LABEL_25;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_25;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 0xE42D19AFCA302E68)
      {
        if (v8[2] == 0xE42D19AFCA302E68)
          goto LABEL_23;
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == 0xE42D19AFCA302E68)
      break;
    if (v9 >= a3)
      v9 %= a3;
    if (v9 != v4)
      goto LABEL_25;
LABEL_12:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_25;
  }
  if (v8[2] != 0xE42D19AFCA302E68)
    goto LABEL_12;
LABEL_23:
  v11 = v8[5];
  if (*(_QWORD *)(v11 + 8) == 0xE42D19AFCA302E68)
  {
    v6 = *(_QWORD *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    v12 = 0xC97B9E962ADF4AD4;
    if (a3 <= 0xC97B9E962ADF4AD4)
      v12 = 0xC97B9E962ADF4AD4 % a3;
  }
  else
  {
    v12 = (a3 - 1) & 0xC97B9E962ADF4AD4;
  }
  v13 = *(_QWORD **)(a2 + 8 * v12);
  if (!v13)
    goto LABEL_48;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_48;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0xC97B9E962ADF4AD4)
      {
        if (v14[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_46;
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v15 = v14[1];
    if (v15 != 0xC97B9E962ADF4AD4)
    {
      if (v15 >= a3)
        v15 %= a3;
      if (v15 != v12)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v14[2] != 0xC97B9E962ADF4AD4)
    {
LABEL_35:
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) == 0xC97B9E962ADF4AD4)
  {
    v5 = *(_QWORD *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    v18 = 0x7851AF310F49C988;
    if (a3 <= 0x7851AF310F49C988)
      v18 = 0x7851AF310F49C988 % a3;
  }
  else
  {
    v18 = (a3 - 1) & 0x7851AF310F49C988;
  }
  v19 = *(_QWORD **)(a2 + 8 * v18);
  if (!v19)
    goto LABEL_71;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_71;
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v20[1];
      if (v22 == 0x7851AF310F49C988)
      {
        if (v20[2] == 0x7851AF310F49C988)
          goto LABEL_69;
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == 0x7851AF310F49C988)
      break;
    if (v21 >= a3)
      v21 %= a3;
    if (v21 != v18)
      goto LABEL_71;
LABEL_58:
    v20 = (_QWORD *)*v20;
    if (!v20)
      goto LABEL_71;
  }
  if (v20[2] != 0x7851AF310F49C988)
    goto LABEL_58;
LABEL_69:
  v23 = v20[5];
  if (*(_QWORD *)(v23 + 8) != 0x7851AF310F49C988)
  {
LABEL_71:
    v24 = 0;
    goto LABEL_72;
  }
  v24 = *(_QWORD *)(v23 + 32);
LABEL_72:
  *result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

_QWORD *gdc::ManagedObjectHolder<md::ElevationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B0DE8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x1000C40C50DD75CLL);
  return a1;
}

void gdc::ManagedObjectHolder<md::ElevationContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B0DE8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x1000C40C50DD75CLL);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ElevationContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19F604534(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v1 + 336);
  if (*(_BYTE *)(v1 + 328))
  {
    v3 = *(_QWORD **)(v1 + 320);
    if (v3 == (_QWORD *)(v1 + 296))
    {
      v4 = 4;
      v3 = (_QWORD *)(v1 + 296);
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
LABEL_7:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 256);
  *(_QWORD *)(v1 + 136) = &off_1E42B4C90;

  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<VKTimedAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4C90;

  return a1;
}

void geo::_retain_ptr<VKTimedAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B4C90;

  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::ElevationLogic::ElevationLogic(md::World *,md::MapEngine *,md::RunLoopController *,md::AnimationRunner const*,BOOL,md::DaVinciTransitionManager const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ElevationLogic::ElevationLogic(md::World *,md::MapEngine *,md::RunLoopController *,md::AnimationRunner const*,BOOL,md::DaVinciTransitionManager const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ElevationLogic::ElevationLogic(md::World *,md::MapEngine *,md::RunLoopController *,md::AnimationRunner const*,BOOL,md::DaVinciTransitionManager const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ElevationLogic::ElevationLogic(md::World *,md::MapEngine *,md::RunLoopController *,md::AnimationRunner const*,BOOL,md::DaVinciTransitionManager const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42799F0;
  return result;
}

void std::__function::__func<md::ElevationLogic::ElevationLogic(md::World *,md::MapEngine *,md::RunLoopController *,md::AnimationRunner const*,BOOL,md::DaVinciTransitionManager const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ElevationLogic::ElevationLogic(md::World *,md::MapEngine *,md::RunLoopController *,md::AnimationRunner const*,BOOL,md::DaVinciTransitionManager const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42799F0;
}

void std::__function::__func<md::ElevationLogic::ElevationLogic(md::World *,md::MapEngine *,md::RunLoopController *,md::AnimationRunner const*,BOOL,md::DaVinciTransitionManager const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ElevationLogic::ElevationLogic(md::World *,md::MapEngine *,md::RunLoopController *,md::AnimationRunner const*,BOOL,md::DaVinciTransitionManager const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::operator()()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "shrinkDiskCacheToSize:callbackQ:finished:", 0, MEMORY[0x1E0C80D38], &__block_literal_global_4633);

}

void sub_19F6046C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZZN2md14ElevationLogicC1EPNS_5WorldEPNS_9MapEngineEPNS_17RunLoopControllerEPKNS_15AnimationRunnerEbPKNS_24DaVinciTransitionManagerEPU28objcproto17OS_dispatch_queue8NSObjectENK3__0clEb_block_invoke()
{
  id v0;
  id v1;

  objc_msgSend(MEMORY[0x1E0D275D0], "modernLoader");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "clearAllCaches");

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("VKShouldFlushTileCachesNotification"), 0);

}

void sub_19F60473C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

_QWORD *md::ElevationLogic::setElevationAdjustmentFeedback(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[4];

  v2 = result;
  v12[3] = *MEMORY[0x1E0C80C00];
  v3 = result + 37;
  if (*((unsigned __int8 *)result + 328) != *(unsigned __int8 *)(a2 + 32))
  {
    if (!*((_BYTE *)result + 328))
    {
      result = *(_QWORD **)(a2 + 24);
      if (result)
      {
        if (result == (_QWORD *)a2)
        {
          v2[40] = v3;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v3);
        }
        else
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
          v2[40] = result;
        }
      }
      else
      {
        v2[40] = 0;
      }
      *((_BYTE *)v2 + 328) = 1;
      return result;
    }
    v5 = (_QWORD *)result[40];
    if (v5 == v3)
    {
      v6 = 4;
    }
    else
    {
      if (!v5)
      {
LABEL_16:
        *((_BYTE *)v2 + 328) = 0;
        return result;
      }
      v6 = 5;
      v3 = (_QWORD *)result[40];
    }
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8 * v6))(v3);
    goto LABEL_16;
  }
  if (!*((_BYTE *)result + 328))
    return result;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      v11 = v10;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v10);
    }
    else
    {
      v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    v11 = 0;
  }
  if (v3 != v10)
  {
    v7 = v11;
    v8 = (_QWORD *)v2[40];
    if (v11 == v10)
    {
      if (v8 == v3)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, v12);
        (*(void (**)(_QWORD *))(*v11 + 32))(v11);
        v11 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v2[40] + 24))(v2[40], v10);
        (*(void (**)(_QWORD))(*(_QWORD *)v2[40] + 32))(v2[40]);
        v2[40] = 0;
        v11 = v10;
        (*(void (**)(_QWORD *, _QWORD *))(v12[0] + 24))(v12, v3);
        (*(void (**)(_QWORD *))(v12[0] + 32))(v12);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, v3);
        (*(void (**)(_QWORD *))(*v11 + 32))(v11);
        v11 = (_QWORD *)v2[40];
      }
      v2[40] = v3;
    }
    else if (v8 == v3)
    {
      (*(void (**)(_QWORD *, _QWORD *))(v2[37] + 24))(v3, v10);
      (*(void (**)(_QWORD))(*(_QWORD *)v2[40] + 32))(v2[40]);
      v2[40] = v11;
      v11 = v10;
    }
    else
    {
      v11 = (_QWORD *)v2[40];
      v2[40] = v7;
    }
  }
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void md::ElevationLogic::setFlyoverTour(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a3)
  {
    v3 = (unint64_t *)(a3 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 264);
  *(_QWORD *)(a1 + 256) = a2;
  *(_QWORD *)(a1 + 264) = a3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void md::LabelStyleContext::setScaleOptions(md::LabelStyleContext *this, const char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const void **v26;
  uint64_t v27;
  void *__p[2];
  unsigned __int8 v29;
  void (**v30)(md::StyleSettingsObjectNode *__hidden);
  uint64_t v31;
  char *v32[2];
  char v33;
  const void *v34[2];
  char v35;
  const void **v36;
  const void *v37[2];
  char v38;
  const void **v39;
  const void *v40[2];
  char v41;
  const void **v42;
  __int128 __dst;
  unint64_t v44;
  __int128 *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v44 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v44) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  md::StyleSettingsParser::StyleSettingsParser((uint64_t)__p, (uint64_t)&__dst);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)__dst);
  v9 = v29;
  if ((v29 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v29 & 0x80u) != 0)
    v9 = (unint64_t)__p[1];
  *(_QWORD *)&__dst = v10;
  *((_QWORD *)&__dst + 1) = v9;
  md::StyleSettingsParser::parseNode((uint64_t)__p, (uint64_t)&v30, (unsigned __int8 **)&__dst);
  if (v33)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v11 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst) = 136315138;
      *(_QWORD *)((char *)&__dst + 4) = __s;
      _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "LabelStyleContext: unable to parse label scales: %s", (uint8_t *)&__dst, 0xCu);
    }
    goto LABEL_49;
  }
  HIBYTE(v44) = 4;
  strcpy((char *)&__dst, "text");
  v12 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>((uint64_t)&v31, (const void **)&__dst);
  if (v32 != (char **)v12)
  {
    v13 = v12[7];
    if (*(_BYTE *)(v13 + 8) == 1)
    {
      *(_QWORD *)&__dst = &off_1E4279BE8;
      *((_QWORD *)&__dst + 1) = this;
      v45 = &__dst;
      md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_0::operator()(v13, (uint64_t)&__dst);
      v14 = v45;
      if (v45 == &__dst)
      {
        v15 = 4;
        v14 = &__dst;
        goto LABEL_27;
      }
      if (v45)
      {
        v15 = 5;
LABEL_27:
        (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
      }
    }
  }
  v41 = 4;
  strcpy((char *)v40, "halo");
  v16 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>((uint64_t)&v31, v40);
  if (v32 != (char **)v16)
  {
    v17 = v16[7];
    if (*(_BYTE *)(v17 + 8) == 1)
    {
      v40[0] = &off_1E4279C30;
      v40[1] = this;
      v42 = v40;
      md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_0::operator()(v17, (uint64_t)v40);
      v18 = v42;
      if (v42 == v40)
      {
        v19 = 4;
        v18 = v40;
        goto LABEL_34;
      }
      if (v42)
      {
        v19 = 5;
LABEL_34:
        (*((void (**)(void))*v18 + v19))();
      }
    }
  }
  v38 = 4;
  strcpy((char *)v37, "icon");
  v20 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>((uint64_t)&v31, v37);
  if (v32 == (char **)v20)
    goto LABEL_42;
  v21 = v20[7];
  if (*(_BYTE *)(v21 + 8) != 1)
    goto LABEL_42;
  v37[0] = &off_1E4279C78;
  v37[1] = this;
  v39 = v37;
  md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_0::operator()(v21, (uint64_t)v37);
  v22 = v39;
  if (v39 == v37)
  {
    v23 = 4;
    v22 = v37;
  }
  else
  {
    if (!v39)
      goto LABEL_42;
    v23 = 5;
  }
  (*((void (**)(void))*v22 + v23))();
LABEL_42:
  v35 = 6;
  strcpy((char *)v34, "shield");
  v24 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>((uint64_t)&v31, v34);
  if (v32 == (char **)v24)
    goto LABEL_49;
  v25 = v24[7];
  if (*(_BYTE *)(v25 + 8) != 1)
    goto LABEL_49;
  v34[0] = &unk_1E4279CC0;
  v34[1] = this;
  v36 = v34;
  md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_0::operator()(v25, (uint64_t)v34);
  v26 = v36;
  if (v36 == v34)
  {
    v27 = 4;
    v26 = v34;
  }
  else
  {
    if (!v36)
      goto LABEL_49;
    v27 = 5;
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_49:
  v30 = &off_1E429F8B0;
  std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::destroy(v32[0]);
  if ((char)v29 < 0)
    operator delete(__p[0]);
}

void md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  const char *v6;
  size_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  size_t v18;
  _DWORD *v19;
  uint64_t v20;
  void *__p[2];
  unint64_t v22;
  int v23;

  v3 = 0;
  v4 = a1 + 16;
  v5 = (uint64_t *)(a1 + 24);
  do
  {
    v6 = (&md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::scaleNames)[(_QWORD)v3];
    v7 = strlen(v6);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v9 = operator new(v10 + 1);
      __p[1] = v8;
      v22 = v11 | 0x8000000000000000;
      __p[0] = v9;
    }
    else
    {
      HIBYTE(v22) = v7;
      v9 = __p;
      if (!v7)
        goto LABEL_11;
    }
    memmove(v9, v6, (size_t)v8);
LABEL_11:
    *((_BYTE *)v8 + (_QWORD)v9) = 0;
    v12 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(v4, (const void **)__p);
    if (v5 == v12 || (v13 = v12[7], *(_BYTE *)(v13 + 8)))
    {
LABEL_13:
      v14 = 0;
      v15 = 0;
      v16 = 0;
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_15;
LABEL_14:
      operator delete(__p[0]);
      goto LABEL_15;
    }
    v18 = *(_QWORD *)(v13 + 24);
    if (v18 == 4)
    {
      v19 = *(_DWORD **)(v13 + 16);
      if (*v19 == 1819047278)
        goto LABEL_13;
    }
    else
    {
      v19 = *(_DWORD **)(v13 + 16);
    }
    v20 = md::StyleSettingsValueNode::value_as<float>(v19, v18);
    v15 = v20 & 0x100000000;
    v14 = v20 & 0xFFFFFF00;
    v16 = v20;
    if (SHIBYTE(v22) < 0)
      goto LABEL_14;
LABEL_15:
    if (v15)
    {
      __p[0] = v3;
      v23 = v16 | v14;
      v17 = *(_QWORD *)(a2 + 24);
      if (!v17)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x19F604FF4);
      }
      (*(void (**)(uint64_t, void **, int *))(*(_QWORD *)v17 + 48))(v17, __p, &v23);
    }
    v3 = (char *)v3 + 1;
  }
  while (v3 != (void *)6);
}

void std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_4,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_4>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_4,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_4>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E4279CC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_4,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_4>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E4279CC0;
  a2[1] = v2;
  return result;
}

float std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_4,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_4>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(a1 + 8) + 20 * *a2 + 16) = *a3;
  return result;
}

void std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_3,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_3>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_3,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_3>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279C78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_3,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_3>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279C78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_3,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_3>,void ()(unsigned long,float)>::operator()(uint64_t result, _QWORD *a2, float *a3)
{
  uint64_t v3;
  float v4;

  v3 = *(_QWORD *)(result + 8) + 20 * *a2;
  v4 = *a3 * 1.4;
  if (*a2 < 2uLL)
    v4 = *a3;
  *(float *)(v3 + 8) = *a3;
  *(float *)(v3 + 12) = v4;
  return result;
}

void std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_2,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_2>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_2,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_2>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279C30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_2,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_2>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279C30;
  a2[1] = v2;
  return result;
}

float std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_2,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_2>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(a1 + 8) + 20 * *a2 + 4) = *a3;
  return result;
}

void std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_1,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_1>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_1,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_1>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4279BE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_1,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_1>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E4279BE8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_1,std::allocator<md::LabelStyleContext::applyScales(md::StyleSettingsObjectNode const*)::$_1>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(a1 + 8) + 20 * *a2) = *a3;
  return result;
}

void md::LabelStyleContext::initialize(md::LabelStyleContext *a1, uint64_t *a2)
{
  gss::Allocator *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  gss::Allocator *v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  const char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _BYTE v30[32];
  unint64_t *v31;
  std::__shared_weak_count *v32;
  char *v33;
  std::__shared_weak_count *v34;
  unsigned __int8 v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::string v38;
  char v39;

  md::LabelStyleContext::setScaleOptions(a1, "\n{\n    text:   { small:.9, medium:1.0, large:1.3, xlarge:1.6, xxlarge:1.9, xxxlarge:2.2 },\n    halo:   { small:.9, medium:1.0, large:1.2, xlarge:1.4, xxlarge:1.6, xxxlarge:1.8 },\n    icon:   { small:.9, medium:1.0, large:1.0, xlarge:1.15, xxlarge:1.3, xxxlarge:1.45 },\n    shield: { small:.9, medium:1.0, large:1.0, xlarge:1.1, xxlarge:1.2, xxxlarge:1.3 },\n}\n");
  if (*a2)
  {
    v5 = gss::Allocator::instance(v4);
    v6 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8, 4);
    v7 = v6;
    if (v6)
      *v6 = 0xB0001004BLL;
    v8 = *a2;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = (std::__shared_weak_count *)v5;
    v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 8, 4);
    v31 = v9;
    v32 = (std::__shared_weak_count *)v9;
    v33 = (char *)(v9 + 1);
    if (v9)
      *v9 = *v7;
    v32 = (std::__shared_weak_count *)(v9 + 1);
    gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v31);
    *(_QWORD *)&v30[7] = 0;
    *(_QWORD *)v30 = 0;
    v30[15] = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v36, v8, (gss::FeatureAttributeSet *)&v31, (gss::QueryOverrides *)v30);
    if (!v30[14] && *(_QWORD *)v30)
    {
      v11 = gss::Allocator::instance(v10);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)v30, *(unsigned __int16 *)&v30[12]);
    }
    if (v31)
    {
      v32 = (std::__shared_weak_count *)v31;
      ((void (*)(std::__shared_weak_count *, unint64_t *, int64_t))v34->__vftable[1].~__shared_weak_count)(v34, v31, v33 - (char *)v31);
    }
    v12 = v36;
    if (v36)
    {
      v13 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v32 = v13;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      else
      {
        v32 = 0;
      }
      v33 = 0;
      v34 = 0;
      v31 = (unint64_t *)v12;
      v35 = 0;
      v17 = (*(uint64_t (**)(unint64_t, char **))(*(_QWORD *)v12 + 48))(v12, &v33);
      v35 = v17;
      if (v13)
      {
        v18 = (unint64_t *)&v13->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        v17 = v35;
      }
      if (v17)
      {
        v39 = 1;
        gss::RenderStyleHelper<gss::PropertyID,std::string>::valueForKey(&v38, 0x1C7u, 1, v31[3], (BOOL *)&v39);
        v30[0] = v39;
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v30[8], v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v38.__r_.__value_.__l.__data_);
        }
        else
        {
          *(std::string *)&v30[8] = v38;
        }
        if (v30[0])
        {
          if (v30[31] >= 0)
            v20 = &v30[8];
          else
            v20 = *(const char **)&v30[8];
          md::LabelStyleContext::setScaleOptions(a1, v20);
        }
        if ((v30[31] & 0x80000000) != 0)
          operator delete(*(void **)&v30[8]);
        if (v35)
          (*(void (**)(unint64_t *))(*v31 + 56))(v31);
      }
      v21 = v34;
      if (v34)
      {
        v22 = (unint64_t *)&v34->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = v32;
      if (v32)
      {
        v25 = (unint64_t *)&v32->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    v27 = v37;
    if (v37)
    {
      v28 = (unint64_t *)&v37->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v7)
      (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v5 + 40))(v5, v7, 8);
  }
}

void DaVinci::GetDataIDs(DaVinci *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if ((v1 & 1) == 0)
  {
    {
      v2 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>();
      v3 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>();
      v4 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>();
      v5 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>();
      v6 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>();
      v7 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>();
      v8 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>();
      v9 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>();
      v10 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>();
      v11 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>();
      v12 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>();
      v13 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>();
      v14 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>();
      v15 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>();
      v16 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>();
      v17 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>();
      v18 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>();
      v19 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>();
      v20 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>();
      v21 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>>();
      v22 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinciTraffic::Style>>();
      v23 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>>();
      v24 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>();
      v25 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>();
      v26 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LightingDebugOptions>>();
      v27 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>();
      v28 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>();
      v29 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>();
      v30 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>();
      v31 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>();
      v32 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>();
      v33 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>();
      v34 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>();
      v35 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>();
      v36 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>();
      v37 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>();
      v38 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>();
      v39 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>();
      v40 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>>();
      v41 = gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>();
      v42 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>();
      v43 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>();
      v44 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>();
      v45 = gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>();
      v46 = gdc::typeIndex<DaVinci::AmbientTexture>();
      v47 = gdc::typeIndex<DaVinci::ShadowTexture>();
      v48 = gdc::typeIndex<DaVinci::TexTexture>();
      v49 = gdc::typeIndex<DaVinci::OcclusionTexture>();
      v50 = gdc::typeIndex<DaVinci::RouteMaskTexture>();
      v51 = gdc::typeIndex<DaVinci::EmissiveTexture>();
      v52 = gdc::typeIndex<DaVinci::OverlayTexture>();
      v53 = gdc::typeIndex<DaVinci::StyleIndexTexture>();
      v54 = gdc::typeIndex<DaVinci::StyleTexture>();
      v55 = gdc::typeIndex<DaVinci::AridityTexture>();
      v56 = gdc::typeIndex<DaVinci::TemperatureTexture>();
      v57 = gdc::typeIndex<DaVinci::Gradient1Texture>();
      v58 = gdc::typeIndex<DaVinci::Gradient2Texture>();
      v59 = gdc::typeIndex<DaVinci::DiffuseTexture>();
      v60 = gdc::typeIndex<DaVinci::AlphaTexture>();
      DaVinci::GetDataIDs(void)::kDataIDs = 0u;
      unk_1EE585098 = 0u;
      dword_1EE5850A8 = 1065353216;
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v2, v2);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v3, v3);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v4, v4);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v5, v5);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v6, v6);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v7, v7);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v8, v8);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v9, v9);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v10, v10);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v11, v11);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v12, v12);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v13, v13);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v14, v14);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v15, v15);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v16, v16);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v17, v17);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v18, v18);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v19, v19);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v20, v20);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v21, v21);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v22, v22);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v23, v23);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v24, v24);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v25, v25);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v26, v26);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v27, v27);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v28, v28);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v29, v29);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v30, v30);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v31, v31);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v32, v32);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v33, v33);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v34, v34);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v35, v35);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v36, v36);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v37, v37);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v38, v38);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v39, v39);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v40, v40);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v41, v41);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v42, v42);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v43, v43);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v44, v44);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v45, v45);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v46, v46);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v47, v47);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v48, v48);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v49, v49);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v50, v50);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v51, v51);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v52, v52);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v53, v53);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v54, v54);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v55, v55);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v56, v56);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v57, v57);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v58, v58);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v59, v59);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&DaVinci::GetDataIDs(void)::kDataIDs, v60, v60);
      __cxa_atexit((void (*)(void *))std::unordered_set<unsigned long>::~unordered_set[abi:nn180100], &DaVinci::GetDataIDs(void)::kDataIDs, &dword_19F029000);
    }
  }
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[99];
}

uint64_t gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[341];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::View>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[359];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[373];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[407];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Transform>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[363];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[403];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[409];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[381];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::Style>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[401];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[377];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[399];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[379];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[393];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[357];
}

uint64_t gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[345];
}

uint64_t gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[343];
}

uint64_t gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[339];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::Tile::Clipping>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[361];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE577000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE577000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RibbonStyle>>(void)::index = v4;
      v1 = &unk_1EE577000;
    }
  }
  return v1[381];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinciTraffic::Style>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE577000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE577000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinciTraffic::Style>>(void)::index = v4;
      v1 = &unk_1EE577000;
    }
  }
  return v1[379];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE577000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE577000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ClippedStroke>>(void)::index = v4;
      v1 = &unk_1EE577000;
    }
  }
  return v1[383];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[411];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[383];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LightingDebugOptions>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE577000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE577000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LightingDebugOptions>>(void)::index = v4;
      v1 = &unk_1EE577000;
    }
  }
  return v1[387];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[397];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[375];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[385];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[369];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[389];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[395];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[371];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[365];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[405];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[367];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[391];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE577000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE577000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedFillStyle>>(void)::index = v4;
      v1 = &unk_1EE577000;
    }
  }
  return v1[385];
}

uint64_t gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[387];
}

uint64_t gdc::typeIndex<DaVinci::AmbientTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE577000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE577000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::AmbientTexture>(void)::index = v4;
      v1 = &unk_1EE577000;
    }
  }
  return v1[395];
}

uint64_t gdc::typeIndex<DaVinci::ShadowTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::ShadowTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[417];
}

uint64_t gdc::typeIndex<DaVinci::TexTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::TexTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[413];
}

uint64_t gdc::typeIndex<DaVinci::OcclusionTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::OcclusionTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[431];
}

uint64_t gdc::typeIndex<DaVinci::RouteMaskTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::RouteMaskTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[433];
}

uint64_t gdc::typeIndex<DaVinci::EmissiveTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::EmissiveTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[425];
}

uint64_t gdc::typeIndex<DaVinci::OverlayTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::OverlayTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[423];
}

uint64_t gdc::typeIndex<DaVinci::StyleIndexTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::StyleIndexTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[435];
}

uint64_t gdc::typeIndex<DaVinci::StyleTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::StyleTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[415];
}

uint64_t gdc::typeIndex<DaVinci::AridityTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::AridityTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[419];
}

uint64_t gdc::typeIndex<DaVinci::TemperatureTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::TemperatureTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[437];
}

uint64_t gdc::typeIndex<DaVinci::Gradient1Texture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::Gradient1Texture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[427];
}

uint64_t gdc::typeIndex<DaVinci::Gradient2Texture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::Gradient2Texture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[429];
}

uint64_t gdc::typeIndex<DaVinci::DiffuseTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE585000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE585000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::DiffuseTexture>(void)::index = v4;
      v1 = &unk_1EE585000;
    }
  }
  return v1[421];
}

uint64_t gdc::typeIndex<DaVinci::AlphaTexture>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v1 = &unk_1EE577000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EE577000;
    if (v3)
    {
      do
        v4 = __ldaxr((unint64_t *)&gdc::internal::nextIndex(void)::index);
      while (__stlxr(v4 + 1, (unint64_t *)&gdc::internal::nextIndex(void)::index));
      gdc::typeIndex<DaVinci::AlphaTexture>(void)::index = v4;
      v1 = &unk_1EE577000;
    }
  }
  return v1[389];
}

void md::MaterialLogic::~MaterialLogic(md::MaterialLogic *this)
{
  md::MaterialLogic::~MaterialLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *(_QWORD *)this = &off_1E428E010;
  v2 = (_QWORD *)*((_QWORD *)this + 26);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v8)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v8)
      goto LABEL_15;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_15:
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (!v11)
    goto LABEL_19;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v14)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v14)
      goto LABEL_25;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_25:
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

uint64_t md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[6];

  if (*(_QWORD *)(a3 + 8) == 0xD2404CDD1F9A6950 && (v4 = *(_QWORD *)(a3 + 32)) != 0)
  {
    v6 = result;
    md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>(v7, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<md::components::SupportsFlexing>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x3E7F125C68B9E585;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x3E7F125C68B9E585;
      if (*(_QWORD *)&v3 <= 0x3E7F125C68B9E585uLL)
        v5 = 0x3E7F125C68B9E585uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x3E7F125C68B9E585;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x3E7F125C68B9E585)
            {
              if (v7[2] == 0x3E7F125C68B9E585)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x3E7F125C68B9E585)
          {
            if (v7[2] == 0x3E7F125C68B9E585)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::SupportsFlexing]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3048;
  *(_QWORD *)(v11 + 8) = 0x3E7F125C68B9E585;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x3E7F125C68B9E585uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x3E7F125C68B9E585;
  v15[1] = "md::components::SupportsFlexing]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0x3E7F125C68B9E585, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F607810(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::components::DidResolvePendingMaterial>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::DidResolvePendingMaterial>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::DidResolvePendingMaterial>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::DidResolvePendingMaterial>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::components::SupportsFlexing>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::SupportsFlexing>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::SupportsFlexing>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::SupportsFlexing>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void md::MaterialLogic::_updateMaterialForComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int16 *v5;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  int8x8_t *v12;
  unsigned int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;

  v37 = a3;
  if (a5 && (v8 = *(unsigned __int16 *)(a5 + 10), *(_WORD *)(a5 + 10)))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = *(int8x8_t **)(a1 + 120);
    v39 = (uint64_t *)*a4;
    do
    {
      if (v11 < v8)
      {
        v10 = (unsigned int *)(*(_QWORD *)a5 + 4 * v11);
        v5 = (unsigned __int16 *)(*(_QWORD *)a5 + *(unsigned __int16 *)(a5 + 8) + 2 * v11);
      }
      v9 ^= (*v5
           - 0x61C8864680B583EBLL
           + ((((v9 << 6) - 0x61C8864680B583EBLL + (v9 >> 2) + *v10) ^ v9) << 6)
           + ((((v9 << 6) - 0x61C8864680B583EBLL + (v9 >> 2) + *v10) ^ v9) >> 2)) ^ ((v9 << 6)
                                                                                   - 0x61C8864680B583EBLL
                                                                                   + (v9 >> 2)
                                                                                   + *v10);
      v13 = v11 + 1;
      if (v11 + 1 < v8)
        ++v11;
      else
        v11 = v8;
    }
    while (v13 < v8);
    v40 = v9;
    v14 = a5;
  }
  else
  {
    v12 = *(int8x8_t **)(a1 + 120);
    v39 = (uint64_t *)*a4;
    v40 = 0;
    v14 = 0;
  }
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v35, v12, (uint64_t *)&v39, v14);
  v15 = (std::__shared_weak_count *)a4[2];
  v33 = a4[1];
  v34 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v19 = v35;
  v18 = (uint64_t)v36;
  if (v36)
  {
    v20 = (unint64_t *)&v36->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (std::__shared_weak_count *)a4[2];
  a4[1] = v19;
  a4[2] = v18;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v33)
    v25 = v35 == 0;
  else
    v25 = 1;
  if (v25)
  {
    if (!(v33 | v35))
    {
LABEL_37:
      if (v34)
      {
        v28 = (unint64_t *)&v34->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v30 = v36;
      if (v36)
      {
        v31 = (unint64_t *)&v36->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      return;
    }
  }
  else if (*(unsigned __int8 *)(v33 + 8) == *(unsigned __int8 *)(v35 + 8)
         && *(_QWORD *)(v33 + 48) == *(_QWORD *)(v35 + 48)
         && *(_QWORD *)(v33 + 16) == *(_QWORD *)(v35 + 16)
         && *(_QWORD *)(v33 + 32) == *(_QWORD *)(v35 + 32))
  {
    goto LABEL_37;
  }
  v26 = *(_QWORD **)(gdc::Registry::storage<md::components::Material>(a2) + 128);
  if (!v26)
    goto LABEL_37;
  while (1)
  {
    v39 = &v37;
    v40 = 1;
    v38 = a2;
    v27 = v26[6];
    if (!v27)
      break;
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v27 + 48))(v27, &v38, &v39);
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_37;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F607D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::components::FlexClientStateChanged>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::FlexClientStateChanged>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::FlexClientStateChanged>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::FlexClientStateChanged>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1},std::allocator<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1}>,BOOL ()(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1},std::allocator<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1}>,BOOL ()(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D8048;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1},std::allocator<gms::MaterialManager<ggl::Texture2D>::addMaterialSheet(unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>)::{lambda(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)#1}>,BOOL ()(gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D8048;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::MaterialLogic::_destroyOutgoingMaterials(md::IdentifiedResourceContext const&)::$_0,std::allocator<md::MaterialLogic::_destroyOutgoingMaterials(md::IdentifiedResourceContext const&)::$_0>,void ()(gdc::Registry *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::MaterialLogic::_destroyOutgoingMaterials(md::IdentifiedResourceContext const&)::$_0,std::allocator<md::MaterialLogic::_destroyOutgoingMaterials(md::IdentifiedResourceContext const&)::$_0>,void ()(gdc::Registry *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42CB180;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MaterialLogic::_destroyOutgoingMaterials(md::IdentifiedResourceContext const&)::$_0,std::allocator<md::MaterialLogic::_destroyOutgoingMaterials(md::IdentifiedResourceContext const&)::$_0>,void ()(gdc::Registry *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42CB180;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::MaterialLogic::_destroyOutgoingMaterials(md::IdentifiedResourceContext const&)::$_0,std::allocator<md::MaterialLogic::_destroyOutgoingMaterials(md::IdentifiedResourceContext const&)::$_0>,void ()(gdc::Registry *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  int8x8_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  _QWORD *j;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  BOOL v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;

  v3 = *a2;
  v4 = gdc::Registry::storage<md::components::QueuedForMaterialDeletion>(*a2);
  v5 = *(uint64_t **)(v4 + 56);
  for (i = *(uint64_t **)(v4 + 64); v5 != i; ++v5)
  {
    v7 = *v5;
    v8 = (uint64_t *)gdc::Registry::storage<md::components::Material>(v3);
    v58 = v7;
    if (geo::sparse_map<gdc::Entity,md::components::Material>::erase(v8 + 4, HIDWORD(v7)))
    {
      v9 = (_QWORD *)v8[28];
      if (v9)
      {
        v10 = v8[31];
        do
        {
          v60 = &v58;
          v61 = 1;
          v59 = v10;
          v11 = v9[6];
          if (!v11)
            goto LABEL_68;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v59, &v60);
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  v12 = (_QWORD *)gdc::Registry::storage<md::components::QueuedForMaterialDeletion>(v3);
  v13 = v12;
  if (v12[29])
  {
    v14 = (_QWORD *)v12[28];
    if (v14)
    {
      v15 = v12[31];
      v16 = (uint64_t *)v12[7];
      v17 = (uint64_t)(v12[8] - (_QWORD)v16) >> 3;
      do
      {
        v60 = v16;
        v61 = v17;
        v59 = v15;
        v18 = v14[6];
        if (!v18)
          goto LABEL_68;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v18 + 48))(v18, &v59, &v60);
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  v13[8] = v13[7];
  v13[11] = v13[10];
  if (**(_BYTE **)(a1 + 16))
  {
    v19 = (_QWORD *)gdc::Registry::storage<md::components::Material>(v3);
    v20 = (uint64_t *)v19[7];
    v21 = (uint64_t *)v19[8];
    if (v20 != v21)
    {
      v22 = *(_QWORD **)(a1 + 8);
      v23 = (int8x8_t)v22[1];
      if (v23)
      {
        v24 = (unint64_t *)v19[10];
LABEL_19:
        v25 = *v24;
        v26 = (uint8x8_t)vcnt_s8(v23);
        v26.i16[0] = vaddlv_u8(v26);
        if (v26.u32[0] > 1uLL)
        {
          v27 = *v24;
          if (v25 >= *(_QWORD *)&v23)
            v27 = v25 % *(_QWORD *)&v23;
        }
        else
        {
          v27 = v25 & (*(_QWORD *)&v23 - 1);
        }
        v28 = *(_QWORD **)(*v22 + 8 * v27);
        if (v28)
        {
          v29 = (_QWORD *)*v28;
          if (v29)
          {
            v30 = *v20;
            if (v26.u32[0] < 2uLL)
            {
              v31 = *(_QWORD *)&v23 - 1;
              while (1)
              {
                v33 = v29[1];
                if (v25 == v33)
                {
                  if (v29[2] == v25)
                    goto LABEL_39;
                }
                else if ((v33 & v31) != v27)
                {
                  goto LABEL_64;
                }
                v29 = (_QWORD *)*v29;
                if (!v29)
                  goto LABEL_64;
              }
            }
            do
            {
              v32 = v29[1];
              if (v25 == v32)
              {
                if (v29[2] == v25)
                {
LABEL_39:
                  v34 = (uint64_t *)gdc::Registry::storage<md::components::QueuedForMaterialDeletion>(v3);
                  v58 = v30;
                  v35 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v34 + 4, (uint64_t)&v58);
                  v57 = v30;
                  if ((v36 & 1) == 0)
                  {
                    v37 = v34[31];
                    if (v34[10] + (((uint64_t)v35 - v34[7]) >> 3) != v34[11])
                    {
                      for (j = (_QWORD *)v34[16]; j; j = (_QWORD *)*j)
                      {
                        v60 = &v58;
                        v61 = 1;
                        v59 = v37;
                        v39 = j[6];
                        if (!v39)
                          goto LABEL_68;
                        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v39 + 48))(v39, &v59, &v60);
                      }
LABEL_63:
                      v60 = (uint64_t *)*v24;
                      v55 = (uint64_t *)gdc::Registry::storage<md::components::PendingMaterial>(v3);
                      gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(v55, v57, &v60);
                      break;
                    }
LABEL_60:
                    v53 = (_QWORD *)v34[22];
                    if (!v53)
                      goto LABEL_63;
                    while (1)
                    {
                      v60 = &v58;
                      v61 = 1;
                      v59 = v37;
                      v54 = v53[6];
                      if (!v54)
                        break;
                      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v54 + 48))(v54, &v59, &v60);
                      v53 = (_QWORD *)*v53;
                      if (!v53)
                        goto LABEL_63;
                    }
LABEL_68:
                    std::__throw_bad_function_call[abi:nn180100]();
LABEL_69:
                    abort();
                  }
                  v41 = (_BYTE *)v34[11];
                  v40 = v34[12];
                  if ((unint64_t)v41 >= v40)
                  {
                    v43 = (char *)v34[10];
                    v44 = v41 - v43;
                    v45 = v41 - v43 + 1;
                    if (v45 < 0)
                      goto LABEL_69;
                    v46 = v40 - (_QWORD)v43;
                    if (2 * v46 > v45)
                      v45 = 2 * v46;
                    if (v46 >= 0x3FFFFFFFFFFFFFFFLL)
                      v45 = 0x7FFFFFFFFFFFFFFFLL;
                    if (v45)
                    {
                      v56 = v45;
                      v47 = (char *)operator new(v45);
                      v45 = v56;
                      v44 = v41 - v43;
                    }
                    else
                    {
                      v47 = 0;
                    }
                    v48 = &v47[v44];
                    v49 = &v47[v45];
                    v50 = (uint64_t)&v47[v44 + 1];
                    v52 = (char *)(v43 - v41);
                    v51 = v43 == v41;
                    v42 = v50;
                    if (v51)
                      v52 = 0;
                    v34[10] = (uint64_t)&v52[(_QWORD)v48];
                    v34[11] = v50;
                    v34[12] = (uint64_t)v49;
                    if (v43)
                      operator delete(v43);
                  }
                  else
                  {
                    v42 = (uint64_t)(v41 + 1);
                  }
                  v34[11] = v42;
                  v37 = v34[31];
                  goto LABEL_60;
                }
              }
              else
              {
                if (v32 >= *(_QWORD *)&v23)
                  v32 %= *(_QWORD *)&v23;
                if (v32 != v27)
                  break;
              }
              v29 = (_QWORD *)*v29;
            }
            while (v29);
          }
        }
LABEL_64:
        while (++v20 != v21)
        {
          v24 += 3;
          v23 = (int8x8_t)v22[1];
          if (v23)
            goto LABEL_19;
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::components::QueuedForMaterialDeletion>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForMaterialDeletion>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::components::QueuedForMaterialDeletion>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::components::QueuedForMaterialDeletion>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::clear(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = *(_QWORD **)(a1 + 80);
  if (v2[3])
  {
    v3 = (_QWORD *)v2[2];
    while (v3)
    {
      v10 = v3;
      v3 = (_QWORD *)*v3;
      if (*((_BYTE *)v10 + 48))
      {
        v11 = (std::__shared_weak_count *)v10[5];
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
      operator delete(v10);
    }
    v2[2] = 0;
    v4 = v2[1];
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*v2 + 8 * i) = 0;
    }
    v2[3] = 0;
  }
  v6 = *(_QWORD **)(a1 + 88);
  if (v6[3])
  {
    v7 = (_QWORD *)v6[2];
    while (v7)
    {
      v14 = v7;
      v7 = (_QWORD *)*v7;
      if (*((_BYTE *)v14 + 48))
      {
        v15 = (std::__shared_weak_count *)v14[5];
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      operator delete(v14);
    }
    v6[2] = 0;
    v8 = v6[1];
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(_QWORD *)(*v6 + 8 * j) = 0;
    }
    v6[3] = 0;
  }
}

void _ZNSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__1NS_9allocatorISN_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__1NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB210;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__0NS_9allocatorISN_EEFvvEED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CB1C8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13MaterialLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12AssetContextENS2_25IdentifiedResourceContextENS2_15RegistryContextENS2_17SceneQueryContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_15MaterialContextEE3__0NS_9allocatorISN_EEFvvEE7__cloneEPNS0_6__baseISQ_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CB1C8;
  a2[1] = v2;
  return result;
}

void md::MaterialContext::~MaterialContext(md::MaterialContext *this)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v2 = (_QWORD *)*((_QWORD *)this + 6);
  while (v2)
  {
    v10 = v2;
    v2 = (_QWORD *)*v2;
    v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    operator delete(v10);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    operator delete(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v4)
    goto LABEL_8;
  v5 = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v7)
      return;
  }
  else
  {
LABEL_8:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v7)
      return;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

_QWORD *gdc::ManagedObjectHolder<md::MaterialContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::MaterialContext *v2;

  *a1 = &off_1E42B0CF8;
  v2 = (md::MaterialContext *)a1[4];
  if (v2)
  {
    md::MaterialContext::~MaterialContext(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void gdc::ManagedObjectHolder<md::MaterialContext>::~ManagedObjectHolder(_QWORD *a1)
{
  md::MaterialContext *v1;

  *a1 = &off_1E42B0CF8;
  v1 = (md::MaterialContext *)a1[4];
  if (v1)
  {
    md::MaterialContext::~MaterialContext(v1);
    MEMORY[0x1A1AF4E00]();
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::MaterialContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

_QWORD *gms::MaterialManager<ggl::Texture2D>::~MaterialManager(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  std::__shared_weak_count *v13;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::~FrameCache((uint64_t)(a1 + 37));
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::~FrameCache((uint64_t)(a1 + 25));
  geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::~FrameCache((uint64_t)(a1 + 13));
  v2 = (std::__shared_weak_count *)a1[12];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[10];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[10];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[8];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (_QWORD *)a1[4];
    if (!v11)
      goto LABEL_18;
  }
  else
  {
LABEL_15:
    v11 = (_QWORD *)a1[4];
    if (!v11)
      goto LABEL_18;
  }
  do
  {
    v15 = v11;
    v11 = (_QWORD *)*v11;
    v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    operator delete(v15);
  }
  while (v11);
LABEL_18:
  v12 = (void *)a1[2];
  a1[2] = 0;
  if (v12)
    operator delete(v12);
  v13 = (std::__shared_weak_count *)a1[1];
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  return a1;
}

uint64_t geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::~FrameCache(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = *(_QWORD **)(a1 + 56);
  while (v2)
  {
    v7 = v2;
    v2 = (_QWORD *)*v2;
    if (*((_BYTE *)v7 + 48))
    {
      v8 = (std::__shared_weak_count *)v7[5];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v7);
  }
  v3 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 16);
  while (v4)
  {
    v11 = v4;
    v4 = (_QWORD *)*v4;
    if (*((_BYTE *)v11 + 48))
    {
      v12 = (std::__shared_weak_count *)v11[5];
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    operator delete(v11);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void std::__shared_ptr_pointer<gms::MaterialManager<ggl::Texture2D> *,std::shared_ptr<gms::MaterialManager<ggl::Texture2D>>::__shared_ptr_default_delete<gms::MaterialManager<ggl::Texture2D>,gms::MaterialManager<ggl::Texture2D>>,std::allocator<gms::MaterialManager<ggl::Texture2D>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__shared_ptr_pointer<gms::MaterialManager<ggl::Texture2D> *,std::shared_ptr<gms::MaterialManager<ggl::Texture2D>>::__shared_ptr_default_delete<gms::MaterialManager<ggl::Texture2D>,gms::MaterialManager<ggl::Texture2D>>,std::allocator<gms::MaterialManager<ggl::Texture2D>>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 24);
  if (result)
  {
    gms::MaterialManager<ggl::Texture2D>::~MaterialManager(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

pthread_rwlock_t *gms::TextureStore<ggl::Texture2D>::~TextureStore(pthread_rwlock_t *a1)
{
  void *v2;
  uint64_t sig;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  geo::read_write_lock *v9;
  const char *v10;

  v2 = *(void **)&a1[1].__opaque[16];
  if (v2)
    operator delete(v2);
  sig = a1[1].__sig;
  if (sig)
  {
    v4 = *(_QWORD *)a1[1].__opaque;
    v5 = (void *)a1[1].__sig;
    if (v4 != sig)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != sig);
      v5 = (void *)a1[1].__sig;
    }
    *(_QWORD *)a1[1].__opaque = sig;
    operator delete(v5);
  }
  v9 = (geo::read_write_lock *)pthread_rwlock_destroy(a1);
  if ((_DWORD)v9)
    geo::read_write_lock::logFailure(v9, (uint64_t)"destruction", v10);
  return a1;
}

void gms::LinearResolver::~LinearResolver(gms::LinearResolver *this)
{
  uint64_t v2;
  uint64_t v3;
  gss::Allocator *v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E42BF350;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (gss::Allocator *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        if (!*(_BYTE *)(v3 - 10))
        {
          if (*(_QWORD *)(v3 - 24))
          {
            v5 = gss::Allocator::instance(v4);
            v4 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v3 - 24), *(unsigned __int16 *)(v3 - 12));
            *(_QWORD *)(v3 - 24) = 0;
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (gss::Allocator *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  gss::Allocator *v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E42BF350;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (gss::Allocator *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        if (!*(_BYTE *)(v3 - 10))
        {
          if (*(_QWORD *)(v3 - 24))
          {
            v5 = gss::Allocator::instance(v4);
            v4 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v3 - 24), *(unsigned __int16 *)(v3 - 12));
            *(_QWORD *)(v3 - 24) = 0;
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (gss::Allocator *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<gms::TextureStore<ggl::Texture2D> *,std::shared_ptr<gms::TextureStore<ggl::Texture2D>>::__shared_ptr_default_delete<gms::TextureStore<ggl::Texture2D>,gms::TextureStore<ggl::Texture2D>>,std::allocator<gms::TextureStore<ggl::Texture2D>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

pthread_rwlock_t *std::__shared_ptr_pointer<gms::TextureStore<ggl::Texture2D> *,std::shared_ptr<gms::TextureStore<ggl::Texture2D>>::__shared_ptr_default_delete<gms::TextureStore<ggl::Texture2D>,gms::TextureStore<ggl::Texture2D>>,std::allocator<gms::TextureStore<ggl::Texture2D>>>::__on_zero_shared(uint64_t a1)
{
  pthread_rwlock_t *result;

  result = *(pthread_rwlock_t **)(a1 + 24);
  if (result)
  {
    gms::TextureStore<ggl::Texture2D>::~TextureStore(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t gms::MaterialSheet<ggl::Texture2D>::~MaterialSheet(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(_QWORD *)(a1 + 40);
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_5:
    v5 = *(_QWORD *)(a1 + 40);
    if (!v5)
      goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 48);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v6 - 8);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 16;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 48) = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), v7, *(_QWORD *)(a1 + 56) - v7);
LABEL_16:
  v11 = *(std::__shared_weak_count **)(a1 + 32);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  v15 = *(std::__shared_weak_count **)(a1 + 8);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

uint64_t *std::unique_ptr<gms::MaterialSheet<ggl::Texture2D>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = gms::MaterialSheet<ggl::Texture2D>::~MaterialSheet(v2);
    MEMORY[0x1A1AF4E00](v3, 0x20C40D3FB9507);
  }
  return a1;
}

void std::__shared_ptr_pointer<gms::MaterialSheet<ggl::Texture2D> *,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>::__shared_ptr_default_delete<gms::MaterialSheet<ggl::Texture2D>,gms::MaterialSheet<ggl::Texture2D>>,std::allocator<gms::MaterialSheet<ggl::Texture2D>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<gms::MaterialSheet<ggl::Texture2D> *,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>::__shared_ptr_default_delete<gms::MaterialSheet<ggl::Texture2D>,gms::MaterialSheet<ggl::Texture2D>>,std::allocator<gms::MaterialSheet<ggl::Texture2D>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    gms::MaterialSheet<ggl::Texture2D>::~MaterialSheet(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

void gms::_BuildingMaterial<ggl::Texture2D>::~_BuildingMaterial(_QWORD *a1)
{
  gms::_BuildingMaterial<ggl::Texture2D>::~_BuildingMaterial(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::addAlbedo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 88);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 1u, 257);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 88);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 88);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BuildingMaterial<ggl::Texture2D>::hasAnyAlbedo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88) != 0;
}

void gms::_Material<ggl::Texture2D>::normal(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyNormal()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::roughnessMetallic(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyRoughnessMetallic()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::emissive(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyEmissive()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::roughnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyRoughnessFactor()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::metallicFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyMetallicFactor()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::emissiveFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyEmissiveFactor()
{
  return 0;
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::addAlbedoFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 96);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 8u, 264);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 96);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 96);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 192))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BuildingMaterial<ggl::Texture2D>::hasAnyAlbedoFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) != 0;
}

void gms::_Material<ggl::Texture2D>::zIndex(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyZIndex()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::lineWidth(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyLineWidth()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::visibility(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyVisibility()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::tiling(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyTiling()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::offset(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyOffset()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::specularity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnySpecularity()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::shininess(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyShininess()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::castShadow(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyCastShadow()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::colorRamp(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyColorRamp()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::saturationFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnySaturationFactor()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::brightnessFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyBrightnessFactor()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::acceptsOverlays(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyAcceptsOverlays()
{
  return 0;
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::addSaturationRemapRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x15u, 277);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C0FF8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1228;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 104);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::saturationRemapRange@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 104);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 504))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BuildingMaterial<ggl::Texture2D>::hasAnySaturationRemapRange(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) != 0;
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::addBrightnessRemapRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 112);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x16u, 278);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C0FF8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1228;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 112);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::brightnessRemapRange@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 112);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 528))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BuildingMaterial<ggl::Texture2D>::hasAnyBrightnessRemapRange(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112) != 0;
}

void gms::_Material<ggl::Texture2D>::gradientMaskFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyGradientMaskFactor()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::hideOnCollapse(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyHideOnCollapse()
{
  return 0;
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::addNoColorCorrection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 120);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x19u, 281);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 120);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::noColorCorrection@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 120);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 600))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BuildingMaterial<ggl::Texture2D>::hasAnyNoColorCorrection(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) != 0;
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::addAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 128);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Au, 282);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 128);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 128);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 624))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BuildingMaterial<ggl::Texture2D>::hasAnyAlpha(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128) != 0;
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::addAlbedoFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 136);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Bu, 283);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 136);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BuildingMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 136);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 648))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BuildingMaterial<ggl::Texture2D>::hasAnyAlbedoFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) != 0;
}

void gms::_Material<ggl::Texture2D>::emissiveFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyEmissiveFactorRGB()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::gradientMaskFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyGradientMaskFactorRGB()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::colorRampRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyColorRampRGB()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::hotAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyHotAdjustment()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::coldAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyColdAdjustment()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::wetAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyWetAdjustment()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::dryAdjustment(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyDryAdjustment()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::ssaoIntensity(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnySsaoIntensity()
{
  return 0;
}

uint64_t gms::NonZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::zoomable()
{
  return 0;
}

uint64_t gms::NonZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::~NonZoomablePropertyStore(uint64_t result)
{
  *(_QWORD *)result = off_1E42C1298;
  if (*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 0;
  return result;
}

void gms::NonZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::~NonZoomablePropertyStore(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42C1298;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<geo::Color<float,3,(geo::ColorSpace)0> (*)(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&),std::allocator<geo::Color<float,3,(geo::ColorSpace)0> (*)(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&)>,geo::Color<float,3,(geo::ColorSpace)0> ()(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<geo::Color<float,3,(geo::ColorSpace)0> (*)(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&),std::allocator<geo::Color<float,3,(geo::ColorSpace)0> (*)(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&)>,geo::Color<float,3,(geo::ColorSpace)0> ()(float,geo::Color<float,3,(geo::ColorSpace)0> const&,geo::Color<float,3,(geo::ColorSpace)0> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C6F48;
  result[1] = v3;
  return result;
}

uint64_t gms::ZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::zoomable()
{
  return 1;
}

uint64_t gms::ZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C1068;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void gms::ZoomablePropertyStore<geo::Color<float,3,(geo::ColorSpace)0>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C1068;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

float gms::NonZoomablePropertyStore<float>::getProperty@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    result = *(float *)(a1 + 12);
    *(float *)(a2 + 4) = result;
    *(_BYTE *)a2 = 1;
  }
  return result;
}

uint64_t gms::NonZoomablePropertyStore<float>::~NonZoomablePropertyStore(uint64_t result)
{
  *(_QWORD *)result = off_1E42C13B0;
  if (*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 0;
  return result;
}

void std::__function::__func<float (*)(float,float const&,float const&),std::allocator<float (*)(float,float const&,float const&)>,float ()(float,float const&,float const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<float (*)(float,float const&,float const&),std::allocator<float (*)(float,float const&,float const&)>,float ()(float,float const&,float const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C7088;
  result[1] = v3;
  return result;
}

uint64_t gms::ZoomablePropertyStore<float>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C1180;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void gms::ZoomablePropertyStore<float>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C1180;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::NonZoomablePropertyStore<BOOL>::zoomable()
{
  return 0;
}

uint64_t gms::NonZoomablePropertyStore<BOOL>::~NonZoomablePropertyStore(uint64_t result)
{
  *(_QWORD *)result = off_1E42C1378;
  if (*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 0;
  return result;
}

void gms::NonZoomablePropertyStore<BOOL>::~NonZoomablePropertyStore(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42C1378;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::ZoomablePropertyStore<BOOL>::zoomable()
{
  return 1;
}

uint64_t gms::ZoomablePropertyStore<BOOL>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C1148;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void gms::ZoomablePropertyStore<BOOL>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C1148;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::NonZoomablePropertyStore<gm::Matrix<float,2,1>>::zoomable()
{
  return 0;
}

uint64_t gms::NonZoomablePropertyStore<gm::Matrix<float,2,1>>::~NonZoomablePropertyStore(uint64_t result)
{
  *(_QWORD *)result = off_1E42C1228;
  if (*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 0;
  return result;
}

void gms::NonZoomablePropertyStore<gm::Matrix<float,2,1>>::~NonZoomablePropertyStore(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42C1228;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::ZoomablePropertyStore<gm::Matrix<float,2,1>>::zoomable()
{
  return 1;
}

uint64_t gms::ZoomablePropertyStore<gm::Matrix<float,2,1>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C0FF8;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void gms::ZoomablePropertyStore<gm::Matrix<float,2,1>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C0FF8;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

float32x4_t *gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>@<X0>(float32x4_t *result@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float a4@<S0>)
{
  *a3 = vmlaq_n_f32(*result, vsubq_f32(*a2, *result), a4);
  return result;
}

__n128 gms::NonZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::getProperty@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    result = *(__n128 *)(a1 + 12);
    *(__n128 *)(a2 + 4) = result;
    *(_BYTE *)a2 = 1;
  }
  return result;
}

uint64_t gms::NonZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::zoomable()
{
  return 0;
}

uint64_t gms::NonZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::~NonZoomablePropertyStore(uint64_t result)
{
  *(_QWORD *)result = off_1E42C12D0;
  if (*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 0;
  return result;
}

void gms::NonZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::~NonZoomablePropertyStore(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42C12D0;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<geo::Color<float,4,(geo::ColorSpace)0> (*)(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&),std::allocator<geo::Color<float,4,(geo::ColorSpace)0> (*)(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&)>,geo::Color<float,4,(geo::ColorSpace)0> ()(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<geo::Color<float,4,(geo::ColorSpace)0> (*)(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&),std::allocator<geo::Color<float,4,(geo::ColorSpace)0> (*)(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&)>,geo::Color<float,4,(geo::ColorSpace)0> ()(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42C6F90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::Color<float,4,(geo::ColorSpace)0> (*)(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&),std::allocator<geo::Color<float,4,(geo::ColorSpace)0> (*)(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&)>,geo::Color<float,4,(geo::ColorSpace)0> ()(float,geo::Color<float,4,(geo::ColorSpace)0> const&,geo::Color<float,4,(geo::ColorSpace)0> const&)>::operator()(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(a1 + 8))(a3, a4, *a2);
}

_QWORD *gms::ZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::getProperty@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  BOOL v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  float v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  __int128 v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  BOOL v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  float v72;

  *(_BYTE *)a2 = 0;
  v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17)
    v5 = 23;
  else
    v5 = v4;
  v6 = (_QWORD *)result[5];
  v7 = result + 6;
  v8 = v6;
  if (v6 != result + 6)
  {
    v9 = 0;
    v10 = (_QWORD *)result[5];
    do
    {
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      v10 = v12;
    }
    while (v12 != v7);
    v8 = (_QWORD *)result[5];
    do
    {
      v14 = v9 >> 1;
      v15 = v8;
      if (v9 != 1)
      {
        v17 = v9 >> 1;
        v18 = v8;
        do
        {
          v20 = (_QWORD *)v18[1];
          if (v20)
          {
            do
            {
              v15 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v18[2];
              v13 = *v15 == (_QWORD)v18;
              v18 = v15;
            }
            while (!v13);
          }
          v18 = v15;
          v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 29))
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v8 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v15[2];
            v13 = *v8 == (_QWORD)v15;
            v15 = v8;
          }
          while (!v13);
        }
        v14 = v9 + ~v14;
      }
      v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 28) ? (v21 = v5 >= *((unsigned __int8 *)v8 + 29)) : (v21 = 1), v21))
    v8 = result + 6;
  v22 = v5 + 1;
  v23 = (_QWORD *)result[5];
  if (v6 != v7)
  {
    v24 = 0;
    v25 = (_QWORD *)result[5];
    do
    {
      v26 = (_QWORD *)v25[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v25[2];
          v13 = *v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      v25 = v27;
    }
    while (v27 != v7);
    v23 = (_QWORD *)result[5];
    do
    {
      v28 = v24 >> 1;
      v29 = v23;
      if (v24 != 1)
      {
        v31 = v24 >> 1;
        v32 = v23;
        do
        {
          v33 = (_QWORD *)v32[1];
          if (v33)
          {
            do
            {
              v29 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v32[2];
              v13 = *v29 == (_QWORD)v32;
              v32 = v29;
            }
            while (!v13);
          }
          v32 = v29;
          v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 29) <= v22)
      {
        v30 = (_QWORD *)v29[1];
        if (v30)
        {
          do
          {
            v23 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v29[2];
            v13 = *v23 == (_QWORD)v29;
            v29 = v23;
          }
          while (!v13);
        }
        v28 = v24 + ~v28;
      }
      v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 28) > v22
    || *((unsigned __int8 *)v23 + 29) <= v22)
  {
    v23 = result + 6;
  }
  if (v8 != v7 && result[7])
  {
    if (v23 == v7 || (result = (_QWORD *)result[4]) == 0 || (v34 = a3 - (float)v5, v34 > 1.0) || v34 < 0.0)
    {
      if (v6 != v7)
      {
        v40 = 0;
        v41 = v6;
        do
        {
          v42 = (_QWORD *)v41[1];
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = (_QWORD *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (_QWORD *)v41[2];
              v13 = *v43 == (_QWORD)v41;
              v41 = v43;
            }
            while (!v13);
          }
          ++v40;
          v41 = v43;
        }
        while (v43 != v7);
        do
        {
          v44 = v40 >> 1;
          v45 = v6;
          if (v40 != 1)
          {
            v47 = v40 >> 1;
            v48 = v6;
            do
            {
              v49 = (_QWORD *)v48[1];
              if (v49)
              {
                do
                {
                  v45 = v49;
                  v49 = (_QWORD *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  v45 = (_QWORD *)v48[2];
                  v13 = *v45 == (_QWORD)v48;
                  v48 = v45;
                }
                while (!v13);
              }
              v48 = v45;
              v19 = v47-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v45 + 29))
          {
            v46 = (_QWORD *)v45[1];
            if (v46)
            {
              do
              {
                v6 = v46;
                v46 = (_QWORD *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v45[2];
                v13 = *v6 == (_QWORD)v45;
                v45 = v6;
              }
              while (!v13);
            }
            v44 = v40 + ~v44;
          }
          v40 = v44;
        }
        while (v44);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 28) ? (v50 = v5 >= *((unsigned __int8 *)v6 + 29)) : (v50 = 1), v50))
      {
        v6 = v7;
      }
      *(_BYTE *)a2 = 1;
      v51 = *((_OWORD *)v6 + 2);
    }
    else
    {
      v35 = v6;
      if (v6 != v7)
      {
        v36 = 0;
        v37 = v6;
        do
        {
          v38 = (_QWORD *)v37[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (_QWORD *)v37[2];
              v13 = *v39 == (_QWORD)v37;
              v37 = v39;
            }
            while (!v13);
          }
          ++v36;
          v37 = v39;
        }
        while (v39 != v7);
        v35 = v6;
        do
        {
          v52 = v36 >> 1;
          v53 = v35;
          if (v36 != 1)
          {
            v55 = v36 >> 1;
            v56 = v35;
            do
            {
              v57 = (_QWORD *)v56[1];
              if (v57)
              {
                do
                {
                  v53 = v57;
                  v57 = (_QWORD *)*v57;
                }
                while (v57);
              }
              else
              {
                do
                {
                  v53 = (_QWORD *)v56[2];
                  v13 = *v53 == (_QWORD)v56;
                  v56 = v53;
                }
                while (!v13);
              }
              v56 = v53;
              v19 = v55-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v53 + 29))
          {
            v54 = (_QWORD *)v53[1];
            if (v54)
            {
              do
              {
                v35 = v54;
                v54 = (_QWORD *)*v54;
              }
              while (v54);
            }
            else
            {
              do
              {
                v35 = (_QWORD *)v53[2];
                v13 = *v35 == (_QWORD)v53;
                v53 = v35;
              }
              while (!v13);
            }
            v52 = v36 + ~v52;
          }
          v36 = v52;
        }
        while (v52);
      }
      if (v35 == v7
        || (v5 >= *((unsigned __int8 *)v35 + 28) ? (v58 = v5 >= *((unsigned __int8 *)v35 + 29)) : (v58 = 1), v58))
      {
        v35 = v7;
      }
      v71 = *((_OWORD *)v35 + 2);
      if (v6 != v7)
      {
        v59 = 0;
        v60 = v6;
        do
        {
          v61 = (_QWORD *)v60[1];
          if (v61)
          {
            do
            {
              v62 = v61;
              v61 = (_QWORD *)*v61;
            }
            while (v61);
          }
          else
          {
            do
            {
              v62 = (_QWORD *)v60[2];
              v13 = *v62 == (_QWORD)v60;
              v60 = v62;
            }
            while (!v13);
          }
          ++v59;
          v60 = v62;
        }
        while (v62 != v7);
        do
        {
          v63 = v59 >> 1;
          v64 = v6;
          if (v59 != 1)
          {
            v66 = v59 >> 1;
            v67 = v6;
            do
            {
              v68 = (_QWORD *)v67[1];
              if (v68)
              {
                do
                {
                  v64 = v68;
                  v68 = (_QWORD *)*v68;
                }
                while (v68);
              }
              else
              {
                do
                {
                  v64 = (_QWORD *)v67[2];
                  v13 = *v64 == (_QWORD)v67;
                  v67 = v64;
                }
                while (!v13);
              }
              v67 = v64;
              v19 = v66-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v64 + 29) <= v22)
          {
            v65 = (_QWORD *)v64[1];
            if (v65)
            {
              do
              {
                v6 = v65;
                v65 = (_QWORD *)*v65;
              }
              while (v65);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v64[2];
                v13 = *v6 == (_QWORD)v64;
                v64 = v6;
              }
              while (!v13);
            }
            v63 = v59 + ~v63;
          }
          v59 = v63;
        }
        while (v63);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 28) > v22
        || *((unsigned __int8 *)v6 + 29) <= v22)
      {
        v6 = v7;
      }
      v70 = *((_OWORD *)v6 + 2);
      v72 = v34;
      result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, float *, __int128 *, __int128 *))(*result + 48))(&v69, result, &v72, &v71, &v70);
      *(_BYTE *)a2 = 1;
      v51 = v69;
    }
    *(_OWORD *)(a2 + 4) = v51;
  }
  return result;
}

uint64_t gms::ZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::zoomable()
{
  return 1;
}

uint64_t gms::ZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C10A0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void gms::ZoomablePropertyStore<geo::Color<float,4,(geo::ColorSpace)0>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C10A0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::NonZoomablePropertyStore<unsigned char>::getProperty@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  if (*(_BYTE *)(result + 8))
  {
    a2[1] = *(_BYTE *)(result + 9);
    *a2 = 1;
  }
  return result;
}

uint64_t gms::NonZoomablePropertyStore<unsigned char>::zoomable()
{
  return 0;
}

uint64_t gms::NonZoomablePropertyStore<unsigned char>::~NonZoomablePropertyStore(uint64_t result)
{
  *(_QWORD *)result = off_1E42C13E8;
  if (*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 0;
  return result;
}

void gms::NonZoomablePropertyStore<unsigned char>::~NonZoomablePropertyStore(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42C13E8;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *gms::ZoomablePropertyStore<unsigned char>::getProperty@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>, float a3@<S0>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  BOOL v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  float v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  BOOL v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char v68;
  char v69;
  float v70;

  *a2 = 0;
  v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17)
    v5 = 23;
  else
    v5 = v4;
  v6 = (_QWORD *)result[5];
  v7 = result + 6;
  v8 = v6;
  if (v6 != result + 6)
  {
    v9 = 0;
    v10 = (_QWORD *)result[5];
    do
    {
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      v10 = v12;
    }
    while (v12 != v7);
    v8 = (_QWORD *)result[5];
    do
    {
      v14 = v9 >> 1;
      v15 = v8;
      if (v9 != 1)
      {
        v17 = v9 >> 1;
        v18 = v8;
        do
        {
          v20 = (_QWORD *)v18[1];
          if (v20)
          {
            do
            {
              v15 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v18[2];
              v13 = *v15 == (_QWORD)v18;
              v18 = v15;
            }
            while (!v13);
          }
          v18 = v15;
          v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 26))
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v8 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v15[2];
            v13 = *v8 == (_QWORD)v15;
            v15 = v8;
          }
          while (!v13);
        }
        v14 = v9 + ~v14;
      }
      v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 25) ? (v21 = v5 >= *((unsigned __int8 *)v8 + 26)) : (v21 = 1), v21))
    v8 = result + 6;
  v22 = v5 + 1;
  v23 = (_QWORD *)result[5];
  if (v6 != v7)
  {
    v24 = 0;
    v25 = (_QWORD *)result[5];
    do
    {
      v26 = (_QWORD *)v25[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v25[2];
          v13 = *v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      v25 = v27;
    }
    while (v27 != v7);
    v23 = (_QWORD *)result[5];
    do
    {
      v28 = v24 >> 1;
      v29 = v23;
      if (v24 != 1)
      {
        v31 = v24 >> 1;
        v32 = v23;
        do
        {
          v33 = (_QWORD *)v32[1];
          if (v33)
          {
            do
            {
              v29 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v32[2];
              v13 = *v29 == (_QWORD)v32;
              v32 = v29;
            }
            while (!v13);
          }
          v32 = v29;
          v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 26) <= v22)
      {
        v30 = (_QWORD *)v29[1];
        if (v30)
        {
          do
          {
            v23 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v29[2];
            v13 = *v23 == (_QWORD)v29;
            v29 = v23;
          }
          while (!v13);
        }
        v28 = v24 + ~v28;
      }
      v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 25) > v22
    || *((unsigned __int8 *)v23 + 26) <= v22)
  {
    v23 = result + 6;
  }
  if (v8 != v7 && result[7])
  {
    if (v23 == v7 || (result = (_QWORD *)result[4]) == 0 || (v34 = a3 - (float)v5, v34 > 1.0) || v34 < 0.0)
    {
      if (v6 != v7)
      {
        v40 = 0;
        v41 = v6;
        do
        {
          v42 = (_QWORD *)v41[1];
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = (_QWORD *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (_QWORD *)v41[2];
              v13 = *v43 == (_QWORD)v41;
              v41 = v43;
            }
            while (!v13);
          }
          ++v40;
          v41 = v43;
        }
        while (v43 != v7);
        do
        {
          v44 = v40 >> 1;
          v45 = v6;
          if (v40 != 1)
          {
            v47 = v40 >> 1;
            v48 = v6;
            do
            {
              v49 = (_QWORD *)v48[1];
              if (v49)
              {
                do
                {
                  v45 = v49;
                  v49 = (_QWORD *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  v45 = (_QWORD *)v48[2];
                  v13 = *v45 == (_QWORD)v48;
                  v48 = v45;
                }
                while (!v13);
              }
              v48 = v45;
              v19 = v47-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v45 + 26))
          {
            v46 = (_QWORD *)v45[1];
            if (v46)
            {
              do
              {
                v6 = v46;
                v46 = (_QWORD *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v45[2];
                v13 = *v6 == (_QWORD)v45;
                v45 = v6;
              }
              while (!v13);
            }
            v44 = v40 + ~v44;
          }
          v40 = v44;
        }
        while (v44);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 25) ? (v50 = v5 >= *((unsigned __int8 *)v6 + 26)) : (v50 = 1), v50))
      {
        v6 = v7;
      }
      *a2 = 1;
      a2[1] = *((_BYTE *)v6 + 27);
    }
    else
    {
      v35 = v6;
      if (v6 != v7)
      {
        v36 = 0;
        v37 = v6;
        do
        {
          v38 = (_QWORD *)v37[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (_QWORD *)v37[2];
              v13 = *v39 == (_QWORD)v37;
              v37 = v39;
            }
            while (!v13);
          }
          ++v36;
          v37 = v39;
        }
        while (v39 != v7);
        v35 = v6;
        do
        {
          v51 = v36 >> 1;
          v52 = v35;
          if (v36 != 1)
          {
            v54 = v36 >> 1;
            v55 = v35;
            do
            {
              v56 = (_QWORD *)v55[1];
              if (v56)
              {
                do
                {
                  v52 = v56;
                  v56 = (_QWORD *)*v56;
                }
                while (v56);
              }
              else
              {
                do
                {
                  v52 = (_QWORD *)v55[2];
                  v13 = *v52 == (_QWORD)v55;
                  v55 = v52;
                }
                while (!v13);
              }
              v55 = v52;
              v19 = v54-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v52 + 26))
          {
            v53 = (_QWORD *)v52[1];
            if (v53)
            {
              do
              {
                v35 = v53;
                v53 = (_QWORD *)*v53;
              }
              while (v53);
            }
            else
            {
              do
              {
                v35 = (_QWORD *)v52[2];
                v13 = *v35 == (_QWORD)v52;
                v52 = v35;
              }
              while (!v13);
            }
            v51 = v36 + ~v51;
          }
          v36 = v51;
        }
        while (v51);
      }
      if (v35 == v7
        || (v5 >= *((unsigned __int8 *)v35 + 25) ? (v57 = v5 >= *((unsigned __int8 *)v35 + 26)) : (v57 = 1), v57))
      {
        v35 = v7;
      }
      v69 = *((_BYTE *)v35 + 27);
      if (v6 != v7)
      {
        v58 = 0;
        v59 = v6;
        do
        {
          v60 = (_QWORD *)v59[1];
          if (v60)
          {
            do
            {
              v61 = v60;
              v60 = (_QWORD *)*v60;
            }
            while (v60);
          }
          else
          {
            do
            {
              v61 = (_QWORD *)v59[2];
              v13 = *v61 == (_QWORD)v59;
              v59 = v61;
            }
            while (!v13);
          }
          ++v58;
          v59 = v61;
        }
        while (v61 != v7);
        do
        {
          v62 = v58 >> 1;
          v63 = v6;
          if (v58 != 1)
          {
            v65 = v58 >> 1;
            v66 = v6;
            do
            {
              v67 = (_QWORD *)v66[1];
              if (v67)
              {
                do
                {
                  v63 = v67;
                  v67 = (_QWORD *)*v67;
                }
                while (v67);
              }
              else
              {
                do
                {
                  v63 = (_QWORD *)v66[2];
                  v13 = *v63 == (_QWORD)v66;
                  v66 = v63;
                }
                while (!v13);
              }
              v66 = v63;
              v19 = v65-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v63 + 26) <= v22)
          {
            v64 = (_QWORD *)v63[1];
            if (v64)
            {
              do
              {
                v6 = v64;
                v64 = (_QWORD *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v63[2];
                v13 = *v6 == (_QWORD)v63;
                v63 = v6;
              }
              while (!v13);
            }
            v62 = v58 + ~v62;
          }
          v58 = v62;
        }
        while (v62);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 25) > v22
        || *((unsigned __int8 *)v6 + 26) <= v22)
      {
        v6 = v7;
      }
      v68 = *((_BYTE *)v6 + 27);
      v70 = v34;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, float *, char *, char *))(*result + 48))(result, &v70, &v69, &v68);
      *a2 = 1;
      a2[1] = (_BYTE)result;
    }
  }
  return result;
}

uint64_t gms::ZoomablePropertyStore<unsigned char>::zoomable()
{
  return 1;
}

uint64_t gms::ZoomablePropertyStore<unsigned char>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C11B8;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void gms::ZoomablePropertyStore<unsigned char>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C11B8;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *gms::_BuildingMaterial<ggl::Texture2D>::~_BuildingMaterial(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &off_1E42C0928;
  v2 = a1[17];
  a1[17] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v4 = a1[15];
  a1[15] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v5 = a1[14];
  a1[14] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  v6 = a1[13];
  a1[13] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v7 = a1[12];
  a1[12] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v8 = a1[11];
  a1[11] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  return gms::_Material<ggl::Texture2D>::~_Material(a1);
}

_QWORD *gms::_Material<ggl::Texture2D>::~_Material(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  *a1 = &off_1E42C21A0;
  v2 = (std::__shared_weak_count *)a1[10];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (_QWORD *)a1[3];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = (void *)a1[1];
  a1[1] = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

void gms::_Material<ggl::Texture2D>::~_Material(_QWORD *a1)
{
  gms::_Material<ggl::Texture2D>::~_Material(a1);
  JUMPOUT(0x1A1AF4E00);
}

void gms::_Material<ggl::Texture2D>::albedo(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyAlbedo()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::albedoFactor(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyAlbedoFactor()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::saturationRemapRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnySaturationRemapRange()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::brightnessRemapRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyBrightnessRemapRange()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::noColorCorrection(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyNoColorCorrection()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::alpha(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyAlpha()
{
  return 0;
}

void gms::_Material<ggl::Texture2D>::albedoFactorRGB(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_Material<ggl::Texture2D>::hasAnyAlbedoFactorRGB()
{
  return 0;
}

void std::__shared_ptr_emplace<gms::_BuildingMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E56C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::_BuildingMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E56C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::_BuildingMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void gms::_PBRWithColorRampMaterial<ggl::Texture2D>::~_PBRWithColorRampMaterial(_QWORD *a1)
{
  gms::_PBRWithColorRampMaterial<ggl::Texture2D>::~_PBRWithColorRampMaterial(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addAlbedo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 88);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 1u, 257);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 88);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 88);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyAlbedo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addNormal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 96);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 2u, 258);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 96);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::normal@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 96);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyNormal(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addRoughnessMetallic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 3u, 259);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 104);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::roughnessMetallic@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 104);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyRoughnessMetallic(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addEmissive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 112);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 4u, 260);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 112);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::emissive@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 112);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyEmissive(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addRoughnessFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 120);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 5u, 261);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 120);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::roughnessFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 120);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyRoughnessFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::metallicFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 128);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyMetallicFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addEmissiveFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 136);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 7u, 263);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 136);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::emissiveFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 136);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 168))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyEmissiveFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 144);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 192))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyAlbedoFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144) != 0;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyZIndex(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addVisibility(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 160);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xBu, 267);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 160);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyVisibility(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::castShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 168);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 384))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyCastShadow(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::colorRamp@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 176);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 408))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyColorRamp(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addGradientMaskFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 184);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x17u, 279);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 184);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 184);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 552))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyGradientMaskFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 184) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addHideOnCollapse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 192);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x18u, 280);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 192);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 192);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 576))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyHideOnCollapse(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 200);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Au, 282);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 200);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyAlpha(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addEmissiveFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 208);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Cu, 284);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 208);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::emissiveFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 208);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 672))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyEmissiveFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 208) != 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::addGradientMaskFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 216);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Du, 285);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 216);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 216);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 696))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyGradientMaskFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 216) != 0;
}

BOOL gms::_PBRWithColorRampMaterial<ggl::Texture2D>::hasAnyColorRampRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224) != 0;
}

uint64_t gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::zoomable()
{
  return 0;
}

uint64_t gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~NonZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E42C1308;
  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
      operator delete(v4);
    *(_BYTE *)(a1 + 8) = 0;
  }
  return a1;
}

void gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~NonZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E42C1308;
  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
      operator delete(v4);
    *(_BYTE *)(a1 + 8) = 0;
  }
  JUMPOUT(0x1A1AF4E00);
}

void gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::getProperty(_QWORD *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  BOOL v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  float v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  BOOL v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  void *__p;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  void *v91[2];
  void *v92;
  void *v93[2];
  void *v94;
  float v95;

  *(_BYTE *)a2 = 0;
  v5 = vcvtms_s32_f32(a3);
  if (v5 >= 0x17)
    v5 = 23;
  v6 = (_QWORD *)a1[5];
  v7 = a1 + 6;
  v8 = v6;
  if (v6 != a1 + 6)
  {
    v9 = 0;
    v10 = (_QWORD *)a1[5];
    do
    {
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      v10 = v12;
    }
    while (v12 != v7);
    v8 = (_QWORD *)a1[5];
    do
    {
      v14 = v9 >> 1;
      v15 = v8;
      if (v9 != 1)
      {
        v17 = v9 >> 1;
        v18 = v8;
        do
        {
          v20 = (_QWORD *)v18[1];
          if (v20)
          {
            do
            {
              v15 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v18[2];
              v13 = *v15 == (_QWORD)v18;
              v18 = v15;
            }
            while (!v13);
          }
          v18 = v15;
          v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 33))
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v8 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v15[2];
            v13 = *v8 == (_QWORD)v15;
            v15 = v8;
          }
          while (!v13);
        }
        v14 = v9 + ~v14;
      }
      v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 32) ? (v21 = v5 >= *((unsigned __int8 *)v8 + 33)) : (v21 = 1), v21))
    v8 = a1 + 6;
  v22 = v5 + 1;
  v23 = (_QWORD *)a1[5];
  if (v6 != v7)
  {
    v24 = 0;
    v25 = (_QWORD *)a1[5];
    do
    {
      v26 = (_QWORD *)v25[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v25[2];
          v13 = *v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      v25 = v27;
    }
    while (v27 != v7);
    v23 = (_QWORD *)a1[5];
    do
    {
      v28 = v24 >> 1;
      v29 = v23;
      if (v24 != 1)
      {
        v31 = v24 >> 1;
        v32 = v23;
        do
        {
          v33 = (_QWORD *)v32[1];
          if (v33)
          {
            do
            {
              v29 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v32[2];
              v13 = *v29 == (_QWORD)v32;
              v32 = v29;
            }
            while (!v13);
          }
          v32 = v29;
          v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 33) <= v22)
      {
        v30 = (_QWORD *)v29[1];
        if (v30)
        {
          do
          {
            v23 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v29[2];
            v13 = *v23 == (_QWORD)v29;
            v29 = v23;
          }
          while (!v13);
        }
        v28 = v24 + ~v28;
      }
      v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 32) > v22
    || *((unsigned __int8 *)v23 + 33) <= v22)
  {
    v23 = a1 + 6;
  }
  if (v8 != v7 && a1[7])
  {
    if (v23 == v7 || !a1[4] || (v34 = a3 - (float)v5, v34 > 1.0) || v34 < 0.0)
    {
      if (v6 != v7)
      {
        v57 = 0;
        v58 = (_QWORD *)a1[5];
        do
        {
          v59 = (_QWORD *)v58[1];
          if (v59)
          {
            do
            {
              v60 = v59;
              v59 = (_QWORD *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v60 = (_QWORD *)v58[2];
              v13 = *v60 == (_QWORD)v58;
              v58 = v60;
            }
            while (!v13);
          }
          ++v57;
          v58 = v60;
        }
        while (v60 != v7);
        do
        {
          v61 = v57 >> 1;
          v62 = v6;
          if (v57 != 1)
          {
            v64 = v57 >> 1;
            v65 = v6;
            do
            {
              v66 = (_QWORD *)v65[1];
              if (v66)
              {
                do
                {
                  v62 = v66;
                  v66 = (_QWORD *)*v66;
                }
                while (v66);
              }
              else
              {
                do
                {
                  v62 = (_QWORD *)v65[2];
                  v13 = *v62 == (_QWORD)v65;
                  v65 = v62;
                }
                while (!v13);
              }
              v65 = v62;
              v19 = v64-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v62 + 33))
          {
            v63 = (_QWORD *)v62[1];
            if (v63)
            {
              do
              {
                v6 = v63;
                v63 = (_QWORD *)*v63;
              }
              while (v63);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v62[2];
                v13 = *v6 == (_QWORD)v62;
                v62 = v6;
              }
              while (!v13);
            }
            v61 = v57 + ~v61;
          }
          v57 = v61;
        }
        while (v61);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 32) ? (v67 = v5 >= *((unsigned __int8 *)v6 + 33)) : (v67 = 1), v67))
      {
        v6 = a1 + 6;
      }
      *(_BYTE *)a2 = 1;
      std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map(a2 + 8, (uint64_t)(v6 + 5));
    }
    else
    {
      if (v6 != v7)
      {
        v35 = 0;
        v36 = (_QWORD *)a1[5];
        do
        {
          v37 = (_QWORD *)v36[1];
          if (v37)
          {
            do
            {
              v38 = v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (_QWORD *)v36[2];
              v13 = *v38 == (_QWORD)v36;
              v36 = v38;
            }
            while (!v13);
          }
          ++v35;
          v36 = v38;
        }
        while (v38 != v7);
        do
        {
          v39 = v35 >> 1;
          v40 = v6;
          if (v35 != 1)
          {
            v42 = v35 >> 1;
            v43 = v6;
            do
            {
              v44 = (_QWORD *)v43[1];
              if (v44)
              {
                do
                {
                  v40 = v44;
                  v44 = (_QWORD *)*v44;
                }
                while (v44);
              }
              else
              {
                do
                {
                  v40 = (_QWORD *)v43[2];
                  v13 = *v40 == (_QWORD)v43;
                  v43 = v40;
                }
                while (!v13);
              }
              v43 = v40;
              v19 = v42-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v40 + 33))
          {
            v41 = (_QWORD *)v40[1];
            if (v41)
            {
              do
              {
                v6 = v41;
                v41 = (_QWORD *)*v41;
              }
              while (v41);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v40[2];
                v13 = *v6 == (_QWORD)v40;
                v40 = v6;
              }
              while (!v13);
            }
            v39 = v35 + ~v39;
          }
          v35 = v39;
        }
        while (v39);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 32) ? (v45 = v5 >= *((unsigned __int8 *)v6 + 33)) : (v45 = 1), v45))
      {
        v6 = a1 + 6;
      }
      std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map((uint64_t)v93, (uint64_t)(v6 + 5));
      v46 = (_QWORD *)a1[5];
      if (v46 == v7)
        goto LABEL_175;
      v47 = 0;
      v48 = (_QWORD *)a1[5];
      do
      {
        v49 = (_QWORD *)v48[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v48[2];
            v13 = *v50 == (_QWORD)v48;
            v48 = v50;
          }
          while (!v13);
        }
        ++v47;
        v48 = v50;
      }
      while (v50 != v7);
      do
      {
        v51 = v47 >> 1;
        v52 = v46;
        if (v47 != 1)
        {
          v54 = v47 >> 1;
          v55 = v46;
          do
          {
            v56 = (_QWORD *)v55[1];
            if (v56)
            {
              do
              {
                v52 = v56;
                v56 = (_QWORD *)*v56;
              }
              while (v56);
            }
            else
            {
              do
              {
                v52 = (_QWORD *)v55[2];
                v13 = *v52 == (_QWORD)v55;
                v55 = v52;
              }
              while (!v13);
            }
            v55 = v52;
            v19 = v54-- <= 1;
          }
          while (!v19);
        }
        if (*((unsigned __int8 *)v52 + 33) <= v22)
        {
          v53 = (_QWORD *)v52[1];
          if (v53)
          {
            do
            {
              v46 = v53;
              v53 = (_QWORD *)*v53;
            }
            while (v53);
          }
          else
          {
            do
            {
              v46 = (_QWORD *)v52[2];
              v13 = *v46 == (_QWORD)v52;
              v52 = v46;
            }
            while (!v13);
          }
          v51 = v47 + ~v51;
        }
        v47 = v51;
      }
      while (v51);
      if (v46 == v7
        || *((unsigned __int8 *)v46 + 32) > v22
        || *((unsigned __int8 *)v46 + 33) <= v22)
      {
LABEL_175:
        v46 = v7;
      }
      std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>::unordered_map((uint64_t)v91, (uint64_t)(v46 + 5));
      v95 = v34;
      v68 = a1[4];
      if (v68)
      {
        (*(void (**)(void **__return_ptr, uint64_t, float *, void **, void **))(*(_QWORD *)v68 + 48))(&__p, v68, &v95, v93, v91);
        if (*(_BYTE *)a2)
        {
          v69 = *(_QWORD **)(a2 + 24);
          if (v69)
          {
            do
            {
              v70 = (_QWORD *)*v69;
              operator delete(v69);
              v69 = v70;
            }
            while (v70);
          }
          v71 = *(void **)(a2 + 8);
          *(_QWORD *)(a2 + 8) = 0;
          if (v71)
            operator delete(v71);
        }
        else
        {
          *(_BYTE *)a2 = 1;
        }
        v72 = __p;
        v73 = v87;
        v74 = v88;
        v75 = v89;
        *(_QWORD *)(a2 + 24) = v88;
        v76 = a2 + 24;
        __p = 0;
        v87 = 0;
        *(_QWORD *)(v76 - 16) = v72;
        *(_QWORD *)(v76 - 8) = v73;
        *(_QWORD *)(v76 + 8) = v75;
        *(_DWORD *)(v76 + 16) = v90;
        if (v75)
        {
          v77 = v74[1];
          if ((v73 & (v73 - 1)) != 0)
          {
            if (v77 >= v73)
              v77 %= v73;
          }
          else
          {
            v77 &= v73 - 1;
          }
          v72[v77] = v76;
          v88 = 0;
          v89 = 0;
        }
        else if (v74)
        {
          do
          {
            v78 = (_QWORD *)*v74;
            operator delete(v74);
            v74 = v78;
          }
          while (v78);
        }
        v79 = __p;
        __p = 0;
        if (v79)
          operator delete(v79);
        v80 = v92;
        if (v92)
        {
          do
          {
            v81 = (_QWORD *)*v80;
            operator delete(v80);
            v80 = v81;
          }
          while (v81);
        }
        v82 = v91[0];
        v91[0] = 0;
        if (v82)
          operator delete(v82);
        v83 = v94;
        if (v94)
        {
          do
          {
            v84 = (_QWORD *)*v83;
            operator delete(v83);
            v83 = v84;
          }
          while (v84);
        }
        v85 = v93[0];
        v93[0] = 0;
        if (v85)
          operator delete(v85);
      }
      else
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
    }
  }
}

void sub_19F60CB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  geo::optional<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::~optional(v11);
  _Unwind_Resume(a1);
}

uint64_t gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::zoomable()
{
  return 1;
}

uint64_t gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C10D8;
  std::__tree<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,std::__map_value_compare<gm::Range<unsigned char>,std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,geo::range_map<unsigned char,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C10D8;
  std::__tree<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,std::__map_value_compare<gm::Range<unsigned char>,std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,geo::range_map<unsigned char,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

void std::__tree<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,std::__map_value_compare<gm::Range<unsigned char>,std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,geo::range_map<unsigned char,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (a1)
  {
    std::__tree<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,std::__map_value_compare<gm::Range<unsigned char>,std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,geo::range_map<unsigned char,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::destroy(*a1);
    std::__tree<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,std::__map_value_compare<gm::Range<unsigned char>,std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,geo::range_map<unsigned char,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::destroy(a1[1]);
    v2 = (_QWORD *)a1[7];
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = (void *)a1[5];
    a1[5] = 0;
    if (v4)
      operator delete(v4);
    operator delete(a1);
  }
}

uint64_t gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::getProperty@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  if (*(_BYTE *)(result + 8))
  {
    result = std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map((uint64_t)(a2 + 8), result + 16);
    *a2 = 1;
  }
  return result;
}

uint64_t gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::zoomable()
{
  return 0;
}

uint64_t gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::~NonZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E42C1340;
  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
      operator delete(v4);
    *(_BYTE *)(a1 + 8) = 0;
  }
  return a1;
}

void gms::NonZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::~NonZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E42C1340;
  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
      operator delete(v4);
    *(_BYTE *)(a1 + 8) = 0;
  }
  JUMPOUT(0x1A1AF4E00);
}

void gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::getProperty(_QWORD *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  BOOL v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  float v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  BOOL v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  void *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  void *__p;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  void *v91[2];
  void *v92;
  void *v93[2];
  void *v94;
  float v95;

  *(_BYTE *)a2 = 0;
  v5 = vcvtms_s32_f32(a3);
  if (v5 >= 0x17)
    v5 = 23;
  v6 = (_QWORD *)a1[5];
  v7 = a1 + 6;
  v8 = v6;
  if (v6 != a1 + 6)
  {
    v9 = 0;
    v10 = (_QWORD *)a1[5];
    do
    {
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      v10 = v12;
    }
    while (v12 != v7);
    v8 = (_QWORD *)a1[5];
    do
    {
      v14 = v9 >> 1;
      v15 = v8;
      if (v9 != 1)
      {
        v17 = v9 >> 1;
        v18 = v8;
        do
        {
          v20 = (_QWORD *)v18[1];
          if (v20)
          {
            do
            {
              v15 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v18[2];
              v13 = *v15 == (_QWORD)v18;
              v18 = v15;
            }
            while (!v13);
          }
          v18 = v15;
          v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 33))
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v8 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v15[2];
            v13 = *v8 == (_QWORD)v15;
            v15 = v8;
          }
          while (!v13);
        }
        v14 = v9 + ~v14;
      }
      v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 32) ? (v21 = v5 >= *((unsigned __int8 *)v8 + 33)) : (v21 = 1), v21))
    v8 = a1 + 6;
  v22 = v5 + 1;
  v23 = (_QWORD *)a1[5];
  if (v6 != v7)
  {
    v24 = 0;
    v25 = (_QWORD *)a1[5];
    do
    {
      v26 = (_QWORD *)v25[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v25[2];
          v13 = *v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      v25 = v27;
    }
    while (v27 != v7);
    v23 = (_QWORD *)a1[5];
    do
    {
      v28 = v24 >> 1;
      v29 = v23;
      if (v24 != 1)
      {
        v31 = v24 >> 1;
        v32 = v23;
        do
        {
          v33 = (_QWORD *)v32[1];
          if (v33)
          {
            do
            {
              v29 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v32[2];
              v13 = *v29 == (_QWORD)v32;
              v32 = v29;
            }
            while (!v13);
          }
          v32 = v29;
          v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 33) <= v22)
      {
        v30 = (_QWORD *)v29[1];
        if (v30)
        {
          do
          {
            v23 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v29[2];
            v13 = *v23 == (_QWORD)v29;
            v29 = v23;
          }
          while (!v13);
        }
        v28 = v24 + ~v28;
      }
      v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 32) > v22
    || *((unsigned __int8 *)v23 + 33) <= v22)
  {
    v23 = a1 + 6;
  }
  if (v8 != v7 && a1[7])
  {
    if (v23 == v7 || !a1[4] || (v34 = a3 - (float)v5, v34 > 1.0) || v34 < 0.0)
    {
      if (v6 != v7)
      {
        v57 = 0;
        v58 = (_QWORD *)a1[5];
        do
        {
          v59 = (_QWORD *)v58[1];
          if (v59)
          {
            do
            {
              v60 = v59;
              v59 = (_QWORD *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v60 = (_QWORD *)v58[2];
              v13 = *v60 == (_QWORD)v58;
              v58 = v60;
            }
            while (!v13);
          }
          ++v57;
          v58 = v60;
        }
        while (v60 != v7);
        do
        {
          v61 = v57 >> 1;
          v62 = v6;
          if (v57 != 1)
          {
            v64 = v57 >> 1;
            v65 = v6;
            do
            {
              v66 = (_QWORD *)v65[1];
              if (v66)
              {
                do
                {
                  v62 = v66;
                  v66 = (_QWORD *)*v66;
                }
                while (v66);
              }
              else
              {
                do
                {
                  v62 = (_QWORD *)v65[2];
                  v13 = *v62 == (_QWORD)v65;
                  v65 = v62;
                }
                while (!v13);
              }
              v65 = v62;
              v19 = v64-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v62 + 33))
          {
            v63 = (_QWORD *)v62[1];
            if (v63)
            {
              do
              {
                v6 = v63;
                v63 = (_QWORD *)*v63;
              }
              while (v63);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v62[2];
                v13 = *v6 == (_QWORD)v62;
                v62 = v6;
              }
              while (!v13);
            }
            v61 = v57 + ~v61;
          }
          v57 = v61;
        }
        while (v61);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 32) ? (v67 = v5 >= *((unsigned __int8 *)v6 + 33)) : (v67 = 1), v67))
      {
        v6 = a1 + 6;
      }
      *(_BYTE *)a2 = 1;
      std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map(a2 + 8, (uint64_t)(v6 + 5));
    }
    else
    {
      if (v6 != v7)
      {
        v35 = 0;
        v36 = (_QWORD *)a1[5];
        do
        {
          v37 = (_QWORD *)v36[1];
          if (v37)
          {
            do
            {
              v38 = v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (_QWORD *)v36[2];
              v13 = *v38 == (_QWORD)v36;
              v36 = v38;
            }
            while (!v13);
          }
          ++v35;
          v36 = v38;
        }
        while (v38 != v7);
        do
        {
          v39 = v35 >> 1;
          v40 = v6;
          if (v35 != 1)
          {
            v42 = v35 >> 1;
            v43 = v6;
            do
            {
              v44 = (_QWORD *)v43[1];
              if (v44)
              {
                do
                {
                  v40 = v44;
                  v44 = (_QWORD *)*v44;
                }
                while (v44);
              }
              else
              {
                do
                {
                  v40 = (_QWORD *)v43[2];
                  v13 = *v40 == (_QWORD)v43;
                  v43 = v40;
                }
                while (!v13);
              }
              v43 = v40;
              v19 = v42-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v40 + 33))
          {
            v41 = (_QWORD *)v40[1];
            if (v41)
            {
              do
              {
                v6 = v41;
                v41 = (_QWORD *)*v41;
              }
              while (v41);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v40[2];
                v13 = *v6 == (_QWORD)v40;
                v40 = v6;
              }
              while (!v13);
            }
            v39 = v35 + ~v39;
          }
          v35 = v39;
        }
        while (v39);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 32) ? (v45 = v5 >= *((unsigned __int8 *)v6 + 33)) : (v45 = 1), v45))
      {
        v6 = a1 + 6;
      }
      std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map((uint64_t)v93, (uint64_t)(v6 + 5));
      v46 = (_QWORD *)a1[5];
      if (v46 == v7)
        goto LABEL_175;
      v47 = 0;
      v48 = (_QWORD *)a1[5];
      do
      {
        v49 = (_QWORD *)v48[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v48[2];
            v13 = *v50 == (_QWORD)v48;
            v48 = v50;
          }
          while (!v13);
        }
        ++v47;
        v48 = v50;
      }
      while (v50 != v7);
      do
      {
        v51 = v47 >> 1;
        v52 = v46;
        if (v47 != 1)
        {
          v54 = v47 >> 1;
          v55 = v46;
          do
          {
            v56 = (_QWORD *)v55[1];
            if (v56)
            {
              do
              {
                v52 = v56;
                v56 = (_QWORD *)*v56;
              }
              while (v56);
            }
            else
            {
              do
              {
                v52 = (_QWORD *)v55[2];
                v13 = *v52 == (_QWORD)v55;
                v55 = v52;
              }
              while (!v13);
            }
            v55 = v52;
            v19 = v54-- <= 1;
          }
          while (!v19);
        }
        if (*((unsigned __int8 *)v52 + 33) <= v22)
        {
          v53 = (_QWORD *)v52[1];
          if (v53)
          {
            do
            {
              v46 = v53;
              v53 = (_QWORD *)*v53;
            }
            while (v53);
          }
          else
          {
            do
            {
              v46 = (_QWORD *)v52[2];
              v13 = *v46 == (_QWORD)v52;
              v52 = v46;
            }
            while (!v13);
          }
          v51 = v47 + ~v51;
        }
        v47 = v51;
      }
      while (v51);
      if (v46 == v7
        || *((unsigned __int8 *)v46 + 32) > v22
        || *((unsigned __int8 *)v46 + 33) <= v22)
      {
LABEL_175:
        v46 = v7;
      }
      std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>::unordered_map((uint64_t)v91, (uint64_t)(v46 + 5));
      v95 = v34;
      v68 = a1[4];
      if (v68)
      {
        (*(void (**)(void **__return_ptr, uint64_t, float *, void **, void **))(*(_QWORD *)v68 + 48))(&__p, v68, &v95, v93, v91);
        if (*(_BYTE *)a2)
        {
          v69 = *(_QWORD **)(a2 + 24);
          if (v69)
          {
            do
            {
              v70 = (_QWORD *)*v69;
              operator delete(v69);
              v69 = v70;
            }
            while (v70);
          }
          v71 = *(void **)(a2 + 8);
          *(_QWORD *)(a2 + 8) = 0;
          if (v71)
            operator delete(v71);
        }
        else
        {
          *(_BYTE *)a2 = 1;
        }
        v72 = __p;
        v73 = v87;
        v74 = v88;
        v75 = v89;
        *(_QWORD *)(a2 + 24) = v88;
        v76 = a2 + 24;
        __p = 0;
        v87 = 0;
        *(_QWORD *)(v76 - 16) = v72;
        *(_QWORD *)(v76 - 8) = v73;
        *(_QWORD *)(v76 + 8) = v75;
        *(_DWORD *)(v76 + 16) = v90;
        if (v75)
        {
          v77 = v74[1];
          if ((v73 & (v73 - 1)) != 0)
          {
            if (v77 >= v73)
              v77 %= v73;
          }
          else
          {
            v77 &= v73 - 1;
          }
          v72[v77] = v76;
          v88 = 0;
          v89 = 0;
        }
        else if (v74)
        {
          do
          {
            v78 = (_QWORD *)*v74;
            operator delete(v74);
            v74 = v78;
          }
          while (v78);
        }
        v79 = __p;
        __p = 0;
        if (v79)
          operator delete(v79);
        v80 = v92;
        if (v92)
        {
          do
          {
            v81 = (_QWORD *)*v80;
            operator delete(v80);
            v80 = v81;
          }
          while (v81);
        }
        v82 = v91[0];
        v91[0] = 0;
        if (v82)
          operator delete(v82);
        v83 = v94;
        if (v94)
        {
          do
          {
            v84 = (_QWORD *)*v83;
            operator delete(v83);
            v83 = v84;
          }
          while (v84);
        }
        v85 = v93[0];
        v93[0] = 0;
        if (v85)
          operator delete(v85);
      }
      else
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
    }
  }
}

void sub_19F60D5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  geo::optional<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::~optional(v11);
  _Unwind_Resume(a1);
}

uint64_t gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::zoomable()
{
  return 1;
}

uint64_t gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C1110;
  std::__tree<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,std::__map_value_compare<gm::Range<unsigned char>,std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,geo::range_map<unsigned char,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void gms::ZoomablePropertyStore<std::unordered_map<float,geo::Color<float,4,(geo::ColorSpace)0>>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C1110;
  std::__tree<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,std::__map_value_compare<gm::Range<unsigned char>,std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>,geo::range_map<unsigned char,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::NonZoomablePropertyStore<unsigned int>::zoomable()
{
  return 0;
}

uint64_t gms::NonZoomablePropertyStore<unsigned int>::~NonZoomablePropertyStore(uint64_t result)
{
  *(_QWORD *)result = off_1E42C1420;
  if (*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 0;
  return result;
}

void gms::NonZoomablePropertyStore<unsigned int>::~NonZoomablePropertyStore(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42C1420;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *gms::ZoomablePropertyStore<unsigned int>::getProperty@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  BOOL v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  float v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  BOOL v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  int v69;
  float v70;

  *(_BYTE *)a2 = 0;
  v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17)
    v5 = 23;
  else
    v5 = v4;
  v6 = (_QWORD *)result[5];
  v7 = result + 6;
  v8 = v6;
  if (v6 != result + 6)
  {
    v9 = 0;
    v10 = (_QWORD *)result[5];
    do
    {
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v13 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      v10 = v12;
    }
    while (v12 != v7);
    v8 = (_QWORD *)result[5];
    do
    {
      v14 = v9 >> 1;
      v15 = v8;
      if (v9 != 1)
      {
        v17 = v9 >> 1;
        v18 = v8;
        do
        {
          v20 = (_QWORD *)v18[1];
          if (v20)
          {
            do
            {
              v15 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v18[2];
              v13 = *v15 == (_QWORD)v18;
              v18 = v15;
            }
            while (!v13);
          }
          v18 = v15;
          v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 29))
      {
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v8 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v15[2];
            v13 = *v8 == (_QWORD)v15;
            v15 = v8;
          }
          while (!v13);
        }
        v14 = v9 + ~v14;
      }
      v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 28) ? (v21 = v5 >= *((unsigned __int8 *)v8 + 29)) : (v21 = 1), v21))
    v8 = result + 6;
  v22 = v5 + 1;
  v23 = (_QWORD *)result[5];
  if (v6 != v7)
  {
    v24 = 0;
    v25 = (_QWORD *)result[5];
    do
    {
      v26 = (_QWORD *)v25[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v25[2];
          v13 = *v27 == (_QWORD)v25;
          v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      v25 = v27;
    }
    while (v27 != v7);
    v23 = (_QWORD *)result[5];
    do
    {
      v28 = v24 >> 1;
      v29 = v23;
      if (v24 != 1)
      {
        v31 = v24 >> 1;
        v32 = v23;
        do
        {
          v33 = (_QWORD *)v32[1];
          if (v33)
          {
            do
            {
              v29 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v32[2];
              v13 = *v29 == (_QWORD)v32;
              v32 = v29;
            }
            while (!v13);
          }
          v32 = v29;
          v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 29) <= v22)
      {
        v30 = (_QWORD *)v29[1];
        if (v30)
        {
          do
          {
            v23 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v29[2];
            v13 = *v23 == (_QWORD)v29;
            v29 = v23;
          }
          while (!v13);
        }
        v28 = v24 + ~v28;
      }
      v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 28) > v22
    || *((unsigned __int8 *)v23 + 29) <= v22)
  {
    v23 = result + 6;
  }
  if (v8 != v7 && result[7])
  {
    if (v23 == v7 || (result = (_QWORD *)result[4]) == 0 || (v34 = a3 - (float)v5, v34 > 1.0) || v34 < 0.0)
    {
      if (v6 != v7)
      {
        v40 = 0;
        v41 = v6;
        do
        {
          v42 = (_QWORD *)v41[1];
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = (_QWORD *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (_QWORD *)v41[2];
              v13 = *v43 == (_QWORD)v41;
              v41 = v43;
            }
            while (!v13);
          }
          ++v40;
          v41 = v43;
        }
        while (v43 != v7);
        do
        {
          v44 = v40 >> 1;
          v45 = v6;
          if (v40 != 1)
          {
            v47 = v40 >> 1;
            v48 = v6;
            do
            {
              v49 = (_QWORD *)v48[1];
              if (v49)
              {
                do
                {
                  v45 = v49;
                  v49 = (_QWORD *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  v45 = (_QWORD *)v48[2];
                  v13 = *v45 == (_QWORD)v48;
                  v48 = v45;
                }
                while (!v13);
              }
              v48 = v45;
              v19 = v47-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v45 + 29))
          {
            v46 = (_QWORD *)v45[1];
            if (v46)
            {
              do
              {
                v6 = v46;
                v46 = (_QWORD *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v45[2];
                v13 = *v6 == (_QWORD)v45;
                v45 = v6;
              }
              while (!v13);
            }
            v44 = v40 + ~v44;
          }
          v40 = v44;
        }
        while (v44);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 28) ? (v50 = v5 >= *((unsigned __int8 *)v6 + 29)) : (v50 = 1), v50))
      {
        v6 = v7;
      }
      *(_BYTE *)a2 = 1;
      *(_DWORD *)(a2 + 4) = *((_DWORD *)v6 + 8);
    }
    else
    {
      v35 = v6;
      if (v6 != v7)
      {
        v36 = 0;
        v37 = v6;
        do
        {
          v38 = (_QWORD *)v37[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (_QWORD *)v37[2];
              v13 = *v39 == (_QWORD)v37;
              v37 = v39;
            }
            while (!v13);
          }
          ++v36;
          v37 = v39;
        }
        while (v39 != v7);
        v35 = v6;
        do
        {
          v51 = v36 >> 1;
          v52 = v35;
          if (v36 != 1)
          {
            v54 = v36 >> 1;
            v55 = v35;
            do
            {
              v56 = (_QWORD *)v55[1];
              if (v56)
              {
                do
                {
                  v52 = v56;
                  v56 = (_QWORD *)*v56;
                }
                while (v56);
              }
              else
              {
                do
                {
                  v52 = (_QWORD *)v55[2];
                  v13 = *v52 == (_QWORD)v55;
                  v55 = v52;
                }
                while (!v13);
              }
              v55 = v52;
              v19 = v54-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v52 + 29))
          {
            v53 = (_QWORD *)v52[1];
            if (v53)
            {
              do
              {
                v35 = v53;
                v53 = (_QWORD *)*v53;
              }
              while (v53);
            }
            else
            {
              do
              {
                v35 = (_QWORD *)v52[2];
                v13 = *v35 == (_QWORD)v52;
                v52 = v35;
              }
              while (!v13);
            }
            v51 = v36 + ~v51;
          }
          v36 = v51;
        }
        while (v51);
      }
      if (v35 == v7
        || (v5 >= *((unsigned __int8 *)v35 + 28) ? (v57 = v5 >= *((unsigned __int8 *)v35 + 29)) : (v57 = 1), v57))
      {
        v35 = v7;
      }
      v69 = *((_DWORD *)v35 + 8);
      if (v6 != v7)
      {
        v58 = 0;
        v59 = v6;
        do
        {
          v60 = (_QWORD *)v59[1];
          if (v60)
          {
            do
            {
              v61 = v60;
              v60 = (_QWORD *)*v60;
            }
            while (v60);
          }
          else
          {
            do
            {
              v61 = (_QWORD *)v59[2];
              v13 = *v61 == (_QWORD)v59;
              v59 = v61;
            }
            while (!v13);
          }
          ++v58;
          v59 = v61;
        }
        while (v61 != v7);
        do
        {
          v62 = v58 >> 1;
          v63 = v6;
          if (v58 != 1)
          {
            v65 = v58 >> 1;
            v66 = v6;
            do
            {
              v67 = (_QWORD *)v66[1];
              if (v67)
              {
                do
                {
                  v63 = v67;
                  v67 = (_QWORD *)*v67;
                }
                while (v67);
              }
              else
              {
                do
                {
                  v63 = (_QWORD *)v66[2];
                  v13 = *v63 == (_QWORD)v66;
                  v66 = v63;
                }
                while (!v13);
              }
              v66 = v63;
              v19 = v65-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v63 + 29) <= v22)
          {
            v64 = (_QWORD *)v63[1];
            if (v64)
            {
              do
              {
                v6 = v64;
                v64 = (_QWORD *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                v6 = (_QWORD *)v63[2];
                v13 = *v6 == (_QWORD)v63;
                v63 = v6;
              }
              while (!v13);
            }
            v62 = v58 + ~v62;
          }
          v58 = v62;
        }
        while (v62);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 28) > v22
        || *((unsigned __int8 *)v6 + 29) <= v22)
      {
        v6 = v7;
      }
      v68 = *((_DWORD *)v6 + 8);
      v70 = v34;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, float *, int *, int *))(*result + 48))(result, &v70, &v69, &v68);
      *(_BYTE *)a2 = 1;
      *(_DWORD *)(a2 + 4) = (_DWORD)result;
    }
  }
  return result;
}

uint64_t *gms::ZoomablePropertyStore<unsigned int>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int *a4)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t **v25;
  unsigned int v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;

  v4 = result;
  v5 = *a2;
  v6 = *a3;
  v7 = (unint64_t)*a3 << 8;
  v8 = *a4;
  if (result[7])
  {
    v9 = (uint64_t *)result[5];
    v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      v16 = (_QWORD *)result[5];
    }
    else
    {
      v11 = 0;
      v12 = (uint64_t *)result[5];
      do
      {
        v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            v14 = (uint64_t **)v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (uint64_t **)v12[2];
            v15 = *v14 == v12;
            v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      v16 = (_QWORD *)result[5];
      do
      {
        v17 = v11 >> 1;
        v18 = v16;
        if (v11 != 1)
        {
          v20 = v11 >> 1;
          v21 = v16;
          do
          {
            v23 = (_QWORD *)v21[1];
            if (v23)
            {
              do
              {
                v18 = v23;
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v21[2];
                v15 = *v18 == (_QWORD)v21;
                v21 = v18;
              }
              while (!v15);
            }
            v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 29) < v6)
        {
          v19 = (_QWORD *)v18[1];
          if (v19)
          {
            do
            {
              v16 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v18[2];
              v15 = *v16 == (_QWORD)v18;
              v18 = v16;
            }
            while (!v15);
          }
          v17 = v11 + ~v17;
        }
        v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 28) >= v6)
    {
      if (v16 == v9)
        goto LABEL_47;
      v29 = *v16;
      if (*v16)
      {
        do
        {
          v30 = v29;
          v29 = *(_QWORD *)(v29 + 8);
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = v16[2];
          v15 = *(_QWORD *)v30 == (_QWORD)v16;
          v16 = (_QWORD *)v30;
        }
        while (v15);
      }
      if (v5 >= *(unsigned __int8 *)(v30 + 29))
      {
LABEL_47:
        v31 = *v10;
        v25 = (uint64_t **)(result + 6);
        if (!*v10)
        {
LABEL_54:
          v27 = (uint64_t *)operator new(0x28uLL);
          v28 = v7 | v5;
LABEL_55:
          *(uint64_t *)((char *)v27 + 28) = v28 | (v8 << 32);
          *v27 = 0;
          v27[1] = 0;
          v27[2] = (uint64_t)v25;
          *v10 = v27;
          v33 = *(_QWORD *)v4[5];
          if (v33)
          {
            v4[5] = v33;
            v34 = *v10;
          }
          else
          {
            v34 = v27;
          }
          result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[6], v34);
          ++v4[7];
          return result;
        }
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v31;
            v32 = *((unsigned __int8 *)v31 + 29);
            if (v6 >= v32)
              break;
            v31 = *v25;
            v10 = v25;
            if (!*v25)
              goto LABEL_54;
          }
          if (v32 >= v6)
            break;
          v31 = v25[1];
          if (!v31)
          {
            v10 = v25 + 1;
            goto LABEL_54;
          }
        }
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(result + 6);
    v24 = result[6];
    if (!v24)
    {
      v25 = (uint64_t **)(result + 6);
LABEL_37:
      v27 = (uint64_t *)operator new(0x28uLL);
      v28 = v7 | v5;
      goto LABEL_55;
    }
    while (1)
    {
      while (1)
      {
        v25 = (uint64_t **)v24;
        v26 = *(unsigned __int8 *)(v24 + 29);
        if (v6 >= v26)
          break;
        v24 = (uint64_t)*v25;
        v10 = v25;
        if (!*v25)
          goto LABEL_37;
      }
      if (v26 >= v6)
        break;
      v24 = (uint64_t)v25[1];
      if (!v24)
      {
        v10 = v25 + 1;
        goto LABEL_37;
      }
    }
  }
  return result;
}

uint64_t gms::ZoomablePropertyStore<unsigned int>::zoomable()
{
  return 1;
}

uint64_t gms::ZoomablePropertyStore<unsigned int>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C11F0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void gms::ZoomablePropertyStore<unsigned int>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C11F0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *gms::_PBRWithColorRampMaterial<ggl::Texture2D>::~_PBRWithColorRampMaterial(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = &off_1E42C1948;
  v2 = a1[28];
  a1[28] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = a1[27];
  a1[27] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v4 = a1[26];
  a1[26] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v5 = a1[25];
  a1[25] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  v6 = a1[24];
  a1[24] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v7 = a1[23];
  a1[23] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v8 = a1[22];
  a1[22] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v9 = a1[21];
  a1[21] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v10 = a1[20];
  a1[20] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v11 = a1[19];
  a1[19] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v12 = a1[18];
  a1[18] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  v13 = a1[17];
  a1[17] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  v14 = a1[16];
  a1[16] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  v15 = a1[15];
  a1[15] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  v16 = a1[14];
  a1[14] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  v17 = a1[13];
  a1[13] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  v18 = a1[12];
  a1[12] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
  v19 = a1[11];
  a1[11] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  return gms::_Material<ggl::Texture2D>::~_Material(a1);
}

void std::__shared_ptr_emplace<gms::_PBRWithColorRampMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::_PBRWithColorRampMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::_PBRWithColorRampMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void gms::_TriPlanarMaterial<ggl::Texture2D>::~_TriPlanarMaterial(_QWORD *a1)
{
  gms::_TriPlanarMaterial<ggl::Texture2D>::~_TriPlanarMaterial(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addAlbedo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 88);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 1u, 257);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 88);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 88);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyAlbedo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88) != 0;
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addAlbedoFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 96);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 8u, 264);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 96);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 96);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 192))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyAlbedoFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) != 0;
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addZIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 9u, 265);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11F0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1420;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 104);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::zIndex@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 104);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyZIndex(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) != 0;
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addVisibility(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 112);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xBu, 267);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 112);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::visibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 112);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyVisibility(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112) != 0;
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addTiling(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 120);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xCu, 268);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C0FF8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1228;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 120);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::tiling@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 120);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 288))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyTiling(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) != 0;
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 128);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xDu, 269);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C0FF8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1228;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 128);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::offset@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 128);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 312))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyOffset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128) != 0;
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addCastShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 136);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x10u, 272);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 136);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::castShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 136);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 384))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyCastShadow(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) != 0;
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addGradientMaskFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 144);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x17u, 279);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 144);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 144);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 552))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyGradientMaskFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144) != 0;
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addHideOnCollapse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 152);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x18u, 280);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 152);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::hideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 152);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 576))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyHideOnCollapse(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152) != 0;
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addAlbedoFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 160);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Bu, 283);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 160);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 160);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 648))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyAlbedoFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160) != 0;
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::addGradientMaskFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 168);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Du, 285);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 168);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_TriPlanarMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 168);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 696))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_TriPlanarMaterial<ggl::Texture2D>::hasAnyGradientMaskFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168) != 0;
}

_QWORD *gms::_TriPlanarMaterial<ggl::Texture2D>::~_TriPlanarMaterial(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = &off_1E42C0C90;
  v2 = a1[21];
  a1[21] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = a1[20];
  a1[20] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v4 = a1[19];
  a1[19] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v5 = a1[18];
  a1[18] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  v6 = a1[17];
  a1[17] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v7 = a1[16];
  a1[16] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v8 = a1[15];
  a1[15] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v9 = a1[14];
  a1[14] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v10 = a1[13];
  a1[13] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v11 = a1[12];
  a1[12] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v12 = a1[11];
  a1[11] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  return gms::_Material<ggl::Texture2D>::~_Material(a1);
}

void std::__shared_ptr_emplace<gms::_TriPlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E56F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::_TriPlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E56F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::_TriPlanarMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void gms::_PlanarMaterial<ggl::Texture2D>::~_PlanarMaterial(_QWORD *a1)
{
  gms::_PlanarMaterial<ggl::Texture2D>::~_PlanarMaterial(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 88);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyAlbedo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88) != 0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 96);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 192))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyAlbedoFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) != 0;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyZIndex(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) != 0;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyVisibility(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112) != 0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::tiling@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 120);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 288))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyTiling(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) != 0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 128);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xDu, 269);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C0FF8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1228;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 128);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::offset@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 128);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 312))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyOffset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128) != 0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addCastShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 136);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x10u, 272);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 136);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::castShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 136);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 384))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyCastShadow(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) != 0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 144);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 552))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyGradientMaskFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144) != 0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addHideOnCollapse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 152);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x18u, 280);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 152);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::hideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 152);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 576))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyHideOnCollapse(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152) != 0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 160);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Au, 282);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 160);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyAlpha(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160) != 0;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyAlbedoFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168) != 0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 176);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 696))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PlanarMaterial<ggl::Texture2D>::hasAnyGradientMaskFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176) != 0;
}

_QWORD *gms::_PlanarMaterial<ggl::Texture2D>::~_PlanarMaterial(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = &off_1E42BFBE0;
  v2 = a1[22];
  a1[22] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = a1[21];
  a1[21] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v4 = a1[20];
  a1[20] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v5 = a1[19];
  a1[19] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  v6 = a1[18];
  a1[18] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v7 = a1[17];
  a1[17] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v8 = a1[16];
  a1[16] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v9 = a1[15];
  a1[15] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v10 = a1[14];
  a1[14] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v11 = a1[13];
  a1[13] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v12 = a1[12];
  a1[12] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  v13 = a1[11];
  a1[11] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  return gms::_Material<ggl::Texture2D>::~_Material(a1);
}

void std::__shared_ptr_emplace<gms::_PlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::_PlanarMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5618;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::_PlanarMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void gms::_PBRMaterial<ggl::Texture2D>::~_PBRMaterial(_QWORD *a1)
{
  gms::_PBRMaterial<ggl::Texture2D>::~_PBRMaterial(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addAlbedo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 88);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 1u, 257);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 88);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::albedo@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 88);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyAlbedo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addNormal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 96);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 2u, 258);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 96);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::normal@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 96);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyNormal(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addRoughnessMetallic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 3u, 259);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 104);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::roughnessMetallic@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 104);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyRoughnessMetallic(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addEmissive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 112);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 4u, 260);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 112);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::emissive@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 112);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyEmissive(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addRoughnessFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 120);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 5u, 261);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 120);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::roughnessFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 120);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyRoughnessFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addMetallicFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 128);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 6u, 262);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 128);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::metallicFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 128);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyMetallicFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addEmissiveFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 136);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 7u, 263);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 136);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::emissiveFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 136);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 168))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyEmissiveFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addAlbedoFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 144);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 8u, 264);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 144);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::albedoFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 144);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 192))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyAlbedoFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addZIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 152);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 9u, 265);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11F0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1420;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 152);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::zIndex@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 152);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyZIndex(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addVisibility(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 160);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xBu, 267);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 160);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::visibility@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 160);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyVisibility(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addCastShadow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 168);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x10u, 272);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 168);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::castShadow@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 168);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 384))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyCastShadow(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addColorRamp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 176);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x11u, 273);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1110;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1340;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 176);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::colorRamp@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 176);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 408))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyColorRamp(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addSaturationFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 184);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x12u, 274);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 184);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::saturationFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 184);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 432))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnySaturationFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 184) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addBrightnessFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 192);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x13u, 275);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 192);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::brightnessFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 192);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 456))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyBrightnessFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addAcceptsOverlays(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 200);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x14u, 276);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 200);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::acceptsOverlays@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 200);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 480))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyAcceptsOverlays(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addGradientMaskFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 208);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x17u, 279);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 208);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::gradientMaskFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 208);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 552))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyGradientMaskFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 208) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addHideOnCollapse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 216);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x18u, 280);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 216);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::hideOnCollapse@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 216);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 576))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyHideOnCollapse(uint64_t a1)
{
  return *(_QWORD *)(a1 + 216) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 224);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Au, 282);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 224);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 224);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 624))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyAlpha(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addAlbedoFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 232);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Bu, 283);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 232);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 232);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 648))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyAlbedoFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 232) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addEmissiveFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 240);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Cu, 284);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 240);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::emissiveFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 240);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 672))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyEmissiveFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 240) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addGradientMaskFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 248);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Du, 285);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 248);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::gradientMaskFactorRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 248);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 696))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyGradientMaskFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 248) != 0;
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::addColorRampRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 256);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Eu, 286);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C10D8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1308;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 256);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_PBRMaterial<ggl::Texture2D>::colorRampRGB@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 256);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 720))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_PBRMaterial<ggl::Texture2D>::hasAnyColorRampRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 256) != 0;
}

_QWORD *gms::_PBRMaterial<ggl::Texture2D>::~_PBRMaterial(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = &off_1E42BEAF8;
  v2 = a1[32];
  a1[32] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = a1[31];
  a1[31] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v4 = a1[30];
  a1[30] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v5 = a1[29];
  a1[29] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  v6 = a1[28];
  a1[28] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v7 = a1[27];
  a1[27] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v8 = a1[26];
  a1[26] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v9 = a1[25];
  a1[25] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v10 = a1[24];
  a1[24] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v11 = a1[23];
  a1[23] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v12 = a1[22];
  a1[22] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  v13 = a1[21];
  a1[21] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  v14 = a1[20];
  a1[20] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  v15 = a1[19];
  a1[19] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  v16 = a1[18];
  a1[18] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  v17 = a1[17];
  a1[17] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  v18 = a1[16];
  a1[16] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
  v19 = a1[15];
  a1[15] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  v20 = a1[14];
  a1[14] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
  v21 = a1[13];
  a1[13] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
  v22 = a1[12];
  a1[12] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  v23 = a1[11];
  a1[11] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  return gms::_Material<ggl::Texture2D>::~_Material(a1);
}

void std::__shared_ptr_emplace<gms::_PBRMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::_PBRMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E5538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::_PBRMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void gms::_BasicMaterial<ggl::Texture2D>::~_BasicMaterial(_QWORD *a1)
{
  gms::_BasicMaterial<ggl::Texture2D>::~_BasicMaterial(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyAlbedo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88) != 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addEmissive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 96);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 4u, 260);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 96);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyEmissive(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) != 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addEmissiveFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 104);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 7u, 263);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C10A0;
      v9[1] = &off_1E42C6F90;
      v9[2] = gms::lerp<geo::Color<float,4,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C12D0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 104);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyEmissiveFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyAlbedoFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyZIndex(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) != 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addLineWidth(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 128);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xAu, 266);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 128);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::lineWidth@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 128);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 240))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyLineWidth(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyVisibility(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) != 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addSpecularity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 144);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xEu, 270);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 144);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnySpecularity(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144) != 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addShininess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 152);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0xFu, 271);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 152);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyShininess(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyCastShadow(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160) != 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addSaturationFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 168);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x12u, 274);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 168);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::saturationFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 168);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 432))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnySaturationFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168) != 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addBrightnessFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 176);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x13u, 275);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1180;
      v9[1] = &off_1E42C7088;
      v9[2] = gms::lerp<float>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C13B0;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 176);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::brightnessFactor@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 176);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 456))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyBrightnessFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176) != 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addAcceptsOverlays(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 184);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x14u, 276);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1148;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C1378;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 184);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::acceptsOverlays@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (***v3)(_QWORD);
  uint64_t result;

  v3 = *(uint64_t (****)(_QWORD))(a1 + 184);
  if (v3)
    return (**v3)(v3);
  result = *(_QWORD *)(a1 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 480))(result);
  *a2 = 0;
  return result;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyAcceptsOverlays(uint64_t a1)
{
  return *(_QWORD *)(a1 + 184) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnySaturationRemapRange(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyBrightnessRemapRange(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyGradientMaskFactor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 208) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyHideOnCollapse(uint64_t a1)
{
  return *(_QWORD *)(a1 + 216) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyAlpha(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyAlbedoFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 232) != 0;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addEmissiveFactorRGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;

  v9 = *(_QWORD **)(a1 + 240);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 0x1Cu, 284);
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1068;
      v9[1] = &off_1E42C6F48;
      v9[2] = gms::lerp<geo::Color<float,3,(geo::ColorSpace)0>>;
      v9[7] = 0;
      v9[6] = 0;
      v9[4] = v9 + 1;
      v9[5] = v9 + 6;
    }
    else
    {
      v9 = (_QWORD *)operator new();
      *v9 = off_1E42C1298;
      *((_BYTE *)v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD **)(a1 + 240);
    }
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 8))(v9, a2, a3, a4);
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyEmissiveFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 240) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyGradientMaskFactorRGB(uint64_t a1)
{
  return *(_QWORD *)(a1 + 248) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyHotAdjustment(uint64_t a1)
{
  return *(_QWORD *)(a1 + 256) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyColdAdjustment(uint64_t a1)
{
  return *(_QWORD *)(a1 + 264) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyWetAdjustment(uint64_t a1)
{
  return *(_QWORD *)(a1 + 272) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnyDryAdjustment(uint64_t a1)
{
  return *(_QWORD *)(a1 + 280) != 0;
}

BOOL gms::_BasicMaterial<ggl::Texture2D>::hasAnySsaoIntensity(uint64_t a1)
{
  return *(_QWORD *)(a1 + 288) != 0;
}

uint64_t gms::NonZoomablePropertyStore<gm::Matrix<float,3,1>>::getProperty@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(result + 8))
  {
    *(_QWORD *)(a2 + 4) = *(_QWORD *)(result + 12);
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 20);
    *(_BYTE *)a2 = 1;
  }
  return result;
}

uint64_t gms::NonZoomablePropertyStore<gm::Matrix<float,3,1>>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int v5;

  v4 = *a4;
  v5 = *((_DWORD *)a4 + 2);
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_DWORD *)(result + 20) = v5;
  *(_QWORD *)(result + 12) = v4;
  return result;
}

uint64_t gms::NonZoomablePropertyStore<gm::Matrix<float,3,1>>::~NonZoomablePropertyStore(uint64_t result)
{
  *(_QWORD *)result = off_1E42C1260;
  if (*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 0;
  return result;
}

uint64_t gms::ZoomablePropertyStore<gm::Matrix<float,3,1>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C1030;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void gms::ZoomablePropertyStore<gm::Matrix<float,3,1>>::~ZoomablePropertyStore(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E42C1030;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *gms::_BasicMaterial<ggl::Texture2D>::~_BasicMaterial(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *a1 = &off_1E42BF878;
  v2 = a1[36];
  a1[36] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v3 = a1[35];
  a1[35] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v4 = a1[34];
  a1[34] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v5 = a1[33];
  a1[33] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  v6 = a1[32];
  a1[32] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v7 = a1[31];
  a1[31] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v8 = a1[30];
  a1[30] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v9 = a1[29];
  a1[29] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v10 = a1[28];
  a1[28] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v11 = a1[27];
  a1[27] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v12 = a1[26];
  a1[26] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  v13 = a1[25];
  a1[25] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  v14 = a1[24];
  a1[24] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  v15 = a1[23];
  a1[23] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  v16 = a1[22];
  a1[22] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  v17 = a1[21];
  a1[21] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  v18 = a1[20];
  a1[20] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
  v19 = a1[19];
  a1[19] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  v20 = a1[18];
  a1[18] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
  v21 = a1[17];
  a1[17] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
  v22 = a1[16];
  a1[16] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  v23 = a1[15];
  a1[15] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  v24 = a1[14];
  a1[14] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
  v25 = a1[13];
  a1[13] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
  v26 = a1[12];
  a1[12] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
  v27 = a1[11];
  a1[11] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
  return gms::_Material<ggl::Texture2D>::~_Material(a1);
}

void std::__shared_ptr_emplace<gms::_BasicMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E55E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<gms::_BasicMaterial<ggl::Texture2D>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E55E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gms::_BasicMaterial<ggl::Texture2D>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::LabelsExtractExternallyResolvedWorldTransformLogic::~LabelsExtractExternallyResolvedWorldTransformLogic(md::LabelsExtractExternallyResolvedWorldTransformLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::LabelsExtractExternallyResolvedWorldTransformLogic,md::LabelsExtractExternallyResolvedWorldTransformContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::LabelsExtractExternallyResolvedWorldTransformContext]";
  v4[3] = 56;
  v4[4] = result;
  *v4 = &off_1E42B16D0;
  v4[1] = 0xDB33FC702E07AAFLL;
  *a2 = v4;
  return result;
}

void sub_19F61273C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::LabelsExtractExternallyResolvedWorldTransformLogic,md::LabelsExtractExternallyResolvedWorldTransformContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xDB33FC702E07AAFLL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x61AAF6FADEFBCCACLL;
    if (*(_QWORD *)&v4 <= 0x61AAF6FADEFBCCACuLL)
      v6 = 0x61AAF6FADEFBCCACuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::LabelsExtractExternallyResolvedWorldTransformLogic,md::LabelsExtractExternallyResolvedWorldTransformContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xDB33FC702E07AAFLL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x61AAF6FADEFBCCACLL;
    if (*(_QWORD *)&v4 <= 0x61AAF6FADEFBCCACuLL)
      v6 = 0x61AAF6FADEFBCCACuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::LabelsExtractExternallyResolvedWorldTransformLogic,md::LabelsExtractExternallyResolvedWorldTransformContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xDB33FC702E07AAFLL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x61AAF6FADEFBCCACLL;
    if (*(_QWORD *)&v4 <= 0x61AAF6FADEFBCCACuLL)
      v6 = 0x61AAF6FADEFBCCACuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::LabelsExtractExternallyResolvedWorldTransformLogic,md::LabelsExtractExternallyResolvedWorldTransformContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xDB33FC702E07AAFLL || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x61AAF6FADEFBCCACLL;
    if (*(_QWORD *)&v4 <= 0x61AAF6FADEFBCCACuLL)
      v6 = 0x61AAF6FADEFBCCACuLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x61AAF6FADEFBCCACLL)
      {
        if (v8[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::LabelsExtractExternallyResolvedWorldTransformLogic,md::LabelsExtractExternallyResolvedWorldTransformContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0xDB33FC702E07AAFLL || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x61AAF6FADEFBCCACLL;
    if (*(_QWORD *)&v5 <= 0x61AAF6FADEFBCCACuLL)
      v7 = 0x61AAF6FADEFBCCACuLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x61AAF6FADEFBCCACLL)
      {
        if (v9[2] == 0x61AAF6FADEFBCCACLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x61AAF6FADEFBCCACLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x61AAF6FADEFBCCACLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x61AAF6FADEFBCCACLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::LabelsExtractExternallyResolvedWorldTransformLogic,md::LabelsExtractExternallyResolvedWorldTransformContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_QWORD *md::LabelsExtractExternallyResolvedWorldTransformLogic::runBeforeLayout(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t *v15;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  BOOL v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  BOOL v95;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  BOOL v100;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  BOOL v127;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  BOOL v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  BOOL v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  BOOL v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;

  v1 = *(_QWORD *)(a1 + 120);
  v2 = (_QWORD *)gdc::Registry::storage<arComponents::IsVisible>(v1);
  v3 = (_QWORD *)gdc::Registry::storage<arComponents::NeedsResolvedWorldTransform>(v1);
  v4 = (_QWORD *)gdc::Registry::storage<arComponents::WorldTransform>(v1);
  result = (_QWORD *)gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(v1);
  v7 = (unint64_t *)v3[7];
  v6 = (uint64_t *)v3[8];
  v9 = (unint64_t *)v2[7];
  v8 = (uint64_t *)v2[8];
  if ((char *)v6 - (char *)v7 >= (unint64_t)((char *)v8 - (char *)v9))
    v10 = v2 + 4;
  else
    v10 = v3 + 4;
  v12 = (unint64_t *)v4[7];
  v11 = (uint64_t *)v4[8];
  if ((unint64_t)((char *)v11 - (char *)v12) >= v10[4] - v10[3])
    v13 = v10;
  else
    v13 = v4 + 4;
  v15 = (unint64_t *)result[7];
  v14 = (uint64_t *)result[8];
  if ((unint64_t)((char *)v14 - (char *)v15) < v13[4] - v13[3])
    v13 = result + 4;
  if (v2 + 4 == v13 && v9 != (unint64_t *)v8)
  {
    v30 = v3[4];
    v31 = (v3[5] - v30) >> 3;
    v32 = v4[4];
    v33 = (v4[5] - v32) >> 3;
    v34 = ((char *)v11 - (char *)v12) >> 3;
    v35 = result[4];
    v36 = (result[5] - v35) >> 3;
    v183 = ((char *)v14 - (char *)v15) >> 3;
    v175 = v4[10];
    v180 = (_QWORD *)v4[11];
    v173 = result[10];
    v177 = (_QWORD *)result[11];
    do
    {
      v89 = *((unsigned int *)v9 + 1);
      v90 = v89 >> 7;
      if (v89 >> 7 < v31)
      {
        v91 = *(_QWORD *)(v30 + 8 * v90);
        if (v91)
        {
          v92 = v89 & 0x7F;
          v93 = *(unsigned __int16 *)(v91 + 2 * v92);
          if (((char *)v6 - (char *)v7) >> 3 > v93)
          {
            v94 = (uint64_t *)&v7[v93];
            v95 = v94 != v6 && *((_DWORD *)v94 + 1) == (_DWORD)v89;
            if (v95 && v90 < v33)
            {
              v97 = *(_QWORD *)(v32 + 8 * v90);
              if (v97)
              {
                v98 = *(unsigned __int16 *)(v97 + 2 * v92);
                if (v34 > v98)
                {
                  v99 = (uint64_t *)&v12[v98];
                  v100 = v99 != v11 && *((_DWORD *)v99 + 1) == (_DWORD)v89;
                  if (v100 && v90 < v36)
                  {
                    v102 = *(_QWORD *)(v35 + 8 * v90);
                    if (v102)
                    {
                      v103 = *(unsigned __int16 *)(v102 + 2 * v92);
                      if (v183 > v103)
                      {
                        v104 = (uint64_t *)&v15[v103];
                        if (v104 != v14 && *((_DWORD *)v104 + 1) == (_DWORD)v89)
                        {
                          v171 = HIDWORD(*v9);
                          v172 = *v9;
                          v106 = *v9 >> 39;
                          v107 = v180;
                          if (v106 < v33)
                          {
                            v108 = *(_QWORD *)(v32 + 8 * v106);
                            v107 = v180;
                            if (v108)
                            {
                              v109 = *(unsigned __int16 *)(v108 + 2 * (HIDWORD(v172) & 0x7F));
                              v107 = v180;
                              if (v34 > v109)
                              {
                                if (HIDWORD(v12[v109]) != (_DWORD)v171 || &v12[v109] == (unint64_t *)v11)
                                  v107 = v180;
                                else
                                  v107 = (_QWORD *)(v175 + 80 * v109);
                              }
                            }
                          }
                          v111 = v177;
                          if (v106 < v36)
                          {
                            v112 = *(_QWORD *)(v35 + 8 * v106);
                            v111 = v177;
                            if (v112)
                            {
                              v113 = *(unsigned __int16 *)(v112 + 2 * (HIDWORD(v172) & 0x7F));
                              v111 = v177;
                              if (v183 > v113)
                              {
                                if (HIDWORD(v15[v113]) != (_DWORD)v171 || &v15[v113] == (unint64_t *)v14)
                                  v111 = v177;
                                else
                                  v111 = (_QWORD *)(v173 + 16 * v113);
                              }
                            }
                          }
                          v88 = (_QWORD *)*v111;
                          v88[7] = v107[3];
                          v88[8] = v107[4];
                          v88[9] = v107[5];
                          v88[10] = v107[6];
                          v88[4] = *v107;
                          v88[5] = v107[1];
                          v88[6] = v107[2];
                          v88[11] = v107[7];
                          v88[12] = v107[8];
                          v88[13] = v107[9];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != (unint64_t *)v8);
  }
  if (v3 + 4 == v13 && v7 != (unint64_t *)v6)
  {
    v37 = v2[4];
    v38 = (v2[5] - v37) >> 3;
    v40 = v2[7];
    v39 = v2[8];
    v41 = v4[4];
    v42 = (v4[5] - v41) >> 3;
    v12 = (unint64_t *)v4[7];
    v11 = (uint64_t *)v4[8];
    v43 = ((char *)v11 - (char *)v12) >> 3;
    v44 = result[4];
    v45 = (result[5] - v44) >> 3;
    v15 = (unint64_t *)result[7];
    v14 = (uint64_t *)result[8];
    v178 = v4[10];
    v181 = (_QWORD *)v4[11];
    v184 = ((char *)v14 - (char *)v15) >> 3;
    v46 = (_QWORD *)result[11];
    v176 = result[10];
    do
    {
      v116 = *((unsigned int *)v7 + 1);
      v117 = v116 >> 7;
      if (v116 >> 7 < v38)
      {
        v118 = *(_QWORD *)(v37 + 8 * v117);
        if (v118)
        {
          v119 = v116 & 0x7F;
          v120 = *(unsigned __int16 *)(v118 + 2 * v119);
          if ((v39 - v40) >> 3 > v120)
          {
            v121 = v40 + 8 * v120;
            v122 = v121 != v39 && *(_DWORD *)(v121 + 4) == (_DWORD)v116;
            if (v122 && v117 < v42)
            {
              v124 = *(_QWORD *)(v41 + 8 * v117);
              if (v124)
              {
                v125 = *(unsigned __int16 *)(v124 + 2 * v119);
                if (v43 > v125)
                {
                  v126 = (uint64_t *)&v12[v125];
                  v127 = v126 != v11 && *((_DWORD *)v126 + 1) == (_DWORD)v116;
                  if (v127 && v117 < v45)
                  {
                    v129 = *(_QWORD *)(v44 + 8 * v117);
                    if (v129)
                    {
                      v130 = *(unsigned __int16 *)(v129 + 2 * v119);
                      if (v184 > v130)
                      {
                        v131 = (uint64_t *)&v15[v130];
                        if (v131 != v14 && *((_DWORD *)v131 + 1) == (_DWORD)v116)
                        {
                          v174 = HIDWORD(*v7);
                          v133 = *v7;
                          v134 = *v7 >> 39;
                          v135 = v181;
                          if (v134 < v42)
                          {
                            v136 = *(_QWORD *)(v41 + 8 * v134);
                            v135 = v181;
                            if (v136)
                            {
                              v137 = *(unsigned __int16 *)(v136 + 2 * (HIDWORD(v133) & 0x7F));
                              v135 = v181;
                              if (v43 > v137)
                              {
                                v138 = HIDWORD(v12[v137]) != (_DWORD)v174 || &v12[v137] == (unint64_t *)v11;
                                v139 = (_QWORD *)(v178 + 80 * v137);
                                if (v138)
                                  v135 = v181;
                                else
                                  v135 = v139;
                              }
                            }
                          }
                          v140 = v46;
                          if (v134 < v45)
                          {
                            v141 = *(_QWORD *)(v44 + 8 * v134);
                            v140 = v46;
                            if (v141)
                            {
                              v142 = *(unsigned __int16 *)(v141 + 2 * (HIDWORD(v133) & 0x7F));
                              v140 = v46;
                              if (v184 > v142)
                              {
                                v143 = (uint64_t *)&v15[v142];
                                v144 = *((_DWORD *)v143 + 1) != (_DWORD)v174 || v143 == v14;
                                v140 = (_QWORD *)(v176 + 16 * v142);
                                if (v144)
                                  v140 = v46;
                              }
                            }
                          }
                          v115 = (_QWORD *)*v140;
                          v115[7] = v135[3];
                          v115[8] = v135[4];
                          v115[9] = v135[5];
                          v115[10] = v135[6];
                          v115[4] = *v135;
                          v115[5] = v135[1];
                          v115[6] = v135[2];
                          v115[11] = v135[7];
                          v115[12] = v135[8];
                          v115[13] = v135[9];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v7;
    }
    while (v7 != (unint64_t *)v6);
  }
  if (v4 + 4 == v13 && v12 != (unint64_t *)v11)
  {
    v18 = v2[4];
    v19 = (v2[5] - v18) >> 3;
    v21 = v2[7];
    v20 = v2[8];
    v22 = v3[4];
    v23 = (v3[5] - v22) >> 3;
    v25 = v3[7];
    v24 = v3[8];
    v26 = result[4];
    v27 = (result[5] - v26) >> 3;
    v15 = (unint64_t *)result[7];
    v14 = (uint64_t *)result[8];
    v28 = (_QWORD *)(v4[10] + 40);
    v29 = (_QWORD *)result[11];
    v179 = result[10];
    v182 = ((char *)v14 - (char *)v15) >> 3;
    do
    {
      v48 = *((unsigned int *)v12 + 1);
      v49 = v48 >> 7;
      if (v48 >> 7 < v19)
      {
        v50 = *(_QWORD *)(v18 + 8 * v49);
        if (v50)
        {
          v51 = v48 & 0x7F;
          v52 = *(unsigned __int16 *)(v50 + 2 * v51);
          if ((v20 - v21) >> 3 > v52)
          {
            v53 = v21 + 8 * v52;
            v54 = v29;
            v55 = v53 != v20 && *(_DWORD *)(v53 + 4) == (_DWORD)v48;
            if (v55 && v49 < v23)
            {
              v57 = *(_QWORD *)(v22 + 8 * v49);
              if (v57)
              {
                v58 = *(unsigned __int16 *)(v57 + 2 * v51);
                if ((v24 - v25) >> 3 > v58)
                {
                  v59 = v25 + 8 * v58;
                  v60 = v59 != v24 && *(_DWORD *)(v59 + 4) == (_DWORD)v48;
                  if (v60 && v49 < v27)
                  {
                    v62 = *(_QWORD *)(v26 + 8 * v49);
                    if (v62)
                    {
                      v63 = *(unsigned __int16 *)(v62 + 2 * v51);
                      if (v182 > v63)
                      {
                        v64 = (uint64_t *)&v15[v63];
                        if (v64 != v14 && *((_DWORD *)v64 + 1) == (_DWORD)v48)
                        {
                          v66 = *v12;
                          v67 = *v12 >> 39;
                          v68 = v29;
                          if (v67 < v27)
                          {
                            v69 = *(_QWORD *)(v26 + 8 * v67);
                            v68 = v29;
                            if (v69)
                            {
                              v70 = *(unsigned __int16 *)(v69 + 2 * (HIDWORD(v66) & 0x7F));
                              v68 = v29;
                              if (v182 > v70)
                              {
                                v71 = (uint64_t *)&v15[v70];
                                v72 = *((_DWORD *)v71 + 1) != HIDWORD(v66) || v71 == v14;
                                v29 = v54;
                                if (v72)
                                  v68 = v54;
                                else
                                  v68 = (_QWORD *)(v179 + 16 * v70);
                              }
                            }
                          }
                          v47 = (_QWORD *)*v68;
                          v47[7] = *(v28 - 2);
                          v47[8] = *(v28 - 1);
                          v47[9] = *v28;
                          v47[10] = v28[1];
                          v47[4] = *(v28 - 5);
                          v47[5] = *(v28 - 4);
                          v47[6] = *(v28 - 3);
                          v47[11] = v28[2];
                          v47[12] = v28[3];
                          v47[13] = v28[4];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v12;
      v28 += 10;
    }
    while (v12 != (unint64_t *)v11);
  }
  if (result + 4 == v13 && v15 != (unint64_t *)v14)
  {
    v73 = (_QWORD *)result[10];
    v74 = v2[4];
    v75 = (v2[5] - v74) >> 3;
    v77 = v2[7];
    v76 = v2[8];
    v78 = v3[4];
    v79 = (v3[5] - v78) >> 3;
    v80 = v3[7];
    result = (_QWORD *)v3[8];
    v81 = v4[4];
    v82 = (v4[5] - v81) >> 3;
    v84 = v4[7];
    v83 = v4[8];
    v85 = (v83 - v84) >> 3;
    v87 = v4[10];
    v86 = (_QWORD *)v4[11];
    do
    {
      v146 = *((unsigned int *)v15 + 1);
      v147 = v146 >> 7;
      if (v146 >> 7 < v75)
      {
        v148 = *(_QWORD *)(v74 + 8 * v147);
        if (v148)
        {
          v149 = v146 & 0x7F;
          v150 = *(unsigned __int16 *)(v148 + 2 * v149);
          if ((v76 - v77) >> 3 > v150)
          {
            v151 = v77 + 8 * v150;
            v152 = v151 != v76 && *(_DWORD *)(v151 + 4) == (_DWORD)v146;
            if (v152 && v147 < v79)
            {
              v154 = *(_QWORD *)(v78 + 8 * v147);
              if (v154)
              {
                v155 = *(unsigned __int16 *)(v154 + 2 * v149);
                if (((uint64_t)result - v80) >> 3 > v155)
                {
                  v156 = v80 + 8 * v155;
                  v157 = (_QWORD *)v156 != result && *(_DWORD *)(v156 + 4) == (_DWORD)v146;
                  if (v157 && v147 < v82)
                  {
                    v159 = *(_QWORD *)(v81 + 8 * v147);
                    if (v159)
                    {
                      v160 = *(unsigned __int16 *)(v159 + 2 * v149);
                      if (v85 > v160)
                      {
                        v161 = v84 + 8 * v160;
                        if (v161 != v83 && *(_DWORD *)(v161 + 4) == (_DWORD)v146)
                        {
                          v163 = *v15;
                          v164 = *v15 >> 39;
                          v165 = v86;
                          if (v164 < v82)
                          {
                            v166 = *(_QWORD *)(v81 + 8 * v164);
                            v165 = v86;
                            if (v166)
                            {
                              v167 = *(unsigned __int16 *)(v166 + 2 * (HIDWORD(v163) & 0x7F));
                              v165 = v86;
                              if (v85 > v167)
                              {
                                v168 = HIDWORD(v163);
                                v169 = v84 + 8 * v167;
                                v170 = *(_DWORD *)(v169 + 4) != (_DWORD)v168 || v169 == v83;
                                v165 = (_QWORD *)(v87 + 80 * v167);
                                if (v170)
                                  v165 = v86;
                              }
                            }
                          }
                          v145 = (_QWORD *)*v73;
                          v145[7] = v165[3];
                          v145[8] = v165[4];
                          v145[9] = v165[5];
                          v145[10] = v165[6];
                          v145[4] = *v165;
                          v145[5] = v165[1];
                          v145[6] = v165[2];
                          v145[11] = v165[7];
                          v145[12] = v165[8];
                          v145[13] = v165[9];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v73 += 2;
      ++v15;
    }
    while (v15 != (unint64_t *)v14);
  }
  return result;
}

void md::Logic<md::LabelsExtractExternallyResolvedWorldTransformLogic,md::LabelsExtractExternallyResolvedWorldTransformContext,md::LogicDependencies<gdc::TypeList<md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<arComponents::NeedsResolvedWorldTransform>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF6A197B0F4F03657;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF6A197B0F4F03657;
      if (*(_QWORD *)&v3 <= 0xF6A197B0F4F03657)
        v5 = 0xF6A197B0F4F03657 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF6A197B0F4F03657;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF6A197B0F4F03657)
            {
              if (v7[2] == 0xF6A197B0F4F03657)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF6A197B0F4F03657)
          {
            if (v7[2] == 0xF6A197B0F4F03657)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::NeedsResolvedWorldTransform]";
  *(_QWORD *)(v11 + 24) = 41;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2388;
  *(_QWORD *)(v11 + 8) = 0xF6A197B0F4F03657;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF6A197B0F4F03657, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF6A197B0F4F03657;
  v15[1] = "arComponents::NeedsResolvedWorldTransform]";
  v15[2] = 41;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF6A197B0F4F03657, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6139E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6348F11188A7D30CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6348F11188A7D30CLL;
      if (*(_QWORD *)&v3 <= 0x6348F11188A7D30CuLL)
        v5 = 0x6348F11188A7D30CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6348F11188A7D30CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6348F11188A7D30CLL)
            {
              if (v7[2] == 0x6348F11188A7D30CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6348F11188A7D30CLL)
          {
            if (v7[2] == 0x6348F11188A7D30CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>]";
  *(_QWORD *)(v11 + 24) = 58;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B26E8;
  *(_QWORD *)(v11 + 8) = 0x6348F11188A7D30CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6348F11188A7D30CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6348F11188A7D30CLL;
  v15[1] = "arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>]";
  v15[2] = 58;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6348F11188A7D30CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F613C08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  return a1;
}

void gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((_QWORD *)(a1 + 32));
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v10 = a2;
  v3 = geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(a1 + 4, HIDWORD(a2));
  if (!(_DWORD)v3)
    return v3;
  v4 = (_QWORD *)a1[28];
  if (!v4)
    return v3;
  v5 = a1[31];
  while (1)
  {
    v12[0] = &v10;
    v12[1] = 1;
    v11 = v5;
    v6 = v4[6];
    if (!v6)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v6 + 48))(v6, &v11, v12);
    v4 = (_QWORD *)*v4;
    if (!v4)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::contains(v8, v9);
}

BOOL gdc::ComponentStorageWrapper<arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t geo::sparse_map<gdc::Entity,arComponents::Wrap<std::shared_ptr<md::LabelExternalMesh>>>::erase(uint64_t *a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  v2 = (unint64_t)a2 >> 7;
  if (v2 >= (a1[1] - *a1) >> 3)
    return 0;
  v3 = *(_QWORD *)(*a1 + 8 * v2);
  if (!v3)
    return 0;
  v5 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  v6 = a1[3];
  v7 = a1[4];
  if (v5 >= (v7 - v6) >> 3)
    return 0;
  v8 = v6 + 8 * v5;
  if (*(_DWORD *)(v8 + 4) != a2 || v8 == v7)
    return 0;
  v11 = (_QWORD *)(a1[6] + 16 * v5);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(a1, (_QWORD *)v8);
  v12 = a1[7];
  v14 = *(_QWORD *)(v12 - 16);
  v13 = *(_QWORD *)(v12 - 8);
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)v11[1];
  *v11 = v14;
  v11[1] = v13;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = a1[7];
  v21 = *(std::__shared_weak_count **)(v20 - 8);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  a1[7] = v20 - 16;
  return 1;
}

void gdc::ComponentStorageWrapper<arComponents::NeedsResolvedWorldTransform>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<arComponents::NeedsResolvedWorldTransform>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::NeedsResolvedWorldTransform>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::NeedsResolvedWorldTransform>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::LabelsExtractExternallyResolvedWorldTransformContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B16D0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::LabelsExtractExternallyResolvedWorldTransformContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B16D0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::LabelsExtractExternallyResolvedWorldTransformContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void md::Renderer::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *i;
  void **v7;
  void **v8;
  void *v9;
  void **v10;
  void **v11;
  void *v12;
  void **v13;
  void **v14;
  void *v15;
  void **v16;
  void *v17[2];
  char v18;
  void *v19;
  char v20;
  void **v21;
  void *__p;
  void **v23;

  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v3 = *(_QWORD **)(a1 + 40);
  for (i = *(_QWORD **)(a1 + 48); v3 != i; ++v3)
  {
    if (*v3)
    {
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v3 + 64))(v17, *v3, a2);
      gdc::DebugTreeNode::addChildNode((_QWORD *)a3, (__int128 *)v17);
      v7 = (void **)__p;
      if (__p)
      {
        v8 = v23;
        v9 = __p;
        if (v23 != __p)
        {
          do
          {
            v10 = (void **)*(v8 - 3);
            if (v10)
            {
              v11 = (void **)*(v8 - 2);
              v12 = *(v8 - 3);
              if (v11 != v10)
              {
                do
                {
                  if (*((char *)v11 - 1) < 0)
                    operator delete(*(v11 - 3));
                  v11 -= 3;
                }
                while (v11 != v10);
                v12 = *(v8 - 3);
              }
              *(v8 - 2) = v10;
              operator delete(v12);
            }
            v13 = (void **)*(v8 - 6);
            if (v13)
            {
              v14 = (void **)*(v8 - 5);
              v15 = *(v8 - 6);
              if (v14 != v13)
              {
                do
                {
                  if (*((char *)v14 - 9) < 0)
                    operator delete(*(v14 - 4));
                  v14 -= 8;
                }
                while (v14 != v13);
                v15 = *(v8 - 6);
              }
              *(v8 - 5) = v13;
              operator delete(v15);
            }
            v16 = v8 - 10;
            if (*((char *)v8 - 57) < 0)
              operator delete(*v16);
            v8 -= 10;
          }
          while (v16 != v7);
          v9 = __p;
        }
        v23 = v7;
        operator delete(v9);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v21);
      if (v20 < 0)
      {
        operator delete(v19);
        if (v18 < 0)
LABEL_33:
          operator delete(v17[0]);
      }
      else if (v18 < 0)
      {
        goto LABEL_33;
      }
    }
  }
}

void sub_19F614288(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode *v1;

  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

md::FrameGraphResourceRegistry **std::unique_ptr<md::FrameGraphResourceRegistry>::~unique_ptr[abi:nn180100](md::FrameGraphResourceRegistry **a1)
{
  md::FrameGraphResourceRegistry *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::FrameGraphResourceRegistry::~FrameGraphResourceRegistry(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void md::Renderer::~Renderer(md::Renderer *this)
{
  uint64_t v2;
  md::FrameGraphResourceRegistry *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  md::FrameGraphResourceRegistry *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  *(_QWORD *)this = off_1E42AF600;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (md::FrameGraphResourceRegistry *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    md::FrameGraphResourceRegistry::~FrameGraphResourceRegistry(v3);
    MEMORY[0x1A1AF4E00]();
  }

  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    *((_QWORD *)this + 9) = v4;
    operator delete(v4);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  if (v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 6);
    v7 = (void *)*((_QWORD *)this + 5);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v5;
    operator delete(v7);
  }
  v10 = (md::FrameGraphResourceRegistry *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    md::FrameGraphResourceRegistry::~FrameGraphResourceRegistry(v10);
    MEMORY[0x1A1AF4E00]();
  }
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

unsigned __int8 *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int16 v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  __int16 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;

  v3 = *a2;
  v4 = *result;
  if (v3 < v4)
    goto LABEL_8;
  if (v3 != v4)
  {
    if (v4 < v3)
      goto LABEL_14;
LABEL_7:
    if (*((_QWORD *)a2 + 1) >= *((_QWORD *)result + 1))
      goto LABEL_14;
LABEL_8:
    v7 = *a3;
    if (v7 < v3)
    {
LABEL_9:
      v8 = *(_WORD *)result;
      *(_WORD *)result = *(_WORD *)a3;
      result += 8;
      *(_WORD *)a3 = v8;
      v9 = a3 + 8;
LABEL_21:
      v14 = v9;
      goto LABEL_22;
    }
    if (v7 == v3)
    {
      v10 = a3[1];
      v11 = a2[1];
      if (v10 < v11)
        goto LABEL_9;
      if (v11 < v10)
      {
LABEL_19:
        v19 = *(unsigned __int16 *)result;
        *(_WORD *)result = *(_WORD *)a2;
        *(_WORD *)a2 = v19;
        v20 = *((_QWORD *)result + 1);
        *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v20;
        v21 = *a3;
        if (v21 < v19)
        {
LABEL_20:
          v22 = *(_WORD *)a2;
          *(_WORD *)a2 = *(_WORD *)a3;
          *(_WORD *)a3 = v22;
          v9 = a3 + 8;
          result = a2 + 8;
          goto LABEL_21;
        }
        if (v21 == v19)
        {
          v26 = v19 >> 8;
          v27 = a3[1];
          v28 = v27 > v26;
          if (v27 < v26)
            goto LABEL_20;
        }
        else
        {
          v28 = v21 > v19;
        }
        if (v28 || *((_QWORD *)a3 + 1) >= v20)
          return result;
        goto LABEL_20;
      }
    }
    else if (v3 < v7)
    {
      goto LABEL_19;
    }
    if (*((_QWORD *)a3 + 1) < *((_QWORD *)a2 + 1))
      goto LABEL_9;
    goto LABEL_19;
  }
  v5 = a2[1];
  v6 = result[1];
  if (v5 < v6)
    goto LABEL_8;
  if (v6 >= v5)
    goto LABEL_7;
LABEL_14:
  v12 = *a3;
  if (v12 < v3)
    goto LABEL_15;
  if (v12 == v3)
  {
    v24 = a3[1];
    v25 = a2[1];
    if (v24 < v25)
      goto LABEL_15;
    if (v25 < v24)
      return result;
  }
  else if (v3 < v12)
  {
    return result;
  }
  if (*((_QWORD *)a3 + 1) >= *((_QWORD *)a2 + 1))
    return result;
LABEL_15:
  v13 = *(_WORD *)a2;
  *(_WORD *)a2 = *(_WORD *)a3;
  *(_WORD *)a3 = v13;
  v14 = a2 + 8;
  v15 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = v15;
  v16 = *a2;
  v17 = *result;
  if (v16 < v17
    || v16 == v17 && (v16 = a2[1], v17 = result[1], v16 < v17)
    || v17 >= v16 && *(_QWORD *)v14 < *((_QWORD *)result + 1))
  {
    v18 = *(_WORD *)result;
    *(_WORD *)result = *(_WORD *)a2;
    result += 8;
    *(_WORD *)a2 = v18;
LABEL_22:
    v23 = *(_QWORD *)result;
    *(_QWORD *)result = *(_QWORD *)v14;
    *(_QWORD *)v14 = v23;
  }
  return result;
}

unsigned __int8 *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *result;
  unsigned int v9;
  unsigned int v10;
  __int16 v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (v9 < v10
    || v9 == v10 && (v9 = a4[1], v10 = a3[1], v9 < v10)
    || v10 >= v9 && *((_QWORD *)a4 + 1) < *((_QWORD *)a3 + 1))
  {
    v11 = *(_WORD *)a3;
    *(_WORD *)a3 = *(_WORD *)a4;
    *(_WORD *)a4 = v11;
    v12 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = *((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = v12;
    v13 = *a3;
    v14 = *a2;
    if (v13 < v14)
      goto LABEL_7;
    if (v13 == v14)
    {
      v13 = a3[1];
      v14 = a2[1];
      if (v13 < v14)
        goto LABEL_7;
    }
    if (v14 >= v13 && *((_QWORD *)a3 + 1) < *((_QWORD *)a2 + 1))
    {
LABEL_7:
      v15 = *(_WORD *)a2;
      *(_WORD *)a2 = *(_WORD *)a3;
      *(_WORD *)a3 = v15;
      v16 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v16;
      v17 = *a2;
      v18 = *a1;
      if (v17 < v18
        || v17 == v18 && (v17 = a2[1], v18 = a1[1], v17 < v18)
        || v18 >= v17 && *((_QWORD *)a2 + 1) < *((_QWORD *)a1 + 1))
      {
        v19 = *(_WORD *)a1;
        *(_WORD *)a1 = *(_WORD *)a2;
        *(_WORD *)a2 = v19;
        v20 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v20;
      }
    }
  }
  return result;
}

unsigned __int8 *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned __int8 *result;
  unsigned int v11;
  unsigned int v12;
  __int16 v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  __int16 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  __int16 v25;
  uint64_t v26;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (v11 < v12
    || v11 == v12 && (v11 = a5[1], v12 = a4[1], v11 < v12)
    || v12 >= v11 && *((_QWORD *)a5 + 1) < *((_QWORD *)a4 + 1))
  {
    v13 = *(_WORD *)a4;
    *(_WORD *)a4 = *(_WORD *)a5;
    *(_WORD *)a5 = v13;
    v14 = *((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = *((_QWORD *)a5 + 1);
    *((_QWORD *)a5 + 1) = v14;
    v15 = *a4;
    v16 = *a3;
    if (v15 < v16)
      goto LABEL_11;
    if (v15 == v16)
    {
      v15 = a4[1];
      v16 = a3[1];
      if (v15 < v16)
        goto LABEL_11;
    }
    if (v16 >= v15 && *((_QWORD *)a4 + 1) < *((_QWORD *)a3 + 1))
    {
LABEL_11:
      v17 = *(_WORD *)a3;
      *(_WORD *)a3 = *(_WORD *)a4;
      *(_WORD *)a4 = v17;
      v18 = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = *((_QWORD *)a4 + 1);
      *((_QWORD *)a4 + 1) = v18;
      v19 = *a3;
      v20 = *a2;
      if (v19 < v20)
        goto LABEL_12;
      if (v19 == v20)
      {
        v19 = a3[1];
        v20 = a2[1];
        if (v19 < v20)
          goto LABEL_12;
      }
      if (v20 >= v19 && *((_QWORD *)a3 + 1) < *((_QWORD *)a2 + 1))
      {
LABEL_12:
        v21 = *(_WORD *)a2;
        *(_WORD *)a2 = *(_WORD *)a3;
        *(_WORD *)a3 = v21;
        v22 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
        *((_QWORD *)a3 + 1) = v22;
        v23 = *a2;
        v24 = *a1;
        if (v23 < v24
          || v23 == v24 && (v23 = a2[1], v24 = a1[1], v23 < v24)
          || v24 >= v23 && *((_QWORD *)a2 + 1) < *((_QWORD *)a1 + 1))
        {
          v25 = *(_WORD *)a1;
          *(_WORD *)a1 = *(_WORD *)a2;
          *(_WORD *)a2 = v25;
          v26 = *((_QWORD *)a1 + 1);
          *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 16);
      v7 = *a1;
      if (v6 < v7
        || v6 == v7 && (v6 = *(a2 - 15), v7 = a1[1], v6 < v7)
        || v7 >= v6 && *((_QWORD *)a2 - 1) < *((_QWORD *)a1 + 1))
      {
        v8 = *(_WORD *)a1;
        *(_WORD *)a1 = *((_WORD *)a2 - 8);
        *((_WORD *)a2 - 8) = v8;
        v9 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(a1, a1 + 16, a1 + 32);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (2)
  {
    v15 = *v11;
    v16 = *v10;
    if (v15 >= v16)
    {
      if (v15 != v16 || (v15 = v11[1], v16 = v10[1], v15 >= v16))
      {
        if (v16 < v15 || *((_QWORD *)v11 + 1) >= *((_QWORD *)v10 + 1))
          goto LABEL_8;
      }
    }
    v17 = *(unsigned __int16 *)v11;
    v18 = *((_QWORD *)v11 + 1);
    *(_WORD *)v11 = *(_WORD *)v10;
    *((_QWORD *)v11 + 1) = *((_QWORD *)v10 + 1);
    v14 = (uint64_t)a1;
    if (v10 == a1)
      goto LABEL_7;
    v19 = v17 >> 8;
    v20 = v12;
    while (1)
    {
      v21 = &a1[v20];
      v22 = a1[v20 + 16];
      if (v22 <= v17)
      {
        if (v22 == v17)
        {
          v23 = a1[v20 + 17];
          if (v23 > v19)
            goto LABEL_14;
          if (v23 < v19)
          {
LABEL_19:
            v14 = (uint64_t)v10;
            goto LABEL_7;
          }
        }
        else if (v22 < v17)
        {
          goto LABEL_19;
        }
        if (v18 >= *(_QWORD *)&a1[v20 + 24])
          break;
      }
LABEL_14:
      v10 -= 16;
      *((_WORD *)v21 + 16) = *((_WORD *)v21 + 8);
      *((_QWORD *)v21 + 5) = *((_QWORD *)v21 + 3);
      v20 -= 16;
      if (v20 == -32)
      {
        v14 = (uint64_t)a1;
        goto LABEL_7;
      }
    }
    v14 = (uint64_t)&a1[v20 + 32];
LABEL_7:
    *(_WORD *)v14 = v17;
    *(_QWORD *)(v14 + 8) = v18;
    if (++v13 == 8)
      return v11 + 16 == a2;
LABEL_8:
    v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 != a2)
      continue;
    return 1;
  }
}

void vkAnalyticsSendEventLazy(void *a1)
{
  __CFString *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = CFSTR("com.apple.VectorKit.GeoGL.AccessRevoked");
  v3 = a1;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v4 = getAnalyticsSendEventLazySymbolLoc_ptr;
  v10 = getAnalyticsSendEventLazySymbolLoc_ptr;
  if (getAnalyticsSendEventLazySymbolLoc_ptr)
    goto LABEL_7;
  v11 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v4 = (void *)CoreAnalyticsLibraryCore_frameworkLibrary;
  v15 = CoreAnalyticsLibraryCore_frameworkLibrary;
  if (!CoreAnalyticsLibraryCore_frameworkLibrary)
  {
    v16 = xmmword_1E42EE000;
    v17 = *(_OWORD *)&off_1E42EE010;
    v5 = _sl_dlopen();
    v13[3] = v5;
    CoreAnalyticsLibraryCore_frameworkLibrary = v5;
    v4 = (void *)v5;
  }
  _Block_object_dispose(&v12, 8);
  v6 = v11;
  if (!v4)
  {
    v6 = (void *)abort_report_np();
    goto LABEL_11;
  }
  if (v11)
    goto LABEL_12;
  while (1)
  {
    v4 = dlsym(v4, "AnalyticsSendEventLazy");
    v8[3] = (uint64_t)v4;
    getAnalyticsSendEventLazySymbolLoc_ptr = v4;
LABEL_7:
    _Block_object_dispose(&v7, 8);
    if (v4)
      break;
    dlerror();
    v6 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v6);
  }
  ((void (*)(const __CFString *, id))v4)(CFSTR("com.apple.VectorKit.GeoGL.AccessRevoked"), v3);

}

void sub_19F614CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void md::ObjectGroup::addFeatureIds(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  unsigned __int8 v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  int8x8_t v16;
  unint64_t v17;
  uint8x8_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  if (a1 != a2)
  {
    v4 = a4;
    v6 = a1;
    v7 = a4 - 0x61C8864680B583EBLL;
    v8 = a3 + 2;
    do
    {
      v9 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      while (v9 != v10)
      {
        v12 = *(_QWORD *)(v9 + 8);
        v11 = *(_QWORD *)(v9 + 16);
        if (v12 != v11)
        {
          while (1)
          {
            while (1)
            {
              v13 = operator new(0x20uLL);
              *v13 = 0;
              v14 = *(uint64_t **)(v12 + 16);
              *((_BYTE *)v13 + 24) = v4;
              v15 = (v7 + ((_QWORD)v14 << 6) + ((unint64_t)v14 >> 2)) ^ (unint64_t)v14;
              v13[1] = v15;
              v13[2] = v14;
              if (!std::__hash_table<md::FeatureIdZoom,md::FeatureIdZoomHash,std::equal_to<md::FeatureIdZoom>,std::allocator<md::FeatureIdZoom>>::__node_insert_unique_prepare[abi:nn180100]((uint64_t)a3, v15, v14, v4))break;
              operator delete(v13);
              v12 += 24;
              if (v12 == v11)
                goto LABEL_5;
            }
            v16 = (int8x8_t)a3[1];
            v17 = v13[1];
            v18 = (uint8x8_t)vcnt_s8(v16);
            v18.i16[0] = vaddlv_u8(v18);
            if (v18.u32[0] > 1uLL)
            {
              if (v17 >= *(_QWORD *)&v16)
                v17 %= *(_QWORD *)&v16;
            }
            else
            {
              v17 &= *(_QWORD *)&v16 - 1;
            }
            v19 = *a3;
            v20 = *(_QWORD **)(*a3 + 8 * v17);
            if (v20)
              break;
            *v13 = *v8;
            *v8 = v13;
            *(_QWORD *)(v19 + 8 * v17) = v8;
            if (*v13)
            {
              v21 = *(_QWORD *)(*v13 + 8);
              if (v18.u32[0] > 1uLL)
              {
                if (v21 >= *(_QWORD *)&v16)
                  v21 %= *(_QWORD *)&v16;
              }
              else
              {
                v21 &= *(_QWORD *)&v16 - 1;
              }
              v20 = (_QWORD *)(*a3 + 8 * v21);
              goto LABEL_23;
            }
LABEL_24:
            ++a3[3];
            v12 += 24;
            if (v12 == v11)
              goto LABEL_5;
          }
          *v13 = *v20;
LABEL_23:
          *v20 = v13;
          goto LABEL_24;
        }
LABEL_5:
        v9 += 32;
      }
      v6 += 40;
    }
    while (v6 != a2);
  }
}

void sub_19F614ED8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void altitude::DtmRequestManager::~DtmRequestManager(altitude::DtmRequestManager *this)
{
  *(_QWORD *)this = off_1E42C3240;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::DtmRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  *(_QWORD *)this = off_1E42C3240;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::DtmRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      v6 = (uint64_t *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = v4[8];
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v13 = (uint64_t *)v4[1];
        v14 = v4;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*(uint64_t **)(a1 + 64) == v4)
          *(_QWORD *)(a1 + 64) = v15;
        v16 = *(uint64_t **)(a1 + 72);
        --*(_QWORD *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v4);
        v17 = (std::__shared_weak_count *)v4[9];
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        operator delete(v4);
      }
      v4 = v8;
    }
    while (v8 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      v6 = (uint64_t *)v5[1];
      if (v5[8] == a2)
        break;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    if (v6)
    {
      do
      {
        v9 = v6;
        v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v8 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5)
      *(_QWORD *)(a1 + 64) = v9;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    v12 = (std::__shared_weak_count *)v5[9];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, unsigned int *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = (uint64_t **)(a1 + 64);
  v5 = (uint64_t *)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v5)
  {
    v6 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5[8] + 16))(v5[8]);
    v7 = (uint64_t *)v6[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v6;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v6)
      *v4 = v8;
    v11 = *(uint64_t **)(a1 + 72);
    --*(_QWORD *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v6);
    v12 = (std::__shared_weak_count *)v6[9];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v6);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

_QWORD *altitude::DtmRequestManager::createRequest@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *result;
  __int128 v11;

  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v11 = *(_OWORD *)(a1 + 96);
  v8 = karo::Job::Job(v6, *(_QWORD *)(a1 + 32));
  *(_BYTE *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v8 = &off_1E42C3878;
  *(_BYTE *)(v8 + 188) = 0;
  *(_OWORD *)(v8 + 192) = v11;
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 224) = 0;
  *(_QWORD *)(v8 + 208) = v7;
  v9 = a2[1];
  *(_OWORD *)(v8 + 232) = *a2;
  *(_OWORD *)(v8 + 248) = v9;
  *a3 = v8;
  result = (_QWORD *)operator new();
  *result = &off_1E42E8478;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 32);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 36);
      v12 = *(_DWORD *)(v8 + 40);
      v13 = *(_BYTE *)(v8 + 44);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 48;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::TileKey,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  _DWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>(a1 + 64, a2);
  if ((_DWORD *)(a1 + 72) == v6)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    v8 = *((_QWORD *)v6 + 8);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 9);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v8)
    {
      karo::Job::waitToFinish((karo::Job *)v8, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
      v11 = *(_DWORD *)(v8 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
      if (!v7)
        return v11;
    }
    else
    {
      v11 = 0;
      if (!v7)
        return v11;
    }
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v11;
}

void karo::AsyncRequestManagerTemplate<altitude::TileKey,karo::AsyncRequestManagerNoArgs>::getRequest(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  _QWORD **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD **)(a1 + 8);
  v9 = (uint64_t **)std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::find<altitude::TileKey>((uint64_t)(a1 + 8), (unsigned int *)a2);
  v10 = v9;
  if (a1 + 9 == v9)
  {
    (*(void (**)(uint64_t **__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 64))(&v35, a1, a2, a3);
    v16 = v35;
    v15 = v36;
    *a4 = v35;
    a4[1] = (uint64_t *)v15;
    v17 = std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::__find_equal<altitude::TileKey>((uint64_t)v8, &v35, (unsigned int *)a2);
    v18 = *v17;
    if (!*v17)
    {
      v19 = v17;
      v18 = (uint64_t)operator new(0x50uLL);
      v20 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v18 + 32) = *(_OWORD *)a2;
      *(_OWORD *)(v18 + 48) = v20;
      *(_QWORD *)(v18 + 64) = 0;
      *(_QWORD *)(v18 + 72) = 0;
      v21 = v35;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = v21;
      *v19 = v18;
      v22 = (_QWORD *)**v8;
      v23 = (uint64_t *)v18;
      if (v22)
      {
        *v8 = v22;
        v23 = (uint64_t *)*v19;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v10, v23);
      ++a1[10];
    }
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    v26 = *(std::__shared_weak_count **)(v18 + 72);
    *(_QWORD *)(v18 + 64) = v16;
    *(_QWORD *)(v18 + 72) = v15;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = a1[6];
    if (v29)
    {
      v30 = *a4;
      v31 = (std::__shared_weak_count *)a4[1];
      v35 = v30;
      v36 = v31;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        karo::JobManager::queueJob(v29, &v35);
        do
          v34 = __ldaxr(v32);
        while (__stlxr(v34 - 1, v32));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      else
      {
        karo::JobManager::queueJob(v29, &v35);
      }
    }
  }
  else
  {
    v12 = v9[8];
    v11 = v9[9];
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 1);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *a4 = v12;
    a4[1] = v11;
  }
}

uint64_t altitude::DtmRequestManager::request(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, a5, a6, 0);
}

void std::__shared_ptr_pointer<altitude::DtmRequest *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::DtmRequest>,std::allocator<altitude::DtmRequest>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::DtmRequest *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::DtmRequest>,std::allocator<altitude::DtmRequest>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void karo::graphics::Viewport::~Viewport(void **this)
{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1A1AF4E00);
}

double karo::graphics::Viewport::computeWindowMatrix(karo::graphics::Viewport *this, uint64_t a2)
{
  int64x2_t v4;
  double v5;
  double v6;
  uint64_t v13;
  double v14[16];
  double v15[16];
  double v16[16];
  double v17[16];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  double v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[40];

  v21 = 0u;
  v23 = 0;
  v26 = 0u;
  v25 = 0u;
  v22 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0x3FF0000000000000;
  *(_QWORD *)&v21 = 0x3FF0000000000000;
  v24 = 0x3FF0000000000000;
  v27 = 0x3FF0000000000000;
  v31 = 0u;
  v33 = 0;
  v32 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 1.0;
  *(_QWORD *)&v31 = 0x3FF0000000000000;
  v34 = 0x3FF0000000000000;
  *(_QWORD *)v35 = 0;
  v13 = *(_QWORD *)(a2 + 40);
  v4.i64[0] = (int)v13;
  v4.i64[1] = SHIDWORD(v13);
  *(float64x2_t *)&v35[8] = vcvtq_f64_s64(v4);
  *(_OWORD *)&v35[24] = xmmword_19FFB33A0;
  gm::operator*<double,4,4,4>(v16, (double *)&v18, &v28);
  v5 = (double)(*(_DWORD *)(a2 + 48) - (int)v13) * 0.5;
  v6 = (double)(*(_DWORD *)(a2 + 52) - HIDWORD(v13)) * -0.5;
  v31 = 0u;
  v33 = 0;
  memset(v35, 0, 32);
  v32 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = v5;
  *(double *)&v31 = v6;
  *(_QWORD *)&v35[32] = 0x3FF0000000000000;
  v34 = 0x3FE0000000000000;
  gm::operator*<double,4,4,4>(v15, (double *)&v18, &v28);
  gm::operator*<double,4,4,4>(v17, v16, v15);
  v31 = 0u;
  v33 = 0;
  v32 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 1.0;
  *(_QWORD *)&v31 = 0x3FF0000000000000;
  v34 = 0x3FF0000000000000;
  *(_QWORD *)v35 = 0;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)&v35[8] = xmmword_19FFB32B0;
  *(_OWORD *)&v35[24] = _Q1;
  gm::operator*<double,4,4,4>(v14, (double *)&v18, &v28);
  return gm::operator*<double,4,4,4>((double *)this, v17, v14);
}

md::SceneTileSet *md::SceneTileSet::SceneTileSet(md::SceneTileSet *this)
{
  uint64_t v2;

  *(_WORD *)this = 0;
  *((_BYTE *)this + 2) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  v2 = operator new();
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_DWORD *)(v2 + 80) = 1065353216;
  *((_QWORD *)this + 12) = v2;
  return this;
}

void sub_19F615D74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  v5 = *(_QWORD **)(v1 + 72);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *v3;
  *v3 = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(v1 + 24);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *v2;
  *v2 = 0;
  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

gdc::LayerDataCollector **std::unique_ptr<gdc::LayerDataCollector>::~unique_ptr[abi:nn180100](gdc::LayerDataCollector **a1)
{
  gdc::LayerDataCollector *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::SceneTileSet *md::SceneTileSet::SceneTileSet(md::SceneTileSet *this, const md::SceneTileSet *a2)
{
  uint64_t v2;
  md::SceneTileSet *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  size_t prime;
  int8x8_t v31;
  BOOL v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t ***v41;
  uint64_t **v42;
  unint64_t v43;
  uint64_t *v44;
  size_t v45;
  const void *v46;
  uint64_t *v47;
  uint64_t *v48;
  size_t v49;
  const void *v50;
  char *v51;
  float v52;
  float v53;
  _BOOL8 v54;
  unint64_t v55;
  unint64_t v56;
  size_t v57;
  int8x8_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  gdc::LayerDataCollector *v65;
  uint64_t *v67;
  gdc::LayerDataCollector **v68;

  v4 = this;
  *(_WORD *)this = *(_WORD *)a2;
  *((_BYTE *)this + 2) = *((_BYTE *)a2 + 2);
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)this + 8, (uint64_t)a2 + 8);
  *((_DWORD *)v4 + 12) = *((_DWORD *)a2 + 12);
  std::unordered_set<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::unordered_set((uint64_t)v4 + 56, (uint64_t)a2 + 56);
  *((_QWORD *)v4 + 12) = 0;
  if (!*((_QWORD *)a2 + 12))
    return v4;
  v68 = (gdc::LayerDataCollector **)v4;
  v5 = operator new();
  v6 = (uint64_t *)*((_QWORD *)a2 + 12);
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  v7 = *v6;
  v8 = v6[1];
  v9 = v8 - *v6;
  if (v8 != *v6)
  {
    v10 = 0x8E38E38E38E38E39 * (v9 >> 4);
    if (v10 > 0x1C71C71C71C71C7)
      goto LABEL_117;
    v11 = operator new(v9);
    v12 = 0;
    *(_QWORD *)v5 = v11;
    *(_QWORD *)(v5 + 8) = v11;
    *(_QWORD *)(v5 + 16) = &v11[144 * v10];
    do
    {
      v13 = v7 + v12;
      v14 = &v11[v12];
      v11[v12] = *(_BYTE *)(v7 + v12);
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v11[v12 + 8], v7 + v12 + 8);
      v11[v12 + 96] = 0;
      if (*(_BYTE *)(v7 + v12 + 96))
      {
        *((_DWORD *)v14 + 25) = *(_DWORD *)(v13 + 100);
        v14[96] = 1;
      }
      *((_QWORD *)v14 + 13) = *(_QWORD *)(v13 + 104);
      *((_WORD *)v14 + 56) = *(_WORD *)(v13 + 112);
      *(_QWORD *)(v14 + 116) = *(_QWORD *)(v13 + 116);
      *((_QWORD *)v14 + 17) = *(_QWORD *)(v13 + 136);
      v12 += 144;
    }
    while (v13 + 144 != v8);
    *(_QWORD *)(v5 + 8) = &v11[v12];
  }
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v15 = v6[3];
  v16 = v6[4];
  v17 = v16 - v15;
  if (v16 == v15)
    goto LABEL_25;
  v67 = v6;
  if (v17 < 0)
LABEL_117:
    abort();
  v18 = v17 >> 5;
  v19 = operator new(v17);
  *(_QWORD *)(v5 + 24) = v19;
  *(_QWORD *)(v5 + 32) = v19;
  *(_QWORD *)(v5 + 40) = &v19[4 * v18];
  v2 = 144;
  do
  {
    *(_WORD *)v19 = *(_WORD *)v15;
    v19[2] = 0;
    v19[3] = 0;
    v19[1] = 0;
    v20 = *(char **)(v15 + 8);
    v21 = *(char **)(v15 + 16);
    v22 = v21 - v20;
    if (v21 != v20)
    {
      v23 = 0x8E38E38E38E38E39 * (v22 >> 4);
      if (v23 > 0x1C71C71C71C71C7)
        goto LABEL_117;
      v24 = (char *)operator new(v22);
      v19[1] = v24;
      v19[2] = v24;
      v19[3] = &v24[144 * v23];
      do
      {
        *v24 = *v20;
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v24 + 8), (uint64_t)(v20 + 8));
        v24[96] = 0;
        if (v20[96])
        {
          *((_DWORD *)v24 + 25) = *((_DWORD *)v20 + 25);
          v24[96] = 1;
        }
        v25 = *((_QWORD *)v20 + 14);
        *((_QWORD *)v24 + 13) = *((_QWORD *)v20 + 13);
        *((_QWORD *)v24 + 14) = v25;
        v26 = *((_QWORD *)v20 + 15);
        *((_QWORD *)v24 + 15) = v26;
        if (v26)
        {
          v27 = (unint64_t *)(v26 + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        *((_OWORD *)v24 + 8) = *((_OWORD *)v20 + 8);
        v20 += 144;
        v24 += 144;
      }
      while (v20 != v21);
      v19[2] = v24;
    }
    v15 += 32;
    v19 += 4;
  }
  while (v15 != v16);
  *(_QWORD *)(v5 + 32) = v19;
  v6 = v67;
LABEL_25:
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  v29 = (uint64_t *)(v5 + 48);
  *(_DWORD *)(v5 + 80) = *((_DWORD *)v6 + 20);
  prime = v6[7];
  if (prime == 1)
  {
    prime = 2;
LABEL_41:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v5 + 48, prime);
    goto LABEL_42;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(v6[7]);
    v31 = *(int8x8_t *)(v5 + 56);
    v32 = prime >= *(_QWORD *)&v31;
    if (prime > *(_QWORD *)&v31)
      goto LABEL_41;
  }
  else
  {
    v31 = 0;
    v32 = 1;
    if (prime)
      goto LABEL_41;
  }
  if (!v32)
  {
    v33 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 72) / *(float *)(v5 + 80));
    if (*(_QWORD *)&v31 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v31), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
    {
      v33 = std::__next_prime(v33);
    }
    else
    {
      v35 = 1 << -(char)__clz(v33 - 1);
      if (v33 >= 2)
        v33 = v35;
    }
    if (prime <= v33)
      prime = v33;
    if (prime < *(_QWORD *)&v31)
      goto LABEL_41;
  }
LABEL_42:
  v36 = (uint64_t *)v6[8];
  if (!v36)
    goto LABEL_114;
  v37 = (_QWORD *)(v5 + 64);
LABEL_44:
  while (2)
  {
    v38 = v36[15];
    v39 = *(_QWORD *)(v5 + 56);
    if (v39)
    {
      v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
      v40.i16[0] = vaddlv_u8(v40);
      if (v40.u32[0] > 1uLL)
      {
        v2 = v36[15];
        if (v38 >= v39)
          v2 = v38 % v39;
      }
      else
      {
        v2 = (v39 - 1) & v38;
      }
      v41 = *(uint64_t ****)(*v29 + 8 * v2);
      if (v41)
      {
        v42 = *v41;
        if (*v41)
        {
          if (v40.u32[0] < 2uLL)
          {
            while (1)
            {
              v47 = v42[1];
              if (v47 == (uint64_t *)v38)
              {
                if (*((unsigned __int8 *)v42 + 16) == *((unsigned __int8 *)v36 + 16)
                  && *((unsigned __int16 *)v42 + 12) == *((unsigned __int16 *)v36 + 12)
                  && v42[12] == (uint64_t *)v36[12])
                {
                  v48 = v42[4];
                  v49 = (char *)v42[5] - (char *)v48;
                  v50 = (const void *)v36[4];
                  if (v49 == v36[5] - (_QWORD)v50 && !memcmp(v48, v50, v49))
                    goto LABEL_72;
                }
              }
              else if (((unint64_t)v47 & (v39 - 1)) != v2)
              {
                goto LABEL_74;
              }
              v42 = (uint64_t **)*v42;
              if (!v42)
                goto LABEL_74;
            }
          }
          do
          {
            v43 = (unint64_t)v42[1];
            if (v43 == v38)
            {
              if (*((unsigned __int8 *)v42 + 16) == *((unsigned __int8 *)v36 + 16)
                && *((unsigned __int16 *)v42 + 12) == *((unsigned __int16 *)v36 + 12)
                && v42[12] == (uint64_t *)v36[12])
              {
                v44 = v42[4];
                v45 = (char *)v42[5] - (char *)v44;
                v46 = (const void *)v36[4];
                if (v45 == v36[5] - (_QWORD)v46 && !memcmp(v44, v46, v45))
                {
LABEL_72:
                  v36 = (uint64_t *)*v36;
                  if (!v36)
                    goto LABEL_114;
                  goto LABEL_44;
                }
              }
            }
            else
            {
              if (v43 >= v39)
                v43 %= v39;
              if (v43 != v2)
                break;
            }
            v42 = (uint64_t **)*v42;
          }
          while (v42);
        }
      }
    }
LABEL_74:
    v51 = (char *)operator new(0x88uLL);
    *(_QWORD *)v51 = 0;
    *((_QWORD *)v51 + 1) = v38;
    v51[16] = *((_BYTE *)v36 + 16);
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v51 + 24), (uint64_t)(v36 + 3));
    v51[112] = 0;
    if (*((_BYTE *)v36 + 112))
    {
      *((_DWORD *)v51 + 29) = *((_DWORD *)v36 + 29);
      v51[112] = 1;
    }
    *(_OWORD *)(v51 + 120) = *(_OWORD *)(v36 + 15);
    v52 = (float)(unint64_t)(*(_QWORD *)(v5 + 72) + 1);
    v53 = *(float *)(v5 + 80);
    if (!v39 || (float)(v53 * (float)v39) < v52)
    {
      v54 = (v39 & (v39 - 1)) != 0;
      if (v39 < 3)
        v54 = 1;
      v55 = v54 | (2 * v39);
      v56 = vcvtps_u32_f32(v52 / v53);
      if (v55 <= v56)
        v57 = v56;
      else
        v57 = v55;
      if (v57 == 1)
      {
        v57 = 2;
      }
      else if ((v57 & (v57 - 1)) != 0)
      {
        v57 = std::__next_prime(v57);
      }
      v58 = *(int8x8_t *)(v5 + 56);
      if (v57 > *(_QWORD *)&v58)
        goto LABEL_88;
      if (v57 < *(_QWORD *)&v58)
      {
        v59 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 72) / *(float *)(v5 + 80));
        if (*(_QWORD *)&v58 < 3uLL || (v60 = (uint8x8_t)vcnt_s8(v58), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
        {
          v59 = std::__next_prime(v59);
        }
        else
        {
          v61 = 1 << -(char)__clz(v59 - 1);
          if (v59 >= 2)
            v59 = v61;
        }
        if (v57 <= v59)
          v57 = v59;
        if (v57 < *(_QWORD *)&v58)
LABEL_88:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v5 + 48, v57);
      }
      v39 = *(_QWORD *)(v5 + 56);
      if ((v39 & (v39 - 1)) != 0)
      {
        if (v38 >= v39)
          v2 = v38 % v39;
        else
          v2 = v38;
      }
      else
      {
        v2 = (v39 - 1) & v38;
      }
    }
    v62 = *v29;
    v63 = *(_QWORD **)(*v29 + 8 * v2);
    if (v63)
    {
      *(_QWORD *)v51 = *v63;
      goto LABEL_112;
    }
    *(_QWORD *)v51 = *v37;
    *v37 = v51;
    *(_QWORD *)(v62 + 8 * v2) = v37;
    if (*(_QWORD *)v51)
    {
      v64 = *(_QWORD *)(*(_QWORD *)v51 + 8);
      if ((v39 & (v39 - 1)) != 0)
      {
        if (v64 >= v39)
          v64 %= v39;
      }
      else
      {
        v64 &= v39 - 1;
      }
      v63 = (_QWORD *)(*v29 + 8 * v64);
LABEL_112:
      *v63 = v51;
    }
    ++*(_QWORD *)(v5 + 72);
    v36 = (uint64_t *)*v36;
    if (v36)
      continue;
    break;
  }
LABEL_114:
  v4 = (md::SceneTileSet *)v68;
  v65 = v68[12];
  v68[12] = (gdc::LayerDataCollector *)v5;
  if (v65)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v65);
    MEMORY[0x1A1AF4E00]();
  }
  return v4;
}

void sub_19F616528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void **v10;
  void **v11;
  gdc::LayerDataCollector *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;

  v13 = (gdc::LayerDataCollector *)a10[12];
  a10[12] = 0;
  if (v13)
  {
    gdc::LayerDataCollector::~LayerDataCollector(v13);
    MEMORY[0x1A1AF4E00]();
  }
  v14 = (_QWORD *)a10[9];
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *v11;
  *v11 = 0;
  if (v16)
    operator delete(v16);
  v17 = (_QWORD *)a10[3];
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *v10;
  *v10 = 0;
  if (v19)
    operator delete(v19);
  _Unwind_Resume(exception_object);
}

void ggl::GlyphWithNormalHalo::DefaultPipelineState::~DefaultPipelineState(ggl::GlyphWithNormalHalo::DefaultPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::GlyphWithNormalHalo::DefaultPipelineState::DefaultPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  unsigned __int8 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  char v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  int8x16_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int16x8_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int32x4_t v75;
  int8x16_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  _OWORD *v98;
  ggl::GlyphWithNormalHaloShader *v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  _QWORD *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[28];

  if ((v15 & 1) == 0)
  {
    v98 = a4;
    v106 = a2;
    v107 = a3;
    a2 = v106;
    a3 = v107;
    a4 = v98;
    if ((_DWORD)v99)
    {
      if ((v100 & 1) == 0)
      {
        if ((_DWORD)v99)
        {
          if ((v103 & 1) == 0
          {
            if ((v105 & 1) == 0
            {
              ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Glyph::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43D90 = 1;
          }
          ggl::GlyphWithNormalHalo::DefaultPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Glyph::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57E7D8 = &ggl::GlyphWithNormalHalo::pipelineDataDefaultPipelineDeviceStructs(void)::ref;
          qword_1EE57E7E0 = 0;
          if ((v104 & 1) == 0
          {
            ggl::GlyphWithNormalHalo::pipelineDataDefaultPipelineConstantStructs(void)::ref = (uint64_t)ggl::Label::ViewInScreenSpace::reflection(void)::reflection;
            unk_1EE57E810 = ggl::Label::DeviceBufferTextureSize::reflection(void)::reflection;
            qword_1EE57E818 = (uint64_t)ggl::Glyph::Options::reflection(void)::reflection;
            unk_1EE57E820 = ggl::Label::ViewCommon::reflection(void)::reflection;
          }
          qword_1EE57E7E8 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineDataDefaultPipelineConstantStructs(void)::ref;
          unk_1EE57E7F0 = xmmword_19FFB2F50;
        }
      }
      ggl::GlyphWithNormalHalo::DefaultPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::GlyphWithNormalHalo::DefaultPipelineSetup::typedReflection(void)::ref;
      ggl::GlyphWithNormalHaloShader::typedReflection(v99);
      qword_1ECE317D0 = (uint64_t)&ggl::GlyphWithNormalHaloShader::typedReflection(void)::ref;
      if ((v101 & 1) == 0
      {
        ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57E8F0 = 0;
        qword_1EE57E8F8 = (uint64_t)"";
        dword_1EE57E900 = 0;
        qword_1EE57E908 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineAttributeBinding_0(void)::attr;
        unk_1EE57E910 = 8;
      }
      qword_1ECE317D8 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineAttributeStructBinding(void)::attr;
      unk_1ECE317E0 = 1;
      qword_1ECE317E8 = 0;
      unk_1ECE317F0 = 2;
      qword_1ECE317F8 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31800 = 0;
      if ((v102 & 1) == 0
      {
        ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57E830 = 0;
        qword_1EE57E838 = (uint64_t)"viewInScreenSpace";
        dword_1EE57E840 = 3;
        qword_1EE57E848 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantViewInScreenSpaceBinding(void)::reflection;
        *(int64x2_t *)algn_1EE57E850 = vdupq_n_s64(1uLL);
        qword_1EE57E860 = 1;
        unk_1EE57E868 = "floatBufferTextureSize";
        dword_1EE57E870 = 3;
        qword_1EE57E878 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantFloatBufferTextureSizeBinding(void)::reflection;
        unk_1EE57E880 = xmmword_19FFB3C60;
        qword_1EE57E890 = 2;
        unk_1EE57E898 = "glyphOptions";
        dword_1EE57E8A0 = 3;
        qword_1EE57E8A8 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantGlyphOptionsBinding(void)::reflection;
        *(_OWORD *)algn_1EE57E8B0 = xmmword_19FFB38C0;
        qword_1EE57E8C0 = 3;
        unk_1EE57E8C8 = "viewCommon";
        dword_1EE57E8D0 = 3;
        qword_1EE57E8D8 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantViewCommonBinding(void)::reflection;
        unk_1EE57E8E0 = 1;
      }
      qword_1ECE31808 = (uint64_t)&ggl::GlyphWithNormalHalo::pipelineStateDefaultPipelineConstantStructBinding(void)::ref;
      unk_1ECE31810 = 4;
      a4 = v98;
      a2 = v106;
      a3 = v107;
    }
  }
  v16 = *a2;
  v17 = (std::__shared_weak_count *)a2[1];
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  *(_OWORD *)v110 = *(_OWORD *)a3;
  *(_OWORD *)&v110[12] = *(_OWORD *)(a3 + 12);
  v20 = *(_OWORD *)(a3 + 28);
  v21 = *(_BYTE *)(a3 + 44);
  v108 = *a4;
  v109 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::GlyphWithNormalHalo::DefaultPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  if (v17)
  {
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v108;
  *(_OWORD *)(a1 + 272) = v109;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v110;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v110[12];
  *(_OWORD *)(a1 + 92) = v20;
  *(_BYTE *)(a1 + 108) = v21;
  if (v17)
  {
    v24 = (unint64_t *)&v17->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = 0;
  *(_BYTE *)(a1 + 306) = a6;
  *(_BYTE *)(a1 + 307) = a7;
  *(_BYTE *)(a1 + 308) = a8;
  *(_BYTE *)(a1 + 309) = a9;
  *(_BYTE *)(a1 + 310) = a10;
  v26 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v27 = vmovl_high_s8(v26);
  v28 = vmovl_s16(*(int16x4_t *)v27.i8);
  v29.i64[0] = v28.u32[0];
  v29.i64[1] = v28.u32[1];
  v30 = v29;
  v31 = vmovl_s8(*(int8x8_t *)v26.i8);
  v32 = vmovl_s16(*(int16x4_t *)v31.i8);
  v29.i64[0] = v32.u32[0];
  v29.i64[1] = v32.u32[1];
  v33 = v29;
  v34 = vmovl_high_s16(v27);
  v29.i64[0] = v34.u32[0];
  v29.i64[1] = v34.u32[1];
  v35 = v29;
  v36 = vmovl_high_s16(v31);
  v29.i64[0] = v36.u32[0];
  v29.i64[1] = v36.u32[1];
  v37 = v29;
  v29.i64[0] = v28.u32[2];
  v29.i64[1] = v28.u32[3];
  v38 = v29;
  v29.i64[0] = v32.u32[2];
  v29.i64[1] = v32.u32[3];
  v39 = v29;
  v29.i64[0] = v34.u32[2];
  v29.i64[1] = v34.u32[3];
  v40 = v29;
  v29.i64[0] = v36.u32[2];
  v29.i64[1] = v36.u32[3];
  v41 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v29);
  v42 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v40);
  v43 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v39);
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v35);
  v45 = vceqzq_s8(*(int8x16_t *)(a1 + 320));
  v46 = vmovl_high_s8(v45);
  v47 = vmovl_s16(*(int16x4_t *)v46.i8);
  v29.i64[0] = v47.u32[0];
  v29.i64[1] = v47.u32[1];
  v48 = v29;
  v49 = vmovl_s8(*(int8x8_t *)v45.i8);
  *(_QWORD *)a1 = &off_1E42BA908;
  v50 = vmovl_s16(*(int16x4_t *)v49.i8);
  v29.i64[0] = v50.u32[0];
  v29.i64[1] = v50.u32[1];
  v51 = v29;
  v52 = vmovl_high_s16(v46);
  v29.i64[0] = v52.u32[0];
  v29.i64[1] = v52.u32[1];
  v53 = v29;
  v54 = vmovl_high_s16(v49);
  v29.i64[0] = v54.u32[0];
  v29.i64[1] = v54.u32[1];
  v55 = v29;
  v29.i64[0] = v47.u32[2];
  v29.i64[1] = v47.u32[3];
  v56 = v29;
  v29.i64[0] = v50.u32[2];
  v29.i64[1] = v50.u32[3];
  v57 = v29;
  v29.i64[0] = v52.u32[2];
  v29.i64[1] = v52.u32[3];
  v58 = v29;
  v29.i64[0] = v54.u32[2];
  v29.i64[1] = v54.u32[3];
  v59 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v58);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v48), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v30));
  v61 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v51), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v33));
  v62 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v53), v44);
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v55), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v37));
  v64 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v56), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v38));
  v65 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v57), v43);
  v66 = vorrq_s8(v59, v42);
  v67 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v29), v41);
  v68 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v69 = vmovl_s8(*(int8x8_t *)v68.i8);
  v70 = vmovl_high_s16(v69);
  v29.i64[0] = v70.i32[2];
  v29.i64[1] = v70.i32[3];
  v71 = v29;
  v72 = vmovl_high_s8(v68);
  v73 = vmovl_high_s16(v72);
  v29.i64[0] = v73.i32[2];
  v29.i64[1] = v73.i32[3];
  v74 = v29;
  v75 = vmovl_s16(*(int16x4_t *)v69.i8);
  v29.i64[0] = v75.i32[2];
  v29.i64[1] = v75.i32[3];
  v76 = v29;
  v77 = vmovl_s16(*(int16x4_t *)v72.i8);
  v29.i64[0] = v77.i32[2];
  v29.i64[1] = v77.i32[3];
  v78 = v29;
  v29.i64[0] = v70.i32[0];
  v29.i64[1] = v70.i32[1];
  v79 = v29;
  v29.i64[0] = v73.i32[0];
  v29.i64[1] = v73.i32[1];
  v80 = v29;
  v29.i64[0] = v75.i32[0];
  v29.i64[1] = v75.i32[1];
  v81 = v29;
  v29.i64[0] = v77.i32[0];
  v29.i64[1] = v77.i32[1];
  v82 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v29);
  v83 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v84 = vmovl_high_s8(v83);
  v85 = vmovl_s16(*(int16x4_t *)v84.i8);
  v29.i64[0] = v85.i32[0];
  v29.i64[1] = v85.i32[1];
  v86 = v29;
  v87 = vmovl_s8(*(int8x8_t *)v83.i8);
  v88 = vmovl_s16(*(int16x4_t *)v87.i8);
  v29.i64[0] = v88.i32[0];
  v29.i64[1] = v88.i32[1];
  v89 = v29;
  v90 = vmovl_high_s16(v84);
  v29.i64[0] = v90.i32[0];
  v29.i64[1] = v90.i32[1];
  v91 = v29;
  v92 = vmovl_high_s16(v87);
  v29.i64[0] = v92.i32[0];
  v29.i64[1] = v92.i32[1];
  v93 = v29;
  v29.i64[0] = v85.i32[2];
  v29.i64[1] = v85.i32[3];
  v94 = v29;
  v29.i64[0] = v88.i32[2];
  v29.i64[1] = v88.i32[3];
  v95 = v29;
  v29.i64[0] = v90.i32[2];
  v29.i64[1] = v90.i32[3];
  v96 = v29;
  v29.i64[0] = v92.i32[2];
  v29.i64[1] = v92.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v89), vbicq_s8((int8x16_t)xmmword_19FFB3170, v81)), v61), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v86), v82), v60)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v93), vbicq_s8((int8x16_t)xmmword_19FFB3190, v79)), v63), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v91), vbicq_s8((int8x16_t)xmmword_19FFB3180, v80)),
                                               v62))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v95), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v76)), v65), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v94), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v78)), v64)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v29), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v71)), v67), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v96),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v74)),
                                               v66)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::GlyphWithNormalHalo::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::GlyphWithNormalHalo::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::View::~View(altitude::View *this)
{
  *((_QWORD *)this + 5) = &off_1E42C3688;
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *((_QWORD *)this + 5) = &off_1E42C3688;
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'altitude::View::~View(altitude::View *this)
{
  *(_QWORD *)this = &off_1E42C3688;
  *((_QWORD *)this - 5) = off_1E42C34D0;
  if (*((char *)this - 9) < 0)
    operator delete(*((void **)this - 4));
}

{
  *((_QWORD *)this - 5) = off_1E42C34D0;
  *(_QWORD *)this = &off_1E42C3688;
  if (*((char *)this - 9) < 0)
    operator delete(*((void **)this - 4));
  JUMPOUT(0x1A1AF4E00);
}

{
  *((_QWORD *)this - 8) = &off_1E42C3688;
  *((_QWORD *)this - 13) = off_1E42C34D0;
  if (*((char *)this - 73) < 0)
    operator delete(*((void **)this - 12));
}

{
  *((_QWORD *)this - 13) = off_1E42C34D0;
  *((_QWORD *)this - 8) = &off_1E42C3688;
  if (*((char *)this - 73) < 0)
    operator delete(*((void **)this - 12));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::View::View(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_1E42C34D0;
  v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 1008) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = &unk_1E42C6818;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 200) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 944) = xmmword_19FFB3C70;
  *(_OWORD *)(a1 + 960) = xmmword_19FFB32B0;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = _Q1;
  *(_QWORD *)(a1 + 288) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = _Q1;
  *(_QWORD *)(a1 + 416) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 456) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 496) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 976) = xmmword_19FFB3310;
  *(_OWORD *)(a1 + 992) = xmmword_19FFB3C80;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_QWORD *)(a1 + 1032) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1072) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1112) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1152) = _Q1;
  *(_QWORD *)(a1 + 1200) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1240) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1280) = 0x3FF0000000000000;
  *(_QWORD *)a1 = off_1E42C67E0;
  *(_QWORD *)(a1 + 96) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 104) = &unk_1E42C6848;
  *(_BYTE *)(a1 + 1292) = 0;
  *(_DWORD *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1296) = 2;
  *(_OWORD *)(a1 + 1304) = xmmword_19FFB3C90;
  *(_QWORD *)(a1 + 1388) = 0xFF00000000;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  return a1;
}

double altitude::View::updatePoints(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  __double2 v6;
  double v7;
  double v8;
  __double2 v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double result;

  v4 = a2[1];
  v5 = a2[2];
  v6 = __sincos_stret(*a2);
  v7 = 6378137.0 / sqrt(v6.__sinval * v6.__sinval * -0.00669437999 + 1.0);
  v8 = (v7 + v5) * v6.__cosval;
  v9 = __sincos_stret(v4);
  v10 = v8 * v9.__cosval;
  v11 = v8 * v9.__sinval;
  v12 = (v5 + v7 * 0.99330562) * v6.__sinval;
  v13 = *(_QWORD *)(a1 + 40);
  a1 += 40;
  v14 = (double *)(*(uint64_t (**)(uint64_t))(v13 + 24))(a1);
  v15 = v14[4];
  v16 = v14[5];
  v17 = v14[6];
  v19 = v14[2];
  v18 = v14[3];
  v20 = v14[1];
  v21 = -(*v14 * v16 - v19 * v18);
  v22 = -(v20 * v18 - *v14 * v15);
  v23 = -(v19 * v15 - v20 * v16) - (v19 * v15 - v20 * v16);
  v24 = v21 + v21;
  v25 = v22 + v22;
  v26 = -(v12 * v15 - v11 * v16) - (v12 * v15 - v11 * v16);
  v27 = -(v10 * v16 - v12 * v18) - (v10 * v16 - v12 * v18);
  v28 = -(v11 * v18 - v10 * v15) - (v11 * v18 - v10 * v15);
  v29 = v10 - *v14 + v26 * v17 + v27 * v16 + v25 * v15 - (v28 * v15 + v23 * v17 + v24 * v16);
  v30 = v11 - v20 + v27 * v17 + v28 * v18 + v23 * v16 - (v26 * v16 + v24 * v17 + v25 * v18);
  v31 = v12 - v19 + v26 * v15 + v28 * v17 + v24 * v18 - (v27 * v18 + v23 * v15 + v25 * v17);
  *(double *)(a1 + 1360) = v29;
  *(double *)(a1 + 1368) = v30;
  *(double *)(a1 + 1376) = v31;
  *(double *)(a1 + 1384) = v29;
  *(double *)(a1 + 1392) = v30;
  *(double *)(a1 + 1400) = v31;
  *(_OWORD *)(a1 + 1288) = *(_OWORD *)a2;
  GEOMetersPerDegreeAtLatitude();
  *(float *)&v32 = v32 * 57.2957795;
  *(_DWORD *)(a1 + 1304) = LODWORD(v32);
  v33 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  result = sqrt(*v33 * *v33 + v33[1] * v33[1] + v33[2] * v33[2]) - sqrt(v10 * v10 + v11 * v11 + v12 * v12);
  *(double *)(a1 + 1408) = result;
  return result;
}

void md::LabelFeatureCreationParams::~LabelFeatureCreationParams(md::LabelFeatureCreationParams *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;

  if (a2)
  {
    v3 = result;
    std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(v3, a2[1]);
    v4 = (std::__shared_weak_count *)a2[5];
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 48);
  }
  return result;
}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_1,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_1,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D4918;
  return result;
}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_0,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_0,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D48D0;
  return result;
}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_0,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<geo::codec::VectorTile> const&,md::LabelTileType,std::shared_ptr<md::LabelManager> const&,BOOL,std::shared_ptr<md::LabelSelectedFeatureInfo>,md::mun::MuninMetadata *)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D48D0;
}

void std::__shared_ptr_emplace<md::LabelSourceTile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelSourceTile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelSourceTile>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void md::LabelTile::LabelTile(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  double v31;
  NSObject *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unsigned __int8 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned __int8 v60;
  std::__shared_weak_count *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint8x8_t v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  std::mutex *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  unint64_t v101;
  _QWORD *v102;
  float v103;
  float v104;
  _BOOL8 v105;
  unint64_t v106;
  unint64_t v107;
  size_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  size_t v113;
  size_t v114;
  size_t v115;
  _QWORD *k;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint8x8_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  size_t v125;
  uint64_t v126;
  _QWORD *v127;
  float *v128;
  unint64_t v129;
  unsigned __int8 v130;
  uint64_t v131;
  unsigned __int8 v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  void **v140;
  std::__shared_weak_count_vtbl *v141;
  __int128 v142;
  uint64_t v143;
  char v144;
  unsigned __int8 v145;
  BOOL v146;
  size_t v147;
  _QWORD *v148;
  uint64_t v149;
  int *v150;
  int v151;
  uint64_t v152;
  int *v153;
  int v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t i;
  unsigned __int8 v166;
  unsigned __int8 v167;
  uint64_t v168;
  void *v169;
  id v170;
  id v171;
  id v172;
  id v173;
  const char *v174;
  id v175;
  _QWORD *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint8x8_t v189;
  _QWORD *v190;
  _QWORD *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  float v199;
  float v200;
  _BOOL8 v201;
  unint64_t v202;
  unint64_t v203;
  size_t prime;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  size_t v209;
  size_t v210;
  size_t v211;
  _QWORD *j;
  size_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint8x8_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  size_t v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  uint64_t **v228;
  unint64_t v229;
  unint64_t *p_shared_weak_owners;
  unint64_t v231;
  uint64_t *v232;
  uint64_t **v233;
  unint64_t v234;
  uint64_t *v235;
  _QWORD *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  __int128 v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  geo::read_write_lock *v285;
  const char *v286;
  malloc_zone_t *zone;
  uint64_t v288;
  geo::read_write_lock *v289;
  const char *v290;
  malloc_zone_t *v291;
  uint64_t v292;
  geo::read_write_lock *v293;
  const char *v294;
  malloc_zone_t *v295;
  std::__shared_weak_count *v296;
  unint64_t *p_shared_owners;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  _QWORD *v319;
  uint64_t v320;
  _QWORD **v321;
  uint64_t **v323;
  uint64_t v324;
  uint64_t *v325;
  _QWORD *v326;
  uint64_t v327;
  __int16 v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  _BYTE v332[27];
  uint64_t v333;
  std::__shared_weak_count *v334;
  uint8_t buf[8];
  __int128 v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  _BYTE v340[27];
  uint64_t v341;
  std::__shared_weak_count *v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  char *v345;
  char *v346;
  unint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  __int128 v350;
  std::__shared_weak_count *v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  id v355;
  id v356;
  __int128 v357;
  std::__shared_weak_count *v358;
  uint64_t v359;
  __int128 v360;
  uint64_t v361;
  uint64_t v362;
  _QWORD v363[3];
  _QWORD *v364;
  _QWORD v365[3];
  _QWORD *v366;
  _QWORD v367[3];
  _QWORD *v368;
  uint64_t v369;

  v7 = a1;
  v369 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = *a4;
  v8 = a4[1];
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = operator new(0x38uLL);
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0;
  *v11 = &off_1E42DB400;
  v13 = *a3;
  v12 = a3[1];
  v11[4] = 0;
  v11[5] = v13;
  v11[6] = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 24) = v11 + 3;
  *(_QWORD *)(v7 + 32) = v11;
  {
    v304 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v304, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v17 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v7 + 80) = 0;
  v18 = v7 + 80;
  *(_QWORD *)(v7 + 56) = v17;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 40) = v7 + 48;
  if ((v17 & 1) == 0)
  {
    v18 = v7 + 80;
    if (v305)
    {
      v306 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v306, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v18 = v7 + 80;
    }
  }
  v19 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v7 + 112) = 0;
  v20 = v7 + 112;
  *(_QWORD *)(v7 + 88) = v19;
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 72) = v18;
  if ((v19 & 1) == 0)
  {
    v20 = v7 + 112;
    if (v307)
    {
      v308 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v308, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v20 = v7 + 112;
    }
  }
  v21 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v7 + 144) = 0;
  v22 = v7 + 144;
  *(_QWORD *)(v7 + 120) = v21;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 104) = v20;
  if ((v21 & 1) == 0)
  {
    v22 = v7 + 144;
    if (v309)
    {
      v310 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v310, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v22 = v7 + 144;
    }
  }
  v23 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v7 + 176) = 0;
  v24 = v7 + 176;
  *(_QWORD *)(v7 + 152) = v23;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 136) = v22;
  if ((v23 & 1) == 0)
  {
    v24 = v7 + 176;
    if (v311)
    {
      v312 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v312, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v24 = v7 + 176;
    }
  }
  v25 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v7 + 208) = 0;
  v26 = v7 + 208;
  *(_QWORD *)(v7 + 184) = v25;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 168) = v24;
  if ((v25 & 1) == 0)
  {
    v26 = v7 + 208;
    if (v313)
    {
      v314 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v314, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v26 = v7 + 208;
    }
  }
  v27 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 216) = v27;
  *(_QWORD *)(v7 + 224) = 0;
  *(_QWORD *)(v7 + 200) = v26;
  {
    v315 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v315, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *(_QWORD *)(v7 + 248) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v7 + 256) = 0;
  v323 = (uint64_t **)(v7 + 240);
  *(_QWORD *)(v7 + 232) = v7 + 240;
  *(_QWORD *)(v7 + 264) = 0;
  *(_QWORD *)(v7 + 272) = 0;
  *(_DWORD *)(v7 + 280) = 0;
  *(_WORD *)(v7 + 288) = *(_WORD *)a2;
  *(_QWORD *)(v7 + 292) = *(_QWORD *)(a2 + 4);
  v28 = 1 << *(_BYTE *)(a2 + 1);
  v29 = 1.0 / (double)v28;
  v30 = v29 * (double)*(int *)(a2 + 8);
  v31 = v29 * (double)(v28 + ~*(_DWORD *)(a2 + 4));
  *(double *)(v7 + 312) = v30;
  *(double *)(v7 + 320) = v31;
  *(double *)(v7 + 328) = v30 + v29;
  *(double *)(v7 + 336) = v31 + v29;
  v366 = v365;
  v363[0] = &off_1E42D4888;
  v364 = v363;
  v365[0] = &off_1E42D4840;
  v368 = v367;
  v367[0] = &off_1E42D4888;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v32 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v32))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v32, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsTileDecode", (const char *)&unk_1A0189141, buf, 2u);
  }

  v33 = v364;
  if (v364 == v363)
  {
    v34 = 4;
    v33 = v363;
  }
  else
  {
    if (!v364)
      goto LABEL_23;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_23:
  v321 = (_QWORD **)(v7 + 232);
  v35 = v366;
  if (v366 == v365)
  {
    v36 = 4;
    v35 = v365;
    goto LABEL_27;
  }
  if (v366)
  {
    v36 = 5;
LABEL_27:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  v37 = *(_QWORD *)(*a4 + 288);
  md::LabelFeaturePool::prepareAddFeaturesForTile(v37, (unint64_t **)(v7 + 24));
  v338 = 0uLL;
  v340[16] = 0;
  *(_DWORD *)&v340[20] = 0;
  *(_WORD *)&v340[24] = 256;
  v340[26] = 0;
  v341 = 0;
  v342 = 0;
  v38 = *(_OWORD *)(v7 + 328);
  v339 = *(_OWORD *)(v7 + 312);
  *(_OWORD *)v340 = v38;
  *(_QWORD *)buf = *a4;
  v337 = *(_QWORD *)(v7 + 304);
  v336 = *(_OWORD *)(v7 + 288);
  v39 = atomic_load((unsigned __int8 *)(*(_QWORD *)buf + 3392));
  v340[24] = v39 & 1;
  v340[16] = *(_BYTE *)(v7 + 289);
  v40 = atomic_load((unsigned __int8 *)(*a4 + 3622));
  if ((v40 & 1) != 0)
  {
    v42 = *(_QWORD *)(*a3 + 24);
    v41 = *(_QWORD *)(*a3 + 32);
    if (v42 != v41)
    {
      v317 = *(_QWORD *)buf;
      v327 = *(_QWORD *)buf;
      v328 = v336;
      v329 = *(_QWORD *)((char *)&v336 + 4);
      v330 = v338;
      v331 = v339;
      *(_OWORD *)v332 = *(_OWORD *)v340;
      *(_OWORD *)&v332[11] = *(_OWORD *)&v340[11];
      v333 = v341;
      v334 = v342;
      std::mutex::lock((std::mutex *)v37);
      v43 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(v37 + 456), *a3);
      if (v43)
      {
        v44 = v43;
        std::mutex::unlock((std::mutex *)v37);
        v345 = 0;
        v346 = 0;
        v347 = 0;
        {
          v316 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v316, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v348 = mdm::Allocator::instance(void)::alloc;
        v46 = v345;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v347 - (_QWORD)v345) >> 3) <= 0x1F)
        {
          v47 = v346;
          v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
          v50 = v345;
          v49 = v346;
          v51 = (char *)(v48 + 24 * ((v47 - v46) / 24));
          if (v346 != v345)
          {
            do
            {
              v52 = *(_OWORD *)(v49 - 24);
              *((_QWORD *)v51 - 1) = *((_QWORD *)v49 - 1);
              *(_OWORD *)(v51 - 24) = v52;
              v51 -= 24;
              v49 -= 24;
            }
            while (v49 != v50);
            v49 = v345;
          }
          v345 = v51;
          v346 = (char *)(v48 + 24 * ((v47 - v46) / 24));
          v53 = v347;
          v347 = v48 + 768;
          if (v49)
            (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v348 + 40))(v348, v49, v53 - (_QWORD)v49);
        }
        v54 = *(_QWORD *)(*a3 + 24);
        std::mutex::lock((std::mutex *)v37);
        if (v41 == v42)
        {
LABEL_463:
          if (v345 != v346)
          {
            md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v317 + 296), &v345, 1u, 1, *(_QWORD *)(*(_QWORD *)(v317 + 152) + 32));
            v346 = v345;
            std::mutex::unlock((std::mutex *)v37);
            if (!v37)
              goto LABEL_489;
            std::mutex::lock((std::mutex *)v37);
          }
          std::mutex::unlock((std::mutex *)v37);
          if (v345)
          {
            v346 = v345;
            (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v348 + 40))(v348, v345, v347 - (_QWORD)v345);
          }
          v296 = v334;
          if (v334)
          {
            p_shared_owners = (unint64_t *)&v334->__shared_owners_;
            do
              v298 = __ldaxr(p_shared_owners);
            while (__stlxr(v298 - 1, p_shared_owners));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
            }
          }
          goto LABEL_475;
        }
        if ((unint64_t)((v41 - v42) / 56) <= 1)
          v55 = 1;
        else
          v55 = (v41 - v42) / 56;
        v324 = 0;
        v319 = (_QWORD *)(v37 + 312);
        v320 = v55;
        v318 = v44 + 34;
LABEL_44:
        v349 = 0;
        {
          v281 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v281, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
        v349 = (_QWORD *)v57;
        *(_OWORD *)(v57 + 16) = 0u;
        v58 = v57 + 16;
        *(_QWORD *)v57 = 1;
        *(_QWORD *)(v57 + 8) = &off_1E4292AF8;
        *(_OWORD *)(v57 + 32) = 0u;
        v59 = (_QWORD *)(v57 + 32);
        *(_QWORD *)(v57 + 48) = 0;
        {
          v282 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v282, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v57 + 56) = mdm::Allocator::instance(void)::alloc;
        v61 = *(std::__shared_weak_count **)(v54 + 8);
        if (v61 && (v61 = std::__shared_weak_count::lock(v61)) != 0)
          v62 = *(_QWORD *)v54;
        else
          v62 = 0;
        *(_QWORD *)(v57 + 64) = v54;
        *(_QWORD *)(v57 + 72) = v62;
        *(_QWORD *)(v57 + 80) = v61;
        *(_QWORD *)(v57 + 88) = 0;
        *(_BYTE *)(v57 + 96) = 0;
        v63 = *(unint64_t **)(v57 + 40);
        v64 = *(_QWORD *)(v57 + 48);
        if ((unint64_t)v63 >= v64)
        {
          v68 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v63 - *v59) >> 3);
          v69 = v68 + 1;
          if (v68 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((uint64_t)(v64 - *v59) >> 3) > v69)
            v69 = 0x5555555555555556 * ((uint64_t)(v64 - *v59) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *v59) >> 3) >= 0x555555555555555)
            v70 = 0xAAAAAAAAAAAAAAALL;
          else
            v70 = v69;
          if (v70)
          {
            v71 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v57 + 56) + 16))(*(_QWORD *)(v57 + 56), 24 * v70, 8);
            v72 = v71 + 24 * v68;
            v73 = v71 + 24 * v70;
            if (v71)
            {
              *(_OWORD *)v72 = *(_OWORD *)(v57 + 64);
              v74 = *(_QWORD *)(v57 + 80);
              *(_QWORD *)(v71 + 24 * v68 + 16) = v74;
              if (v74)
              {
                v75 = (unint64_t *)(v74 + 8);
                do
                  v76 = __ldxr(v75);
                while (__stxr(v76 + 1, v75));
              }
            }
          }
          else
          {
            v73 = 0;
            v72 = 8 * (((uint64_t)v63 - *v59) >> 3);
          }
          v67 = (_QWORD *)(v72 + 24);
          v77 = *(_QWORD *)(v57 + 32);
          v58 = *(_QWORD *)(v57 + 40);
          if (v58 == v77)
          {
            *(_QWORD *)(v57 + 32) = v72;
            *(_QWORD *)(v57 + 40) = v67;
            v80 = *(_QWORD *)(v57 + 48);
            *(_QWORD *)(v57 + 48) = v73;
          }
          else
          {
            do
            {
              v78 = *(_OWORD *)(v58 - 24);
              v58 -= 24;
              *(_OWORD *)(v72 - 24) = v78;
              v72 -= 24;
              *(_QWORD *)(v72 + 16) = *(_QWORD *)(v58 + 16);
              *(_QWORD *)(v58 + 8) = 0;
              *(_QWORD *)(v58 + 16) = 0;
            }
            while (v58 != v77);
            v58 = *(_QWORD *)(v57 + 32);
            v79 = *(_QWORD *)(v57 + 40);
            *(_QWORD *)(v57 + 32) = v72;
            *(_QWORD *)(v57 + 40) = v67;
            v80 = *(_QWORD *)(v57 + 48);
            *(_QWORD *)(v57 + 48) = v73;
            while (v79 != v58)
            {
              v81 = *(std::__shared_weak_count **)(v79 - 8);
              if (v81)
              {
                v82 = (unint64_t *)&v81->__shared_owners_;
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
              v79 -= 24;
            }
          }
          if (v58)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v57 + 56) + 40))(*(_QWORD *)(v57 + 56), v58, v80 - v58);
        }
        else
        {
          if (v63)
          {
            *v63 = v54;
            v63[1] = v62;
            v63[2] = (unint64_t)v61;
            if (v61)
            {
              v65 = (unint64_t *)&v61->__shared_owners_;
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
            }
          }
          v67 = v63 + 3;
        }
        *(_QWORD *)(v57 + 40) = v67;
        v349 = (_QWORD *)v57;
        v84 = *(unsigned __int8 *)(v57 + 96);
        v85 = *(_QWORD *)(*(_QWORD *)(v57 + 64) + 16);
        v86 = (v85 + (v84 << 6) + (v84 >> 2) - 0x61C8864680B583EBLL) ^ v84;
        v87 = *(_QWORD *)(v37 + 296);
        v326 = (_QWORD *)v54;
        if (v87)
        {
          v88 = (uint8x8_t)vcnt_s8((int8x8_t)v87);
          v88.i16[0] = vaddlv_u8(v88);
          if (v88.u32[0] > 1uLL)
          {
            v58 = (v85 + (v84 << 6) + (v84 >> 2) - 0x61C8864680B583EBLL) ^ v84;
            if (v86 >= v87)
              v58 = v86 % v87;
          }
          else
          {
            v58 = v86 & (v87 - 1);
          }
          v89 = *(_QWORD **)(*(_QWORD *)(v37 + 288) + 8 * v58);
          if (v89)
          {
            v90 = (_QWORD *)*v89;
            if (*v89)
            {
              if (v88.u32[0] < 2uLL)
              {
                while (1)
                {
                  v94 = v90[1];
                  if (v94 == v86)
                  {
                    v92 = (_QWORD *)v90[2];
                    v95 = v92 + 1;
                    if (!v92)
                      v95 = 0;
                    if (*((unsigned __int8 *)v95 + 88) == (_DWORD)v84 && *(_QWORD *)(v95[7] + 16) == v85)
                      goto LABEL_108;
                  }
                  else if ((v94 & (v87 - 1)) != v58)
                  {
                    goto LABEL_116;
                  }
                  v90 = (_QWORD *)*v90;
                  if (!v90)
                    goto LABEL_116;
                }
              }
              do
              {
                v91 = v90[1];
                if (v91 == v86)
                {
                  v92 = (_QWORD *)v90[2];
                  v93 = v92 + 1;
                  if (!v92)
                    v93 = 0;
                  if (*((unsigned __int8 *)v93 + 88) == (_DWORD)v84 && *(_QWORD *)(v93[7] + 16) == v85)
                  {
LABEL_108:
                    v332[25] = 0;
                    if (v92)
                      ++*v92;
                    geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>::release(&v349);
                    v96 = (_QWORD *)v90[2];
                    v349 = v96;
                    if (v96)
                      v97 = v96 + 1;
                    else
                      v97 = 0;
                    v98 = (std::mutex *)(v97[1] + 8);
                    std::mutex::lock(v98);
                    v99 = *(std::__shared_weak_count **)(v54 + 8);
                    if (v99)
                    {
                      v100 = std::__shared_weak_count::lock(v99);
                      if (v100)
                        v101 = *(_QWORD *)v54;
                      else
                        v101 = 0;
                    }
                    else
                    {
                      v100 = 0;
                      v101 = 0;
                    }
                    *(_QWORD *)&v357 = v54;
                    *((_QWORD *)&v357 + 1) = v101;
                    v358 = v100;
                    v350 = 0uLL;
                    v257 = (unint64_t *)v97[4];
                    v258 = v97[5];
                    if ((unint64_t)v257 < v258)
                    {
                      if (v257)
                      {
                        *v257 = v54;
                        v257[1] = v101;
                        v257[2] = (unint64_t)v100;
                        *((_QWORD *)&v357 + 1) = 0;
                        v358 = 0;
                        v100 = 0;
                      }
                      v97[4] = v257 + 3;
                      if (!v100)
                        goto LABEL_435;
LABEL_431:
                      v275 = (unint64_t *)&v100->__shared_owners_;
                      do
                        v276 = __ldaxr(v275);
                      while (__stlxr(v276 - 1, v275));
                      if (!v276)
                      {
                        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                        std::__shared_weak_count::__release_weak(v100);
                      }
LABEL_435:
                      v277 = (std::__shared_weak_count *)*((_QWORD *)&v350 + 1);
                      if (*((_QWORD *)&v350 + 1))
                      {
                        v278 = (unint64_t *)(*((_QWORD *)&v350 + 1) + 8);
                        do
                          v279 = __ldaxr(v278);
                        while (__stlxr(v279 - 1, v278));
                        if (!v279)
                        {
                          ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                          std::__shared_weak_count::__release_weak(v277);
                        }
                      }
                      std::mutex::unlock(v98);
                      v181 = v349;
                      v280 = v349 + 1;
                      if (!v349)
                        v280 = 0;
                      md::LabelLineStore::addOverlayLine(*(_QWORD *)(v280[1] + 192), (_QWORD *)v54, (uint64_t)&v327);
                      goto LABEL_244;
                    }
                    v259 = v97[3];
                    v260 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v257 - v259) >> 3);
                    v261 = v260 + 1;
                    if (v260 + 1 > 0xAAAAAAAAAAAAAAALL)
                      abort();
                    if (0x5555555555555556 * ((uint64_t)(v258 - v259) >> 3) > v261)
                      v261 = 0x5555555555555556 * ((uint64_t)(v258 - v259) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v258 - v259) >> 3) >= 0x555555555555555)
                      v262 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v262 = v261;
                    if (v262)
                    {
                      v263 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v97[6] + 16))(v97[6], 24 * v262, 8);
                      v264 = v263 + 24 * v260;
                      v265 = v263 + 24 * v262;
                      if (v263)
                      {
                        *(_OWORD *)v264 = v357;
                        *(_QWORD *)(v263 + 24 * v260 + 16) = v100;
                        *((_QWORD *)&v357 + 1) = 0;
                        v358 = 0;
                      }
                    }
                    else
                    {
                      v265 = 0;
                      v264 = 8 * (((uint64_t)v257 - v259) >> 3);
                    }
                    v266 = v264 + 24;
                    v267 = v97[3];
                    v268 = v97[4];
                    if (v268 == v267)
                    {
                      v97[3] = v264;
                      v97[4] = v266;
                      v271 = v97[5];
                      v97[5] = v265;
                      if (v268)
                        goto LABEL_429;
                    }
                    else
                    {
                      do
                      {
                        v269 = *(_OWORD *)(v268 - 24);
                        v268 -= 24;
                        *(_OWORD *)(v264 - 24) = v269;
                        v264 -= 24;
                        *(_QWORD *)(v264 + 16) = *(_QWORD *)(v268 + 16);
                        *(_QWORD *)(v268 + 8) = 0;
                        *(_QWORD *)(v268 + 16) = 0;
                      }
                      while (v268 != v267);
                      v268 = v97[3];
                      v270 = v97[4];
                      v97[3] = v264;
                      v97[4] = v266;
                      v271 = v97[5];
                      v97[5] = v265;
                      while (v270 != v268)
                      {
                        v272 = *(std::__shared_weak_count **)(v270 - 8);
                        if (v272)
                        {
                          v273 = (unint64_t *)&v272->__shared_owners_;
                          do
                            v274 = __ldaxr(v273);
                          while (__stlxr(v274 - 1, v273));
                          if (!v274)
                          {
                            ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                            std::__shared_weak_count::__release_weak(v272);
                          }
                        }
                        v270 -= 24;
                      }
                      v54 = (unint64_t)v326;
                      if (v268)
LABEL_429:
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v97[6] + 40))(v97[6], v268, v271 - v268);
                    }
                    v100 = v358;
                    v97[4] = v266;
                    if (v100)
                      goto LABEL_431;
                    goto LABEL_435;
                  }
                }
                else
                {
                  if (v91 >= v87)
                    v91 %= v87;
                  if (v91 != v58)
                    break;
                }
                v90 = (_QWORD *)*v90;
              }
              while (v90);
            }
          }
        }
LABEL_116:
        v102 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v37 + 320) + 16))(*(_QWORD *)(v37 + 320), 24, 8);
        *(_QWORD *)&v357 = v102;
        *((_QWORD *)&v357 + 1) = v37 + 320;
        *v102 = 0;
        v102[1] = v86;
        v102[2] = v57;
        ++*(_QWORD *)v57;
        LOBYTE(v358) = 1;
        v103 = (float)(unint64_t)(*(_QWORD *)(v37 + 328) + 1);
        v104 = *(float *)(v37 + 336);
        if (v87 && (float)(v104 * (float)v87) >= v103)
        {
LABEL_165:
          v127 = *(_QWORD **)(*(_QWORD *)(v37 + 288) + 8 * v58);
          if (v127)
          {
            *v102 = *v127;
            v128 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
          }
          else
          {
            *v102 = *(_QWORD *)(v37 + 312);
            *(_QWORD *)(v37 + 312) = v102;
            *(_QWORD *)(*(_QWORD *)(v37 + 288) + 8 * v58) = v319;
            v128 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
            if (!*v102)
              goto LABEL_174;
            v129 = *(_QWORD *)(*v102 + 8);
            if ((v87 & (v87 - 1)) != 0)
            {
              if (v129 >= v87)
                v129 %= v87;
            }
            else
            {
              v129 &= v87 - 1;
            }
            v127 = (_QWORD *)(*(_QWORD *)(v37 + 288) + 8 * v129);
          }
          *v127 = v102;
LABEL_174:
          ++*(_QWORD *)(v37 + 328);
          v332[25] = 1;
          {
            v283 = operator new();
            *((_QWORD *)v128 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v283, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v54 = *((_QWORD *)v128 + 299);
          v131 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 16))(v54, 472, 8);
          *(_QWORD *)v131 = &off_1E42DCCF0;
          *(_QWORD *)(v131 + 8) = 0;
          *(_QWORD *)(v131 + 16) = 0;
          *(_QWORD *)(v131 + 24) = v54;
          v325 = (uint64_t *)(v131 + 32);
          md::LineLabelFeature::LineLabelFeature(v131 + 32, 5, 3);
          *(_QWORD *)(v131 + 32) = &off_1E429F1D0;
          *(_BYTE *)(v131 + 466) = -1;
          {
            v284 = operator new();
            *(_QWORD *)(v284 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v284 + 24) = "VectorKitLabels";
            *(_OWORD *)(v284 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v284 = &off_1E42B5668;
            *(_QWORD *)(v284 + 8) = "VectorKitLabels";
            *(_OWORD *)(v284 + 72) = 0u;
            *(_OWORD *)(v284 + 88) = 0u;
            *(_OWORD *)(v284 + 104) = 0u;
            *(_OWORD *)(v284 + 120) = 0u;
            *(_OWORD *)(v284 + 136) = 0u;
            *(_OWORD *)(v284 + 152) = 0u;
            *(_OWORD *)(v284 + 168) = 0u;
            *(_OWORD *)(v284 + 184) = 0u;
            *(_OWORD *)(v284 + 200) = 0u;
            *(_OWORD *)(v284 + 216) = 0u;
            *(_OWORD *)(v284 + 232) = 0u;
            *(_QWORD *)(v284 + 248) = 0;
            *(_OWORD *)(v284 + 56) = 0u;
            v285 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v284 + 56), 0);
            if ((_DWORD)v285)
              geo::read_write_lock::logFailure(v285, (uint64_t)"initialization", v286);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v284 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v284 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v284;
            v128 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
          }
          v133 = *((_QWORD *)v128 + 299);
          v134 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, 8, 4);
          v135 = v134;
          if (v134)
            *v134 = 0x200000005;
          v136 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v133 + 16))(v133, 16, 4);
          v137 = v136;
          if (v136)
            v136[1] = 0x7600000003;
          *v136 = *v135;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v133 + 40))(v133, v135, 8);
          v138 = (std::__shared_weak_count *)operator new(0x40uLL);
          v138->__shared_owners_ = 0;
          v139 = (unint64_t *)&v138->__shared_owners_;
          v138->__shared_weak_owners_ = 0;
          v138->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DAB40;
          v138[1].std::__shared_count = 0u;
          v140 = (void **)&v138[1].__vftable;
          *(_OWORD *)&v138[1].__shared_weak_owners_ = 0u;
          *(_DWORD *)((char *)&v138[2].__vftable + 7) = 0;
          v141 = (std::__shared_weak_count_vtbl *)malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
          v138[1].__vftable = v141;
          if (v141)
          {
            *(_QWORD *)&v142 = -1;
            *((_QWORD *)&v142 + 1) = -1;
            *(_OWORD *)&v141[5].__get_deleter = v142;
            *(_OWORD *)&v141[6].~__shared_weak_count = v142;
            *(_OWORD *)&v141[4].__on_zero_shared_weak = v142;
            *(_OWORD *)&v141[5].~__shared_weak_count_0 = v142;
            *(_OWORD *)&v141[4].~__shared_weak_count = v142;
            *(_OWORD *)&v141[4].__on_zero_shared = v142;
            *(_OWORD *)&v141[3].~__shared_weak_count_0 = v142;
            *(_OWORD *)&v141[3].__get_deleter = v142;
            *(_OWORD *)&v141[2].__on_zero_shared = v142;
            *(_OWORD *)&v141[2].__on_zero_shared_weak = v142;
            *(_OWORD *)&v141[1].__get_deleter = v142;
            *(_OWORD *)&v141[2].~__shared_weak_count = v142;
            *(_OWORD *)&v141->__on_zero_shared_weak = v142;
            *(_OWORD *)&v141[1].~__shared_weak_count_0 = v142;
            *(_OWORD *)&v141->~__shared_weak_count = v142;
            *(_OWORD *)&v141->__on_zero_shared = v142;
          }
          v143 = 0;
          v144 = 0;
          v145 = BYTE1(v138[2].__shared_owners_);
          while (1)
          {
            v147 = v145;
            v148 = *v140;
            if (v145)
              break;
LABEL_183:
            v148[v147] = v137[v143];
            v145 = BYTE1(v138[2].__shared_owners_) + 1;
            BYTE1(v138[2].__shared_owners_) = v145;
            v144 = 1;
            v146 = v143 == 1;
            v143 = 1;
            if (v146)
            {
              v148 = *v140;
              v147 = v145;
LABEL_201:
              qsort(v148, v147, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
              goto LABEL_202;
            }
          }
          if (v145 > 0x1Fu)
          {
            do
            {
              v152 = 0;
              v153 = (int *)v148;
              while (1)
              {
                v154 = *v153;
                v153 += 2;
                if (v154 == LODWORD(v137[v143]))
                  break;
                if (v147 == ++v152)
                  goto LABEL_195;
              }
              HIDWORD(v148[v152]) = HIDWORD(v137[v143]);
LABEL_195:
              v146 = v143 == 1;
              v143 = 1;
            }
            while (!v146);
          }
          else
          {
            do
            {
              v149 = 0;
              v150 = (int *)v148;
              while (1)
              {
                v151 = *v150;
                v150 += 2;
                if (v151 == LODWORD(v137[v143]))
                  break;
                if (v147 == ++v149)
                  goto LABEL_183;
              }
              HIDWORD(v148[v149]) = HIDWORD(v137[v143]);
              v146 = v143 == 1;
              v143 = 1;
            }
            while (!v146);
          }
          if ((v144 & 1) != 0)
            goto LABEL_201;
          do
LABEL_202:
            v155 = __ldxr(v139);
          while (__stxr(v155 + 1, v139));
          v156 = *(std::__shared_weak_count **)(v131 + 456);
          *(_QWORD *)(v131 + 448) = v140;
          *(_QWORD *)(v131 + 456) = v138;
          if (v156)
          {
            v157 = (unint64_t *)&v156->__shared_owners_;
            do
              v158 = __ldaxr(v157);
            while (__stlxr(v158 - 1, v157));
            if (!v158)
            {
              ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
              std::__shared_weak_count::__release_weak(v156);
            }
          }
          do
            v159 = __ldaxr(v139);
          while (__stlxr(v159 - 1, v139));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v133 + 40))(v133, v137, 16);
          v160 = *(_QWORD *)(v131 + 224);
          *(_BYTE *)(v160 + 290) = v328 != 255;
          v7 = a1;
          md::LabelLineStore::addOverlayLine(v160, v326, (uint64_t)&v327);
          v161 = *(unsigned __int8 **)(v131 + 224);
          v162 = atomic_load(v161 + 80);
          if ((v162 & 1) != 0)
            md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v161);
          v163 = v327;
          v164 = *(_QWORD *)(v131 + 416);
          for (i = *(_QWORD *)(v131 + 424); i != v164; i -= 64)
          {
            if (*(char *)(i - 9) < 0)
            {
              (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), *(_QWORD *)(i - 32), *(_QWORD *)(i - 16) & 0x7FFFFFFFFFFFFFFFLL);
              if ((*(char *)(i - 41) & 0x80000000) == 0)
                continue;
            }
            else if ((*(char *)(i - 41) & 0x80000000) == 0)
            {
              continue;
            }
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(i - 40) + 40))(*(_QWORD *)(i - 40), *(_QWORD *)(i - 64), *(_QWORD *)(i - 48) & 0x7FFFFFFFFFFFFFFFLL);
          }
          *(_QWORD *)(v131 + 424) = v164;
          v357 = 0uLL;
          v358 = 0;
          {
            v288 = operator new();
            *(_QWORD *)(v288 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v288 + 24) = "VectorKitLabels";
            *(_OWORD *)(v288 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v288 = &off_1E42B5668;
            *(_QWORD *)(v288 + 8) = "VectorKitLabels";
            *(_OWORD *)(v288 + 72) = 0u;
            *(_OWORD *)(v288 + 88) = 0u;
            *(_OWORD *)(v288 + 104) = 0u;
            *(_OWORD *)(v288 + 120) = 0u;
            *(_OWORD *)(v288 + 136) = 0u;
            *(_OWORD *)(v288 + 152) = 0u;
            *(_OWORD *)(v288 + 168) = 0u;
            *(_OWORD *)(v288 + 184) = 0u;
            *(_OWORD *)(v288 + 200) = 0u;
            *(_OWORD *)(v288 + 216) = 0u;
            *(_OWORD *)(v288 + 232) = 0u;
            *(_QWORD *)(v288 + 248) = 0;
            *(_OWORD *)(v288 + 56) = 0u;
            v289 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v288 + 56), 0);
            if ((_DWORD)v289)
              geo::read_write_lock::logFailure(v289, (uint64_t)"initialization", v290);
            v291 = malloc_create_zone(0, 0);
            *(_QWORD *)(v288 + 48) = v291;
            malloc_set_zone_name(v291, "VectorKitLabels");
            *(_QWORD *)(v288 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v288;
            v7 = a1;
          }
          v359 = mdm::Allocator::instance(void)::alloc;
          v361 = 0;
          v360 = 0uLL;
          {
            v292 = operator new();
            *(_QWORD *)(v292 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v292 + 24) = "VectorKitLabels";
            *(_OWORD *)(v292 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v292 = &off_1E42B5668;
            *(_QWORD *)(v292 + 8) = "VectorKitLabels";
            *(_OWORD *)(v292 + 72) = 0u;
            *(_OWORD *)(v292 + 88) = 0u;
            *(_OWORD *)(v292 + 104) = 0u;
            *(_OWORD *)(v292 + 120) = 0u;
            *(_OWORD *)(v292 + 136) = 0u;
            *(_OWORD *)(v292 + 152) = 0u;
            *(_OWORD *)(v292 + 168) = 0u;
            *(_OWORD *)(v292 + 184) = 0u;
            *(_OWORD *)(v292 + 200) = 0u;
            *(_OWORD *)(v292 + 216) = 0u;
            *(_OWORD *)(v292 + 232) = 0u;
            *(_QWORD *)(v292 + 248) = 0;
            *(_OWORD *)(v292 + 56) = 0u;
            v293 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v292 + 56), 0);
            if ((_DWORD)v293)
              geo::read_write_lock::logFailure(v293, (uint64_t)"initialization", v294);
            v295 = malloc_create_zone(0, 0);
            *(_QWORD *)(v292 + 48) = v295;
            malloc_set_zone_name(v295, "VectorKitLabels");
            *(_QWORD *)(v292 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v292;
            v7 = a1;
          }
          v168 = mdm::Allocator::instance(void)::alloc;
          v362 = mdm::Allocator::instance(void)::alloc;
          if (*((_BYTE *)v326 + 24) == 1)
          {
            v169 = *(void **)(v163 + 3472);
            if (v169)
            {
              v170 = v169;
              v356 = 0;
              v355 = 0;
              objc_msgSend(v170, "getTextForKey:text:locale:", &unk_1E43478D0, &v356, &v355);
              v171 = v356;
              v172 = v355;

              v173 = objc_retainAutorelease(v171);
              v174 = (const char *)objc_msgSend(v173, "UTF8String");
              v175 = objc_retainAutorelease(v172);
              md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&v350, v174, (const char *)objc_msgSend(v175, "UTF8String"));
              if (SHIBYTE(v358) < 0)
                (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v359 + 40))(v359, v357, (unint64_t)v358 & 0x7FFFFFFFFFFFFFFFLL);
              v357 = v350;
              v358 = v351;
              HIBYTE(v351) = 0;
              LOBYTE(v350) = 0;
              if (SHIBYTE(v361) < 0)
              {
                (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v168 + 40))(v168, v360, v361 & 0x7FFFFFFFFFFFFFFFLL);
                v360 = v353;
                v361 = v354;
                HIBYTE(v354) = 0;
                LOBYTE(v353) = 0;
                if (SHIBYTE(v351) < 0)
                  (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v352 + 40))(v352, v350, (unint64_t)v351 & 0x7FFFFFFFFFFFFFFFLL);
              }
              else
              {
                v360 = v353;
                v361 = v354;
              }

            }
          }
          *(_BYTE *)(v131 + 466) = md::LineLabelFeature::textIndexForText(v325, (uint64_t)&v357);
          if (SHIBYTE(v361) < 0)
          {
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v168 + 40))(v168, v360, v361 & 0x7FFFFFFFFFFFFFFFLL);
            if (SHIBYTE(v358) < 0)
              goto LABEL_251;
          }
          else
          {
            if ((SHIBYTE(v358) & 0x80000000) == 0)
              goto LABEL_233;
LABEL_251:
            (*(void (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v359 + 40))(v359, v357, (unint64_t)v358 & 0x7FFFFFFFFFFFFFFFLL);
          }
LABEL_233:
          if (v349)
            v176 = v349 + 1;
          else
            v176 = 0;
          v177 = (std::__shared_weak_count *)v176[2];
          v176[1] = v325;
          v176[2] = v131;
          if (v177)
          {
            v178 = (unint64_t *)&v177->__shared_owners_;
            do
              v179 = __ldaxr(v178);
            while (__stlxr(v179 - 1, v178));
            if (!v179)
            {
              ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
              std::__shared_weak_count::__release_weak(v177);
            }
          }
          v180 = *(_QWORD *)(v37 + 672);
          v181 = v349;
          v182 = v349 + 1;
          if (!v349)
            v182 = 0;
          v183 = v182[1];
          *(_QWORD *)(v183 + 152) = v182;
          v184 = v180 + 1;
          *(_QWORD *)(v37 + 672) = v184;
          *(_QWORD *)(v183 + 72) = v184;
          *(_BYTE *)(v183 + 147) = 0;
LABEL_244:
          if (v181)
            v185 = v181 + 1;
          else
            v185 = 0;
          v186 = v185[1];
          v187 = *(_QWORD *)(v186 + 72);
          v188 = v44[32];
          if (v188)
          {
            v189 = (uint8x8_t)vcnt_s8((int8x8_t)v188);
            v189.i16[0] = vaddlv_u8(v189);
            if (v189.u32[0] > 1uLL)
            {
              v54 = *(_QWORD *)(v186 + 72);
              if (v187 >= v188)
                v54 = v187 % v188;
            }
            else
            {
              v54 = (v188 - 1) & v187;
            }
            v190 = *(_QWORD **)(v44[31] + 8 * v54);
            if (v190)
            {
              v191 = (_QWORD *)*v190;
              if (v191)
              {
                if (v189.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v197 = v191[1];
                    if (v197 == v187)
                    {
                      v195 = v191[2];
                      if (v195)
                        v196 = v195 + 8;
                      else
                        v196 = 0;
                      if (*(_QWORD *)(*(_QWORD *)(v196 + 8) + 72) == v187)
                        goto LABEL_382;
                    }
                    else if ((v197 & (v188 - 1)) != v54)
                    {
                      goto LABEL_275;
                    }
                    v191 = (_QWORD *)*v191;
                    if (!v191)
                      goto LABEL_275;
                  }
                }
                do
                {
                  v192 = v191[1];
                  if (v192 == v187)
                  {
                    v193 = v191[2];
                    if (v193)
                      v194 = v193 + 8;
                    else
                      v194 = 0;
                    if (*(_QWORD *)(*(_QWORD *)(v194 + 8) + 72) == v187)
                    {
LABEL_382:
                      v224 = v326;
LABEL_336:
                      v226 = (std::__shared_weak_count *)v185[2];
                      v343 = v186;
                      v344 = v226;
                      if (v226)
                      {
                        v227 = (unint64_t *)&v226->__shared_owners_;
                        v228 = v323;
                        do
                          v229 = __ldxr(v227);
                        while (__stxr(v229 + 1, v227));
                        geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>::release(&v349);
                        p_shared_weak_owners = (unint64_t *)&v226->__shared_weak_owners_;
                        do
                          v231 = __ldxr(p_shared_weak_owners);
                        while (__stxr(v231 + 1, p_shared_weak_owners));
                      }
                      else
                      {
                        geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>::release(&v349);
                        v228 = v323;
                      }
                      while (1)
                      {
                        v232 = *v228;
                        v233 = v228;
                        if (!*v228)
                          break;
                        while (1)
                        {
                          v228 = (uint64_t **)v232;
                          v234 = v232[5];
                          if ((unint64_t)v226 < v234)
                            break;
                          if (v234 >= (unint64_t)v226)
                          {
                            if (v226)
                              std::__shared_weak_count::__release_weak(v226);
                            goto LABEL_351;
                          }
                          v232 = v228[1];
                          if (!v232)
                          {
                            v233 = v228 + 1;
                            goto LABEL_348;
                          }
                        }
                      }
LABEL_348:
                      v235 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 248)
                                                                                            + 16))(*(_QWORD *)(v7 + 248), 48, 8);
                      v235[4] = v186;
                      v235[5] = (uint64_t)v226;
                      *v235 = 0;
                      v235[1] = 0;
                      v235[2] = (uint64_t)v228;
                      *v233 = v235;
                      v236 = (_QWORD *)**v321;
                      if (v236)
                      {
                        *v321 = v236;
                        v235 = *v233;
                      }
                      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 240), v235);
                      ++*(_QWORD *)(v7 + 256);
LABEL_351:
                      if (v332[25])
                      {
                        v237 = v343;
                        v238 = v346;
                        if ((unint64_t)v346 >= v347)
                        {
                          v240 = 0xAAAAAAAAAAAAAAABLL * ((v346 - v345) >> 3);
                          v241 = v240 + 1;
                          if (v240 + 1 > 0xAAAAAAAAAAAAAAALL)
                            abort();
                          if (0x5555555555555556 * ((uint64_t)(v347 - (_QWORD)v345) >> 3) > v241)
                            v241 = 0x5555555555555556 * ((uint64_t)(v347 - (_QWORD)v345) >> 3);
                          v242 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v347 - (_QWORD)v345) >> 3) >= 0x555555555555555
                               ? 0xAAAAAAAAAAAAAAALL
                               : v241;
                          if (v242)
                          {
                            v243 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v348 + 16))(v348, 24 * v242, 8);
                            v244 = (char *)(v243 + 24 * v240);
                            v245 = v243 + 24 * v242;
                            if (v243)
                            {
                              *(_QWORD *)v244 = v237;
                              v246 = v243 + 24 * v240;
                              *(_QWORD *)(v246 + 8) = 0;
                              *(_QWORD *)(v246 + 16) = 0;
                            }
                          }
                          else
                          {
                            v245 = 0;
                            v244 = (char *)(8 * ((v346 - v345) >> 3));
                          }
                          v248 = v345;
                          v247 = v346;
                          v249 = v244;
                          if (v346 != v345)
                          {
                            do
                            {
                              v250 = *(_OWORD *)(v247 - 24);
                              *((_QWORD *)v249 - 1) = *((_QWORD *)v247 - 1);
                              *(_OWORD *)(v249 - 24) = v250;
                              v249 -= 24;
                              v247 -= 24;
                            }
                            while (v247 != v248);
                            v247 = v345;
                          }
                          v239 = v244 + 24;
                          v345 = v249;
                          v346 = v244 + 24;
                          v251 = v347;
                          v347 = v245;
                          if (v247)
                            (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v348 + 40))(v348, v247, v251 - (_QWORD)v247);
                        }
                        else
                        {
                          if (v346)
                          {
                            *((_QWORD *)v346 + 1) = 0;
                            *((_QWORD *)v238 + 2) = 0;
                            *(_QWORD *)v238 = v237;
                          }
                          v239 = v238 + 24;
                        }
                        v346 = v239;
                        if (v239 != v345 && 0xAAAAAAAAAAAAAAABLL * ((v239 - v345) >> 3) >= 0x20)
                        {
                          md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v317 + 296), &v345, 1u, 1, *(_QWORD *)(*(_QWORD *)(v317 + 152) + 32));
                          v346 = v345;
                          std::mutex::unlock((std::mutex *)v37);
                          if (v37)
                          {
                            std::mutex::lock((std::mutex *)v37);
                            goto LABEL_377;
                          }
LABEL_489:
                          std::__throw_system_error(1, "unique_lock::lock: references null mutex");
LABEL_509:
                          __break(1u);
                          return;
                        }
                      }
LABEL_377:
                      v252 = v344;
                      if (v344)
                      {
                        v253 = (unint64_t *)&v344->__shared_owners_;
                        do
                          v254 = __ldaxr(v253);
                        while (__stlxr(v254 - 1, v253));
                        if (!v254)
                        {
                          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                          std::__shared_weak_count::__release_weak(v252);
                        }
                      }
                      v54 = (unint64_t)(v224 + 7);
                      if (++v324 == v320)
                        goto LABEL_463;
                      goto LABEL_44;
                    }
                  }
                  else
                  {
                    if (v192 >= v188)
                      v192 %= v188;
                    if (v192 != v54)
                      break;
                  }
                  v191 = (_QWORD *)*v191;
                }
                while (v191);
              }
            }
          }
LABEL_275:
          v198 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v44[35] + 16))(v44[35], 24, 8);
          *(_QWORD *)&v357 = v198;
          *((_QWORD *)&v357 + 1) = v44 + 35;
          *v198 = 0;
          v198[1] = v187;
          v198[2] = v181;
          if (v181)
            ++*v181;
          LOBYTE(v358) = 1;
          v199 = (float)(unint64_t)(v44[36] + 1);
          v200 = *((float *)v44 + 74);
          if (v188 && (float)(v200 * (float)v188) >= v199)
          {
LABEL_326:
            v223 = *(_QWORD **)(v44[31] + 8 * v54);
            if (v223)
            {
              *v198 = *v223;
              v224 = v326;
            }
            else
            {
              *v198 = v44[34];
              v44[34] = v198;
              *(_QWORD *)(v44[31] + 8 * v54) = v318;
              v224 = v326;
              if (!*v198)
              {
LABEL_335:
                ++v44[36];
                v186 = v185[1];
                goto LABEL_336;
              }
              v225 = *(_QWORD *)(*v198 + 8);
              if ((v188 & (v188 - 1)) != 0)
              {
                if (v225 >= v188)
                  v225 %= v188;
              }
              else
              {
                v225 &= v188 - 1;
              }
              v223 = (_QWORD *)(v44[31] + 8 * v225);
            }
            *v223 = v198;
            goto LABEL_335;
          }
          v201 = (v188 & (v188 - 1)) != 0;
          if (v188 < 3)
            v201 = 1;
          v202 = v201 | (2 * v188);
          v203 = vcvtps_u32_f32(v199 / v200);
          if (v202 <= v203)
            prime = v203;
          else
            prime = v202;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v188 = v44[32];
          if (prime <= v188)
          {
            if (prime >= v188)
              goto LABEL_313;
            v216 = vcvtps_u32_f32((float)(unint64_t)v44[36] / *((float *)v44 + 74));
            if (v188 < 3
              || (v217 = (uint8x8_t)vcnt_s8((int8x8_t)v188), v217.i16[0] = vaddlv_u8(v217), v217.u32[0] > 1uLL))
            {
              v216 = std::__next_prime(v216);
            }
            else
            {
              v218 = 1 << -(char)__clz(v216 - 1);
              if (v216 >= 2)
                v216 = v218;
            }
            if (prime <= v216)
              prime = v216;
            if (prime >= v188)
            {
              v188 = v44[32];
LABEL_313:
              if ((v188 & (v188 - 1)) != 0)
              {
                if (v187 >= v188)
                  v54 = v187 % v188;
                else
                  v54 = v187;
              }
              else
              {
                v54 = (v188 - 1) & v187;
              }
              goto LABEL_326;
            }
            if (!prime)
            {
              v256 = v44[31];
              v44[31] = 0;
              if (v256)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v44[33] + 40))(v44[33], v256, 8 * v44[32]);
              v188 = 0;
              v44[32] = 0;
              goto LABEL_313;
            }
          }
          v205 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(*(_QWORD *)v44[33] + 16))(v44[33], 8 * prime, 8);
          v206 = v44[31];
          v44[31] = v205;
          if (v206)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v44[33] + 40))(v44[33], v206, 8 * v44[32]);
          v207 = 0;
          v44[32] = prime;
          do
            *(_QWORD *)(v44[31] + 8 * v207++) = 0;
          while (prime != v207);
          v208 = (_QWORD *)*v318;
          if (!*v318)
          {
LABEL_312:
            v188 = prime;
            goto LABEL_313;
          }
          v209 = v208[1];
          v210 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v211 = v209 & v210;
            *(_QWORD *)(v44[31] + 8 * v211) = v318;
            for (j = (_QWORD *)*v208; *v208; j = (_QWORD *)*v208)
            {
              v213 = j[1] & v210;
              if (v213 == v211)
              {
                v208 = j;
              }
              else
              {
                v214 = v44[31];
                if (*(_QWORD *)(v214 + 8 * v213))
                {
                  *v208 = *j;
                  v215 = 8 * v213;
                  *j = **(_QWORD **)(v44[31] + v215);
                  **(_QWORD **)(v44[31] + v215) = j;
                }
                else
                {
                  *(_QWORD *)(v214 + 8 * v213) = v208;
                  v208 = j;
                  v211 = v213;
                }
              }
            }
            goto LABEL_312;
          }
          if (v209 >= prime)
            v209 %= prime;
          *(_QWORD *)(v44[31] + 8 * v209) = v318;
          v219 = (_QWORD *)*v208;
          if (!*v208)
            goto LABEL_312;
          while (1)
          {
            v221 = v219[1];
            if (v221 >= prime)
              v221 %= prime;
            if (v221 != v209)
            {
              v222 = v44[31];
              if (!*(_QWORD *)(v222 + 8 * v221))
              {
                *(_QWORD *)(v222 + 8 * v221) = v208;
                goto LABEL_317;
              }
              *v208 = *v219;
              v220 = 8 * v221;
              *v219 = **(_QWORD **)(v44[31] + v220);
              **(_QWORD **)(v44[31] + v220) = v219;
              v219 = v208;
            }
            v221 = v209;
LABEL_317:
            v208 = v219;
            v219 = (_QWORD *)*v219;
            v209 = v221;
            if (!v219)
              goto LABEL_312;
          }
        }
        v105 = (v87 & (v87 - 1)) != 0;
        if (v87 < 3)
          v105 = 1;
        v106 = v105 | (2 * v87);
        v107 = vcvtps_u32_f32(v103 / v104);
        if (v106 <= v107)
          v108 = v107;
        else
          v108 = v106;
        if (v108 == 1)
        {
          v108 = 2;
        }
        else if ((v108 & (v108 - 1)) != 0)
        {
          v108 = std::__next_prime(v108);
        }
        v87 = *(_QWORD *)(v37 + 296);
        if (v108 <= v87)
        {
          if (v108 >= v87)
            goto LABEL_152;
          v120 = vcvtps_u32_f32((float)*(unint64_t *)(v37 + 328) / *(float *)(v37 + 336));
          if (v87 < 3 || (v121 = (uint8x8_t)vcnt_s8((int8x8_t)v87), v121.i16[0] = vaddlv_u8(v121), v121.u32[0] > 1uLL))
          {
            v120 = std::__next_prime(v120);
          }
          else
          {
            v122 = 1 << -(char)__clz(v120 - 1);
            if (v120 >= 2)
              v120 = v122;
          }
          if (v108 <= v120)
            v108 = v120;
          if (v108 >= v87)
          {
            v87 = *(_QWORD *)(v37 + 296);
LABEL_152:
            if ((v87 & (v87 - 1)) != 0)
            {
              if (v86 >= v87)
                v58 = v86 % v87;
              else
                v58 = v86;
            }
            else
            {
              v58 = (v87 - 1) & v86;
            }
            goto LABEL_165;
          }
          if (!v108)
          {
            v255 = *(_QWORD *)(v37 + 288);
            *(_QWORD *)(v37 + 288) = 0;
            if (v255)
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v37 + 304) + 40))(*(_QWORD *)(v37 + 304), v255, 8 * *(_QWORD *)(v37 + 296));
            v87 = 0;
            *(_QWORD *)(v37 + 296) = 0;
            goto LABEL_152;
          }
        }
        v109 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(v37 + 304) + 16))(*(_QWORD *)(v37 + 304), 8 * v108, 8);
        v110 = *(_QWORD *)(v37 + 288);
        *(_QWORD *)(v37 + 288) = v109;
        if (v110)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v37 + 304) + 40))(*(_QWORD *)(v37 + 304), v110, 8 * *(_QWORD *)(v37 + 296));
        v111 = 0;
        *(_QWORD *)(v37 + 296) = v108;
        do
          *(_QWORD *)(*(_QWORD *)(v37 + 288) + 8 * v111++) = 0;
        while (v108 != v111);
        v112 = (_QWORD *)*v319;
        if (!*v319)
        {
LABEL_151:
          v87 = v108;
          goto LABEL_152;
        }
        v113 = v112[1];
        v114 = v108 - 1;
        if ((v108 & (v108 - 1)) == 0)
        {
          v115 = v113 & v114;
          *(_QWORD *)(*(_QWORD *)(v37 + 288) + 8 * v115) = v319;
          for (k = (_QWORD *)*v112; *v112; k = (_QWORD *)*v112)
          {
            v117 = k[1] & v114;
            if (v117 == v115)
            {
              v112 = k;
            }
            else
            {
              v118 = *(_QWORD *)(v37 + 288);
              if (*(_QWORD *)(v118 + 8 * v117))
              {
                *v112 = *k;
                v119 = 8 * v117;
                *k = **(_QWORD **)(*(_QWORD *)(v37 + 288) + v119);
                **(_QWORD **)(*(_QWORD *)(v37 + 288) + v119) = k;
              }
              else
              {
                *(_QWORD *)(v118 + 8 * v117) = v112;
                v112 = k;
                v115 = v117;
              }
            }
          }
          goto LABEL_151;
        }
        if (v113 >= v108)
          v113 %= v108;
        *(_QWORD *)(*(_QWORD *)(v37 + 288) + 8 * v113) = v319;
        v123 = (_QWORD *)*v112;
        if (!*v112)
          goto LABEL_151;
        while (1)
        {
          v125 = v123[1];
          if (v125 >= v108)
            v125 %= v108;
          if (v125 != v113)
          {
            v126 = *(_QWORD *)(v37 + 288);
            if (!*(_QWORD *)(v126 + 8 * v125))
            {
              *(_QWORD *)(v126 + 8 * v125) = v112;
              goto LABEL_156;
            }
            *v112 = *v123;
            v124 = 8 * v125;
            *v123 = **(_QWORD **)(*(_QWORD *)(v37 + 288) + v124);
            **(_QWORD **)(*(_QWORD *)(v37 + 288) + v124) = v123;
            v123 = v112;
          }
          v125 = v113;
LABEL_156:
          v112 = v123;
          v123 = (_QWORD *)*v123;
          v113 = v125;
          if (!v123)
            goto LABEL_151;
        }
      }
      std::mutex::unlock((std::mutex *)v37);
    }
  }
LABEL_475:
  v299 = v342;
  if (v342)
  {
    v300 = (unint64_t *)&v342->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  if (!v368)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_509;
  }
  (*(void (**)(_QWORD *))(*v368 + 48))(v368);
  v302 = v368;
  if (v368 == v367)
  {
    v303 = 4;
    v302 = v367;
  }
  else
  {
    if (!v368)
      return;
    v303 = 5;
  }
  (*(void (**)(void))(*v302 + 8 * v303))();
}

void sub_19F619CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD **a13, _QWORD **a14, _QWORD **a15, _QWORD **a16, _QWORD **a17, _QWORD **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_QWORD **a27,uint64_t a28,uint64_t a29,uint64_t a30,md::LineLabelFeature *a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  __int16 a69;
  std::mutex *v69;
  std::mutex *v70;
  uint64_t v71;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;

  md::components::Material::~Material((md::components::Material *)(v71 - 256));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  std::mutex::unlock(v69);
  geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>::release(&a68);
  std::mutex::unlock(v70);
  if (a64)
  {
    a65 = a64;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a67 + 40))(a67, a64, a66 - a64);
  }
  md::LabelFeatureCreationParams::~LabelFeatureCreationParams((md::LabelFeatureCreationParams *)&a33);
  md::LabelFeatureCreationParams::~LabelFeatureCreationParams((md::LabelFeatureCreationParams *)&a47);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v71 - 128));
  v73 = *(std::__shared_weak_count **)(a25 + 272);
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy(a24, *a27);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy((uint64_t)(a14 - 1), *a14);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy((uint64_t)(a15 - 1), *a15);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy((uint64_t)(a16 - 1), *a16);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy((uint64_t)(a17 - 1), *a17);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy((uint64_t)(a18 - 1), *a18);
  std::__tree<std::weak_ptr<md::OverlayLineLabelFeature>,std::owner_less<std::weak_ptr<md::OverlayLineLabelFeature>>,geo::StdAllocator<std::weak_ptr<md::OverlayLineLabelFeature>,mdm::Allocator>>::destroy((uint64_t)(a13 - 1), *a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  v74 = *(std::__shared_weak_count **)(a25 + 16);
  if (v74)
  {
    std::__shared_weak_count::__release_weak(v74);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_1,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_1,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D4888;
  return result;
}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_1,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D4888;
}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_1,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsTileDecode", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D4840;
  return result;
}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D4840;
}

void std::__function::__func<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelTile::LabelTile(geo::QuadTile const&,std::shared_ptr<md::LabelClientTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsTileDecode", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void md::RouteRenderLayer::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  void ***v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void **v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33[2];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  void *v37[2];
  __int128 v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  char v42;
  void *v43;
  char v44;
  void **v45;
  void *__p;
  void *v47;
  _QWORD v48[7];
  int v49;
  _QWORD v50[7];
  int v51;

  v2 = (_QWORD *)a2;
  strcpy((char *)a2, "RouteRenderLayer");
  *(_WORD *)(a2 + 23) = 16;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(_BYTE *)(a2 + 95) = 0;
  v3 = *(uint64_t ***)(a1 + 64);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    v6 = (void ***)&v36;
    v32 = v2;
    while (1)
    {
      v8 = *v4;
      v7 = (std::__shared_weak_count *)v4[1];
      v39 = *v4;
      v40 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      *(_OWORD *)v33 = 0u;
      *(_OWORD *)v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)v37 = 0u;
      v38 = 0u;
      v42 = 8;
      strcpy((char *)&v41, "selected");
      v11 = *(unsigned __int8 *)(v8 + 620);
      memset(&v50[4], 0, 24);
      v51 = 0;
      v50[0] = v11;
      gdc::DebugTreeNode::addProperty((uint64_t)v33, (uint64_t)&v41, (uint64_t)v50);
      v12 = *(int *)(v8 + 616);
      v42 = 5;
      strcpy((char *)&v41, "layer");
      memset(&v48[4], 0, 24);
      v49 = 0;
      v48[0] = v12;
      gdc::DebugTreeNode::addProperty((uint64_t)v33, (uint64_t)&v41, (uint64_t)v48);
      v13 = *(void **)(v8 + 144);
      if (v13)
        break;
LABEL_16:
      gdc::DebugTreeNode::addChildNode(v2, (__int128 *)v33);
      v18 = (void **)v37[1];
      if (v37[1])
      {
        v19 = v38;
        v20 = v37[1];
        if ((void *)v38 != v37[1])
        {
          v21 = v5;
          v22 = v6;
          do
          {
            v23 = *(_QWORD *)(v19 - 24);
            if (v23)
            {
              v24 = *(_QWORD *)(v19 - 16);
              v25 = *(void **)(v19 - 24);
              if (v24 != v23)
              {
                do
                {
                  if (*(char *)(v24 - 1) < 0)
                    operator delete(*(void **)(v24 - 24));
                  v24 -= 24;
                }
                while (v24 != v23);
                v25 = *(void **)(v19 - 24);
              }
              *(_QWORD *)(v19 - 16) = v23;
              operator delete(v25);
            }
            v26 = *(_QWORD *)(v19 - 48);
            if (v26)
            {
              v27 = *(_QWORD *)(v19 - 40);
              v28 = *(void **)(v19 - 48);
              if (v27 != v26)
              {
                do
                {
                  if (*(char *)(v27 - 9) < 0)
                    operator delete(*(void **)(v27 - 32));
                  v27 -= 64;
                }
                while (v27 != v26);
                v28 = *(void **)(v19 - 48);
              }
              *(_QWORD *)(v19 - 40) = v26;
              operator delete(v28);
            }
            v29 = (void **)(v19 - 80);
            if (*(char *)(v19 - 57) < 0)
              operator delete(*v29);
            v19 -= 80;
          }
          while (v29 != v18);
          v20 = v37[1];
          v6 = v22;
          v5 = v21;
          v2 = v32;
        }
        *(_QWORD *)&v38 = v18;
        operator delete(v20);
      }
      std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](v6);
      if (SHIBYTE(v35) < 0)
      {
        operator delete(v34[1]);
        if ((SHIBYTE(v34[0]) & 0x80000000) == 0)
        {
LABEL_42:
          if (v7)
            goto LABEL_46;
          goto LABEL_3;
        }
      }
      else if ((SHIBYTE(v34[0]) & 0x80000000) == 0)
      {
        goto LABEL_42;
      }
      operator delete(v33[0]);
      if (v7)
      {
LABEL_46:
        v30 = (unint64_t *)&v7->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
LABEL_3:
      v4 += 2;
      if (v4 == v5)
        return;
    }
    v14 = v13;
    objc_msgSend(v14, "createDebugNode");
    gdc::DebugTreeNode::addChildNode(v33, &v41);
    v15 = __p;
    if (__p)
    {
      v16 = (uint64_t)v47;
      v17 = __p;
      if (v47 != __p)
      {
        do
        {
          v16 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v16);
        }
        while ((void *)v16 != v15);
        v17 = __p;
      }
      v47 = v15;
      operator delete(v17);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v45);
    if (v44 < 0)
    {
      operator delete(v43);
      if ((v42 & 0x80000000) == 0)
        goto LABEL_15;
    }
    else if ((v42 & 0x80000000) == 0)
    {
LABEL_15:

      goto LABEL_16;
    }
    operator delete((void *)v41);
    goto LABEL_15;
  }
}

void sub_19F61A5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  gdc::DebugTreeNode *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);

  gdc::DebugTreeNode::~DebugTreeNode((gdc::DebugTreeNode *)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  gdc::DebugTreeNode::~DebugTreeNode(v3);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "RouteLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void md::RouteRenderLayer::layoutOverlay(uint64_t a1, uint64_t a2, _QWORD *a3, char a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  float v8;
  VKTimedAnimation *v9;
  void *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  VKTimedAnimation *v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  int8x8_t v47;
  uint8x8_t v48;
  uint64_t v49;
  VKTimedAnimation *v50;
  void *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  int8x8_t v86;
  uint8x8_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  float32_t v116;
  _QWORD *v117;
  unint64_t v118;
  float32x4_t *v119;
  unint64_t v120;
  uint64_t v121;
  float32x2_t v122;
  float v123;
  float v124;
  double v125;
  double v126;
  double v127;
  long double v128;
  long double v129;
  float64x2_t v130;
  const double *v131;
  float64x2_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  float32x4_t *v136;
  unint64_t v137;
  id v138;
  double v139;
  double v140;
  double v141;
  double v142;
  id v143;
  double v144;
  double v145;
  uint64_t v146;
  md::RouteLineSharedResources *v147;
  id v148;
  id v149;
  AlphaAtlas *v150;
  id v151;
  md::RouteLineSharedResources *v152;
  void *v153;
  _QWORD *v154;
  int8x8_t v155;
  uint8x8_t v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  int8x8_t v167;
  uint8x8_t v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  float v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  void *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  void *v192;
  _QWORD **v193;
  _QWORD *v194;
  uint64_t v195;
  id *v196;
  id WeakRetained;
  void *v198;
  uint64_t *v199;
  uint64_t **v200;
  uint64_t **v201;
  unint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  double v215;
  _QWORD *v216;
  unsigned __int8 v217;
  float v218;
  uint64_t v219;
  uint64_t j;
  _DWORD *v221;
  _DWORD *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint8x8_t v228;
  uint64_t v229;
  unint64_t v230;
  unsigned __int8 v231;
  md::RouteLineRibbon *v232;
  uint64_t v233;
  uint64_t i;
  _DWORD *v235;
  _DWORD *v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD **v244;
  _QWORD *v245;
  unint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  unsigned __int8 v249;
  float v250;
  float v251;
  _BOOL8 v252;
  unint64_t v253;
  unint64_t v254;
  size_t prime;
  void (***v256)(_QWORD);
  unsigned __int8 v257;
  void (*v258)(void);
  void *v259;
  void *v260;
  uint64_t v261;
  _QWORD *v262;
  size_t v263;
  size_t v264;
  size_t v265;
  _QWORD *k;
  size_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint8x8_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  size_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  unint64_t v279;
  _QWORD *v280;
  unint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  unint64_t v295;
  unint64_t v296;
  char *v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  void (***v301)(_QWORD);
  void (***v302)(_QWORD);
  unsigned __int8 v303;
  uint64_t v304;
  void (***v305)(_QWORD);
  unsigned __int8 v306;
  uint64_t v307;
  unsigned __int8 v308;
  uint64_t v309;
  uint64_t v310;
  _OWORD *v311;
  char *v312;
  uint64_t v313;
  __int128 v314;
  __int128 v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  id v323;
  void *v324;
  id v325;
  void *v326;
  _BOOL4 v327;
  _QWORD *v328;
  unint64_t v329;
  char v330;
  md::RouteLineSection *v331;
  unint64_t v332;
  float *v333;
  uint64_t v334;
  uint64_t v335;
  id *v336;
  uint64_t v337;
  int v338;
  int v339;
  float *v340;
  uint64_t v341;
  uint64_t v342;
  float v343;
  float v344;
  float v345;
  uint64_t v346;
  unint64_t v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  __int128 v351;
  __int128 v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  char *v356;
  char *v357;
  __int128 v358;
  __int128 v359;
  char *v360;
  char *v361;
  __int128 v362;
  __int128 v363;
  uint64_t v364;
  unsigned __int8 v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  _DWORD *v369;
  _DWORD *v370;
  uint64_t v371;
  uint64_t v372;
  md::RouteLineSection *v373;
  uint64_t v374;
  _DWORD *v375;
  unsigned __int8 v376;
  unsigned __int8 v377;
  ggl::CommandBuffer *v378;
  unint64_t v379;
  _BYTE *v380;
  _BYTE *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _BYTE *v390;
  unint64_t v391;
  _BYTE *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  _BYTE *v399;
  _BYTE *v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  _BYTE *v405;
  uint64_t v406;
  _BYTE *v407;
  _BYTE *v408;
  _BYTE *v409;
  _OWORD *v410;
  __int128 *v411;
  unint64_t v412;
  __int128 v413;
  char v414;
  _BYTE *v415;
  _BYTE *v416;
  uint64_t v417;
  id v418;
  void *v419;
  uint64_t *v420;
  uint64_t **v421;
  uint64_t **v422;
  unint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  _QWORD *v426;
  uint64_t v427;
  ggl::CommandBuffer *v428;
  uint64_t v429;
  uint64_t v430;
  _BYTE *v431;
  _BYTE *v432;
  uint64_t v433;
  _QWORD *v434;
  _QWORD *v435;
  _QWORD *v436;
  uint64_t v437;
  _QWORD *v438;
  void (***v439)(_QWORD);
  unsigned __int8 v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  _QWORD *v445;
  int v446;
  char *v447;
  char *v448;
  unint64_t v449;
  int v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t v454;
  NSObject *v455;
  uint64_t v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  _QWORD *v461;
  uint64_t v462;
  uint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  __int128 *v467;
  uint64_t v468;
  void *v469;
  _QWORD *v470;
  void *v471;
  _QWORD *v472;
  _QWORD *v473;
  unsigned __int8 v474;
  uint64_t v475;
  uint64_t v476;
  _QWORD *v477;
  int8x8_t v478;
  uint8x8_t v479;
  unint64_t v480;
  _QWORD *v481;
  _QWORD *v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t *v487;
  void *v488;
  gss::Allocator *v489;
  uint64_t (**v490)();
  __n128 v491;
  uint64_t (*v492)();
  float **v493;
  float *v494;
  gss::Allocator *v495;
  gss::Allocator *v496;
  unsigned __int8 *v497;
  uint64_t v498;
  uint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  char *v502;
  uint64_t v503;
  gss::Allocator *v504;
  uint64_t v505;
  uint64_t v506;
  _DWORD *v507;
  uint64_t v509;
  gss::Allocator *v510;
  uint64_t v511;
  __int128 v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  void *v519;
  uint64_t v520;
  _QWORD *v521;
  gss::Allocator *v522;
  uint64_t v523;
  __n128 v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  uint64_t v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t *v536;
  unint64_t v537;
  unint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  unsigned __int8 v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  _QWORD *v550;
  unsigned __int8 v551;
  float *v552;
  unsigned __int16 *v553;
  float v554;
  float v555;
  uint64_t v556;
  uint64_t v557;
  _DWORD *v558;
  _DWORD *v559;
  unint64_t v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  unsigned int *v564;
  unsigned int *v565;
  unint64_t m;
  unint64_t v567;
  unsigned int v568;
  unint64_t v569;
  unsigned int *v570;
  unsigned int v571;
  uint64_t v572;
  unsigned int v573;
  unint64_t v574;
  unsigned int *v575;
  unsigned int *v576;
  unint64_t n;
  unint64_t v578;
  unsigned int v579;
  unint64_t v580;
  unsigned int *v581;
  unsigned int v582;
  uint64_t v583;
  unsigned int v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  unint64_t v588;
  unint64_t v589;
  uint8x8_t v590;
  float **v591;
  float *v592;
  unint64_t v593;
  uint64_t v594;
  float *v595;
  uint64_t v596;
  unint64_t *v597;
  unint64_t v598;
  unint64_t v599;
  unint64_t *v600;
  unint64_t v601;
  unsigned __int8 v602;
  ggl::CommandBuffer *v603;
  float v604;
  float v605;
  _BOOL8 v606;
  unint64_t v607;
  unint64_t v608;
  size_t v609;
  void *v610;
  void *v611;
  uint64_t v612;
  float *v613;
  size_t v614;
  size_t v615;
  size_t v616;
  float *v617;
  size_t v618;
  uint64_t v619;
  uint64_t v620;
  unint64_t v621;
  uint8x8_t v622;
  uint64_t v623;
  float *v624;
  uint64_t v625;
  size_t v626;
  uint64_t v627;
  uint64_t v628;
  float **v629;
  unint64_t v630;
  md::SharedResource **v631;
  unint64_t v632;
  md::SharedResource *v633;
  _QWORD *v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  md::SharedResource **v641;
  uint64_t v642;
  md::SharedResource *v643;
  char *v644;
  char *v645;
  unint64_t v646;
  unint64_t v647;
  char *v648;
  md::SharedResource *v649;
  uint64_t v650;
  void (***v651)(_QWORD);
  void (***v652)(_QWORD);
  unsigned __int8 v653;
  uint64_t v654;
  md::SharedResource *v655;
  unsigned __int8 v656;
  uint64_t v657;
  md::SharedResource **v658;
  __int128 *v659;
  uint64_t v660;
  __int128 v661;
  __int128 v662;
  void *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  std::__shared_weak_count *v668;
  unint64_t *v669;
  unint64_t v670;
  std::__shared_weak_count *v671;
  unint64_t *v672;
  unint64_t v673;
  unsigned __int8 v674;
  uint64_t v675;
  uint64_t v676;
  std::__shared_weak_count *v677;
  unint64_t *v678;
  unint64_t v679;
  _QWORD *v680;
  uint64_t v681;
  uint64_t (**v682)();
  unint64_t v683;
  uint64_t (**v684)();
  _QWORD *v685;
  _QWORD *v686;
  unsigned __int8 v687;
  uint64_t v688;
  _QWORD *v689;
  _QWORD *v690;
  void *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  _QWORD *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  void *v700;
  void *v701;
  _QWORD *v702;
  unint64_t v703;
  void (**v704)(void);
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  void *v708;
  id v709;
  uint64_t v710;
  _QWORD *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  void *v715;
  void *v716;
  _QWORD *v717;
  unint64_t v718;
  void (**v719)(void);
  uint64_t v720;
  void *v721;
  __int16 v722;
  __int16 v723;
  _QWORD *v724;
  int8x8_t v725;
  uint8x8_t v726;
  unint64_t v727;
  _QWORD *v728;
  _QWORD *v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  id v735;
  void *v736;
  void *v737;
  uint64_t v738;
  id v739;
  void *v740;
  void *v741;
  BOOL v742;
  char v743;
  id v744;
  id v745;
  _BOOL4 v746;
  void *v747;
  int v748;
  int v749;
  _QWORD *v750;
  int8x8_t v751;
  uint8x8_t v752;
  unint64_t v753;
  _QWORD *v754;
  _QWORD *v755;
  uint64_t v756;
  unint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t *v760;
  uint64_t v761;
  std::__shared_weak_count *v762;
  unint64_t *v763;
  unint64_t v764;
  PolylineCoordinate v765;
  unint64_t *v766;
  unint64_t v767;
  void *v768;
  void *v769;
  unsigned int v770;
  uint64_t v771;
  void *v773;
  void *v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  PolylineCoordinate v778;
  unint64_t *v779;
  unint64_t v780;
  void *v781;
  void *v782;
  void *v783;
  unint64_t *v784;
  unint64_t v785;
  PolylineCoordinate v786;
  unint64_t *v787;
  int v788;
  float v789;
  uint64_t v790;
  uint64_t *v791;
  uint64_t *v792;
  unint64_t v793;
  uint64_t v794;
  unint64_t v795;
  float v796;
  uint64_t v797;
  unint64_t v798;
  float v799;
  void *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t ii;
  uint64_t v804;
  void *v805;
  int v806;
  uint64_t v807;
  _QWORD *v808;
  uint64_t v809;
  uint64_t v810;
  BOOL v811;
  uint64_t *v812;
  uint64_t v813;
  uint64_t v814;
  _QWORD *v815;
  std::__shared_weak_count *v816;
  uint64_t v817;
  unint64_t *v818;
  unint64_t v819;
  std::__shared_weak_count *v820;
  unint64_t *v821;
  unint64_t v822;
  uint64_t v823;
  unint64_t *v824;
  unint64_t v825;
  unint64_t *v826;
  unint64_t *v827;
  unint64_t v828;
  _QWORD *v829;
  std::__shared_weak_count *v830;
  uint64_t v831;
  unint64_t *v832;
  unint64_t v833;
  std::__shared_weak_count *v834;
  unint64_t *v835;
  unint64_t v836;
  uint64_t v837;
  unint64_t *v838;
  unint64_t v839;
  unint64_t *v840;
  unint64_t *v841;
  unint64_t v842;
  _QWORD *v843;
  uint64_t v844;
  BOOL v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  _QWORD *v849;
  std::__shared_weak_count *v850;
  unint64_t *v851;
  unint64_t v852;
  std::__shared_weak_count *v853;
  unint64_t *v854;
  unint64_t v855;
  uint64_t v856;
  BOOL v857;
  unint64_t *v858;
  unint64_t v859;
  unint64_t *v860;
  unint64_t *v861;
  unint64_t v862;
  _QWORD *v863;
  uint64_t v864;
  BOOL v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  _QWORD *v869;
  std::__shared_weak_count *v870;
  unint64_t *v871;
  unint64_t v872;
  std::__shared_weak_count *v873;
  unint64_t *v874;
  unint64_t v875;
  uint64_t v876;
  BOOL v877;
  unint64_t *v878;
  unint64_t v879;
  unint64_t *v880;
  unint64_t *v881;
  unint64_t v882;
  float v883;
  id v884;
  void *v885;
  int v886;
  BOOL v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  const md::LayoutContext *v892;
  uint64_t v893;
  uint64_t v894;
  _QWORD *v895;
  uint64_t v896;
  uint64_t v897;
  gss::FeatureAttributeSet *v898;
  gss::Allocator *v899;
  uint64_t v900;
  uint64_t v901;
  std::__shared_weak_count *v902;
  unint64_t *v903;
  unint64_t v904;
  unint64_t *v905;
  unint64_t v906;
  std::__shared_weak_count *v907;
  unint64_t *v908;
  unint64_t v909;
  char v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  _BOOL4 v914;
  uint64_t v915;
  _QWORD *v916;
  int8x8_t v917;
  uint8x8_t v918;
  unint64_t v919;
  _QWORD *v920;
  _QWORD *v921;
  uint64_t v922;
  uint64_t v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  __n128 v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  unint64_t *v935;
  unint64_t v936;
  std::__shared_weak_count *v937;
  unint64_t *v938;
  unint64_t v939;
  uint64_t v940;
  double v941;
  NSObject *v942;
  uint64_t v943;
  float v944;
  float v945;
  NSObject *v946;
  double v947;
  int v948;
  BOOL v949;
  id v950;
  void *v951;
  float v952;
  int v953;
  int8x8_t *v954;
  float v955;
  BOOL v956;
  int v957;
  uint64_t v958;
  BOOL v959;
  double v960;
  uint64_t v961;
  float v962;
  float v963;
  void *v964;
  float v965;
  BOOL v966;
  int v967;
  id v968;
  void *v969;
  uint64_t v970;
  void *v971;
  uint64_t v972;
  uint64_t v973;
  _QWORD *v974;
  _QWORD *v975;
  const md::LayoutContext *v976;
  uint64_t *v977;
  uint64_t *v978;
  char *v979;
  char *v980;
  unint64_t v981;
  int v982;
  int v983;
  int v984;
  uint64_t v985;
  _QWORD *v986;
  uint64_t v987;
  uint64_t v988;
  NSObject *v989;
  uint64_t v990;
  _QWORD *v991;
  int8x8_t v992;
  uint8x8_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  _QWORD *v997;
  _QWORD *v998;
  _QWORD *v999;
  unint64_t v1000;
  uint64_t v1001;
  unint64_t v1002;
  double v1003;
  uint64_t v1004;
  unint64_t v1005;
  float *v1006;
  double v1007;
  uint64_t v1008;
  uint64_t v1009;
  int v1010;
  uint64_t v1012;
  unint64_t v1013;
  uint64_t *v1014;
  uint64_t *v1015;
  char v1016;
  uint64_t v1017;
  uint64_t *v1018;
  uint64_t *v1019;
  uint64_t v1020;
  BOOL v1021;
  unint64_t *v1022;
  unint64_t *v1023;
  uint64_t v1024;
  uint64_t v1025;
  float v1026;
  uint64_t v1027;
  uint64_t v1028;
  __int32 v1029;
  __int32 v1030;
  double v1031;
  float v1032;
  float32_t v1033;
  int v1034;
  _QWORD *v1035;
  unint64_t v1036;
  float32x4_t *v1037;
  unint64_t v1038;
  uint64_t v1039;
  _QWORD *v1040;
  uint64_t v1041;
  unint64_t v1042;
  void (***v1043)(void);
  void (**v1044)(void);
  _QWORD *v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  unsigned __int8 *v1049;
  unint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  unint64_t v1057;
  unsigned __int8 *v1058;
  unint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  char ***v1065;
  char ***v1066;
  _QWORD *v1067;
  uint64_t v1068;
  char **v1069;
  char ***v1070;
  char ***v1071;
  _QWORD *v1072;
  uint64_t v1073;
  char **v1074;
  char ***v1075;
  char ***v1076;
  _QWORD *v1077;
  uint64_t v1078;
  char **v1079;
  int v1080;
  int v1081;
  int v1082;
  char v1083;
  int v1084;
  _QWORD *v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  unint64_t v1090;
  unsigned __int8 *v1091;
  unint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  char ***v1097;
  char ***v1098;
  _QWORD *v1099;
  uint64_t v1100;
  char **v1101;
  uint64_t v1102;
  uint64_t v1103;
  char ***v1104;
  char ***v1105;
  unsigned int v1106;
  _QWORD *v1107;
  uint64_t v1108;
  char **v1109;
  uint64_t v1110;
  _QWORD *v1111;
  uint64_t v1112;
  uint64_t v1113;
  _QWORD *v1114;
  uint64_t v1115;
  unint64_t v1116;
  uint64_t v1117;
  void (*v1118)(void);
  char **v1119;
  void (**v1120)(void);
  char **v1121;
  char **v1122;
  void (*v1123)(void);
  uint64_t v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  _QWORD *v1128;
  uint64_t v1129;
  _QWORD *v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  char *v1135;
  uint64_t v1136;
  void (**v1137)(void);
  char **v1138;
  uint64_t v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  _QWORD *v1143;
  uint64_t v1144;
  _QWORD *v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  char *v1150;
  uint64_t v1151;
  int v1152;
  _QWORD *v1153;
  unsigned __int8 *v1154;
  unint64_t v1155;
  uint64_t v1156;
  _QWORD *v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  unint64_t v1162;
  unsigned __int8 *v1163;
  unint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  char ***v1169;
  char ***v1170;
  _QWORD *v1171;
  uint64_t v1172;
  char **v1173;
  uint64_t v1174;
  unint64_t v1175;
  unsigned __int8 *v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  _QWORD *v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  unint64_t v1186;
  unsigned __int8 *v1187;
  unint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  unint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  void *v1198;
  float v1199;
  float v1200;
  uint64_t v1201;
  unsigned __int8 v1202;
  uint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  unint64_t v1206;
  unsigned __int8 *v1207;
  unint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  unint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  _QWORD *v1216;
  unint64_t v1217;
  _QWORD *v1218;
  uint64_t v1219;
  uint64_t v1220;
  unint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  _QWORD *v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  unint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  _OWORD *v1232;
  __int128 *v1233;
  uint64_t v1234;
  __int128 v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  gss::FeatureAttributeSet *v1239;
  gss::Allocator *v1240;
  uint64_t v1241;
  __int128 v1242;
  unint64_t *v1243;
  unint64_t v1244;
  unint64_t v1245;
  unint64_t *v1246;
  unint64_t v1247;
  unint64_t *v1248;
  unint64_t v1249;
  uint64_t v1250;
  BOOL v1251;
  void *v1252;
  unint64_t *v1253;
  unint64_t v1254;
  uint64_t v1255;
  std::__shared_weak_count *v1256;
  unint64_t *v1257;
  unint64_t v1258;
  std::__shared_weak_count *v1259;
  unint64_t *v1260;
  unint64_t v1261;
  _QWORD *v1262;
  uint64_t v1263;
  std::__shared_weak_count *v1264;
  unint64_t *v1265;
  unint64_t v1266;
  std::__shared_weak_count *v1267;
  unint64_t *v1268;
  unint64_t v1269;
  void *v1270;
  void *v1271;
  __int128 v1272;
  unint64_t *v1273;
  unint64_t v1274;
  std::__shared_weak_count *v1275;
  unint64_t *v1276;
  unint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  std::__shared_weak_count *v1281;
  unint64_t *v1282;
  unint64_t v1283;
  unint64_t v1284;
  unint64_t *v1285;
  unint64_t v1286;
  std::__shared_weak_count *v1287;
  unint64_t *v1288;
  unint64_t v1289;
  float v1290;
  float v1291;
  _QWORD *v1292;
  uint64_t v1293;
  BOOL v1294;
  _QWORD *v1295;
  uint64_t v1296;
  BOOL v1297;
  uint64_t v1298;
  __n128 v1299;
  _QWORD *v1300;
  uint64_t v1301;
  uint64_t v1302;
  __n128 v1303;
  _QWORD *v1304;
  uint64_t v1305;
  std::__shared_weak_count *v1306;
  unint64_t *v1307;
  unint64_t v1308;
  std::__shared_weak_count *v1309;
  unint64_t *v1310;
  unint64_t v1311;
  std::__shared_weak_count *v1312;
  uint64_t v1313;
  unint64_t *v1314;
  unint64_t v1315;
  uint64_t v1316;
  void *v1317;
  uint64_t v1318;
  float32x2_t v1319;
  float32x2_t v1320;
  float32x2_t v1321;
  float32x2_t v1322;
  float32x2_t v1323;
  float32x2_t v1324;
  float32x2_t v1325;
  _QWORD *v1326;
  uint64_t v1327;
  unint64_t v1328;
  float32x2_t *v1329;
  unint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t *v1334;
  unint64_t v1335;
  std::__shared_weak_count *v1336;
  unint64_t *v1337;
  unint64_t v1338;
  ggl::RenderItem *v1339;
  unint64_t *v1340;
  unint64_t v1341;
  uint64_t v1342;
  void *v1343;
  uint64_t v1344;
  void *v1345;
  void *v1346;
  const md::LayoutContext *v1347;
  id *v1348;
  int v1349;
  VKTimedAnimation *v1350;
  void *v1351;
  uint64_t v1352;
  std::__shared_weak_count *v1353;
  unint64_t *v1354;
  unint64_t v1355;
  uint64_t v1356;
  std::__shared_weak_count *v1357;
  unint64_t *v1358;
  unint64_t v1359;
  void *v1360;
  void *v1361;
  std::__shared_weak_count *v1362;
  unint64_t *v1363;
  unint64_t v1364;
  std::__shared_weak_count *v1365;
  unint64_t *v1366;
  unint64_t v1367;
  uint64_t v1368;
  id v1369;
  _OWORD *v1370;
  id v1371;
  void *v1372;
  uint64_t *v1373;
  void *v1374;
  std::__shared_weak_count *v1375;
  unint64_t *v1376;
  unint64_t v1377;
  std::__shared_weak_count *v1378;
  unint64_t *v1379;
  unint64_t v1380;
  std::__shared_weak_count *v1381;
  unint64_t *v1382;
  unint64_t v1383;
  std::__shared_weak_count *v1384;
  unint64_t *v1385;
  unint64_t v1386;
  uint64_t v1387;
  unint64_t *v1388;
  unint64_t *v1389;
  unint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  unint64_t *v1394;
  unint64_t v1395;
  unsigned __int8 v1396;
  char *v1397;
  uint64_t v1398;
  std::__shared_weak_count *v1399;
  unint64_t *v1400;
  unint64_t v1401;
  unint64_t v1402;
  __int128 v1403;
  unint64_t *v1404;
  unint64_t v1405;
  int8x16_t v1406;
  int16x8_t v1407;
  int32x4_t v1408;
  int8x16_t v1409;
  int8x16_t v1410;
  int16x8_t v1411;
  int32x4_t v1412;
  int8x16_t v1413;
  int32x4_t v1414;
  int8x16_t v1415;
  int32x4_t v1416;
  int8x16_t v1417;
  int8x16_t v1418;
  int8x16_t v1419;
  int8x16_t v1420;
  int8x16_t v1421;
  int8x16_t v1422;
  int8x16_t v1423;
  int8x16_t v1424;
  int8x16_t v1425;
  int16x8_t v1426;
  int32x4_t v1427;
  int8x16_t v1428;
  int16x8_t v1429;
  int32x4_t v1430;
  int8x16_t v1431;
  int32x4_t v1432;
  int8x16_t v1433;
  int32x4_t v1434;
  int8x16_t v1435;
  int8x16_t v1436;
  int8x16_t v1437;
  int8x16_t v1438;
  int8x16_t v1439;
  int8x16_t v1440;
  int8x16_t v1441;
  int8x16_t v1442;
  int8x16_t v1443;
  int8x16_t v1444;
  int8x16_t v1445;
  int8x16_t v1446;
  int8x16_t v1447;
  int8x16_t v1448;
  int16x8_t v1449;
  int32x4_t v1450;
  int8x16_t v1451;
  int16x8_t v1452;
  int32x4_t v1453;
  int8x16_t v1454;
  int32x4_t v1455;
  int8x16_t v1456;
  int32x4_t v1457;
  int8x16_t v1458;
  int8x16_t v1459;
  int8x16_t v1460;
  int8x16_t v1461;
  int8x16_t v1462;
  int8x16_t v1463;
  int16x8_t v1464;
  int32x4_t v1465;
  int8x16_t v1466;
  int16x8_t v1467;
  int32x4_t v1468;
  int8x16_t v1469;
  int32x4_t v1470;
  int8x16_t v1471;
  int32x4_t v1472;
  int8x16_t v1473;
  int8x16_t v1474;
  int8x16_t v1475;
  int8x16_t v1476;
  std::__shared_weak_count *v1477;
  unint64_t *v1478;
  unint64_t v1479;
  std::__shared_weak_count *v1480;
  unint64_t *v1481;
  unint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  void *v1487;
  void *v1488;
  unint64_t *v1489;
  unint64_t v1490;
  std::__shared_weak_count *v1491;
  unint64_t *v1492;
  unint64_t v1493;
  _QWORD *v1494;
  std::__shared_weak_count *v1495;
  unint64_t *v1496;
  unint64_t v1497;
  std::__shared_weak_count *v1498;
  unint64_t *v1499;
  unint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  int v1504;
  float v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t *v1508;
  uint64_t *v1509;
  uint64_t v1510;
  uint64_t v1511;
  _QWORD *v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t *v1517;
  uint64_t *v1518;
  uint64_t v1519;
  _QWORD *v1520;
  std::__shared_weak_count *v1521;
  void (**v1522)(void);
  unint64_t *v1523;
  unint64_t v1524;
  std::__shared_weak_count *v1525;
  unint64_t *v1526;
  unint64_t v1527;
  void (**v1528)(void);
  BOOL v1529;
  unint64_t *v1530;
  unint64_t v1531;
  unint64_t *v1532;
  unint64_t *v1533;
  unint64_t v1534;
  uint64_t v1535;
  __n128 v1536;
  uint64_t v1537;
  __n128 v1538;
  _QWORD *v1539;
  uint64_t v1540;
  std::__shared_weak_count *v1541;
  unint64_t *v1542;
  unint64_t v1543;
  int v1544;
  void *v1545;
  int v1546;
  void *v1547;
  void *v1548;
  BOOL v1549;
  uint64_t v1550;
  _QWORD *v1551;
  uint64_t v1552;
  uint64_t v1553;
  __int16 v1554;
  uint64_t v1555;
  _QWORD *v1556;
  int8x8_t v1557;
  uint8x8_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  std::__shared_weak_count *v1561;
  unint64_t *v1562;
  unint64_t v1563;
  std::__shared_weak_count *v1564;
  unint64_t *v1565;
  unint64_t v1566;
  _QWORD *v1567;
  uint64_t v1568;
  _QWORD *v1569;
  _QWORD *v1570;
  uint64_t v1571;
  uint64_t v1572;
  std::__shared_weak_count *v1573;
  unint64_t *v1574;
  unint64_t v1575;
  unint64_t v1576;
  uint64_t v1577;
  uint64_t *v1578;
  uint64_t v1579;
  unint64_t v1580;
  float32x4_t *v1581;
  gss::Allocator *v1582;
  unint64_t v1583;
  uint64_t v1584;
  _QWORD *v1585;
  _QWORD *v1586;
  _QWORD *v1587;
  uint64_t v1588;
  std::__shared_weak_count *v1589;
  unint64_t *v1590;
  unint64_t v1591;
  unint64_t v1592;
  unint64_t *v1593;
  unint64_t v1594;
  float v1595;
  float v1596;
  uint64_t v1597;
  float *v1598;
  float v1599;
  BOOL v1600;
  unsigned int v1601;
  float *v1602;
  float v1603;
  uint64_t v1604;
  float *v1605;
  float v1606;
  BOOL v1607;
  unsigned int v1608;
  float *v1609;
  float v1610;
  uint64_t v1611;
  float *v1612;
  float v1613;
  BOOL v1614;
  unsigned int v1615;
  float *v1616;
  float v1617;
  unint64_t v1618;
  float v1619;
  float *v1620;
  float v1621;
  BOOL v1622;
  unsigned int v1623;
  float v1624;
  float v1625;
  float v1626;
  float v1627;
  float v1628;
  float v1629;
  _QWORD *v1630;
  unint64_t v1631;
  uint64_t v1632;
  ggl::RenderItem *v1633;
  _QWORD *v1634;
  unint64_t v1635;
  uint64_t v1636;
  ggl::RenderItem *v1638;
  gss::Allocator *v1639;
  std::__shared_weak_count *v1640;
  unint64_t *v1641;
  unint64_t v1642;
  BOOL v1643;
  uint64_t v1644;
  uint64_t v1645;
  _QWORD *v1646;
  int8x8_t v1647;
  uint8x8_t v1648;
  uint64_t v1649;
  _QWORD *v1650;
  _QWORD *v1651;
  unint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  _QWORD *v1656;
  uint64_t v1657;
  int v1658;
  __n128 v1659;
  uint64_t v1660;
  unint64_t v1661;
  float *v1662;
  double v1663;
  unint64_t v1664;
  double v1665;
  uint64_t v1666;
  unint64_t v1667;
  uint64_t *v1668;
  uint64_t *v1669;
  char v1670;
  uint64_t v1671;
  uint64_t *v1672;
  uint64_t *v1673;
  uint64_t v1674;
  BOOL v1675;
  uint64_t *v1676;
  uint64_t *v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  std::__shared_weak_count *v1681;
  unint64_t *v1682;
  unint64_t v1683;
  unint64_t v1684;
  unint64_t *v1685;
  unint64_t v1686;
  uint64_t v1687;
  float v1688;
  float v1689;
  float v1690;
  float v1691;
  float v1692;
  uint64_t v1693;
  uint64_t v1694;
  size_t v1695;
  _BYTE *v1696;
  NSObject *v1697;
  _BYTE *v1698;
  size_t *v1699;
  void *v1700;
  size_t v1701;
  void *v1702;
  void **v1703;
  _BYTE *v1704;
  size_t v1705;
  void **v1706;
  void **v1707;
  void *v1708;
  void **v1709;
  void **v1710;
  float v1711;
  float v1712;
  float v1713;
  double v1714;
  double v1715;
  double v1716;
  double v1717;
  _QWORD *v1718;
  unint64_t v1719;
  _QWORD *v1720;
  unint64_t v1721;
  id v1722;
  void *v1723;
  uint64_t *v1724;
  float v1725;
  std::__shared_weak_count *v1726;
  unint64_t *v1727;
  unint64_t v1728;
  unint64_t *v1729;
  unint64_t v1730;
  md::SharedResource *v1731;
  uint64_t *v1732;
  uint64_t *v1733;
  uint64_t v1734;
  float v1735;
  std::__shared_weak_count *v1736;
  unint64_t *v1737;
  unint64_t v1738;
  unint64_t *v1739;
  unint64_t v1740;
  md::SharedResource *v1741;
  uint64_t *v1742;
  float v1743;
  float v1744;
  uint64_t v1745;
  uint64_t v1746;
  _QWORD *v1747;
  unint64_t v1748;
  float32x2_t *v1749;
  uint64_t v1750;
  unint64_t v1751;
  std::__shared_weak_count *v1752;
  unint64_t *v1753;
  unint64_t v1754;
  std::__shared_weak_count *v1755;
  unint64_t *v1756;
  unint64_t v1757;
  std::__shared_weak_count *v1758;
  unint64_t *v1759;
  unint64_t v1760;
  uint64_t v1761;
  _QWORD *v1762;
  uint64_t v1763;
  uint64_t v1764;
  _QWORD *v1765;
  uint64_t v1766;
  uint64_t v1767;
  char **v1768;
  char **v1769;
  uint64_t v1770;
  __int128 v1771;
  __int128 v1772;
  __int128 v1773;
  _QWORD *v1774;
  uint64_t v1775;
  _QWORD *v1776;
  __int128 v1777;
  __int128 v1778;
  __int128 v1779;
  __int128 v1780;
  char *v1781;
  uint64_t v1782;
  uint64_t v1783;
  char **v1784;
  uint64_t v1785;
  __int128 v1786;
  __int128 v1787;
  __int128 v1788;
  _QWORD *v1789;
  uint64_t v1790;
  _QWORD *v1791;
  __int128 v1792;
  __int128 v1793;
  __int128 v1794;
  __int128 v1795;
  char *v1796;
  void *v1797;
  uint64_t v1798;
  uint64_t *v1799;
  _QWORD *v1800;
  int8x8_t v1801;
  uint8x8_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  std::__shared_weak_count *v1805;
  unint64_t *v1806;
  unint64_t v1807;
  id v1808;
  _OWORD *v1809;
  _QWORD *v1810;
  unint64_t *v1811;
  unint64_t v1812;
  unint64_t *v1813;
  unint64_t *v1814;
  __int128 v1815;
  unint64_t *v1816;
  unint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t (***v1820)();
  uint64_t v1821;
  _QWORD *v1822;
  _QWORD *v1823;
  uint64_t v1824;
  unint64_t v1825;
  uint64_t v1826;
  _QWORD *v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  unint64_t *v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t *v1835;
  uint64_t v1836;
  md::SharedResource **v1837;
  uint64_t v1838;
  unint64_t *v1839;
  uint64_t v1840;
  uint64_t v1841;
  _QWORD *v1842;
  uint64_t v1843;
  _QWORD *v1844;
  uint64_t v1845;
  unint64_t *v1846;
  unint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  void *v1850;
  void *v1851;
  void *v1852;
  void *v1853;
  uint64_t v1854;
  int *v1855;
  float64x2_t *v1856;
  uint64_t v1858;
  void *v1859;
  uint64_t v1860;
  uint64_t *v1861;
  uint64_t v1862;
  _QWORD *v1863;
  unint64_t v1864;
  BOOL v1865;
  _QWORD *v1866;
  int v1867;
  int *v1868;
  int *v1869;
  unint64_t v1870;
  unint64_t v1871;
  int *v1872;
  uint64_t *v1873;
  uint64_t **v1874;
  unint64_t v1875;
  uint64_t **v1876;
  uint64_t *v1877;
  uint64_t v1878;
  uint64_t *v1879;
  uint64_t v1880;
  uint64_t **v1881;
  uint64_t **v1882;
  unint64_t v1883;
  uint64_t *v1884;
  uint64_t v1885;
  uint64_t *v1886;
  int *v1887;
  unint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t *v1891;
  uint64_t **v1892;
  uint64_t **v1893;
  unint64_t v1894;
  uint64_t *v1895;
  uint64_t v1896;
  uint64_t *v1897;
  int *v1898;
  int *v1899;
  uint64_t v1900;
  uint64_t v1901;
  int v1902;
  char *v1903;
  int v1904;
  int *v1905;
  char *v1906;
  uint64_t v1907;
  unint64_t v1908;
  unint64_t v1909;
  unint64_t v1910;
  unint64_t v1911;
  char *v1912;
  char *v1913;
  char *v1914;
  unint64_t v1915;
  char *v1916;
  uint64_t v1917;
  uint64_t v1918;
  char *v1919;
  __int128 *v1920;
  uint64_t v1921;
  __int128 v1922;
  int *v1923;
  int v1924;
  int v1925;
  char *v1926;
  uint64_t v1927;
  unint64_t v1928;
  unint64_t v1929;
  char *v1930;
  char *v1931;
  int *v1932;
  unint64_t v1933;
  int *v1934;
  char *v1935;
  uint64_t v1936;
  int *v1937;
  unint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  std::__shared_weak_count *v1945;
  unint64_t *v1946;
  unint64_t v1947;
  uint64_t v1948;
  double v1949;
  double v1950;
  double v1951;
  double v1952;
  double v1953;
  double v1954;
  uint64_t v1955;
  uint64_t v1956;
  unint64_t v1957;
  uint64_t v1958;
  unint64_t v1959;
  std::__shared_weak_count *v1960;
  unint64_t *v1961;
  unint64_t v1962;
  uint64_t v1963;
  unint64_t v1964;
  __int128 v1965;
  uint64_t *v1966;
  BOOL v1967;
  uint64_t v1968;
  uint64_t v1969;
  float *v1970;
  const float *v1971;
  uint64_t v1972;
  float32x4_t v1973;
  const float *v1974;
  float *v1975;
  double v1976;
  double v1977;
  float64x2_t v1978;
  uint64_t v1979;
  _QWORD *v1980;
  uint64_t v1981;
  uint64_t v1982;
  _QWORD *v1983;
  _QWORD *v1984;
  unint64_t v1985;
  uint64_t v1986;
  _QWORD *v1987;
  unint64_t v1988;
  _QWORD *v1989;
  _QWORD *v1990;
  _QWORD *v1991;
  unint64_t v1992;
  _QWORD *v1993;
  ggl::CommandBuffer *v1994;
  uint64_t v1995;
  uint64_t v1996;
  unint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  _QWORD *v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  unint64_t v2006;
  _QWORD *v2007;
  uint64_t v2008;
  _OWORD *v2009;
  __int128 *v2010;
  uint64_t v2011;
  __int128 v2012;
  uint64_t v2013;
  uint64_t v2014;
  _QWORD *v2015;
  uint64_t v2016;
  char *v2017;
  __int128 *v2018;
  uint64_t v2019;
  __int128 v2020;
  id v2021;
  gss::Allocator *v2022;
  std::__shared_weak_count *v2023;
  unint64_t *v2024;
  unint64_t v2025;
  uint64_t v2026;
  BOOL v2027;
  uint64_t v2028;
  std::__shared_weak_count *v2029;
  unint64_t *v2030;
  unint64_t v2031;
  uint64_t v2032;
  geo::read_write_lock *v2033;
  const char *v2034;
  malloc_zone_t *zone;
  ggl::RouteLineArrowShader *v2036;
  unsigned __int8 v2037;
  unsigned __int8 v2038;
  unsigned __int8 v2039;
  unsigned __int8 v2040;
  unsigned __int8 v2041;
  unsigned __int8 v2042;
  uint64_t v2043;
  id v2046;
  id *v2047;
  id v2048;
  float obj;
  id obja;
  int v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  int v2057;
  uint64_t v2058;
  uint64_t *v2059;
  char *v2060;
  unint64_t v2061;
  void *v2062;
  char *v2063;
  std::__shared_weak_count *v2064;
  char *v2065;
  int *v2066;
  md::RouteLineSection *v2067;
  md::RouteLineSection *v2068;
  float32x4_t v2069;
  uint64_t v2070;
  float64x2_t v2071;
  float64x2_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  float64x2_t v2075;
  float64x2_t v2076;
  char v2077;
  uint64_t (*v2078)();
  int v2079;
  float64x2_t v2080;
  void *v2081;
  uint64_t (**v2082)();
  _BOOL4 v2083;
  float64x2_t v2084;
  float64x2_t v2085;
  uint64_t v2086;
  float64x2_t v2087;
  uint64_t v2088;
  float **v2089;
  _BOOL4 v2090;
  float64x2_t v2091;
  float64x2_t v2092;
  uint64_t v2093;
  _BOOL4 v2094;
  float v2095;
  double v2096;
  float64x2_t v2097;
  unint64_t v2098;
  double v2099;
  float64x2_t v2100;
  ggl::CommandBuffer *v2102;
  ggl::CommandBuffer *v2103;
  ggl::CommandBuffer *v2104;
  ggl::CommandBuffer *v2105;
  unint64_t v2106;
  char v2107;
  _QWORD *v2108;
  uint64_t *v2109;
  _QWORD *v2110;
  float64x2_t v2111;
  float64x2_t v2112;
  double v2113;
  _QWORD **v2114;
  char v2115;
  unint64_t v2116;
  gss::Allocator *v2117;
  float32x4_t v2118;
  _QWORD *v2119;
  unsigned int v2120;
  int *v2121;
  float64x2_t v2122;
  float64x2_t v2123;
  _QWORD v2124[6];
  std::__shared_weak_count *v2125;
  _QWORD v2126[5];
  std::__shared_weak_count *v2127;
  const md::LayoutContext *v2128;
  _QWORD v2129[6];
  std::__shared_weak_count *v2130;
  _QWORD v2131[6];
  std::__shared_weak_count *v2132;
  int v2133;
  _QWORD v2134[5];
  uint64_t v2135;
  uint64_t *v2136;
  uint64_t v2137;
  char v2138;
  uint64_t v2139;
  std::__shared_weak_count *v2140;
  _QWORD v2141[7];
  std::__shared_weak_count *v2142;
  _QWORD v2143[6];
  __int128 v2144;
  __int128 v2145;
  __int128 v2146;
  _BYTE v2147[24];
  __n128 v2148;
  __int128 v2149;
  __int128 v2150;
  uint64_t v2151;
  int v2152;
  uint64_t v2153;
  char v2154;
  char v2155;
  uint64_t v2156;
  uint64_t v2157;
  __int16 v2158;
  int v2159;
  float v2160;
  _DWORD v2161[6];
  float v2162;
  long double __x;
  char v2164;
  _BYTE v2165[15];
  unint64_t v2166;
  uint64_t v2167;
  std::__shared_weak_count *v2168;
  _QWORD v2169[2];
  _QWORD v2170[2];
  _QWORD v2171[2];
  _BYTE v2172[15];
  char v2173;
  _QWORD v2174[7];
  std::__shared_weak_count *v2175;
  float v2176;
  int v2177;
  int v2178;
  BOOL v2179;
  uint64_t v2180;
  _QWORD v2181[5];
  std::__shared_weak_count *v2182;
  _QWORD v2183[5];
  std::__shared_weak_count *v2184;
  _QWORD v2185[5];
  std::__shared_weak_count *v2186;
  _QWORD v2187[5];
  std::__shared_weak_count *v2188;
  _QWORD v2189[5];
  std::__shared_weak_count *v2190;
  _QWORD v2191[5];
  std::__shared_weak_count *v2192;
  void *__p[2];
  char *v2194;
  uint64_t v2195;
  __int16 v2196;
  unint64_t v2197;
  _QWORD **v2198;
  _QWORD *v2199[4];
  _BYTE v2200[32];
  _BYTE v2201[48];
  void *v2202[2];
  float64x2_t v2203;
  _BYTE v2204[32];
  uint64_t v2205;
  _BYTE v2206[12];
  _DWORD v2207[5];
  uint64_t v2208;
  __int128 v2209;
  uint64_t v2210;
  uint64_t v2211;
  uint64_t v2212;
  float v2213;
  __int32 v2214;
  float v2215;
  _BYTE buf[32];
  _BYTE v2217[48];
  void *v2218[2];
  float64x2_t v2219;
  float64x2_t v2220;
  _BYTE v2221[56];
  __int128 v2222;
  _BYTE v2223[24];
  void *v2224;
  float v2225;
  __int128 v2226;
  __int128 v2227;
  __int128 v2228;
  __int128 v2229;
  _QWORD v2230[3];
  _QWORD *v2231;
  _QWORD v2232[3];
  _QWORD *v2233;
  uint64_t v2234[3];
  uint64_t *v2235;
  md::SharedResource *v2236[2];
  md::SharedResource **v2237;
  uint64_t (**v2238)();
  std::__shared_weak_count *v2239;
  uint64_t v2240;
  uint64_t *v2241;
  _BYTE v2242[24];
  _BYTE *v2243;
  uint64_t v2244;
  float32x4x3_t v2245;
  float32x4x4_t v2246;

  v2244 = *MEMORY[0x1E0C80C00];
  if (*(float *)(*a3 + 200) >= 1.0 || *(_QWORD *)(*a3 + 176))
  {
    v6 = 0;
  }
  else
  {
    v50 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", 0.25);
    v51 = *(void **)(*a3 + 176);
    *(_QWORD *)(*a3 + 176) = v50;

    v2191[0] = MEMORY[0x1E0C809B0];
    v2191[1] = 3321888768;
    v2191[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke;
    v2191[3] = &__block_descriptor_48_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e8_v12__0f8l;
    v52 = *a3;
    v53 = (std::__shared_weak_count *)a3[1];
    v2191[4] = *a3;
    v2192 = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(p_shared_owners);
      while (__stxr(v55 + 1, p_shared_owners));
      v52 = *a3;
    }
    objc_msgSend(*(id *)(v52 + 176), "setStepHandler:", v2191);
    v2189[0] = MEMORY[0x1E0C809B0];
    v2189[1] = 3321888768;
    v2189[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_16;
    v2189[3] = &__block_descriptor_48_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e8_v12__0B8l;
    v56 = *a3;
    v57 = (std::__shared_weak_count *)a3[1];
    v2189[4] = *a3;
    v2190 = v57;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      v56 = *a3;
    }
    objc_msgSend(*(id *)(v56 + 176), "setCompletionHandler:", v2189);
    md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 88), *(VKAnimation **)(*a3 + 176));
    v60 = v2190;
    if (v2190)
    {
      v61 = (unint64_t *)&v2190->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = v2192;
    if (v2192)
    {
      v64 = (unint64_t *)&v2192->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v6 = 1;
  }
  v7 = *a3;
  v8 = *(float *)(*a3 + 204);
  if (*(_BYTE *)(*a3 + 208))
  {
    if (v8 < 1.0 && !*(_QWORD *)(v7 + 184))
    {
      v9 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", 0.25);
      v10 = *(void **)(*a3 + 184);
      *(_QWORD *)(*a3 + 184) = v9;

      v2187[0] = MEMORY[0x1E0C809B0];
      v2187[1] = 3321888768;
      v2187[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_18;
      v2187[3] = &__block_descriptor_48_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e8_v12__0f8l;
      v11 = *a3;
      v12 = (std::__shared_weak_count *)a3[1];
      v2187[4] = *a3;
      v2188 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        v11 = *a3;
      }
      objc_msgSend(*(id *)(v11 + 184), "setStepHandler:", v2187);
      v2185[0] = MEMORY[0x1E0C809B0];
      v2185[1] = 3321888768;
      v2185[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_2;
      v2185[3] = &__block_descriptor_48_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e8_v12__0B8l;
      v15 = *a3;
      v16 = (std::__shared_weak_count *)a3[1];
      v2185[4] = *a3;
      v2186 = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        v15 = *a3;
      }
      objc_msgSend(*(id *)(v15 + 184), "setCompletionHandler:", v2185);
      md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 88), *(VKAnimation **)(*a3 + 184));
      v19 = v2186;
      if (v2186)
      {
        v20 = (unint64_t *)&v2186->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = v2188;
      if (v2188)
      {
        v23 = (unint64_t *)&v2188->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        goto LABEL_42;
      }
    }
  }
  else if (v8 > 0.0 && !*(_QWORD *)(v7 + 184))
  {
    v25 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", 0.25);
    v26 = *(void **)(*a3 + 184);
    *(_QWORD *)(*a3 + 184) = v25;

    v2183[0] = MEMORY[0x1E0C809B0];
    v2183[1] = 3321888768;
    v2183[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_3;
    v2183[3] = &__block_descriptor_48_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e8_v12__0f8l;
    v27 = *a3;
    v28 = (std::__shared_weak_count *)a3[1];
    v2183[4] = *a3;
    v2184 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v27 = *a3;
    }
    objc_msgSend(*(id *)(v27 + 184), "setStepHandler:", v2183);
    v2181[0] = MEMORY[0x1E0C809B0];
    v2181[1] = 3321888768;
    v2181[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_4;
    v2181[3] = &__block_descriptor_48_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e8_v12__0B8l;
    v31 = *a3;
    v32 = (std::__shared_weak_count *)a3[1];
    v2181[4] = *a3;
    v2182 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v31 = *a3;
    }
    objc_msgSend(*(id *)(v31 + 184), "setCompletionHandler:", v2181);
    md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 88), *(VKAnimation **)(*a3 + 184));
    v35 = v2182;
    if (v2182)
    {
      v36 = (unint64_t *)&v2182->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v22 = v2184;
    if (v2184)
    {
      v38 = (unint64_t *)&v2184->__shared_owners_;
      do
        v24 = __ldaxr(v38);
      while (__stlxr(v24 - 1, v38));
LABEL_42:
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  v39 = a3;
  if (!*(_QWORD *)(*a3 + 216))
  {
    v40 = operator new(0xE8uLL);
    v40[1] = 0;
    v40[2] = 0;
    *v40 = &off_1E42E2278;
    v41 = ggl::BufferData::BufferData((uint64_t)(v40 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
    v40[28] = ggl::Tile::View::reflection(void)::reflection;
    v40[3] = &off_1E42B97B0;
    v39 = a3;
    v42 = *a3;
    v43 = *(std::__shared_weak_count **)(*a3 + 224);
    *(_QWORD *)(v42 + 216) = v41;
    *(_QWORD *)(v42 + 224) = v40;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      v39 = a3;
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  if (!*(_QWORD *)(*v39 + 232))
  {
    v46 = *(_QWORD **)(a2 + 8);
    v47 = (int8x8_t)v46[1];
    if (v47)
    {
      v48 = (uint8x8_t)vcnt_s8(v47);
      v48.i16[0] = vaddlv_u8(v48);
      if (v48.u32[0] > 1uLL)
      {
        v49 = 0x3070CB6B3C7F21D3;
        if (*(_QWORD *)&v47 <= 0x3070CB6B3C7F21D3uLL)
          v49 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v47;
      }
      else
      {
        v49 = (*(_QWORD *)&v47 - 1) & 0x3070CB6B3C7F21D3;
      }
      v66 = *(_QWORD **)(*v46 + 8 * v49);
      if (v66)
      {
        v67 = (_QWORD *)*v66;
        if (v67)
        {
          if (v48.u32[0] < 2uLL)
          {
            v68 = *(_QWORD *)&v47 - 1;
            while (1)
            {
              v70 = v67[1];
              if (v70 == 0x3070CB6B3C7F21D3)
              {
                if (v67[2] == 0x3070CB6B3C7F21D3)
                  goto LABEL_92;
              }
              else if ((v70 & v68) != v49)
              {
                goto LABEL_92;
              }
              v67 = (_QWORD *)*v67;
              if (!v67)
                goto LABEL_92;
            }
          }
          do
          {
            v69 = v67[1];
            if (v69 == 0x3070CB6B3C7F21D3)
            {
              if (v67[2] == 0x3070CB6B3C7F21D3)
                break;
            }
            else
            {
              if (v69 >= *(_QWORD *)&v47)
                v69 %= *(_QWORD *)&v47;
              if (v69 != v49)
                break;
            }
            v67 = (_QWORD *)*v67;
          }
          while (v67);
        }
      }
    }
LABEL_92:
    md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v2200);
    v71 = *a3;
    v72 = *(_OWORD *)v2200;
    *(_QWORD *)&v2200[8] = 0;
    *(_QWORD *)v2200 = 0;
    v73 = *(std::__shared_weak_count **)(v71 + 240);
    *(_OWORD *)(v71 + 232) = v72;
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = *(std::__shared_weak_count **)&v2200[8];
    if (*(_QWORD *)&v2200[8])
    {
      v77 = (unint64_t *)(*(_QWORD *)&v2200[8] + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (*(_QWORD *)(*a3 + 248))
      goto LABEL_108;
    goto LABEL_103;
  }
  if (!*(_QWORD *)(*v39 + 248))
  {
LABEL_103:
    v79 = operator new(0xE8uLL);
    v79[1] = 0;
    v79[2] = 0;
    *v79 = &off_1E42E1E50;
    v80 = ggl::BufferData::BufferData((uint64_t)(v79 + 3), qword_1EE560250, 2, 1, 6, 1);
    v79[28] = ggl::SinglePassRouteLine::ClipParams::reflection(void)::reflection;
    v79[3] = &off_1E42B9530;
    v81 = *a3;
    v82 = *(std::__shared_weak_count **)(*a3 + 256);
    *(_QWORD *)(v81 + 248) = v80;
    *(_QWORD *)(v81 + 256) = v79;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
  }
LABEL_108:
  v85 = *(uint64_t **)(a2 + 8);
  v86 = (int8x8_t)v85[1];
  v87 = (uint8x8_t)vcnt_s8(v86);
  v87.i16[0] = vaddlv_u8(v87);
  if (v87.u32[0] > 1uLL)
  {
    v88 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v86 <= 0x1AF456233693CD46uLL)
      v88 = 0x1AF456233693CD46uLL % *(_QWORD *)&v86;
  }
  else
  {
    v88 = (*(_QWORD *)&v86 - 1) & 0x1AF456233693CD46;
  }
  v89 = *v85;
  v90 = *(_QWORD **)(v89 + 8 * v88);
  if (!v90)
    goto LABEL_130;
  v91 = (_QWORD *)*v90;
  if (!v91)
    goto LABEL_130;
  if (v87.u32[0] < 2uLL)
  {
    while (1)
    {
      v93 = v91[1];
      if (v93 == 0x1AF456233693CD46)
      {
        if (v91[2] == 0x1AF456233693CD46)
          goto LABEL_128;
      }
      else if ((v93 & (*(_QWORD *)&v86 - 1)) != v88)
      {
        goto LABEL_130;
      }
      v91 = (_QWORD *)*v91;
      if (!v91)
        goto LABEL_130;
    }
  }
  while (1)
  {
    v92 = v91[1];
    if (v92 == 0x1AF456233693CD46)
      break;
    if (v92 >= *(_QWORD *)&v86)
      v92 %= *(_QWORD *)&v86;
    if (v92 != v88)
      goto LABEL_130;
LABEL_117:
    v91 = (_QWORD *)*v91;
    if (!v91)
      goto LABEL_130;
  }
  if (v91[2] != 0x1AF456233693CD46)
    goto LABEL_117;
LABEL_128:
  v94 = v91[5];
  if (*(_QWORD *)(v94 + 8) == 0x1AF456233693CD46)
  {
    v2070 = *(_QWORD *)(v94 + 32);
    goto LABEL_131;
  }
LABEL_130:
  v2070 = 0;
LABEL_131:
  if (v87.u32[0] > 1uLL)
  {
    v95 = 0x13043386C0978CC2;
    if (*(_QWORD *)&v86 <= 0x13043386C0978CC2uLL)
      v95 = 0x13043386C0978CC2uLL % *(_QWORD *)&v86;
  }
  else
  {
    v95 = (*(_QWORD *)&v86 - 1) & 0x13043386C0978CC2;
  }
  v96 = *(_QWORD **)(v89 + 8 * v95);
  if (!v96)
    goto LABEL_153;
  v97 = (_QWORD *)*v96;
  if (!v97)
    goto LABEL_153;
  if (v87.u32[0] < 2uLL)
  {
    while (1)
    {
      v99 = v97[1];
      if (v99 == 0x13043386C0978CC2)
      {
        if (v97[2] == 0x13043386C0978CC2)
          goto LABEL_151;
      }
      else if ((v99 & (*(_QWORD *)&v86 - 1)) != v95)
      {
        goto LABEL_153;
      }
      v97 = (_QWORD *)*v97;
      if (!v97)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v98 = v97[1];
    if (v98 != 0x13043386C0978CC2)
    {
      if (v98 >= *(_QWORD *)&v86)
        v98 %= *(_QWORD *)&v86;
      if (v98 != v95)
        goto LABEL_153;
      goto LABEL_140;
    }
    if (v97[2] != 0x13043386C0978CC2)
    {
LABEL_140:
      v97 = (_QWORD *)*v97;
      if (!v97)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_151:
  v100 = v97[5];
  if (*(_QWORD *)(v100 + 8) == 0x13043386C0978CC2)
  {
    v2055 = *(_QWORD *)(v100 + 32);
    goto LABEL_154;
  }
LABEL_153:
  v2055 = 0;
LABEL_154:
  if (v87.u32[0] > 1uLL)
  {
    v101 = 0xA60DDA5A69582425;
    if (*(_QWORD *)&v86 <= 0xA60DDA5A69582425)
      v101 = 0xA60DDA5A69582425 % *(_QWORD *)&v86;
  }
  else
  {
    v101 = (*(_QWORD *)&v86 - 1) & 0xA60DDA5A69582425;
  }
  v102 = *(_QWORD **)(v89 + 8 * v101);
  if (!v102)
    goto LABEL_175;
  v103 = (_QWORD *)*v102;
  if (!v103)
    goto LABEL_175;
  if (v87.u32[0] < 2uLL)
  {
    while (1)
    {
      v105 = v103[1];
      if (v105 == 0xA60DDA5A69582425)
      {
        if (v103[2] == 0xA60DDA5A69582425)
          goto LABEL_173;
      }
      else if ((v105 & (*(_QWORD *)&v86 - 1)) != v101)
      {
        goto LABEL_175;
      }
      v103 = (_QWORD *)*v103;
      if (!v103)
        goto LABEL_175;
    }
  }
  while (2)
  {
    v104 = v103[1];
    if (v104 != 0xA60DDA5A69582425)
    {
      if (v104 >= *(_QWORD *)&v86)
        v104 %= *(_QWORD *)&v86;
      if (v104 != v101)
        goto LABEL_175;
      goto LABEL_163;
    }
    if (v103[2] != 0xA60DDA5A69582425)
    {
LABEL_163:
      v103 = (_QWORD *)*v103;
      if (!v103)
        goto LABEL_175;
      continue;
    }
    break;
  }
LABEL_173:
  v106 = v103[5];
  if (*(_QWORD *)(v106 + 8) == 0xA60DDA5A69582425)
  {
    v2047 = *(id **)(v106 + 32);
    goto LABEL_176;
  }
LABEL_175:
  v2047 = 0;
LABEL_176:
  if (v87.u32[0] > 1uLL)
  {
    v107 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v86 <= 0x1B8B241A8D896A1DuLL)
      v107 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v86;
  }
  else
  {
    v107 = (*(_QWORD *)&v86 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v108 = *(_QWORD **)(v89 + 8 * v107);
  if (!v108)
    goto LABEL_198;
  v109 = (_QWORD *)*v108;
  if (!v109)
    goto LABEL_198;
  if (v87.u32[0] < 2uLL)
  {
    while (1)
    {
      v111 = v109[1];
      if (v111 == 0x1B8B241A8D896A1DLL)
      {
        if (v109[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_196;
      }
      else if ((v111 & (*(_QWORD *)&v86 - 1)) != v107)
      {
        goto LABEL_198;
      }
      v109 = (_QWORD *)*v109;
      if (!v109)
        goto LABEL_198;
    }
  }
  while (2)
  {
    v110 = v109[1];
    if (v110 != 0x1B8B241A8D896A1DLL)
    {
      if (v110 >= *(_QWORD *)&v86)
        v110 %= *(_QWORD *)&v86;
      if (v110 != v107)
        goto LABEL_198;
      goto LABEL_185;
    }
    if (v109[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_185:
      v109 = (_QWORD *)*v109;
      if (!v109)
        goto LABEL_198;
      continue;
    }
    break;
  }
LABEL_196:
  v112 = v109[5];
  if (*(_QWORD *)(v112 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v113 = *(_QWORD *)(v112 + 32);
    goto LABEL_199;
  }
LABEL_198:
  v113 = 0;
LABEL_199:
  v2073 = v113;
  if (v87.u32[0] >= 2uLL)
  {
    v115 = 0x8E4587A431F9C696;
    if (*(_QWORD *)&v86 <= 0x8E4587A431F9C696)
      v115 = 0x8E4587A431F9C696 % *(_QWORD *)&v86;
    v114 = *(_QWORD **)(v89 + 8 * v115);
    do
    {
      do
        v114 = (_QWORD *)*v114;
      while (v114[1] != 0x8E4587A431F9C696);
    }
    while (v114[2] != 0x8E4587A431F9C696);
  }
  else
  {
    v114 = *(_QWORD **)(v89 + 8 * ((*(_QWORD *)&v86 - 1) & 0x8E4587A431F9C696));
    do
    {
      do
        v114 = (_QWORD *)*v114;
      while (v114[1] != 0x8E4587A431F9C696);
    }
    while (v114[2] != 0x8E4587A431F9C696);
  }
  v116 = *(float *)(*(_QWORD *)(v114[5] + 32) + 76);
  v117 = *(_QWORD **)(*a3 + 216);
  v118 = v117[1];
  v119 = (float32x4_t *)v117[9];
  gm::operator*<double,4,4,4>((double *)v2200, (double *)(v2070 + 808), (double *)(*a3 + 8));
  *v119 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v2200), *(float64x2_t *)&v2200[16]);
  v119[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v2201), *(float64x2_t *)&v2201[16]);
  v119[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v2201[32]), *(float64x2_t *)v2202);
  v119[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2203), *(float64x2_t *)v2204);
  obj = v116;
  v119[4].f32[0] = v116;
  v120 = v117[8];
  if (v120 <= v118)
    v120 = v118;
  v117[7] = 0;
  v117[8] = v120;
  md::LayoutContext::frameState((md::LayoutContext *)a2);
  if (*(unsigned __int8 *)(v121 + 128) - 4 >= 0xFFFFFFFD)
  {
    v125 = *(double *)(v2070 + 4288);
    v126 = *(double *)(v2070 + 4296);
    v2113 = *(double *)(v2070 + 4304);
    v127 = sqrt(v125 * v125 + v126 * v126 + v2113 * v2113);
    v128 = asin(194259.118 / v127);
    v129 = cos(1.3962634 - v128);
    v130.f64[0] = 1.0 / v127;
    v123 = 1.0 / v127 * v125;
    v124 = 1.0 / v127 * v126;
    v130.f64[1] = v129;
    v131 = (const double *)&qword_19FFB19E0;
    v132 = vld1q_dup_f64(v131);
    v132.f64[0] = v2113;
    v122 = vcvt_f32_f64(vmulq_f64(v130, v132));
  }
  else
  {
    v122 = 0;
    v123 = 0.0;
    v124 = 0.0;
  }
  v133 = *a3;
  v134 = *(_QWORD **)(*a3 + 248);
  v135 = v134[1];
  v136 = (float32x4_t *)v134[9];
  *v136 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(*a3 + 8)), *(float64x2_t *)(*a3 + 24));
  v136[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v133 + 40)), *(float64x2_t *)(v133 + 56));
  v136[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v133 + 72)), *(float64x2_t *)(v133 + 88));
  v136[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v133 + 104)), *(float64x2_t *)(v133 + 120));
  v136[4].f32[0] = v123;
  v136[4].f32[1] = v124;
  *(float32x2_t *)&v136[4].u32[2] = v122;
  v137 = v134[8];
  if (v137 <= v135)
    v137 = v135;
  v134[7] = 0;
  v134[8] = v137;
  v138 = *(id *)a2;
  objc_msgSend(v138, "contentScale");
  v140 = v139;
  v141 = *(double *)(v2070 + 2984);
  v142 = *(double *)(*a3 + 168);
  v143 = *(id *)a2;
  objc_msgSend(v143, "sizeInPixels");
  v145 = v144;

  v146 = *a3;
  if (!*(_QWORD *)(*a3 + 312))
  {
    v147 = (md::RouteLineSharedResources *)operator new();
    v148 = *v2047;
    v5 = objc_msgSend(v148, "shaderLibrary");
    v149 = *v2047;
    v150 = (AlphaAtlas *)objc_msgSend(v149, "alphaAtlas");
    v151 = *(id *)(*(_QWORD *)(a1 + 40) + 104);
    md::RouteLineSharedResources::RouteLineSharedResources(v147, (const ggl::StandardLibrary *)v5, v150, (const RenderTargetFormat *)objc_msgSend(v151, "format"), *(unsigned __int8 *)(a1 + 109));
    v152 = *(md::RouteLineSharedResources **)(v146 + 312);
    *(_QWORD *)(v146 + 312) = v147;
    if (v152)
    {
      md::RouteLineSharedResources::~RouteLineSharedResources(v152);
      MEMORY[0x1A1AF4E00]();
    }

  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v153 = (void *)objc_claimAutoreleasedReturnValue();
  v2053 = objc_msgSend(v153, "showRoutelineAnimation");

  v154 = *(_QWORD **)(a2 + 8);
  v155 = (int8x8_t)v154[1];
  if (!*(_QWORD *)&v155)
  {
    v2086 = 0;
    v157 = v2073;
    if (!v2073)
      goto LABEL_224;
    goto LABEL_247;
  }
  v156 = (uint8x8_t)vcnt_s8(v155);
  v156.i16[0] = vaddlv_u8(v156);
  v157 = v2073;
  if (v156.u32[0] > 1uLL)
  {
    v158 = 0xDFC317497CF9A4BFLL;
    if (*(_QWORD *)&v155 <= 0xDFC317497CF9A4BFLL)
      v158 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v155;
  }
  else
  {
    v158 = (*(_QWORD *)&v155 - 1) & 0xDFC317497CF9A4BFLL;
  }
  v160 = *(_QWORD **)(*v154 + 8 * v158);
  if (!v160)
    goto LABEL_246;
  v161 = (_QWORD *)*v160;
  if (!v161)
    goto LABEL_246;
  if (v156.u32[0] < 2uLL)
  {
    v162 = *(_QWORD *)&v155 - 1;
    while (1)
    {
      v164 = v161[1];
      if (v164 == 0xDFC317497CF9A4BFLL)
      {
        if (v161[2] == 0xDFC317497CF9A4BFLL)
          goto LABEL_243;
      }
      else if ((v164 & v162) != v158)
      {
        goto LABEL_246;
      }
      v161 = (_QWORD *)*v161;
      if (!v161)
        goto LABEL_246;
    }
  }
  while (1)
  {
    v163 = v161[1];
    if (v163 == 0xDFC317497CF9A4BFLL)
      break;
    if (v163 >= *(_QWORD *)&v155)
      v163 %= *(_QWORD *)&v155;
    if (v163 != v158)
      goto LABEL_246;
LABEL_232:
    v161 = (_QWORD *)*v161;
    if (!v161)
      goto LABEL_246;
  }
  if (v161[2] != 0xDFC317497CF9A4BFLL)
    goto LABEL_232;
LABEL_243:
  v165 = v161[5];
  if (*(_QWORD *)(v165 + 8) != 0xDFC317497CF9A4BFLL)
  {
LABEL_246:
    v2086 = 0;
    if (!v2073)
      goto LABEL_224;
    goto LABEL_247;
  }
  v2086 = *(_QWORD *)(v165 + 32);
  if (v2073)
  {
LABEL_247:
    v2048 = *(id *)(v157 + 40);

    v159 = (int)v2048;
    if (v2048)
      v159 = objc_msgSend(v2048, "snappingToTransitLines");
    else
      v2048 = 0;
    v157 = v2073;
    goto LABEL_251;
  }
LABEL_224:
  v2048 = 0;
  v159 = 0;
LABEL_251:
  v166 = *(_QWORD **)(a2 + 8);
  v167 = (int8x8_t)v166[1];
  if (!*(_QWORD *)&v167)
    goto LABEL_276;
  v168 = (uint8x8_t)vcnt_s8(v167);
  v168.i16[0] = vaddlv_u8(v168);
  if (v168.u32[0] > 1uLL)
  {
    v169 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v167 <= 0xE42D19AFCA302E68)
      v169 = 0xE42D19AFCA302E68 % *(_QWORD *)&v167;
  }
  else
  {
    v169 = (*(_QWORD *)&v167 - 1) & 0xE42D19AFCA302E68;
  }
  v170 = *(_QWORD **)(*v166 + 8 * v169);
  if (!v170)
    goto LABEL_276;
  v171 = (_QWORD *)*v170;
  if (!v171)
    goto LABEL_276;
  if (v168.u32[0] < 2uLL)
  {
    v172 = *(_QWORD *)&v167 - 1;
    while (1)
    {
      v174 = v171[1];
      if (v174 == 0xE42D19AFCA302E68)
      {
        if (v171[2] == 0xE42D19AFCA302E68)
          goto LABEL_272;
      }
      else if ((v174 & v172) != v169)
      {
        goto LABEL_276;
      }
      v171 = (_QWORD *)*v171;
      if (!v171)
        goto LABEL_276;
    }
  }
  while (2)
  {
    v173 = v171[1];
    if (v173 != 0xE42D19AFCA302E68)
    {
      if (v173 >= *(_QWORD *)&v167)
        v173 %= *(_QWORD *)&v167;
      if (v173 != v169)
        goto LABEL_276;
      goto LABEL_261;
    }
    if (v171[2] != 0xE42D19AFCA302E68)
    {
LABEL_261:
      v171 = (_QWORD *)*v171;
      if (!v171)
        goto LABEL_276;
      continue;
    }
    break;
  }
LABEL_272:
  v175 = v171[5];
  if (*(_QWORD *)(v175 + 8) == 0xE42D19AFCA302E68)
  {
    v2059 = *(uint64_t **)(v175 + 32);
    if (!v159)
      goto LABEL_274;
LABEL_277:
    v176 = objc_msgSend(v2048, "currentSegmentIndex");
    if (v157)
      goto LABEL_278;
LABEL_281:
    v177 = -1;
    goto LABEL_282;
  }
LABEL_276:
  v2059 = 0;
  if (v159)
    goto LABEL_277;
LABEL_274:
  v176 = -1;
  if (!v157)
    goto LABEL_281;
LABEL_278:
  if (!*(_BYTE *)v157 || !*(_BYTE *)(v157 + 32))
    goto LABEL_281;
  v177 = *(_DWORD *)(v157 + 36);
LABEL_282:
  v178 = *(_QWORD *)(*v2059 + 520);
  v179 = *(std::__shared_weak_count **)(*v2059 + 528);
  *(_QWORD *)v2200 = v178;
  *(_QWORD *)&v2200[8] = v179;
  if (v179)
  {
    v180 = (unint64_t *)&v179->__shared_owners_;
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 1, v180));
  }
  v2180 = gss::ClientStyleState<gss::PropertyID>::targetMapDisplayStyle(v178);
  if (v179)
  {
    v182 = (unint64_t *)&v179->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v2057 = *(unsigned __int8 *)(v2055 + 176);
  v184 = fmaxf(*(float *)(v2070 + 3080) + *(float *)(v2070 + 3076), 1.0);
  v185 = 3321888768;
  v2174[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_5;
  v2174[3] = &__block_descriptor_77_ea8_48c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e92_v16__0_fast_shared_ptr_md::RouteLineSection__mdm::MDAllocator_____fast_shared_ptr_control__8l;
  v2174[4] = v2059;
  v2174[5] = &v2180;
  v187 = *a3;
  v186 = (std::__shared_weak_count *)a3[1];
  v188 = *(void **)(*a3 + 160);
  v2174[0] = MEMORY[0x1E0C809B0];
  v2174[1] = 3321888768;
  v2174[6] = v187;
  v2175 = v186;
  if (v186)
  {
    v189 = (unint64_t *)&v186->__shared_owners_;
    do
      v190 = __ldxr(v189);
    while (__stxr(v190 + 1, v189));
  }
  v2179 = v2057 == 2;
  v2176 = v184;
  v2177 = v176;
  v2178 = v177;
  objc_msgSend(v188, "forEachSection:", v2174);
  v191 = *a3;
  if (!*(_QWORD *)(*a3 + 320))
  {
    std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,std::less<GEOComposedRouteSection * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRouteSection * {__strong},std::unique_ptr<md::DebugPointsSource>>,mdm::Allocator>>::destroy(v191 + 432, *(_QWORD *)(v191 + 440));
    *(_QWORD *)(v191 + 456) = 0;
    *(_QWORD *)(v191 + 432) = v191 + 440;
    *(_QWORD *)(v191 + 440) = 0;
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v2081 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)v2200 = 0;
    *(_QWORD *)&v2200[8] = v2200;
    *(_QWORD *)&v2200[16] = 0x5812000000;
    *(_QWORD *)&v2200[24] = __Block_byref_object_copy__4918;
    *(_QWORD *)v2201 = __Block_byref_object_dispose__4919;
    memset(&v2201[8], 0, 40);
    LODWORD(v2202[0]) = 1065353216;
    *(_QWORD *)v2147 = 0;
    *(_QWORD *)&v2147[8] = v2147;
    *(_QWORD *)&v2147[16] = 0x5812000000;
    v2148.n128_u64[0] = (unint64_t)__Block_byref_object_copy__5_4920;
    v2148.n128_u64[1] = (unint64_t)__Block_byref_object_dispose__6_4921;
    v2149 = 0u;
    v2150 = 0u;
    v2151 = 0;
    v2152 = 1065353216;
    v192 = *(void **)(*a3 + 160);
    if (v192)
    {
      objc_msgSend(v192, "sections");
    }
    else
    {
      __p[1] = 0;
      __p[0] = 0;
      v2194 = 0;
    }
    if ((objc_msgSend(v2081, "disableContinuousMultiSectionRoutes", (char *)&v2149 + 8) & 1) != 0)
    {
LABEL_300:
      v193 = (_QWORD **)__p[0];
      v2114 = (_QWORD **)__p[1];
      if (__p[0] != __p[1])
      {
        v5 = (unint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32438];
        while (1)
        {
          v194 = *v193;
          *(_QWORD *)&v2226 = v194;
          if (v194)
            ++*v194;
          if (objc_msgSend(v2081, "routeDebugPoints"))
          {
            v195 = *a3;
            v196 = (id *)(v194 + 1);
            if (!v194)
              v196 = 0;
            WeakRetained = objc_loadWeakRetained(v196 + 28);
            v198 = WeakRetained;
            v199 = *(uint64_t **)(v195 + 440);
            if (v199)
            {
              while (1)
              {
                while (1)
                {
                  v201 = (uint64_t **)v199;
                  v202 = v199[4];
                  if ((unint64_t)WeakRetained >= v202)
                    break;
                  v199 = *v201;
                  v200 = v201;
                  if (!*v201)
                    goto LABEL_316;
                }
                if (v202 >= (unint64_t)WeakRetained)
                  break;
                v199 = v201[1];
                if (!v199)
                {
                  v200 = v201 + 1;
                  goto LABEL_316;
                }
              }
              v203 = (uint64_t *)v201;
            }
            else
            {
              v200 = (uint64_t **)(v195 + 440);
              v201 = (uint64_t **)(v195 + 440);
LABEL_316:
              v203 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v195 + 448) + 16))(*(_QWORD *)(v195 + 448), 48, 8);
              v203[4] = (uint64_t)v198;
              v203[5] = 0;
              *v203 = 0;
              v203[1] = 0;
              v203[2] = (uint64_t)v201;
              *v200 = v203;
              v204 = **(_QWORD **)(v195 + 432);
              v205 = v203;
              if (v204)
              {
                *(_QWORD *)(v195 + 432) = v204;
                v205 = *v200;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v195 + 440), v205);
              v198 = 0;
              ++*(_QWORD *)(v195 + 456);
            }
            v206 = (_QWORD *)operator new();
            v194 = (_QWORD *)v2226;
            v207 = v2226 + 8;
            if (!(_QWORD)v2226)
              v207 = 0;
            *v206 = &off_1E4297A48;
            v206[1] = v207;
            v208 = v203[5];
            v203[5] = (uint64_t)v206;
            if (v208)
              (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);

          }
          if (v194)
            v209 = (unint64_t)(v194 + 1);
          else
            v209 = 0;
          if (!*(_BYTE *)(v209 + 260))
          {
            v229 = *(_QWORD *)&v2200[8];
            *(_QWORD *)buf = v209;
            v230 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v209 + 96) + 24))(*(_QWORD *)(v209 + 96));
            {
              v321 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v321, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v232 = (md::RouteLineRibbon *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 16))(mdm::Allocator::instance(void)::alloc, 128, 8);
            md::RouteLineRibbon::RouteLineRibbon(v232, v230);
            *(_QWORD *)v2221 = v232;
            if (v230)
            {
              v233 = 0;
              for (i = 0; i != v230; ++i)
              {
                v235 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v209 + 96) + 32))(*(_QWORD *)(v209 + 96), i);
                v236 = (_DWORD *)(*((_QWORD *)v232 + 9) + v233);
                *v236 = *v235;
                v236[1] = v235[1];
                v236[2] = v235[2];
                *(_BYTE *)(*((_QWORD *)v232 + 13) + v233 + 8) = *(_BYTE *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v209 + 96) + 32))(*(_QWORD *)(v209 + 96), i)+ 44);
                *(_BYTE *)(*((_QWORD *)v232 + 13) + v233 + 9) = *(_BYTE *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v209 + 96) + 32))(*(_QWORD *)(v209 + 96), i)+ 45);
                *(_DWORD *)(*((_QWORD *)v232 + 13) + v233 + 4) = *(_DWORD *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v209 + 96) + 32))(*(_QWORD *)(v209 + 96), i)+ 40);
                *(_DWORD *)(*((_QWORD *)v232 + 13) + v233) = *(_DWORD *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v209 + 96) + 32))(*(_QWORD *)(v209 + 96), i)+ 36);
                v233 += 12;
              }
            }
            v237 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v209 + 96) + 32))(*(_QWORD *)(v209 + 96), 0);
            v238 = *(_QWORD *)v2221;
            *(_DWORD *)(*(_QWORD *)v2221 + 100) = *(_DWORD *)(v237 + 32);
            *(_WORD *)(v238 + 96) = 257;
            v239 = std::__hash_table<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineBatchKey>,std::equal_to<md::RouteLineBatchKey>,true>,std::__unordered_map_equal<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineBatchKey>,std::hash<md::RouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::RouteLineBatchKey,std::piecewise_construct_t const&,std::tuple<md::RouteLineBatchKey const&>,std::tuple<>>((uint64_t *)(v229 + 48), *(unint64_t *)buf, buf);
            v240 = v239;
            v241 = (_QWORD *)v239[4];
            if ((unint64_t)v241 >= v239[5])
            {
              v243 = std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>>((uint64_t)(v239 + 3), (uint64_t *)v2221);
            }
            else
            {
              if (v241)
              {
                v242 = *(_QWORD *)v2221;
                *(_QWORD *)v2221 = 0;
                *v241 = v242;
              }
              v243 = v241 + 1;
            }
            v240[4] = v243;
            v256 = *(void (****)(_QWORD))v2221;
            *(_QWORD *)v2221 = 0;
            if (!v256)
              goto LABEL_463;
            (**v256)(v256);
            {
              v322 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v322, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            v258 = *(void (**)(void))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40);
            goto LABEL_462;
          }
          v210 = *(_QWORD *)&v2147[8];
          v211 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v209 + 96) + 24))(*(_QWORD *)(v209 + 96));
          {
            v317 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v317, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v213 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
          v214 = v213;
          v215 = *(double *)(v209 + 232);
          *(_OWORD *)(v213 + 49) = 0u;
          *(_OWORD *)(v213 + 40) = 0u;
          *(_OWORD *)(v213 + 24) = 0u;
          *(_OWORD *)(v213 + 8) = 0u;
          *(_QWORD *)(v213 + 56) = v211;
          *(_QWORD *)v213 = off_1E42AF588;
          *(_QWORD *)(v213 + 72) = 0;
          v216 = (_QWORD *)(v213 + 72);
          *(_QWORD *)(v213 + 80) = 0;
          *(_QWORD *)(v213 + 88) = 0;
          if (v211)
          {
            *(_QWORD *)(v213 + 88) = v211;
            {
              v319 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v319, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            *(_QWORD *)(v214 + 72) = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 12 * v211, 8);
            *(_BYTE *)(v214 + 64) = 1;
          }
          v218 = v215;
          *(_WORD *)(v214 + 96) = 0;
          *(_QWORD *)v214 = off_1E429A950;
          *(_DWORD *)(v214 + 100) = 0;
          *(float *)(v214 + 104) = v218;
          *(_QWORD *)v2221 = v214;
          if (v211)
          {
            v219 = 0;
            for (j = 0; j != v211; ++j)
            {
              v221 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v209 + 96) + 32))(*(_QWORD *)(v209 + 96), j);
              v222 = (_DWORD *)(*v216 + v219);
              *v222 = *v221;
              v222[1] = v221[1];
              v222[2] = v221[2];
              v219 += 12;
            }
          }
          v223 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v209 + 96) + 32))(*(_QWORD *)(v209 + 96), 0);
          *(_DWORD *)(*(_QWORD *)v2221 + 100) = *(_DWORD *)(v223 + 32);
          v224 = 0x9DDFEA08EB382D69 * (((8 * v209) + 8) ^ HIDWORD(v209));
          v225 = 0x9DDFEA08EB382D69 * (HIDWORD(v209) ^ (v224 >> 47) ^ v224);
          v226 = 0x9DDFEA08EB382D69 * (v225 ^ (v225 >> 47));
          v227 = *(_QWORD *)(v210 + 56);
          if (v227)
          {
            v228 = (uint8x8_t)vcnt_s8((int8x8_t)v227);
            v228.i16[0] = vaddlv_u8(v228);
            if (v228.u32[0] > 1uLL)
            {
              v211 = 0x9DDFEA08EB382D69 * (v225 ^ (v225 >> 47));
              if (v226 >= v227)
                v211 = v226 % v227;
            }
            else
            {
              v211 = (v227 - 1) & v226;
            }
            v244 = *(_QWORD ***)(*(_QWORD *)(v210 + 48) + 8 * v211);
            if (v244)
            {
              v245 = *v244;
              if (*v244)
              {
                if (v228.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v247 = v245[1];
                    if (v247 == v226)
                    {
                      if (v245[2] == v209)
                        goto LABEL_429;
                    }
                    else if ((v247 & (v227 - 1)) != v211)
                    {
                      goto LABEL_364;
                    }
                    v245 = (_QWORD *)*v245;
                    if (!v245)
                      goto LABEL_364;
                  }
                }
                do
                {
                  v246 = v245[1];
                  if (v246 == v226)
                  {
                    if (v245[2] == v209)
                      goto LABEL_429;
                  }
                  else
                  {
                    if (v246 >= v227)
                      v246 %= v227;
                    if (v246 != v211)
                      break;
                  }
                  v245 = (_QWORD *)*v245;
                }
                while (v245);
              }
            }
          }
LABEL_364:
          v245 = operator new(0x38uLL);
          v248 = (_QWORD *)(v210 + 64);
          *(_QWORD *)buf = v245;
          *(_QWORD *)&buf[8] = v210 + 64;
          *v245 = 0;
          v245[1] = v226;
          v245[2] = v209;
          v245[3] = 0;
          v245[4] = 0;
          v245[5] = 0;
          {
            v318 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v318, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v245[6] = mdm::Allocator::instance(void)::alloc;
          buf[16] = 1;
          v250 = (float)(unint64_t)(*(_QWORD *)(v210 + 72) + 1);
          v251 = *(float *)(v210 + 80);
          if (!v227 || (float)(v251 * (float)v227) < v250)
            break;
LABEL_419:
          v277 = *(_QWORD *)(v210 + 48);
          v278 = *(_QWORD **)(v277 + 8 * v211);
          if (v278)
          {
            *v245 = *v278;
LABEL_427:
            *v278 = v245;
            goto LABEL_428;
          }
          *v245 = *v248;
          *v248 = v245;
          *(_QWORD *)(v277 + 8 * v211) = v248;
          if (*v245)
          {
            v279 = *(_QWORD *)(*v245 + 8);
            if ((v227 & (v227 - 1)) != 0)
            {
              if (v279 >= v227)
                v279 %= v227;
            }
            else
            {
              v279 &= v227 - 1;
            }
            v278 = (_QWORD *)(*(_QWORD *)(v210 + 48) + 8 * v279);
            goto LABEL_427;
          }
LABEL_428:
          ++*(_QWORD *)(v210 + 72);
LABEL_429:
          v280 = (_QWORD *)v245[4];
          v281 = v245[5];
          if ((unint64_t)v280 >= v281)
          {
            v284 = v245[3];
            v285 = ((uint64_t)v280 - v284) >> 3;
            v286 = v285 + 1;
            if ((unint64_t)(v285 + 1) >> 61)
              abort();
            v287 = v281 - v284;
            if (v287 >> 2 > v286)
              v286 = v287 >> 2;
            if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF8)
              v288 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v288 = v286;
            if (v288)
            {
              v289 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v245[6] + 16))(v245[6], 8 * v288, 8);
              v290 = (_QWORD *)(v289 + 8 * v285);
              v291 = v289 + 8 * v288;
              if (v289)
              {
                v292 = *(_QWORD *)v2221;
                *(_QWORD *)v2221 = 0;
                *v290 = v292;
              }
            }
            else
            {
              v291 = 0;
              v290 = (_QWORD *)(8 * v285);
            }
            v283 = v290 + 1;
            v293 = (char *)v245[3];
            v294 = (char *)v245[4];
            if (v294 == v293)
            {
              v245[3] = v290;
              v245[4] = v283;
              v300 = v245[5];
              v245[5] = v291;
              goto LABEL_457;
            }
            v295 = v294 - v293 - 8;
            if (v295 > 0x57
              && ((v296 = (v293 - v294 + 7) & 0xFFFFFFFFFFFFFFF8, &v294[v296] >= (char *)v290)
               || (char *)v290 + v296 >= v294))
            {
              v310 = (v295 >> 3) + 1;
              v297 = &v294[-8 * (v310 & 0x3FFFFFFFFFFFFFFCLL)];
              v311 = v290 - 2;
              v312 = v294 - 32;
              v313 = v310 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v315 = *(_OWORD *)v312;
                v314 = *((_OWORD *)v312 + 1);
                *(_OWORD *)v312 = 0uLL;
                *((_OWORD *)v312 + 1) = 0uLL;
                v312 -= 32;
                *(v311 - 1) = v315;
                *v311 = v314;
                v311 -= 2;
                v313 -= 4;
              }
              while (v313);
              v290 -= v310 & 0x3FFFFFFFFFFFFFFCLL;
              if (v310 == (v310 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_449:
                v294 = (char *)v245[3];
                v299 = (char *)v245[4];
                v245[3] = v290;
                v245[4] = v283;
                v300 = v245[5];
                v245[5] = v291;
                while (v299 != v294)
                {
                  v302 = (void (***)(_QWORD))*((_QWORD *)v299 - 1);
                  v299 -= 8;
                  v301 = v302;
                  *(_QWORD *)v299 = 0;
                  if (v302)
                  {
                    (**v301)(v301);
                    if ((v303 & 1) == 0
                    {
                      v304 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v304, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v301, 112);
                  }
                }
LABEL_457:
                if (v294)
                  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)v245[6] + 40))(v245[6], v294, v300 - (_QWORD)v294);
                goto LABEL_459;
              }
            }
            else
            {
              v297 = (char *)v245[4];
            }
            do
            {
              v298 = *((_QWORD *)v297 - 1);
              v297 -= 8;
              *(_QWORD *)v297 = 0;
              *--v290 = v298;
            }
            while (v297 != v293);
            goto LABEL_449;
          }
          if (v280)
          {
            v282 = *(_QWORD *)v2221;
            *(_QWORD *)v2221 = 0;
            *v280 = v282;
          }
          v283 = v280 + 1;
LABEL_459:
          v245[4] = v283;
          v305 = *(void (****)(_QWORD))v2221;
          *(_QWORD *)v2221 = 0;
          if (!v305)
            goto LABEL_463;
          (**v305)(v305);
          {
            v320 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v320, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          v258 = *(void (**)(void))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40);
LABEL_462:
          v258();
LABEL_463:
          v307 = v2226;
          if ((_QWORD)v2226)
          {
            _ZF = (*(_QWORD *)v2226)-- == 1;
            if (_ZF)
            {
              md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v307 + 8));
              {
                v309 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v309, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v307, 424);
            }
          }
          if (++v193 == v2114)
            goto LABEL_658;
        }
        v252 = (v227 & (v227 - 1)) != 0;
        if (v227 < 3)
          v252 = 1;
        v253 = v252 | (2 * v227);
        v254 = vcvtps_u32_f32(v250 / v251);
        if (v253 <= v254)
          prime = v254;
        else
          prime = v253;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v227 = *(_QWORD *)(v210 + 56);
        if (prime <= v227)
        {
          if (prime >= v227)
            goto LABEL_406;
          v270 = vcvtps_u32_f32((float)*(unint64_t *)(v210 + 72) / *(float *)(v210 + 80));
          if (v227 < 3
            || (v271 = (uint8x8_t)vcnt_s8((int8x8_t)v227), v271.i16[0] = vaddlv_u8(v271), v271.u32[0] > 1uLL))
          {
            v270 = std::__next_prime(v270);
          }
          else
          {
            v272 = 1 << -(char)__clz(v270 - 1);
            if (v270 >= 2)
              v270 = v272;
          }
          if (prime <= v270)
            prime = v270;
          if (prime >= v227)
          {
            v227 = *(_QWORD *)(v210 + 56);
LABEL_406:
            if ((v227 & (v227 - 1)) != 0)
            {
              if (v226 >= v227)
                v211 = v226 % v227;
              else
                v211 = v226;
            }
            else
            {
              v211 = (v227 - 1) & v226;
            }
            goto LABEL_419;
          }
          if (!prime)
          {
            v316 = *(void **)(v210 + 48);
            *(_QWORD *)(v210 + 48) = 0;
            if (v316)
              operator delete(v316);
            v227 = 0;
            *(_QWORD *)(v210 + 56) = 0;
            goto LABEL_406;
          }
        }
        if (prime >> 61)
          goto LABEL_2863;
        v259 = operator new(8 * prime);
        v260 = *(void **)(v210 + 48);
        *(_QWORD *)(v210 + 48) = v259;
        if (v260)
          operator delete(v260);
        v261 = 0;
        *(_QWORD *)(v210 + 56) = prime;
        do
          *(_QWORD *)(*(_QWORD *)(v210 + 48) + 8 * v261++) = 0;
        while (prime != v261);
        v262 = (_QWORD *)*v248;
        if (!*v248)
        {
LABEL_405:
          v227 = prime;
          goto LABEL_406;
        }
        v263 = v262[1];
        v264 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v265 = v263 & v264;
          *(_QWORD *)(*(_QWORD *)(v210 + 48) + 8 * v265) = v248;
          for (k = (_QWORD *)*v262; *v262; k = (_QWORD *)*v262)
          {
            v267 = k[1] & v264;
            if (v267 == v265)
            {
              v262 = k;
            }
            else
            {
              v268 = *(_QWORD *)(v210 + 48);
              if (*(_QWORD *)(v268 + 8 * v267))
              {
                *v262 = *k;
                v269 = 8 * v267;
                *k = **(_QWORD **)(*(_QWORD *)(v210 + 48) + v269);
                **(_QWORD **)(*(_QWORD *)(v210 + 48) + v269) = k;
              }
              else
              {
                *(_QWORD *)(v268 + 8 * v267) = v262;
                v262 = k;
                v265 = v267;
              }
            }
          }
          goto LABEL_405;
        }
        if (v263 >= prime)
          v263 %= prime;
        *(_QWORD *)(*(_QWORD *)(v210 + 48) + 8 * v263) = v248;
        v273 = (_QWORD *)*v262;
        if (!*v262)
          goto LABEL_405;
        while (1)
        {
          v275 = v273[1];
          if (v275 >= prime)
            v275 %= prime;
          if (v275 != v263)
          {
            v276 = *(_QWORD *)(v210 + 48);
            if (!*(_QWORD *)(v276 + 8 * v275))
            {
              *(_QWORD *)(v276 + 8 * v275) = v262;
              goto LABEL_410;
            }
            *v262 = *v273;
            v274 = 8 * v275;
            *v273 = **(_QWORD **)(*(_QWORD *)(v210 + 48) + v274);
            **(_QWORD **)(*(_QWORD *)(v210 + 48) + v274) = v273;
            v273 = v262;
          }
          v275 = v263;
LABEL_410:
          v262 = v273;
          v273 = (_QWORD *)*v273;
          v263 = v275;
          if (!v273)
            goto LABEL_405;
        }
      }
LABEL_658:
      v445 = *(_QWORD **)(*(_QWORD *)&v2200[8] + 64);
      if (v445)
      {
        v446 = 0;
        while (1)
        {
          v447 = (char *)v445[3];
          v448 = (char *)v445[4];
          if (v447 != v448)
          {
            v449 = v448 - v447 - 8;
            if (v449 >= 8)
            {
              v450 = 0;
              v451 = (v449 >> 3) + 1;
              v452 = v447 + 8;
              v453 = v451 & 0x3FFFFFFFFFFFFFFELL;
              do
              {
                v446 += *(_DWORD *)(*(v452 - 1) + 88);
                v450 += *(_DWORD *)(*v452 + 88);
                v452 += 2;
                v453 -= 2;
              }
              while (v453);
              v446 += v450;
              if (v451 == (v451 & 0x3FFFFFFFFFFFFFFELL))
                goto LABEL_660;
              v447 += 8 * (v451 & 0x3FFFFFFFFFFFFFFELL);
            }
            do
            {
              v454 = *(_QWORD *)v447;
              v447 += 8;
              v446 += *(_DWORD *)(v454 + 88);
            }
            while (v447 != v448);
          }
LABEL_660:
          v445 = (_QWORD *)*v445;
          if (!v445)
            goto LABEL_670;
        }
      }
      v446 = 0;
LABEL_670:
      if (GEOGetVectorKitRouteLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
      v455 = (id)GEOGetVectorKitRouteLog_log;
      if (os_log_type_enabled(v455, OS_LOG_TYPE_INFO))
      {
        v456 = *(_QWORD *)(*(_QWORD *)&v2200[8] + 72);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v456;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v446;
        _os_log_impl(&dword_19F029000, v455, OS_LOG_TYPE_INFO, "RouteRenderLayer::buildRouteLineLayer routeRibbons size: %zu  pointCount: %d", buf, 0x12u);
      }

      v457 = *(_QWORD *)(a2 + 736);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZN2md16RouteRenderLayer19buildRouteLineLayerERKNS_13LayoutContextERKNSt3__110shared_ptrINS_16RouteLineOverlayEEE_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E42EE0E8;
      *(_QWORD *)&v2217[8] = a3;
      *(_QWORD *)v2217 = v2200;
      *(_QWORD *)&v2221[24] = 0;
      *(_QWORD *)v2221 = &off_1E42C7118;
      *(_QWORD *)&v2221[8] = MEMORY[0x1A1AF5730](buf);
      *(_QWORD *)&v2221[24] = v2221;
      v2226 = 0uLL;
      (*(void (**)(_QWORD, _BYTE *, __int128 *))(**(_QWORD **)(v457 + 32) + 16))(*(_QWORD *)(v457 + 32), v2221, &v2226);
      v458 = (std::__shared_weak_count *)*((_QWORD *)&v2226 + 1);
      if (*((_QWORD *)&v2226 + 1))
      {
        v459 = (unint64_t *)(*((_QWORD *)&v2226 + 1) + 8);
        do
          v460 = __ldaxr(v459);
        while (__stlxr(v460 - 1, v459));
        if (!v460)
        {
          ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
          std::__shared_weak_count::__release_weak(v458);
        }
      }
      v461 = *(_QWORD **)&v2221[24];
      if (*(_BYTE **)&v2221[24] == v2221)
      {
        v462 = 4;
        v461 = v2221;
      }
      else
      {
        if (!*(_QWORD *)&v2221[24])
        {
LABEL_684:
          v463 = *(_QWORD *)(a2 + 736);
          *(_QWORD *)v2221 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v2221[8] = 3221225472;
          *(_QWORD *)&v2221[16] = ___ZN2md16RouteRenderLayer19buildRouteLineLayerERKNS_13LayoutContextERKNSt3__110shared_ptrINS_16RouteLineOverlayEEE_block_invoke_2;
          *(_QWORD *)&v2221[24] = &unk_1E42EE0E8;
          *(_QWORD *)&v2221[40] = a3;
          *(_QWORD *)&v2221[32] = v2147;
          *(_QWORD *)&v2226 = &off_1E42C7118;
          *((_QWORD *)&v2226 + 1) = MEMORY[0x1A1AF5730](v2221);
          *((_QWORD *)&v2227 + 1) = &v2226;
          *(_OWORD *)v2242 = 0uLL;
          (*(void (**)(_QWORD, __int128 *, _BYTE *))(**(_QWORD **)(v463 + 32) + 16))(*(_QWORD *)(v463 + 32), &v2226, v2242);
          v464 = *(std::__shared_weak_count **)&v2242[8];
          if (*(_QWORD *)&v2242[8])
          {
            v465 = (unint64_t *)(*(_QWORD *)&v2242[8] + 8);
            do
              v466 = __ldaxr(v465);
            while (__stlxr(v466 - 1, v465));
            if (!v466)
            {
              ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
              std::__shared_weak_count::__release_weak(v464);
            }
          }
          v467 = (__int128 *)*((_QWORD *)&v2227 + 1);
          if (*((__int128 **)&v2227 + 1) == &v2226)
          {
            v468 = 4;
            v467 = &v2226;
          }
          else
          {
            if (!*((_QWORD *)&v2227 + 1))
            {
LABEL_694:
              v469 = __p[0];
              if (__p[0])
              {
                v470 = __p[1];
                v471 = __p[0];
                if (__p[1] != __p[0])
                {
                  v5 = (unint64_t)__p[1];
                  do
                  {
                    v473 = *(_QWORD **)(v5 - 8);
                    v5 -= 8;
                    v472 = v473;
                    if (v473)
                    {
                      _ZF = (*v472)-- == 1;
                      if (_ZF)
                      {
                        md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v472 + 1));
                        if ((v474 & 1) == 0
                        {
                          v475 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v475, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 40))(mdm::Allocator::instance(void)::alloc, *(v470 - 1), 424);
                        *(v470 - 1) = 0;
                      }
                    }
                    v470 = (_QWORD *)v5;
                  }
                  while ((void *)v5 != v469);
                  v471 = __p[0];
                }
                __p[1] = v469;
                operator delete(v471);
              }
              _Block_object_dispose(v2147, 8);
              std::__hash_table<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::DottedRouteLineBatchKey>,std::equal_to<md::DottedRouteLineBatchKey>,true>,std::__unordered_map_equal<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::DottedRouteLineBatchKey>,std::hash<md::DottedRouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>>>::~__hash_table(v2043);
              _Block_object_dispose(v2200, 8);
              std::__hash_table<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineBatchKey>,std::equal_to<md::RouteLineBatchKey>,true>,std::__unordered_map_equal<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineBatchKey>,std::hash<md::RouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>>>::~__hash_table((uint64_t)&v2201[16]);

              v191 = *a3;
              v6 = 1;
              if (*(_QWORD *)(*a3 + 328))
                goto LABEL_1068;
LABEL_708:
              v476 = a2;
              v477 = *(_QWORD **)(a2 + 8);
              v478 = (int8x8_t)v477[1];
              if (!*(_QWORD *)&v478)
                goto LABEL_731;
              v479 = (uint8x8_t)vcnt_s8(v478);
              v479.i16[0] = vaddlv_u8(v479);
              if (v479.u32[0] > 1uLL)
              {
                v480 = 0xE42D19AFCA302E68;
                if (*(_QWORD *)&v478 <= 0xE42D19AFCA302E68)
                  v480 = 0xE42D19AFCA302E68 % *(_QWORD *)&v478;
              }
              else
              {
                v480 = (*(_QWORD *)&v478 - 1) & 0xE42D19AFCA302E68;
              }
              v481 = *(_QWORD **)(*v477 + 8 * v480);
              if (!v481)
                goto LABEL_731;
              v482 = (_QWORD *)*v481;
              if (!v482)
                goto LABEL_731;
              if (v479.u32[0] < 2uLL)
              {
                v483 = *(_QWORD *)&v478 - 1;
                while (1)
                {
                  v485 = v482[1];
                  if (v485 == 0xE42D19AFCA302E68)
                  {
                    if (v482[2] == 0xE42D19AFCA302E68)
                      goto LABEL_729;
                  }
                  else if ((v485 & v483) != v480)
                  {
                    goto LABEL_731;
                  }
                  v482 = (_QWORD *)*v482;
                  if (!v482)
                    goto LABEL_731;
                }
              }
              while (1)
              {
                v484 = v482[1];
                if (v484 == 0xE42D19AFCA302E68)
                  break;
                if (v484 >= *(_QWORD *)&v478)
                  v484 %= *(_QWORD *)&v478;
                if (v484 != v480)
                  goto LABEL_731;
LABEL_718:
                v482 = (_QWORD *)*v482;
                if (!v482)
                  goto LABEL_731;
              }
              if (v482[2] != 0xE42D19AFCA302E68)
                goto LABEL_718;
LABEL_729:
              v486 = v482[5];
              if (*(_QWORD *)(v486 + 8) == 0xE42D19AFCA302E68)
              {
                v487 = *(uint64_t **)(v486 + 32);
                goto LABEL_732;
              }
LABEL_731:
              v487 = 0;
LABEL_732:
              *(_QWORD *)v2200 = 0;
              *(_QWORD *)&v2200[8] = v2200;
              *(_QWORD *)&v2200[16] = 0x5812000000;
              *(_QWORD *)&v2200[24] = __Block_byref_object_copy__12_4913;
              *(_QWORD *)v2201 = __Block_byref_object_dispose__13_4914;
              memset(&v2201[8], 0, 40);
              LODWORD(v2202[0]) = 1065353216;
              v488 = *(void **)(v191 + 160);
              if (v488)
              {
                v489 = (gss::Allocator *)objc_msgSend(v488, "sections");
                v490 = v2238;
                v2064 = v2239;
                if (v2238 != (uint64_t (**)())v2239)
                {
                  v491 = 0uLL;
                  do
                  {
                    v2082 = v490;
                    v492 = *v490;
                    v2234[0] = (uint64_t)v492;
                    if (v492)
                      ++*(_QWORD *)v492;
                    v493 = *(float ***)&v2200[8];
                    v2078 = v492;
                    v2068 = (md::RouteLineSection *)((char *)v492 + 8);
                    if (v492)
                      v494 = (float *)((char *)v492 + 8);
                    else
                      v494 = 0;
                    *(__n128 *)&v2147[8] = v491;
                    v2148 = v491;
                    *(_QWORD *)v2147 = v494;
                    v2226 = 0uLL;
                    *(_QWORD *)&v2227 = 0;
                    v495 = 0;
                    v496 = 0;
                    *((_QWORD *)&v2227 + 1) = gss::Allocator::instance(v489);
                    v2089 = v493 + 8;
                    v2104 = (ggl::CommandBuffer *)v493;
                    while (1)
                    {
                      v489 = (gss::Allocator *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v494 + 12) + 24))(*((_QWORD *)v494 + 12));
                      if (v489 == v495)
                        break;
                      v497 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, gss::Allocator *))(**((_QWORD **)v494 + 12) + 32))(*((_QWORD *)v494 + 12), v495);
                      v2117 = v495;
                      v498 = v497[47];
                      v499 = gss::Allocator::instance((gss::Allocator *)v497);
                      v500 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v499 + 16))(v499, 24, 4);
                      v501 = v500;
                      if (v500)
                        *v500 = 0xB00000005;
                      v2106 = (v2106 & 0xFFFF000000000000 | (v498 << 32) | 0x10001) + 84;
                      v500[1] = v2106;
                      v500[2] = 65613;
                      __p[0] = 0;
                      __p[1] = 0;
                      v2194 = 0;
                      v2195 = v499;
                      v502 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v499 + 16))(v499, 24, 4);
                      __p[0] = v502;
                      __p[1] = v502;
                      v2194 = v502 + 24;
                      if (v502)
                        *(_QWORD *)v502 = *v501;
                      *((_QWORD *)v502 + 1) = v501[1];
                      *((_QWORD *)v502 + 2) = v501[2];
                      __p[1] = v502 + 24;
                      gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)__p);
                      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v499 + 40))(v499, v501, 24);
                      v503 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v494 + 12) + 24))(*((_QWORD *)v494 + 12));
                      v504 = v2117;
                      if (v2117)
                      {
                        v505 = v503 - 1;
                        v506 = v2226;
                        v507 = __p[0];
                        if ((void *)(*((_QWORD *)&v2226 + 1) - v2226) != (void *)((char *)__p[1] - (char *)__p[0]))
                          goto LABEL_759;
                        if ((_QWORD)v2226 != *((_QWORD *)&v2226 + 1))
                        {
                          while (1)
                          {
                            _ZF = *(_DWORD *)v506 == *v507
                               && *(unsigned __int16 *)(v506 + 4) == *((unsigned __int16 *)v507 + 2);
                            if (!_ZF)
                              break;
                            v506 += 8;
                            v507 += 2;
                            if (v506 == *((_QWORD *)&v2226 + 1))
                              goto LABEL_758;
                          }
LABEL_759:
                          v509 = *v487;
                          *(_QWORD *)&buf[7] = 0;
                          *(_QWORD *)buf = 0;
                          buf[15] = 1;
                          gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)v2221, v509, (gss::FeatureAttributeSet *)&v2226, (gss::QueryOverrides *)buf);
                          if (!buf[14] && *(_QWORD *)buf)
                          {
                            v511 = gss::Allocator::instance(v510);
                            v510 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v511 + 40))(v511, *(_QWORD *)buf, *(unsigned __int16 *)&buf[12]);
                          }
                          v512 = *(_OWORD *)v2221;
                          *(_OWORD *)v2221 = 0uLL;
                          v513 = *(std::__shared_weak_count **)&v2147[16];
                          *(_OWORD *)&v2147[8] = v512;
                          if (!v513)
                            goto LABEL_766;
                          v514 = (unint64_t *)&v513->__shared_owners_;
                          do
                            v515 = __ldaxr(v514);
                          while (__stlxr(v515 - 1, v514));
                          if (!v515)
                          {
                            ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
                            std::__shared_weak_count::__release_weak(v513);
                            v516 = *(std::__shared_weak_count **)&v2221[8];
                            if (*(_QWORD *)&v2221[8])
                            {
LABEL_767:
                              v517 = (unint64_t *)&v516->__shared_owners_;
                              do
                                v518 = __ldaxr(v517);
                              while (__stlxr(v518 - 1, v517));
                              if (!v518)
                              {
                                ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
                                std::__shared_weak_count::__release_weak(v516);
                              }
                            }
                          }
                          else
                          {
LABEL_766:
                            v516 = *(std::__shared_weak_count **)&v2221[8];
                            if (*(_QWORD *)&v2221[8])
                              goto LABEL_767;
                          }
                          v520 = *v487;
                          memset(v2221, 0, 24);
                          *(_QWORD *)&v2221[24] = gss::Allocator::instance(v510);
                          v521 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v2221[24]
                                                                                               + 16))(*(_QWORD *)&v2221[24], 8, 4);
                          *(_QWORD *)v2221 = v521;
                          *(_QWORD *)&v2221[16] = v521 + 1;
                          if (v521)
                            *v521 = 0x10001004DLL;
                          *(_QWORD *)&v2221[8] = v521 + 1;
                          gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)&v2226, (unsigned int **)v2221, (uint64_t *)buf);
                          *(_QWORD *)&v2242[7] = 0;
                          *(_QWORD *)v2242 = 0;
                          v2242[15] = 1;
                          gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)v2236, v520, (gss::FeatureAttributeSet *)buf, (gss::QueryOverrides *)v2242);
                          if (!v2242[14] && *(_QWORD *)v2242)
                          {
                            v523 = gss::Allocator::instance(v522);
                            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v523 + 40))(v523, *(_QWORD *)v2242, *(unsigned __int16 *)&v2242[12]);
                          }
                          v524 = *(__n128 *)v2236;
                          v2236[0] = 0;
                          v2236[1] = 0;
                          v525 = (std::__shared_weak_count *)v2148.n128_u64[1];
                          v2148 = v524;
                          if (!v525)
                            goto LABEL_784;
                          v526 = (unint64_t *)&v525->__shared_owners_;
                          do
                            v527 = __ldaxr(v526);
                          while (__stlxr(v527 - 1, v526));
                          if (!v527)
                          {
                            ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
                            std::__shared_weak_count::__release_weak(v525);
                            v528 = (std::__shared_weak_count *)v2236[1];
                            if (v2236[1])
                            {
LABEL_785:
                              v529 = (unint64_t *)&v528->__shared_owners_;
                              do
                                v530 = __ldaxr(v529);
                              while (__stlxr(v530 - 1, v529));
                              if (!v530)
                              {
                                ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
                                std::__shared_weak_count::__release_weak(v528);
                              }
                            }
                          }
                          else
                          {
LABEL_784:
                            v528 = (std::__shared_weak_count *)v2236[1];
                            if (v2236[1])
                              goto LABEL_785;
                          }
                          if (*(_QWORD *)buf)
                          {
                            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)&buf[24] + 40))(*(_QWORD *)&buf[24], *(_QWORD *)buf, *(_QWORD *)&buf[16] - *(_QWORD *)buf);
                          }
                          if (*(_QWORD *)v2221)
                          {
                            *(_QWORD *)&v2221[8] = *(_QWORD *)v2221;
                            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)&v2221[24] + 40))(*(_QWORD *)&v2221[24], *(_QWORD *)v2221, *(_QWORD *)&v2221[16] - *(_QWORD *)v2221);
                          }
                          v531 = *(_QWORD *)&v2147[8];
                          v532 = *(std::__shared_weak_count **)&v2147[16];
                          *(_OWORD *)v2221 = *(_OWORD *)&v2147[8];
                          if (*(_QWORD *)&v2147[16])
                          {
                            v533 = (unint64_t *)(*(_QWORD *)&v2147[16] + 8);
                            do
                              v534 = __ldxr(v533);
                            while (__stxr(v534 + 1, v533));
                            *(_QWORD *)&buf[8] = v532;
                            do
                              v535 = __ldxr(v533);
                            while (__stxr(v535 + 1, v533));
                          }
                          else
                          {
                            *(_QWORD *)&buf[8] = 0;
                          }
                          *(_QWORD *)buf = v531;
                          *(_OWORD *)&buf[16] = 0uLL;
                          v2217[0] = 0;
                          if (v531)
                            LOBYTE(v531) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v531 + 48))(v531);
                          v2217[0] = v531;
                          if (v532)
                          {
                            v536 = (unint64_t *)&v532->__shared_owners_;
                            do
                              v537 = __ldaxr(v536);
                            while (__stlxr(v537 - 1, v536));
                            if (!v537)
                            {
                              ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
                              std::__shared_weak_count::__release_weak(v532);
                            }
                          }
                          v539 = (std::__shared_weak_count *)v2148.n128_u64[1];
                          v538 = v2148.n128_u64[0];
                          *(__n128 *)v2242 = v2148;
                          if (v2148.n128_u64[1])
                          {
                            v540 = (unint64_t *)(v2148.n128_u64[1] + 8);
                            do
                              v541 = __ldxr(v540);
                            while (__stxr(v541 + 1, v540));
                            *(_QWORD *)&v2221[8] = v539;
                            do
                              v542 = __ldxr(v540);
                            while (__stxr(v542 + 1, v540));
                          }
                          else
                          {
                            *(_QWORD *)&v2221[8] = 0;
                          }
                          *(_QWORD *)v2221 = v538;
                          memset(&v2221[16], 0, 17);
                          if (v538)
                            LOBYTE(v538) = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v538 + 48))(v538);
                          v2221[32] = v538;
                          if (v539)
                          {
                            v543 = (unint64_t *)&v539->__shared_owners_;
                            do
                              v544 = __ldaxr(v543);
                            while (__stlxr(v544 - 1, v543));
                            if (!v544)
                            {
                              ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
                              std::__shared_weak_count::__release_weak(v539);
                            }
                          }
                          if (v2217[0] | v2221[32])
                          {
                            v545 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v494 + 12) + 32))(*((_QWORD *)v494 + 12), (int)v2117 - (v505 != (_QWORD)v2117));
                            v5 = 1;
                            if ((v546 & 1) == 0
                            {
                              v664 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v664, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            v547 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 128, 8);
                            v548 = v547;
                            v549 = v2117 - v496;
                            *(_OWORD *)(v547 + 49) = 0u;
                            *(_OWORD *)(v547 + 40) = 0u;
                            *(_OWORD *)(v547 + 24) = 0u;
                            *(_OWORD *)(v547 + 8) = 0u;
                            *(_QWORD *)(v547 + 56) = v2117 - v496;
                            *(_QWORD *)v547 = off_1E42AF588;
                            *(_QWORD *)(v547 + 72) = 0;
                            v550 = (_QWORD *)(v547 + 72);
                            *(_QWORD *)(v547 + 80) = 0;
                            *(_QWORD *)(v547 + 88) = 0;
                            if (v2117 == v496)
                            {
                              *(_QWORD *)v547 = off_1E42A1068;
                              *(_OWORD *)(v547 + 96) = 0uLL;
                              *(_OWORD *)(v547 + 112) = 0uLL;
                            }
                            else
                            {
                              *(_QWORD *)(v547 + 88) = v549;
                              if ((v551 & 1) == 0
                              {
                                v667 = operator new();
                                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v667, "VectorKitLabels", 0x5ED09DD50000000FLL);
                              }
                              *(_QWORD *)(v548 + 72) = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 12 * v549, 8);
                              *(_BYTE *)(v548 + 64) = 1;
                              *(_QWORD *)v548 = off_1E42A1068;
                              *(_OWORD *)(v548 + 96) = 0u;
                              *(_OWORD *)(v548 + 112) = 0u;
                              if (v549 >> 62)
                                abort();
                              v5 = (unint64_t)operator new(4 * v549);
                              *(_QWORD *)(v548 + 104) = v5;
                              *(_QWORD *)(v548 + 120) = v5 + 4 * v549;
                              bzero((void *)v5, 4 * v549);
                              *(_QWORD *)(v548 + 112) = v5 + 4 * v549;
                            }
                            v2236[0] = (md::SharedResource *)v548;
                            v552 = (float *)(*(uint64_t (**)(_QWORD, gss::Allocator *))(**((_QWORD **)v494 + 12)
                                                                                                + 32))(*((_QWORD *)v494 + 12), v496);
                            v554 = v552[8];
                            *(float *)(v548 + 96) = v554;
                            v555 = *(float *)(v545 + 32);
                            *(float *)(v548 + 100) = v555;
                            if (v2117 != v496)
                            {
                              v556 = 0;
                              v557 = 0;
                              do
                              {
                                v558 = (_DWORD *)(*(uint64_t (**)(_QWORD, gss::Allocator *))(**((_QWORD **)v494 + 12) + 32))(*((_QWORD *)v494 + 12), v496);
                                v559 = (_DWORD *)(*v550 + v556);
                                *v559 = *v558;
                                v559[1] = v558[1];
                                v559[2] = v558[2];
                                v552 = (float *)(*(uint64_t (**)(_QWORD, gss::Allocator *))(**((_QWORD **)v494 + 12) + 32))(*((_QWORD *)v494 + 12), v496);
                                v554 = *(float *)(v548 + 96);
                                v555 = *(float *)(v548 + 100);
                                *(float *)(*(_QWORD *)(v548 + 104) + v557) = fminf(fminf(fmaxf((float)(v555 - v552[8])/ (float)(v494[20] * 10.0), 0.0), 1.0), fminf(fmaxf((float)(v552[8] - v554)/ (float)(v494[20] * 10.0), 0.0), 1.0));
                                v496 = (gss::Allocator *)((char *)v496 + 1);
                                v557 += 4;
                                v556 += 12;
                              }
                              while (v2117 != v496);
                            }
                            *(_QWORD *)&v2149 = __PAIR64__(LODWORD(v555), LODWORD(v554));
                            v560 = 0x9DDFEA08EB382D69
                                 * (((8 * *(_DWORD *)v2147) + 8) ^ *(unsigned int *)&v2147[4]);
                            v561 = 0x9DDFEA08EB382D69 * (*(unsigned int *)&v2147[4] ^ (v560 >> 47) ^ v560);
                            v562 = v561 ^ (v561 >> 47);
                            v563 = 0x9DDFEA08EB382D69 * v562;
                            if (*(_QWORD *)&v2147[8])
                            {
                              v565 = *(unsigned int **)(*(_QWORD *)&v2147[8] + 240);
                              v564 = *(unsigned int **)(*(_QWORD *)&v2147[8] + 248);
                              for (m = ((char *)v564 - (char *)v565) >> 3; v565 != v564; v565 += 2)
                              {
                                v567 = ((m << 6) - 0x61C8864680B583EBLL + (m >> 2) + *v565) ^ m;
                                m = (*((unsigned __int16 *)v565 + 2) - 0x61C8864680B583EBLL + (v567 << 6) + (v567 >> 2)) ^ v567;
                              }
                              v568 = *(unsigned __int16 *)(*(_QWORD *)&v2147[8] + 282);
                              if (*(_WORD *)(*(_QWORD *)&v2147[8] + 282))
                              {
                                v569 = 0;
                                v570 = 0;
                                v571 = 0;
                                v572 = *(_QWORD *)(*(_QWORD *)&v2147[8] + 272);
                                v552 = (float *)(v572 + *(unsigned __int16 *)(*(_QWORD *)&v2147[8] + 280));
                                do
                                {
                                  if (v571 < v568)
                                  {
                                    v570 = (unsigned int *)(v572 + 4 * v571);
                                    v553 = (unsigned __int16 *)v552 + v571;
                                  }
                                  v569 ^= (*v553
                                         - 0x61C8864680B583EBLL
                                         + ((((v569 << 6) - 0x61C8864680B583EBLL + (v569 >> 2) + *v570) ^ v569) << 6)
                                         + ((((v569 << 6) - 0x61C8864680B583EBLL + (v569 >> 2) + *v570) ^ v569) >> 2)) ^ ((v569 << 6) - 0x61C8864680B583EBLL + (v569 >> 2) + *v570);
                                  v573 = v571 + 1;
                                  if (v571 + 1 < v568)
                                    ++v571;
                                  else
                                    v571 = *(unsigned __int16 *)(*(_QWORD *)&v2147[8] + 282);
                                }
                                while (v573 < v568);
                              }
                              else
                              {
                                v569 = 0;
                              }
                              v563 ^= 0x77FA823ACE0B5A40 * v562 - 0x61C8864680B583EBLL + (v563 >> 2) + (v569 ^ m);
                            }
                            v574 = v2148.n128_u64[0];
                            if (v2148.n128_u64[0])
                            {
                              v576 = *(unsigned int **)(v2148.n128_u64[0] + 240);
                              v575 = *(unsigned int **)(v2148.n128_u64[0] + 248);
                              for (n = ((char *)v575 - (char *)v576) >> 3; v576 != v575; v576 += 2)
                              {
                                v578 = ((n << 6) - 0x61C8864680B583EBLL + (n >> 2) + *v576) ^ n;
                                n = (*((unsigned __int16 *)v576 + 2) - 0x61C8864680B583EBLL + (v578 << 6) + (v578 >> 2)) ^ v578;
                              }
                              v579 = *(unsigned __int16 *)(v2148.n128_u64[0] + 282);
                              if (*(_WORD *)(v2148.n128_u64[0] + 282))
                              {
                                v580 = 0;
                                v581 = 0;
                                v582 = 0;
                                v583 = *(_QWORD *)(v2148.n128_u64[0] + 272);
                                do
                                {
                                  if (v582 < v579)
                                  {
                                    v581 = (unsigned int *)(v583 + 4 * v582);
                                    v552 = (float *)(v583 + *(unsigned __int16 *)(v2148.n128_u64[0] + 280) + 2 * v582);
                                  }
                                  v580 ^= (*(unsigned __int16 *)v552
                                         - 0x61C8864680B583EBLL
                                         + ((((v580 << 6) - 0x61C8864680B583EBLL + (v580 >> 2) + *v581) ^ v580) << 6)
                                         + ((((v580 << 6) - 0x61C8864680B583EBLL + (v580 >> 2) + *v581) ^ v580) >> 2)) ^ ((v580 << 6) - 0x61C8864680B583EBLL + (v580 >> 2) + *v581);
                                  v584 = v582 + 1;
                                  if (v582 + 1 < v579)
                                    ++v582;
                                  else
                                    v582 = *(unsigned __int16 *)(v2148.n128_u64[0] + 282);
                                }
                                while (v584 < v579);
                              }
                              else
                              {
                                v580 = 0;
                              }
                              v563 ^= (v563 << 6) - 0x61C8864680B583EBLL + (v563 >> 2) + (v580 ^ n);
                            }
                            v585 = LODWORD(v554) - 0x61C8864680B583EBLL;
                            if (v554 == 0.0)
                              v585 = 0x9E3779B97F4A7C15;
                            v586 = ((v563 >> 2) + (v563 << 6) + v585) ^ v563;
                            v587 = LODWORD(v555) - 0x61C8864680B583EBLL;
                            if (v555 == 0.0)
                              v587 = 0x9E3779B97F4A7C15;
                            v588 = (v587 + (v586 << 6) + (v586 >> 2)) ^ v586;
                            v589 = *((_QWORD *)v2104 + 7);
                            if (v589)
                            {
                              v590 = (uint8x8_t)vcnt_s8((int8x8_t)v589);
                              v590.i16[0] = vaddlv_u8(v590);
                              if (v590.u32[0] > 1uLL)
                              {
                                v5 = (v587 + (v586 << 6) + (v586 >> 2)) ^ v586;
                                if (v588 >= v589)
                                  v5 = v588 % v589;
                              }
                              else
                              {
                                v5 = (v589 - 1) & v588;
                              }
                              v591 = *(float ***)(*((_QWORD *)v2104 + 6) + 8 * v5);
                              if (v591)
                              {
                                v592 = *v591;
                                if (*v591)
                                {
                                  if (v590.u32[0] < 2uLL)
                                  {
                                    while (1)
                                    {
                                      v594 = *((_QWORD *)v592 + 1);
                                      if (v594 == v588)
                                      {
                                        if (*((_QWORD *)v592 + 2) == *(_QWORD *)v2147
                                          && *((_QWORD *)v592 + 3) == *(_QWORD *)&v2147[8]
                                          && *((_QWORD *)v592 + 5) == v2148.n128_u64[0]
                                          && v592[14] == v554
                                          && v592[15] == v555)
                                        {
                                          goto LABEL_961;
                                        }
                                      }
                                      else if ((v594 & (v589 - 1)) != v5)
                                      {
                                        goto LABEL_894;
                                      }
                                      v592 = *(float **)v592;
                                      if (!v592)
                                        goto LABEL_894;
                                    }
                                  }
                                  do
                                  {
                                    v593 = *((_QWORD *)v592 + 1);
                                    if (v593 == v588)
                                    {
                                      if (*((_QWORD *)v592 + 2) == *(_QWORD *)v2147
                                        && *((_QWORD *)v592 + 3) == *(_QWORD *)&v2147[8]
                                        && *((_QWORD *)v592 + 5) == v2148.n128_u64[0]
                                        && v592[14] == v554
                                        && v592[15] == v555)
                                      {
                                        goto LABEL_961;
                                      }
                                    }
                                    else
                                    {
                                      if (v593 >= v589)
                                        v593 %= v589;
                                      if (v593 != v5)
                                        break;
                                    }
                                    v592 = *(float **)v592;
                                  }
                                  while (v592);
                                }
                              }
                            }
LABEL_894:
                            v595 = (float *)operator new(0x60uLL);
                            v592 = v595;
                            *(_QWORD *)v2242 = v595;
                            *(_QWORD *)&v2242[8] = v2089;
                            *(_QWORD *)v595 = 0;
                            *((_QWORD *)v595 + 1) = v588;
                            *((_OWORD *)v595 + 1) = *(_OWORD *)v2147;
                            v596 = *(_QWORD *)&v2147[16];
                            *((_QWORD *)v595 + 4) = *(_QWORD *)&v2147[16];
                            if (v596)
                            {
                              v597 = (unint64_t *)(v596 + 8);
                              do
                                v598 = __ldxr(v597);
                              while (__stxr(v598 + 1, v597));
                            }
                            v599 = v2148.n128_u64[1];
                            *((_QWORD *)v595 + 5) = v574;
                            *((_QWORD *)v595 + 6) = v599;
                            if (v599)
                            {
                              v600 = (unint64_t *)(v599 + 8);
                              do
                                v601 = __ldxr(v600);
                              while (__stxr(v601 + 1, v600));
                            }
                            *((_QWORD *)v595 + 7) = v2149;
                            *((_QWORD *)v595 + 8) = 0;
                            *((_QWORD *)v595 + 9) = 0;
                            *((_QWORD *)v595 + 10) = 0;
                            v603 = v2104;
                            if ((v602 & 1) == 0
                            {
                              v665 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v665, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            *((_QWORD *)v592 + 11) = mdm::Allocator::instance(void)::alloc;
                            v2242[16] = 1;
                            v604 = (float)(unint64_t)(*((_QWORD *)v2104 + 9) + 1);
                            v605 = *((float *)v2104 + 20);
                            if (!v589 || (float)(v605 * (float)v589) < v604)
                            {
                              v606 = (v589 & (v589 - 1)) != 0;
                              if (v589 < 3)
                                v606 = 1;
                              v607 = v606 | (2 * v589);
                              v608 = vcvtps_u32_f32(v604 / v605);
                              if (v607 <= v608)
                                v609 = v608;
                              else
                                v609 = v607;
                              if (v609 == 1)
                              {
                                v609 = 2;
                              }
                              else if ((v609 & (v609 - 1)) != 0)
                              {
                                v609 = std::__next_prime(v609);
                              }
                              v589 = *((_QWORD *)v2104 + 7);
                              if (v609 > v589)
                              {
LABEL_913:
                                if (v609 >> 61)
                                  goto LABEL_2863;
                                v610 = operator new(8 * v609);
                                v611 = (void *)*((_QWORD *)v2104 + 6);
                                *((_QWORD *)v2104 + 6) = v610;
                                if (v611)
                                  operator delete(v611);
                                v612 = 0;
                                *((_QWORD *)v2104 + 7) = v609;
                                do
                                  *(_QWORD *)(*((_QWORD *)v2104 + 6) + 8 * v612++) = 0;
                                while (v609 != v612);
                                v613 = *v2089;
                                if (!*v2089)
                                  goto LABEL_936;
                                v614 = *((_QWORD *)v613 + 1);
                                v615 = v609 - 1;
                                if ((v609 & (v609 - 1)) == 0)
                                {
                                  v616 = v614 & v615;
                                  *(_QWORD *)(*((_QWORD *)v2104 + 6) + 8 * v616) = v2089;
                                  while (1)
                                  {
                                    v617 = *(float **)v613;
                                    if (!*(_QWORD *)v613)
                                      break;
                                    v618 = *((_QWORD *)v617 + 1) & v615;
                                    if (v618 == v616)
                                    {
                                      v613 = *(float **)v613;
                                    }
                                    else
                                    {
                                      v619 = *((_QWORD *)v2104 + 6);
                                      if (*(_QWORD *)(v619 + 8 * v618))
                                      {
                                        *(_QWORD *)v613 = *(_QWORD *)v617;
                                        v620 = 8 * v618;
                                        *(_QWORD *)v617 = **(_QWORD **)(*((_QWORD *)v2104 + 6) + v620);
                                        **(_QWORD **)(*((_QWORD *)v2104 + 6) + v620) = v617;
                                      }
                                      else
                                      {
                                        *(_QWORD *)(v619 + 8 * v618) = v613;
                                        v613 = v617;
                                        v616 = v618;
                                      }
                                    }
                                  }
                                  goto LABEL_936;
                                }
                                if (v614 >= v609)
                                  v614 %= v609;
                                *(_QWORD *)(*((_QWORD *)v2104 + 6) + 8 * v614) = v2089;
                                v624 = *(float **)v613;
                                if (!*(_QWORD *)v613)
                                {
LABEL_936:
                                  v589 = v609;
LABEL_937:
                                  v603 = v2104;
                                  goto LABEL_938;
                                }
                                while (2)
                                {
                                  v626 = *((_QWORD *)v624 + 1);
                                  if (v626 >= v609)
                                    v626 %= v609;
                                  if (v626 != v614)
                                  {
                                    v627 = *((_QWORD *)v2104 + 6);
                                    if (!*(_QWORD *)(v627 + 8 * v626))
                                    {
                                      *(_QWORD *)(v627 + 8 * v626) = v613;
LABEL_942:
                                      v613 = v624;
                                      v624 = *(float **)v624;
                                      v614 = v626;
                                      if (!v624)
                                        goto LABEL_936;
                                      continue;
                                    }
                                    *(_QWORD *)v613 = *(_QWORD *)v624;
                                    v625 = 8 * v626;
                                    *(_QWORD *)v624 = **(_QWORD **)(*((_QWORD *)v2104 + 6) + v625);
                                    **(_QWORD **)(*((_QWORD *)v2104 + 6) + v625) = v624;
                                    v624 = v613;
                                  }
                                  break;
                                }
                                v626 = v614;
                                goto LABEL_942;
                              }
                              if (v609 >= v589)
                                goto LABEL_937;
                              v621 = vcvtps_u32_f32((float)*((unint64_t *)v2104 + 9) / *((float *)v2104 + 20));
                              if (v589 < 3
                                || (v622 = (uint8x8_t)vcnt_s8((int8x8_t)v589),
                                    v622.i16[0] = vaddlv_u8(v622),
                                    v622.u32[0] > 1uLL))
                              {
                                v621 = std::__next_prime(v621);
                              }
                              else
                              {
                                v623 = 1 << -(char)__clz(v621 - 1);
                                if (v621 >= 2)
                                  v621 = v623;
                              }
                              if (v609 <= v621)
                                v609 = v621;
                              if (v609 >= v589)
                              {
                                v603 = v2104;
                                v589 = *((_QWORD *)v2104 + 7);
                              }
                              else
                              {
                                if (v609)
                                  goto LABEL_913;
                                v603 = v2104;
                                v663 = (void *)*((_QWORD *)v2104 + 6);
                                *((_QWORD *)v2104 + 6) = 0;
                                if (v663)
                                  operator delete(v663);
                                v589 = 0;
                                *((_QWORD *)v2104 + 7) = 0;
                              }
LABEL_938:
                              if ((v589 & (v589 - 1)) != 0)
                              {
                                if (v588 >= v589)
                                  v5 = v588 % v589;
                                else
                                  v5 = v588;
                              }
                              else
                              {
                                v5 = (v589 - 1) & v588;
                              }
                            }
                            v628 = *((_QWORD *)v603 + 6);
                            v629 = *(float ***)(v628 + 8 * v5);
                            if (v629)
                            {
                              *(_QWORD *)v592 = *v629;
                              goto LABEL_959;
                            }
                            *(_QWORD *)v592 = *v2089;
                            *v2089 = v592;
                            *(_QWORD *)(v628 + 8 * v5) = v2089;
                            if (*(_QWORD *)v592)
                            {
                              v630 = *(_QWORD *)(*(_QWORD *)v592 + 8);
                              if ((v589 & (v589 - 1)) != 0)
                              {
                                if (v630 >= v589)
                                  v630 %= v589;
                              }
                              else
                              {
                                v630 &= v589 - 1;
                              }
                              v629 = (float **)(*((_QWORD *)v603 + 6) + 8 * v630);
LABEL_959:
                              *v629 = v592;
                            }
                            ++*((_QWORD *)v603 + 9);
LABEL_961:
                            v631 = (md::SharedResource **)*((_QWORD *)v592 + 9);
                            v632 = *((_QWORD *)v592 + 10);
                            v504 = v2117;
                            if ((unint64_t)v631 < v632)
                            {
                              if (v631)
                              {
                                v633 = v2236[0];
                                v2236[0] = 0;
                                *v631 = v633;
                              }
                              v634 = v631 + 1;
                              goto LABEL_993;
                            }
                            v635 = *((_QWORD *)v592 + 8);
                            v636 = ((uint64_t)v631 - v635) >> 3;
                            v637 = v636 + 1;
                            if ((unint64_t)(v636 + 1) >> 61)
                              abort();
                            v638 = v632 - v635;
                            if (v638 >> 2 > v637)
                              v637 = v638 >> 2;
                            if ((unint64_t)v638 >= 0x7FFFFFFFFFFFFFF8)
                              v639 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v639 = v637;
                            if (v639)
                            {
                              v640 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v592 + 11)
                                                                                         + 16))(*((_QWORD *)v592 + 11), 8 * v639, 8);
                              v641 = (md::SharedResource **)(v640 + 8 * v636);
                              v642 = v640 + 8 * v639;
                              if (v640)
                              {
                                v643 = v2236[0];
                                v2236[0] = 0;
                                *v641 = v643;
                              }
                              v504 = v2117;
                            }
                            else
                            {
                              v642 = 0;
                              v641 = (md::SharedResource **)(8 * v636);
                            }
                            v634 = v641 + 1;
                            v644 = (char *)*((_QWORD *)v592 + 8);
                            v645 = (char *)*((_QWORD *)v592 + 9);
                            if (v645 == v644)
                            {
                              *((_QWORD *)v592 + 8) = v641;
                              *((_QWORD *)v592 + 9) = v634;
                              v650 = *((_QWORD *)v592 + 10);
                              *((_QWORD *)v592 + 10) = v642;
                              if (!v645)
                                goto LABEL_993;
                              goto LABEL_992;
                            }
                            v646 = v645 - v644 - 8;
                            if (v646 <= 0x57
                              || (v647 = (v644 - v645 + 7) & 0xFFFFFFFFFFFFFFF8, &v645[v647] < (char *)v641)
                              && (char *)v641 + v647 < v645)
                            {
                              v648 = (char *)*((_QWORD *)v592 + 9);
                              goto LABEL_981;
                            }
                            v657 = (v646 >> 3) + 1;
                            v648 = &v645[-8 * (v657 & 0x3FFFFFFFFFFFFFFCLL)];
                            v658 = v641 - 2;
                            v659 = (__int128 *)(v645 - 32);
                            v660 = v657 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v662 = *v659;
                              v661 = v659[1];
                              *v659 = 0uLL;
                              v659[1] = 0uLL;
                              v659 -= 2;
                              *((_OWORD *)v658 - 1) = v662;
                              *(_OWORD *)v658 = v661;
                              v658 -= 4;
                              v660 -= 4;
                            }
                            while (v660);
                            v641 -= v657 & 0x3FFFFFFFFFFFFFFCLL;
                            if (v657 != (v657 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_981:
                                v649 = (md::SharedResource *)*((_QWORD *)v648 - 1);
                                v648 -= 8;
                                *(_QWORD *)v648 = 0;
                                *--v641 = v649;
                              }
                              while (v648 != v644);
                            }
                            v645 = (char *)*((_QWORD *)v592 + 8);
                            v5 = *((_QWORD *)v592 + 9);
                            *((_QWORD *)v592 + 8) = v641;
                            *((_QWORD *)v592 + 9) = v634;
                            v650 = *((_QWORD *)v592 + 10);
                            *((_QWORD *)v592 + 10) = v642;
                            if ((char *)v5 != v645)
                            {
                              do
                              {
                                v652 = *(void (****)(_QWORD))(v5 - 8);
                                v5 -= 8;
                                v651 = v652;
                                *(_QWORD *)v5 = 0;
                                if (v652)
                                {
                                  (**v651)(v651);
                                  if ((v653 & 1) == 0
                                  {
                                    v654 = operator new();
                                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v654, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                  }
                                  (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v651, 128);
                                }
                              }
                              while ((char *)v5 != v645);
                              v504 = v2117;
                            }
                            if (v645)
LABEL_992:
                              (*(void (**)(_QWORD, char *, uint64_t))(**((_QWORD **)v592 + 11) + 40))(*((_QWORD *)v592 + 11), v645, v650 - (_QWORD)v645);
LABEL_993:
                            *((_QWORD *)v592 + 9) = v634;
                            v655 = v2236[0];
                            v2236[0] = 0;
                            if (v655)
                            {
                              (**(void (***)(md::SharedResource *))v655)(v655);
                              if ((v656 & 1) == 0)
                              {
                                {
                                  v666 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v666, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                              }
                              (*(void (**)(uint64_t, md::SharedResource *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v655, 128);
                            }
                          }
                          std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)&v2226, (uint64_t)__p[0], (_QWORD *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
                          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v2221);
                          gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)buf);
                          v496 = v504;
                          v519 = __p[0];
                          if (!__p[0])
                            goto LABEL_743;
LABEL_997:
                          __p[1] = v519;
                          (*(void (**)(uint64_t, void *, int64_t))(*(_QWORD *)v2195 + 40))(v2195, v519, v2194 - (_BYTE *)v519);
                          goto LABEL_743;
                        }
LABEL_758:
                        if ((gss::Allocator *)v505 == v2117)
                          goto LABEL_759;
                      }
                      else
                      {
                        std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)&v2226, (uint64_t)__p[0], (_QWORD *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
                      }
                      v519 = __p[0];
                      if (__p[0])
                        goto LABEL_997;
LABEL_743:
                      v495 = (gss::Allocator *)((char *)v504 + 1);
                    }
                    if ((_QWORD)v2226)
                    {
                      *((_QWORD *)&v2226 + 1) = v2226;
                      v489 = (gss::Allocator *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)&v2227 + 1)
                                                                                                 + 40))(*((_QWORD *)&v2227 + 1), v2226, v2227 - v2226);
                    }
                    v668 = (std::__shared_weak_count *)v2148.n128_u64[1];
                    v476 = a2;
                    v491 = 0uLL;
                    if (!v2148.n128_u64[1])
                      goto LABEL_1027;
                    v669 = (unint64_t *)(v2148.n128_u64[1] + 8);
                    do
                      v670 = __ldaxr(v669);
                    while (__stlxr(v670 - 1, v669));
                    if (!v670)
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v668->__on_zero_shared)(v668, (__n128)0);
                      std::__shared_weak_count::__release_weak(v668);
                      v491 = 0uLL;
                      v671 = *(std::__shared_weak_count **)&v2147[16];
                      if (*(_QWORD *)&v2147[16])
                      {
LABEL_1028:
                        v672 = (unint64_t *)&v671->__shared_owners_;
                        do
                          v673 = __ldaxr(v672);
                        while (__stlxr(v673 - 1, v672));
                        if (!v673)
                        {
                          ((void (*)(std::__shared_weak_count *, __n128))v671->__on_zero_shared)(v671, v491);
                          std::__shared_weak_count::__release_weak(v671);
                          v491 = 0uLL;
                        }
                      }
                    }
                    else
                    {
LABEL_1027:
                      v671 = *(std::__shared_weak_count **)&v2147[16];
                      if (*(_QWORD *)&v2147[16])
                        goto LABEL_1028;
                    }
                    if (v2078)
                    {
                      _ZF = (*(_QWORD *)v2078)-- == 1;
                      if (_ZF)
                      {
                        md::RouteLineSection::~RouteLineSection(v2068);
                        if ((v674 & 1) == 0
                        {
                          v675 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v675, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        v489 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v2078, 424);
                        v491 = 0uLL;
                      }
                    }
                    v490 = v2082 + 1;
                  }
                  while (v2082 + 1 != (uint64_t (**)())v2064);
                }
              }
              else
              {
                v2238 = 0;
                v2239 = 0;
                v2240 = 0;
              }
              v676 = *(_QWORD *)(v476 + 736);
              *(_QWORD *)v2147 = MEMORY[0x1E0C809B0];
              *(_QWORD *)&v2147[8] = 3221225472;
              *(_QWORD *)&v2147[16] = ___ZN2md16RouteRenderLayer28buildRouteStyledOverlayLayerERKNS_13LayoutContextERKNSt3__110shared_ptrINS_16RouteLineOverlayEEE_block_invoke;
              v2148.n128_u64[0] = (unint64_t)&unk_1E42EE0E8;
              *(_QWORD *)&v2149 = a3;
              v2148.n128_u64[1] = (unint64_t)v2200;
              *(_QWORD *)buf = &off_1E42C7118;
              *(_QWORD *)&buf[8] = MEMORY[0x1A1AF5730](v2147);
              *(_QWORD *)&buf[24] = buf;
              *(_OWORD *)v2221 = 0uLL;
              (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)(v676 + 32) + 16))(*(_QWORD *)(v676 + 32), buf, v2221);
              v677 = *(std::__shared_weak_count **)&v2221[8];
              if (*(_QWORD *)&v2221[8])
              {
                v678 = (unint64_t *)(*(_QWORD *)&v2221[8] + 8);
                do
                  v679 = __ldaxr(v678);
                while (__stlxr(v679 - 1, v678));
                if (!v679)
                {
                  ((void (*)(std::__shared_weak_count *))v677->__on_zero_shared)(v677);
                  std::__shared_weak_count::__release_weak(v677);
                }
              }
              v680 = *(_QWORD **)&buf[24];
              if (*(_BYTE **)&buf[24] == buf)
              {
                v681 = 4;
                v680 = buf;
              }
              else
              {
                if (!*(_QWORD *)&buf[24])
                {
LABEL_1050:
                  v682 = v2238;
                  if (v2238)
                  {
                    v683 = (unint64_t)v2239;
                    v684 = v2238;
                    if (v2239 != (std::__shared_weak_count *)v2238)
                    {
                      v5 = (unint64_t)v2239;
                      do
                      {
                        v686 = *(_QWORD **)(v5 - 8);
                        v5 -= 8;
                        v685 = v686;
                        if (v686)
                        {
                          _ZF = (*v685)-- == 1;
                          if (_ZF)
                          {
                            md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v685 + 1));
                            if ((v687 & 1) == 0
                            {
                              v688 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v688, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                             + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(v683 - 8), 424);
                            *(_QWORD *)(v683 - 8) = 0;
                          }
                        }
                        v683 = v5;
                      }
                      while ((uint64_t (**)())v5 != v682);
                      v684 = v2238;
                    }
                    v2239 = (std::__shared_weak_count *)v682;
                    operator delete(v684);
                  }
                  _Block_object_dispose(v2200, 8);
                  v689 = *(_QWORD **)&v2201[32];
                  if (*(_QWORD *)&v2201[32])
                  {
                    do
                    {
                      v690 = (_QWORD *)*v689;
                      std::pair<md::RouteStyledOverlayBatchKey const,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v689 + 2));
                      operator delete(v689);
                      v689 = v690;
                    }
                    while (v690);
                  }
                  v691 = *(void **)&v2201[16];
                  *(_QWORD *)&v2201[16] = 0;
                  if (v691)
                    operator delete(v691);
                  v191 = *a3;
                  v6 = 1;
                  goto LABEL_1068;
                }
                v681 = 5;
              }
              (*(void (**)(void))(*v680 + 8 * v681))();
              goto LABEL_1050;
            }
            v468 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v467 + 8 * v468))();
          goto LABEL_694;
        }
        v462 = 5;
      }
      (*(void (**)(void))(*v461 + 8 * v462))();
      goto LABEL_684;
    }
    v323 = *(id *)(*a3 + 144);
    objc_msgSend(v323, "composedRoute");
    v324 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v324, "transportType") == 3)
    {

    }
    else
    {
      v325 = *(id *)(*a3 + 144);
      objc_msgSend(v325, "composedRoute");
      v326 = (void *)objc_claimAutoreleasedReturnValue();
      v327 = objc_msgSend(v326, "transportType") == 2;

      if (!v327)
        goto LABEL_300;
    }
    v328 = __p[0];
    if (__p[1] == __p[0])
      goto LABEL_658;
    v329 = 0;
    v330 = 0;
    v331 = 0;
    v2063 = 0;
    v332 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    v333 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    while (1)
    {
      v334 = 0;
      v335 = v328[v329];
      if (v335)
        v336 = (id *)(v335 + 8);
      else
        v336 = 0;
      if (++v329 < v332)
      {
        v337 = v328[v329];
        if (v337)
          v334 = v337 + 8;
        else
          v334 = 0;
      }
      v338 = objc_msgSend(v2081, "continuousMultiSectionRouteAdditionalOverlap");
      v2115 = v330;
      if (!v334)
        break;
      v339 = v338;
      v340 = (float *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v334 + 48))(v334, 0);
      v341 = (*((uint64_t (**)(id *))*v336 + 7))(v336);
      v342 = (*((uint64_t (**)(id *, uint64_t))*v336 + 6))(v336, v341 - 1);
      v343 = *(float *)v342;
      if (vabds_f32(*(float *)v342, *v340) >= 0.000001)
        break;
      v344 = *(float *)(v342 + 4);
      if (vabds_f32(v344, v340[1]) >= 0.000001)
        break;
      v345 = *(float *)(v342 + 8);
      if (vabds_f32(v345, v340[2]) >= 0.000001)
        break;
      v346 = (v339 + 1);
      if (v339 == -1)
      {
        v2077 = 1;
        goto LABEL_542;
      }
      v347 = 1;
      v348 = (char *)v331;
      while (v347 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v334 + 56))(v334))
      {
        v349 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v334 + 48))(v334, v347);
        v350 = v349;
        if (vabds_f32(v343, *(float *)v349) >= 0.000001
          || vabds_f32(v344, *(float *)(v349 + 4)) >= 0.000001
          || vabds_f32(v345, *(float *)(v349 + 8)) >= 0.000001)
        {
          if (v348 >= v2063)
          {
            v353 = 0xAAAAAAAAAAAAAAABLL * ((v348 - (char *)v331) >> 4) + 1;
            if (v353 > 0x555555555555555)
              abort();
            v354 = v329;
            if (0x5555555555555556 * ((v2063 - (char *)v331) >> 4) > v353)
              v353 = 0x5555555555555556 * ((v2063 - (char *)v331) >> 4);
            if (0xAAAAAAAAAAAAAAABLL * ((v2063 - (char *)v331) >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v355 = 0x555555555555555;
            else
              v355 = v353;
            if (v355)
            {
              if (v355 > 0x555555555555555)
                goto LABEL_2863;
              v356 = (char *)operator new(48 * v355);
            }
            else
            {
              v356 = 0;
            }
            v357 = &v356[16 * ((v348 - (char *)v331) >> 4)];
            v358 = *(_OWORD *)v350;
            v359 = *(_OWORD *)(v350 + 32);
            *((_OWORD *)v357 + 1) = *(_OWORD *)(v350 + 16);
            *((_OWORD *)v357 + 2) = v359;
            *(_OWORD *)v357 = v358;
            if (v348 == (char *)v331)
            {
              v361 = &v356[16 * ((v348 - (char *)v331) >> 4)];
            }
            else
            {
              v360 = &v356[16 * ((v348 - (char *)v331) >> 4)];
              do
              {
                v361 = v360 - 48;
                v362 = *((_OWORD *)v348 - 3);
                v363 = *((_OWORD *)v348 - 1);
                *((_OWORD *)v360 - 2) = *((_OWORD *)v348 - 2);
                *((_OWORD *)v360 - 1) = v363;
                *((_OWORD *)v360 - 3) = v362;
                v348 -= 48;
                v360 -= 48;
              }
              while (v348 != (char *)v331);
            }
            v2063 = &v356[48 * v355];
            v348 = v357 + 48;
            if (v331)
              operator delete(v331);
            v331 = (md::RouteLineSection *)v361;
            v329 = v354;
            v333 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
          }
          else
          {
            v351 = *(_OWORD *)v349;
            v352 = *(_OWORD *)(v349 + 32);
            *((_OWORD *)v348 + 1) = *(_OWORD *)(v349 + 16);
            *((_OWORD *)v348 + 2) = v352;
            *(_OWORD *)v348 = v351;
            v348 += 48;
          }
          --v346;
          v343 = *(float *)v350;
          v344 = *(float *)(v350 + 4);
          v345 = *(float *)(v350 + 8);
        }
        ++v347;
        v2077 = 1;
        if (!v346)
          goto LABEL_543;
      }
      v2077 = 1;
LABEL_543:
      v364 = (*((uint64_t (**)(id *))*v336 + 7))(v336);
      {
        v442 = operator new();
        *((_QWORD *)v333 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v442, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v366 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v333 + 299) + 16))(*((_QWORD *)v333 + 299), 128, 8);
      v5 = (v348 - (char *)v331) / 48;
      v2098 = v364 + v5;
      md::RouteLineRibbon::RouteLineRibbon((md::RouteLineRibbon *)v366, v364 + v5);
      *(_QWORD *)buf = v366;
      v367 = 0;
      v368 = 0;
      *(_DWORD *)(v366 + 100) = *(_DWORD *)((*((uint64_t (**)(id *, _QWORD))*v336 + 6))(v336, 0) + 32);
      *(_BYTE *)(v366 + 96) = (v2115 & 1) == 0;
      *(_BYTE *)(v366 + 97) = v2077 ^ 1;
      while (v368 < (*((uint64_t (**)(id *))*v336 + 7))(v336))
      {
        v369 = (_DWORD *)(*((uint64_t (**)(id *, unint64_t))*v336 + 6))(v336, v368);
        v370 = (_DWORD *)(*(_QWORD *)(v366 + 72) + v367);
        *v370 = *v369;
        v370[1] = v369[1];
        v370[2] = v369[2];
        *(_BYTE *)(*(_QWORD *)(v366 + 104) + v367 + 8) = *(_BYTE *)((*((uint64_t (**)(id *, unint64_t))*v336
                                                                     + 6))(v336, v368++)+ 44);
        v367 += 12;
      }
      if (v348 != (char *)v331)
      {
        v371 = 0;
        if (v5 <= 1)
          v372 = 1;
        else
          v372 = (v348 - (char *)v331) / 48;
        v373 = v331;
        do
        {
          v374 = *(_QWORD *)(v366 + 72);
          LODWORD(v5) = 12;
          v375 = (_DWORD *)(v374 + 12 * (v371 + (*((uint64_t (**)(id *))*v336 + 7))(v336)));
          *v375 = *(_DWORD *)v373;
          v375[1] = *((_DWORD *)v373 + 1);
          v375[2] = *((_DWORD *)v373 + 2);
          LOBYTE(v374) = *((_BYTE *)v373 + 44);
          *(_BYTE *)(*(_QWORD *)(v366 + 104) + 12 * (v371 + (*((uint64_t (**)(id *))*v336 + 7))(v336)) + 8) = v374;
          ++v371;
          v373 = (md::RouteLineSection *)((char *)v373 + 48);
        }
        while (v372 != v371);
      }
      v333 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
      v2067 = v331;
      if (objc_msgSend(v2081, "routeDebugPoints"))
      {
        {
          v443 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v443, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v2093 = mdm::Allocator::instance(void)::alloc;
        {
          v444 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v444, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v2061 = v329;
        v2088 = mdm::Allocator::instance(void)::alloc;
        if (v2098)
        {
          v378 = 0;
          v379 = 0;
          v2116 = 0;
          v380 = 0;
          v381 = 0;
          v2106 = 0;
          v382 = 0;
          while (1)
          {
            v383 = *(_QWORD *)buf;
            v384 = *(_QWORD *)(*(_QWORD *)buf + 72) + 12 * v382;
            if (v379 >= v2116)
            {
              v386 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v379 - (_QWORD)v378) >> 2);
              v387 = v386 + 1;
              if (v386 + 1 > 0x1555555555555555)
                goto LABEL_2865;
              v388 = v2116 - (_QWORD)v378;
              if (0x5555555555555556 * ((uint64_t)(v2116 - (_QWORD)v378) >> 2) > v387)
                v387 = 0x5555555555555556 * ((uint64_t)(v2116 - (_QWORD)v378) >> 2);
              v389 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2116 - (_QWORD)v378) >> 2) >= 0xAAAAAAAAAAAAAAALL
                   ? 0x1555555555555555
                   : v387;
              if (v389)
              {
                v2102 = v378;
                v390 = v380;
                v391 = v388;
                v392 = v381;
                v393 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2093 + 16))(v2093, 12 * v389, 4);
                v394 = v393 + 12 * v386;
                v2116 = v393 + 12 * v389;
                if (v393)
                {
                  v395 = *(_QWORD *)v384;
                  *(_DWORD *)(v394 + 8) = *(_DWORD *)(v384 + 8);
                  *(_QWORD *)v394 = v395;
                }
                v381 = v392;
                v388 = v391;
                v380 = v390;
                v378 = v2102;
              }
              else
              {
                v2116 = 0;
                v394 = 4 * ((uint64_t)(v379 - (_QWORD)v378) >> 2);
              }
              v396 = v394;
              if ((ggl::CommandBuffer *)v379 != v378)
              {
                v396 = v394;
                do
                {
                  v397 = *(_QWORD *)(v379 - 12);
                  v379 -= 12;
                  v398 = *(_DWORD *)(v379 + 8);
                  *(_QWORD *)(v396 - 12) = v397;
                  v396 -= 12;
                  *(_DWORD *)(v396 + 8) = v398;
                }
                while ((ggl::CommandBuffer *)v379 != v378);
              }
              v379 = v394 + 12;
              if (v378)
              {
                v399 = v381;
                (*(void (**)(uint64_t, ggl::CommandBuffer *, unint64_t))(*(_QWORD *)v2093 + 40))(v2093, v378, v388);
                v381 = v399;
                v383 = *(_QWORD *)buf;
              }
              v378 = (ggl::CommandBuffer *)v396;
            }
            else
            {
              if (v379)
              {
                v385 = *(_QWORD *)v384;
                *(_DWORD *)(v379 + 8) = *(_DWORD *)(v384 + 8);
                *(_QWORD *)v379 = v385;
              }
              v379 += 12;
            }
            v400 = (_BYTE *)(*(_QWORD *)(v383 + 104) + 12 * v382 + 8);
            if ((unint64_t)v381 >= v2106)
              break;
            if (v381)
              *v381 = *v400;
            ++v381;
LABEL_559:
            if (++v382 == v2098)
              goto LABEL_608;
          }
          v401 = v381 - v380;
          v402 = v381 - v380 + 1;
          if (v402 < 0)
LABEL_2865:
            abort();
          v403 = v2106 - (_QWORD)v380;
          if (2 * (v2106 - (unint64_t)v380) > v402)
            v402 = 2 * (v2106 - (_QWORD)v380);
          if (v403 >= 0x3FFFFFFFFFFFFFFFLL)
            v404 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v404 = v402;
          if (v404)
          {
            v405 = v381;
            v406 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2088 + 16))(v2088, v404, 1);
            v407 = (_BYTE *)(v406 + v401);
            v2106 = v406 + v404;
            v381 = v405;
            if (v406)
              *v407 = *v400;
          }
          else
          {
            v2106 = 0;
            v407 = (_BYTE *)(v381 - v380);
          }
          v408 = v407;
          if (v381 != v380)
          {
            if (v401 < 0x20 || (unint64_t)(v381 - v407) < 0x20)
            {
              v409 = v381;
              v408 = v407;
            }
            else
            {
              v409 = &v381[-(v401 & 0xFFFFFFFFFFFFFFE0)];
              v410 = v407 - 16;
              v411 = (__int128 *)(v381 - 16);
              v412 = v401 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v413 = *v411;
                *(v410 - 1) = *(v411 - 1);
                *v410 = v413;
                v410 -= 2;
                v411 -= 2;
                v412 -= 32;
              }
              while (v412);
              v408 = &v407[-(v401 & 0xFFFFFFFFFFFFFFE0)];
              if (v401 == (v401 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_604;
            }
            do
            {
              v414 = *--v409;
              *--v408 = v414;
            }
            while (v409 != v380);
          }
LABEL_604:
          v381 = v407 + 1;
          if (v380)
          {
            v415 = v407 + 1;
            (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v2088 + 40))(v2088, v380, v403);
            v381 = v415;
          }
          v380 = v408;
          goto LABEL_559;
        }
        v378 = 0;
        v379 = 0;
        v2116 = 0;
        v380 = 0;
        v381 = 0;
        v2106 = 0;
LABEL_608:
        v416 = v381;
        v417 = *a3;
        v418 = objc_loadWeakRetained(v336 + 28);
        v419 = v418;
        v420 = *(uint64_t **)(v417 + 440);
        if (v420)
        {
          while (1)
          {
            while (1)
            {
              v422 = (uint64_t **)v420;
              v423 = v420[4];
              if ((unint64_t)v418 >= v423)
                break;
              v420 = *v422;
              v421 = v422;
              if (!*v422)
                goto LABEL_615;
            }
            if (v423 >= (unint64_t)v418)
              break;
            v420 = v422[1];
            if (!v420)
            {
              v421 = v422 + 1;
              goto LABEL_615;
            }
          }
          v2103 = (ggl::CommandBuffer *)v422;
        }
        else
        {
          v421 = (uint64_t **)(v417 + 440);
          v422 = (uint64_t **)(v417 + 440);
LABEL_615:
          v2103 = (ggl::CommandBuffer *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v417 + 448)
                                                                                            + 16))(*(_QWORD *)(v417 + 448), 48, 8);
          v424 = (uint64_t *)v2103;
          *((_QWORD *)v2103 + 4) = v419;
          *((_QWORD *)v2103 + 5) = 0;
          *(_QWORD *)v2103 = 0;
          *((_QWORD *)v2103 + 1) = 0;
          *((_QWORD *)v2103 + 2) = v422;
          *v421 = (uint64_t *)v2103;
          v425 = **(_QWORD **)(v417 + 432);
          if (v425)
          {
            *(_QWORD *)(v417 + 432) = v425;
            v424 = *v421;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v417 + 440), v424);
          v419 = 0;
          ++*(_QWORD *)(v417 + 456);
        }
        v426 = (_QWORD *)operator new();
        *v426 = &off_1E4295EE8;
        v426[1] = 0;
        v426[2] = 0;
        v426[3] = 0;
        v426[4] = v2093;
        LODWORD(v5) = 12;
        if ((ggl::CommandBuffer *)v379 != v378)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v379 - (_QWORD)v378) >> 2) > 0x1555555555555555)
            abort();
          v427 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2093 + 16))(v2093);
          v426[1] = v427;
          v426[2] = v427;
          v426[3] = v427 + 4 * ((uint64_t)(v379 - (_QWORD)v378) >> 2);
          v428 = v378;
          do
          {
            if (v427)
            {
              v429 = *(_QWORD *)v428;
              *(_DWORD *)(v427 + 8) = *((_DWORD *)v428 + 2);
              *(_QWORD *)v427 = v429;
            }
            v428 = (ggl::CommandBuffer *)((char *)v428 + 12);
            v427 += 12;
          }
          while (v428 != (ggl::CommandBuffer *)v379);
          v426[2] = v427;
        }
        v426[5] = 0;
        v426[6] = 0;
        v426[7] = 0;
        v426[8] = v2088;
        v430 = v416 - v380;
        if (v416 != v380)
        {
          if (v430 < 0)
            abort();
          v431 = (_BYTE *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v2088 + 16))(v2088, v416 - v380, 1);
          v426[5] = v431;
          v426[6] = v431;
          v426[7] = &v431[v430];
          v432 = v380;
          do
          {
            if (v431)
              *v431 = *v432;
            ++v432;
            ++v431;
          }
          while (v432 != v416);
          v426[6] = v431;
        }
        v433 = *((_QWORD *)v2103 + 5);
        *((_QWORD *)v2103 + 5) = v426;
        if (v433)
          (*(void (**)(uint64_t))(*(_QWORD *)v433 + 8))(v433);

        if (v380)
          (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v2088 + 40))(v2088, v380, v2106 - (_QWORD)v380);
        v329 = v2061;
        v333 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
        if (v378)
          (*(void (**)(uint64_t, ggl::CommandBuffer *, unint64_t))(*(_QWORD *)v2093 + 40))(v2093, v378, v2116 - (_QWORD)v378);
      }
      *(_QWORD *)v2221 = v336;
      v434 = std::__hash_table<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineBatchKey>,std::equal_to<md::RouteLineBatchKey>,true>,std::__unordered_map_equal<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineBatchKey>,std::hash<md::RouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::RouteLineBatchKey,std::piecewise_construct_t const&,std::tuple<md::RouteLineBatchKey const&>,std::tuple<>>((uint64_t *)(*(_QWORD *)&v2200[8] + 48), (unint64_t)v336, v2221);
      v435 = v434;
      v436 = (_QWORD *)v434[4];
      if ((unint64_t)v436 >= v434[5])
      {
        v438 = std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>>((uint64_t)(v434 + 3), (uint64_t *)buf);
      }
      else
      {
        if (v436)
        {
          v437 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          *v436 = v437;
        }
        v438 = v436 + 1;
      }
      v331 = v2067;
      v435[4] = v438;
      v439 = *(void (****)(_QWORD))buf;
      *(_QWORD *)buf = 0;
      if (v439)
      {
        (**v439)(v439);
        {
          v441 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v441, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 40))(mdm::Allocator::instance(void)::alloc, v439, 128);
      }
      v328 = __p[0];
      v332 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      v330 = v2077;
      if (v329 >= v332)
      {
        if (v2067)
          operator delete(v2067);
        goto LABEL_658;
      }
    }
    v2077 = 0;
LABEL_542:
    v348 = (char *)v331;
    goto LABEL_543;
  }
  if (!*(_QWORD *)(v191 + 328))
    goto LABEL_708;
LABEL_1068:
  v692 = *(_QWORD *)(v191 + 320);
  v693 = *(_QWORD *)(v692 + 8);
  v694 = *(_QWORD *)(v692 + 16);
  if (v693 != v694)
  {
    do
    {
      v696 = *(_QWORD **)v693;
      v697 = *(_QWORD *)(*(_QWORD *)v693 + 2352);
      v698 = *(_QWORD *)(*(_QWORD *)v693 + 2344);
      if (v697 != v698)
      {
        v699 = *(_QWORD *)(*(_QWORD *)v693 + 2352);
        do
        {
          v701 = *(void **)(v699 - 24);
          v699 -= 24;
          v700 = v701;
          if (v701)
          {
            *(_QWORD *)(v697 - 16) = v700;
            operator delete(v700);
          }
          v697 = v699;
        }
        while (v699 != v698);
      }
      v696[294] = v698;
      v696[291] = v696[290];
      v702 = (_QWORD *)v696[300];
      if (v702)
      {
        do
        {
          if (v702[1])
          {
            v703 = 0;
            v5 = (unint64_t)(v702 + 2);
            do
            {
              v704 = *(void (***)(void))v5;
              v5 += 120;
              (*v704)();
              ++v703;
            }
            while (v703 < v702[1]);
          }
          v702[1] = 0;
          v702 = (_QWORD *)*v702;
        }
        while (v702);
        v695 = v696[300];
      }
      else
      {
        v695 = 0;
      }
      v696[301] = v695;
      v693 += 8;
    }
    while (v693 != v694);
    v191 = *a3;
  }
  v705 = *(_QWORD *)(v191 + 328);
  v706 = *(_QWORD *)(v705 + 8);
  v707 = *(_QWORD *)(v705 + 16);
  if (v706 == v707)
  {
    if (*(_BYTE *)(v191 + 620))
      goto LABEL_1087;
LABEL_1103:
    v720 = v2073;
    if (*(_BYTE *)(v191 + 622))
    {
      v721 = *(void **)(v191 + 160);
      v709 = *(id *)(v2055 + 192);
      objc_msgSend(v721, "splitRouteLineAtAnnotation:puckOffset:", v709, *MEMORY[0x1E0D26A38]);
      goto LABEL_1105;
    }
    v722 = 0;
  }
  else
  {
    do
    {
      v711 = *(_QWORD **)v706;
      v713 = *(_QWORD *)(*(_QWORD *)v706 + 168);
      v712 = *(_QWORD *)(*(_QWORD *)v706 + 176);
      if (v712 != v713)
      {
        v714 = *(_QWORD *)(*(_QWORD *)v706 + 176);
        do
        {
          v716 = *(void **)(v714 - 24);
          v714 -= 24;
          v715 = v716;
          if (v716)
          {
            *(_QWORD *)(v712 - 16) = v715;
            operator delete(v715);
          }
          v712 = v714;
        }
        while (v714 != v713);
      }
      v711[22] = v713;
      v711[19] = v711[18];
      v717 = (_QWORD *)v711[28];
      if (v717)
      {
        do
        {
          if (v717[1])
          {
            v718 = 0;
            v5 = (unint64_t)(v717 + 2);
            do
            {
              v719 = *(void (***)(void))v5;
              v5 += 120;
              (*v719)();
              ++v718;
            }
            while (v718 < v717[1]);
          }
          v717[1] = 0;
          v717 = (_QWORD *)*v717;
        }
        while (v717);
        v710 = v711[28];
      }
      else
      {
        v710 = 0;
      }
      v711[29] = v710;
      v706 += 8;
    }
    while (v706 != v707);
    v191 = *a3;
    if (!*(_BYTE *)(*a3 + 620))
      goto LABEL_1103;
LABEL_1087:
    v708 = *(void **)(v191 + 160);
    v709 = *(id *)(v2055 + 184);
    objc_msgSend(v708, "splitRouteLineAtAnnotation:puckOffset:", v709, *(_QWORD *)(v2073 + 12));
LABEL_1105:

    v722 = *(unsigned __int8 *)(*a3 + 620);
    v720 = v2073;
  }
  memset(v2172, 0, sizeof(v2172));
  v2173 = 1;
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v2172, 0x10002u) = v722;
  v723 = *(unsigned __int8 *)(*a3 + 621);
  *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v2172, 0x1004Du) = v723;
  v724 = *(_QWORD **)(a2 + 8);
  v725 = (int8x8_t)v724[1];
  if (!*(_QWORD *)&v725)
    goto LABEL_1132;
  v726 = (uint8x8_t)vcnt_s8(v725);
  v726.i16[0] = vaddlv_u8(v726);
  if (v726.u32[0] > 1uLL)
  {
    v727 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v725 <= 0xE42D19AFCA302E68)
      v727 = 0xE42D19AFCA302E68 % *(_QWORD *)&v725;
  }
  else
  {
    v727 = (*(_QWORD *)&v725 - 1) & 0xE42D19AFCA302E68;
  }
  v728 = *(_QWORD **)(*v724 + 8 * v727);
  if (!v728)
    goto LABEL_1132;
  v729 = (_QWORD *)*v728;
  if (!v729)
    goto LABEL_1132;
  if (v726.u32[0] < 2uLL)
  {
    v730 = *(_QWORD *)&v725 - 1;
    while (1)
    {
      v732 = v729[1];
      if (v732 == 0xE42D19AFCA302E68)
      {
        if (v729[2] == 0xE42D19AFCA302E68)
          goto LABEL_1128;
      }
      else if ((v732 & v730) != v727)
      {
        goto LABEL_1132;
      }
      v729 = (_QWORD *)*v729;
      if (!v729)
        goto LABEL_1132;
    }
  }
  while (1)
  {
    v731 = v729[1];
    if (v731 == 0xE42D19AFCA302E68)
      break;
    if (v731 >= *(_QWORD *)&v725)
      v731 %= *(_QWORD *)&v725;
    if (v731 != v727)
      goto LABEL_1132;
LABEL_1116:
    v729 = (_QWORD *)*v729;
    if (!v729)
      goto LABEL_1132;
  }
  if (v729[2] != 0xE42D19AFCA302E68)
    goto LABEL_1116;
LABEL_1128:
  v733 = v729[5];
  if (*(_QWORD *)(v733 + 8) != 0xE42D19AFCA302E68 || (v734 = *(_QWORD *)(v733 + 32)) == 0)
  {
LABEL_1132:
    v2083 = 0;
    if (v720)
      goto LABEL_1133;
    goto LABEL_1148;
  }
  v2083 = *(unsigned __int8 *)(v734 + 84) == 3;
  if (!v720)
    goto LABEL_1148;
LABEL_1133:
  v735 = *(id *)(v720 + 40);
  objc_msgSend(v735, "routeInfo");
  v736 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v736, "route");
  v737 = (void *)objc_claimAutoreleasedReturnValue();
  v738 = objc_msgSend(v737, "source");

  v739 = *(id *)(v2073 + 40);
  objc_msgSend(v739, "routeInfo");
  v740 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v740, "route");
  v741 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v741, "transportType"))
    v742 = v2057 == 9;
  else
    v742 = 1;
  v743 = !v742;

  v744 = *(id *)(v2073 + 40);
  if (v744)
  {
    v745 = *(id *)(v2073 + 40);
    v746 = objc_msgSend(v745, "useType") == 1;

  }
  else
  {
    v746 = 0;
  }

  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
  v747 = (void *)objc_claimAutoreleasedReturnValue();
  v748 = objc_msgSend(v747, "reduceMotionEnabled");

  if ((v738 == 4) | v743 & 1 | (!v746 || v2083) || (*(_BYTE *)v2073 ? (v749 = 1) : (v749 = v748), v749 == 1))
  {
    v2053 = 0;
    v6 = 0;
  }
LABEL_1148:
  v750 = *(_QWORD **)(a2 + 8);
  v751 = (int8x8_t)v750[1];
  if (!*(_QWORD *)&v751)
    goto LABEL_1172;
  v752 = (uint8x8_t)vcnt_s8(v751);
  v752.i16[0] = vaddlv_u8(v752);
  if (v752.u32[0] > 1uLL)
  {
    v753 = 0xC97B9E962ADF4AD4;
    if (*(_QWORD *)&v751 <= 0xC97B9E962ADF4AD4)
      v753 = 0xC97B9E962ADF4AD4 % *(_QWORD *)&v751;
  }
  else
  {
    v753 = (*(_QWORD *)&v751 - 1) & 0xC97B9E962ADF4AD4;
  }
  v754 = *(_QWORD **)(*v750 + 8 * v753);
  if (!v754)
    goto LABEL_1172;
  v755 = (_QWORD *)*v754;
  if (!v755)
    goto LABEL_1172;
  if (v752.u32[0] < 2uLL)
  {
    v756 = *(_QWORD *)&v751 - 1;
    while (1)
    {
      v758 = v755[1];
      if (v758 == 0xC97B9E962ADF4AD4)
      {
        if (v755[2] == 0xC97B9E962ADF4AD4)
          goto LABEL_1169;
      }
      else if ((v758 & v756) != v753)
      {
        goto LABEL_1172;
      }
      v755 = (_QWORD *)*v755;
      if (!v755)
        goto LABEL_1172;
    }
  }
  while (1)
  {
    v757 = v755[1];
    if (v757 == 0xC97B9E962ADF4AD4)
      break;
    if (v757 >= *(_QWORD *)&v751)
      v757 %= *(_QWORD *)&v751;
    if (v757 != v753)
      goto LABEL_1172;
LABEL_1158:
    v755 = (_QWORD *)*v755;
    if (!v755)
      goto LABEL_1172;
  }
  if (v755[2] != 0xC97B9E962ADF4AD4)
    goto LABEL_1158;
LABEL_1169:
  v759 = v755[5];
  if (*(_QWORD *)(v759 + 8) != 0xC97B9E962ADF4AD4)
  {
LABEL_1172:
    v760 = 0;
    if (v6)
      goto LABEL_1173;
LABEL_1206:
    v761 = *a3;
    goto LABEL_1207;
  }
  v760 = *(uint64_t **)(v759 + 32);
  if (!v6)
    goto LABEL_1206;
LABEL_1173:
  v761 = *a3;
  if (*(_QWORD *)(*a3 + 320))
  {
    if (v2057 != 9)
    {
      v762 = (std::__shared_weak_count *)a3[1];
      v2169[0] = *a3;
      v2169[1] = v762;
      if (v762)
      {
        v763 = (unint64_t *)&v762->__shared_owners_;
        do
          v764 = __ldxr(v763);
        while (__stxr(v764 + 1, v763));
      }
      v765 = 0;
      md::RouteRenderLayer::updateRoutelineDrawinAnimation(a1, (md::LayoutContext *)a2, v2169, v765);
      if (v762)
      {
        v766 = (unint64_t *)&v762->__shared_owners_;
        do
          v767 = __ldaxr(v766);
        while (__stlxr(v767 - 1, v766));
        if (!v767)
        {
          ((void (*)(std::__shared_weak_count *))v762->__on_zero_shared)(v762);
          std::__shared_weak_count::__release_weak(v762);
        }
      }
      goto LABEL_1206;
    }
    objc_msgSend(*(id *)(v761 + 160), "composedRoute");
    v768 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v768, "anchorPoints");
    v769 = (void *)objc_claimAutoreleasedReturnValue();
    v770 = objc_msgSend(v769, "count");

    v771 = *a3;
    if (v770 >= 2 && *(_DWORD *)(a1 + 48) < v770)
    {
      objc_msgSend(*(id *)(v771 + 160), "composedRoute");
      v781 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v781, "anchorPoints");
      v782 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v782, "objectAtIndexedSubscript:", v770 - 2);
      v783 = (void *)objc_claimAutoreleasedReturnValue();

      v775 = (std::__shared_weak_count *)a3[1];
      v2171[0] = *a3;
      v2171[1] = v775;
      if (v775)
      {
        v784 = (unint64_t *)&v775->__shared_owners_;
        do
          v785 = __ldxr(v784);
        while (__stxr(v785 + 1, v784));
      }
      v786 = (PolylineCoordinate)objc_msgSend(v783, "routeCoordinate");
      md::RouteRenderLayer::updateRoutelineDrawinAnimation(a1, (md::LayoutContext *)a2, v2171, v786);
      if (v775)
      {
        v787 = (unint64_t *)&v775->__shared_owners_;
        do
          v780 = __ldaxr(v787);
        while (__stlxr(v780 - 1, v787));
LABEL_1202:
        if (!v780)
        {
          ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
          std::__shared_weak_count::__release_weak(v775);
        }
      }
      goto LABEL_1204;
    }
    if (*(_BYTE *)(v771 + 849))
    {
      objc_msgSend(*(id *)(v771 + 160), "composedRoute");
      v773 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v773, "anchorPoints");
      v774 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v774, "lastObject");
      v783 = (void *)objc_claimAutoreleasedReturnValue();

      v775 = (std::__shared_weak_count *)a3[1];
      v2170[0] = *a3;
      v2170[1] = v775;
      if (v775)
      {
        v776 = (unint64_t *)&v775->__shared_owners_;
        do
          v777 = __ldxr(v776);
        while (__stxr(v777 + 1, v776));
      }
      v778 = (PolylineCoordinate)objc_msgSend(v783, "routeCoordinate");
      md::RouteRenderLayer::updateRoutelineDrawinAnimation(a1, (md::LayoutContext *)a2, v2170, v778);
      if (v775)
      {
        v779 = (unint64_t *)&v775->__shared_owners_;
        do
          v780 = __ldaxr(v779);
        while (__stlxr(v780 - 1, v779));
        goto LABEL_1202;
      }
LABEL_1204:

    }
    *(_DWORD *)(a1 + 48) = v770;
    goto LABEL_1206;
  }
LABEL_1207:
  if (v761)
    v788 = v2053;
  else
    v788 = 0;
  if (v788 == 1)
  {
    *(_DWORD *)v2200 = 0;
    v789 = md::RouteLineDrawAnimation::update((md::RouteLineDrawAnimation *)(v761 + 632), *(float *)(v761 + 832), (int *)v2200);
    v790 = *(_QWORD *)(*a3 + 320);
    v791 = *(uint64_t **)(v790 + 8);
    v792 = *(uint64_t **)(v790 + 16);
    if (v791 != v792)
    {
      v793 = *(int *)v2200;
      if (v789 < 1.0)
      {
        do
        {
          v794 = *v791;
          if (*(_BYTE *)(*v791 + 2448))
          {
            v795 = *(_QWORD *)(*(_QWORD *)(v794 + 2456) + 240);
            if (v795 >= v793)
              v796 = 0.0;
            else
              v796 = 1.0;
            if (v795 == v793)
              v796 = v789;
            *(float *)(v794 + 2584) = v796;
          }
          ++v791;
        }
        while (v791 != v792);
      }
      else
      {
        do
        {
          v797 = *v791;
          if (*(_BYTE *)(*v791 + 2448))
          {
            v798 = *(_QWORD *)(*(_QWORD *)(v797 + 2456) + 240);
            v799 = v789;
            if (v798 != v793)
            {
              v799 = 1.0;
              if (v798 >= v793)
              {
                if (v798 <= v793)
                  v799 = 0.0;
                else
                  v799 = 1.0;
              }
            }
            *(float *)(v797 + 2584) = v799;
          }
          ++v791;
        }
        while (v791 != v792);
      }
    }
    goto LABEL_1238;
  }
  v800 = *(void **)(v761 + 696);
  if (v800)
  {
    objc_msgSend(v800, "stop");
    v761 = *a3;
  }
  v801 = *(_QWORD *)(v761 + 320);
  v802 = *(_QWORD *)(v801 + 8);
  for (ii = *(_QWORD *)(v801 + 16); v802 != ii; v802 += 8)
  {
    if (*(_BYTE *)(*(_QWORD *)v802 + 2448))
      *(_DWORD *)(*(_QWORD *)v802 + 2584) = 1065353216;
  }
  if (v2053)
  {
LABEL_1238:
    v804 = *a3;
    v805 = *(void **)(*a3 + 696);
    if (!v805
      || *(float *)(v804 + 832) >= 1.0
      || objc_msgSend(v805, "state") == 3
      || objc_msgSend(*(id *)(v804 + 696), "state") == 4)
    {
      goto LABEL_1242;
    }
    v806 = 1;
  }
  else
  {
LABEL_1242:
    v806 = 0;
  }
  v807 = *a3;
  *(_BYTE *)(v807 + 857) = v806;
  v809 = *(_QWORD *)(v807 + 312);
  v808 = *(_QWORD **)(v807 + 320);
  v810 = v808[38];
  if (v810)
    v811 = v810 == v809;
  else
    v811 = 0;
  if (!v811)
  {
    v808[38] = v809;
    v812 = (uint64_t *)v808[1];
    v5 = v808[2];
    if (v812 == (uint64_t *)v5)
    {
LABEL_1304:
      v810 = *(_QWORD *)(v807 + 312);
      goto LABEL_1305;
    }
    while (2)
    {
      v813 = *v812;
      v814 = *(_QWORD *)(*(_QWORD *)(*v812 + 8) + 304);
      ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(*v812 + 2464), *(_QWORD *)(v814 + 96), *(std::__shared_weak_count **)(v814 + 104));
      **(_QWORD **)(*(_QWORD *)(v813 + 2464) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v813 + 2472), *(_QWORD *)(v814 + 96), *(std::__shared_weak_count **)(v814 + 104));
      **(_QWORD **)(*(_QWORD *)(v813 + 2472) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v813 + 2480), *(_QWORD *)(v814 + 96), *(std::__shared_weak_count **)(v814 + 104));
      **(_QWORD **)(*(_QWORD *)(v813 + 2480) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v813 + 2488), *(_QWORD *)(v814 + 96), *(std::__shared_weak_count **)(v814 + 104));
      **(_QWORD **)(*(_QWORD *)(v813 + 2488) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      if (*(_BYTE *)(v813 + 2609))
      {
        v815 = *(_QWORD **)(v813 + 2512);
        v817 = *(_QWORD *)(v814 + 128);
        v816 = *(std::__shared_weak_count **)(v814 + 136);
        if (v816)
        {
          v818 = (unint64_t *)&v816->__shared_owners_;
          do
            v819 = __ldxr(v818);
          while (__stxr(v819 + 1, v818));
        }
        if (!v817 || **(_QWORD **)(v817 + 40) != v815[1])
        {
          v820 = (std::__shared_weak_count *)v815[3];
          v815[2] = 0;
          v815[3] = 0;
          if (v820)
          {
            v821 = (unint64_t *)&v820->__shared_owners_;
            do
              v822 = __ldaxr(v821);
            while (__stlxr(v822 - 1, v821));
            goto LABEL_1270;
          }
          goto LABEL_1271;
        }
        v823 = v815[2];
        if (v823 && v823 != v817)
          ggl::PipelineSetup::resetData((uint64_t)v815);
        if (v816)
        {
          v824 = (unint64_t *)&v816->__shared_owners_;
          do
            v825 = __ldxr(v824);
          while (__stxr(v825 + 1, v824));
        }
        v820 = (std::__shared_weak_count *)v815[3];
        v815[2] = v817;
        v815[3] = v816;
        if (!v820)
          goto LABEL_1271;
        v826 = (unint64_t *)&v820->__shared_owners_;
        do
          v822 = __ldaxr(v826);
        while (__stlxr(v822 - 1, v826));
LABEL_1270:
        if (!v822)
        {
          ((void (*)(std::__shared_weak_count *))v820->__on_zero_shared)(v820);
          std::__shared_weak_count::__release_weak(v820);
          if (v816)
          {
LABEL_1272:
            v827 = (unint64_t *)&v816->__shared_owners_;
            do
              v828 = __ldaxr(v827);
            while (__stlxr(v828 - 1, v827));
            if (!v828)
            {
              ((void (*)(std::__shared_weak_count *))v816->__on_zero_shared)(v816);
              std::__shared_weak_count::__release_weak(v816);
            }
          }
        }
        else
        {
LABEL_1271:
          if (v816)
            goto LABEL_1272;
        }
      }
      else
      {
        ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v813 + 2520), *(_QWORD *)(v814 + 96), *(std::__shared_weak_count **)(v814 + 104));
        **(_QWORD **)(*(_QWORD *)(v813 + 2520) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      }
      v829 = *(_QWORD **)(v813 + 2552);
      v831 = *(_QWORD *)(v814 + 160);
      v830 = *(std::__shared_weak_count **)(v814 + 168);
      if (v830)
      {
        v832 = (unint64_t *)&v830->__shared_owners_;
        do
          v833 = __ldxr(v832);
        while (__stxr(v833 + 1, v832));
      }
      if (!v831 || **(_QWORD **)(v831 + 40) != v829[1])
      {
        v834 = (std::__shared_weak_count *)v829[3];
        v829[2] = 0;
        v829[3] = 0;
        if (v834)
        {
          v835 = (unint64_t *)&v834->__shared_owners_;
          do
            v836 = __ldaxr(v835);
          while (__stlxr(v836 - 1, v835));
          goto LABEL_1295;
        }
        goto LABEL_1296;
      }
      v837 = v829[2];
      if (v837 && v837 != v831)
        ggl::PipelineSetup::resetData((uint64_t)v829);
      if (v830)
      {
        v838 = (unint64_t *)&v830->__shared_owners_;
        do
          v839 = __ldxr(v838);
        while (__stxr(v839 + 1, v838));
      }
      v834 = (std::__shared_weak_count *)v829[3];
      v829[2] = v831;
      v829[3] = v830;
      if (!v834)
        goto LABEL_1296;
      v840 = (unint64_t *)&v834->__shared_owners_;
      do
        v836 = __ldaxr(v840);
      while (__stlxr(v836 - 1, v840));
LABEL_1295:
      if (!v836)
      {
        ((void (*)(std::__shared_weak_count *))v834->__on_zero_shared)(v834);
        std::__shared_weak_count::__release_weak(v834);
        if (v830)
        {
LABEL_1297:
          v841 = (unint64_t *)&v830->__shared_owners_;
          do
            v842 = __ldaxr(v841);
          while (__stlxr(v842 - 1, v841));
          if (!v842)
          {
            ((void (*)(std::__shared_weak_count *))v830->__on_zero_shared)(v830);
            std::__shared_weak_count::__release_weak(v830);
          }
        }
      }
      else
      {
LABEL_1296:
        if (v830)
          goto LABEL_1297;
      }
      ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v813 + 2496), *(_QWORD *)(v814 + 112), *(std::__shared_weak_count **)(v814 + 120));
      ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v813 + 2504), *(_QWORD *)(v814 + 112), *(std::__shared_weak_count **)(v814 + 120));
      ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v813 + 2528), *(_QWORD *)(v814 + 96), *(std::__shared_weak_count **)(v814 + 104));
      **(_QWORD **)(*(_QWORD *)(v813 + 2528) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v813 + 2536), *(_QWORD *)(v814 + 144), *(std::__shared_weak_count **)(v814 + 152));
      **(_QWORD **)(*(_QWORD *)(v813 + 2536) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v813 + 2544), *(_QWORD *)(v814 + 144), *(std::__shared_weak_count **)(v814 + 152));
      **(_QWORD **)(*(_QWORD *)(v813 + 2544) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      **(_QWORD **)(*(_QWORD *)(v813 + 2560) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      **(_QWORD **)(*(_QWORD *)(v813 + 2568) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      **(_QWORD **)(*(_QWORD *)(v813 + 2576) + 96) = *(_QWORD *)(*(_QWORD *)(v814 + 248) + 24);
      if (++v812 == (uint64_t *)v5)
      {
        v807 = *a3;
        goto LABEL_1304;
      }
      continue;
    }
  }
LABEL_1305:
  v2079 = v806;
  v843 = *(_QWORD **)(v807 + 336);
  v844 = v843[19];
  if (v844)
    v845 = v844 == v810;
  else
    v845 = 0;
  if (!v845)
  {
    v843[19] = v810;
    v846 = v843[1];
    v847 = v843[2];
    if (v846 == v847)
    {
LABEL_1341:
      v810 = *(_QWORD *)(v807 + 312);
      goto LABEL_1342;
    }
    while (2)
    {
      v848 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v846 + 8) + 152);
      v849 = *(_QWORD **)(*(_QWORD *)v846 + 288);
      v5 = *(_QWORD *)(v848 + 176);
      v850 = *(std::__shared_weak_count **)(v848 + 184);
      if (v850)
      {
        v851 = (unint64_t *)&v850->__shared_owners_;
        do
          v852 = __ldxr(v851);
        while (__stxr(v852 + 1, v851));
      }
      if (!v5 || **(_QWORD **)(v5 + 40) != v849[1])
      {
        v853 = (std::__shared_weak_count *)v849[3];
        v849[2] = 0;
        v849[3] = 0;
        if (v853)
        {
          v854 = (unint64_t *)&v853->__shared_owners_;
          do
            v855 = __ldaxr(v854);
          while (__stlxr(v855 - 1, v854));
          goto LABEL_1332;
        }
        goto LABEL_1333;
      }
      v856 = v849[2];
      if (v856)
        v857 = v856 == v5;
      else
        v857 = 1;
      if (!v857)
        ggl::PipelineSetup::resetData((uint64_t)v849);
      if (v850)
      {
        v858 = (unint64_t *)&v850->__shared_owners_;
        do
          v859 = __ldxr(v858);
        while (__stxr(v859 + 1, v858));
      }
      v853 = (std::__shared_weak_count *)v849[3];
      v849[2] = v5;
      v849[3] = v850;
      if (!v853)
        goto LABEL_1333;
      v860 = (unint64_t *)&v853->__shared_owners_;
      do
        v855 = __ldaxr(v860);
      while (__stlxr(v855 - 1, v860));
LABEL_1332:
      if (!v855)
      {
        ((void (*)(std::__shared_weak_count *))v853->__on_zero_shared)(v853);
        std::__shared_weak_count::__release_weak(v853);
        if (v850)
        {
LABEL_1334:
          v861 = (unint64_t *)&v850->__shared_owners_;
          do
            v862 = __ldaxr(v861);
          while (__stlxr(v862 - 1, v861));
          if (!v862)
          {
            ((void (*)(std::__shared_weak_count *))v850->__on_zero_shared)(v850);
            std::__shared_weak_count::__release_weak(v850);
          }
        }
      }
      else
      {
LABEL_1333:
        if (v850)
          goto LABEL_1334;
      }
      v846 += 8;
      if (v846 == v847)
      {
        v807 = *a3;
        goto LABEL_1341;
      }
      continue;
    }
  }
LABEL_1342:
  v863 = *(_QWORD **)(v807 + 328);
  v864 = v863[19];
  if (v864)
    v865 = v864 == v810;
  else
    v865 = 0;
  if (!v865)
  {
    v863[19] = v810;
    v866 = v863[1];
    v867 = v863[2];
    if (v866 != v867)
    {
      while (1)
      {
        v868 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v866 + 8) + 152);
        v869 = *(_QWORD **)(*(_QWORD *)v866 + 328);
        v5 = *(_QWORD *)(v868 + 192);
        v870 = *(std::__shared_weak_count **)(v868 + 200);
        if (v870)
        {
          v871 = (unint64_t *)&v870->__shared_owners_;
          do
            v872 = __ldxr(v871);
          while (__stxr(v872 + 1, v871));
        }
        if (v5 && **(_QWORD **)(v5 + 40) == v869[1])
        {
          v876 = v869[2];
          if (v876)
            v877 = v876 == v5;
          else
            v877 = 1;
          if (!v877)
            ggl::PipelineSetup::resetData((uint64_t)v869);
          if (v870)
          {
            v878 = (unint64_t *)&v870->__shared_owners_;
            do
              v879 = __ldxr(v878);
            while (__stxr(v879 + 1, v878));
          }
          v873 = (std::__shared_weak_count *)v869[3];
          v869[2] = v5;
          v869[3] = v870;
          if (!v873)
          {
LABEL_1370:
            if (v870)
              goto LABEL_1371;
            goto LABEL_1348;
          }
          v880 = (unint64_t *)&v873->__shared_owners_;
          do
            v875 = __ldaxr(v880);
          while (__stlxr(v875 - 1, v880));
        }
        else
        {
          v873 = (std::__shared_weak_count *)v869[3];
          v869[2] = 0;
          v869[3] = 0;
          if (!v873)
            goto LABEL_1370;
          v874 = (unint64_t *)&v873->__shared_owners_;
          do
            v875 = __ldaxr(v874);
          while (__stlxr(v875 - 1, v874));
        }
        if (v875)
          goto LABEL_1370;
        ((void (*)(std::__shared_weak_count *))v873->__on_zero_shared)(v873);
        std::__shared_weak_count::__release_weak(v873);
        if (v870)
        {
LABEL_1371:
          v881 = (unint64_t *)&v870->__shared_owners_;
          do
            v882 = __ldaxr(v881);
          while (__stlxr(v882 - 1, v881));
          if (!v882)
          {
            ((void (*)(std::__shared_weak_count *))v870->__on_zero_shared)(v870);
            std::__shared_weak_count::__release_weak(v870);
          }
        }
LABEL_1348:
        v866 += 8;
        if (v866 == v867)
        {
          v807 = *a3;
          break;
        }
      }
    }
  }
  v883 = *(float *)(v2070 + 5232);
  v884 = *(id *)(v807 + 144);
  objc_msgSend(v884, "composedRoute");
  v885 = (void *)objc_claimAutoreleasedReturnValue();
  v886 = objc_msgSend(v885, "transportType");
  v888 = v883 >= 1.0 || v886 != 1;

  if (!v760)
  {
    v895 = a3;
    v2090 = *(_BYTE *)(*a3 + 623) != 0;
    v892 = (const md::LayoutContext *)a2;
    v893 = v2086;
LABEL_1407:
    v897 = *v2059;
    v898 = (gss::FeatureAttributeSet *)(*v895 + 536);
    *(_QWORD *)&v2200[7] = 0;
    *(_QWORD *)v2200 = 0;
    v2200[15] = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v2167, v897, v898, (gss::QueryOverrides *)v2200);
    if (!v2200[14] && *(_QWORD *)v2200)
    {
      v900 = gss::Allocator::instance(v899);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v900 + 40))(v900, *(_QWORD *)v2200, *(unsigned __int16 *)&v2200[12]);
    }
    v901 = v2167;
    v902 = v2168;
    if (v2168)
    {
      v903 = (unint64_t *)&v2168->__shared_owners_;
      do
        v904 = __ldxr(v903);
      while (__stxr(v904 + 1, v903));
    }
    md::TrafficMeshStyle::setup((int *)v2147, v901, v902, 0);
    if (v902)
    {
      v905 = (unint64_t *)&v902->__shared_owners_;
      do
        v906 = __ldaxr(v905);
      while (__stlxr(v906 - 1, v905));
      if (!v906)
      {
        ((void (*)(std::__shared_weak_count *))v902->__on_zero_shared)(v902);
        std::__shared_weak_count::__release_weak(v902);
      }
    }
    v2094 = *(_DWORD *)&v2147[4] == 0;
    v907 = v2168;
    if (v2168)
    {
      v908 = (unint64_t *)&v2168->__shared_owners_;
      do
        v909 = __ldaxr(v908);
      while (__stlxr(v909 - 1, v908));
      if (!v909)
      {
        ((void (*)(std::__shared_weak_count *))v907->__on_zero_shared)(v907);
        std::__shared_weak_count::__release_weak(v907);
      }
    }
    v910 = 1;
    goto LABEL_1424;
  }
  v889 = *v760;
  v890 = v760[1];
  v891 = *v760;
  v892 = (const md::LayoutContext *)a2;
  if (*v760 != v890)
  {
    v891 = *v760;
    v893 = v2086;
    while (*(_BYTE *)v891 != 2)
    {
      v891 += 16;
      if (v891 == v890)
      {
        v894 = 0;
        if (v889 != v890)
          goto LABEL_1396;
        goto LABEL_1399;
      }
    }
  }
  if (v891 == v890)
    v894 = 0;
  else
    v894 = *(_QWORD *)(v891 + 8);
  v893 = v2086;
  if (v889 != v890)
  {
LABEL_1396:
    while (*(_BYTE *)v889 != 23)
    {
      v889 += 16;
      if (v889 == v890)
        goto LABEL_1403;
    }
  }
LABEL_1399:
  if (v889 == v890)
  {
LABEL_1403:
    if (v894)
    {
      v2090 = 1;
      goto LABEL_1405;
    }
    v895 = a3;
    v2090 = *(_BYTE *)(*a3 + 623) != 0;
    goto LABEL_1407;
  }
  v896 = *(_QWORD *)(v889 + 8);
  if (v894)
  {
    v2090 = 1;
    if (!v896)
    {
LABEL_1405:
      v895 = a3;
      goto LABEL_1407;
    }
  }
  else
  {
    v2090 = *(_BYTE *)(*a3 + 623) != 0;
    if (!v896)
      goto LABEL_1405;
  }
  v2094 = 0;
  v910 = 0;
LABEL_1424:
  if (*(_BYTE *)(a1 + 109))
  {
    v911 = *v760;
    v912 = v760[1];
    v913 = *v760;
    if (*v760 != v912)
    {
      v913 = *v760;
      while (*(_BYTE *)v913 != 21)
      {
        v913 += 16;
        if (v913 == v912)
          goto LABEL_1433;
      }
    }
    if (v913 == v912 || !*(_QWORD *)(v913 + 8))
    {
LABEL_1433:
      if (v911 != v912)
      {
        while (*(_BYTE *)v911 != 25)
        {
          v911 += 16;
          if (v911 == v912)
            goto LABEL_1440;
        }
      }
      if (v911 == v912)
LABEL_1440:
        v915 = 0;
      else
        v915 = *(_QWORD *)(v911 + 8);
      v914 = v915 != 0;
    }
    else
    {
      v914 = 1;
    }
  }
  else
  {
    v914 = 0;
  }
  v916 = (_QWORD *)*((_QWORD *)v892 + 1);
  v917 = (int8x8_t)v916[1];
  if (v917)
  {
    v918 = (uint8x8_t)vcnt_s8(v917);
    v918.i16[0] = vaddlv_u8(v918);
    if (v918.u32[0] > 1uLL)
    {
      v919 = 0xE42D19AFCA302E68;
      if (*(_QWORD *)&v917 <= 0xE42D19AFCA302E68)
        v919 = 0xE42D19AFCA302E68 % *(_QWORD *)&v917;
    }
    else
    {
      v919 = (*(_QWORD *)&v917 - 1) & 0xE42D19AFCA302E68;
    }
    v920 = *(_QWORD **)(*v916 + 8 * v919);
    if (v920)
    {
      v921 = (_QWORD *)*v920;
      if (v921)
      {
        if (v918.u32[0] < 2uLL)
        {
          v922 = *(_QWORD *)&v917 - 1;
          while (1)
          {
            v923 = v921[1];
            if (v923 == 0xE42D19AFCA302E68)
            {
              if (v921[2] == 0xE42D19AFCA302E68)
                goto LABEL_1466;
            }
            else if ((v923 & v922) != v919)
            {
              goto LABEL_1470;
            }
            v921 = (_QWORD *)*v921;
            if (!v921)
              goto LABEL_1470;
          }
        }
        do
        {
          v924 = v921[1];
          if (v924 == 0xE42D19AFCA302E68)
          {
            if (v921[2] == 0xE42D19AFCA302E68)
            {
LABEL_1466:
              v925 = v921[5];
              if (*(_QWORD *)(v925 + 8) == 0xE42D19AFCA302E68)
              {
                v926 = *(_QWORD *)(v925 + 32);
                if (v926)
                {
                  if ((*(_DWORD *)(v926 + 88) - 3) >= 0xFFFFFFFE)
                    v914 = 0;
                }
              }
              break;
            }
          }
          else
          {
            if (v924 >= *(_QWORD *)&v917)
              v924 %= *(_QWORD *)&v917;
            if (v924 != v919)
              break;
          }
          v921 = (_QWORD *)*v921;
        }
        while (v921);
      }
    }
  }
LABEL_1470:
  v927 = *a3;
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v2147, v892);
  v2153 = v927 + 464;
  v2154 = v2057;
  v2155 = 0;
  __asm { FMOV            V14.2S, #1.0 }
  v2156 = _D14;
  v2157 = 0;
  v2158 = 0;
  v2162 = 0.0;
  __x = 0.0;
  memset(v2161, 0, 21);
  v2164 = 1;
  memset(v2165, 0, sizeof(v2165));
  v931.n128_f32[0] = md::LayoutContext::frameState(v892);
  v2166 = *(_QWORD *)(v932 + 624);
  if (v893 && *(_BYTE *)(v893 + 64))
  {
    v934 = *(_QWORD *)(v893 + 72);
    v933 = *(_QWORD *)(v893 + 80);
    if (v933)
    {
      v935 = (unint64_t *)(v933 + 8);
      do
        v936 = __ldxr(v935);
      while (__stxr(v936 + 1, v935));
    }
    v937 = *(std::__shared_weak_count **)&v2161[3];
    *(_QWORD *)&v2161[1] = v934;
    *(_QWORD *)&v2161[3] = v933;
    if (v937)
    {
      v938 = (unint64_t *)&v937->__shared_owners_;
      do
        v939 = __ldaxr(v938);
      while (__stlxr(v939 - 1, v938));
      if (!v939)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v937->__on_zero_shared)(v937, v931);
        std::__shared_weak_count::__release_weak(v937);
      }
    }
  }
  v940 = *a3;
  v2155 = *(_BYTE *)(*a3 + 620);
  v941 = *(double *)(v940 + 168);
  if (fabs(v941) <= 2.22044605e-16)
  {
    if (GEOGetVectorKitRouteLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
    v942 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v942, OS_LOG_TYPE_INFO))
    {
      v943 = *(_QWORD *)(*a3 + 168);
      *(_DWORD *)v2200 = 134217984;
      *(_QWORD *)&v2200[4] = v943;
      _os_log_impl(&dword_19F029000, v942, OS_LOG_TYPE_INFO, "*** RouteLine width scale = %f ", v2200, 0xCu);
    }

    v940 = *a3;
    v941 = *(double *)(*a3 + 168);
  }
  v944 = v941;
  *((float *)&v2156 + 1) = v944;
  v945 = *(float *)(v940 + 200);
  if (fabsf(v945) <= 0.00000011921)
  {
    if (GEOGetVectorKitRouteLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
    v946 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v946, OS_LOG_TYPE_INFO))
    {
      v947 = *(float *)(*a3 + 200);
      *(_DWORD *)v2200 = 134217984;
      *(double *)&v2200[4] = v947;
      _os_log_impl(&dword_19F029000, v946, OS_LOG_TYPE_INFO, "*** RouteLine alpha scale = %f ", v2200, 0xCu);
    }

    v940 = *a3;
    v945 = *(float *)(*a3 + 200);
  }
  *(float *)&v2156 = v945;
  if (*(_BYTE *)(v940 + 621))
  {
    v948 = 0;
    if (!v914)
      goto LABEL_1506;
  }
  else
  {
    if (*(_BYTE *)(v940 + 620))
      v948 = 1;
    else
      v948 = 2;
    if (!v914)
      goto LABEL_1506;
  }
  if (*(_BYTE *)(a1 + 109))
    v948 = 2;
  if (*(_BYTE *)(v940 + 621))
    v949 = 1;
  else
    v949 = *(_BYTE *)(a1 + 109) == 0;
  if (!v949)
    v948 = *(unsigned __int8 *)(v940 + 620);
LABEL_1506:
  v2157 = (v948 << 24) | (*(_DWORD *)(v940 + 616) << 16);
  BYTE1(v2150) = *(_DWORD *)(v940 + 512);
  v950 = *(id *)(v940 + 144);
  objc_msgSend(v950, "composedRoute");
  v951 = (void *)objc_claimAutoreleasedReturnValue();
  v2159 = objc_msgSend(v951, "transportType");

  v952 = v141 * v140 * v142 / v145;
  if (**(_BYTE **)(a2 + 736))
    v953 = 1;
  else
    v953 = v914;
  v954 = *(int8x8_t **)(a2 + 8);
  if (v953 == 1)
  {
    md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(a2 + 8));
    v956 = v955 > 13.5 && v888;
  }
  else
  {
    v956 = 0;
  }
  LOBYTE(v2158) = v956;
  v2160 = v952;
  HIBYTE(v2158) = v2094;
  md::LayoutContext::zoomAtCentrePoint(v954);
  v2161[0] = v957;
  LOBYTE(v2161[5]) = a4;
  v2162 = obj;
  md::LayoutContext::frameState((md::LayoutContext *)a2);
  __x = *(long double *)(v958 + 88);
  v2164 = v914;
  if (v2073)
    v959 = *(_BYTE *)v2073 != 0;
  else
    v959 = 0;
  v2165[0] = v959;
  *(float *)&v960 = md::LayoutContext::frameState((md::LayoutContext *)a2);
  v2165[1] = *(unsigned __int8 *)(v961 + 128) - 1 < 3;
  v962 = *(float *)(v2070 + 3076);
  v963 = *(float *)(v2070 + 3080);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v960);
  v964 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v964, "daVinciGlobeSplinedMaxZoom");
  v966 = fmaxf(v963 + v962, 1.0) <= v965 && *(unsigned __int8 *)(v2070 + 3776) - 1 < 3;

  v2165[2] = v966;
  if (*(_BYTE *)(v2073 + 32))
    v967 = *(_DWORD *)(v2073 + 36);
  else
    v967 = -1;
  *(_DWORD *)&v2165[3] = v967;
  v968 = *(id *)(v2073 + 40);
  objc_msgSend(v968, "routeInfo");
  v969 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v969, "route");
  v970 = objc_claimAutoreleasedReturnValue();
  v971 = *(void **)&v2165[7];
  *(_QWORD *)&v2165[7] = v970;

  v972 = *(_QWORD *)(*a3 + 320);
  v973 = *(_QWORD *)(v972 + 304);
  *(_QWORD *)(v972 + 168) = *(_QWORD *)(v973 + 16);
  *(_QWORD *)(v972 + 184) = *(_QWORD *)(v973 + 72);
  *(_QWORD *)(v972 + 160) = *(_QWORD *)(v973 + 16);
  if ((_BYTE)v2158)
  {
    v974 = (_QWORD *)(v973 + 8);
    *(_QWORD *)(v972 + 56) = *(_QWORD *)(v973 + 8);
    *(_QWORD *)(v972 + 72) = *(_QWORD *)v973;
    *(_QWORD *)(v972 + 88) = *(_QWORD *)(v973 + 8);
    *(_QWORD *)(v972 + 112) = *(_QWORD *)(v973 + 8);
    *(_QWORD *)(v972 + 64) = *(_QWORD *)(v973 + 40);
    *(_QWORD *)(v972 + 80) = *(_QWORD *)(v973 + 40);
    *(_QWORD *)(v972 + 96) = *(_QWORD *)(v973 + 40);
    *(_QWORD *)(v972 + 112) = *(_QWORD *)(v973 + 40);
    v975 = (_QWORD *)(v973 + 64);
  }
  else
  {
    *(_QWORD *)(v972 + 56) = *(_QWORD *)v973;
    *(_QWORD *)(v972 + 72) = *(_QWORD *)v973;
    *(_QWORD *)(v972 + 88) = *(_QWORD *)v973;
    *(_QWORD *)(v972 + 112) = *(_QWORD *)v973;
    *(_QWORD *)(v972 + 64) = *(_QWORD *)(v973 + 32);
    *(_QWORD *)(v972 + 80) = *(_QWORD *)(v973 + 32);
    *(_QWORD *)(v972 + 96) = *(_QWORD *)(v973 + 32);
    *(_QWORD *)(v972 + 112) = *(_QWORD *)(v973 + 32);
    v975 = (_QWORD *)(v973 + 56);
    v974 = (_QWORD *)v973;
  }
  v976 = (const md::LayoutContext *)a2;
  *(_QWORD *)(v972 + 176) = *v975;
  *(_QWORD *)(v972 + 120) = *v974;
  *(_QWORD *)(v972 + 192) = *(_QWORD *)(v973 + 80);
  if (*(_BYTE *)(v973 + 296))
  {
    *(_QWORD *)(v972 + 136) = *(_QWORD *)(v973 + 80);
  }
  else
  {
    *(_QWORD *)(v972 + 152) = *(_QWORD *)(v973 + 48);
    *(_QWORD *)(v972 + 144) = *(_QWORD *)(v973 + 24);
  }
  *(_QWORD *)(v972 + 128) = *(_QWORD *)(v973 + 88);
  v977 = *(uint64_t **)(v972 + 8);
  v978 = *(uint64_t **)(v972 + 16);
  if (v977 == v978)
    goto LABEL_1537;
  do
  {
    if (*(_BYTE *)(*v977 + 2448))
      md::RouteLineBatch::layout(*v977, (uint64_t)v2147);
    ++v977;
  }
  while (v977 != v978);
  v979 = *(char **)(v972 + 8);
  v980 = *(char **)(v972 + 16);
  if (v979 == v980)
  {
LABEL_1537:
    v982 = 0;
  }
  else
  {
    v981 = v980 - v979 - 8;
    if (v981 > 7)
    {
      v983 = 0;
      v984 = 0;
      v985 = (v981 >> 3) + 1;
      v986 = v979 + 8;
      v987 = v985 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v983 += *(unsigned __int8 *)(*(v986 - 1) + 2448);
        v984 += *(unsigned __int8 *)(*v986 + 2448);
        v986 += 2;
        v987 -= 2;
      }
      while (v987);
      v982 = v984 + v983;
      if (v985 != (v985 & 0x3FFFFFFFFFFFFFFELL))
      {
        v979 += 8 * (v985 & 0x3FFFFFFFFFFFFFFELL);
        goto LABEL_1542;
      }
    }
    else
    {
      v982 = 0;
      do
      {
LABEL_1542:
        v988 = *(_QWORD *)v979;
        v979 += 8;
        v982 += *(unsigned __int8 *)(v988 + 2448);
      }
      while (v979 != v980);
    }
  }
  if (*(_DWORD *)(v972 + 312) != v982)
  {
    if (GEOGetVectorKitRouteLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
    v989 = (id)GEOGetVectorKitRouteLog_log;
    if (os_log_type_enabled(v989, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v2200 = 67109120;
      *(_DWORD *)&v2200[4] = v982;
      _os_log_impl(&dword_19F029000, v989, OS_LOG_TYPE_INFO, "RouteLine batchRendered = %d", v2200, 8u);
    }

    v976 = (const md::LayoutContext *)a2;
  }
  *(_DWORD *)(v972 + 312) = v982;
  v990 = *(_QWORD *)(*a3 + 336);
  *(_QWORD *)(v990 + 56) = **(_QWORD **)(v990 + 152);
  v991 = *(_QWORD **)(*(_QWORD *)v2147 + 8);
  v992 = (int8x8_t)v991[1];
  v2107 = v910;
  if (!*(_QWORD *)&v992)
  {
    v996 = 0;
    v995 = v2086;
    if (!MEMORY[0xEC0])
      goto LABEL_1553;
    goto LABEL_1592;
  }
  v993 = (uint8x8_t)vcnt_s8(v992);
  v993.i16[0] = vaddlv_u8(v993);
  if (v993.u32[0] > 1uLL)
  {
    v994 = 0x1AF456233693CD46;
    v995 = v2086;
    if (*(_QWORD *)&v992 <= 0x1AF456233693CD46uLL)
      v994 = 0x1AF456233693CD46uLL % *(_QWORD *)&v992;
  }
  else
  {
    v994 = (*(_QWORD *)&v992 - 1) & 0x1AF456233693CD46;
    v995 = v2086;
  }
  v998 = *(_QWORD **)(*v991 + 8 * v994);
  if (!v998)
    goto LABEL_1591;
  v999 = (_QWORD *)*v998;
  if (!v999)
    goto LABEL_1591;
  if (v993.u32[0] < 2uLL)
  {
    while (1)
    {
      v1001 = v999[1];
      if (v1001 == 0x1AF456233693CD46)
      {
        if (v999[2] == 0x1AF456233693CD46)
          goto LABEL_1588;
      }
      else if ((v1001 & (*(_QWORD *)&v992 - 1)) != v994)
      {
        goto LABEL_1591;
      }
      v999 = (_QWORD *)*v999;
      if (!v999)
        goto LABEL_1591;
    }
  }
  while (1)
  {
    v1000 = v999[1];
    if (v1000 == 0x1AF456233693CD46)
      break;
    if (v1000 >= *(_QWORD *)&v992)
      v1000 %= *(_QWORD *)&v992;
    if (v1000 != v994)
      goto LABEL_1591;
LABEL_1565:
    v999 = (_QWORD *)*v999;
    if (!v999)
      goto LABEL_1591;
  }
  if (v999[2] != 0x1AF456233693CD46)
    goto LABEL_1565;
LABEL_1588:
  v1008 = v999[5];
  if (*(_QWORD *)(v1008 + 8) != 0x1AF456233693CD46)
  {
LABEL_1591:
    v996 = 0;
    if (!MEMORY[0xEC0])
      goto LABEL_1553;
    goto LABEL_1592;
  }
  v996 = *(_QWORD *)(v1008 + 32);
  if (!*(_BYTE *)(v996 + 3776))
  {
LABEL_1553:
    if ((*(_QWORD *)&v992 & (*(_QWORD *)&v992 - 1)) != 0)
    {
      v1002 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v992 <= 0x8BD499FBD96FBB9ELL)
        v1002 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v992;
      v997 = *(_QWORD **)(*v991 + 8 * v1002);
      do
      {
        do
          v997 = (_QWORD *)*v997;
        while (v997[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v997[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      v997 = *(_QWORD **)(*v991 + 8 * ((*(_QWORD *)&v992 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          v997 = (_QWORD *)*v997;
        while (v997[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v997[2] != 0x8BD499FBD96FBB9ELL);
    }
    v1003 = 0.0;
    if (**(_BYTE **)(v997[5] + 32) && *(_BYTE *)(v990 + 104))
      v1003 = *(double *)(v996 + 24) * 0.0000000249532021 * (double)(1 << *(_BYTE *)(v990 + 81));
    v1004 = *(_QWORD *)(v990 + 112);
    if ((*(_BYTE *)(v1004 + 16) & 2) == 0)
    {
      v1005 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v1005 != -1)
      {
        *(_QWORD *)v2200 = v2221;
        *(_QWORD *)buf = v2200;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v1006 = *(float **)(v1004 + 72);
    v1007 = v1003;
LABEL_1598:
    v1010 = ggl::CullingGrid::intersectedCellsForView(v1006, v1007);
    goto LABEL_1599;
  }
LABEL_1592:
  v1009 = *(_QWORD *)(v990 + 72);
  if (!v1009)
  {
    v1012 = *(_QWORD *)(v990 + 112);
    if ((*(_BYTE *)(v1012 + 16) & 2) == 0)
    {
      v1013 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v1013 != -1)
      {
        *(_QWORD *)v2200 = v2221;
        *(_QWORD *)buf = v2200;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v1006 = *(float **)(v1012 + 72);
    v1007 = 0.0;
    goto LABEL_1598;
  }
  v1010 = gdc::GlobeTileGrid::intersectWithFrustum(v1009, (const double *)(v996 + 984), *(double *)(v996 + 24));
LABEL_1599:
  v1014 = *(uint64_t **)(v990 + 8);
  v1015 = *(uint64_t **)(v990 + 16);
  if (v1014 != v1015)
  {
    do
    {
      v1017 = *v1014;
      v1018 = *(uint64_t **)(*v1014 + 248);
      v1019 = *(uint64_t **)(*v1014 + 256);
      if (v1018 == v1019)
      {
        v1016 = 0;
      }
      else
      {
        v1016 = 0;
        do
        {
          v1020 = *v1018++;
          v1021 = (*(_DWORD *)(v1020 + 96) & v1010) != 0;
          v1016 |= v1021;
          *(_BYTE *)(v1020 + 48) = v1021;
        }
        while (v1018 != v1019);
      }
      *(_BYTE *)(v1017 + 136) = v1016 & 1;
      *(_BYTE *)(v1017 + 272) = v1016 & 1;
      ++v1014;
    }
    while (v1014 != v1015);
    v1023 = *(unint64_t **)(v990 + 8);
    v1022 = *(unint64_t **)(v990 + 16);
    if (v1023 != v1022)
    {
      __asm { FMOV            V0.4S, #1.0 }
      v2118 = (float32x4_t)_Q0;
      while (1)
      {
        v5 = *v1023;
        if (!*(_BYTE *)(*v1023 + 272))
          goto LABEL_1611;
        v1025 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 152) + 248);
        v1026 = v1025 ? *(float *)(v1025 + 16) : 1.0;
        md::RouteStyleContext::RouteStyleContext((uint64_t)v2200, (uint64_t)v2147, *(_QWORD *)(v5 + 280), *(unsigned __int8 *)(v5 + 296), v1026);
        if (v2200[2])
          break;
        *(_BYTE *)(v5 + 136) = 0;
        *(_BYTE *)(v5 + 272) = 0;
        v1024 = v2209;
        if ((_QWORD)v2209)
          goto LABEL_1610;
LABEL_1611:
        if (++v1023 == v1022)
          goto LABEL_1633;
      }
      *(_BYTE *)(v5 + 272) = 1;
      v1028 = *(_QWORD *)(v5 + 280);
      v1027 = *(_QWORD *)(v5 + 288);
      v1029 = *(_DWORD *)(v1028 + 88);
      *(_BYTE *)(v5 + 136) = 1;
      v1030 = v2214;
      v1031 = *(double *)(v1028 + 232);
      v1032 = v1031 / (*((float *)&v2156 + 1) * v2162);
      v1033 = (float)(*((float *)&v2156 + 1) * v1032)
            / (float)(int)(v1031
                         / (float)((float)(*(float *)(v1028 + 80) * v2215)
                                 + (float)((float)(*((float *)&v2156 + 1) * v2162) * v2213)));
      v1034 = *(unsigned __int8 *)(v5 + 296);
      v1035 = *(_QWORD **)(*(_QWORD *)(v1027 + 64) + 32);
      v1036 = v1035[1];
      v1037 = (float32x4_t *)v1035[9];
      v1037[5].i32[0] = v2156;
      v1037->i32[0] = v1030;
      _Q0 = *(__n128 *)&v2200[8];
      v1037[4] = vsubq_f32(v2118, *(float32x4_t *)&v2200[8]);
      v1037[3].i64[0] = *(_QWORD *)&v2201[8];
      v1037[3].i64[1] = *(_QWORD *)&v2201[16];
      v1037[2].i32[0] = v1029;
      v1037[6].f32[2] = v1033;
      v1038 = v1035[8];
      if (v1038 <= v1036)
        v1038 = v1036;
      v1035[7] = 0;
      v1035[8] = v1038;
      if (!v1034)
      {
        _Q0.n128_f32[0] = _Q0.n128_f32[3] * 0.9;
        v1039 = v1035[9];
        *(float *)(v1039 + 84) = _Q0.n128_f32[3] * 0.9;
        *(_DWORD *)(v1039 + 88) = 1065353216;
        if (v1035[8] > v1036)
          v1036 = v1035[8];
        v1035[7] = 0;
        v1035[8] = v1036;
      }
      *(_QWORD *)(v5 + 48) = v1027;
      v1040 = *(_QWORD **)(v5 + 224);
      if (v1040)
      {
        do
        {
          if (v1040[1])
          {
            v1042 = 0;
            v1043 = (void (***)(void))(v1040 + 2);
            do
            {
              v1044 = *v1043;
              v1043 += 15;
              (*v1044)();
              ++v1042;
            }
            while (v1042 < v1040[1]);
          }
          v1040[1] = 0;
          v1040 = (_QWORD *)*v1040;
        }
        while (v1040);
        v1041 = *(_QWORD *)(v5 + 224);
        v976 = (const md::LayoutContext *)a2;
        v995 = v2086;
      }
      else
      {
        v1041 = 0;
      }
      *(_QWORD *)(v5 + 232) = v1041;
      v1024 = v2209;
      if (!(_QWORD)v2209)
        goto LABEL_1611;
LABEL_1610:
      *((_QWORD *)&v2209 + 1) = v1024;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2211 + 40))(v2211, v1024, v2210 - v1024);
      goto LABEL_1611;
    }
  }
LABEL_1633:
  v2074 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
  v1045 = *(_QWORD **)(v2074 + 8);
  v1046 = v1045[3];
  v1047 = v1045[4];
  if (v1047 == v1046)
  {
    v1055 = 0;
    v1053 = 0;
    goto LABEL_1650;
  }
  v1048 = 0;
  while (1)
  {
    v1049 = *(unsigned __int8 **)(v1046 + 8 * v1048);
    if (*v1049 == *(unsigned __int8 *)(a1 + 96))
    {
      v1050 = *((_QWORD *)v1049 + 1);
      v1051 = v1045[15];
      if (v1050 < (v1045[16] - v1051) >> 3)
        break;
    }
    if (++v1048 >= (unint64_t)((v1047 - v1046) >> 3))
      goto LABEL_1641;
  }
  v1052 = *(_QWORD *)(v1051 + 8 * v1050);
  if (v1052)
  {
    v1053 = *(_QWORD *)(*(_QWORD *)(v1052 + 24) + 8 * *(unsigned __int8 *)(a1 + 97));
    v1054 = v1047 - v1046;
    if (v1047 == v1046)
    {
LABEL_1640:
      v1055 = 0;
LABEL_1650:
      v1062 = 0;
      goto LABEL_1651;
    }
  }
  else
  {
LABEL_1641:
    v1053 = 0;
    v1054 = v1047 - v1046;
    if (v1047 == v1046)
      goto LABEL_1640;
  }
  v1056 = 0;
  v1057 = v1054 >> 3;
  while (1)
  {
    v1058 = *(unsigned __int8 **)(v1046 + 8 * v1056);
    if (*v1058 == *(unsigned __int8 *)(a1 + 98))
    {
      v1059 = *((_QWORD *)v1058 + 1);
      v1060 = v1045[15];
      if (v1059 < (v1045[16] - v1060) >> 3)
        break;
    }
    if (++v1056 >= v1057)
      goto LABEL_1783;
  }
  v1061 = *(_QWORD *)(v1060 + 8 * v1059);
  if (v1061)
  {
    v1062 = *(_QWORD *)(*(_QWORD *)(v1061 + 24) + 8 * *(unsigned __int8 *)(a1 + 99));
    v1063 = v1047 - v1046;
    if (v1047 == v1046)
    {
LABEL_1648:
      v1055 = 0;
      goto LABEL_1651;
    }
  }
  else
  {
LABEL_1783:
    v1062 = 0;
    v1063 = v1047 - v1046;
    if (v1047 == v1046)
      goto LABEL_1648;
  }
  v1174 = 0;
  v1175 = v1063 >> 3;
  while (1)
  {
    v1176 = *(unsigned __int8 **)(v1046 + 8 * v1174);
    if (*v1176 == *(unsigned __int8 *)(a1 + 100))
    {
      v1177 = *((_QWORD *)v1176 + 1);
      v1178 = v1045[15];
      if (v1177 < (v1045[16] - v1178) >> 3)
        break;
    }
    if (++v1174 >= v1175)
      goto LABEL_1808;
  }
  v1179 = *(_QWORD *)(v1178 + 8 * v1177);
  if (v1179)
  {
    v1055 = *(_QWORD *)(*(_QWORD *)(v1179 + 24) + 8 * *(unsigned __int8 *)(a1 + 101));
    v1180 = v1047 - v1046;
    if (v1047 == v1046)
      goto LABEL_1651;
    goto LABEL_1809;
  }
LABEL_1808:
  v1055 = 0;
  v1180 = v1047 - v1046;
  if (v1047 == v1046)
    goto LABEL_1651;
LABEL_1809:
  v1205 = 0;
  v1206 = v1180 >> 3;
  while (1)
  {
    v1207 = *(unsigned __int8 **)(v1046 + 8 * v1205);
    if (*v1207 == *(unsigned __int8 *)(a1 + 102))
    {
      v1208 = *((_QWORD *)v1207 + 1);
      v1209 = v1045[15];
      if (v1208 < (v1045[16] - v1209) >> 3)
        break;
    }
    if (++v1205 >= v1206)
      goto LABEL_1651;
  }
  v1210 = *(_QWORD *)(v1209 + 8 * v1208);
  if (v1210)
  {
    v2105 = *(ggl::CommandBuffer **)(*(_QWORD *)(v1210 + 24) + 8 * *(unsigned __int8 *)(a1 + 103));
    goto LABEL_1652;
  }
LABEL_1651:
  v2105 = 0;
LABEL_1652:
  v1064 = *(_QWORD *)(*a3 + 320);
  v1065 = *(char ****)(v1064 + 8);
  v1066 = *(char ****)(v1064 + 16);
  if (v1065 != v1066)
  {
    v5 = (unint64_t)v2200;
    while (1)
    {
      v1069 = *v1065;
      *(_QWORD *)v2200 = &off_1E42D4450;
      *(_QWORD *)&v2200[8] = v1062;
      *(_QWORD *)&v2200[24] = v2200;
      md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(v1069, 0xC0u, (uint64_t)v2200, _Q0);
      v1067 = *(_QWORD **)&v2200[24];
      if (*(_BYTE **)&v2200[24] == v2200)
      {
        v1067 = v2200;
        v1068 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v2200[24])
          goto LABEL_1656;
        v1068 = 5;
      }
      (*(void (**)(void))(*v1067 + 8 * v1068))();
LABEL_1656:
      if (++v1065 == v1066)
      {
        v1064 = *(_QWORD *)(*a3 + 320);
        break;
      }
    }
  }
  v1070 = *(char ****)(v1064 + 8);
  v1071 = *(char ****)(v1064 + 16);
  if (v1070 == v1071)
    goto LABEL_1670;
  do
  {
    v1074 = *v1070;
    *(_QWORD *)v2200 = &off_1E42D4450;
    *(_QWORD *)&v2200[8] = v1053;
    *(_QWORD *)&v2200[24] = v2200;
    md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(v1074, 0xCu, (uint64_t)v2200, _Q0);
    v1072 = *(_QWORD **)&v2200[24];
    if (*(_BYTE **)&v2200[24] == v2200)
    {
      v1072 = v2200;
      v1073 = 4;
LABEL_1664:
      (*(void (**)(void))(*v1072 + 8 * v1073))();
      goto LABEL_1665;
    }
    if (*(_QWORD *)&v2200[24])
    {
      v1073 = 5;
      goto LABEL_1664;
    }
LABEL_1665:
    ++v1070;
  }
  while (v1070 != v1071);
  v1064 = *(_QWORD *)(*a3 + 320);
LABEL_1670:
  v1075 = *(char ****)(v1064 + 8);
  v1076 = *(char ****)(v1064 + 16);
  if (v1075 != v1076)
  {
    while (2)
    {
      v1079 = *v1075;
      *(_QWORD *)v2200 = &off_1E42D4450;
      *(_QWORD *)&v2200[8] = v1055;
      *(_QWORD *)&v2200[24] = v2200;
      md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(v1079, 0x30u, (uint64_t)v2200, _Q0);
      v1077 = *(_QWORD **)&v2200[24];
      if (*(_BYTE **)&v2200[24] != v2200)
      {
        if (*(_QWORD *)&v2200[24])
        {
          v1078 = 5;
LABEL_1673:
          (*(void (**)(void))(*v1077 + 8 * v1078))();
        }
        if (++v1075 == v1076)
          goto LABEL_1678;
        continue;
      }
      break;
    }
    v1077 = v2200;
    v1078 = 4;
    goto LABEL_1673;
  }
LABEL_1678:
  if (v914)
    v1080 = 155907;
  else
    v1080 = 16387;
  v1081 = v1080 | 0x18000;
  if (v2094)
    v1081 = v1080;
  if (v2090)
    v1082 = v1081;
  else
    v1082 = v1080;
  if (*(_BYTE *)(a1 + 109))
    v1083 = v2107;
  else
    v1083 = 1;
  if (*(_BYTE *)(a1 + 109))
    v1084 = 1024;
  else
    v1084 = 6144;
  if ((v1083 & 1) == 0)
  {
    v1085 = *(_QWORD **)(v2074 + 8);
    v1086 = v1085[3];
    v1087 = v1085[4];
    v1088 = v1087 - v1086;
    if (v1087 == v1086)
      goto LABEL_1700;
    v1089 = 0;
    v1090 = v1088 >> 3;
    while (1)
    {
      v1091 = *(unsigned __int8 **)(v1086 + 8 * v1089);
      if (*v1091 == *(unsigned __int8 *)(a1 + 104))
      {
        v1092 = *((_QWORD *)v1091 + 1);
        v1093 = v1085[15];
        if (v1092 < (v1085[16] - v1093) >> 3)
          break;
      }
      if (++v1089 >= v1090)
        goto LABEL_1700;
    }
    v1094 = *(_QWORD *)(v1093 + 8 * v1092);
    if (!v1094)
LABEL_1700:
      v1095 = 0;
    else
      v1095 = *(_QWORD *)(*(_QWORD *)(v1094 + 24) + 8 * *(unsigned __int8 *)(a1 + 105));
    v1096 = *(_QWORD *)(*a3 + 320);
    v1097 = *(char ****)(v1096 + 8);
    v1098 = *(char ****)(v1096 + 16);
    if (v1097 != v1098)
    {
      while (2)
      {
        v1101 = *v1097;
        *(_QWORD *)v2200 = &off_1E42D4450;
        *(_QWORD *)&v2200[8] = v1095;
        *(_QWORD *)&v2200[24] = v2200;
        md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(v1101, 0x400u, (uint64_t)v2200, _Q0);
        v1099 = *(_QWORD **)&v2200[24];
        if (*(_BYTE **)&v2200[24] != v2200)
        {
          if (*(_QWORD *)&v2200[24])
          {
            v1100 = 5;
LABEL_1704:
            (*(void (**)(void))(*v1099 + 8 * v1100))();
          }
          if (++v1097 == v1098)
            goto LABEL_1709;
          continue;
        }
        break;
      }
      v1099 = v2200;
      v1100 = 4;
      goto LABEL_1704;
    }
LABEL_1709:
    v1084 = 1024;
  }
  v1102 = *a3;
  v1103 = *(_QWORD *)(*a3 + 320);
  v1104 = *(char ****)(v1103 + 8);
  v1105 = *(char ****)(v1103 + 16);
  if (v1104 == v1105)
    goto LABEL_1719;
  v1106 = v1082 | v1084;
  while (2)
  {
    v1109 = *v1104;
    *(_QWORD *)v2200 = &off_1E42D4450;
    *(_QWORD *)&v2200[8] = v2105;
    *(_QWORD *)&v2200[24] = v2200;
    md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(v1109, v1106, (uint64_t)v2200, _Q0);
    v1107 = *(_QWORD **)&v2200[24];
    if (*(_BYTE **)&v2200[24] == v2200)
    {
      v1107 = v2200;
      v1108 = 4;
      goto LABEL_1713;
    }
    if (*(_QWORD *)&v2200[24])
    {
      v1108 = 5;
LABEL_1713:
      (*(void (**)(void))(*v1107 + 8 * v1108))();
    }
    if (++v1104 != v1105)
      continue;
    break;
  }
  v1102 = *a3;
LABEL_1719:
  v1110 = *(_QWORD *)(v1102 + 336);
  v1111 = *(_QWORD **)(v1110 + 8);
  v2108 = *(_QWORD **)(v1110 + 16);
  if (v1111 != v2108)
  {
    while (2)
    {
      v1113 = *v1111;
      *(_QWORD *)buf = &off_1E42D4600;
      *(_QWORD *)&buf[8] = v2105;
      v1114 = buf;
      *(_QWORD *)&buf[24] = buf;
      if (!*(_BYTE *)(v1113 + 272))
      {
        v1112 = 4;
        goto LABEL_1722;
      }
      if (*(_BYTE *)(v1113 + 136))
      {
        v1115 = *(_QWORD *)(*(_QWORD *)(v1113 + 8) + 56);
        *(_QWORD *)(v1113 + 40) = v1115;
        v1116 = *(unsigned __int8 *)(v1115 + 58) == 1;
      }
      else
      {
        v1116 = 0;
      }
      v2119 = v1111;
      v5 = *(_QWORD *)(v1113 + 248);
      v1117 = *(_QWORD *)(v1113 + 256);
      if (v5 != v1117)
      {
        v1118 = 0;
        LODWORD(v1119) = v1113 + 144;
        v976 = (const md::LayoutContext *)(v1113 + 40);
        while (1)
        {
          v1120 = *(void (***)(void))v5;
          if (*(_BYTE *)(*(_QWORD *)v5 + 48))
          {
            if (v1120[11] != v1118)
            {
              if (v1118)
              {
                v1121 = ggl::Batcher::commit((__int128 **)(v1113 + 144), 0xC8u, _Q0);
                if (v1121[1] != *v1121)
                {
                  if (*(_BYTE *)(v1113 + 136))
                  {
                    v1122 = v1121;
                    v1123 = *(void (**)(void))(v1113 + 24);
                    v1124 = *(_QWORD *)(v1113 + 32);
                    v1125 = *(_OWORD *)(v1113 + 88);
                    *(_OWORD *)v2201 = *(_OWORD *)(v1113 + 72);
                    *(_OWORD *)&v2201[16] = v1125;
                    v1126 = *(_OWORD *)(v1113 + 120);
                    *(_OWORD *)&v2201[32] = *(_OWORD *)(v1113 + 104);
                    *(_OWORD *)v2202 = v1126;
                    v1127 = *(_OWORD *)(v1113 + 56);
                    *(_OWORD *)v2200 = *(_OWORD *)v976;
                    *(_OWORD *)&v2200[16] = v1127;
                    v1128 = *(_QWORD **)(v1113 + 232);
                    v1129 = v1128[1];
                    if (v1129 == *(_QWORD *)(v1113 + 240))
                    {
                      v1128 = (_QWORD *)*v1128;
                      if (!v1128)
                      {
                        v1128 = malloc_type_malloc(120 * v1129 + 16, 0xB644C221uLL);
                        *v1128 = 0;
                        v1128[1] = 0;
                        **(_QWORD **)(v1113 + 232) = v1128;
                      }
                      *(_QWORD *)(v1113 + 232) = v1128;
                      v1129 = v1128[1];
                    }
                    v1130 = &v1128[15 * v1129];
                    v1128[1] = v1129 + 1;
                    v1130[2] = &off_1E42B59B0;
                    v1130[3] = v1123;
                    v1130 += 2;
                    v1130[2] = v1124;
                    v1131 = *(_OWORD *)&v2201[32];
                    v1132 = *(_OWORD *)v2202;
                    v1133 = *(_OWORD *)&v2201[16];
                    *(_OWORD *)(v1130 + 7) = *(_OWORD *)v2201;
                    v1134 = *(_OWORD *)v2200;
                    *(_OWORD *)(v1130 + 5) = *(_OWORD *)&v2200[16];
                    *(_OWORD *)(v1130 + 3) = v1134;
                    *(_OWORD *)(v1130 + 13) = v1132;
                    *(_OWORD *)(v1130 + 11) = v1131;
                    *(_OWORD *)(v1130 + 9) = v1133;
                    v1130[8] = v1118;
                    v1135 = *v1122;
                    v1130[11] = *v1122;
                    v1130[12] = (v1122[1] - v1135) >> 4;
                    *(_DWORD *)v2221 = 0;
                    *(_QWORD *)v2200 = v1130;
                    v995 = v2086;
                    if (!*(_QWORD *)&buf[24])
                      goto LABEL_2866;
                    (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)&buf[24] + 48))(*(_QWORD *)&buf[24], v2221, v2200);
                  }
                }
              }
              v1120 = *(void (***)(void))v5;
              v1118 = *(void (**)(void))(*(_QWORD *)v5 + 88);
            }
            v1136 = 4;
            if ((_DWORD)v1116)
            {
              v1137 = v1120 + 4;
            }
            else
            {
              v1136 = 2;
              v1137 = v1120 + 2;
            }
            if (v1137[1] != v1120[v1136])
              gm::MultiRange<unsigned long>::push_back((char **)(v1113 + 144), v1137);
          }
          v5 += 8;
          if (v5 == v1117)
            goto LABEL_1749;
        }
      }
      v1118 = 0;
LABEL_1749:
      v1138 = ggl::Batcher::commit((__int128 **)(v1113 + 144), 0xC8u, _Q0);
      v976 = (const md::LayoutContext *)a2;
      v1116 = (unint64_t)&off_1E42D4450;
      if (v1138[1] != *v1138 && *(_BYTE *)(v1113 + 136))
      {
        v1119 = v1138;
        v1139 = *(_QWORD *)(v1113 + 24);
        v1123 = *(void (**)(void))(v1113 + 32);
        v1140 = *(_OWORD *)(v1113 + 88);
        *(_OWORD *)v2201 = *(_OWORD *)(v1113 + 72);
        *(_OWORD *)&v2201[16] = v1140;
        v1141 = *(_OWORD *)(v1113 + 120);
        *(_OWORD *)&v2201[32] = *(_OWORD *)(v1113 + 104);
        *(_OWORD *)v2202 = v1141;
        v1142 = *(_OWORD *)(v1113 + 56);
        *(_OWORD *)v2200 = *(_OWORD *)(v1113 + 40);
        *(_OWORD *)&v2200[16] = v1142;
        v1143 = *(_QWORD **)(v1113 + 232);
        v1144 = v1143[1];
        if (v1144 == *(_QWORD *)(v1113 + 240))
        {
          v1143 = (_QWORD *)*v1143;
          if (!v1143)
          {
            v1143 = malloc_type_malloc(120 * v1144 + 16, 0xB644C221uLL);
            *v1143 = 0;
            v1143[1] = 0;
            **(_QWORD **)(v1113 + 232) = v1143;
          }
          *(_QWORD *)(v1113 + 232) = v1143;
          v1144 = v1143[1];
        }
        v1145 = &v1143[15 * v1144];
        v1143[1] = v1144 + 1;
        v1145[2] = &off_1E42B59B0;
        v1145[3] = v1139;
        v1145 += 2;
        v1145[2] = v1123;
        v1146 = *(_OWORD *)&v2201[32];
        v1147 = *(_OWORD *)v2202;
        v1148 = *(_OWORD *)&v2201[16];
        *(_OWORD *)(v1145 + 7) = *(_OWORD *)v2201;
        v1149 = *(_OWORD *)v2200;
        *(_OWORD *)(v1145 + 5) = *(_OWORD *)&v2200[16];
        *(_OWORD *)(v1145 + 3) = v1149;
        *(_OWORD *)(v1145 + 13) = v1147;
        *(_OWORD *)(v1145 + 11) = v1146;
        *(_OWORD *)(v1145 + 9) = v1148;
        v1145[8] = v1118;
        v1150 = *v1119;
        v1145[11] = *v1119;
        v1145[12] = (v1119[1] - v1150) >> 4;
        *(_DWORD *)v2221 = 0;
        *(_QWORD *)v2200 = v1145;
        if (!*(_QWORD *)&buf[24])
        {
LABEL_2866:
          std::__throw_bad_function_call[abi:nn180100]();
          goto LABEL_2880;
        }
        (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)&buf[24] + 48))(*(_QWORD *)&buf[24], v2221, v2200);
        v976 = (const md::LayoutContext *)a2;
      }
      v1114 = *(_QWORD **)&buf[24];
      if (*(_BYTE **)&buf[24] == buf)
      {
        v1114 = buf;
        v1112 = 4;
        v1111 = v2119;
LABEL_1722:
        (*(void (**)(void))(*v1114 + 8 * v1112))();
      }
      else
      {
        v1111 = v2119;
        if (*(_QWORD *)&buf[24])
        {
          v1112 = 5;
          goto LABEL_1722;
        }
      }
      if (++v1111 == v2108)
        break;
      continue;
    }
  }
  if (v995 && *(_BYTE *)(v995 + 64))
  {
    v1151 = 0;
    v1152 = *(unsigned __int8 *)(a1 + 106);
    v1153 = *(_QWORD **)(v2074 + 8);
    while (1)
    {
      v1154 = *(unsigned __int8 **)(v1153[3] + 8 * v1151);
      if (*v1154 == v1152)
      {
        v1155 = *((_QWORD *)v1154 + 1);
        v1156 = v1153[15];
        if (v1155 < (v1153[16] - v1156) >> 3)
          break;
      }
      ++v1151;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1156 + 8 * v1155) + 24) + 8 * *(unsigned __int8 *)(a1 + 107))
              + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v1157 = *(_QWORD **)(v2074 + 8);
    v1158 = v1157[3];
    v1159 = v1157[4];
    v1160 = v1159 - v1158;
    if (v1159 == v1158)
      goto LABEL_1774;
    v1161 = 0;
    v1162 = v1160 >> 3;
    while (1)
    {
      v1163 = *(unsigned __int8 **)(v1158 + 8 * v1161);
      if (*v1163 == v1152)
      {
        v1164 = *((_QWORD *)v1163 + 1);
        v1165 = v1157[15];
        if (v1164 < (v1157[16] - v1165) >> 3)
          break;
      }
      if (++v1161 >= v1162)
        goto LABEL_1774;
    }
    v1166 = *(_QWORD *)(v1165 + 8 * v1164);
    if (!v1166)
LABEL_1774:
      v1167 = 0;
    else
      v1167 = *(_QWORD *)(*(_QWORD *)(v1166 + 24) + 8 * *(unsigned __int8 *)(a1 + 107));
    v1168 = *(_QWORD *)(*a3 + 320);
    v1169 = *(char ****)(v1168 + 8);
    v1170 = *(char ****)(v1168 + 16);
    if (v1169 != v1170)
    {
      while (2)
      {
        v1173 = *v1169;
        *(_QWORD *)v2200 = &off_1E42D4450;
        *(_QWORD *)&v2200[8] = v1167;
        *(_QWORD *)&v2200[24] = v2200;
        md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(v1173, 0x200u, (uint64_t)v2200, _Q0);
        v1171 = *(_QWORD **)&v2200[24];
        if (*(_BYTE **)&v2200[24] != v2200)
        {
          if (*(_QWORD *)&v2200[24])
          {
            v1172 = 5;
LABEL_1778:
            (*(void (**)(void))(*v1171 + 8 * v1172))();
          }
          if (++v1169 == v1170)
          {
            v1152 = *(unsigned __int8 *)(a1 + 106);
            goto LABEL_1792;
          }
          continue;
        }
        break;
      }
      v1171 = v2200;
      v1172 = 4;
      goto LABEL_1778;
    }
LABEL_1792:
    v1181 = *(_QWORD **)(v2074 + 8);
    v1182 = v1181[3];
    v1183 = v1181[4];
    v1184 = v1183 - v1182;
    if (v1183 == v1182)
      goto LABEL_1799;
    v1185 = 0;
    v1186 = v1184 >> 3;
    while (1)
    {
      v1187 = *(unsigned __int8 **)(v1182 + 8 * v1185);
      if (*v1187 == v1152)
      {
        v1188 = *((_QWORD *)v1187 + 1);
        v1189 = v1181[15];
        if (v1188 < (v1181[16] - v1189) >> 3)
          break;
      }
      if (++v1185 >= v1186)
        goto LABEL_1799;
    }
    v1190 = *(_QWORD *)(v1189 + 8 * v1188);
    if (!v1190)
    {
LABEL_1799:
      v1191 = 0;
      v1192 = a1;
    }
    else
    {
      v1191 = *(_QWORD *)(*(_QWORD *)(v1190 + 24) + 8 * *(unsigned __int8 *)(a1 + 107));
      v1192 = a1;
    }
    *(_QWORD *)(v1191 + 48) = *(_QWORD *)(v1191 + 40);
    v1193 = *(_QWORD *)(*(_QWORD *)(v1192 + 40) + 24);
    v1194 = *(_QWORD *)(v1193 + 160);
    if (v1194
      && (v1195 = *(_QWORD *)(v1194 + 32),
          v1196 = *(_QWORD *)(*(_QWORD *)(v1193 + 8) + 96),
          v1195 < (*(_QWORD *)(*(_QWORD *)(v1193 + 8) + 104) - v1196) >> 3))
    {
      v1197 = *(_QWORD *)(*(_QWORD *)(v1196 + 8 * v1195) + 16);
    }
    else
    {
      v1197 = 0;
    }
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v1198 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1198, "daVinciRouteLineMaskBlurSigma");
    v1200 = v1199;

    v1201 = operator new();
    v5 = (unint64_t)off_1E42BCBE0;
    *(_QWORD *)v1201 = off_1E42BCBE0;
    *(_QWORD *)(v1201 + 8) = "MPSBlur";
    *(_QWORD *)(v1201 + 16) = 0;
    *(_QWORD *)(v1201 + 24) = 0;
    *(_QWORD *)(v1201 + 32) = 0;
    {
      v2032 = operator new();
      *(_QWORD *)(v2032 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v2032 + 24) = "GeoGL";
      *(_OWORD *)(v2032 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v2032 = &off_1E42B5668;
      *(_QWORD *)(v2032 + 8) = "GeoGL";
      *(_OWORD *)(v2032 + 72) = 0u;
      *(_OWORD *)(v2032 + 88) = 0u;
      *(_OWORD *)(v2032 + 104) = 0u;
      *(_OWORD *)(v2032 + 120) = 0u;
      *(_OWORD *)(v2032 + 136) = 0u;
      *(_OWORD *)(v2032 + 152) = 0u;
      *(_OWORD *)(v2032 + 168) = 0u;
      *(_OWORD *)(v2032 + 184) = 0u;
      *(_OWORD *)(v2032 + 200) = 0u;
      *(_OWORD *)(v2032 + 216) = 0u;
      *(_OWORD *)(v2032 + 232) = 0u;
      *(_QWORD *)(v2032 + 248) = 0;
      *(_OWORD *)(v2032 + 56) = 0u;
      v2033 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v2032 + 56), 0);
      if ((_DWORD)v2033)
        geo::read_write_lock::logFailure(v2033, (uint64_t)"initialization", v2034);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v2032 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v2032 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v2032;
    }
    *(_QWORD *)(v1201 + 40) = ggl::Allocator::instance(void)::alloc;
    *(_QWORD *)v1201 = &off_1E42BCBB0;
    *(_WORD *)(v1201 + 48) = (int)v1200;
    *(_QWORD *)(v1201 + 56) = 0;
    *(_QWORD *)(v1201 + 64) = 0;
    *(_QWORD *)v2200 = 0;
    v1203 = *(_QWORD *)(v1201 + 16);
    v1204 = *(_QWORD *)(v1201 + 24) - v1203;
    if (v1204)
    {
      v976 = (const md::LayoutContext *)a2;
      if (v1204 >= 9)
        *(_QWORD *)(v1201 + 24) = v1203 + 8;
    }
    else
    {
      std::vector<ggl::Texture *,geo::StdAllocator<ggl::Texture *,ggl::Allocator>>::__append(v1201 + 16, 1uLL, v2200);
      v976 = (const md::LayoutContext *)a2;
    }
    v1211 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v1201;
    if (v1211)
      (*(void (**)(uint64_t))(*(_QWORD *)v1211 + 8))(v1211);
    if (*(_QWORD *)(v1197 + 24))
    {
      v1212 = *(_QWORD *)(v1193 + 160);
      if (v1212)
      {
        v1213 = *(_QWORD *)(v1212 + 32);
        v1214 = *(_QWORD *)(*(_QWORD *)(v1193 + 8) + 96);
        if (v1213 >= (*(_QWORD *)(*(_QWORD *)(v1193 + 8) + 104) - v1214) >> 3)
          v1212 = 0;
        else
          v1212 = *(_QWORD *)(*(_QWORD *)(v1214 + 8 * v1213) + 16);
      }
      **(_QWORD **)(*(_QWORD *)(a1 + 112) + 16) = v1212;
      v1215 = *(_QWORD *)(a1 + 112);
      v1216 = *(_QWORD **)(v1191 + 48);
      v1217 = *(_QWORD *)(v1191 + 56);
      if ((unint64_t)v1216 < v1217)
      {
        if (v1216)
          *v1216 = v1215;
        v1218 = v1216 + 1;
        goto LABEL_1852;
      }
      v1219 = *(_QWORD *)(v1191 + 40);
      v1220 = ((uint64_t)v1216 - v1219) >> 3;
      v1221 = v1220 + 1;
      if ((unint64_t)(v1220 + 1) >> 61)
        abort();
      v1222 = v1217 - v1219;
      if (v1222 >> 2 > v1221)
        v1221 = v1222 >> 2;
      if ((unint64_t)v1222 >= 0x7FFFFFFFFFFFFFF8)
        v1223 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1223 = v1221;
      if (v1223)
      {
        v1224 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1191 + 64) + 16))(*(_QWORD *)(v1191 + 64), 8 * v1223, 8);
        v1225 = (_QWORD *)(v1224 + 8 * v1220);
        v1226 = v1224 + 8 * v1223;
        if (v1224)
          *v1225 = v1215;
        v976 = (const md::LayoutContext *)a2;
      }
      else
      {
        v1226 = 0;
        v1225 = (_QWORD *)(8 * v1220);
      }
      v1218 = v1225 + 1;
      v1228 = *(_QWORD *)(v1191 + 40);
      v1227 = *(_QWORD *)(v1191 + 48);
      if (v1227 != v1228)
      {
        v1229 = v1227 - v1228 - 8;
        if (v1229 < 0x38)
        {
          v1231 = *(_QWORD *)(v1191 + 48);
        }
        else if ((unint64_t)(v1227 - (_QWORD)v1225) < 0x20)
        {
          v1231 = *(_QWORD *)(v1191 + 48);
        }
        else
        {
          v1230 = (v1229 >> 3) + 1;
          v1231 = v1227 - 8 * (v1230 & 0x3FFFFFFFFFFFFFFCLL);
          v1232 = v1225 - 2;
          v1233 = (__int128 *)(v1227 - 16);
          v1234 = v1230 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1235 = *v1233;
            *(v1232 - 1) = *(v1233 - 1);
            *v1232 = v1235;
            v1232 -= 2;
            v1233 -= 2;
            v1234 -= 4;
          }
          while (v1234);
          v1225 -= v1230 & 0x3FFFFFFFFFFFFFFCLL;
          if (v1230 == (v1230 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1849:
            v1227 = *(_QWORD *)(v1191 + 40);
            goto LABEL_1850;
          }
        }
        do
        {
          v1236 = *(_QWORD *)(v1231 - 8);
          v1231 -= 8;
          *--v1225 = v1236;
        }
        while (v1231 != v1228);
        goto LABEL_1849;
      }
LABEL_1850:
      *(_QWORD *)(v1191 + 40) = v1225;
      *(_QWORD *)(v1191 + 48) = v1218;
      v1237 = *(_QWORD *)(v1191 + 56);
      *(_QWORD *)(v1191 + 56) = v1226;
      if (v1227)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1191 + 64) + 40))(*(_QWORD *)(v1191 + 64), v1227, v1237 - v1227);
LABEL_1852:
      *(_QWORD *)(v1191 + 48) = v1218;
    }
  }
  if (!v2090 || !v2094)
    goto LABEL_1965;
  v1238 = *v2059;
  v1239 = (gss::FeatureAttributeSet *)(*a3 + 536);
  *(_QWORD *)&v2200[7] = 0;
  *(_QWORD *)v2200 = 0;
  v2200[15] = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v2226, v1238, v1239, (gss::QueryOverrides *)v2200);
  if (!v2200[14] && *(_QWORD *)v2200)
  {
    v1241 = gss::Allocator::instance(v1240);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1241 + 40))(v1241, *(_QWORD *)v2200, *(unsigned __int16 *)&v2200[12]);
  }
  v1242 = v2226;
  v2146 = v2226;
  if (*((_QWORD *)&v2226 + 1))
  {
    v1243 = (unint64_t *)(*((_QWORD *)&v2226 + 1) + 8);
    do
      v1244 = __ldxr(v1243);
    while (__stxr(v1244 + 1, v1243));
    do
      v1245 = __ldxr(v1243);
    while (__stxr(v1245 + 1, v1243));
  }
  md::TrafficMeshStyle::setup((int *)__p, v1242, *((std::__shared_weak_count **)&v1242 + 1), 0);
  if (*((_QWORD *)&v1242 + 1))
  {
    v1246 = (unint64_t *)(*((_QWORD *)&v1242 + 1) + 8);
    do
      v1247 = __ldaxr(v1246);
    while (__stlxr(v1247 - 1, v1246));
    if (!v1247)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1242 + 1) + 16))(*((_QWORD *)&v1242 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1242 + 1));
    }
  }
  if (*((_QWORD *)&v2146 + 1))
  {
    v1248 = (unint64_t *)(*((_QWORD *)&v2146 + 1) + 8);
    do
      v1249 = __ldaxr(v1248);
    while (__stlxr(v1249 - 1, v1248));
    if (!v1249)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v2146 + 1) + 16))(*((_QWORD *)&v2146 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v2146 + 1));
    }
  }
  v1250 = *a3;
  if (!*(_QWORD *)(*a3 + 272)
    || !*(_QWORD *)(v1250 + 264)
    || (*(void **)(v1250 + 600) == __p[0] ? (v1251 = *(void **)(v1250 + 608) == __p[1]) : (v1251 = 0), !v1251))
  {
    *(_QWORD *)v2200 = 0;
    *(_QWORD *)&v2200[8] = v2200;
    *(_QWORD *)&v2200[16] = 0x5812000000;
    *(_QWORD *)&v2200[24] = __Block_byref_object_copy__23;
    *(_QWORD *)v2201 = __Block_byref_object_dispose__24;
    memset(&v2201[8], 0, 40);
    LODWORD(v2202[0]) = 1065353216;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x5812000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__25;
    *(_QWORD *)v2217 = __Block_byref_object_dispose__26;
    memset(&v2217[8], 0, 40);
    LODWORD(v2218[0]) = 1065353216;
    v1252 = *(void **)(v1250 + 160);
    v2143[0] = MEMORY[0x1E0C809B0];
    v2143[1] = 3321888768;
    v2143[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_27;
    v2143[3] = &unk_1E42E9EB0;
    v2143[4] = v2200;
    v2143[5] = buf;
    v2144 = v2226;
    if (*((_QWORD *)&v2226 + 1))
    {
      v1253 = (unint64_t *)(*((_QWORD *)&v2226 + 1) + 8);
      do
        v1254 = __ldxr(v1253);
      while (__stxr(v1254 + 1, v1253));
    }
    v2145 = *(_OWORD *)__p;
    objc_msgSend(v1252, "forEachSection:", v2143);
    v1255 = *((_QWORD *)v976 + 92);
    v2141[0] = MEMORY[0x1E0C809B0];
    v2141[1] = 3321888768;
    v2141[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_28;
    v2141[3] = &unk_1E42E9BB8;
    v1256 = (std::__shared_weak_count *)a3[1];
    v2141[6] = *a3;
    v2142 = v1256;
    if (v1256)
    {
      v1257 = (unint64_t *)&v1256->__shared_owners_;
      do
        v1258 = __ldxr(v1257);
      while (__stxr(v1258 + 1, v1257));
    }
    v2141[4] = v2200;
    v2141[5] = buf;
    *(_QWORD *)&v2221[24] = 0;
    *(_QWORD *)v2221 = &off_1E42C7118;
    *(_QWORD *)&v2221[8] = MEMORY[0x1A1AF5730](v2141);
    *(_QWORD *)&v2221[24] = v2221;
    *(_OWORD *)v2242 = 0uLL;
    (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)(v1255 + 32) + 16))(*(_QWORD *)(v1255 + 32), v2221, v2242);
    v1259 = *(std::__shared_weak_count **)&v2242[8];
    v976 = (const md::LayoutContext *)a2;
    if (*(_QWORD *)&v2242[8])
    {
      v1260 = (unint64_t *)(*(_QWORD *)&v2242[8] + 8);
      do
        v1261 = __ldaxr(v1260);
      while (__stlxr(v1261 - 1, v1260));
      if (!v1261)
      {
        ((void (*)(std::__shared_weak_count *))v1259->__on_zero_shared)(v1259);
        std::__shared_weak_count::__release_weak(v1259);
      }
    }
    v1262 = *(_QWORD **)&v2221[24];
    if (*(_BYTE **)&v2221[24] == v2221)
    {
      v1263 = 4;
      v1262 = v2221;
LABEL_1892:
      (*(void (**)(void))(*v1262 + 8 * v1263))();
    }
    else if (*(_QWORD *)&v2221[24])
    {
      v1263 = 5;
      goto LABEL_1892;
    }
    *(_OWORD *)(*a3 + 600) = *(_OWORD *)__p;
    v1264 = v2142;
    if (v2142)
    {
      v1265 = (unint64_t *)&v2142->__shared_owners_;
      do
        v1266 = __ldaxr(v1265);
      while (__stlxr(v1266 - 1, v1265));
      if (!v1266)
      {
        ((void (*)(std::__shared_weak_count *))v1264->__on_zero_shared)(v1264);
        std::__shared_weak_count::__release_weak(v1264);
      }
    }
    v1267 = (std::__shared_weak_count *)*((_QWORD *)&v2144 + 1);
    if (*((_QWORD *)&v2144 + 1))
    {
      v1268 = (unint64_t *)(*((_QWORD *)&v2144 + 1) + 8);
      do
        v1269 = __ldaxr(v1268);
      while (__stlxr(v1269 - 1, v1268));
      if (!v1269)
      {
        ((void (*)(std::__shared_weak_count *))v1267->__on_zero_shared)(v1267);
        std::__shared_weak_count::__release_weak(v1267);
      }
    }
    _Block_object_dispose(buf, 8);
    std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)&v2217[32]);
    v1270 = *(void **)&v2217[16];
    *(_QWORD *)&v2217[16] = 0;
    if (v1270)
      operator delete(v1270);
    _Block_object_dispose(v2200, 8);
    std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)&v2201[32]);
    v1271 = *(void **)&v2201[16];
    *(_QWORD *)&v2201[16] = 0;
    if (v1271)
      operator delete(v1271);
  }
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v2200, v976);
  *(_OWORD *)v2204 = 0uLL;
  memset_pattern16(&v2204[16], &unk_19FFB6380, 0x10uLL);
  BYTE1(v2207[0]) = 0;
  *(_DWORD *)&v2206[7] = 0;
  v2201[24] = 1;
  *(_QWORD *)v2206 = 0;
  v2205 = v2157 | 0x40000000;
  v2201[25] = *(_DWORD *)(*a3 + 512);
  v2206[8] = v2158;
  v1272 = v2226;
  if (*((_QWORD *)&v2226 + 1))
  {
    v1273 = (unint64_t *)(*((_QWORD *)&v2226 + 1) + 8);
    do
      v1274 = __ldxr(v1273);
    while (__stxr(v1274 + 1, v1273));
    v1275 = *(std::__shared_weak_count **)&v2204[8];
    *(_OWORD *)v2204 = v1272;
    if (v1275)
    {
      v1276 = (unint64_t *)&v1275->__shared_owners_;
      do
        v1277 = __ldaxr(v1276);
      while (__stlxr(v1277 - 1, v1276));
      if (!v1277)
      {
        ((void (*)(std::__shared_weak_count *))v1275->__on_zero_shared)(v1275);
        std::__shared_weak_count::__release_weak(v1275);
      }
    }
  }
  else
  {
    *(_OWORD *)v2204 = (unint64_t)v2226;
  }
  *(_OWORD *)&v2204[16] = *(_OWORD *)__p;
  v2206[9] = 0;
  *(_DWORD *)v2206 = 0;
  v1278 = *a3;
  v1279 = *(_QWORD *)(*a3 + 504);
  if (v1279)
  {
    v1280 = *(_QWORD *)(v1279 + 280);
    v1281 = *(std::__shared_weak_count **)(v1279 + 288);
    if (v1281)
    {
      v1282 = (unint64_t *)&v1281->__shared_owners_;
      do
        v1283 = __ldxr(v1282);
      while (__stxr(v1283 + 1, v1282));
      *(_QWORD *)&v2221[8] = v1281;
      *(_OWORD *)v2242 = 0uLL;
      *(_QWORD *)&buf[8] = v1281;
      do
        v1284 = __ldxr(v1282);
      while (__stxr(v1284 + 1, v1282));
    }
    else
    {
      *(_QWORD *)&v2221[8] = 0;
      *(_OWORD *)v2242 = 0uLL;
      *(_QWORD *)&buf[8] = 0;
    }
    *(_QWORD *)v2221 = v1280;
    *(_QWORD *)buf = v1280;
    *(_OWORD *)&buf[16] = 0uLL;
    v2217[0] = 0;
    if (v1280)
      LOBYTE(v1280) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v1280 + 48))(v1280, &buf[16]);
    v2217[0] = v1280;
    if (v1281)
    {
      v1285 = (unint64_t *)&v1281->__shared_owners_;
      do
        v1286 = __ldaxr(v1285);
      while (__stlxr(v1286 - 1, v1285));
      if (!v1286)
      {
        ((void (*)(std::__shared_weak_count *))v1281->__on_zero_shared)(v1281);
        std::__shared_weak_count::__release_weak(v1281);
      }
    }
    v1287 = *(std::__shared_weak_count **)&v2242[8];
    if (*(_QWORD *)&v2242[8])
    {
      v1288 = (unint64_t *)(*(_QWORD *)&v2242[8] + 8);
      do
        v1289 = __ldaxr(v1288);
      while (__stlxr(v1289 - 1, v1288));
      if (!v1289)
      {
        ((void (*)(std::__shared_weak_count *))v1287->__on_zero_shared)(v1287);
        std::__shared_weak_count::__release_weak(v1287);
      }
    }
    md::RouteLineSection::halfWidthAtZoom(buf, *(float *)&v2200[8]);
    v1291 = *(double *)(*a3 + 168) * v1290;
    *(float *)v2206 = v1291;
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)buf);
    v1278 = *a3;
  }
  v1292 = *(_QWORD **)(v1278 + 272);
  v1293 = v1292[19];
  if (v1293)
    v1294 = v1293 == *(_QWORD *)(a1 + 80);
  else
    v1294 = 0;
  if (!v1294)
  {
    md::PilledTrafficLayer::setSharedResources(v1292, *(_QWORD *)(a1 + 80));
    v1278 = *a3;
    v1293 = *(_QWORD *)(a1 + 80);
  }
  v1295 = *(_QWORD **)(v1278 + 264);
  v1296 = v1295[20];
  if (v1296)
    v1297 = v1296 == v1293;
  else
    v1297 = 0;
  if (!v1297)
  {
    md::SolidTrafficLayer::setSharedResources(v1295, v1293);
    v1278 = *a3;
  }
  md::PilledTrafficLayer::layout(*(md::PilledTrafficLayer **)(v1278 + 272), (const md::TrafficContext *)v2200);
  v1298 = *(_QWORD *)(*a3 + 272);
  *(_QWORD *)buf = &off_1E42D4528;
  *(_QWORD *)&buf[8] = v2105;
  *(_QWORD *)&buf[24] = buf;
  md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v1298 + 8), *(_QWORD **)(v1298 + 16), buf, v1299);
  v1300 = *(_QWORD **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    v1301 = 4;
    v1300 = buf;
LABEL_1951:
    (*(void (**)(void))(*v1300 + 8 * v1301))();
  }
  else if (*(_QWORD *)&buf[24])
  {
    v1301 = 5;
    goto LABEL_1951;
  }
  md::SolidTrafficLayer::layout(*(md::SolidTrafficLayer **)(*a3 + 264), (const md::TrafficContext *)v2200);
  v1302 = *(_QWORD *)(*a3 + 264);
  *(_QWORD *)buf = &off_1E42D44E0;
  *(_QWORD *)&buf[8] = v2105;
  *(_QWORD *)&buf[24] = buf;
  md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v1302 + 8), *(_QWORD **)(v1302 + 16), buf, v1303);
  v1304 = *(_QWORD **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    v1305 = 4;
    v1304 = buf;
LABEL_1956:
    (*(void (**)(void))(*v1304 + 8 * v1305))();
  }
  else if (*(_QWORD *)&buf[24])
  {
    v1305 = 5;
    goto LABEL_1956;
  }
  v1306 = *(std::__shared_weak_count **)&v2204[8];
  if (*(_QWORD *)&v2204[8])
  {
    v1307 = (unint64_t *)(*(_QWORD *)&v2204[8] + 8);
    do
      v1308 = __ldaxr(v1307);
    while (__stlxr(v1308 - 1, v1307));
    if (!v1308)
    {
      ((void (*)(std::__shared_weak_count *))v1306->__on_zero_shared)(v1306);
      std::__shared_weak_count::__release_weak(v1306);
      v1309 = (std::__shared_weak_count *)*((_QWORD *)&v2226 + 1);
      if (*((_QWORD *)&v2226 + 1))
        goto LABEL_1962;
      goto LABEL_1965;
    }
  }
  v1309 = (std::__shared_weak_count *)*((_QWORD *)&v2226 + 1);
  if (!*((_QWORD *)&v2226 + 1))
    goto LABEL_1965;
LABEL_1962:
  v1310 = (unint64_t *)&v1309->__shared_owners_;
  do
    v1311 = __ldaxr(v1310);
  while (__stlxr(v1311 - 1, v1310));
  if (v1311)
  {
LABEL_1965:
    if (v2079)
      goto LABEL_1966;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1309->__on_zero_shared)(v1309);
    std::__shared_weak_count::__release_weak(v1309);
    if (v2079)
    {
LABEL_1966:
      v1313 = *a3;
      v1312 = (std::__shared_weak_count *)a3[1];
      v2139 = *a3;
      v2140 = v1312;
      if (v1312)
      {
        v1314 = (unint64_t *)&v1312->__shared_owners_;
        do
          v1315 = __ldxr(v1314);
        while (__stxr(v1315 + 1, v1314));
      }
      if (*(float *)(v1313 + 832) < 1.0)
      {
        v1316 = v2157;
        v1317 = *(void **)(v1313 + 696);
        if (!v1317 || objc_msgSend(v1317, "state") != 3 && objc_msgSend(*(id *)(v1313 + 696), "state") != 4)
        {
          v1318 = *(_QWORD *)(v1313 + 640);
          if (v1318)
          {
            if (*(_QWORD *)(v1313 + 648))
            {
              if (*(_QWORD *)(*(_QWORD *)(v1313 + 320) + 16) == *(_QWORD *)(*(_QWORD *)(v1313 + 320) + 8))
              {
                v1326 = *(_QWORD **)(v1318 + 64);
              }
              else
              {
                gm::operator*<double,4,4,4>((double *)v2200, (double *)(v1313 + 8), (double *)(v1313 + 704));
                gm::operator*<double,4,4,4>((double *)buf, (double *)(v2070 + 808), (double *)v2200);
                v1319 = vcvt_f32_f64(*(float64x2_t *)&buf[16]);
                v1320 = vcvt_f32_f64(*(float64x2_t *)v2217);
                v1321 = vcvt_f32_f64(*(float64x2_t *)&v2217[16]);
                v1322 = vcvt_f32_f64(*(float64x2_t *)&v2217[32]);
                v1323 = vcvt_f32_f64(*(float64x2_t *)v2218);
                v1324 = vcvt_f32_f64(v2219);
                v1325 = vcvt_f32_f64(v2220);
                v1326 = *(_QWORD **)(v1318 + 64);
                v1327 = *v1326;
                v1328 = *(_QWORD *)(*v1326 + 8);
                v1329 = *(float32x2_t **)(*v1326 + 72);
                *v1329 = vcvt_f32_f64(*(float64x2_t *)buf);
                v1329[1] = v1319;
                v1329[2] = v1320;
                v1329[3] = v1321;
                v1329[4] = v1322;
                v1329[5] = v1323;
                v1329[6] = v1324;
                v1329[7] = v1325;
                v1330 = *(_QWORD *)(v1327 + 64);
                if (v1330 <= v1328)
                  v1330 = v1328;
                *(_QWORD *)(v1327 + 56) = 0;
                v1329[8].f32[0] = obj;
                if (v1330 > v1328)
                  v1328 = v1330;
                *(_QWORD *)(v1327 + 64) = v1328;
              }
              v1326[3] = 0;
              v1331 = *(_QWORD *)(v1313 + 232);
              v1326[2] = v1331;
              v1332 = *(_QWORD *)(v1318 + 160);
              v1333 = *(_QWORD *)(v1313 + 240);
              if (v1333)
              {
                v1334 = (unint64_t *)(v1333 + 8);
                do
                  v1335 = __ldxr(v1334);
                while (__stxr(v1335 + 1, v1334));
              }
              v1336 = *(std::__shared_weak_count **)(v1332 + 24);
              *(_QWORD *)(v1332 + 16) = v1331;
              *(_QWORD *)(v1332 + 24) = v1333;
              if (v1336)
              {
                v1337 = (unint64_t *)&v1336->__shared_owners_;
                do
                  v1338 = __ldaxr(v1337);
                while (__stlxr(v1338 - 1, v1337));
                if (!v1338)
                {
                  ((void (*)(std::__shared_weak_count *))v1336->__on_zero_shared)(v1336);
                  std::__shared_weak_count::__release_weak(v1336);
                }
              }
              md::RouteLineDrawAnimation::updateStyle(v2139 + 632, *(_BYTE **)(*(_QWORD *)(v2139 + 320) + 8), *(_BYTE **)(*(_QWORD *)(v2139 + 320) + 16));
              v1339 = *(ggl::RenderItem **)(v2139 + 648);
              *((_QWORD *)v1339 + 6) = v1316 + 1;
              ggl::CommandBuffer::pushRenderItem(a5, v1339);
            }
          }
        }
      }
      if (v1312)
      {
        v1340 = (unint64_t *)&v1312->__shared_owners_;
        do
          v1341 = __ldaxr(v1340);
        while (__stlxr(v1341 - 1, v1340));
        if (!v1341)
        {
          ((void (*)(std::__shared_weak_count *))v1312->__on_zero_shared)(v1312);
          std::__shared_weak_count::__release_weak(v1312);
        }
      }
    }
  }
  v2135 = 0;
  v2136 = &v2135;
  v2137 = 0x2020000000;
  v2138 = 0;
  v1342 = *a3;
  if (!v2083)
  {
    if (*(_BYTE *)(v1342 + 620))
    {
      v1343 = *(void **)(v1342 + 160);
      v2134[0] = MEMORY[0x1E0C809B0];
      v2134[1] = 3221225472;
      v2134[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_29;
      v2134[3] = &unk_1E42EE110;
      v2134[4] = &v2135;
      objc_msgSend(v1343, "forEachSection:", v2134);
      v1342 = *a3;
      if (*((_BYTE *)v2136 + 24))
      {
        v1344 = *(_QWORD *)(v1342 + 520);
        objc_msgSend(*(id *)(v1342 + 160), "overlay");
        v1345 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1345, "composedRoute");
        v1346 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v1344) = v1344 == objc_msgSend(v1346, "currentDisplayStep");

        v1347 = (const md::LayoutContext *)a2;
        v1348 = v2047;
        if ((v1344 & 1) == 0)
        {
          v1349 = *(_DWORD *)(*a3 + 528);
          v1350 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", 0.25);
          v1351 = *(void **)(*a3 + 192);
          *(_QWORD *)(*a3 + 192) = v1350;

          v2131[0] = MEMORY[0x1E0C809B0];
          v2131[1] = 3321888768;
          v2131[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_2_30;
          v2131[3] = &__block_descriptor_60_ea8_40c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e8_v12__0f8l;
          v1352 = *a3;
          v1353 = (std::__shared_weak_count *)a3[1];
          v2131[4] = a1;
          v2131[5] = v1352;
          v2132 = v1353;
          if (v1353)
          {
            v1354 = (unint64_t *)&v1353->__shared_owners_;
            do
              v1355 = __ldxr(v1354);
            while (__stxr(v1355 + 1, v1354));
            v1352 = *a3;
          }
          v2133 = v1349;
          objc_msgSend(*(id *)(v1352 + 192), "setStepHandler:", v2131);
          v2129[0] = MEMORY[0x1E0C809B0];
          v2129[1] = 3321888768;
          v2129[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_32;
          v2129[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e8_v12__0B8l;
          v1356 = *a3;
          v1357 = (std::__shared_weak_count *)a3[1];
          v2129[4] = a1;
          v2129[5] = v1356;
          v2130 = v1357;
          if (v1357)
          {
            v1358 = (unint64_t *)&v1357->__shared_owners_;
            do
              v1359 = __ldxr(v1358);
            while (__stxr(v1359 + 1, v1358));
            v1356 = *a3;
          }
          objc_msgSend(*(id *)(v1356 + 192), "setCompletionHandler:", v2129);
          md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 88), *(VKAnimation **)(*a3 + 192));
          objc_msgSend(*(id *)(*a3 + 160), "overlay");
          v1360 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v1360, "composedRoute");
          v1361 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)(*a3 + 520) = objc_msgSend(v1361, "currentDisplayStep");

          v1362 = v2130;
          v1347 = (const md::LayoutContext *)a2;
          v1348 = v2047;
          if (v2130)
          {
            v1363 = (unint64_t *)&v2130->__shared_owners_;
            do
              v1364 = __ldaxr(v1363);
            while (__stlxr(v1364 - 1, v1363));
            if (!v1364)
            {
              ((void (*)(std::__shared_weak_count *))v1362->__on_zero_shared)(v1362);
              std::__shared_weak_count::__release_weak(v1362);
            }
          }
          v1365 = v2132;
          if (v2132)
          {
            v1366 = (unint64_t *)&v2132->__shared_owners_;
            do
              v1367 = __ldaxr(v1366);
            while (__stlxr(v1367 - 1, v1366));
            if (!v1367)
            {
              ((void (*)(std::__shared_weak_count *))v1365->__on_zero_shared)(v1365);
              std::__shared_weak_count::__release_weak(v1365);
            }
          }
        }
        v1368 = *a3;
        if (*(_QWORD *)(*a3 + 288) == *(_QWORD *)(*a3 + 296))
        {
          v1374 = *(void **)(v1368 + 160);
          v2126[0] = MEMORY[0x1E0C809B0];
          v2126[1] = 3321888768;
          v2126[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_34;
          v2126[3] = &__block_descriptor_56_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e92_v16__0_fast_shared_ptr_md::RouteLineSection__mdm::MDAllocator_____fast_shared_ptr_control__8l;
          v1375 = (std::__shared_weak_count *)a3[1];
          v2126[4] = v1368;
          v2127 = v1375;
          if (v1375)
          {
            v1376 = (unint64_t *)&v1375->__shared_owners_;
            do
              v1377 = __ldxr(v1376);
            while (__stxr(v1377 + 1, v1376));
          }
          v2128 = v1347;
          objc_msgSend(v1374, "forEachSection:", v2126);
          v1378 = v2127;
          if (v2127)
          {
            v1379 = (unint64_t *)&v2127->__shared_owners_;
            do
              v1380 = __ldaxr(v1379);
            while (__stlxr(v1380 - 1, v1379));
            if (!v1380)
            {
              ((void (*)(std::__shared_weak_count *))v1378->__on_zero_shared)(v1378);
              std::__shared_weak_count::__release_weak(v1378);
            }
          }
        }
        v1113 = *(_QWORD *)(a1 + 56);
        if (*(_QWORD *)(v1113 + 32))
          goto LABEL_2111;
        v1369 = *v1348;
        v2119 = *(id *)(*(_QWORD *)(a1 + 40) + 104);
        v1370 = (_OWORD *)objc_msgSend(v2119, "format");
        v1371 = v1369;
        v1372 = v1371;
        v1116 = (unint64_t)v1371;
        if (v1371)
        {
          objc_msgSend(v1371, "textureManager");
          v1373 = *(uint64_t **)buf;
        }
        else
        {
          v1373 = 0;
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
        }
        v2200[23] = 14;
        strcpy(v2200, "routeLineArrow");
        v1381 = (std::__shared_weak_count *)operator new(0x58uLL);
        v1381->__shared_owners_ = 0;
        v1382 = (unint64_t *)&v1381->__shared_owners_;
        v1381->__shared_weak_owners_ = 0;
        v1381->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
        v1381[1].__shared_weak_owners_ = 0;
        v1381[2].__vftable = 0;
        v1381[1].__shared_owners_ = 0;
        LODWORD(v1381[2].__shared_owners_) = 0;
        v1381[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
        *(_OWORD *)((char *)&v1381[2].__shared_owners_ + 4) = xmmword_19FFB3CA0;
        *(std::__shared_weak_count_vtbl **)((char *)&v1381[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
        HIDWORD(v1381[3].__shared_owners_) = 0;
        *(_QWORD *)&v2226 = v1381 + 1;
        *((_QWORD *)&v2226 + 1) = v1381;
        md::TextureManager::texture(v2221, v1373, (uint64_t)v2200, (uint64_t *)&v2226, 0, 1.0);
        do
          v1383 = __ldaxr(v1382);
        while (__stlxr(v1383 - 1, v1382));
        if (v1383)
        {
          if ((v2200[23] & 0x80000000) == 0)
            goto LABEL_2039;
LABEL_2042:
          operator delete(*(void **)v2200);
          v1384 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
            goto LABEL_2043;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v1381->__on_zero_shared)(v1381);
          std::__shared_weak_count::__release_weak(v1381);
          if ((v2200[23] & 0x80000000) != 0)
            goto LABEL_2042;
LABEL_2039:
          v1384 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
LABEL_2043:
            v1385 = (unint64_t *)&v1384->__shared_owners_;
            do
              v1386 = __ldaxr(v1385);
            while (__stlxr(v1386 - 1, v1385));
            if (!v1386)
            {
              ((void (*)(std::__shared_weak_count *))v1384->__on_zero_shared)(v1384);
              std::__shared_weak_count::__release_weak(v1384);
            }
          }
        }
        v976 = (const md::LayoutContext *)operator new();
        v1387 = objc_msgSend(v1372, "shaderLibrary");
        if (*(_QWORD *)v2221)
        {
          v1388 = *(unint64_t **)(*(_QWORD *)v2221 + 40);
          __p[0] = *(void **)(*(_QWORD *)v2221 + 32);
          __p[1] = v1388;
          if (v1388)
          {
            v1389 = v1388 + 1;
            do
              v1390 = __ldxr(v1389);
            while (__stxr(v1390 + 1, v1389));
          }
        }
        else
        {
          __p[1] = 0;
          __p[0] = 0;
        }
        LODWORD(v995) = *(unsigned __int8 *)(objc_msgSend(v1372, "gglDevice") + 20);
        *(_QWORD *)v976 = 0;
        *((_QWORD *)v976 + 1) = 0;
        v1391 = *(_QWORD *)(v1387 + 80);
        v1392 = *(_QWORD *)(v1391 + 2096);
        v1393 = *(_QWORD *)(v1391 + 2104);
        *(_QWORD *)buf = v1392;
        *(_QWORD *)&buf[8] = v1393;
        if (v1393)
        {
          v1394 = (unint64_t *)(v1393 + 8);
          do
            v1395 = __ldxr(v1394);
          while (__stxr(v1395 + 1, v1394));
        }
        if ((_DWORD)v995)
          LODWORD(v1119) = 1;
        else
          LODWORD(v1119) = 6;
        if ((_DWORD)v995)
          LODWORD(v5) = 0;
        else
          LODWORD(v5) = 7;
        v1123 = (void (*)(void))operator new(0x198uLL);
        LOBYTE(v1118) = v995 ^ 1;
        *((_QWORD *)v1123 + 1) = 0;
        *((_QWORD *)v1123 + 2) = 0;
        *(_QWORD *)v1123 = &off_1E42DF338;
        *(_OWORD *)v2200 = *v1370;
        *(_OWORD *)&v2200[16] = v1370[1];
        if ((v1396 & 1) == 0)
          goto LABEL_2881;
        goto LABEL_2063;
      }
    }
  }
LABEL_2170:
  v1544 = *(unsigned __int8 *)(v1342 + 624);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v1545 = (void *)objc_claimAutoreleasedReturnValue();
  v1546 = objc_msgSend(v1545, "showManeuverPoints") ^ 1;
  if (v1544)
    LOBYTE(v1546) = 1;
  if ((v1546 & 1) != 0)
  {

    goto LABEL_2297;
  }
  objc_msgSend(*(id *)(*a3 + 160), "overlay");
  v1547 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1547, "composedRoute");
  v1548 = (void *)objc_claimAutoreleasedReturnValue();
  v1549 = objc_msgSend(v1548, "stepsCount") == 0;

  v1550 = a2;
  if (!v1549)
  {
    v1551 = a3;
    v1552 = *a3;
    if (*(_QWORD *)(*a3 + 344))
    {
LABEL_2175:
      v1553 = *v2059;
      v1554 = *(unsigned __int8 *)(*v1551 + 620);
      v1555 = *(_QWORD *)(*v1551 + 344);
      v1556 = *(_QWORD **)(v1550 + 8);
      v1557 = (int8x8_t)v1556[1];
      if (!*(_QWORD *)&v1557)
        goto LABEL_2218;
      v1558 = (uint8x8_t)vcnt_s8(v1557);
      v1558.i16[0] = vaddlv_u8(v1558);
      if (v1558.u32[0] > 1uLL)
      {
        v1559 = 0x1AF456233693CD46;
        if (*(_QWORD *)&v1557 <= 0x1AF456233693CD46uLL)
          v1559 = 0x1AF456233693CD46uLL % *(_QWORD *)&v1557;
      }
      else
      {
        v1559 = (*(_QWORD *)&v1557 - 1) & 0x1AF456233693CD46;
      }
      v1569 = *(_QWORD **)(*v1556 + 8 * v1559);
      if (!v1569)
        goto LABEL_2218;
      v1570 = (_QWORD *)*v1569;
      if (!v1570)
        goto LABEL_2218;
      if (v1558.u32[0] < 2uLL)
      {
        v1571 = *(_QWORD *)&v1557 - 1;
        while (1)
        {
          v1572 = v1570[1];
          if (v1572 == 0x1AF456233693CD46)
          {
            if (v1570[2] == 0x1AF456233693CD46)
              goto LABEL_2216;
          }
          else if ((v1572 & v1571) != v1559)
          {
            goto LABEL_2218;
          }
          v1570 = (_QWORD *)*v1570;
          if (!v1570)
            goto LABEL_2218;
        }
      }
      while (1)
      {
        v1576 = v1570[1];
        if (v1576 == 0x1AF456233693CD46)
        {
          if (v1570[2] == 0x1AF456233693CD46)
          {
LABEL_2216:
            v1577 = v1570[5];
            if (*(_QWORD *)(v1577 + 8) == 0x1AF456233693CD46)
            {
              v5 = *(_QWORD *)(v1577 + 32);
LABEL_2219:
              v1578 = *(uint64_t **)(*(_QWORD *)(v1555 + 40) + 64);
              v1579 = *v1578;
              v1580 = *(_QWORD *)(*v1578 + 8);
              v1581 = *(float32x4_t **)(*v1578 + 72);
              gm::operator*<double,4,4,4>((double *)v2200, (double *)(v5 + 808), (double *)(v1555 + 56));
              *v1581 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v2200), *(float64x2_t *)&v2200[16]);
              v1581[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v2201), *(float64x2_t *)&v2201[16]);
              v1581[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v2201[32]), *(float64x2_t *)v2202);
              v1581[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2203), *(float64x2_t *)v2204);
              v1583 = *(_QWORD *)(v1579 + 64);
              if (v1583 <= v1580)
                v1583 = v1580;
              *(_QWORD *)(v1579 + 56) = 0;
              *(_QWORD *)(v1579 + 64) = v1583;
              v1584 = gss::Allocator::instance(v1582);
              v1585 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1584 + 16))(v1584, 8, 4);
              v1586 = v1585;
              if (v1585)
                *v1585 = 0xB00000005;
              memset(buf, 0, 24);
              *(_QWORD *)&buf[24] = v1584;
              v1587 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1584 + 16))(v1584, 8, 4);
              *(_QWORD *)buf = v1587;
              *(_QWORD *)&buf[8] = v1587;
              *(_QWORD *)&buf[16] = v1587 + 1;
              if (v1587)
                *v1587 = *v1586;
              *(_QWORD *)&buf[8] = v1587 + 1;
              gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)buf);
              *(_QWORD *)&v2221[7] = 0;
              *(_QWORD *)v2221 = 0;
              v2221[15] = 1;
              *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v2221, 0x10002u) = v1554;
              gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v2226, v1553, (gss::FeatureAttributeSet *)buf, (gss::QueryOverrides *)v2221);
              v1589 = (std::__shared_weak_count *)*((_QWORD *)&v2226 + 1);
              v1588 = v2226;
              *(_OWORD *)__p = v2226;
              if (*((_QWORD *)&v2226 + 1))
              {
                v1590 = (unint64_t *)(*((_QWORD *)&v2226 + 1) + 8);
                do
                  v1591 = __ldxr(v1590);
                while (__stxr(v1591 + 1, v1590));
                *(_QWORD *)&v2200[8] = v1589;
                do
                  v1592 = __ldxr(v1590);
                while (__stxr(v1592 + 1, v1590));
              }
              else
              {
                *(_QWORD *)&v2200[8] = 0;
              }
              *(_QWORD *)v2200 = v1588;
              *(_OWORD *)&v2200[16] = 0uLL;
              v2201[0] = 0;
              if (v1588)
                LOBYTE(v1588) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v1588 + 48))(v1588, &v2200[16]);
              v2201[0] = v1588;
              if (v1589)
              {
                v1593 = (unint64_t *)&v1589->__shared_owners_;
                do
                  v1594 = __ldaxr(v1593);
                while (__stlxr(v1594 - 1, v1593));
                if (!v1594)
                {
                  ((void (*)(std::__shared_weak_count *))v1589->__on_zero_shared)(v1589);
                  std::__shared_weak_count::__release_weak(v1589);
                }
              }
              v1595 = *(float *)(v5 + 3072);
              v1596 = *(float *)(v5 + 3080);
              v1597 = *(_QWORD *)(*(_QWORD *)v2200 + 24);
              v1598 = *(float **)v1597;
              if (*(_QWORD *)v1597
                && (v1599 = *v1598, LODWORD(v1598) = *v1598 == 1.0, *(_BYTE *)(v1597 + 10))
                && (v1599 != 0.0 ? (v1600 = v1599 == 1.0) : (v1600 = 1), !v1600)
                || (v1601 = *(unsigned __int8 *)(v1597 + v1598 + 11), v1599 = 0.0, v1601 == 2))
              {
                LOBYTE(__p[0]) = 1;
                v2242[0] = 1;
                v1602 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v1597, 0xF3u, 0, __p);
                v1603 = *v1602
                      + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v1597, 0xF3u, 1u, v2242)- *v1602)* v1599);
              }
              else
              {
                v1603 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)v2200 + 24), 0xF3u, v1601, 0);
              }
              v1604 = *(_QWORD *)(*(_QWORD *)v2200 + 24);
              v1605 = *(float **)v1604;
              if (*(_QWORD *)v1604
                && (v1606 = *v1605, LODWORD(v1605) = *v1605 == 1.0, *(_BYTE *)(v1604 + 10))
                && (v1606 != 0.0 ? (v1607 = v1606 == 1.0) : (v1607 = 1), !v1607)
                || (v1608 = *(unsigned __int8 *)(v1604 + v1605 + 11), v1606 = 0.0, v1608 == 2))
              {
                LOBYTE(__p[0]) = 1;
                v2242[0] = 1;
                v1609 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v1604, 0xF4u, 0, __p);
                v1610 = *v1609
                      + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v1604, 0xF4u, 1u, v2242)- *v1609)* v1606);
              }
              else
              {
                v1610 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)v2200 + 24), 0xF4u, v1608, 0);
              }
              v1611 = *(_QWORD *)(*(_QWORD *)v2200 + 24);
              v1612 = *(float **)v1611;
              if (*(_QWORD *)v1611
                && (v1613 = *v1612, LODWORD(v1612) = *v1612 == 1.0, *(_BYTE *)(v1611 + 10))
                && (v1613 != 0.0 ? (v1614 = v1613 == 1.0) : (v1614 = 1), !v1614)
                || (v1615 = *(unsigned __int8 *)(v1611 + v1612 + 11), v1613 = 0.0, v1615 == 2))
              {
                LOBYTE(__p[0]) = 1;
                v2242[0] = 1;
                v1616 = (float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v1611, 0xF5u, 0, __p);
                v1617 = *v1616
                      + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(v1611, 0xF5u, 1u, v2242)- *v1616)* v1613);
              }
              else
              {
                v1617 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(*(_QWORD *)(*(_QWORD *)v2200 + 24), 0xF5u, v1615, 0);
              }
              *(float *)&_D14 = fmaxf(v1596 + v1595, 1.0);
              LODWORD(v185) = 0;
              v1618 = *(_QWORD *)(*(_QWORD *)v2200 + 24);
              v1619 = fminf(fmaxf(*(float *)&_D14, 0.0), 23.0);
              v1620 = *(float **)v1618;
              if (*(_QWORD *)v1618
                && (v1621 = *v1620, LODWORD(v1620) = *v1620 == 1.0, *(_BYTE *)(v1618 + 10))
                && (v1621 != 0.0 ? (v1622 = v1621 == 1.0) : (v1622 = 1), !v1622)
                || (v1623 = *(unsigned __int8 *)(v1618 + v1620 + 11), v1621 = 0.0, v1623 == 2))
              {
                LOBYTE(__p[0]) = 1;
                v2242[0] = 1;
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v1618, 0x5Eu, 0, (BOOL *)__p, v1619);
                v1625 = v1624;
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v1618, 0x5Eu, 1u, v2242, v1619);
                v1627 = v1625 + (float)((float)(v1626 - v1625) * v1621);
              }
              else
              {
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(*(_QWORD *)(*(_QWORD *)v2200 + 24), 0x5Eu, v1623, 0, v1619);
              }
              v1628 = (float)((float)(fminf(fmaxf(v1610 * (float)(*(float *)&_D14 - v1603), 0.0), v1617) * 0.5) + 0.5)
                    * v1627;
              v1629 = obj / *(double *)(v1555 + 56);
              v1630 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1555 + 48) + 64) + 16);
              v1631 = v1630[1];
              v1632 = v1630[9];
              *(float *)(v1632 + 16) = (float)(v1628 + 2.0) * (float)(v1629 * *(float *)(v1555 + 184));
              *(_OWORD *)v1632 = xmmword_19FFB34C0;
              if (v1630[8] > v1631)
                v1631 = v1630[8];
              v1630[7] = 0;
              v1630[8] = v1631;
              v1633 = *(ggl::RenderItem **)(v1555 + 24);
              *((_QWORD *)v1633 + 6) = 1610612736;
              ggl::CommandBuffer::pushRenderItem((uint64_t)v2105, v1633);
              v1634 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1555 + 40) + 64) + 16);
              v1635 = v1634[1];
              v1636 = v1634[9];
              *(float *)(v1636 + 16) = (float)(v1628 * v1629) * *(float *)(v1555 + 184);
              __asm { FMOV            V0.4S, #1.0 }
              *(_OWORD *)v1636 = _Q0;
              if (v1634[8] > v1635)
                v1635 = v1634[8];
              v1634[7] = 0;
              v1634[8] = v1635;
              v1638 = *(ggl::RenderItem **)(v1555 + 16);
              *((_QWORD *)v1638 + 6) = 1610612737;
              ggl::CommandBuffer::pushRenderItem((uint64_t)v2105, v1638);
              v1639 = (gss::Allocator *)gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v2200);
              v1640 = (std::__shared_weak_count *)*((_QWORD *)&v2226 + 1);
              if (*((_QWORD *)&v2226 + 1))
              {
                v1641 = (unint64_t *)(*((_QWORD *)&v2226 + 1) + 8);
                do
                  v1642 = __ldaxr(v1641);
                while (__stlxr(v1642 - 1, v1641));
                if (!v1642)
                {
                  ((void (*)(std::__shared_weak_count *))v1640->__on_zero_shared)(v1640);
                  std::__shared_weak_count::__release_weak(v1640);
                }
              }
              if (v2221[14])
                v1643 = 1;
              else
                v1643 = *(_QWORD *)v2221 == 0;
              if (!v1643)
              {
                v1644 = gss::Allocator::instance(v1639);
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1644 + 40))(v1644, *(_QWORD *)v2221, *(unsigned __int16 *)&v2221[12]);
              }
              if (*(_QWORD *)buf)
              {
                *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)&buf[24] + 40))(*(_QWORD *)&buf[24], *(_QWORD *)buf, *(_QWORD *)&buf[16] - *(_QWORD *)buf);
              }
              if (v1586)
                (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v1584 + 40))(v1584, v1586, 8);
              goto LABEL_2297;
            }
LABEL_2218:
            v5 = 0;
            goto LABEL_2219;
          }
        }
        else
        {
          if (v1576 >= *(_QWORD *)&v1557)
            v1576 %= *(_QWORD *)&v1557;
          if (v1576 != v1559)
            goto LABEL_2218;
        }
        v1570 = (_QWORD *)*v1570;
        if (!v1570)
          goto LABEL_2218;
      }
    }
    v1560 = *(_QWORD *)(a2 + 736);
    v2124[0] = MEMORY[0x1E0C809B0];
    v2124[1] = v185;
    v2124[2] = ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_36;
    v2124[3] = &__block_descriptor_56_ea8_40c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e30_v16__0__ResourceAccessor_____8l;
    v2124[4] = a1;
    v2124[5] = v1552;
    v1561 = (std::__shared_weak_count *)a3[1];
    v2125 = v1561;
    if (v1561)
    {
      v1562 = (unint64_t *)&v1561->__shared_owners_;
      do
        v1563 = __ldxr(v1562);
      while (__stxr(v1563 + 1, v1562));
    }
    *(_QWORD *)&v2200[24] = 0;
    *(_QWORD *)v2200 = &off_1E42C7118;
    *(_QWORD *)&v2200[8] = MEMORY[0x1A1AF5730](v2124);
    *(_QWORD *)&v2200[24] = v2200;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)(v1560 + 32) + 16))(*(_QWORD *)(v1560 + 32), v2200, buf);
    v1564 = *(std::__shared_weak_count **)&buf[8];
    v1550 = a2;
    if (*(_QWORD *)&buf[8])
    {
      v1565 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v1566 = __ldaxr(v1565);
      while (__stlxr(v1566 - 1, v1565));
      if (!v1566)
      {
        ((void (*)(std::__shared_weak_count *))v1564->__on_zero_shared)(v1564);
        std::__shared_weak_count::__release_weak(v1564);
      }
    }
    v1567 = *(_QWORD **)&v2200[24];
    if (*(_BYTE **)&v2200[24] == v2200)
    {
      v1568 = 4;
      v1567 = v2200;
LABEL_2202:
      (*(void (**)(void))(*v1567 + 8 * v1568))();
    }
    else if (*(_QWORD *)&v2200[24])
    {
      v1568 = 5;
      goto LABEL_2202;
    }
    v1573 = v2125;
    v1551 = a3;
    if (v2125)
    {
      v1574 = (unint64_t *)&v2125->__shared_owners_;
      do
        v1575 = __ldaxr(v1574);
      while (__stlxr(v1575 - 1, v1574));
      v1551 = a3;
      if (!v1575)
      {
        ((void (*)(std::__shared_weak_count *))v1573->__on_zero_shared)(v1573);
        std::__shared_weak_count::__release_weak(v1573);
      }
    }
    goto LABEL_2175;
  }
LABEL_2297:
  v1645 = *(_QWORD *)(*a3 + 328);
  *(_QWORD *)(v1645 + 56) = **(_QWORD **)(v1645 + 152);
  v1646 = *(_QWORD **)(*(_QWORD *)v2147 + 8);
  v1647 = (int8x8_t)v1646[1];
  if (!*(_QWORD *)&v1647)
    goto LABEL_2325;
  v1648 = (uint8x8_t)vcnt_s8(v1647);
  v1648.i16[0] = vaddlv_u8(v1648);
  if (v1648.u32[0] > 1uLL)
  {
    v1649 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v1647 <= 0x1AF456233693CD46uLL)
      v1649 = 0x1AF456233693CD46uLL % *(_QWORD *)&v1647;
  }
  else
  {
    v1649 = (*(_QWORD *)&v1647 - 1) & 0x1AF456233693CD46;
  }
  v1650 = *(_QWORD **)(*v1646 + 8 * v1649);
  if (!v1650)
    goto LABEL_2325;
  v1651 = (_QWORD *)*v1650;
  if (!v1651)
    goto LABEL_2325;
  if (v1648.u32[0] < 2uLL)
  {
    while (1)
    {
      v1653 = v1651[1];
      if (v1653 == 0x1AF456233693CD46)
      {
        if (v1651[2] == 0x1AF456233693CD46)
          goto LABEL_2318;
      }
      else if ((v1653 & (*(_QWORD *)&v1647 - 1)) != v1649)
      {
        goto LABEL_2325;
      }
      v1651 = (_QWORD *)*v1651;
      if (!v1651)
        goto LABEL_2325;
    }
  }
  while (1)
  {
    v1652 = v1651[1];
    if (v1652 == 0x1AF456233693CD46)
      break;
    if (v1652 >= *(_QWORD *)&v1647)
      v1652 %= *(_QWORD *)&v1647;
    if (v1652 != v1649)
      goto LABEL_2325;
LABEL_2307:
    v1651 = (_QWORD *)*v1651;
    if (!v1651)
      goto LABEL_2325;
  }
  if (v1651[2] != 0x1AF456233693CD46)
    goto LABEL_2307;
LABEL_2318:
  v1654 = v1651[5];
  if (*(_QWORD *)(v1654 + 8) != 0x1AF456233693CD46)
  {
LABEL_2325:
    v1655 = 0;
    if (MEMORY[0xEC0])
      goto LABEL_2326;
LABEL_2320:
    if ((*(_QWORD *)&v1647 & (*(_QWORD *)&v1647 - 1)) != 0)
    {
      v1664 = 0x8BD499FBD96FBB9ELL;
      if (*(_QWORD *)&v1647 <= 0x8BD499FBD96FBB9ELL)
        v1664 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v1647;
      v1656 = *(_QWORD **)(*v1646 + 8 * v1664);
      do
      {
        do
          v1656 = (_QWORD *)*v1656;
        while (v1656[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v1656[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      v1656 = *(_QWORD **)(*v1646 + 8 * ((*(_QWORD *)&v1647 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          v1656 = (_QWORD *)*v1656;
        while (v1656[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v1656[2] != 0x8BD499FBD96FBB9ELL);
    }
    v1665 = 0.0;
    if (**(_BYTE **)(v1656[5] + 32) && *(_BYTE *)(v1645 + 104))
      v1665 = *(double *)(v1655 + 24) * 0.0000000249532021 * (double)(1 << *(_BYTE *)(v1645 + 81));
    v1666 = *(_QWORD *)(v1645 + 112);
    if ((*(_BYTE *)(v1666 + 16) & 2) == 0)
    {
      v1667 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v1667 != -1)
      {
        *(_QWORD *)v2200 = v2221;
        *(_QWORD *)buf = v2200;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v1662 = *(float **)(v1666 + 72);
    v1663 = v1665;
    goto LABEL_2344;
  }
  v1655 = *(_QWORD *)(v1654 + 32);
  if (!*(_BYTE *)(v1655 + 3776))
    goto LABEL_2320;
LABEL_2326:
  v1657 = *(_QWORD *)(v1645 + 72);
  if (!v1657)
  {
    v1660 = *(_QWORD *)(v1645 + 112);
    if ((*(_BYTE *)(v1660 + 16) & 2) == 0)
    {
      v1661 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v1661 != -1)
      {
        *(_QWORD *)v2200 = v2221;
        *(_QWORD *)buf = v2200;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    v1662 = *(float **)(v1660 + 72);
    v1663 = 0.0;
LABEL_2344:
    v1658 = ggl::CullingGrid::intersectedCellsForView(v1662, v1663);
    goto LABEL_2345;
  }
  v1658 = gdc::GlobeTileGrid::intersectWithFrustum(v1657, (const double *)(v1655 + 984), *(double *)(v1655 + 24));
LABEL_2345:
  v1668 = *(uint64_t **)(v1645 + 8);
  v1669 = *(uint64_t **)(v1645 + 16);
  if (v1668 != v1669)
  {
    do
    {
      v1671 = *v1668;
      v1672 = *(uint64_t **)(*v1668 + 248);
      v1673 = *(uint64_t **)(*v1668 + 256);
      if (v1672 == v1673)
      {
        v1670 = 0;
      }
      else
      {
        v1670 = 0;
        do
        {
          v1674 = *v1672++;
          v1675 = (*(_DWORD *)(v1674 + 96) & v1658) != 0;
          v1670 |= v1675;
          *(_BYTE *)(v1674 + 48) = v1675;
        }
        while (v1672 != v1673);
      }
      *(_BYTE *)(v1671 + 136) = v1670 & 1;
      *(_BYTE *)(v1671 + 272) = v1670 & 1;
      ++v1668;
    }
    while (v1668 != v1669);
    v1676 = *(uint64_t **)(v1645 + 8);
    v1677 = *(uint64_t **)(v1645 + 16);
    if (v1676 != v1677)
    {
      v5 = (unint64_t)&v2223[8];
      LODWORD(v185) = 0;
      while (2)
      {
        v1678 = *v1676;
        if (!*(_BYTE *)(*v1676 + 272))
          goto LABEL_2357;
        v1679 = *(_QWORD *)(v1678 + 280);
        v1680 = *(_QWORD *)(v1679 + 272);
        v1681 = *(std::__shared_weak_count **)(v1679 + 280);
        if (v1681)
        {
          v1682 = (unint64_t *)&v1681->__shared_owners_;
          do
            v1683 = __ldxr(v1682);
          while (__stxr(v1683 + 1, v1682));
          *((_QWORD *)&v2226 + 1) = v1681;
          do
            v1684 = __ldxr(v1682);
          while (__stxr(v1684 + 1, v1682));
        }
        else
        {
          *((_QWORD *)&v2226 + 1) = 0;
        }
        *(_QWORD *)&v2226 = v1680;
        v2227 = 0uLL;
        LOBYTE(v2228) = 0;
        if (v1680)
          LODWORD(v1680) = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v1680 + 48))(v1680, &v2227);
        LOBYTE(v2228) = v1680;
        if (v1681)
        {
          v1685 = (unint64_t *)&v1681->__shared_owners_;
          do
            v1686 = __ldaxr(v1685);
          while (__stlxr(v1686 - 1, v1685));
          if (!v1686)
          {
            ((void (*)(std::__shared_weak_count *))v1681->__on_zero_shared)(v1681);
            std::__shared_weak_count::__release_weak(v1681);
          }
          LODWORD(v1680) = v2228;
        }
        if (!(_DWORD)v1680)
        {
          if (GEOGetVectorKitRouteLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitRouteLog_onceToken, &__block_literal_global_25_11794);
          v1697 = (id)GEOGetVectorKitRouteLog_log;
          if (os_log_type_enabled(v1697, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v2200 = 0;
            _os_log_impl(&dword_19F029000, v1697, OS_LOG_TYPE_INFO, "***RouteStyledOverlayBatch failed to layout", v2200, 2u);
          }

          *(_BYTE *)(v1678 + 136) = 0;
          *(_BYTE *)(v1678 + 272) = 0;
          goto LABEL_2356;
        }
        v1687 = *(_QWORD *)(v1678 + 280);
        v1688 = *(float *)(v1687 + 80);
        v1689 = *(float *)&v2147[8];
        v1690 = *(float *)(v1687 + 88);
        LODWORD(_D14) = *(_DWORD *)(v1678 + 320);
        v1691 = *(float *)(v1678 + 324);
        md::RouteStyledOverlayBatch::StyleProperties::StyleProperties((uint64_t)v2200, (std::string::size_type *)(v1678 + 288), *(float *)&v2147[8]);
        md::RouteStyledOverlayBatch::StyleProperties::StyleProperties((uint64_t)buf, (std::string::size_type *)(v1678 + 304), v1689);
        v1692 = fminf(fminf(fmaxf((float)(v1691 - (float)(v1690 + (float)(v1688 * 20.0))) / (float)(v1688 * 20.0), 0.0), 1.0), fminf(fmaxf((float)((float)(v1690 + (float)(v1688 * 20.0)) - *(float *)&_D14) / (float)(v1688 * 20.0), 0.0), 1.0));
        *(float32x4_t *)&v2221[32] = vmlaq_n_f32(*(float32x4_t *)v2201, vsubq_f32(*(float32x4_t *)v2217, *(float32x4_t *)v2201), v1692);
        *(float *)&v2221[48] = *(float *)&v2201[16]
                             + (float)((float)(*(float *)&v2217[16] - *(float *)&v2201[16]) * v1692);
        *(_WORD *)&v2223[7] = 0;
        LOBYTE(v2222) = 0;
        HIBYTE(v2224) = 0;
        *(float32x4_t *)v2221 = vmlaq_n_f32(*(float32x4_t *)v2200, vsubq_f32(*(float32x4_t *)buf, *(float32x4_t *)v2200), v1692);
        *(float32x4_t *)&v2221[16] = vmlaq_n_f32(*(float32x4_t *)&v2200[16], vsubq_f32(*(float32x4_t *)&buf[16], *(float32x4_t *)&v2200[16]), v1692);
        v2225 = *(float *)&v2203.f64[1] + (float)((float)(*(float *)&v2219.f64[1] - *(float *)&v2203.f64[1]) * v1692);
        if (v2201[47] >= 0)
          v1693 = v2201[47];
        else
          v1693 = *(_QWORD *)&v2201[32];
        v1694 = v2217[47];
        v1695 = *(_QWORD *)&v2217[32];
        if (v2217[47] < 0)
          v1694 = *(_QWORD *)&v2217[32];
        if (v1693)
        {
          if (!v1694)
          {
            v1696 = &v2201[24];
            if ((v2201[47] & 0x80000000) != 0)
            {
              v2095 = v1692;
              v1696 = &v2201[24];
              v1695 = *(_QWORD *)&v2201[32];
              break;
            }
LABEL_2399:
            v2222 = *(_OWORD *)v1696;
            *(_QWORD *)v2223 = *((_QWORD *)v1696 + 2);
LABEL_2404:
            if (v2203.f64[0] >= 0.0)
              v1700 = (void *)HIBYTE(v2203.f64[0]);
            else
              v1700 = v2202[1];
            v1701 = HIBYTE(v2219.f64[0]);
            v1702 = v2218[1];
            if (v2219.f64[0] < 0.0)
              v1701 = (size_t)v2218[1];
            if (v1700)
            {
              if (!v1701)
              {
                if ((SHIBYTE(v2224) & 0x80000000) == 0)
                {
                  v1703 = v2202;
                  if (SHIBYTE(v2203.f64[0]) < 0)
                  {
                    v1703 = v2202;
                    v1702 = v2202[1];
                    goto LABEL_2437;
                  }
LABEL_2425:
                  *(_OWORD *)&v2223[8] = *(_OWORD *)v1703;
                  v2224 = v1703[2];
LABEL_2446:
                  if (*(float *)&v2221[12] == 0.0)
                  {
                    *(_BYTE *)(v1678 + 136) = 0;
                    *(_BYTE *)(v1678 + 272) = 0;
                    goto LABEL_2448;
                  }
                  md::RouteLineSection::halfWidthAtZoom(&v2226, v1689);
                  v1712 = v1711;
                  LODWORD(_D14) = HIDWORD(v2156);
                  v1713 = *(float *)v2221;
                  v1714 = 0.0;
                  v1715 = 0.0;
                  if (*(float *)&v2221[4] > 0.0)
                  {
                    v1716 = *(float *)&v2221[4];
                    v1715 = fmod(__x, *(float *)&v2221[4]) / v1716;
                  }
                  if (*(float *)&v2221[8] > 0.0)
                  {
                    v1717 = *(float *)&v2221[8];
                    v1714 = fmod(__x, *(float *)&v2221[8]) / v1717;
                  }
                  v1718 = *(_QWORD **)(*(_QWORD *)v2147 + 8);
                  v1719 = v1718[1];
                  if ((v1719 & (v1719 - 1)) != 0)
                  {
                    v1721 = 0xA60DDA5A69582425;
                    if (v1719 <= 0xA60DDA5A69582425)
                      v1721 = 0xA60DDA5A69582425 % v1719;
                    v1720 = *(_QWORD **)(*v1718 + 8 * v1721);
                    do
                    {
                      do
                        v1720 = (_QWORD *)*v1720;
                      while (v1720[1] != 0xA60DDA5A69582425);
                    }
                    while (v1720[2] != 0xA60DDA5A69582425);
                  }
                  else
                  {
                    v1720 = *(_QWORD **)(*v1718 + 8 * ((v1719 - 1) & 0xA60DDA5A69582425));
                    do
                    {
                      do
                        v1720 = (_QWORD *)*v1720;
                      while (v1720[1] != 0xA60DDA5A69582425);
                    }
                    while (v1720[2] != 0xA60DDA5A69582425);
                  }
                  v1722 = **(id **)(v1720[5] + 32);
                  v1723 = v1722;
                  if (v1722)
                  {
                    objc_msgSend(v1722, "textureManager");
                  }
                  else
                  {
                    __p[1] = 0;
                    __p[0] = 0;
                  }

                  v1724 = (uint64_t *)__p[0];
                  v1725 = *(float *)&v2147[20];
                  v1726 = *(std::__shared_weak_count **)(v1678 + 344);
                  v2238 = *(uint64_t (***)())(v1678 + 336);
                  v2239 = v1726;
                  if (v1726)
                  {
                    v1727 = (unint64_t *)&v1726->__shared_owners_;
                    do
                      v1728 = __ldxr(v1727);
                    while (__stxr(v1728 + 1, v1727));
                  }
                  md::TextureManager::texture(v2242, v1724, (uint64_t)&v2222, (uint64_t *)&v2238, 1, v1725);
                  if (!v1726)
                    goto LABEL_2484;
                  v1729 = (unint64_t *)&v1726->__shared_owners_;
                  do
                    v1730 = __ldaxr(v1729);
                  while (__stlxr(v1730 - 1, v1729));
                  if (!v1730)
                  {
                    ((void (*)(std::__shared_weak_count *))v1726->__on_zero_shared)(v1726);
                    std::__shared_weak_count::__release_weak(v1726);
                    v1731 = *(md::SharedResource **)v2242;
                    if (!*(_QWORD *)v2242)
                      goto LABEL_2487;
LABEL_2485:
                    md::SharedResource::addFrameRef(v1731, v2166);
                    v1732 = (uint64_t *)((char *)v1731 + 32);
                    v1733 = (uint64_t *)__p[0];
                  }
                  else
                  {
LABEL_2484:
                    v1731 = *(md::SharedResource **)v2242;
                    if (*(_QWORD *)v2242)
                      goto LABEL_2485;
LABEL_2487:
                    v1733 = (uint64_t *)__p[0];
                    v1732 = (uint64_t *)__p[0];
                  }
                  v1734 = *v1732;
                  v1735 = *(float *)&v2147[20];
                  v1736 = *(std::__shared_weak_count **)(v1678 + 344);
                  v2234[0] = *(_QWORD *)(v1678 + 336);
                  v2234[1] = (uint64_t)v1736;
                  if (v1736)
                  {
                    v1737 = (unint64_t *)&v1736->__shared_owners_;
                    do
                      v1738 = __ldxr(v1737);
                    while (__stxr(v1738 + 1, v1737));
                  }
                  md::TextureManager::texture(v2236, v1733, (uint64_t)&v2223[8], v2234, 1, v1735);
                  if (!v1736)
                    goto LABEL_2495;
                  v1739 = (unint64_t *)&v1736->__shared_owners_;
                  do
                    v1740 = __ldaxr(v1739);
                  while (__stlxr(v1740 - 1, v1739));
                  if (!v1740)
                  {
                    ((void (*)(std::__shared_weak_count *))v1736->__on_zero_shared)(v1736);
                    std::__shared_weak_count::__release_weak(v1736);
                    v1741 = v2236[0];
                    if (!v2236[0])
                      goto LABEL_2498;
LABEL_2496:
                    md::SharedResource::addFrameRef(v1741, v2166);
                    v1742 = (uint64_t *)((char *)v1741 + 32);
                  }
                  else
                  {
LABEL_2495:
                    v1741 = v2236[0];
                    if (v2236[0])
                      goto LABEL_2496;
LABEL_2498:
                    v1742 = (uint64_t *)__p[0];
                  }
                  v1743 = v1715;
                  v1744 = v1714;
                  v1745 = *v1742;
                  **(_QWORD **)(*(_QWORD *)(v1678 + 328) + 96) = v1734;
                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1678 + 328) + 96) + 8) = v1745;
                  v1746 = *(_QWORD *)(v1678 + 328);
                  v1747 = *(_QWORD **)(*(_QWORD *)(v1746 + 64) + 32);
                  v1748 = v1747[1];
                  v1749 = (float32x2_t *)v1747[9];
                  v1749->i32[0] = *(_DWORD *)&v2221[12];
                  v1749->f32[1] = (float)(v1713 + v1712) * *(float *)&_D14;
                  v1750 = *(_QWORD *)(v1678 + 280);
                  v1749[1].f32[0] = *(float *)(v1750 + 80) * *(float *)&v2221[16];
                  v1749[2] = vmla_n_f32(*(float32x2_t *)&v2221[20], *(float32x2_t *)&v2221[28], v1743);
                  v1749[3] = vmla_n_f32(*(float32x2_t *)&v2221[36], *(float32x2_t *)&v2221[44], v1744);
                  v1749[4].f32[0] = v2225;
                  v1749[4].i32[1] = 1065353216;
                  *(_QWORD *)(v1678 + 48) = v1746;
                  *(_BYTE *)(v1678 + 136) = 1;
                  *(_QWORD *)(v1678 + 64) = (*(_QWORD *)(v1750 + 240) + v2157) | 0x20000;
                  v1751 = v1747[8];
                  if (v1751 <= v1748)
                    v1751 = v1748;
                  v1747[7] = 0;
                  v1747[8] = v1751;
                  v1752 = (std::__shared_weak_count *)v2236[1];
                  if (v2236[1])
                  {
                    v1753 = (unint64_t *)((char *)v2236[1] + 8);
                    do
                      v1754 = __ldaxr(v1753);
                    while (__stlxr(v1754 - 1, v1753));
                    if (!v1754)
                    {
                      ((void (*)(std::__shared_weak_count *))v1752->__on_zero_shared)(v1752);
                      std::__shared_weak_count::__release_weak(v1752);
                    }
                  }
                  v1755 = *(std::__shared_weak_count **)&v2242[8];
                  if (*(_QWORD *)&v2242[8])
                  {
                    v1756 = (unint64_t *)(*(_QWORD *)&v2242[8] + 8);
                    do
                      v1757 = __ldaxr(v1756);
                    while (__stlxr(v1757 - 1, v1756));
                    if (!v1757)
                    {
                      ((void (*)(std::__shared_weak_count *))v1755->__on_zero_shared)(v1755);
                      std::__shared_weak_count::__release_weak(v1755);
                    }
                  }
                  v1758 = (std::__shared_weak_count *)__p[1];
                  if (__p[1])
                  {
                    v1759 = (unint64_t *)((char *)__p[1] + 8);
                    do
                      v1760 = __ldaxr(v1759);
                    while (__stlxr(v1760 - 1, v1759));
                    if (!v1760)
                    {
                      ((void (*)(std::__shared_weak_count *))v1758->__on_zero_shared)(v1758);
                      std::__shared_weak_count::__release_weak(v1758);
                    }
                  }
LABEL_2448:
                  if (SHIBYTE(v2224) < 0)
                  {
                    operator delete(*(void **)&v2223[8]);
                    if ((v2223[7] & 0x80000000) != 0)
                      goto LABEL_2464;
LABEL_2450:
                    if ((SHIBYTE(v2219.f64[0]) & 0x80000000) == 0)
                      goto LABEL_2451;
LABEL_2465:
                    operator delete(v2218[0]);
                    if ((v2217[47] & 0x80000000) != 0)
                      goto LABEL_2466;
LABEL_2452:
                    if (SHIBYTE(v2203.f64[0]) < 0)
                      goto LABEL_2355;
LABEL_2467:
                    if ((v2201[47] & 0x80000000) == 0)
                    {
LABEL_2356:
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v2226);
LABEL_2357:
                      if (++v1676 == v1677)
                        goto LABEL_2516;
                      continue;
                    }
                  }
                  else
                  {
                    if ((v2223[7] & 0x80000000) == 0)
                      goto LABEL_2450;
LABEL_2464:
                    operator delete((void *)v2222);
                    if (SHIBYTE(v2219.f64[0]) < 0)
                      goto LABEL_2465;
LABEL_2451:
                    if ((v2217[47] & 0x80000000) == 0)
                      goto LABEL_2452;
LABEL_2466:
                    operator delete(*(void **)&v2217[24]);
                    if ((SHIBYTE(v2203.f64[0]) & 0x80000000) == 0)
                      goto LABEL_2467;
LABEL_2355:
                    operator delete(v2202[0]);
                    if ((v2201[47] & 0x80000000) == 0)
                      goto LABEL_2356;
                  }
                  operator delete(*(void **)&v2201[24]);
                  goto LABEL_2356;
                }
                if (v2203.f64[0] >= 0.0)
                  v1709 = v2202;
                else
                  v1709 = (void **)v2202[0];
                v1701 = (size_t)v1700;
LABEL_2445:
                std::string::__assign_no_alias<false>((void **)&v2223[8], v1709, v1701);
                goto LABEL_2446;
              }
LABEL_2418:
              if (v1692 > 0.5)
                v1704 = buf;
              else
                v1704 = v2200;
              v1703 = v2202;
              if (v1692 > 0.5)
                v1703 = v2218;
              v1705 = v1704[103];
              if (SHIBYTE(v2224) < 0)
              {
                v1706 = (void **)*((_QWORD *)v1704 + 10);
                v1707 = &v2202[1];
                if (v1692 > 0.5)
                  v1707 = &v2218[1];
                v1708 = *v1707;
                if ((v1705 & 0x80u) == 0)
                  v1709 = v1703;
                else
                  v1709 = v1706;
                if ((v1705 & 0x80u) == 0)
                  v1701 = v1705;
                else
                  v1701 = (size_t)v1708;
                goto LABEL_2445;
              }
              if ((v1705 & 0x80) == 0)
                goto LABEL_2425;
              v1710 = &v2202[1];
              if (v1692 > 0.5)
                v1710 = &v2218[1];
              v1702 = *v1710;
            }
            else
            {
              if (!v1701)
                goto LABEL_2418;
              if (SHIBYTE(v2224) < 0)
              {
                if (v2219.f64[0] >= 0.0)
                  v1709 = v2218;
                else
                  v1709 = (void **)v2218[0];
                goto LABEL_2445;
              }
              v1703 = v2218;
              if ((SHIBYTE(v2219.f64[0]) & 0x80000000) == 0)
                goto LABEL_2425;
              v1703 = v2218;
            }
LABEL_2437:
            std::string::__assign_no_alias<true>(&v2223[8], *v1703, (size_t)v1702);
            goto LABEL_2446;
          }
LABEL_2392:
          if (v1692 > 0.5)
            v1696 = &v2217[24];
          else
            v1696 = &v2201[24];
          if (v1692 > 0.5)
            v1698 = buf;
          else
            v1698 = v2200;
          if (((char)v1698[79] & 0x80000000) == 0)
            goto LABEL_2399;
          v1699 = (size_t *)&v2201[32];
          v2095 = v1692;
          if (v1692 > 0.5)
            v1699 = (size_t *)&v2217[32];
          v1695 = *v1699;
        }
        else
        {
          if (!v1694)
            goto LABEL_2392;
          v1696 = &v2217[24];
          if ((v2217[47] & 0x80000000) == 0)
            goto LABEL_2399;
          v2095 = v1692;
          v1696 = &v2217[24];
        }
        break;
      }
      std::string::__assign_no_alias<true>(&v2222, *(void **)v1696, v1695);
      v1692 = v2095;
      goto LABEL_2404;
    }
  }
LABEL_2516:
  v1761 = *(_QWORD *)(*a3 + 328);
  v1762 = *(_QWORD **)(v1761 + 8);
  v2110 = *(_QWORD **)(v1761 + 16);
  v976 = (const md::LayoutContext *)a2;
  if (v1762 != v2110)
  {
    while (2)
    {
      v1764 = *v1762;
      *(_QWORD *)buf = &off_1E42D4648;
      *(_QWORD *)&buf[8] = v2105;
      v1765 = buf;
      *(_QWORD *)&buf[24] = buf;
      if (!*(_BYTE *)(v1764 + 272))
      {
        v1763 = 4;
        goto LABEL_2519;
      }
      if (*(_BYTE *)(v1764 + 136))
      {
        v1766 = *(_QWORD *)(*(_QWORD *)(v1764 + 8) + 56);
        *(_QWORD *)(v1764 + 40) = v1766;
        v1116 = *(unsigned __int8 *)(v1766 + 58) == 1;
      }
      else
      {
        v1116 = 0;
      }
      v2119 = v1762;
      v1118 = *(void (**)(void))(v1764 + 248);
      v1123 = *(void (**)(void))(v1764 + 256);
      if (v1118 != v1123)
      {
        v995 = 0;
        LODWORD(v1119) = v1764 + 144;
        v5 = v1764 + 40;
        while (1)
        {
          v1767 = *(_QWORD *)v1118;
          if (*(_BYTE *)(*(_QWORD *)v1118 + 48))
          {
            if (*(_QWORD *)(v1767 + 88) != v995)
            {
              if (v995)
              {
                v1768 = ggl::Batcher::commit((__int128 **)(v1764 + 144), 0xC8u, v1659);
                if (v1768[1] != *v1768)
                {
                  if (*(_BYTE *)(v1764 + 136))
                  {
                    v1769 = v1768;
                    v1770 = *(_QWORD *)(v1764 + 24);
                    v1113 = *(_QWORD *)(v1764 + 32);
                    v1771 = *(_OWORD *)(v1764 + 88);
                    *(_OWORD *)v2201 = *(_OWORD *)(v1764 + 72);
                    *(_OWORD *)&v2201[16] = v1771;
                    v1772 = *(_OWORD *)(v1764 + 120);
                    *(_OWORD *)&v2201[32] = *(_OWORD *)(v1764 + 104);
                    *(_OWORD *)v2202 = v1772;
                    v1773 = *(_OWORD *)(v1764 + 56);
                    *(_OWORD *)v2200 = *(_OWORD *)v5;
                    *(_OWORD *)&v2200[16] = v1773;
                    v1774 = *(_QWORD **)(v1764 + 232);
                    v1775 = v1774[1];
                    if (v1775 == *(_QWORD *)(v1764 + 240))
                    {
                      v1774 = (_QWORD *)*v1774;
                      if (!v1774)
                      {
                        v1774 = malloc_type_malloc(120 * v1775 + 16, 0xB644C221uLL);
                        *v1774 = 0;
                        v1774[1] = 0;
                        **(_QWORD **)(v1764 + 232) = v1774;
                      }
                      *(_QWORD *)(v1764 + 232) = v1774;
                      v1775 = v1774[1];
                    }
                    v1776 = &v1774[15 * v1775];
                    v1774[1] = v1775 + 1;
                    v1776[2] = &off_1E42B59B0;
                    v1776[3] = v1770;
                    v1776 += 2;
                    v1776[2] = v1113;
                    v1777 = *(_OWORD *)&v2201[32];
                    v1778 = *(_OWORD *)v2202;
                    v1779 = *(_OWORD *)&v2201[16];
                    *(_OWORD *)(v1776 + 7) = *(_OWORD *)v2201;
                    v1780 = *(_OWORD *)v2200;
                    *(_OWORD *)(v1776 + 5) = *(_OWORD *)&v2200[16];
                    *(_OWORD *)(v1776 + 3) = v1780;
                    *(_OWORD *)(v1776 + 13) = v1778;
                    *(_OWORD *)(v1776 + 11) = v1777;
                    *(_OWORD *)(v1776 + 9) = v1779;
                    v1776[8] = v995;
                    v1781 = *v1769;
                    v1776[11] = *v1769;
                    v1776[12] = (v1769[1] - v1781) >> 4;
                    *(_DWORD *)v2221 = 0;
                    *(_QWORD *)v2200 = v1776;
                    v976 = (const md::LayoutContext *)a2;
                    if (!*(_QWORD *)&buf[24])
                      goto LABEL_2867;
                    (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)&buf[24] + 48))(*(_QWORD *)&buf[24], v2221, v2200);
                  }
                }
              }
              v1767 = *(_QWORD *)v1118;
              v995 = *(_QWORD *)(*(_QWORD *)v1118 + 88);
            }
            v1782 = 32;
            if ((_DWORD)v1116)
            {
              v1783 = v1767 + 32;
            }
            else
            {
              v1782 = 16;
              v1783 = v1767 + 16;
            }
            if (*(_QWORD *)(v1783 + 8) != *(_QWORD *)(v1767 + v1782))
              gm::MultiRange<unsigned long>::push_back((char **)(v1764 + 144), (_OWORD *)v1783);
          }
          v1118 = (void (*)(void))((char *)v1118 + 8);
          if (v1118 == v1123)
            goto LABEL_2546;
        }
      }
      v995 = 0;
LABEL_2546:
      v1784 = ggl::Batcher::commit((__int128 **)(v1764 + 144), 0xC8u, v1659);
      if (v1784[1] != *v1784 && *(_BYTE *)(v1764 + 136))
      {
        v1119 = v1784;
        v1785 = *(_QWORD *)(v1764 + 24);
        v1113 = *(_QWORD *)(v1764 + 32);
        v1786 = *(_OWORD *)(v1764 + 88);
        *(_OWORD *)v2201 = *(_OWORD *)(v1764 + 72);
        *(_OWORD *)&v2201[16] = v1786;
        v1787 = *(_OWORD *)(v1764 + 120);
        *(_OWORD *)&v2201[32] = *(_OWORD *)(v1764 + 104);
        *(_OWORD *)v2202 = v1787;
        v1788 = *(_OWORD *)(v1764 + 56);
        *(_OWORD *)v2200 = *(_OWORD *)(v1764 + 40);
        *(_OWORD *)&v2200[16] = v1788;
        v1789 = *(_QWORD **)(v1764 + 232);
        v1790 = v1789[1];
        if (v1790 == *(_QWORD *)(v1764 + 240))
        {
          v1789 = (_QWORD *)*v1789;
          if (!v1789)
          {
            v1789 = malloc_type_malloc(120 * v1790 + 16, 0xB644C221uLL);
            *v1789 = 0;
            v1789[1] = 0;
            **(_QWORD **)(v1764 + 232) = v1789;
          }
          *(_QWORD *)(v1764 + 232) = v1789;
          v1790 = v1789[1];
        }
        v1791 = &v1789[15 * v1790];
        v1789[1] = v1790 + 1;
        v1791[2] = &off_1E42B59B0;
        v1791[3] = v1785;
        v1791 += 2;
        v1791[2] = v1113;
        v1792 = *(_OWORD *)&v2201[32];
        v1793 = *(_OWORD *)v2202;
        v1794 = *(_OWORD *)&v2201[16];
        *(_OWORD *)(v1791 + 7) = *(_OWORD *)v2201;
        v1795 = *(_OWORD *)v2200;
        *(_OWORD *)(v1791 + 5) = *(_OWORD *)&v2200[16];
        *(_OWORD *)(v1791 + 3) = v1795;
        *(_OWORD *)(v1791 + 13) = v1793;
        *(_OWORD *)(v1791 + 11) = v1792;
        *(_OWORD *)(v1791 + 9) = v1794;
        v1791[8] = v995;
        v1796 = *v1119;
        v1791[11] = *v1119;
        v1791[12] = (v1119[1] - v1796) >> 4;
        *(_DWORD *)v2221 = 0;
        *(_QWORD *)v2200 = v1791;
        if (!*(_QWORD *)&buf[24])
        {
LABEL_2867:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_2880:
          __break(1u);
LABEL_2881:
          if ((_DWORD)v2036)
          {
            if ((v2037 & 1) == 0)
            {
              if ((_DWORD)v2036)
              {
                if ((v2040 & 1) == 0
                {
                  if ((v2041 & 1) == 0
                  {
                    ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLineArrow::defaultVboReflection;
                  }
                  ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::attributesReflection(void)::r;
                  unk_1EE5763A0 = 1;
                }
                ggl::RouteLineArrow::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::typedReflection(void)::r;
                *(_QWORD *)algn_1EE576328 = &ggl::RouteLineArrow::pipelineDataBasePipelineDeviceStructs(void)::ref;
                qword_1EE576330 = 0;
                if ((v2042 & 1) == 0
                {
                  ggl::RouteLineArrow::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
                  unk_1EE576360 = ggl::Tile::Transform::reflection(void)::reflection;
                  qword_1EE576368 = (uint64_t)ggl::RouteLineArrow::Style::reflection(void)::reflection;
                }
                qword_1EE576338 = (uint64_t)&ggl::RouteLineArrow::pipelineDataBasePipelineConstantStructs(void)::ref;
                unk_1EE576340 = xmmword_19FFB35E0;
              }
            }
            ggl::RouteLineArrow::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::RouteLineArrow::BasePipelineSetup::typedReflection(void)::ref;
            ggl::RouteLineArrowShader::typedReflection(v2036);
            qword_1EE58CC80 = (uint64_t)&ggl::RouteLineArrowShader::typedReflection(void)::ref;
            if ((v2038 & 1) == 0
            {
              ggl::RouteLineArrow::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
              unk_1EE58CCE0 = 0;
              qword_1EE58CCE8 = (uint64_t)"";
              dword_1EE58CCF0 = 0;
              qword_1EE58CCF8 = (uint64_t)&ggl::RouteLineArrow::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
              unk_1EE58CD00 = 4;
            }
            qword_1EE58CC88 = (uint64_t)&ggl::RouteLineArrow::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
            unk_1EE58CC90 = 1;
            qword_1EE58CC98 = 0;
            unk_1EE58CCA0 = 1;
            qword_1EE58CCA8 = (uint64_t)&ggl::RouteLineArrow::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
            unk_1EE58CCB0 = 0;
            if ((v2039 & 1) == 0
            {
              ggl::RouteLineArrow::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
              unk_1EE58CD20 = 0;
              qword_1EE58CD28 = (uint64_t)"view";
              dword_1EE58CD30 = 3;
              qword_1EE58CD38 = (uint64_t)&ggl::RouteLineArrow::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
              unk_1EE58CD40 = xmmword_19FFB35A0;
              qword_1EE58CD50 = 1;
              unk_1EE58CD58 = "transform";
              dword_1EE58CD60 = 3;
              qword_1EE58CD68 = (uint64_t)&ggl::RouteLineArrow::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
              *(_OWORD *)algn_1EE58CD70 = xmmword_19FFB3660;
              qword_1EE58CD80 = 2;
              unk_1EE58CD88 = "style";
              dword_1EE58CD90 = 3;
              qword_1EE58CD98 = (uint64_t)&ggl::RouteLineArrow::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
              unk_1EE58CDA0 = 10;
            }
            qword_1EE58CCB8 = (uint64_t)&ggl::RouteLineArrow::pipelineStateBasePipelineConstantStructBinding(void)::ref;
            unk_1EE58CCC0 = 3;
          }
LABEL_2063:
          v1397 = (char *)v1123 + 24;
          v1398 = *(_QWORD *)buf;
          v1399 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v1400 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v1401 = __ldxr(v1400);
            while (__stxr(v1401 + 1, v1400));
            *((_DWORD *)v1123 + 14) = 0;
            *((_QWORD *)v1123 + 5) = 0;
            *((_QWORD *)v1123 + 6) = 0;
            *((_QWORD *)v1123 + 3) = &off_1E42B6760;
            *((_QWORD *)v1123 + 4) = 0;
            *((_QWORD *)v1123 + 8) = &ggl::RouteLineArrow::BasePipelineState::typedReflection(void)::ref;
            *((_QWORD *)v1123 + 9) = v1398;
            *((_QWORD *)v1123 + 10) = v1399;
            do
              v1402 = __ldxr(v1400);
            while (__stxr(v1402 + 1, v1400));
          }
          else
          {
            *((_DWORD *)v1123 + 14) = 0;
            *((_QWORD *)v1123 + 5) = 0;
            *((_QWORD *)v1123 + 6) = 0;
            *((_QWORD *)v1123 + 3) = &off_1E42B6760;
            *((_QWORD *)v1123 + 4) = 0;
            *((_QWORD *)v1123 + 8) = &ggl::RouteLineArrow::BasePipelineState::typedReflection(void)::ref;
            *((_QWORD *)v1123 + 9) = v1398;
            *((_QWORD *)v1123 + 10) = 0;
          }
          *((_BYTE *)v1123 + 136) = 0;
          *(_OWORD *)((char *)v1123 + 140) = xmmword_19FFB3060;
          *(_QWORD *)((char *)v1123 + 156) = 0;
          *(_QWORD *)((char *)v1123 + 172) = 0;
          *(_QWORD *)((char *)v1123 + 164) = 0;
          *((_BYTE *)v1123 + 184) = 0;
          *(_OWORD *)((char *)v1123 + 188) = xmmword_19FFB3060;
          *(_QWORD *)((char *)v1123 + 204) = 0;
          *(_QWORD *)((char *)v1123 + 220) = 0;
          *(_QWORD *)((char *)v1123 + 212) = 0;
          *((_BYTE *)v1123 + 232) = 0;
          *(_OWORD *)((char *)v1123 + 236) = xmmword_19FFB3060;
          *(_QWORD *)((char *)v1123 + 252) = 0;
          *(_QWORD *)((char *)v1123 + 268) = 0;
          *(_QWORD *)((char *)v1123 + 260) = 0;
          v1403 = *(_OWORD *)&v2200[16];
          *(_OWORD *)((char *)v1123 + 280) = *(_OWORD *)v2200;
          *(_OWORD *)((char *)v1123 + 296) = v1403;
          *((_BYTE *)v1123 + 312) = 0;
          *((_QWORD *)v1123 + 48) = 0;
          *((_OWORD *)v1123 + 22) = 0u;
          *((_OWORD *)v1123 + 23) = 0u;
          *((_OWORD *)v1123 + 20) = 0u;
          *((_OWORD *)v1123 + 21) = 0u;
          *((_QWORD *)v1123 + 49) = 0x100000001;
          *((_BYTE *)v1123 + 400) = 0;
          *((_BYTE *)v1123 + 88) = (_BYTE)v1118;
          *((_BYTE *)v1123 + 91) = v2242[2];
          *(_WORD *)((char *)v1123 + 89) = *(_WORD *)v2242;
          *((_DWORD *)v1123 + 23) = (_DWORD)v1119;
          *((_DWORD *)v1123 + 24) = v5;
          *(_QWORD *)((char *)v1123 + 100) = 0x100000000;
          *((_DWORD *)v1123 + 27) = v5;
          *((_QWORD *)v1123 + 14) = 0;
          *((_QWORD *)v1123 + 15) = 0;
          *((_DWORD *)v1123 + 32) = 0;
          *((_BYTE *)v1123 + 132) = 15;
          if (v1399)
          {
            v1404 = (unint64_t *)&v1399->__shared_owners_;
            do
              v1405 = __ldaxr(v1404);
            while (__stlxr(v1405 - 1, v1404));
            if (!v1405)
            {
              ((void (*)(std::__shared_weak_count *))v1399->__on_zero_shared)(v1399);
              std::__shared_weak_count::__release_weak(v1399);
              v1397 = (char *)v1123 + 24;
            }
          }
          *((_BYTE *)v1123 + 328) = v995;
          *((_BYTE *)v1123 + 329) = 1;
          *((_WORD *)v1123 + 169) = 0;
          *(_QWORD *)((char *)v1123 + 330) = 0;
          v1406 = vceqzq_s8(*(int8x16_t *)((char *)v1123 + 328));
          v1407 = vmovl_high_s8(v1406);
          v1408 = vmovl_s16(*(int16x4_t *)v1407.i8);
          v1409.i64[0] = v1408.u32[0];
          v1409.i64[1] = v1408.u32[1];
          v1410 = v1409;
          v1411 = vmovl_s8(*(int8x8_t *)v1406.i8);
          v1412 = vmovl_s16(*(int16x4_t *)v1411.i8);
          v1409.i64[0] = v1412.u32[0];
          v1409.i64[1] = v1412.u32[1];
          v1413 = v1409;
          v1414 = vmovl_high_s16(v1407);
          v1409.i64[0] = v1414.u32[0];
          v1409.i64[1] = v1414.u32[1];
          v1415 = v1409;
          v1416 = vmovl_high_s16(v1411);
          v1409.i64[0] = v1416.u32[0];
          v1409.i64[1] = v1416.u32[1];
          v1417 = v1409;
          v1409.i64[0] = v1408.u32[2];
          v1409.i64[1] = v1408.u32[3];
          v1418 = v1409;
          v1409.i64[0] = v1412.u32[2];
          v1409.i64[1] = v1412.u32[3];
          v1419 = v1409;
          v1409.i64[0] = v1414.u32[2];
          v1409.i64[1] = v1414.u32[3];
          v1420 = v1409;
          v1409.i64[0] = v1416.u32[2];
          v1409.i64[1] = v1416.u32[3];
          v1421 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v1409);
          v1422 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v1420);
          v1423 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v1419);
          v1424 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v1415);
          v1425 = vceqzq_s8(*(int8x16_t *)((char *)v1123 + 344));
          v1426 = vmovl_high_s8(v1425);
          v1427 = vmovl_s16(*(int16x4_t *)v1426.i8);
          v1409.i64[0] = v1427.u32[0];
          v1409.i64[1] = v1427.u32[1];
          v1428 = v1409;
          *((_QWORD *)v1123 + 3) = &off_1E42B6DB8;
          v1429 = vmovl_s8(*(int8x8_t *)v1425.i8);
          v1430 = vmovl_s16(*(int16x4_t *)v1429.i8);
          v1409.i64[0] = v1430.u32[0];
          v1409.i64[1] = v1430.u32[1];
          v1431 = v1409;
          v1432 = vmovl_high_s16(v1426);
          v1409.i64[0] = v1432.u32[0];
          v1409.i64[1] = v1432.u32[1];
          v1433 = v1409;
          v1434 = vmovl_high_s16(v1429);
          v1409.i64[0] = v1434.u32[0];
          v1409.i64[1] = v1434.u32[1];
          v1435 = v1409;
          v1409.i64[0] = v1427.u32[2];
          v1409.i64[1] = v1427.u32[3];
          v1436 = v1409;
          v1409.i64[0] = v1430.u32[2];
          v1409.i64[1] = v1430.u32[3];
          v1437 = v1409;
          v1409.i64[0] = v1432.u32[2];
          v1409.i64[1] = v1432.u32[3];
          v1438 = v1409;
          v1409.i64[0] = v1434.u32[2];
          v1409.i64[1] = v1434.u32[3];
          v1439 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v1438);
          v1440 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v1428), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v1410));
          v1441 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v1431), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v1413));
          v1442 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v1433), v1424);
          v1443 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v1435), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v1417));
          v1444 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v1436), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v1418));
          v1445 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v1437), v1423);
          v1446 = vorrq_s8(v1439, v1422);
          v1447 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v1409), v1421);
          v1448 = vceqzq_s8(*(int8x16_t *)((char *)v1123 + 360));
          v1449 = vmovl_s8(*(int8x8_t *)v1448.i8);
          v1450 = vmovl_high_s16(v1449);
          v1409.i64[0] = v1450.i32[2];
          v1409.i64[1] = v1450.i32[3];
          v1451 = v1409;
          v1452 = vmovl_high_s8(v1448);
          v1453 = vmovl_high_s16(v1452);
          v1409.i64[0] = v1453.i32[2];
          v1409.i64[1] = v1453.i32[3];
          v1454 = v1409;
          v1455 = vmovl_s16(*(int16x4_t *)v1449.i8);
          v1409.i64[0] = v1455.i32[2];
          v1409.i64[1] = v1455.i32[3];
          v1456 = v1409;
          v1457 = vmovl_s16(*(int16x4_t *)v1452.i8);
          v1409.i64[0] = v1457.i32[2];
          v1409.i64[1] = v1457.i32[3];
          v1458 = v1409;
          v1409.i64[0] = v1450.i32[0];
          v1409.i64[1] = v1450.i32[1];
          v1459 = v1409;
          v1409.i64[0] = v1453.i32[0];
          v1409.i64[1] = v1453.i32[1];
          v1460 = v1409;
          v1409.i64[0] = v1455.i32[0];
          v1409.i64[1] = v1455.i32[1];
          v1461 = v1409;
          v1409.i64[0] = v1457.i32[0];
          v1409.i64[1] = v1457.i32[1];
          v1462 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v1409);
          v1463 = vceqzq_s8(*(int8x16_t *)((char *)v1123 + 376));
          v1464 = vmovl_high_s8(v1463);
          v1465 = vmovl_s16(*(int16x4_t *)v1464.i8);
          v1409.i64[0] = v1465.i32[0];
          v1409.i64[1] = v1465.i32[1];
          v1466 = v1409;
          v1467 = vmovl_s8(*(int8x8_t *)v1463.i8);
          v1468 = vmovl_s16(*(int16x4_t *)v1467.i8);
          v1409.i64[0] = v1468.i32[0];
          v1409.i64[1] = v1468.i32[1];
          v1469 = v1409;
          v1470 = vmovl_high_s16(v1464);
          v1409.i64[0] = v1470.i32[0];
          v1409.i64[1] = v1470.i32[1];
          v1471 = v1409;
          v1472 = vmovl_high_s16(v1467);
          v1409.i64[0] = v1472.i32[0];
          v1409.i64[1] = v1472.i32[1];
          v1473 = v1409;
          v1409.i64[0] = v1465.i32[2];
          v1409.i64[1] = v1465.i32[3];
          v1474 = v1409;
          v1409.i64[0] = v1468.i32[2];
          v1409.i64[1] = v1468.i32[3];
          v1475 = v1409;
          v1409.i64[0] = v1470.i32[2];
          v1409.i64[1] = v1470.i32[3];
          v1476 = v1409;
          v1409.i64[0] = v1472.i32[2];
          v1409.i64[1] = v1472.i32[3];
          *((_QWORD *)v1123 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v1469), vbicq_s8((int8x16_t)xmmword_19FFB3170, v1461)), v1441), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v1466), v1462), v1440)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v1473), vbicq_s8((int8x16_t)xmmword_19FFB3190, v1459)), v1443), vorrq_s8(vorrq_s8(
                                                           vbicq_s8((int8x16_t)xmmword_19FFB3230, v1471),
                                                           vbicq_s8((int8x16_t)xmmword_19FFB3180, v1460)),
                                                         v1442))),
                                        (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v1475), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v1456)), v1445), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v1474), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v1458)), v1444)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v1409), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v1451)), v1447), vorrq_s8(vorrq_s8(
                                                           vbicq_s8((int8x16_t)xmmword_19FFB31F0, v1476),
                                                           vbicq_s8((int8x16_t)xmmword_19FFB31C0, v1454)),
                                                         v1446)))));
          *((_BYTE *)v1123 + 312) = 1;
          v1477 = (std::__shared_weak_count *)*((_QWORD *)v976 + 1);
          *(_QWORD *)v976 = v1397;
          *((_QWORD *)v976 + 1) = v1123;
          if (v1477)
          {
            v1478 = (unint64_t *)&v1477->__shared_owners_;
            do
              v1479 = __ldaxr(v1478);
            while (__stlxr(v1479 - 1, v1478));
            if (!v1479)
            {
              ((void (*)(std::__shared_weak_count *))v1477->__on_zero_shared)(v1477);
              std::__shared_weak_count::__release_weak(v1477);
            }
          }
          v1480 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v1481 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v1482 = __ldaxr(v1481);
            while (__stlxr(v1482 - 1, v1481));
            if (!v1482)
            {
              ((void (*)(std::__shared_weak_count *))v1480->__on_zero_shared)(v1480);
              std::__shared_weak_count::__release_weak(v1480);
            }
          }
          *((_QWORD *)v976 + 2) = 0;
          *((_QWORD *)v976 + 3) = 0;
          v1483 = operator new();
          *(_DWORD *)(v1483 + 32) = 0;
          *(_QWORD *)(v1483 + 16) = 0;
          *(_QWORD *)(v1483 + 24) = 0;
          *(_QWORD *)v1483 = &off_1E42B5DE8;
          *(_QWORD *)(v1483 + 8) = 0;
          *(_QWORD *)(v1483 + 36) = 65537;
          *(_DWORD *)(v1483 + 44) = 0;
          *(_QWORD *)(v1483 + 48) = 1;
          *(_WORD *)(v1483 + 56) = 0;
          *(_BYTE *)(v1483 + 58) = 3;
          *(_QWORD *)(v1483 + 67) = 0;
          *(_QWORD *)(v1483 + 59) = 0;
          *(_BYTE *)(v1483 + 75) = 0;
          *(_QWORD *)(v1483 + 132) = 0;
          *(_QWORD *)(v1483 + 124) = 0;
          *(_WORD *)(v1483 + 188) = 257;
          *(_QWORD *)(v1483 + 192) = 0;
          *(_QWORD *)(v1483 + 200) = 0;
          *(_BYTE *)(v1483 + 208) = 0;
          v1484 = *((_QWORD *)v976 + 2);
          *((_QWORD *)v976 + 2) = v1483;
          if (v1484)
            (*(void (**)(uint64_t))(*(_QWORD *)v1484 + 8))(v1484);
          v1485 = operator new();
          *(_DWORD *)(v1485 + 32) = 0;
          *(_QWORD *)(v1485 + 16) = 0;
          *(_QWORD *)(v1485 + 24) = 0;
          *(_QWORD *)v1485 = &off_1E42B5DE8;
          *(_QWORD *)(v1485 + 8) = 0;
          *(_QWORD *)(v1485 + 36) = 65537;
          *(_DWORD *)(v1485 + 44) = 0;
          *(_QWORD *)(v1485 + 48) = 0xFF0000000400;
          *(_WORD *)(v1485 + 56) = 0;
          *(_BYTE *)(v1485 + 58) = 3;
          *(_QWORD *)(v1485 + 67) = 0;
          *(_QWORD *)(v1485 + 59) = 0;
          *(_BYTE *)(v1485 + 75) = 0;
          *(_QWORD *)(v1485 + 132) = 0;
          *(_QWORD *)(v1485 + 124) = 0;
          *(_WORD *)(v1485 + 188) = 257;
          *(_QWORD *)(v1485 + 192) = 0;
          *(_QWORD *)(v1485 + 200) = 0;
          *(_BYTE *)(v1485 + 208) = 0;
          v1486 = *((_QWORD *)v976 + 3);
          *((_QWORD *)v976 + 3) = v1485;
          if (v1486)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v1486 + 8))(v1486);
            v1485 = *((_QWORD *)v976 + 3);
          }
          *(_BYTE *)(v1485 + 208) = 1;
          *((_QWORD *)v976 + 4) = 0;
          *((_QWORD *)v976 + 5) = 0;
          v1487 = __p[0];
          v1488 = __p[1];
          if (__p[1])
          {
            v1489 = (unint64_t *)((char *)__p[1] + 8);
            do
              v1490 = __ldxr(v1489);
            while (__stxr(v1490 + 1, v1489));
            v1491 = (std::__shared_weak_count *)*((_QWORD *)v976 + 5);
            *((_QWORD *)v976 + 4) = v1487;
            *((_QWORD *)v976 + 5) = v1488;
            if (v1491)
            {
              v1492 = (unint64_t *)&v1491->__shared_owners_;
              do
                v1493 = __ldaxr(v1492);
              while (__stlxr(v1493 - 1, v1492));
              if (!v1493)
              {
                ((void (*)(std::__shared_weak_count *))v1491->__on_zero_shared)(v1491);
                std::__shared_weak_count::__release_weak(v1491);
              }
            }
          }
          else
          {
            *((void **)v976 + 4) = __p[0];
            *((_QWORD *)v976 + 5) = 0;
          }
          v1494 = *(_QWORD **)(v1113 + 32);
          *(_QWORD *)(v1113 + 32) = v976;
          if (v1494)
            std::default_delete<md::RouteLineArrowSharedResources>::operator()[abi:nn180100](v1494);
          v1495 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v1496 = (unint64_t *)((char *)__p[1] + 8);
            do
              v1497 = __ldaxr(v1496);
            while (__stlxr(v1497 - 1, v1496));
            if (!v1497)
            {
              ((void (*)(std::__shared_weak_count *))v1495->__on_zero_shared)(v1495);
              std::__shared_weak_count::__release_weak(v1495);
            }
          }
          v1498 = *(std::__shared_weak_count **)&v2221[8];
          if (*(_QWORD *)&v2221[8])
          {
            v1499 = (unint64_t *)(*(_QWORD *)&v2221[8] + 8);
            do
              v1500 = __ldaxr(v1499);
            while (__stlxr(v1500 - 1, v1499));
            if (!v1500)
            {
              ((void (*)(std::__shared_weak_count *))v1498->__on_zero_shared)(v1498);
              std::__shared_weak_count::__release_weak(v1498);
            }
          }

          v1347 = (const md::LayoutContext *)a2;
LABEL_2111:
          v1501 = *a3;
          md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v2200, v1347);
          *(_QWORD *)v2204 = v1501 + 464;
          *(_WORD *)&v2204[8] = v2057;
          *(_QWORD *)&v2204[12] = _D14;
          *(_QWORD *)&v2204[24] = 0;
          LOWORD(v2205) = 0;
          v2207[4] = 0;
          v2208 = 0;
          memset(v2207, 0, 13);
          *(_QWORD *)&v2206[4] = 0;
          LOBYTE(v2209) = 1;
          *(_QWORD *)((char *)&v2209 + 1) = 0;
          *((_QWORD *)&v2209 + 1) = 0;
          md::LayoutContext::frameState(v1347);
          v2210 = *(_QWORD *)(v1502 + 624);
          v2211 = 1065353216;
          v1503 = *a3;
          v1504 = *(_DWORD *)(*a3 + 528);
          LODWORD(v2211) = *(_DWORD *)(*a3 + 204);
          HIDWORD(v2211) = v1504;
          v1505 = *(double *)(v1503 + 168);
          *(float *)&v2204[16] = v1505;
          *(_QWORD *)&v2204[24] = -1;
          LOBYTE(v2205) = **((_BYTE **)v1347 + 92);
          v1506 = *(_QWORD *)(v1503 + 504);
          if (v1506)
            v1507 = v1506 + 8;
          else
            v1507 = 0;
          v2212 = v1507;
          v1509 = *(uint64_t **)(v1503 + 288);
          v1508 = *(uint64_t **)(v1503 + 296);
          if (v1509 == v1508)
            goto LABEL_2163;
          v1510 = 0;
          v1511 = 0xFFFFFFFFLL;
          v2109 = *(uint64_t **)(v1503 + 296);
          while (2)
          {
            v1515 = *v1509;
            v1516 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32);
            if (!(*(_QWORD *)(*v1509 + 160) | v1516))
              goto LABEL_2153;
            v2120 = v1511;
            *(_QWORD *)(v1515 + 160) = v1516;
            v1518 = *(uint64_t **)(v1515 + 8);
            v1517 = *(uint64_t **)(v1515 + 16);
LABEL_2123:
            if (v1518 == v1517)
            {
              v1515 = *v1509;
              v1508 = v2109;
              v1511 = v2120;
LABEL_2153:
              v1514 = v1510;
              if (*(unsigned __int8 *)(v1515 + 152) != llroundf(*(float *)(*a3 + 528)))
              {
                md::RouteLineArrowLayer::layout((md::RouteLineArrowLayer *)v1515, (const md::RouteLineArrowContext *)v2200);
                v1535 = *v1509;
                *(_QWORD *)buf = &off_1E42D45B8;
                *(_QWORD *)&buf[8] = v2105;
                *(_QWORD *)&buf[24] = buf;
                md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v1535 + 8), *(_QWORD **)(v1535 + 16), buf, v1536);
                v1512 = *(_QWORD **)&buf[24];
                if (*(_BYTE **)&buf[24] == buf)
                {
                  v1512 = buf;
                  v1513 = 4;
                  goto LABEL_2117;
                }
                if (*(_QWORD *)&buf[24])
                {
                  v1513 = 5;
LABEL_2117:
                  (*(void (**)(void))(*v1512 + 8 * v1513))();
                }
                v1514 = v1511;
              }
              v1510 = (v1510 + 1);
              ++v1509;
              v1511 = v1514;
              if (v1509 != v1508)
                continue;
              if ((v1514 & 0x80000000) == 0)
              {
                md::RouteLineArrowLayer::layout(*(md::RouteLineArrowLayer **)(*(_QWORD *)(*a3 + 288) + 8 * v1514), (const md::RouteLineArrowContext *)v2200);
                v1537 = *(_QWORD *)(*(_QWORD *)(*a3 + 288) + 8 * v1514);
                *(_QWORD *)buf = &off_1E42D45B8;
                *(_QWORD *)&buf[8] = v2105;
                *(_QWORD *)&buf[24] = buf;
                md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(*(_QWORD **)(v1537 + 8), *(_QWORD **)(v1537 + 16), buf, v1538);
                v1539 = *(_QWORD **)&buf[24];
                if (*(_BYTE **)&buf[24] == buf)
                {
                  v1540 = 4;
                  v1539 = buf;
LABEL_2162:
                  (*(void (**)(void))(*v1539 + 8 * v1540))();
                }
                else if (*(_QWORD *)&buf[24])
                {
                  v1540 = 5;
                  goto LABEL_2162;
                }
              }
LABEL_2163:

              v1541 = *(std::__shared_weak_count **)&v2207[1];
              if (*(_QWORD *)&v2207[1])
              {
                v1542 = (unint64_t *)(*(_QWORD *)&v2207[1] + 8);
                do
                  v1543 = __ldaxr(v1542);
                while (__stlxr(v1543 - 1, v1542));
                if (!v1543)
                {
                  ((void (*)(std::__shared_weak_count *))v1541->__on_zero_shared)(v1541);
                  std::__shared_weak_count::__release_weak(v1541);
                }
              }
              if (!*((_BYTE *)v2136 + 24))
              {
                v1342 = *a3;
                goto LABEL_2170;
              }
              goto LABEL_2297;
            }
            break;
          }
          v1519 = *v1518;
          v5 = *(_QWORD *)(*(_QWORD *)(*v1518 + 8) + 160);
          v1520 = *(_QWORD **)(*v1518 + 296);
          v1522 = *(void (***)(void))v5;
          v1521 = *(std::__shared_weak_count **)(v5 + 8);
          if (v1521)
          {
            v1523 = (unint64_t *)&v1521->__shared_owners_;
            do
              v1524 = __ldxr(v1523);
            while (__stxr(v1524 + 1, v1523));
          }
          if (!v1522 || *(_QWORD *)v1522[5] != v1520[1])
          {
            v1525 = (std::__shared_weak_count *)v1520[3];
            v1520[2] = 0;
            v1520[3] = 0;
            if (v1525)
            {
              v1526 = (unint64_t *)&v1525->__shared_owners_;
              do
                v1527 = __ldaxr(v1526);
              while (__stlxr(v1527 - 1, v1526));
              goto LABEL_2144;
            }
            goto LABEL_2145;
          }
          v1528 = (void (**)(void))v1520[2];
          if (v1528)
            v1529 = v1528 == v1522;
          else
            v1529 = 1;
          if (!v1529)
            ggl::PipelineSetup::resetData((uint64_t)v1520);
          if (v1521)
          {
            v1530 = (unint64_t *)&v1521->__shared_owners_;
            do
              v1531 = __ldxr(v1530);
            while (__stxr(v1531 + 1, v1530));
          }
          v1525 = (std::__shared_weak_count *)v1520[3];
          v1520[2] = v1522;
          v1520[3] = v1521;
          if (!v1525)
            goto LABEL_2145;
          v1532 = (unint64_t *)&v1525->__shared_owners_;
          do
            v1527 = __ldaxr(v1532);
          while (__stlxr(v1527 - 1, v1532));
LABEL_2144:
          if (!v1527)
          {
            ((void (*)(std::__shared_weak_count *))v1525->__on_zero_shared)(v1525);
            std::__shared_weak_count::__release_weak(v1525);
            if (v1521)
            {
LABEL_2146:
              v1533 = (unint64_t *)&v1521->__shared_owners_;
              do
                v1534 = __ldaxr(v1533);
              while (__stlxr(v1534 - 1, v1533));
              if (!v1534)
              {
                ((void (*)(std::__shared_weak_count *))v1521->__on_zero_shared)(v1521);
                std::__shared_weak_count::__release_weak(v1521);
              }
            }
          }
          else
          {
LABEL_2145:
            if (v1521)
              goto LABEL_2146;
          }
          **(_QWORD **)(*(_QWORD *)(v1519 + 296) + 96) = *(_QWORD *)(v5 + 32);
          ++v1518;
          goto LABEL_2123;
        }
        (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)&buf[24] + 48))(*(_QWORD *)&buf[24], v2221, v2200);
      }
      v1765 = *(_QWORD **)&buf[24];
      if (*(_BYTE **)&buf[24] == buf)
      {
        v1765 = buf;
        v1763 = 4;
        v1762 = v2119;
LABEL_2519:
        (*(void (**)(void))(*v1765 + 8 * v1763))();
      }
      else
      {
        v1762 = v2119;
        if (*(_QWORD *)&buf[24])
        {
          v1763 = 5;
          goto LABEL_2519;
        }
      }
      if (++v1762 == v2110)
        break;
      continue;
    }
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v1797 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v1797, "highlightRouteLineSnappingStatus"))
    goto LABEL_2844;
  v2046 = *v2047;
  v1798 = objc_msgSend(v2046, "shaderLibrary");
  v1799 = *(uint64_t **)(*a3 + 368);
  v2062 = v1797;
  if (v1799)
  {
    ggl::FragmentedPool<ggl::RenderItem>::pushAll(v1799);
    ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*a3 + 376));
    ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*a3 + 384));
    goto LABEL_2561;
  }
  v1804 = *(_QWORD *)(v1798 + 80);
  v1805 = *(std::__shared_weak_count **)(v1804 + 400);
  *(_QWORD *)&v2226 = *(_QWORD *)(v1804 + 392);
  *((_QWORD *)&v2226 + 1) = v1805;
  if (v1805)
  {
    v1806 = (unint64_t *)&v1805->__shared_owners_;
    do
      v1807 = __ldxr(v1806);
    while (__stxr(v1807 + 1, v1806));
  }
  *(_QWORD *)v2201 = 0;
  *(_QWORD *)&v2200[24] = 0;
  *(_DWORD *)&v2201[8] = 0;
  v2200[0] = 1;
  *(_OWORD *)&v2200[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v2200[20] = 7;
  v2201[12] = 15;
  v1808 = *(id *)(*(_QWORD *)(a1 + 40) + 104);
  v1809 = (_OWORD *)objc_msgSend(v1808, "format");
  v1810 = operator new(0x198uLL);
  v1810[1] = 0;
  v1810[2] = 0;
  *v1810 = &off_1E42E4508;
  *(_OWORD *)buf = *v1809;
  *(_OWORD *)&buf[16] = v1809[1];
  *(_QWORD *)v2221 = ggl::Debug::BasePipelineState::BasePipelineState((uint64_t)(v1810 + 3), &v2226, (uint64_t)v2200, buf);
  *(_QWORD *)&v2221[8] = v1810;

  v976 = (const md::LayoutContext *)a2;
  if (v1805)
  {
    v1811 = (unint64_t *)&v1805->__shared_owners_;
    do
      v1812 = __ldaxr(v1811);
    while (__stlxr(v1812 - 1, v1811));
    if (!v1812)
    {
      ((void (*)(std::__shared_weak_count *))v1805->__on_zero_shared)(v1805);
      std::__shared_weak_count::__release_weak(v1805);
    }
  }
  v1813 = (unint64_t *)operator new();
  v1814 = v1813;
  v1815 = *(_OWORD *)v2221;
  if (*(_QWORD *)&v2221[8])
  {
    v1816 = (unint64_t *)(*(_QWORD *)&v2221[8] + 8);
    do
      v1817 = __ldxr(v1816);
    while (__stxr(v1817 + 1, v1816));
  }
  *(_QWORD *)v2242 = &off_1E42CD9B8;
  *(_OWORD *)&v2242[8] = v1815;
  v2199[3] = 0;
  v2199[2] = 0;
  v2243 = v2242;
  v2238 = &off_1E42D7550;
  v2241 = (uint64_t *)&v2238;
  ggl::FragmentedPool<ggl::Debug::BasePipelineSetup>::FragmentedPool(v1813, (uint64_t)v2242, (uint64_t)&v2238);
  v1818 = *(_QWORD *)(*a3 + 368);
  *(_QWORD *)(*a3 + 368) = v1814;
  if (v1818)
  {
    v1819 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1818);
    MEMORY[0x1A1AF4E00](v1819, 0x10A0C40D234DDC7);
  }
  v1820 = (uint64_t (***)())v2241;
  if (v2241 == (uint64_t *)&v2238)
  {
    v1821 = 4;
    v1820 = &v2238;
LABEL_2599:
    (*v1820)[v1821]();
  }
  else if (v2241)
  {
    v1821 = 5;
    goto LABEL_2599;
  }
  v1827 = v2243;
  if (v2243 == v2242)
  {
    v1828 = 4;
    v1827 = v2242;
LABEL_2604:
    (*(void (**)(void))(*v1827 + 8 * v1828))();
  }
  else if (v2243)
  {
    v1828 = 5;
    goto LABEL_2604;
  }
  v1829 = operator new();
  *(_DWORD *)(v1829 + 32) = 0;
  *(_QWORD *)(v1829 + 16) = 0;
  *(_QWORD *)(v1829 + 24) = 0;
  *(_QWORD *)v1829 = &off_1E42B5DE8;
  *(_QWORD *)(v1829 + 8) = 0;
  *(_QWORD *)(v1829 + 36) = 65537;
  *(_DWORD *)(v1829 + 44) = 0;
  *(_QWORD *)(v1829 + 48) = 1;
  *(_WORD *)(v1829 + 56) = 0;
  *(_BYTE *)(v1829 + 58) = 3;
  *(_QWORD *)(v1829 + 67) = 0;
  *(_QWORD *)(v1829 + 59) = 0;
  *(_BYTE *)(v1829 + 75) = 0;
  *(_QWORD *)(v1829 + 132) = 0;
  *(_QWORD *)(v1829 + 124) = 0;
  *(_WORD *)(v1829 + 188) = 257;
  *(_QWORD *)(v1829 + 192) = 0;
  *(_QWORD *)(v1829 + 200) = 0;
  *(_BYTE *)(v1829 + 208) = 0;
  v1830 = *(_QWORD *)(*a3 + 360);
  *(_QWORD *)(*a3 + 360) = v1829;
  if (v1830)
    (*(void (**)(uint64_t))(*(_QWORD *)v1830 + 8))(v1830);
  v1831 = *(_QWORD *)(*a3 + 360);
  *(_BYTE *)(v1831 + 58) = 2;
  *(_BYTE *)(v1831 + 56) = 0;
  v1832 = (unint64_t *)operator new();
  v2236[0] = (md::SharedResource *)&off_1E42CDA00;
  v2237 = v2236;
  v2234[0] = (uint64_t)&off_1E42D60C8;
  v2235 = v2234;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v1832, (uint64_t)v2236, (uint64_t)v2234);
  v1833 = *(_QWORD *)(*a3 + 376);
  *(_QWORD *)(*a3 + 376) = v1832;
  if (v1833)
  {
    v1834 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1833);
    MEMORY[0x1A1AF4E00](v1834, 0x10A0C40D234DDC7);
  }
  v1835 = v2235;
  if (v2235 == v2234)
  {
    v1836 = 4;
    v1835 = v2234;
LABEL_2613:
    (*(void (**)(void))(*v1835 + 8 * v1836))();
  }
  else if (v2235)
  {
    v1836 = 5;
    goto LABEL_2613;
  }
  v1837 = v2237;
  if (v2237 == v2236)
  {
    v1838 = 4;
    v1837 = v2236;
LABEL_2618:
    (*((void (**)(void))*v1837 + v1838))();
  }
  else if (v2237)
  {
    v1838 = 5;
    goto LABEL_2618;
  }
  v1839 = (unint64_t *)operator new();
  v2232[0] = &off_1E42CDA48;
  v2233 = v2232;
  v2230[0] = &off_1E42D6080;
  v2231 = v2230;
  ggl::FragmentedPool<ggl::CommonMesh::Pos4Mesh>::FragmentedPool(v1839, (uint64_t)v2232, (uint64_t)v2230);
  v1840 = *(_QWORD *)(*a3 + 384);
  *(_QWORD *)(*a3 + 384) = v1839;
  if (v1840)
  {
    v1841 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1840);
    MEMORY[0x1A1AF4E00](v1841, 0x10A0C40D234DDC7);
  }
  v1842 = v2231;
  if (v2231 == v2230)
  {
    v1843 = 4;
    v1842 = v2230;
LABEL_2625:
    (*(void (**)(void))(*v1842 + 8 * v1843))();
  }
  else if (v2231)
  {
    v1843 = 5;
    goto LABEL_2625;
  }
  v1844 = v2233;
  if (v2233 == v2232)
  {
    v1845 = 4;
    v1844 = v2232;
LABEL_2630:
    (*(void (**)(void))(*v1844 + 8 * v1845))();
  }
  else if (v2233)
  {
    v1845 = 5;
    goto LABEL_2630;
  }
  if (*((_QWORD *)&v1815 + 1))
  {
    v1846 = (unint64_t *)(*((_QWORD *)&v1815 + 1) + 8);
    do
      v1847 = __ldaxr(v1846);
    while (__stlxr(v1847 - 1, v1846));
    if (!v1847)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1815 + 1) + 16))(*((_QWORD *)&v1815 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1815 + 1));
    }
  }
LABEL_2561:
  v1800 = (_QWORD *)*((_QWORD *)v976 + 1);
  v1801 = (int8x8_t)v1800[1];
  if (!*(_QWORD *)&v1801)
    goto LABEL_2638;
  v1802 = (uint8x8_t)vcnt_s8(v1801);
  v1802.i16[0] = vaddlv_u8(v1802);
  if (v1802.u32[0] > 1uLL)
  {
    v1803 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v1801 <= 0x1AF456233693CD46uLL)
      v1803 = 0x1AF456233693CD46uLL % *(_QWORD *)&v1801;
  }
  else
  {
    v1803 = (*(_QWORD *)&v1801 - 1) & 0x1AF456233693CD46;
  }
  v1822 = *(_QWORD **)(*v1800 + 8 * v1803);
  if (!v1822)
    goto LABEL_2638;
  v1823 = (_QWORD *)*v1822;
  if (!v1823)
    goto LABEL_2638;
  if (v1802.u32[0] < 2uLL)
  {
    v1824 = *(_QWORD *)&v1801 - 1;
    while (1)
    {
      v1826 = v1823[1];
      if (v1826 == 0x1AF456233693CD46)
      {
        if (v1823[2] == 0x1AF456233693CD46)
          goto LABEL_2636;
      }
      else if ((v1826 & v1824) != v1803)
      {
        goto LABEL_2638;
      }
      v1823 = (_QWORD *)*v1823;
      if (!v1823)
        goto LABEL_2638;
    }
  }
  while (2)
  {
    v1825 = v1823[1];
    if (v1825 != 0x1AF456233693CD46)
    {
      if (v1825 >= *(_QWORD *)&v1801)
        v1825 %= *(_QWORD *)&v1801;
      if (v1825 != v1803)
        goto LABEL_2638;
      goto LABEL_2587;
    }
    if (v1823[2] != 0x1AF456233693CD46)
    {
LABEL_2587:
      v1823 = (_QWORD *)*v1823;
      if (!v1823)
        goto LABEL_2638;
      continue;
    }
    break;
  }
LABEL_2636:
  v1848 = v1823[5];
  if (*(_QWORD *)(v1848 + 8) == 0x1AF456233693CD46)
  {
    v1849 = *(_QWORD *)(v1848 + 32);
    goto LABEL_2639;
  }
LABEL_2638:
  v1849 = 0;
LABEL_2639:
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4812000000;
  *(_QWORD *)&buf[24] = __Block_byref_object_copy__40;
  *(_QWORD *)v2217 = __Block_byref_object_dispose__41;
  *(_QWORD *)&v2217[32] = 0;
  *(_QWORD *)&v2217[24] = 0;
  *(_QWORD *)&v2217[8] = "";
  *(_QWORD *)&v2217[16] = &v2217[24];
  v2199[1] = 0;
  v2199[0] = 0;
  v2198 = v2199;
  objc_msgSend(*(id *)(*a3 + 160), "overlay");
  v1850 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1850, "composedRoute");
  v1851 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)v2221 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v2221[8] = 3221225472;
  *(_QWORD *)&v2221[16] = ___ZN2md16RouteRenderLayer34layoutDebugRouteLineSnappingStatusERKNSt3__110shared_ptrINS_16RouteLineOverlayEEERKN3ggl15StandardLibraryERKNS_13LayoutContextEPNS7_13CommandBufferE_block_invoke;
  *(_QWORD *)&v2221[24] = &unk_1E42EE138;
  *(_QWORD *)&v2221[32] = buf;
  *(_QWORD *)&v2221[40] = a3;
  *(_QWORD *)&v2221[48] = v1849;
  *(_QWORD *)&v2222 = v2105;
  objc_msgSend(v1851, "forEachSnappedPath:", v2221);

  v2229 = 0u;
  v2228 = 0u;
  v2227 = 0u;
  v2226 = 0u;
  objc_msgSend(*(id *)(*a3 + 160), "overlay");
  v1852 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1852, "composedRoute");
  v1853 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1853, "sections");
  obja = (id)objc_claimAutoreleasedReturnValue();

  v1854 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v2226, v2200, 16);
  if (!v1854)
  {

    goto LABEL_2843;
  }
  v2060 = 0;
  v1855 = 0;
  v1856 = (float64x2_t *)(v1849 + 808);
  v2054 = *(_QWORD *)v2227;
  __asm { FMOV            V3.4S, #1.0 }
  v2069 = _Q3;
  while (2)
  {
    v2056 = v1854;
    v1858 = 0;
    while (2)
    {
      if (*(_QWORD *)v2227 != v2054)
        objc_enumerationMutation(obja);
      v1859 = *(void **)(*((_QWORD *)&v2226 + 1) + 8 * v1858);
      v2058 = v1858;
      if (objc_msgSend(v1859, "pointCount"))
      {
        v1860 = *(_QWORD *)&buf[8];
        v1861 = *(uint64_t **)(*(_QWORD *)&buf[8] + 56);
        if (!v1861)
          goto LABEL_2658;
        v1862 = *(_QWORD *)&buf[8] + 56;
        v1863 = *(_QWORD **)(*(_QWORD *)&buf[8] + 56);
        do
        {
          v1864 = v1863[4];
          v1865 = v1864 >= (unint64_t)v1859;
          if (v1864 >= (unint64_t)v1859)
            v1866 = v1863;
          else
            v1866 = v1863 + 1;
          if (v1865)
            v1862 = (uint64_t)v1863;
          v1863 = (_QWORD *)*v1866;
        }
        while (*v1866);
        if (v1862 == *(_QWORD *)&buf[8] + 56 || (unint64_t)v1859 < *(_QWORD *)(v1862 + 32))
        {
LABEL_2658:
          v1867 = objc_msgSend(v1859, "pointCount") - 1;
          if (v1855 >= (int *)v2060)
          {
            v1870 = (v2060 - (char *)v1855) >> 2;
            if (v1870 <= 1)
              v1870 = 1;
            if ((unint64_t)(v2060 - (char *)v1855) >= 0x7FFFFFFFFFFFFFF8)
              v1871 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v1871 = v1870;
            if (v1871 >> 61)
LABEL_2863:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v1872 = (int *)operator new(8 * v1871);
            v2060 = (char *)&v1872[2 * v1871];
            *v1872 = 0;
            v1872[1] = v1867;
            v1868 = v1872 + 2;
            v1869 = v1872;
            if (v1855)
              operator delete(v1855);
          }
          else
          {
            *v1855 = 0;
            v1855[1] = v1867;
            v1868 = v1855 + 2;
            v1869 = v1855;
          }
LABEL_2755:
          v1937 = v1869;
          v2066 = v1869;
          while (1)
          {
            v1940 = *v1937;
            v1939 = v1937[1];
            v1941 = v1939 - v1940;
            if ((v1939 - v1940) >= 2)
              break;
LABEL_2759:
            v1937 += 2;
            if (v1937 == v1868)
            {
              v1855 = v1869;
              goto LABEL_2643;
            }
          }
          v1942 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*a3 + 384));
          v1943 = **(_QWORD **)(v1942 + 64);
          v1944 = *(_QWORD *)(v1943 + 72);
          if (*(_QWORD *)(v1943 + 80) != v1944)
          {
            *(_QWORD *)(v1943 + 80) = v1944;
            v1945 = *(std::__shared_weak_count **)(v1943 + 32);
            *(_QWORD *)(v1943 + 24) = 0;
            *(_QWORD *)(v1943 + 32) = 0;
            if (v1945)
            {
              v1946 = (unint64_t *)&v1945->__shared_owners_;
              do
                v1947 = __ldaxr(v1946);
              while (__stlxr(v1947 - 1, v1946));
              if (!v1947)
              {
                ((void (*)(std::__shared_weak_count *))v1945->__on_zero_shared)(v1945);
                std::__shared_weak_count::__release_weak(v1945);
              }
            }
            *(_QWORD *)(v1943 + 120) = 0;
            *(_DWORD *)(v1943 + 112) = 0;
            v1948 = *(_QWORD *)(v1943 + 80) - *(_QWORD *)(v1943 + 72);
            *(_QWORD *)(v1943 + 40) = 0;
            *(_QWORD *)(v1943 + 48) = v1948;
            *(_QWORD *)(v1943 + 56) = 0;
            *(_QWORD *)(v1943 + 64) = v1948;
          }
          objc_msgSend(v1859, "vkBounds");
          v2099 = v1949;
          v1951 = v1950;
          v1953 = v1952;
          v2096 = v1954;
          v2071 = v1856[5];
          v2075 = v1856[4];
          v2080 = v1856[2];
          v2084 = *v1856;
          v2087 = v1856[3];
          v2091 = v1856[1];
          v2111 = v1856[6];
          v2122 = v1856[7];
          v1955 = objc_msgSend(v1859, "points");
          v1956 = **(_QWORD **)(v1942 + 64);
          v1957 = *(_QWORD *)(v1956 + 8) * v1941;
          v1958 = *(_QWORD *)(v1956 + 72);
          v1959 = *(_QWORD *)(v1956 + 80) - v1958;
          if (v1957 != v1959)
          {
            if (v1957 <= v1959)
            {
              if (v1957 < v1959)
                *(_QWORD *)(v1956 + 80) = v1958 + v1957;
            }
            else
            {
              std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v1956 + 72, v1957 - v1959);
            }
            v1960 = *(std::__shared_weak_count **)(v1956 + 32);
            *(_QWORD *)(v1956 + 24) = 0;
            *(_QWORD *)(v1956 + 32) = 0;
            if (v1960)
            {
              v1961 = (unint64_t *)&v1960->__shared_owners_;
              do
                v1962 = __ldaxr(v1961);
              while (__stlxr(v1962 - 1, v1961));
              if (!v1962)
              {
                ((void (*)(std::__shared_weak_count *))v1960->__on_zero_shared)(v1960);
                std::__shared_weak_count::__release_weak(v1960);
              }
            }
            *(_QWORD *)(v1956 + 120) = 0;
            *(_DWORD *)(v1956 + 112) = 0;
            v1963 = *(_QWORD *)(v1956 + 80) - *(_QWORD *)(v1956 + 72);
            *(_QWORD *)(v1956 + 40) = 0;
            *(_QWORD *)(v1956 + 48) = v1963;
            *(_QWORD *)(v1956 + 56) = 0;
            *(_QWORD *)(v1956 + 64) = v1963;
            v1956 = **(_QWORD **)(v1942 + 64);
            v1957 = *(_QWORD *)(v1956 + 8) * v1941;
          }
          __p[1] = 0;
          __p[0] = 0;
          if (v1957)
            v1964 = *(_QWORD *)(v1956 + 72);
          else
            v1964 = 0;
          *(_QWORD *)&v1965 = 0;
          *((_QWORD *)&v1965 + 1) = v1956;
          *(_OWORD *)__p = v1965;
          v1966 = (uint64_t *)(v1955 + 12 * (int)v1940);
          v2194 = 0;
          v2195 = v1957;
          v2197 = v1964;
          v2196 = 1;
          if (v1941 > 8
            && (v1964 < v1955 + 12 * (v1940 + (unint64_t)v1941) - 4
              ? (v1967 = (unint64_t)v1966 >= v1964 + 16 * v1941)
              : (v1967 = 1),
                v1967))
          {
            v1968 = v1941 & 7;
            if ((v1941 & 7) == 0)
              v1968 = 8;
            v1969 = v1941 - v1968;
            v1970 = (float *)(v1964 + 64);
            v1971 = (const float *)(v1955 + 12 * (int)v1940);
            v1972 = v1969;
            v1973 = v2069;
            do
            {
              v1974 = v1971;
              v2245 = vld3q_f32(v1974);
              v1974 += 12;
              v2245.val[2] = 0uLL;
              *(float32x4x3_t *)v2246.val[0].f32 = vld3q_f32(v1974);
              v2246.val[2] = 0uLL;
              v2246.val[3] = v2069;
              v1975 = v1970 - 16;
              vst4q_f32(v1975, *(float32x4x4_t *)(&v1973 - 3));
              vst4q_f32(v1970, v2246);
              v1970 += 32;
              v1971 += 24;
              v1972 -= 8;
            }
            while (v1972);
            v1966 = (uint64_t *)((char *)v1966 + 12 * v1969);
          }
          else
          {
            v1969 = 0;
          }
          v1976 = v1953 - v2099;
          v1977 = v1951 - v2096;
          v2072 = vmulq_n_f64(v2071, v1951 - v2096);
          v2076 = vmulq_n_f64(v2075, v1951 - v2096);
          v2123 = vmlaq_n_f64(vmlaq_n_f64(v2122, v2091, v2096), v2087, v2099);
          v2112 = vmlaq_n_f64(vmlaq_n_f64(v2111, v2084, v2096), v2080, v2099);
          v1978 = vmulq_n_f64(v2084, v1951 - v2096);
          v2097 = vmulq_n_f64(v2080, v1953 - v2099);
          v2100 = v1978;
          v2085 = vmulq_n_f64(v2091, v1977);
          v2092 = vmulq_n_f64(v2087, v1976);
          v1979 = v1941 - v1969;
          v1980 = (_QWORD *)(v1964 + 16 * v1969 + 8);
          do
          {
            v1981 = *v1966;
            v1966 = (uint64_t *)((char *)v1966 + 12);
            *(v1980 - 1) = v1981;
            *v1980 = 0x3F80000000000000;
            v1980 += 2;
            --v1979;
          }
          while (v1979);
          v1982 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*a3 + 368));
          v1983 = *(_QWORD **)(v1982 + 64);
          v1984 = (_QWORD *)v1983[2];
          v1985 = v1984[1];
          v1986 = v1984[9];
          *(float32x2_t *)v1986 = vcvt_f32_f64(v2100);
          *(float32x2_t *)(v1986 + 8) = vcvt_f32_f64(v2085);
          *(float32x2_t *)(v1986 + 16) = vcvt_f32_f64(v2097);
          *(float32x2_t *)(v1986 + 24) = vcvt_f32_f64(v2092);
          *(float32x4_t *)(v1986 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2076), v2072);
          *(float32x4_t *)(v1986 + 48) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2112), v2123);
          if (v1984[8] > v1985)
            v1985 = v1984[8];
          v1984[7] = 0;
          v1984[8] = v1985;
          v1987 = (_QWORD *)*v1983;
          v1988 = v1987[1];
          *(float32x4_t *)v1987[9] = v2069;
          if (v1987[8] > v1988)
            v1988 = v1987[8];
          v1987[7] = 0;
          v1987[8] = v1988;
          v1989 = (_QWORD *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*a3 + 376));
          v1990 = v1989;
          v1989[8] = v1942;
          v1989[4] = v1982;
          v1989[3] = *(_QWORD *)(*a3 + 360);
          v1991 = (_QWORD *)*((_QWORD *)v2105 + 10);
          v1992 = *((_QWORD *)v2105 + 11);
          if ((unint64_t)v1991 < v1992)
          {
            if (v1991)
              *v1991 = v1989;
            v1993 = v1991 + 1;
            v1994 = v2105;
            v1797 = v2062;
LABEL_2827:
            *((_QWORD *)v1994 + 10) = v1993;
            v1869 = v2066;
            if (v2197 && v1957)
            {
              v2015 = __p[1];
              if (__p[0] && *((_BYTE *)__p[1] + 17) != 2)
                (*(void (**)(void))(*(_QWORD *)__p[0] + 64))();
              v1938 = v2015[8];
              if (v1938 <= v1957)
                v1938 = v1957;
              v2015[7] = 0;
              v2015[8] = v1938;
            }
            goto LABEL_2759;
          }
          v1995 = *((_QWORD *)v2105 + 9);
          v1996 = ((uint64_t)v1991 - v1995) >> 3;
          v1997 = v1996 + 1;
          if ((unint64_t)(v1996 + 1) >> 61)
            abort();
          v1998 = v1992 - v1995;
          if (v1998 >> 2 > v1997)
            v1997 = v1998 >> 2;
          if ((unint64_t)v1998 >= 0x7FFFFFFFFFFFFFF8)
            v1999 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1999 = v1997;
          if (v1999)
          {
            v2000 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v2105 + 12) + 16))(*((_QWORD *)v2105 + 12), 8 * v1999, 8);
            v2001 = (_QWORD *)(v2000 + 8 * v1996);
            v2002 = v2000 + 8 * v1999;
            if (v2000)
              *v2001 = v1990;
          }
          else
          {
            v2002 = 0;
            v2001 = (_QWORD *)(8 * v1996);
          }
          v2004 = *((_QWORD *)v2105 + 9);
          v2003 = *((_QWORD *)v2105 + 10);
          v2005 = v2003 - v2004;
          v1797 = v2062;
          if (v2003 == v2004)
          {
            v2007 = v2001;
            v1994 = v2105;
            goto LABEL_2825;
          }
          v2006 = v2005 - 8;
          if ((unint64_t)(v2005 - 8) < 0x38)
          {
            v2007 = v2001;
          }
          else
          {
            v2007 = v2001;
            if ((unint64_t)(v2003 - (_QWORD)v2001) >= 0x20)
            {
              v2008 = (v2006 >> 3) + 1;
              v2009 = v2001 - 2;
              v2010 = (__int128 *)(v2003 - 16);
              v2011 = v2008 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v2012 = *v2010;
                *(v2009 - 1) = *(v2010 - 1);
                *v2009 = v2012;
                v2009 -= 2;
                v2010 -= 2;
                v2011 -= 4;
              }
              while (v2011);
              v2007 = &v2001[-(v2008 & 0x3FFFFFFFFFFFFFFCLL)];
              v2003 -= 8 * (v2008 & 0x3FFFFFFFFFFFFFFCLL);
              if (v2008 == (v2008 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_2824;
            }
          }
          do
          {
            v2013 = *(_QWORD *)(v2003 - 8);
            v2003 -= 8;
            *--v2007 = v2013;
          }
          while (v2003 != v2004);
LABEL_2824:
          v1994 = v2105;
          v2003 = *((_QWORD *)v2105 + 9);
LABEL_2825:
          v1993 = v2001 + 1;
          *((_QWORD *)v1994 + 9) = v2007;
          *((_QWORD *)v1994 + 10) = v2001 + 1;
          v2014 = *((_QWORD *)v1994 + 11);
          *((_QWORD *)v1994 + 11) = v2002;
          if (v2003)
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v1994 + 12) + 40))(*((_QWORD *)v1994 + 12), v2003, v2014 - v2003);
            v1994 = v2105;
          }
          goto LABEL_2827;
        }
        v1873 = *(uint64_t **)(*(_QWORD *)&buf[8] + 56);
        do
        {
          while (1)
          {
            v1874 = (uint64_t **)v1873;
            v1875 = v1873[4];
            if ((unint64_t)v1859 < v1875)
              break;
            if (v1875 >= (unint64_t)v1859)
            {
              v1880 = (uint64_t)v1874[5];
              goto LABEL_2681;
            }
            v1873 = v1874[1];
            if (!v1873)
            {
              v1876 = v1874 + 1;
              goto LABEL_2675;
            }
          }
          v1873 = *v1874;
        }
        while (*v1874);
        v1876 = v1874;
LABEL_2675:
        v1877 = (uint64_t *)operator new(0x40uLL);
        v1877[4] = (uint64_t)v1859;
        v1877[5] = 0;
        v1877[6] = 0;
        v1877[7] = 0;
        *v1877 = 0;
        v1877[1] = 0;
        v1877[2] = (uint64_t)v1874;
        *v1876 = v1877;
        v1878 = **(_QWORD **)(v1860 + 48);
        v1879 = v1877;
        if (v1878)
        {
          *(_QWORD *)(v1860 + 48) = v1878;
          v1879 = *v1876;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1860 + 56), v1879);
        ++*(_QWORD *)(v1860 + 64);
        v1860 = *(_QWORD *)&buf[8];
        v1861 = *(uint64_t **)(*(_QWORD *)&buf[8] + 56);
        v1880 = v1877[5];
        if (v1861)
        {
          while (1)
          {
LABEL_2681:
            while (1)
            {
              v1882 = (uint64_t **)v1861;
              v1883 = v1861[4];
              if ((unint64_t)v1859 >= v1883)
                break;
              v1861 = *v1882;
              v1881 = v1882;
              if (!*v1882)
                goto LABEL_2685;
            }
            if (v1883 >= (unint64_t)v1859)
              break;
            v1861 = v1882[1];
            if (!v1861)
            {
              v1881 = v1882 + 1;
              goto LABEL_2685;
            }
          }
          v1884 = (uint64_t *)v1882;
        }
        else
        {
          v1881 = (uint64_t **)(*(_QWORD *)&buf[8] + 56);
          v1882 = (uint64_t **)(*(_QWORD *)&buf[8] + 56);
LABEL_2685:
          v1884 = (uint64_t *)operator new(0x40uLL);
          v1884[4] = (uint64_t)v1859;
          v1884[5] = 0;
          v1884[6] = 0;
          v1884[7] = 0;
          *v1884 = 0;
          v1884[1] = 0;
          v1884[2] = (uint64_t)v1882;
          *v1881 = v1884;
          v1885 = **(_QWORD **)(v1860 + 48);
          v1886 = v1884;
          if (v1885)
          {
            *(_QWORD *)(v1860 + 48) = v1885;
            v1886 = *v1881;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1860 + 56), v1886);
          ++*(_QWORD *)(v1860 + 64);
        }
        v1887 = (int *)v1884[6];
        v1888 = 126 - 2 * __clz(((uint64_t)v1887 - v1880) >> 3);
        if (v1887 == (int *)v1880)
          v1889 = 0;
        else
          v1889 = v1888;
        std::__introsort<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *,false>(v1880, v1887, v1889, 1);
        v1890 = *(_QWORD *)&buf[8];
        v1892 = (uint64_t **)(*(_QWORD *)&buf[8] + 56);
        v1891 = *(uint64_t **)(*(_QWORD *)&buf[8] + 56);
        if (v1891)
        {
          while (1)
          {
            while (1)
            {
              v1893 = (uint64_t **)v1891;
              v1894 = v1891[4];
              if ((unint64_t)v1859 >= v1894)
                break;
              v1891 = *v1893;
              v1892 = v1893;
              if (!*v1893)
                goto LABEL_2699;
            }
            if (v1894 >= (unint64_t)v1859)
              break;
            v1891 = v1893[1];
            if (!v1891)
            {
              v1892 = v1893 + 1;
              goto LABEL_2699;
            }
          }
          v1895 = (uint64_t *)v1893;
        }
        else
        {
          v1893 = (uint64_t **)(*(_QWORD *)&buf[8] + 56);
LABEL_2699:
          v1895 = (uint64_t *)operator new(0x40uLL);
          v1895[4] = (uint64_t)v1859;
          v1895[5] = 0;
          v1895[6] = 0;
          v1895[7] = 0;
          *v1895 = 0;
          v1895[1] = 0;
          v1895[2] = (uint64_t)v1893;
          *v1892 = v1895;
          v1896 = **(_QWORD **)(v1890 + 48);
          v1897 = v1895;
          if (v1896)
          {
            *(_QWORD *)(v1890 + 48) = v1896;
            v1897 = *v1892;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1890 + 56), v1897);
          ++*(_QWORD *)(v1890 + 64);
        }
        v1899 = (int *)v1895[5];
        v1898 = (int *)v1895[6];
        if (v1899 != v1898)
        {
          v1900 = 0;
          v1869 = v1855;
          v2121 = (int *)v1895[6];
          while (1)
          {
            v1902 = *v1899;
            if (*v1899 < (int)v1900)
            {
              v1901 = v1900;
            }
            else
            {
              v1901 = v1899[1];
              if (v1902 > (int)v1900)
              {
                v1903 = (char *)v1855;
                v1904 = v1902 - 1;
                if (v1903 >= v2060)
                {
                  v1905 = v1869;
                  v1906 = v1903;
                  v1907 = v1903 - (char *)v1869;
                  v1908 = (v1907 >> 3) + 1;
                  if (v1908 >> 61)
                    abort();
                  v2065 = (char *)v1905;
                  v1909 = v2060 - (char *)v1905;
                  v1910 = (v2060 - (char *)v1905) >> 2;
                  if (v1910 > v1908)
                    v1908 = v1910;
                  if (v1909 >= 0x7FFFFFFFFFFFFFF8)
                    v1911 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v1911 = v1908;
                  if (v1911 >> 61)
                    goto LABEL_2863;
                  v1912 = (char *)operator new(8 * v1911);
                  v1913 = &v1912[8 * (v1907 >> 3)];
                  *(_DWORD *)v1913 = v1900;
                  *((_DWORD *)v1913 + 1) = v1904;
                  v1914 = v2065;
                  if (v1906 == v2065)
                  {
                    v1869 = (int *)&v1912[8 * (v1907 >> 3)];
                    v1797 = v2062;
                  }
                  else
                  {
                    v1915 = v1906 - 8 - v2065;
                    v1797 = v2062;
                    if (v1915 < 0x168
                      || &v1912[v1907 - 8 - (v1915 & 0xFFFFFFFFFFFFFFF8)] > &v1912[v1907 - 8]
                      || &v1906[-(v1915 & 0xFFFFFFFFFFFFFFF8) - 8] > v1906 - 8
                      || (unint64_t)(&v1906[-v1907] - v1912) < 0x20)
                    {
                      v1916 = v1906;
                      v1869 = (int *)&v1912[8 * (v1907 >> 3)];
                      v1914 = v2065;
                    }
                    else
                    {
                      v1918 = (v1915 >> 3) + 1;
                      v1916 = &v1906[-8 * (v1918 & 0x3FFFFFFFFFFFFFFCLL)];
                      v1919 = &v1912[v1907 - 16];
                      v1920 = (__int128 *)(v1906 - 16);
                      v1921 = v1918 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v1922 = *v1920;
                        *((_OWORD *)v1919 - 1) = *(v1920 - 1);
                        *(_OWORD *)v1919 = v1922;
                        v1919 -= 32;
                        v1920 -= 2;
                        v1921 -= 4;
                      }
                      while (v1921);
                      v1869 = (int *)&v1913[-8 * (v1918 & 0x3FFFFFFFFFFFFFFCLL)];
                      v1914 = v2065;
                      if (v1918 == (v1918 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_2724;
                    }
                    do
                    {
                      v1917 = *((_QWORD *)v1916 - 1);
                      v1916 -= 8;
                      *((_QWORD *)v1869 - 1) = v1917;
                      v1869 -= 2;
                    }
                    while (v1916 != v1914);
                  }
LABEL_2724:
                  v2060 = &v1912[8 * v1911];
                  v1855 = (int *)(v1913 + 8);
                  if (v1914)
                    operator delete(v1914);
                  v1898 = v2121;
                  goto LABEL_2706;
                }
                *(_DWORD *)v1903 = v1900;
                *((_DWORD *)v1903 + 1) = v1904;
                v1855 = (int *)(v1903 + 8);
              }
            }
LABEL_2706:
            v1899 += 2;
            v1900 = v1901;
            if (v1899 == v1898)
              goto LABEL_2735;
          }
        }
        LODWORD(v1901) = 0;
        v1869 = v1855;
LABEL_2735:
        if (v1901 < objc_msgSend(v1859, "pointCount"))
        {
          v1923 = v1869;
          v1924 = objc_msgSend(v1859, "pointCount");
          v1925 = v1924;
          if (v1855 < (int *)v2060)
          {
            *v1855 = v1901;
            v1855[1] = v1924;
            v1855 += 2;
            v1797 = v2062;
            goto LABEL_2754;
          }
          v1926 = (char *)((char *)v1855 - (char *)v1869);
          v1927 = ((char *)v1855 - (char *)v1923) >> 3;
          v1928 = v1927 + 1;
          if ((unint64_t)(v1927 + 1) >> 61)
            abort();
          if ((v2060 - (char *)v1923) >> 2 > v1928)
            v1928 = (v2060 - (char *)v1923) >> 2;
          if ((unint64_t)(v2060 - (char *)v1923) >= 0x7FFFFFFFFFFFFFF8)
            v1929 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v1929 = v1928;
          if (v1929 >> 61)
            goto LABEL_2863;
          v1930 = (char *)operator new(8 * v1929);
          v1931 = &v1930[8 * v1927];
          *(_DWORD *)v1931 = v1901;
          *((_DWORD *)v1931 + 1) = v1925;
          v1932 = v1923;
          if (v1855 == v1923)
          {
            v1935 = &v1930[8 * v1927];
            v1797 = v2062;
          }
          else
          {
            v1933 = (char *)(v1855 - 2) - (char *)v1923;
            v1797 = v2062;
            if (v1933 < 0x168
              || &v1926[(_QWORD)v1930 - 8 - (v1933 & 0xFFFFFFFFFFFFFFF8)] > &v1926[(_QWORD)v1930 - 8]
              || (int *)((char *)v1855 - (v1933 & 0xFFFFFFFFFFFFFFF8) - 8) > v1855 - 2
              || (unint64_t)((char *)v1923 - v1930) < 0x20)
            {
              v1934 = v1855;
              v1935 = v1931;
              v1932 = v1923;
            }
            else
            {
              v2016 = (v1933 >> 3) + 1;
              v1934 = &v1855[-2 * (v2016 & 0x3FFFFFFFFFFFFFFCLL)];
              v2017 = &v1926[(_QWORD)v1930 - 16];
              v2018 = (__int128 *)(v1855 - 4);
              v2019 = v2016 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v2020 = *v2018;
                *((_OWORD *)v2017 - 1) = *(v2018 - 1);
                *(_OWORD *)v2017 = v2020;
                v2017 -= 32;
                v2018 -= 2;
                v2019 -= 4;
              }
              while (v2019);
              v1935 = &v1931[-8 * (v2016 & 0x3FFFFFFFFFFFFFFCLL)];
              v1932 = v1923;
              if (v2016 == (v2016 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_2751;
            }
            do
            {
              v1936 = *((_QWORD *)v1934 - 1);
              v1934 -= 2;
              *((_QWORD *)v1935 - 1) = v1936;
              v1935 -= 8;
            }
            while (v1934 != v1932);
          }
LABEL_2751:
          v1855 = (int *)(v1931 + 8);
          v2060 = &v1930[8 * v1929];
          if (v1932)
            operator delete(v1932);
          v1869 = (int *)v1935;
        }
LABEL_2754:
        v1868 = v1855;
        if (v1869 != v1855)
          goto LABEL_2755;
      }
LABEL_2643:
      v1858 = v2058 + 1;
      if (v2058 + 1 != v2056)
        continue;
      break;
    }
    v1854 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v2226, v2200, 16);
    if (v1854)
      continue;
    break;
  }

  if (v1855)
    operator delete(v1855);
LABEL_2843:
  std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(v2199[0]);
  _Block_object_dispose(buf, 8);
  std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::less<GEOComposedRouteSection * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>>>::destroy(*(_QWORD **)&v2217[24]);

  v976 = (const md::LayoutContext *)a2;
LABEL_2844:
  if (objc_msgSend(v1797, "routeDebugPoints"))
  {
    v2021 = *v2047;
    md::RouteRenderLayer::layoutDebugRouteLinePoints(a1, a3, *(_QWORD *)(objc_msgSend(v2021, "shaderLibrary") + 80), (uint64_t)v976, (uint64_t)v2105);

  }
  _Block_object_dispose(&v2135, 8);

  v2023 = *(std::__shared_weak_count **)&v2161[3];
  if (*(_QWORD *)&v2161[3])
  {
    v2024 = (unint64_t *)(*(_QWORD *)&v2161[3] + 8);
    do
      v2025 = __ldaxr(v2024);
    while (__stlxr(v2025 - 1, v2024));
    if (!v2025)
    {
      ((void (*)(std::__shared_weak_count *))v2023->__on_zero_shared)(v2023);
      std::__shared_weak_count::__release_weak(v2023);
    }
  }
  v2026 = *(_QWORD *)v2172;
  if (v2172[14])
    v2027 = 1;
  else
    v2027 = *(_QWORD *)v2172 == 0;
  if (!v2027)
  {
    v2028 = gss::Allocator::instance(v2022);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2028 + 40))(v2028, v2026, *(unsigned __int16 *)&v2172[12]);
  }
  v2029 = v2175;
  if (v2175)
  {
    v2030 = (unint64_t *)&v2175->__shared_owners_;
    do
      v2031 = __ldaxr(v2030);
    while (__stlxr(v2031 - 1, v2030));
    if (!v2031)
    {
      ((void (*)(std::__shared_weak_count *))v2029->__on_zero_shared)(v2029);
      std::__shared_weak_count::__release_weak(v2029);
    }
  }

}

void sub_19F626D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_Unwind_Exception *exception_objecta,uint64_t a50,void *a51,uint64_t a52,void *a53)
{
  void *v53;

  _Block_object_dispose(&STACK[0x280], 8);
  md::RouteLineArrowContext::~RouteLineArrowContext((id *)&STACK[0x350]);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)&STACK[0x468]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4A8]);

  _Unwind_Resume(a1);
}

uint64_t ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)(result + 32) + 200) = a2;
  return result;
}

void ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_16(uint64_t a1, int a2)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
    *(_DWORD *)(v2 + 200) = 1065353216;
  v3 = *(void **)(v2 + 176);
  *(_QWORD *)(v2 + 176) = 0;

}

uint64_t ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_18(uint64_t result, float a2)
{
  *(float *)(*(_QWORD *)(result + 32) + 204) = a2;
  return result;
}

void ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
    *(_DWORD *)(v2 + 204) = 1065353216;
  v3 = *(void **)(v2 + 184);
  *(_QWORD *)(v2 + 184) = 0;

}

float ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_3(uint64_t a1, float a2)
{
  float result;

  result = 1.0 - a2;
  *(float *)(*(_QWORD *)(a1 + 32) + 204) = result;
  return result;
}

void ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_4(uint64_t a1, int a2)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
    *(_DWORD *)(v2 + 204) = 0;
  v3 = *(void **)(v2 + 184);
  *(_QWORD *)(v2 + 184) = 0;

}

void ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_5(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11[2];

  if (*a2)
    v3 = *a2 + 8;
  else
    v3 = 0;
  v4 = *(uint64_t **)(a1 + 32);
  v5 = (std::__shared_weak_count *)v4[1];
  v11[0] = *v4;
  v11[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(unsigned __int8 **)(a1 + 48);
  md::RouteLineSection::updateStyleQueryIfNecessary(v3, v11, *(unsigned __int8 **)(a1 + 40), v8[620], v8[621], v8[622], (gss::FeatureAttributeSet *)(v8 + 536), (gss::FeatureAttributeSet *)(v8 + 568), *(float *)(a1 + 64), *(_BYTE *)(a1 + 76), *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72));
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19F628228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::RouteRenderLayer::updateRoutelineDrawinAnimation(uint64_t a1, md::LayoutContext *a2, _QWORD *a3, PolylineCoordinate a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  PolylineCoordinate v11;
  void *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  _QWORD *shared_weak_owners;
  BOOL v19;
  unsigned __int8 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  int8x8_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  void *v37;
  float v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  int64x2_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t *p_shared_owners;
  unint64_t v50;
  float v51;
  void *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  void *v60;
  std::__shared_weak_count *v61;
  _QWORD *v62;
  _QWORD *v63;
  unsigned __int8 v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  unint64_t *v70;
  unint64_t v71;
  float v72;
  VKRouteLine *v73;
  PolylineCoordinate v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  VKTimedAnimation *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *p_shared_weak_owners;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  VKRouteLine *v110;
  _QWORD v111[5];
  std::__shared_weak_count *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, float);
  void *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  PolylineCoordinate v121;
  void *v122;
  std::__shared_weak_count *v123;
  void *__p;
  std::__shared_weak_count *v125;
  _QWORD v126[2];
  unsigned __int8 v127;
  void *v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count *v131;
  __int8 v132[12];

  v8 = *a3;
  if (*(_BYTE *)(*a3 + 848) && !*(_BYTE *)(v8 + 849) || *(float *)(v8 + 832) >= 1.0)
    goto LABEL_8;
  v9 = *(void **)(v8 + 696);
  if (v9)
  {
    if (objc_msgSend(v9, "state") == 3)
    {
      v8 = *a3;
LABEL_8:
      objc_msgSend(*(id *)(v8 + 144), "routeRibbon");
      v110 = (VKRouteLine *)objc_claimAutoreleasedReturnValue();
      v11 = a4;
      md::RouteLineDrawAnimation::rebuildAnimationSegments((md::RouteLineDrawAnimation *)(*a3 + 632), v110, v11);

      return;
    }
    v10 = objc_msgSend(*(id *)(v8 + 696), "state");
    v8 = *a3;
    if (v10 == 4)
      goto LABEL_8;
  }
  v12 = *(void **)(v8 + 160);
  if (!v12)
    return;
  objc_msgSend(v12, "sections");
  v14 = (std::__shared_weak_count *)__p;
  v13 = v125;
  if (__p)
  {
    if (v125 == __p)
    {
      v22 = v125;
    }
    else
    {
      v15 = v125;
      v16 = v125;
      do
      {
        shared_weak_owners = (_QWORD *)v16[-1].__shared_weak_owners_;
        v16 = (std::__shared_weak_count *)((char *)v16 - 8);
        v17 = shared_weak_owners;
        if (shared_weak_owners)
        {
          v19 = (*v17)-- == 1;
          if (v19)
          {
            md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v17 + 1));
            {
              v21 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v21, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v15[-1].__shared_weak_owners_, 424);
            v15[-1].__shared_weak_owners_ = 0;
          }
        }
        v15 = v16;
      }
      while (v16 != v14);
      v22 = __p;
    }
    v125 = v14;
    operator delete(v22);
  }
  if (v13 == v14)
    return;
  v23 = **(_QWORD **)(*a3 + 312);
  v24 = (_QWORD *)*((_QWORD *)a2 + 1);
  v25 = (int8x8_t)v24[1];
  if (!*(_QWORD *)&v25)
    goto LABEL_48;
  v26 = (uint8x8_t)vcnt_s8(v25);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v27 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v25 <= 0x1AF456233693CD46uLL)
      v27 = 0x1AF456233693CD46uLL % *(_QWORD *)&v25;
  }
  else
  {
    v27 = (*(_QWORD *)&v25 - 1) & 0x1AF456233693CD46;
  }
  v28 = *(_QWORD **)(*v24 + 8 * v27);
  if (!v28)
    goto LABEL_48;
  v29 = (_QWORD *)*v28;
  if (!v29)
    goto LABEL_48;
  if (v26.u32[0] < 2uLL)
  {
    v30 = *(_QWORD *)&v25 - 1;
    while (1)
    {
      v32 = v29[1];
      if (v32 == 0x1AF456233693CD46)
      {
        if (v29[2] == 0x1AF456233693CD46)
          goto LABEL_46;
      }
      else if ((v32 & v30) != v27)
      {
        goto LABEL_48;
      }
      v29 = (_QWORD *)*v29;
      if (!v29)
        goto LABEL_48;
    }
  }
  while (1)
  {
    v31 = v29[1];
    if (v31 == 0x1AF456233693CD46)
      break;
    if (v31 >= *(_QWORD *)&v25)
      v31 %= *(_QWORD *)&v25;
    if (v31 != v27)
      goto LABEL_48;
LABEL_35:
    v29 = (_QWORD *)*v29;
    if (!v29)
      goto LABEL_48;
  }
  if (v29[2] != 0x1AF456233693CD46)
    goto LABEL_35;
LABEL_46:
  v33 = v29[5];
  if (*(_QWORD *)(v33 + 8) == 0x1AF456233693CD46)
  {
    v34 = *(_QWORD *)(v33 + 32);
    goto LABEL_49;
  }
LABEL_48:
  v34 = 0;
LABEL_49:
  v35 = *(float *)(v34 + 3076);
  v36 = *(float *)(v34 + 3080);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "daVinciGlobeSplinedMaxZoom");
  v39 = fmaxf(v36 + v35, 1.0) <= v38 && *(unsigned __int8 *)(v34 + 3776) - 1 < 3;

  md::LayoutContext::frameState(a2);
  v41 = *(unsigned __int8 *)(v40 + 128) - 1 < 3;
  v42 = *a3;
  v43 = *(_QWORD *)(*a3 + 312);
  v132[0] = *(_BYTE *)(v43 + 296);
  v132[1] = v39;
  v132[2] = v41;
  v132[3] = 0;
  md::SinglePassRoutePipelineStateManager::pipelineStateForFunctionConstants(&v130, *(_QWORD *)(v43 + 208), v132);
  ggl::Flyover::FlyoverPipelineSetup::setState(*(ggl::PipelineSetup **)(v42 + 640), (uint64_t)v130, v131);
  if (!*(_QWORD *)(v42 + 648))
  {
    v44 = (int64x2_t *)operator new();
    v45 = *(_QWORD *)(v42 + 640);
    v46 = *(_QWORD *)(v42 + 656);
    v44->i64[0] = (uint64_t)&off_1E42B59B0;
    v44[1].i64[0] = (uint64_t)"";
    v44[1].i64[1] = v23;
    v44[2].i64[0] = v45;
    v44[2].i32[2] = 0;
    v44[3].i64[0] = 0;
    v44[3].i32[2] = 1065353216;
    v44[4].i64[0] = v46;
    v44[4].i64[1] = 0;
    v44[5].i64[0] = 0;
    v44[5].i64[1] = 0;
    v44[6] = vdupq_n_s64(1uLL);
    v44[7].i64[0] = 0;
    v47 = *(_QWORD *)(v42 + 648);
    *(_QWORD *)(v42 + 648) = v44;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  v48 = v131;
  if (v131)
  {
    p_shared_owners = &v131->__shared_owners_;
    do
      v50 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v50 - 1, (unint64_t *)p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  **(_QWORD **)(*(_QWORD *)(*a3 + 640) + 96) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 312) + 248) + 24);
  if (*(_BYTE *)(*a3 + 620))
    v51 = 2.0;
  else
    v51 = 2.2;
  v52 = *(void **)(*a3 + 160);
  if (v52)
  {
    objc_msgSend(v52, "sections");
    v53 = (std::__shared_weak_count *)__p;
  }
  else
  {
    v53 = 0;
    __p = 0;
    v125 = 0;
    v126[0] = 0;
  }
  if (v53->__vftable)
    v54 = (uint64_t)&v53->~__shared_weak_count_0;
  else
    v54 = 0;
  v56 = *(void **)(v54 + 272);
  v55 = *(std::__shared_weak_count **)(v54 + 280);
  v128 = v56;
  v129 = v55;
  if (v55)
  {
    v57 = (unint64_t *)&v55->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = v125;
  v60 = v53;
  if (v125 != v53)
  {
    v61 = v125;
    do
    {
      v63 = (_QWORD *)v61[-1].__shared_weak_owners_;
      v61 = (std::__shared_weak_count *)((char *)v61 - 8);
      v62 = v63;
      if (v63)
      {
        v19 = (*v62)-- == 1;
        if (v19)
        {
          md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v62 + 1));
          {
            v65 = operator new();
            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v65, "VectorKitLabels", 0x5ED09DD50000000FLL);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v59[-1].__shared_weak_owners_, 424);
          v59[-1].__shared_weak_owners_ = 0;
        }
      }
      v59 = v61;
    }
    while (v61 != v53);
    v60 = __p;
  }
  v125 = v53;
  operator delete(v60);
  if (v56)
  {
    v122 = v56;
    v123 = v55;
    if (v55)
    {
      v66 = (unint64_t *)&v55->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      v125 = v55;
      do
        v68 = __ldxr(v66);
      while (__stxr(v68 + 1, v66));
    }
    else
    {
      v125 = 0;
    }
    v126[0] = 0;
    v126[1] = 0;
    __p = v56;
    v127 = 0;
    v69 = (*(uint64_t (**)(void *, _QWORD *))(*(_QWORD *)v56 + 48))(v56, v126);
    v127 = v69;
    if (v55)
    {
      v70 = (unint64_t *)&v55->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      v69 = v127;
    }
    if (v69)
    {
      if (!*(_BYTE *)(*a3 + 620))
        goto LABEL_148;
      if (gss::QueryableLocker<gss::PropertyID>::hasValueForKey(*((_QWORD *)__p + 3), 0x19Fu))
      {
        gss::QueryableLocker<gss::PropertyID>::value<(gss::PropertyID)415>(*((_QWORD *)__p + 3));
        goto LABEL_104;
      }
      if (!*(_BYTE *)(*a3 + 620))
      {
LABEL_148:
        if (gss::QueryableLocker<gss::PropertyID>::hasValueForKey(*((_QWORD *)__p + 3), 0x1A0u))
        {
          gss::QueryableLocker<gss::PropertyID>::value<(gss::PropertyID)416>(*((_QWORD *)__p + 3));
LABEL_104:
          v51 = v72;
        }
      }
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&__p);
  }
  objc_msgSend(*(id *)(*a3 + 144), "routeRibbon");
  v73 = (VKRouteLine *)objc_claimAutoreleasedReturnValue();
  v74 = a4;
  md::RouteLineDrawAnimation::rebuildAnimationSegments((md::RouteLineDrawAnimation *)(*a3 + 632), v73, v74);
  v75 = *a3;
  *(_BYTE *)(v75 + 848) = 1;
  v76 = *(_QWORD *)(v75 + 672);
  if (*(_QWORD *)(v75 + 680) == v76)
  {
    v78 = 0;
    v77 = 0uLL;
  }
  else
  {
    v77 = *(_OWORD *)(v76 + 32);
    v78 = *(_QWORD *)(v76 + 48);
  }
  *(_QWORD *)(v75 + 704) = 0x3FF0000000000000;
  *(_OWORD *)(v75 + 712) = 0uLL;
  *(_OWORD *)(v75 + 728) = 0uLL;
  *(_QWORD *)(v75 + 744) = 0x3FF0000000000000;
  *(_OWORD *)(v75 + 752) = 0uLL;
  *(_OWORD *)(v75 + 768) = 0uLL;
  *(_OWORD *)(v75 + 784) = xmmword_19FFB32C0;
  *(_OWORD *)(v75 + 800) = v77;
  *(_QWORD *)(v75 + 816) = v78;
  *(_QWORD *)(v75 + 824) = 0x3FF0000000000000;
  v79 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", v51);
  v80 = *(void **)(v75 + 696);
  *(_QWORD *)(v75 + 696) = v79;

  objc_msgSend(*(id *)(v75 + 696), "setTimingFunction:", VKAnimationCurveLinear);
  md::RouteLineDrawAnimation::updateStyle(*a3 + 632, *(_BYTE **)(*(_QWORD *)(*a3 + 320) + 8), *(_BYTE **)(*(_QWORD *)(*a3 + 320) + 16));
  v81 = *a3;
  v82 = *(_QWORD *)(*a3 + 640);
  v83 = *(_QWORD *)(v82 + 64);
  *(_QWORD *)(v83 + 24) = 0;
  v84 = *(_QWORD *)(v81 + 232);
  *(_QWORD *)(v83 + 16) = v84;
  v85 = *(_QWORD *)(v82 + 160);
  v86 = *(_QWORD *)(v81 + 240);
  if (v86)
  {
    v87 = (unint64_t *)(v86 + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v89 = *(std::__shared_weak_count **)(v85 + 24);
  *(_QWORD *)(v85 + 16) = v84;
  *(_QWORD *)(v85 + 24) = v86;
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v93 = *a3;
  v92 = (std::__shared_weak_count *)a3[1];
  v94 = MEMORY[0x1E0C809B0];
  if (v92)
  {
    p_shared_weak_owners = (unint64_t *)&v92->__shared_weak_owners_;
    do
      v96 = __ldxr(p_shared_weak_owners);
    while (__stxr(v96 + 1, p_shared_weak_owners));
    v115 = ___ZN2md16RouteRenderLayer30updateRoutelineDrawinAnimationERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEN3geo18PolylineCoordinateE_block_invoke;
    v116 = &__block_descriptor_72_ea8_32c46_ZTSNSt3__18weak_ptrIN2md16RouteLineOverlayEEE48c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e8_v12__0f8l;
    v117 = v93;
    v118 = v92;
    do
      v97 = __ldxr(p_shared_weak_owners);
    while (__stxr(v97 + 1, p_shared_weak_owners));
    v98 = *a3;
    v99 = (std::__shared_weak_count *)a3[1];
    v113 = v94;
    v114 = 3321888768;
    v119 = v98;
    v120 = v99;
    if (v99)
    {
      v100 = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
      v98 = *a3;
    }
  }
  else
  {
    v115 = ___ZN2md16RouteRenderLayer30updateRoutelineDrawinAnimationERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEN3geo18PolylineCoordinateE_block_invoke;
    v116 = &__block_descriptor_72_ea8_32c46_ZTSNSt3__18weak_ptrIN2md16RouteLineOverlayEEE48c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE_e8_v12__0f8l;
    v117 = v93;
    v118 = 0;
    v113 = MEMORY[0x1E0C809B0];
    v114 = 3321888768;
    v119 = v93;
    v120 = 0;
    v98 = v93;
  }
  v121 = a4;
  objc_msgSend(*(id *)(v98 + 696), "setStepHandler:", &v113);
  v111[0] = v94;
  v111[1] = 3321888768;
  v111[2] = ___ZN2md16RouteRenderLayer30updateRoutelineDrawinAnimationERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEN3geo18PolylineCoordinateE_block_invoke_9;
  v111[3] = &__block_descriptor_48_ea8_32c46_ZTSNSt3__18weak_ptrIN2md16RouteLineOverlayEEE_e8_v12__0B8l;
  v111[4] = v93;
  v112 = v92;
  if (v92)
  {
    v102 = (unint64_t *)&v92->__shared_weak_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  objc_msgSend(*(id *)(*a3 + 696), "setCompletionHandler:", v111);
  md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 88), *(VKAnimation **)(*a3 + 696));
  if (v112)
    std::__shared_weak_count::__release_weak(v112);
  v104 = v120;
  if (v120)
  {
    v105 = (unint64_t *)&v120->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (v118)
    std::__shared_weak_count::__release_weak(v118);
  if (v92)
    std::__shared_weak_count::__release_weak(v92);

  v107 = v129;
  if (v129)
  {
    v108 = (unint64_t *)&v129->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
}

void sub_19F628BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a28);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v31 - 144);
  _Unwind_Resume(a1);
}

void sub_19F628D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

char **md::Ribbons::RibbonBatch<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(char **result, unsigned int a2, uint64_t a3, __n128 a4)
{
  char **v5;
  char v6;
  _BYTE *v7;
  uint64_t i;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  char **v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  _BYTE *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  char **v53;
  char *v54;
  __int128 **v55;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  if (*((_BYTE *)result + 2448))
  {
    v5 = result;
    v6 = 0;
    v7 = result + 17;
    for (i = 7; i != 25; ++i)
    {
      if (((a2 >> (i - 7)) & 1) != 0 && *v7)
      {
        v9 = *(_QWORD *)&result[1][8 * i];
        *((_QWORD *)v7 - 12) = v9;
        v6 |= *(_BYTE *)(v9 + 58) == 1;
      }
      v7 += 128;
    }
    v10 = result[303];
    v11 = result[304];
    if (v10 == v11)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v55 = (__int128 **)(result + 290);
      v53 = result + 17;
      v54 = result[304];
      do
      {
        v13 = *(_QWORD *)v10;
        if (*(_BYTE *)(*(_QWORD *)v10 + 48))
        {
          if (*(_QWORD *)(v13 + 88) != v12)
          {
            if (v12)
            {
              v14 = ggl::Batcher::commit(v55, 0xC8u, a4);
              if (v14[1] != *v14)
              {
                v15 = v14;
                v16 = 0;
                v17 = v53;
                do
                {
                  if (((a2 >> v16) & 1) != 0 && *(_BYTE *)v17)
                  {
                    v27 = (uint64_t)*(v17 - 14);
                    v26 = (uint64_t)*(v17 - 13);
                    v28 = *((_OWORD *)v17 - 3);
                    v60 = *((_OWORD *)v17 - 4);
                    v61 = v28;
                    v29 = *((_OWORD *)v17 - 1);
                    v62 = *((_OWORD *)v17 - 2);
                    v63 = v29;
                    v30 = *((_OWORD *)v17 - 5);
                    v58 = *((_OWORD *)v17 - 6);
                    v59 = v30;
                    v31 = v5[301];
                    v18 = (char *)*((_QWORD *)v31 + 1);
                    if (v18 == v5[302])
                    {
                      v31 = *(char **)v31;
                      if (!v31)
                      {
                        v31 = (char *)malloc_type_malloc(120 * (_QWORD)v18 + 16, 0xB644C221uLL);
                        *(_QWORD *)v31 = 0;
                        *((_QWORD *)v31 + 1) = 0;
                        *(_QWORD *)v5[301] = v31;
                      }
                      v5[301] = v31;
                      v18 = (char *)*((_QWORD *)v31 + 1);
                    }
                    v19 = &v31[120 * (_QWORD)v18];
                    *((_QWORD *)v31 + 1) = v18 + 1;
                    *((_QWORD *)v19 + 2) = &off_1E42B59B0;
                    *((_QWORD *)v19 + 3) = v27;
                    v19 += 16;
                    *((_QWORD *)v19 + 2) = v26;
                    v20 = v62;
                    v21 = v63;
                    v22 = v61;
                    *(_OWORD *)(v19 + 56) = v60;
                    v23 = v58;
                    *(_OWORD *)(v19 + 40) = v59;
                    *(_OWORD *)(v19 + 24) = v23;
                    *(_OWORD *)(v19 + 104) = v21;
                    *(_OWORD *)(v19 + 88) = v20;
                    *(_OWORD *)(v19 + 72) = v22;
                    *((_QWORD *)v19 + 8) = v12;
                    v24 = *v15;
                    *((_QWORD *)v19 + 11) = *v15;
                    *((_QWORD *)v19 + 12) = (v15[1] - v24) >> 4;
                    v57 = v16;
                    *(_QWORD *)&v58 = v19;
                    v25 = *(_QWORD *)(a3 + 24);
                    if (!v25)
                    {
LABEL_43:
                      std::__throw_bad_function_call[abi:nn180100]();
                      return (char **)__Block_byref_object_copy__23(v51, v52);
                    }
                    (*(void (**)(uint64_t, int *, __int128 *))(*(_QWORD *)v25 + 48))(v25, &v57, &v58);
                  }
                  ++v16;
                  v17 += 16;
                }
                while (v16 != 18);
              }
            }
            v13 = *(_QWORD *)v10;
            v12 = *(_QWORD *)(*(_QWORD *)v10 + 88);
            v11 = v54;
          }
          v32 = 16;
          if ((v6 & 1) != 0)
          {
            v32 = 32;
            v33 = v13 + 32;
          }
          else
          {
            v33 = v13 + 16;
          }
          if (*(_QWORD *)(v33 + 8) != *(_QWORD *)(v13 + v32))
            gm::MultiRange<unsigned long>::push_back((char **)v55, (_OWORD *)v33);
        }
        v10 += 8;
      }
      while (v10 != v11);
    }
    result = ggl::Batcher::commit((__int128 **)v5 + 290, 0xC8u, a4);
    if (result[1] != *result)
    {
      v34 = result;
      v35 = 0;
      v36 = v5 + 17;
      do
      {
        if (((a2 >> v35) & 1) != 0 && *v36)
        {
          v45 = *((_QWORD *)v36 - 14);
          v46 = *((_QWORD *)v36 - 13);
          v47 = *((_OWORD *)v36 - 3);
          v60 = *((_OWORD *)v36 - 4);
          v61 = v47;
          v48 = *((_OWORD *)v36 - 1);
          v62 = *((_OWORD *)v36 - 2);
          v63 = v48;
          v49 = *((_OWORD *)v36 - 5);
          v58 = *((_OWORD *)v36 - 6);
          v59 = v49;
          v50 = v5[301];
          v37 = (char *)*((_QWORD *)v50 + 1);
          if (v37 == v5[302])
          {
            v50 = *(char **)v50;
            if (!v50)
            {
              v50 = (char *)malloc_type_malloc(120 * (_QWORD)v37 + 16, 0xB644C221uLL);
              *(_QWORD *)v50 = 0;
              *((_QWORD *)v50 + 1) = 0;
              *(_QWORD *)v5[301] = v50;
            }
            v5[301] = v50;
            v37 = (char *)*((_QWORD *)v50 + 1);
          }
          v38 = &v50[120 * (_QWORD)v37];
          *((_QWORD *)v50 + 1) = v37 + 1;
          *((_QWORD *)v38 + 2) = &off_1E42B59B0;
          *((_QWORD *)v38 + 3) = v45;
          v38 += 16;
          *((_QWORD *)v38 + 2) = v46;
          v39 = v62;
          v40 = v63;
          v41 = v61;
          *(_OWORD *)(v38 + 56) = v60;
          v42 = v58;
          *(_OWORD *)(v38 + 40) = v59;
          *(_OWORD *)(v38 + 24) = v42;
          *(_OWORD *)(v38 + 104) = v40;
          *(_OWORD *)(v38 + 88) = v39;
          *(_OWORD *)(v38 + 72) = v41;
          *((_QWORD *)v38 + 8) = v12;
          v43 = *v34;
          *((_QWORD *)v38 + 11) = *v34;
          *((_QWORD *)v38 + 12) = (v34[1] - v43) >> 4;
          v57 = v35;
          *(_QWORD *)&v58 = v38;
          v44 = *(_QWORD *)(a3 + 24);
          if (!v44)
            goto LABEL_43;
          result = (char **)(*(uint64_t (**)(uint64_t, int *, __int128 *))(*(_QWORD *)v44 + 48))(v44, &v57, &v58);
        }
        ++v35;
        v36 += 128;
      }
      while (v35 != 18);
    }
  }
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::hash<md::TrafficBatchKey>,std::equal_to<md::TrafficBatchKey>,true>,std::__unordered_map_equal<md::TrafficBatchKey,std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<md::TrafficBatchKey>,std::hash<md::TrafficBatchKey>,true>,std::allocator<std::__hash_value_type<md::TrafficBatchKey,std::vector<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::CasedTrafficRibbon,mdm::TypeDeleter<md::CasedTrafficRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(_QWORD **)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    operator delete(v2);
}

void ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_27(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  gss::Allocator *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[9];
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  __n128 (*v41)(__n128 *, __n128 *);
  void (*v42)(uint64_t);
  const char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  if (*a2)
    v3 = *a2 + 8;
  else
    v3 = 0;
  v4 = *(_QWORD *)(a1[4] + 8) + 48;
  v5 = *(_QWORD *)(a1[5] + 8) + 48;
  v6 = a1 + 8;
  v38 = 0;
  v39 = &v38;
  v40 = 0x5012000000;
  v41 = __Block_byref_object_copy__24776;
  v42 = __Block_byref_object_dispose__24777;
  v44 = 0;
  v45 = 0;
  v43 = "";
  v7 = a1[6];
  v8 = (std::__shared_weak_count *)a1[7];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = v45;
    v44 = v7;
    v45 = v8;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v44 = a1[6];
    v45 = 0;
  }
  v14 = v39;
  *((_DWORD *)v39 + 16) = 0;
  *((_BYTE *)v14 + 68) = 3;
  *((_DWORD *)v14 + 18) = 0;
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZNK2md16RouteLineSection17addTrafficRibbonsERNSt3__113unordered_mapINS_15TrafficBatchKeyENS1_6vectorINS1_10unique_ptrINS_13TrafficRibbonEN3mdm11TypeDeleterIS6_EEEEN3geo12StdAllocatorISA_NS7_9AllocatorEEEEENS1_4hashIS3_EENS1_8equal_toIS3_EENS1_9allocatorINS1_4pairIKS3_SF_EEEEEERNS2_IS3_NS4_INS5_INS_18SolidTrafficRibbonENS8_ISR_EEEENSC_IST_SD_EEEESH_SJ_NSK_INSL_ISM_SV_EEEEEERKNS1_10shared_ptrIN3gss15StylesheetQueryINS11_10PropertyIDEEEEERKNS_16TrafficMeshStyleE_block_invoke;
  v37[3] = &unk_1E42F47E8;
  v37[4] = &v38;
  v37[5] = v3;
  v37[6] = v6;
  v37[7] = v4;
  v37[8] = v5;
  v15 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1A1AF5730](v37);
  v16 = 0;
  v17 = 0;
  v18 = -1;
  while (1)
  {
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 96) + 24))(*(_QWORD *)(v3 + 96));
    v20 = **(_QWORD **)(v3 + 96);
    if (v16 == v19)
      break;
    v21 = (unsigned __int8 *)(*(uint64_t (**)(void))(v20 + 32))();
    v22 = v21;
    if (v21[44] != v18)
    {
      v23 = a1[6];
      v34 = 0;
      v35 = 0;
      v33 = 0;
      v36 = gss::Allocator::instance((gss::Allocator *)v21);
      if (&v33 != (uint64_t *)(v23 + 240))
        std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(&v33, *(_QWORD *)(v23 + 240), *(_QWORD **)(v23 + 248), (uint64_t)(*(_QWORD *)(v23 + 248) - *(_QWORD *)(v23 + 240)) >> 3);
      ((void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t *))v15)[2](v15, v18, v17, v16 - v17 + 1, &v33);
      if (v33)
      {
        v34 = v33;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 40))(v36, v33, v35 - v33);
      }
      v18 = v22[44];
      v17 = v16;
    }
    ++v16;
  }
  v24 = (gss::Allocator *)(*(uint64_t (**)(void))(v20 + 24))();
  v25 = a1[6];
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v32 = gss::Allocator::instance(v24);
  if (&v29 != (uint64_t *)(v25 + 240))
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(&v29, *(_QWORD *)(v25 + 240), *(_QWORD **)(v25 + 248), (uint64_t)(*(_QWORD *)(v25 + 248) - *(_QWORD *)(v25 + 240)) >> 3);
  ((void (**)(_QWORD, _QWORD, uint64_t, char *, uint64_t *))v15)[2](v15, v18, v17, (char *)v24 - v17, &v29);
  if (v29)
  {
    v30 = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 40))(v32, v29, v31 - v29);
  }

  _Block_object_dispose(&v38, 8);
  v26 = v45;
  if (v45)
  {
    v27 = (unint64_t *)&v45->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_19F62952C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  void *v33;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;

  if (a9)
    (*(void (**)(void))(*(_QWORD *)a12 + 40))();

  _Block_object_dispose(&a26, 8);
  v35 = a33;
  if (a33)
  {
    p_shared_owners = (unint64_t *)&a33->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_28(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14[24];
  char v15;

  v4 = a1[6];
  v5 = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1[4] + 8);
  v7 = a1[6];
  v14[0] = 0;
  v15 = 0;
  md::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::RibbonLayer((uint64_t)v5, a2, *(uint64_t **)(v6 + 64), (uint64_t *)(v7 + 216), (uint64_t *)(v7 + 232), v14);
  *v5 = &off_1E42956C8;
  v5[19] = 0;
  v8 = *(_QWORD *)(v4 + 272);
  *(_QWORD *)(v4 + 272) = v5;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[6];
  v10 = (_QWORD *)operator new();
  v11 = a1[6];
  v12 = *(_QWORD *)(a1[5] + 8);
  v14[0] = 0;
  v15 = 0;
  md::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::RibbonLayer(v10, a2, *(uint64_t **)(v12 + 64), (uint64_t *)(v11 + 216), (uint64_t *)(v11 + 232), v14);
  *v10 = &off_1E42935E8;
  v10[20] = 0;
  result = *(_QWORD *)(v9 + 264);
  *(_QWORD *)(v9 + 264) = v10;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19F6296F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10E1C4095CD5A37);
  _Unwind_Resume(a1);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(_QWORD *result, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  void (***v17)(void);
  void (**v18)(void);
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v61;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[3];
  _QWORD *v71;
  _BYTE v72[24];
  _BYTE *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v4 = a3;
    for (i = result; i != a2; ++i)
    {
      v7 = *i;
      v8 = (_QWORD *)v4[3];
      if (v8)
      {
        if (v8 == v4)
        {
          v71 = v70;
          (*(void (**)(_QWORD *, _QWORD *))(*v4 + 24))(v4, v70);
        }
        else
        {
          v71 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
        }
      }
      else
      {
        v71 = 0;
      }
      if (!*(_BYTE *)(v7 + 272))
        goto LABEL_68;
      v10 = *(_QWORD *)(v7 + 168);
      v9 = *(_QWORD *)(v7 + 176);
      if (v9 != v10)
      {
        v11 = *(_QWORD *)(v7 + 176);
        do
        {
          v13 = *(void **)(v11 - 24);
          v11 -= 24;
          v12 = v13;
          if (v13)
          {
            *(_QWORD *)(v9 - 16) = v12;
            operator delete(v12);
          }
          v9 = v11;
        }
        while (v11 != v10);
      }
      *(_QWORD *)(v7 + 176) = v10;
      *(_QWORD *)(v7 + 152) = *(_QWORD *)(v7 + 144);
      v14 = *(_QWORD **)(v7 + 224);
      if (v14)
      {
        do
        {
          if (v14[1])
          {
            v16 = 0;
            v17 = (void (***)(void))(v14 + 2);
            do
            {
              v18 = *v17;
              v17 += 15;
              (*v18)();
              ++v16;
            }
            while (v16 < v14[1]);
          }
          v14[1] = 0;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
        v15 = *(_QWORD *)(v7 + 224);
      }
      else
      {
        v15 = 0;
      }
      *(_QWORD *)(v7 + 232) = v15;
      v19 = (uint64_t)v71;
      if (v71)
      {
        if (v71 == v70)
        {
          v73 = v72;
          (*(void (**)(_QWORD *, _BYTE *))(v70[0] + 24))(v70, v72);
          goto LABEL_30;
        }
        v19 = (*(uint64_t (**)(_QWORD *))(*v71 + 16))(v71);
      }
      v73 = (_BYTE *)v19;
LABEL_30:
      if (*(_BYTE *)(v7 + 272))
      {
        v61 = i;
        if (*(_BYTE *)(v7 + 136))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 56);
          *(_QWORD *)(v7 + 40) = v20;
          v21 = *(unsigned __int8 *)(v20 + 58) == 1;
        }
        else
        {
          v21 = 0;
        }
        v22 = *(uint64_t **)(v7 + 248);
        v23 = *(uint64_t **)(v7 + 256);
        if (v22 != v23)
        {
          v24 = 0;
          while (1)
          {
            v25 = *v22;
            if (*(_BYTE *)(*v22 + 48))
            {
              if (*(_QWORD *)(v25 + 88) != v24)
              {
                if (v24)
                {
                  v26 = ggl::Batcher::commit((__int128 **)(v7 + 144), 0xC8u, a4);
                  if (v26[1] != *v26)
                  {
                    if (*(_BYTE *)(v7 + 136))
                    {
                      v27 = v26;
                      v29 = *(_QWORD *)(v7 + 24);
                      v28 = *(_QWORD *)(v7 + 32);
                      v30 = *(_OWORD *)(v7 + 88);
                      v66 = *(_OWORD *)(v7 + 72);
                      v67 = v30;
                      v31 = *(_OWORD *)(v7 + 120);
                      v68 = *(_OWORD *)(v7 + 104);
                      v69 = v31;
                      v32 = *(_OWORD *)(v7 + 56);
                      v64 = *(_OWORD *)(v7 + 40);
                      v65 = v32;
                      v33 = *(_QWORD **)(v7 + 232);
                      v34 = v33[1];
                      if (v34 == *(_QWORD *)(v7 + 240))
                      {
                        v33 = (_QWORD *)*v33;
                        if (!v33)
                        {
                          v33 = malloc_type_malloc(120 * v34 + 16, 0xB644C221uLL);
                          *v33 = 0;
                          v33[1] = 0;
                          **(_QWORD **)(v7 + 232) = v33;
                        }
                        *(_QWORD *)(v7 + 232) = v33;
                        v34 = v33[1];
                      }
                      v35 = &v33[15 * v34];
                      v33[1] = v34 + 1;
                      v35[2] = &off_1E42B59B0;
                      v35[3] = v29;
                      v35 += 2;
                      v35[2] = v28;
                      v36 = v68;
                      v37 = v69;
                      v38 = v67;
                      *(_OWORD *)(v35 + 7) = v66;
                      v39 = v64;
                      *(_OWORD *)(v35 + 5) = v65;
                      *(_OWORD *)(v35 + 3) = v39;
                      *(_OWORD *)(v35 + 13) = v37;
                      *(_OWORD *)(v35 + 11) = v36;
                      *(_OWORD *)(v35 + 9) = v38;
                      v35[8] = v24;
                      v40 = *v27;
                      v35[11] = *v27;
                      v35[12] = (v27[1] - v40) >> 4;
                      v63 = 0;
                      *(_QWORD *)&v64 = v35;
                      if (!v73)
                        goto LABEL_72;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v73 + 48))(v73, &v63, &v64);
                    }
                  }
                }
                v25 = *v22;
                v24 = *(_QWORD *)(*v22 + 88);
              }
              v41 = 32;
              if (v21)
              {
                v42 = v25 + 32;
              }
              else
              {
                v41 = 16;
                v42 = v25 + 16;
              }
              if (*(_QWORD *)(v42 + 8) != *(_QWORD *)(v25 + v41))
                gm::MultiRange<unsigned long>::push_back((char **)(v7 + 144), (_OWORD *)v42);
            }
            if (++v22 == v23)
              goto LABEL_55;
          }
        }
        v24 = 0;
LABEL_55:
        v43 = ggl::Batcher::commit((__int128 **)(v7 + 144), 0xC8u, a4);
        v4 = a3;
        i = v61;
        if (v43[1] != *v43 && *(_BYTE *)(v7 + 136))
        {
          v44 = v43;
          v45 = *(_QWORD *)(v7 + 24);
          v46 = *(_QWORD *)(v7 + 32);
          v47 = *(_OWORD *)(v7 + 88);
          v66 = *(_OWORD *)(v7 + 72);
          v67 = v47;
          v48 = *(_OWORD *)(v7 + 120);
          v68 = *(_OWORD *)(v7 + 104);
          v69 = v48;
          v49 = *(_OWORD *)(v7 + 56);
          v64 = *(_OWORD *)(v7 + 40);
          v65 = v49;
          v50 = *(_QWORD **)(v7 + 232);
          v51 = v50[1];
          if (v51 == *(_QWORD *)(v7 + 240))
          {
            v50 = (_QWORD *)*v50;
            if (!v50)
            {
              v50 = malloc_type_malloc(120 * v51 + 16, 0xB644C221uLL);
              *v50 = 0;
              v50[1] = 0;
              **(_QWORD **)(v7 + 232) = v50;
            }
            *(_QWORD *)(v7 + 232) = v50;
            v51 = v50[1];
          }
          v52 = &v50[15 * v51];
          v50[1] = v51 + 1;
          v52[2] = &off_1E42B59B0;
          v52[3] = v45;
          v52 += 2;
          v52[2] = v46;
          v53 = v68;
          v54 = v69;
          v55 = v67;
          *(_OWORD *)(v52 + 7) = v66;
          v56 = v64;
          *(_OWORD *)(v52 + 5) = v65;
          *(_OWORD *)(v52 + 3) = v56;
          *(_OWORD *)(v52 + 13) = v54;
          *(_OWORD *)(v52 + 11) = v53;
          *(_OWORD *)(v52 + 9) = v55;
          v52[8] = v24;
          v57 = *v44;
          v52[11] = *v44;
          v52[12] = (v44[1] - v57) >> 4;
          v63 = 0;
          *(_QWORD *)&v64 = v52;
          if (!v73)
          {
LABEL_72:
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
          }
          (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v73 + 48))(v73, &v63, &v64);
          v4 = a3;
          i = v61;
        }
      }
      v58 = v73;
      if (v73 == v72)
      {
        v58 = v72;
        v59 = 4;
      }
      else
      {
        if (!v73)
          goto LABEL_68;
        v59 = 5;
      }
      (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_68:
      result = v71;
      if (v71 == v70)
      {
        result = v70;
        v6 = 4;
      }
      else
      {
        if (!v71)
          continue;
        v6 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
    }
  }
  return result;
}

void sub_19F629C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33)
{
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v35 = a33;
  if (a33 == (_QWORD *)(v33 - 136))
  {
    v36 = 4;
    v35 = (_QWORD *)(v33 - 136);
  }
  else
  {
    if (!a33)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_6:
  v37 = a29;
  if (a29 == &a26)
  {
    v38 = 4;
    v37 = &a26;
  }
  else
  {
    if (!a29)
      _Unwind_Resume(exception_object);
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
  _Unwind_Resume(exception_object);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(_QWORD *result, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  void (***v17)(void);
  void (**v18)(void);
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char **v57;
  char **v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _QWORD v97[3];
  _QWORD *v98;
  _BYTE v99[24];
  _BYTE *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v4 = a3;
    v5 = result;
    while (1)
    {
      v7 = *v5;
      v8 = (_QWORD *)v4[3];
      if (v8)
      {
        if (v8 == v4)
        {
          v98 = v97;
          (*(void (**)(_QWORD *, _QWORD *))(*v4 + 24))(v4, v97);
        }
        else
        {
          v98 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
        }
      }
      else
      {
        v98 = 0;
      }
      if (!*(_BYTE *)(v7 + 400))
        goto LABEL_85;
      v10 = *(_QWORD *)(v7 + 296);
      v9 = *(_QWORD *)(v7 + 304);
      if (v9 != v10)
      {
        v11 = *(_QWORD *)(v7 + 304);
        do
        {
          v13 = *(void **)(v11 - 24);
          v11 -= 24;
          v12 = v13;
          if (v13)
          {
            *(_QWORD *)(v9 - 16) = v12;
            operator delete(v12);
          }
          v9 = v11;
        }
        while (v11 != v10);
      }
      *(_QWORD *)(v7 + 304) = v10;
      *(_QWORD *)(v7 + 280) = *(_QWORD *)(v7 + 272);
      v14 = *(_QWORD **)(v7 + 352);
      if (v14)
      {
        do
        {
          if (v14[1])
          {
            v16 = 0;
            v17 = (void (***)(void))(v14 + 2);
            do
            {
              v18 = *v17;
              v17 += 15;
              (*v18)();
              ++v16;
            }
            while (v16 < v14[1]);
          }
          v14[1] = 0;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
        v15 = *(_QWORD *)(v7 + 352);
      }
      else
      {
        v15 = 0;
      }
      *(_QWORD *)(v7 + 360) = v15;
      v19 = (uint64_t)v98;
      v89 = v5;
      if (!v98)
        goto LABEL_28;
      if (v98 != v97)
        break;
      v100 = v99;
      (*(void (**)(_QWORD *, _BYTE *))(v97[0] + 24))(v97, v99);
LABEL_30:
      if (*(_BYTE *)(v7 + 400))
      {
        if (*(_BYTE *)(v7 + 136))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 56);
          *(_QWORD *)(v7 + 40) = v20;
          v21 = *(unsigned __int8 *)(v20 + 58) == 1;
          if (*(_BYTE *)(v7 + 264))
          {
LABEL_33:
            v22 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 64);
            *(_QWORD *)(v7 + 168) = v22;
            if (*(_BYTE *)(v22 + 58) == 1)
              v21 = 1;
          }
        }
        else
        {
          v21 = 0;
          if (*(_BYTE *)(v7 + 264))
            goto LABEL_33;
        }
        v23 = *(uint64_t **)(v7 + 376);
        v24 = *(uint64_t **)(v7 + 384);
        if (v23 != v24)
        {
          v25 = 0;
          while (1)
          {
            v26 = *v23;
            if (*(_BYTE *)(*v23 + 48))
            {
              if (*(_QWORD *)(v26 + 88) != v25)
              {
                if (v25)
                {
                  v27 = ggl::Batcher::commit((__int128 **)(v7 + 272), 0xC8u, a4);
                  if (v27[1] != *v27)
                  {
                    v28 = v27;
                    if (*(_BYTE *)(v7 + 136))
                    {
                      v29 = *(_QWORD *)(v7 + 24);
                      v30 = *(_QWORD *)(v7 + 32);
                      v31 = *(_OWORD *)(v7 + 88);
                      v93 = *(_OWORD *)(v7 + 72);
                      v94 = v31;
                      v32 = *(_OWORD *)(v7 + 120);
                      v95 = *(_OWORD *)(v7 + 104);
                      v96 = v32;
                      v33 = *(_OWORD *)(v7 + 56);
                      v91 = *(_OWORD *)(v7 + 40);
                      v92 = v33;
                      v34 = *(_QWORD **)(v7 + 360);
                      v35 = v34[1];
                      if (v35 == *(_QWORD *)(v7 + 368))
                      {
                        v34 = (_QWORD *)*v34;
                        if (!v34)
                        {
                          v34 = malloc_type_malloc(120 * v35 + 16, 0xB644C221uLL);
                          *v34 = 0;
                          v34[1] = 0;
                          **(_QWORD **)(v7 + 360) = v34;
                        }
                        *(_QWORD *)(v7 + 360) = v34;
                        v35 = v34[1];
                      }
                      v36 = &v34[15 * v35];
                      v34[1] = v35 + 1;
                      v36[2] = &off_1E42B59B0;
                      v36[3] = v29;
                      v36 += 2;
                      v36[2] = v30;
                      v37 = v95;
                      v38 = v96;
                      v39 = v94;
                      *(_OWORD *)(v36 + 7) = v93;
                      v40 = v91;
                      *(_OWORD *)(v36 + 5) = v92;
                      *(_OWORD *)(v36 + 3) = v40;
                      *(_OWORD *)(v36 + 13) = v38;
                      *(_OWORD *)(v36 + 11) = v37;
                      *(_OWORD *)(v36 + 9) = v39;
                      v36[8] = v25;
                      v41 = *v28;
                      v36[11] = *v28;
                      v36[12] = (v28[1] - v41) >> 4;
                      v90 = 0;
                      *(_QWORD *)&v91 = v36;
                      if (!v100)
                        goto LABEL_89;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v100 + 48))(v100, &v90, &v91);
                    }
                    if (*(_BYTE *)(v7 + 264))
                    {
                      v42 = *(_QWORD *)(v7 + 152);
                      v43 = *(_QWORD *)(v7 + 160);
                      v44 = *(_OWORD *)(v7 + 216);
                      v93 = *(_OWORD *)(v7 + 200);
                      v94 = v44;
                      v45 = *(_OWORD *)(v7 + 248);
                      v95 = *(_OWORD *)(v7 + 232);
                      v96 = v45;
                      v46 = *(_OWORD *)(v7 + 184);
                      v91 = *(_OWORD *)(v7 + 168);
                      v92 = v46;
                      v47 = *(_QWORD **)(v7 + 360);
                      v48 = v47[1];
                      if (v48 == *(_QWORD *)(v7 + 368))
                      {
                        v47 = (_QWORD *)*v47;
                        if (!v47)
                        {
                          v47 = malloc_type_malloc(120 * v48 + 16, 0xB644C221uLL);
                          *v47 = 0;
                          v47[1] = 0;
                          **(_QWORD **)(v7 + 360) = v47;
                        }
                        *(_QWORD *)(v7 + 360) = v47;
                        v48 = v47[1];
                      }
                      v49 = &v47[15 * v48];
                      v47[1] = v48 + 1;
                      v49[2] = &off_1E42B59B0;
                      v49[3] = v42;
                      v49 += 2;
                      v49[2] = v43;
                      v50 = v95;
                      v51 = v96;
                      v52 = v94;
                      *(_OWORD *)(v49 + 7) = v93;
                      v53 = v91;
                      *(_OWORD *)(v49 + 5) = v92;
                      *(_OWORD *)(v49 + 3) = v53;
                      *(_OWORD *)(v49 + 13) = v51;
                      *(_OWORD *)(v49 + 11) = v50;
                      *(_OWORD *)(v49 + 9) = v52;
                      v49[8] = v25;
                      v54 = *v28;
                      v49[11] = *v28;
                      v49[12] = (v28[1] - v54) >> 4;
                      v90 = 1;
                      *(_QWORD *)&v91 = v49;
                      if (!v100)
                        goto LABEL_89;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v100 + 48))(v100, &v90, &v91);
                    }
                  }
                }
                v26 = *v23;
                v25 = *(_QWORD *)(*v23 + 88);
              }
              v55 = 32;
              if (v21)
              {
                v56 = v26 + 32;
              }
              else
              {
                v55 = 16;
                v56 = v26 + 16;
              }
              if (*(_QWORD *)(v56 + 8) != *(_QWORD *)(v26 + v55))
                gm::MultiRange<unsigned long>::push_back((char **)(v7 + 272), (_OWORD *)v56);
            }
            if (++v23 == v24)
              goto LABEL_65;
          }
        }
        v25 = 0;
LABEL_65:
        v57 = ggl::Batcher::commit((__int128 **)(v7 + 272), 0xC8u, a4);
        if (v57[1] != *v57)
        {
          v58 = v57;
          if (*(_BYTE *)(v7 + 136))
          {
            v59 = *(_QWORD *)(v7 + 24);
            v60 = *(_QWORD *)(v7 + 32);
            v61 = *(_OWORD *)(v7 + 88);
            v93 = *(_OWORD *)(v7 + 72);
            v94 = v61;
            v62 = *(_OWORD *)(v7 + 120);
            v95 = *(_OWORD *)(v7 + 104);
            v96 = v62;
            v63 = *(_OWORD *)(v7 + 56);
            v91 = *(_OWORD *)(v7 + 40);
            v92 = v63;
            v64 = *(_QWORD **)(v7 + 360);
            v65 = v64[1];
            if (v65 == *(_QWORD *)(v7 + 368))
            {
              v64 = (_QWORD *)*v64;
              if (!v64)
              {
                v64 = malloc_type_malloc(120 * v65 + 16, 0xB644C221uLL);
                *v64 = 0;
                v64[1] = 0;
                **(_QWORD **)(v7 + 360) = v64;
              }
              *(_QWORD *)(v7 + 360) = v64;
              v65 = v64[1];
            }
            v66 = &v64[15 * v65];
            v64[1] = v65 + 1;
            v66[2] = &off_1E42B59B0;
            v66[3] = v59;
            v66 += 2;
            v66[2] = v60;
            v67 = v95;
            v68 = v96;
            v69 = v94;
            *(_OWORD *)(v66 + 7) = v93;
            v70 = v91;
            *(_OWORD *)(v66 + 5) = v92;
            *(_OWORD *)(v66 + 3) = v70;
            *(_OWORD *)(v66 + 13) = v68;
            *(_OWORD *)(v66 + 11) = v67;
            *(_OWORD *)(v66 + 9) = v69;
            v66[8] = v25;
            v71 = *v58;
            v66[11] = *v58;
            v66[12] = (v58[1] - v71) >> 4;
            v90 = 0;
            *(_QWORD *)&v91 = v66;
            if (!v100)
            {
LABEL_89:
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
            }
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v100 + 48))(v100, &v90, &v91);
          }
          if (*(_BYTE *)(v7 + 264))
          {
            v72 = *(_QWORD *)(v7 + 152);
            v73 = *(_QWORD *)(v7 + 160);
            v74 = *(_OWORD *)(v7 + 216);
            v93 = *(_OWORD *)(v7 + 200);
            v94 = v74;
            v75 = *(_OWORD *)(v7 + 248);
            v95 = *(_OWORD *)(v7 + 232);
            v96 = v75;
            v76 = *(_OWORD *)(v7 + 184);
            v91 = *(_OWORD *)(v7 + 168);
            v92 = v76;
            v77 = *(_QWORD **)(v7 + 360);
            v78 = v77[1];
            if (v78 == *(_QWORD *)(v7 + 368))
            {
              v77 = (_QWORD *)*v77;
              if (!v77)
              {
                v77 = malloc_type_malloc(120 * v78 + 16, 0xB644C221uLL);
                *v77 = 0;
                v77[1] = 0;
                **(_QWORD **)(v7 + 360) = v77;
              }
              *(_QWORD *)(v7 + 360) = v77;
              v78 = v77[1];
            }
            v79 = &v77[15 * v78];
            v77[1] = v78 + 1;
            v79[2] = &off_1E42B59B0;
            v79[3] = v72;
            v79 += 2;
            v79[2] = v73;
            v80 = v95;
            v81 = v96;
            v82 = v94;
            *(_OWORD *)(v79 + 7) = v93;
            v83 = v91;
            *(_OWORD *)(v79 + 5) = v92;
            *(_OWORD *)(v79 + 3) = v83;
            *(_OWORD *)(v79 + 13) = v81;
            *(_OWORD *)(v79 + 11) = v80;
            *(_OWORD *)(v79 + 9) = v82;
            v79[8] = v25;
            v84 = *v58;
            v79[11] = *v58;
            v79[12] = (v58[1] - v84) >> 4;
            v90 = 1;
            *(_QWORD *)&v91 = v79;
            if (!v100)
              goto LABEL_89;
            (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v100 + 48))(v100, &v90, &v91);
          }
        }
      }
      v85 = v100;
      if (v100 == v99)
      {
        v85 = v99;
        v86 = 4;
        v4 = a3;
        v5 = v89;
      }
      else
      {
        v4 = a3;
        v5 = v89;
        if (!v100)
          goto LABEL_85;
        v86 = 5;
      }
      (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_85:
      result = v98;
      if (v98 == v97)
      {
        result = v97;
        v6 = 4;
      }
      else
      {
        if (!v98)
          goto LABEL_5;
        v6 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_5:
      if (++v5 == a2)
        return result;
    }
    v19 = (*(uint64_t (**)(_QWORD *))(*v98 + 16))(v98);
LABEL_28:
    v100 = (_BYTE *)v19;
    goto LABEL_30;
  }
  return result;
}

void sub_19F62A438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35)
{
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v37 = a35;
  if (a35 == (_QWORD *)(v35 - 136))
  {
    v38 = 4;
    v37 = (_QWORD *)(v35 - 136);
  }
  else
  {
    if (!a35)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_6:
  v39 = a31;
  if (a31 == &a28)
  {
    v40 = 4;
    v39 = &a28;
  }
  else
  {
    if (!a31)
      _Unwind_Resume(exception_object);
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
  _Unwind_Resume(exception_object);
}

void md::TrafficContext::~TrafficContext(md::TrafficContext *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_29(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  if (*a2)
    v2 = *a2 + 8;
  else
    v2 = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) |= *(_QWORD *)(v2 + 40) != *(_QWORD *)(v2 + 32);
  return result;
}

void ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_2_30(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 32);
  *(float *)(*(_QWORD *)(a1 + 40) + 528) = *(float *)(a1 + 56)
                                           + (float)((float)((float)*(unint64_t *)(*(_QWORD *)(a1 + 40) + 520)
                                                           - *(float *)(a1 + 56))
                                                   * a2);
  v3 = **(_QWORD **)(*(_QWORD *)(v2 + 40) + 88);
  if (v3)
  {
    v4 = 7;
    md::MapEngine::setNeedsTick(v3, &v4);
  }
}

void ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_32(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  *(float *)(v1 + 528) = (float)*(unint64_t *)(v1 + 520);
  v3 = *(void **)(v1 + 192);
  *(_QWORD *)(v1 + 192) = 0;

  v4 = **(_QWORD **)(*(_QWORD *)(v2 + 40) + 88);
  if (v4)
  {
    v5 = 7;
    md::MapEngine::setNeedsTick(v4, &v5);
  }
}

void ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_34(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t i;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v20;
  uint64_t v21;
  float *v22;
  float v23;
  float v24;
  uint64_t v25;
  float32x4_t v26;
  float v27;
  uint64_t v28;
  float32x4_t v29;
  char *v30;
  char *v31;
  float32x4_t v32;
  unsigned int v33;
  char *v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  float *v46;
  float v47;
  float v48;
  uint64_t v49;
  float32x4_t v50;
  float v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  int v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int8 v66;
  void *v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint8x8_t v74;
  _QWORD **v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  unsigned __int8 v82;
  float v83;
  float v84;
  _BOOL8 v85;
  unint64_t v86;
  unint64_t v87;
  size_t prime;
  void *v89;
  void *v90;
  uint64_t v91;
  _QWORD *v92;
  size_t v93;
  size_t v94;
  size_t v95;
  _QWORD *j;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint8x8_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  void (***v130)(_QWORD);
  void (***v131)(_QWORD);
  unsigned __int8 v132;
  uint64_t v133;
  geo::read_write_lock *v134;
  const char *v135;
  malloc_zone_t *v136;
  unint64_t v137;
  char *v138;
  _QWORD *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  unsigned __int8 v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t *v171;
  char *v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  void *v176;
  uint64_t v177;
  geo::read_write_lock *v178;
  const char *v179;
  malloc_zone_t *zone;
  uint64_t v181;
  geo::read_write_lock *v182;
  const char *v183;
  malloc_zone_t *v184;
  uint64_t v185;
  geo::read_write_lock *v186;
  const char *v187;
  malloc_zone_t *v188;
  uint64_t v189;
  geo::read_write_lock *v190;
  const char *v191;
  malloc_zone_t *v192;
  float v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  char **v197;
  float32x4_t v198;
  _QWORD *v199;
  _QWORD *v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  _DWORD *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  _QWORD v211[9];
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t (*v215)(uint64_t, _QWORD *);
  void (*v216)(uint64_t);
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  int v220;
  _QWORD v221[3];
  _QWORD *v222;
  uint64_t v223;

  v223 = *MEMORY[0x1E0C80C00];
  if (*a2)
    v2 = *a2 + 8;
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 40) - *(_QWORD *)(v2 + 32);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 32);
    v196 = v4 + 27;
    v197 = (char **)(v4 + 36);
    v200 = v4;
    v194 = *(_QWORD *)(a1 + 48);
    v195 = v4 + 29;
    v5 = 0x8E38E38E38E38E39 * (v3 >> 2);
    v6 = 0uLL;
    do
    {
      v212 = 0;
      v213 = &v212;
      v214 = 0x5812000000;
      v215 = __Block_byref_object_copy__4;
      v216 = __Block_byref_object_dispose__5;
      v217 = v6;
      v218 = v6;
      v219 = 0;
      v220 = 1065353216;
      v8 = *(_QWORD *)(v2 + 272);
      v7 = *(std::__shared_weak_count **)(v2 + 280);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      --v5;
      v11 = *(_QWORD *)(v2 + 32);
      v208 = (_DWORD *)(v11 + 36 * v5);
      v12 = v208 + 5;
      i = v208[5];
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 96) + 24))(*(_QWORD *)(v2 + 96));
      v15 = v208 + 7;
      v16 = v208[7];
      if (v16 < v208[5])
        goto LABEL_225;
      v17 = v14;
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 96) + 24))(*(_QWORD *)(v2 + 96));
      if (v17 <= (i + 1) || v18 <= v16 + 1)
        goto LABEL_225;
      v207 = v7;
      v20 = *v12;
      v21 = v11 + 36 * v5;
      v23 = *(float *)(v21 + 24);
      v22 = (float *)(v21 + 24);
      v24 = v23;
      if (v23 <= 0.0)
      {
        v31 = 0;
        v30 = 0;
      }
      else
      {
        v25 = (*(uint64_t (**)(_QWORD, _QWORD, float))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96), *v12, v24);
        v26.i64[0] = *(_QWORD *)v25;
        v26.i32[2] = *(_DWORD *)(v25 + 8);
        v201 = v26;
        v27 = *v22;
        v28 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96), *v12 + 1);
        v29.i64[0] = *(_QWORD *)v28;
        v29.i32[2] = *(_DWORD *)(v28 + 8);
        v198 = v29;
        v193 = *v22;
        v30 = (char *)operator new(0xCuLL);
        v31 = v30 + 12;
        v32 = vmlaq_n_f32(vmulq_n_f32(v201, 1.0 - v27), v198, v193);
        *((_DWORD *)v30 + 2) = v32.i32[2];
        *(_QWORD *)v30 = v32.i64[0];
        ++v20;
      }
      v33 = *v15;
      v34 = v31;
      while (v20 <= v33)
      {
        v35 = (int *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96), v20);
        v37 = *v35;
        v36 = v35[1];
        v38 = v35[2];
        if (v34 < v31)
        {
          *(_DWORD *)v34 = v37;
          *((_DWORD *)v34 + 1) = v36;
          *((_DWORD *)v34 + 2) = v38;
          v34 += 12;
        }
        else
        {
          v39 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v30) >> 2) + 1;
          if (v39 > 0x1555555555555555)
            abort();
          if (0x5555555555555556 * ((v31 - v30) >> 2) > v39)
            v39 = 0x5555555555555556 * ((v31 - v30) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v40 = 0x1555555555555555;
          else
            v40 = v39;
          if (v40)
          {
            if (v40 > 0x1555555555555555)
              goto LABEL_265;
            v41 = (char *)operator new(12 * v40);
          }
          else
          {
            v41 = 0;
          }
          v42 = &v41[4 * ((v34 - v30) >> 2)];
          *(_DWORD *)v42 = v37;
          *((_DWORD *)v42 + 1) = v36;
          *((_DWORD *)v42 + 2) = v38;
          for (i = (unint64_t)v42; v34 != v30; *(_DWORD *)(i + 8) = v44)
          {
            v43 = *(_QWORD *)(v34 - 12);
            v34 -= 12;
            v44 = *((_DWORD *)v34 + 2);
            *(_QWORD *)(i - 12) = v43;
            i -= 12;
          }
          v31 = &v41[12 * v40];
          v34 = v42 + 12;
          if (v30)
            operator delete(v30);
          v30 = (char *)i;
        }
        ++v20;
        v33 = *v15;
      }
      v45 = v11 + 36 * v5;
      v47 = *(float *)(v45 + 32);
      v46 = (float *)(v45 + 32);
      v48 = v47;
      if (v47 <= 0.0)
      {
        v55 = v34;
      }
      else
      {
        v49 = (*(uint64_t (**)(_QWORD, _QWORD, float))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96), v33, v48);
        v50.i64[0] = *(_QWORD *)v49;
        v50.i32[2] = *(_DWORD *)(v49 + 8);
        v202 = v50;
        v51 = *v46;
        v52 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 96) + 32))(*(_QWORD *)(v2 + 96), *v15 + 1);
        v53.i64[0] = *(_QWORD *)v52;
        v53.i32[2] = *(_DWORD *)(v52 + 8);
        v54 = vmlaq_n_f32(vmulq_n_f32(v202, 1.0 - v51), v53, *v46);
        if (v34 >= v31)
        {
          v56 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v30) >> 2) + 1;
          if (v56 > 0x1555555555555555)
            abort();
          if (0x5555555555555556 * ((v31 - v30) >> 2) > v56)
            v56 = 0x5555555555555556 * ((v31 - v30) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v56 = 0x1555555555555555;
          if (v56)
          {
            v203 = v54;
            if (v56 > 0x1555555555555555)
              goto LABEL_265;
            v57 = (char *)operator new(12 * v56);
            v54 = v203;
          }
          else
          {
            v57 = 0;
          }
          v58 = &v57[4 * ((v34 - v30) >> 2)];
          *(_QWORD *)v58 = v54.i64[0];
          *((_DWORD *)v58 + 2) = v54.i32[2];
          if (v34 == v30)
          {
            v30 = &v57[4 * ((v34 - v30) >> 2)];
            v55 = v58 + 12;
            if (!v34)
              goto LABEL_57;
LABEL_56:
            operator delete(v34);
            goto LABEL_57;
          }
          v59 = &v57[4 * ((v34 - v30) >> 2)];
          do
          {
            v60 = *(_QWORD *)(v34 - 12);
            v34 -= 12;
            v61 = *((_DWORD *)v34 + 2);
            *(_QWORD *)(v59 - 12) = v60;
            v59 -= 12;
            *((_DWORD *)v59 + 2) = v61;
          }
          while (v34 != v30);
          v34 = v30;
          v30 = v59;
          v55 = v58 + 12;
          if (v34)
            goto LABEL_56;
        }
        else
        {
          *((_DWORD *)v34 + 2) = v54.i32[2];
          *(_QWORD *)v34 = v54.i64[0];
          v55 = v34 + 12;
        }
      }
LABEL_57:
      {
        v177 = operator new();
        *(_QWORD *)(v177 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v177 + 24) = "VectorKitLabels";
        *(_OWORD *)(v177 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v177 = &off_1E42B5668;
        *(_QWORD *)(v177 + 8) = "VectorKitLabels";
        *(_OWORD *)(v177 + 72) = 0u;
        *(_OWORD *)(v177 + 88) = 0u;
        *(_OWORD *)(v177 + 104) = 0u;
        *(_OWORD *)(v177 + 120) = 0u;
        *(_OWORD *)(v177 + 136) = 0u;
        *(_OWORD *)(v177 + 152) = 0u;
        *(_OWORD *)(v177 + 168) = 0u;
        *(_OWORD *)(v177 + 184) = 0u;
        *(_OWORD *)(v177 + 200) = 0u;
        *(_OWORD *)(v177 + 216) = 0u;
        *(_OWORD *)(v177 + 232) = 0u;
        *(_QWORD *)(v177 + 248) = 0;
        *(_OWORD *)(v177 + 56) = 0u;
        v178 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v177 + 56), 0);
        if ((_DWORD)v178)
          geo::read_write_lock::logFailure(v178, (uint64_t)"initialization", v179);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v177 + 48) = zone;
        malloc_set_zone_name(zone, "VectorKitLabels");
        *(_QWORD *)(v177 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v177;
      }
      v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
      v64 = v63;
      *(_OWORD *)(v63 + 49) = 0u;
      *(_OWORD *)(v63 + 40) = 0u;
      v65 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v30) >> 2);
      *(_OWORD *)(v63 + 24) = 0u;
      *(_OWORD *)(v63 + 8) = 0u;
      *(_QWORD *)(v63 + 56) = v65;
      *(_QWORD *)v63 = off_1E42AF588;
      *(_QWORD *)(v63 + 80) = 0;
      *(_QWORD *)(v63 + 88) = 0;
      *(_QWORD *)(v63 + 72) = 0;
      v204 = v63;
      if (v55 == v30)
      {
        v68 = 0;
        v67 = 0;
      }
      else
      {
        *(_QWORD *)(v63 + 88) = v65;
        {
          v185 = operator new();
          *(_QWORD *)(v185 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v185 + 24) = "VectorKitLabels";
          *(_OWORD *)(v185 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v185 = &off_1E42B5668;
          *(_QWORD *)(v185 + 8) = "VectorKitLabels";
          *(_OWORD *)(v185 + 72) = 0u;
          *(_OWORD *)(v185 + 88) = 0u;
          *(_OWORD *)(v185 + 104) = 0u;
          *(_OWORD *)(v185 + 120) = 0u;
          *(_OWORD *)(v185 + 136) = 0u;
          *(_OWORD *)(v185 + 152) = 0u;
          *(_OWORD *)(v185 + 168) = 0u;
          *(_OWORD *)(v185 + 184) = 0u;
          *(_OWORD *)(v185 + 200) = 0u;
          *(_OWORD *)(v185 + 216) = 0u;
          *(_OWORD *)(v185 + 232) = 0u;
          *(_QWORD *)(v185 + 248) = 0;
          *(_OWORD *)(v185 + 56) = 0u;
          v186 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v185 + 56), 0);
          if ((_DWORD)v186)
            geo::read_write_lock::logFailure(v186, (uint64_t)"initialization", v187);
          v188 = malloc_create_zone(0, 0);
          *(_QWORD *)(v185 + 48) = v188;
          malloc_set_zone_name(v188, "VectorKitLabels");
          *(_QWORD *)(v185 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v185;
          v64 = v204;
        }
        v67 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 16))(mdm::Allocator::instance(void)::alloc, v55 - v30, 8);
        *(_QWORD *)(v64 + 72) = v67;
        *(_BYTE *)(v64 + 64) = 1;
        v68 = *(_QWORD *)(v64 + 88);
      }
      *(_QWORD *)v64 = off_1E429A498;
      *(_BYTE *)(v64 + 96) = *v208;
      memcpy(v67, v30, 12 * v68);
      v69 = v213;
      v70 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
      v71 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v70 >> 47) ^ v70);
      v72 = 0x9DDFEA08EB382D69 * (v71 ^ (v71 >> 47));
      v73 = v213[7];
      if (v73)
      {
        v74 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
        v74.i16[0] = vaddlv_u8(v74);
        if (v74.u32[0] > 1uLL)
        {
          i = 0x9DDFEA08EB382D69 * (v71 ^ (v71 >> 47));
          if (v72 >= v73)
            i = v72 % v73;
        }
        else
        {
          i = (v73 - 1) & v72;
        }
        v75 = *(_QWORD ***)(v213[6] + 8 * i);
        if (v75)
        {
          v76 = *v75;
          if (*v75)
          {
            if (v74.u32[0] < 2uLL)
            {
              while (1)
              {
                v78 = v76[1];
                if (v78 == v72)
                {
                  if (v76[2] == v8)
                    goto LABEL_148;
                }
                else if ((v78 & (v73 - 1)) != i)
                {
                  goto LABEL_82;
                }
                v76 = (_QWORD *)*v76;
                if (!v76)
                  goto LABEL_82;
              }
            }
            do
            {
              v77 = v76[1];
              if (v77 == v72)
              {
                if (v76[2] == v8)
                  goto LABEL_148;
              }
              else
              {
                if (v77 >= v73)
                  v77 %= v73;
                if (v77 != i)
                  break;
              }
              v76 = (_QWORD *)*v76;
            }
            while (v76);
          }
        }
      }
LABEL_82:
      v79 = operator new(0x40uLL);
      v76 = v79;
      *v79 = 0;
      v79[1] = v72;
      v79[2] = v8;
      v79[3] = v207;
      if (v207)
      {
        v80 = (unint64_t *)&v207->__shared_owners_;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v79[4] = 0;
      v79[5] = 0;
      v79[6] = 0;
      {
        v181 = operator new();
        *(_QWORD *)(v181 + 16) = 0x5ED09DD50000000FLL;
        *(_QWORD *)(v181 + 24) = "VectorKitLabels";
        *(_OWORD *)(v181 + 32) = xmmword_19FFB2E80;
        *(_QWORD *)v181 = &off_1E42B5668;
        *(_QWORD *)(v181 + 8) = "VectorKitLabels";
        *(_OWORD *)(v181 + 72) = 0u;
        *(_OWORD *)(v181 + 88) = 0u;
        *(_OWORD *)(v181 + 104) = 0u;
        *(_OWORD *)(v181 + 120) = 0u;
        *(_OWORD *)(v181 + 136) = 0u;
        *(_OWORD *)(v181 + 152) = 0u;
        *(_OWORD *)(v181 + 168) = 0u;
        *(_OWORD *)(v181 + 184) = 0u;
        *(_OWORD *)(v181 + 200) = 0u;
        *(_OWORD *)(v181 + 216) = 0u;
        *(_OWORD *)(v181 + 232) = 0u;
        *(_QWORD *)(v181 + 248) = 0;
        *(_OWORD *)(v181 + 56) = 0u;
        v182 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v181 + 56), 0);
        if ((_DWORD)v182)
          geo::read_write_lock::logFailure(v182, (uint64_t)"initialization", v183);
        v184 = malloc_create_zone(0, 0);
        *(_QWORD *)(v181 + 48) = v184;
        malloc_set_zone_name(v184, "VectorKitLabels");
        *(_QWORD *)(v181 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        mdm::Allocator::instance(void)::alloc = v181;
      }
      v199 = v69 + 8;
      v76[7] = mdm::Allocator::instance(void)::alloc;
      v83 = (float)(unint64_t)(v69[9] + 1);
      v84 = *((float *)v69 + 20);
      if (!v73 || (float)(v84 * (float)v73) < v83)
      {
        v85 = (v73 & (v73 - 1)) != 0;
        if (v73 < 3)
          v85 = 1;
        v86 = v85 | (2 * v73);
        v87 = vcvtps_u32_f32(v83 / v84);
        if (v86 <= v87)
          prime = v87;
        else
          prime = v86;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v73 = v69[7];
        if (prime <= v73)
        {
          if (prime < v73)
          {
            v100 = vcvtps_u32_f32((float)(unint64_t)v69[9] / *((float *)v69 + 20));
            if (v73 < 3
              || (v101 = (uint8x8_t)vcnt_s8((int8x8_t)v73), v101.i16[0] = vaddlv_u8(v101), v101.u32[0] > 1uLL))
            {
              v100 = std::__next_prime(v100);
            }
            else
            {
              v102 = 1 << -(char)__clz(v100 - 1);
              if (v100 >= 2)
                v100 = v102;
            }
            if (prime <= v100)
              prime = v100;
            if (prime >= v73)
            {
              v73 = v69[7];
            }
            else
            {
              if (prime)
                goto LABEL_98;
              v176 = (void *)v69[6];
              v69[6] = 0;
              if (v176)
                operator delete(v176);
              v73 = 0;
              v69[7] = 0;
            }
          }
LABEL_125:
          if ((v73 & (v73 - 1)) != 0)
          {
            if (v72 >= v73)
              i = v72 % v73;
            else
              i = v72;
          }
          else
          {
            i = (v73 - 1) & v72;
          }
          goto LABEL_138;
        }
LABEL_98:
        if (prime >> 61)
          goto LABEL_265;
        v89 = operator new(8 * prime);
        v90 = (void *)v69[6];
        v69[6] = (uint64_t)v89;
        if (v90)
          operator delete(v90);
        v91 = 0;
        v69[7] = prime;
        do
          *(_QWORD *)(v69[6] + 8 * v91++) = 0;
        while (prime != v91);
        v92 = (_QWORD *)*v199;
        if (!*v199)
          goto LABEL_124;
        v93 = v92[1];
        v94 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v95 = v93 & v94;
          *(_QWORD *)(v69[6] + 8 * v95) = v199;
          for (j = (_QWORD *)*v92; *v92; j = (_QWORD *)*v92)
          {
            v97 = j[1] & v94;
            if (v97 == v95)
            {
              v92 = j;
            }
            else
            {
              v98 = v69[6];
              if (*(_QWORD *)(v98 + 8 * v97))
              {
                *v92 = *j;
                v99 = 8 * v97;
                *j = **(_QWORD **)(v69[6] + v99);
                **(_QWORD **)(v69[6] + v99) = j;
              }
              else
              {
                *(_QWORD *)(v98 + 8 * v97) = v92;
                v92 = j;
                v95 = v97;
              }
            }
          }
          goto LABEL_124;
        }
        if (v93 >= prime)
          v93 %= prime;
        *(_QWORD *)(v69[6] + 8 * v93) = v199;
        v103 = (_QWORD *)*v92;
        if (!*v92)
        {
LABEL_124:
          v73 = prime;
          goto LABEL_125;
        }
        while (2)
        {
          v105 = v103[1];
          if (v105 >= prime)
            v105 %= prime;
          if (v105 != v93)
          {
            v106 = v69[6];
            if (!*(_QWORD *)(v106 + 8 * v105))
            {
              *(_QWORD *)(v106 + 8 * v105) = v92;
LABEL_129:
              v92 = v103;
              v103 = (_QWORD *)*v103;
              v93 = v105;
              if (!v103)
                goto LABEL_124;
              continue;
            }
            *v92 = *v103;
            v104 = 8 * v105;
            *v103 = **(_QWORD **)(v69[6] + v104);
            **(_QWORD **)(v69[6] + v104) = v103;
            v103 = v92;
          }
          break;
        }
        v105 = v93;
        goto LABEL_129;
      }
LABEL_138:
      v107 = v69[6];
      v108 = *(_QWORD **)(v107 + 8 * i);
      if (v108)
      {
        *v76 = *v108;
        v64 = v204;
LABEL_146:
        *v108 = v76;
        goto LABEL_147;
      }
      *v76 = *v199;
      *v199 = v76;
      *(_QWORD *)(v107 + 8 * i) = v199;
      v64 = v204;
      if (*v76)
      {
        v109 = *(_QWORD *)(*v76 + 8);
        if ((v73 & (v73 - 1)) != 0)
        {
          if (v109 >= v73)
            v109 %= v73;
        }
        else
        {
          v109 &= v73 - 1;
        }
        v108 = (_QWORD *)(v69[6] + 8 * v109);
        goto LABEL_146;
      }
LABEL_147:
      ++v69[9];
LABEL_148:
      v110 = (uint64_t *)v76[5];
      v111 = v76[6];
      if ((unint64_t)v110 < v111)
      {
        if (v110)
        {
          *v110 = v64;
          v64 = 0;
        }
        v112 = v110 + 1;
        goto LABEL_182;
      }
      v113 = v76[4];
      v114 = ((uint64_t)v110 - v113) >> 3;
      v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 61)
        abort();
      v116 = v111 - v113;
      if (v116 >> 2 > v115)
        v115 = v116 >> 2;
      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
        v117 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v117 = v115;
      if (v117)
      {
        v118 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v76[7] + 16))(v76[7], 8 * v117, 8);
        v119 = (uint64_t *)(v118 + 8 * v114);
        v120 = v118 + 8 * v117;
        if (v118)
        {
          *v119 = v204;
          v121 = 0;
          goto LABEL_163;
        }
      }
      else
      {
        v120 = 0;
        v119 = (uint64_t *)(8 * v114);
      }
      v121 = v204;
LABEL_163:
      v112 = v119 + 1;
      v122 = (char *)v76[4];
      v123 = (char *)v76[5];
      if (v123 != v122)
      {
        v124 = v123 - v122 - 8;
        if (v124 > 0x57
          && ((v125 = (v122 - v123 + 7) & 0xFFFFFFFFFFFFFFF8, &v123[v125] >= (char *)v119)
           || (char *)v119 + v125 >= v123))
        {
          v170 = (v124 >> 3) + 1;
          v126 = &v123[-8 * (v170 & 0x3FFFFFFFFFFFFFFCLL)];
          v171 = v119 - 2;
          v172 = v123 - 32;
          v173 = v170 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v175 = *(_OWORD *)v172;
            v174 = *((_OWORD *)v172 + 1);
            *(_OWORD *)v172 = 0uLL;
            *((_OWORD *)v172 + 1) = 0uLL;
            v172 -= 32;
            *((_OWORD *)v171 - 1) = v175;
            *(_OWORD *)v171 = v174;
            v171 -= 4;
            v173 -= 4;
          }
          while (v173);
          v119 -= v170 & 0x3FFFFFFFFFFFFFFCLL;
          if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_169:
            v123 = (char *)v76[4];
            v128 = (char *)v76[5];
            v76[4] = v119;
            v76[5] = v112;
            v129 = v76[6];
            v76[6] = v120;
            while (v128 != v123)
            {
              v131 = (void (***)(_QWORD))*((_QWORD *)v128 - 1);
              v128 -= 8;
              v130 = v131;
              *(_QWORD *)v128 = 0;
              if (v131)
              {
                (**v130)(v130);
                {
                  v133 = operator new();
                  *(_QWORD *)(v133 + 16) = 0x5ED09DD50000000FLL;
                  *(_QWORD *)(v133 + 24) = "VectorKitLabels";
                  *(_OWORD *)(v133 + 32) = xmmword_19FFB2E80;
                  *(_QWORD *)v133 = &off_1E42B5668;
                  *(_QWORD *)(v133 + 8) = "VectorKitLabels";
                  *(_OWORD *)(v133 + 72) = 0u;
                  *(_OWORD *)(v133 + 88) = 0u;
                  *(_OWORD *)(v133 + 104) = 0u;
                  *(_OWORD *)(v133 + 120) = 0u;
                  *(_OWORD *)(v133 + 136) = 0u;
                  *(_OWORD *)(v133 + 152) = 0u;
                  *(_OWORD *)(v133 + 168) = 0u;
                  *(_OWORD *)(v133 + 184) = 0u;
                  *(_OWORD *)(v133 + 200) = 0u;
                  *(_OWORD *)(v133 + 216) = 0u;
                  *(_OWORD *)(v133 + 232) = 0u;
                  *(_QWORD *)(v133 + 248) = 0;
                  v205 = v133;
                  *(_OWORD *)(v133 + 56) = 0u;
                  v134 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v133 + 56), 0);
                  if ((_DWORD)v134)
                    geo::read_write_lock::logFailure(v134, (uint64_t)"initialization", v135);
                  v136 = malloc_create_zone(0, 0);
                  *(_QWORD *)(v205 + 48) = v136;
                  malloc_set_zone_name(v136, "VectorKitLabels");
                  *(_QWORD *)(v205 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                  mdm::Allocator::instance(void)::alloc = v205;
                }
                (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                        + 40))(mdm::Allocator::instance(void)::alloc, v130, 104);
              }
            }
            goto LABEL_179;
          }
        }
        else
        {
          v126 = (char *)v76[5];
        }
        do
        {
          v127 = *((_QWORD *)v126 - 1);
          v126 -= 8;
          *(_QWORD *)v126 = 0;
          *--v119 = v127;
        }
        while (v126 != v122);
        goto LABEL_169;
      }
      v76[4] = v119;
      v76[5] = v112;
      v129 = v76[6];
      v76[6] = v120;
LABEL_179:
      if (v123)
        (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)v76[7] + 40))(v76[7], v123, v129 - (_QWORD)v123);
      v64 = v121;
LABEL_182:
      v76[5] = v112;
      v138 = (char *)v200[37];
      v137 = v200[38];
      if ((unint64_t)v138 >= v137)
      {
        v206 = v64;
        v140 = *v197;
        v141 = v138 - *v197;
        v142 = v141 >> 3;
        v143 = (v141 >> 3) + 1;
        if (v143 >> 61)
          abort();
        v144 = v137 - (_QWORD)v140;
        if (v144 >> 2 > v143)
          v143 = v144 >> 2;
        if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
          v145 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v145 = v143;
        if (v145)
        {
          if (v145 >> 61)
LABEL_265:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v146 = (char *)operator new(8 * v145);
        }
        else
        {
          v146 = 0;
        }
        v147 = &v146[8 * v142];
        v148 = &v146[8 * v145];
        *(_QWORD *)v147 = 0;
        v139 = v147 + 8;
        if (v138 == v140)
        {
          v64 = v206;
          v200[36] = v147;
          v200[37] = v139;
          v200[38] = v148;
        }
        else
        {
          v149 = v138 - v140 - 8;
          if (v149 <= 0x77
            || &v138[-(v149 & 0xFFFFFFFFFFFFFFF8) - 8] < v147
            && &v146[v141 - (v149 & 0xFFFFFFFFFFFFFFF8) - 8] < v138)
          {
            goto LABEL_271;
          }
          v150 = (v149 >> 3) + 1;
          v151 = &v146[8 * v142 - 16];
          v152 = v138 - 32;
          v153 = v150 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v155 = *(_OWORD *)v152;
            v154 = *((_OWORD *)v152 + 1);
            *(_OWORD *)v152 = 0uLL;
            *((_OWORD *)v152 + 1) = 0uLL;
            v152 -= 32;
            *((_OWORD *)v151 - 1) = v155;
            *(_OWORD *)v151 = v154;
            v151 -= 32;
            v153 -= 4;
          }
          while (v153);
          v147 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
          v138 -= 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
          if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_271:
            do
            {
              v156 = *((_QWORD *)v138 - 1);
              v138 -= 8;
              *(_QWORD *)v138 = 0;
              *((_QWORD *)v147 - 1) = v156;
              v147 -= 8;
            }
            while (v138 != v140);
          }
          v138 = (char *)v200[36];
          v157 = (char *)v200[37];
          v200[36] = v147;
          v200[37] = v139;
          v200[38] = v148;
          if (v157 == v138)
          {
            v64 = v206;
            if (!v138)
              goto LABEL_210;
LABEL_209:
            operator delete(v138);
            goto LABEL_210;
          }
          v64 = v206;
          do
          {
            v159 = *((_QWORD *)v157 - 1);
            v157 -= 8;
            v158 = v159;
            *(_QWORD *)v157 = 0;
            if (v159)
              (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
          }
          while (v157 != v138);
        }
        if (v138)
          goto LABEL_209;
      }
      else
      {
        *(_QWORD *)v138 = 0;
        v139 = v138 + 8;
      }
LABEL_210:
      v200[37] = v139;
      v160 = *(_QWORD *)(v194 + 736);
      v211[0] = MEMORY[0x1E0C809B0];
      v211[1] = 3221225472;
      v211[2] = ___ZNK2md16RouteLineSection15addArrowRibbonsERNSt3__16vectorINS1_10unique_ptrINS_19RouteLineArrowLayerENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEERKNS_13LayoutContextERKNS1_10shared_ptrIN3ggl17ConstantDataTypedINSG_4Tile4ViewEEEEERKNSF_INSH_INSI_9TransformEEEEE_block_invoke;
      v211[3] = &unk_1E42F4810;
      v211[4] = &v212;
      v211[5] = v197;
      v211[6] = v196;
      v211[7] = v195;
      v211[8] = v208;
      v222 = 0;
      v221[0] = &off_1E42C7118;
      v7 = v207;
      v221[1] = MEMORY[0x1A1AF5730](v211);
      v222 = v221;
      v209 = 0;
      v210 = 0;
      (*(void (**)(_QWORD, _QWORD *, uint64_t *))(**(_QWORD **)(v160 + 32) + 16))(*(_QWORD *)(v160 + 32), v221, &v209);
      v161 = v210;
      if (v210)
      {
        v162 = (unint64_t *)&v210->__shared_owners_;
        do
          v163 = __ldaxr(v162);
        while (__stlxr(v163 - 1, v162));
        if (!v163)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
      v164 = v222;
      if (v222 == v221)
      {
        v164 = v221;
        v165 = 4;
        goto LABEL_219;
      }
      if (v222)
      {
        v165 = 5;
LABEL_219:
        (*(void (**)(void))(*v164 + 8 * v165))();
      }
      if (v64)
      {
        (**(void (***)(uint64_t))v64)(v64);
        {
          v189 = operator new();
          *(_QWORD *)(v189 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v189 + 24) = "VectorKitLabels";
          *(_OWORD *)(v189 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v189 = &off_1E42B5668;
          *(_QWORD *)(v189 + 8) = "VectorKitLabels";
          *(_OWORD *)(v189 + 72) = 0u;
          *(_OWORD *)(v189 + 88) = 0u;
          *(_OWORD *)(v189 + 104) = 0u;
          *(_OWORD *)(v189 + 120) = 0u;
          *(_OWORD *)(v189 + 136) = 0u;
          *(_OWORD *)(v189 + 152) = 0u;
          *(_OWORD *)(v189 + 168) = 0u;
          *(_OWORD *)(v189 + 184) = 0u;
          *(_OWORD *)(v189 + 200) = 0u;
          *(_OWORD *)(v189 + 216) = 0u;
          *(_OWORD *)(v189 + 232) = 0u;
          *(_QWORD *)(v189 + 248) = 0;
          *(_OWORD *)(v189 + 56) = 0u;
          v190 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v189 + 56), 0);
          if ((_DWORD)v190)
            geo::read_write_lock::logFailure(v190, (uint64_t)"initialization", v191);
          v192 = malloc_create_zone(0, 0);
          *(_QWORD *)(v189 + 48) = v192;
          malloc_set_zone_name(v192, "VectorKitLabels");
          *(_QWORD *)(v189 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v189;
          v7 = v207;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v64, 104);
      }
      if (v30)
        operator delete(v30);
LABEL_225:
      if (v7)
      {
        v167 = (unint64_t *)&v7->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      _Block_object_dispose(&v212, 8);
      std::__hash_table<std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineArrowBatchKey,std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineArrowBatchKey>,std::equal_to<md::RouteLineArrowBatchKey>,true>,std::__unordered_map_equal<md::RouteLineArrowBatchKey,std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineArrowBatchKey>,std::hash<md::RouteLineArrowBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*((_QWORD **)&v218 + 1));
      v169 = (void *)*((_QWORD *)&v217 + 1);
      *((_QWORD *)&v217 + 1) = 0;
      if (v169)
        operator delete(v169);
      v6 = 0uLL;
    }
    while (v5);
  }
}

void sub_19F62BADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,_QWORD *a47)
{
  void *v47;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *v51;

  if (v47)
  {
    operator delete(v47);
    if (!a25)
      goto LABEL_10;
  }
  else if (!a25)
  {
    goto LABEL_10;
  }
  p_shared_owners = (unint64_t *)&a25->__shared_owners_;
  do
    v50 = __ldaxr(p_shared_owners);
  while (__stlxr(v50 - 1, p_shared_owners));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))a25->__on_zero_shared)(a25);
    std::__shared_weak_count::__release_weak(a25);
  }
LABEL_10:
  _Block_object_dispose(&a39, 8);
  std::__hash_table<std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineArrowBatchKey,std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineArrowBatchKey>,std::equal_to<md::RouteLineArrowBatchKey>,true>,std::__unordered_map_equal<md::RouteLineArrowBatchKey,std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineArrowBatchKey>,std::hash<md::RouteLineArrowBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineArrowBatchKey,std::vector<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineArrowRibbon,mdm::TypeDeleter<md::RouteLineArrowRibbon>>,mdm::Allocator>>>>>::__deallocate_node(a47);
  v51 = __p;
  __p = 0;
  if (!v51)
    _Unwind_Resume(a1);
  operator delete(v51);
  _Unwind_Resume(a1);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(_QWORD *result, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  void (***v17)(void);
  void (**v18)(void);
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v61;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[3];
  _QWORD *v71;
  _BYTE v72[24];
  _BYTE *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v4 = a3;
    for (i = result; i != a2; ++i)
    {
      v7 = *i;
      v8 = (_QWORD *)v4[3];
      if (v8)
      {
        if (v8 == v4)
        {
          v71 = v70;
          (*(void (**)(_QWORD *, _QWORD *))(*v4 + 24))(v4, v70);
        }
        else
        {
          v71 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
        }
      }
      else
      {
        v71 = 0;
      }
      if (!*(_BYTE *)(v7 + 272))
        goto LABEL_68;
      v10 = *(_QWORD *)(v7 + 168);
      v9 = *(_QWORD *)(v7 + 176);
      if (v9 != v10)
      {
        v11 = *(_QWORD *)(v7 + 176);
        do
        {
          v13 = *(void **)(v11 - 24);
          v11 -= 24;
          v12 = v13;
          if (v13)
          {
            *(_QWORD *)(v9 - 16) = v12;
            operator delete(v12);
          }
          v9 = v11;
        }
        while (v11 != v10);
      }
      *(_QWORD *)(v7 + 176) = v10;
      *(_QWORD *)(v7 + 152) = *(_QWORD *)(v7 + 144);
      v14 = *(_QWORD **)(v7 + 224);
      if (v14)
      {
        do
        {
          if (v14[1])
          {
            v16 = 0;
            v17 = (void (***)(void))(v14 + 2);
            do
            {
              v18 = *v17;
              v17 += 15;
              (*v18)();
              ++v16;
            }
            while (v16 < v14[1]);
          }
          v14[1] = 0;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
        v15 = *(_QWORD *)(v7 + 224);
      }
      else
      {
        v15 = 0;
      }
      *(_QWORD *)(v7 + 232) = v15;
      v19 = (uint64_t)v71;
      if (v71)
      {
        if (v71 == v70)
        {
          v73 = v72;
          (*(void (**)(_QWORD *, _BYTE *))(v70[0] + 24))(v70, v72);
          goto LABEL_30;
        }
        v19 = (*(uint64_t (**)(_QWORD *))(*v71 + 16))(v71);
      }
      v73 = (_BYTE *)v19;
LABEL_30:
      if (*(_BYTE *)(v7 + 272))
      {
        v61 = i;
        if (*(_BYTE *)(v7 + 136))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 56);
          *(_QWORD *)(v7 + 40) = v20;
          v21 = *(unsigned __int8 *)(v20 + 58) == 1;
        }
        else
        {
          v21 = 0;
        }
        v22 = *(uint64_t **)(v7 + 248);
        v23 = *(uint64_t **)(v7 + 256);
        if (v22 != v23)
        {
          v24 = 0;
          while (1)
          {
            v25 = *v22;
            if (*(_BYTE *)(*v22 + 48))
            {
              if (*(_QWORD *)(v25 + 88) != v24)
              {
                if (v24)
                {
                  v26 = ggl::Batcher::commit((__int128 **)(v7 + 144), 0xC8u, a4);
                  if (v26[1] != *v26)
                  {
                    if (*(_BYTE *)(v7 + 136))
                    {
                      v27 = v26;
                      v29 = *(_QWORD *)(v7 + 24);
                      v28 = *(_QWORD *)(v7 + 32);
                      v30 = *(_OWORD *)(v7 + 88);
                      v66 = *(_OWORD *)(v7 + 72);
                      v67 = v30;
                      v31 = *(_OWORD *)(v7 + 120);
                      v68 = *(_OWORD *)(v7 + 104);
                      v69 = v31;
                      v32 = *(_OWORD *)(v7 + 56);
                      v64 = *(_OWORD *)(v7 + 40);
                      v65 = v32;
                      v33 = *(_QWORD **)(v7 + 232);
                      v34 = v33[1];
                      if (v34 == *(_QWORD *)(v7 + 240))
                      {
                        v33 = (_QWORD *)*v33;
                        if (!v33)
                        {
                          v33 = malloc_type_malloc(120 * v34 + 16, 0xB644C221uLL);
                          *v33 = 0;
                          v33[1] = 0;
                          **(_QWORD **)(v7 + 232) = v33;
                        }
                        *(_QWORD *)(v7 + 232) = v33;
                        v34 = v33[1];
                      }
                      v35 = &v33[15 * v34];
                      v33[1] = v34 + 1;
                      v35[2] = &off_1E42B59B0;
                      v35[3] = v29;
                      v35 += 2;
                      v35[2] = v28;
                      v36 = v68;
                      v37 = v69;
                      v38 = v67;
                      *(_OWORD *)(v35 + 7) = v66;
                      v39 = v64;
                      *(_OWORD *)(v35 + 5) = v65;
                      *(_OWORD *)(v35 + 3) = v39;
                      *(_OWORD *)(v35 + 13) = v37;
                      *(_OWORD *)(v35 + 11) = v36;
                      *(_OWORD *)(v35 + 9) = v38;
                      v35[8] = v24;
                      v40 = *v27;
                      v35[11] = *v27;
                      v35[12] = (v27[1] - v40) >> 4;
                      v63 = 0;
                      *(_QWORD *)&v64 = v35;
                      if (!v73)
                        goto LABEL_72;
                      (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v73 + 48))(v73, &v63, &v64);
                    }
                  }
                }
                v25 = *v22;
                v24 = *(_QWORD *)(*v22 + 88);
              }
              v41 = 32;
              if (v21)
              {
                v42 = v25 + 32;
              }
              else
              {
                v41 = 16;
                v42 = v25 + 16;
              }
              if (*(_QWORD *)(v42 + 8) != *(_QWORD *)(v25 + v41))
                gm::MultiRange<unsigned long>::push_back((char **)(v7 + 144), (_OWORD *)v42);
            }
            if (++v22 == v23)
              goto LABEL_55;
          }
        }
        v24 = 0;
LABEL_55:
        v43 = ggl::Batcher::commit((__int128 **)(v7 + 144), 0xC8u, a4);
        v4 = a3;
        i = v61;
        if (v43[1] != *v43 && *(_BYTE *)(v7 + 136))
        {
          v44 = v43;
          v45 = *(_QWORD *)(v7 + 24);
          v46 = *(_QWORD *)(v7 + 32);
          v47 = *(_OWORD *)(v7 + 88);
          v66 = *(_OWORD *)(v7 + 72);
          v67 = v47;
          v48 = *(_OWORD *)(v7 + 120);
          v68 = *(_OWORD *)(v7 + 104);
          v69 = v48;
          v49 = *(_OWORD *)(v7 + 56);
          v64 = *(_OWORD *)(v7 + 40);
          v65 = v49;
          v50 = *(_QWORD **)(v7 + 232);
          v51 = v50[1];
          if (v51 == *(_QWORD *)(v7 + 240))
          {
            v50 = (_QWORD *)*v50;
            if (!v50)
            {
              v50 = malloc_type_malloc(120 * v51 + 16, 0xB644C221uLL);
              *v50 = 0;
              v50[1] = 0;
              **(_QWORD **)(v7 + 232) = v50;
            }
            *(_QWORD *)(v7 + 232) = v50;
            v51 = v50[1];
          }
          v52 = &v50[15 * v51];
          v50[1] = v51 + 1;
          v52[2] = &off_1E42B59B0;
          v52[3] = v45;
          v52 += 2;
          v52[2] = v46;
          v53 = v68;
          v54 = v69;
          v55 = v67;
          *(_OWORD *)(v52 + 7) = v66;
          v56 = v64;
          *(_OWORD *)(v52 + 5) = v65;
          *(_OWORD *)(v52 + 3) = v56;
          *(_OWORD *)(v52 + 13) = v54;
          *(_OWORD *)(v52 + 11) = v53;
          *(_OWORD *)(v52 + 9) = v55;
          v52[8] = v24;
          v57 = *v44;
          v52[11] = *v44;
          v52[12] = (v44[1] - v57) >> 4;
          v63 = 0;
          *(_QWORD *)&v64 = v52;
          if (!v73)
          {
LABEL_72:
            std::__throw_bad_function_call[abi:nn180100]();
            __break(1u);
          }
          (*(void (**)(_BYTE *, int *, __int128 *))(*(_QWORD *)v73 + 48))(v73, &v63, &v64);
          v4 = a3;
          i = v61;
        }
      }
      v58 = v73;
      if (v73 == v72)
      {
        v58 = v72;
        v59 = 4;
      }
      else
      {
        if (!v73)
          goto LABEL_68;
        v59 = 5;
      }
      (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_68:
      result = v71;
      if (v71 == v70)
      {
        result = v70;
        v6 = 4;
      }
      else
      {
        if (!v71)
          continue;
        v6 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
    }
  }
  return result;
}

void sub_19F62C3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33)
{
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v35 = a33;
  if (a33 == (_QWORD *)(v33 - 136))
  {
    v36 = 4;
    v35 = (_QWORD *)(v33 - 136);
  }
  else
  {
    if (!a33)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_6:
  v37 = a29;
  if (a29 == &a26)
  {
    v38 = 4;
    v37 = &a26;
  }
  else
  {
    if (!a29)
      _Unwind_Resume(exception_object);
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
  _Unwind_Resume(exception_object);
}

void md::RouteLineArrowContext::~RouteLineArrowContext(id *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)this[21];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void ___ZN2md16RouteRenderLayer13layoutOverlayERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEbPN3ggl13CommandBufferE_block_invoke_36(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  unint64_t *v10;
  unsigned __int8 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t *v19;
  __int128 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int16x4_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64x2_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  geo::read_write_lock *v78;
  const char *v79;
  malloc_zone_t *zone;
  int v81;
  uint64_t v82;
  geo::read_write_lock *v83;
  const char *v84;
  malloc_zone_t *v85;
  unsigned __int8 v86;
  uint64_t v87;
  geo::read_write_lock *v88;
  const char *v89;
  malloc_zone_t *v90;
  uint64_t v91;
  geo::read_write_lock *v92;
  const char *v93;
  malloc_zone_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char *v112;
  char *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  char *v116;
  std::__shared_weak_count *v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = operator new();
  v7 = *(void **)(*(_QWORD *)(a1 + 40) + 160);
  if (!v7)
  {
    v112 = 0;
    v113 = 0;
    goto LABEL_5;
  }
  objc_msgSend(v7, "maneuverPoints");
  v8 = *(void **)(*(_QWORD *)(a1 + 40) + 160);
  if (!v8)
  {
LABEL_5:
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    goto LABEL_6;
  }
  objc_msgSend(v8, "maneuverTransform");
LABEL_6:
  v103 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 40);
  *(_QWORD *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  v9 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v9 + 1) = 0;
  v10 = (unint64_t *)(v9 + 8);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_1E42DFCA0;
  *((_QWORD *)v9 + 3) = &off_1E42B5748;
  v101 = v9 + 24;
  *((_QWORD *)v9 + 4) = 16;
  *((_DWORD *)v9 + 10) = 1;
  *((_QWORD *)v9 + 6) = 0;
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 9) = 8 * (v113 - v112);
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  *((_QWORD *)v9 + 14) = 0;
  v99 = a2;
  {
    v76 = v5;
    v77 = operator new();
    *(_QWORD *)(v77 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v77 + 24) = "GeoGL";
    *(_OWORD *)(v77 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v77 = &off_1E42B5668;
    *(_QWORD *)(v77 + 8) = "GeoGL";
    *(_OWORD *)(v77 + 72) = 0u;
    *(_OWORD *)(v77 + 88) = 0u;
    *(_OWORD *)(v77 + 104) = 0u;
    *(_OWORD *)(v77 + 120) = 0u;
    *(_OWORD *)(v77 + 136) = 0u;
    *(_OWORD *)(v77 + 152) = 0u;
    *(_OWORD *)(v77 + 168) = 0u;
    *(_OWORD *)(v77 + 184) = 0u;
    *(_OWORD *)(v77 + 200) = 0u;
    *(_OWORD *)(v77 + 216) = 0u;
    *(_OWORD *)(v77 + 232) = 0u;
    *(_QWORD *)(v77 + 248) = 0;
    *(_OWORD *)(v77 + 56) = 0u;
    v78 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v77 + 56), 0);
    if ((_DWORD)v78)
      geo::read_write_lock::logFailure(v78, (uint64_t)"initialization", v79);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v77 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v77 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v77;
    v5 = v76;
  }
  *((_QWORD *)v9 + 15) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)v9 + 16) = 0;
  *((_OWORD *)v9 + 11) = 0u;
  *((_OWORD *)v9 + 12) = 0u;
  *((_QWORD *)v9 + 26) = 0;
  *((_QWORD *)v9 + 27) = -1;
  *((_OWORD *)v9 + 9) = xmmword_19FFB2DD0;
  *((_OWORD *)v9 + 10) = 0u;
  *((_DWORD *)v9 + 34) = 0;
  *((_QWORD *)v9 + 29) = "maneuver points";
  *((_QWORD *)v9 + 30) = &ggl::ManeuverPoint::defaultVboReflection;
  v12 = *((_QWORD *)v9 + 4) * ((v113 - v112) >> 1);
  *((_QWORD *)v9 + 3) = &off_1E42B78E0;
  *((_QWORD *)v9 + 28) = &unk_1E42B7900;
  v95 = v5;
  if (v12)
  {
    if (!a2 || v9[41] == 2)
      v102 = *((_QWORD *)v9 + 12);
    else
      v102 = (*(uint64_t (**)(uint64_t, char *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v101, 0, v12, 1, 1);
  }
  else
  {
    v102 = 0;
  }
  v13 = v112;
  v14 = (v113 - v112) >> 3;
  if (v113 != v112)
  {
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = (v113 - v112) >> 3;
    v16 = v102 + 32;
    do
    {
      *(_QWORD *)(v16 - 32) = *(_QWORD *)v13;
      *(_DWORD *)(v16 - 24) = -2147450880;
      *(_QWORD *)(v16 - 16) = *(_QWORD *)v13;
      *(_DWORD *)(v16 - 8) = -2147450881;
      *(_QWORD *)v16 = *(_QWORD *)v13;
      *(_DWORD *)(v16 + 8) = 2147450880;
      v17 = *(_QWORD *)v13;
      v13 += 8;
      *(_QWORD *)(v16 + 16) = v17;
      *(_DWORD *)(v16 + 24) = 2147450879;
      v16 += 64;
      --v15;
    }
    while (v15);
  }
  v97 = v12;
  v18 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v18 + 1) = 0;
  v19 = (unint64_t *)(v18 + 8);
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_1E42DF1E8;
  *((_QWORD *)v18 + 3) = &off_1E42B5748;
  v100 = v18 + 24;
  *((_QWORD *)v18 + 4) = 2;
  *((_DWORD *)v18 + 10) = 257;
  *((_QWORD *)v18 + 6) = 0;
  *((_QWORD *)v18 + 7) = 0;
  *((_QWORD *)v18 + 8) = 0;
  *((_QWORD *)v18 + 9) = 12 * v14;
  v20 = 0uLL;
  *((_OWORD *)v18 + 5) = 0u;
  *((_OWORD *)v18 + 6) = 0u;
  *((_QWORD *)v18 + 14) = 0;
  if ((v21 & 1) == 0)
  {
    v20 = 0uLL;
    if (v81)
    {
      v82 = operator new();
      *(_QWORD *)(v82 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v82 + 24) = "GeoGL";
      *(_OWORD *)(v82 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v82 = &off_1E42B5668;
      *(_QWORD *)(v82 + 8) = "GeoGL";
      *(_OWORD *)(v82 + 72) = 0u;
      *(_OWORD *)(v82 + 88) = 0u;
      *(_OWORD *)(v82 + 104) = 0u;
      *(_OWORD *)(v82 + 120) = 0u;
      *(_OWORD *)(v82 + 136) = 0u;
      *(_OWORD *)(v82 + 152) = 0u;
      *(_OWORD *)(v82 + 168) = 0u;
      *(_OWORD *)(v82 + 184) = 0u;
      *(_OWORD *)(v82 + 200) = 0u;
      *(_OWORD *)(v82 + 216) = 0u;
      *(_OWORD *)(v82 + 232) = 0u;
      *(_QWORD *)(v82 + 248) = 0;
      *(_OWORD *)(v82 + 56) = 0u;
      v83 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v82 + 56), 0);
      if ((_DWORD)v83)
        geo::read_write_lock::logFailure(v83, (uint64_t)"initialization", v84);
      v85 = malloc_create_zone(0, 0);
      *(_QWORD *)(v82 + 48) = v85;
      malloc_set_zone_name(v85, "GeoGL");
      *(_QWORD *)(v82 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v82;
      v20 = 0uLL;
    }
  }
  *((_QWORD *)v18 + 15) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)v18 + 16) = 0;
  *((_OWORD *)v18 + 11) = v20;
  *((_OWORD *)v18 + 12) = v20;
  *((_QWORD *)v18 + 26) = 0;
  *((_QWORD *)v18 + 27) = -1;
  *((_OWORD *)v18 + 10) = v20;
  *((_OWORD *)v18 + 9) = xmmword_19FFB2DD0;
  *((_DWORD *)v18 + 34) = 0;
  *((_DWORD *)v18 + 60) = 0;
  *((_QWORD *)v18 + 3) = &off_1E42B6B88;
  *((_QWORD *)v18 + 4) = 2;
  *((_QWORD *)v18 + 28) = &unk_1E42B6BA8;
  *((_QWORD *)v18 + 29) = "maneuver indices";
  v96 = 4 * (((v113 - v112) >> 2) + ((v113 - v112) >> 3));
  if (v96)
  {
    if (!a2 || v18[41] == 2)
      v22 = *((_QWORD *)v18 + 12);
    else
      v22 = (*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a2 + 56))(a2, v100, 0);
  }
  else
  {
    v22 = 0;
  }
  if (v113 != v112)
  {
    v23 = 0;
    v24 = (v113 - v112) >> 3;
    if (v24 <= 1)
      v24 = 1;
    v25 = v22;
    do
    {
      *(_WORD *)v25 = 4 * v23;
      v26 = (int16x4_t)vorr_s8((int8x8_t)vdup_n_s32(4 * (int)v23), (int8x8_t)0x200000001);
      *(int16x4_t *)(v25 + 2) = vuzp1_s16(v26, v26);
      *(_WORD *)(v25 + 10) = (4 * v23++) | 3;
      v25 += 12;
    }
    while (v24 != v23);
  }
  v98 = v22;
  v27 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v27->__shared_owners_ = 0;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2278;
  v28 = ggl::BufferData::BufferData((uint64_t)&v27[1], qword_1EE54ADE0, 2, 1, 6, 1);
  v27[9].__shared_owners_ = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97B0;
  v114 = v28;
  v115 = v27;
  v29 = operator new();
  v30 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v30->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E13D0;
  v32 = ggl::BufferData::BufferData((uint64_t)&v30[1], qword_1EE543380, 2, 1, 6, 1);
  v30[9].__shared_owners_ = (uint64_t)ggl::ManeuverPoint::Style::reflection(void)::reflection;
  v30[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EF0;
  v116 = (char *)v32;
  v117 = v30;
  ggl::ManeuverPoint::BasePipelineSetup::BasePipelineSetup(v29, *(_QWORD *)v103, *(std::__shared_weak_count **)(v103 + 8), &v114, (uint64_t *)&v116, *(_QWORD *)(*(_QWORD *)(v103 + 16) + 24));
  v33 = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v29;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  do
    v34 = __ldaxr(p_shared_owners);
  while (__stlxr(v34 - 1, p_shared_owners));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  v35 = operator new();
  v36 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v36->__shared_owners_ = 0;
  v37 = (unint64_t *)&v36->__shared_owners_;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E13D0;
  v38 = ggl::BufferData::BufferData((uint64_t)&v36[1], qword_1EE543380, 2, 1, 6, 1);
  v36[9].__shared_owners_ = (uint64_t)ggl::ManeuverPoint::Style::reflection(void)::reflection;
  v36[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8EF0;
  v116 = (char *)v38;
  v117 = v36;
  ggl::ManeuverPoint::BasePipelineSetup::BasePipelineSetup(v35, *(_QWORD *)v103, *(std::__shared_weak_count **)(v103 + 8), &v114, (uint64_t *)&v116, *(_QWORD *)(*(_QWORD *)(v103 + 16) + 24));
  v39 = *(_QWORD *)(v6 + 48);
  *(_QWORD *)(v6 + 48) = v35;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  do
    v40 = __ldaxr(v37);
  while (__stlxr(v40 - 1, v37));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  v41 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v41 + 1) = 0;
  *((_QWORD *)v41 + 2) = 0;
  *(_QWORD *)v41 = &off_1E42DEED8;
  do
    v42 = __ldxr(v10);
  while (__stxr(v42 + 1, v10));
  do
    v43 = __ldxr(v19);
  while (__stxr(v43 + 1, v19));
  if ((v44 & 1) == 0
  {
    if ((v86 & 1) == 0
    {
      ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::ManeuverPoint::defaultVboReflection;
    }
    ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::attributesReflection(void)::r;
    unk_1ECE43B88 = 1;
  }
  *((_QWORD *)v41 + 11) = 0;
  *((_QWORD *)v41 + 7) = 0;
  *((_QWORD *)v41 + 8) = 0;
  *((_DWORD *)v41 + 18) = 0;
  *((_QWORD *)v41 + 3) = &off_1E42BBC08;
  *((_QWORD *)v41 + 4) = "mp mesh";
  *((_QWORD *)v41 + 5) = &unk_1E42BBC28;
  *((_QWORD *)v41 + 6) = 0;
  *((_QWORD *)v41 + 10) = &ggl::MeshTyped<ggl::ManeuverPoint::DefaultVbo>::typedReflection(void)::r;
  *((_QWORD *)v41 + 12) = 0;
  *((_QWORD *)v41 + 13) = 0;
  {
    v87 = operator new();
    *(_QWORD *)(v87 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v87 + 24) = "GeoGL";
    *(_OWORD *)(v87 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v87 = &off_1E42B5668;
    *(_QWORD *)(v87 + 8) = "GeoGL";
    *(_OWORD *)(v87 + 72) = 0u;
    *(_OWORD *)(v87 + 88) = 0u;
    *(_OWORD *)(v87 + 104) = 0u;
    *(_OWORD *)(v87 + 120) = 0u;
    *(_OWORD *)(v87 + 136) = 0u;
    *(_OWORD *)(v87 + 152) = 0u;
    *(_OWORD *)(v87 + 168) = 0u;
    *(_OWORD *)(v87 + 184) = 0u;
    *(_OWORD *)(v87 + 200) = 0u;
    *(_OWORD *)(v87 + 216) = 0u;
    *(_OWORD *)(v87 + 232) = 0u;
    *(_QWORD *)(v87 + 248) = 0;
    *(_OWORD *)(v87 + 56) = 0u;
    v88 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v87 + 56), 0);
    if ((_DWORD)v88)
      geo::read_write_lock::logFailure(v88, (uint64_t)"initialization", v89);
    v90 = malloc_create_zone(0, 0);
    *(_QWORD *)(v87 + 48) = v90;
    malloc_set_zone_name(v90, "GeoGL");
    *(_QWORD *)(v87 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v87;
  }
  v46 = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)v41 + 18) = 0;
  *((_QWORD *)v41 + 15) = 0;
  *((_QWORD *)v41 + 16) = 0;
  *((_QWORD *)v41 + 14) = v46;
  {
    v91 = operator new();
    *(_QWORD *)(v91 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v91 + 24) = "GeoGL";
    *(_OWORD *)(v91 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v91 = &off_1E42B5668;
    *(_QWORD *)(v91 + 8) = "GeoGL";
    *(_OWORD *)(v91 + 72) = 0u;
    *(_OWORD *)(v91 + 88) = 0u;
    *(_OWORD *)(v91 + 104) = 0u;
    *(_OWORD *)(v91 + 120) = 0u;
    *(_OWORD *)(v91 + 136) = 0u;
    *(_OWORD *)(v91 + 152) = 0u;
    *(_OWORD *)(v91 + 168) = 0u;
    *(_OWORD *)(v91 + 184) = 0u;
    *(_OWORD *)(v91 + 200) = 0u;
    *(_OWORD *)(v91 + 216) = 0u;
    *(_OWORD *)(v91 + 232) = 0u;
    *(_QWORD *)(v91 + 248) = 0;
    *(_OWORD *)(v91 + 56) = 0u;
    v92 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v91 + 56), 0);
    if ((_DWORD)v92)
      geo::read_write_lock::logFailure(v92, (uint64_t)"initialization", v93);
    v94 = malloc_create_zone(0, 0);
    *(_QWORD *)(v91 + 48) = v94;
    malloc_set_zone_name(v94, "GeoGL");
    *(_QWORD *)(v91 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v91;
  }
  *((_QWORD *)v41 + 19) = ggl::Allocator::instance(void)::alloc;
  *((_QWORD *)v41 + 20) = 0;
  *((_QWORD *)v41 + 17) = v41 + 144;
  *((_QWORD *)v41 + 3) = &off_1E42BD578;
  *((_QWORD *)v41 + 5) = &unk_1E42BD598;
  v116 = v9 + 24;
  v117 = (std::__shared_weak_count *)v9;
  do
    v47 = __ldxr(v10);
  while (__stxr(v47 + 1, v10));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)(v41 + 88), (uint64_t *)&v116, &v118, 1uLL);
  v48 = v117;
  if (v117)
  {
    v49 = (unint64_t *)&v117->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  do
    v51 = __ldxr(v19);
  while (__stxr(v51 + 1, v19));
  v52 = (std::__shared_weak_count *)*((_QWORD *)v41 + 16);
  *((_QWORD *)v41 + 15) = v100;
  *((_QWORD *)v41 + 16) = v18;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  *((_QWORD *)v41 + 3) = &off_1E42B6630;
  *((_QWORD *)v41 + 5) = &unk_1E42B6650;
  do
    v55 = __ldaxr(v19);
  while (__stlxr(v55 - 1, v19));
  if (!v55)
  {
    (*(void (**)(char *))(*(_QWORD *)v18 + 16))(v18);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
  }
  do
    v56 = __ldaxr(v10);
  while (__stlxr(v56 - 1, v10));
  if (!v56)
  {
    (*(void (**)(char *))(*(_QWORD *)v9 + 16))(v9);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
  }
  v57 = *(std::__shared_weak_count **)(v6 + 8);
  *(_QWORD *)v6 = v41 + 24;
  *(_QWORD *)(v6 + 8) = v41;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = operator new();
  *(_DWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 16) = 0;
  *(_QWORD *)(v60 + 24) = 0;
  *(_QWORD *)v60 = &off_1E42B5DE8;
  *(_QWORD *)(v60 + 8) = 0;
  *(_QWORD *)(v60 + 36) = 65537;
  *(_DWORD *)(v60 + 44) = 0;
  *(_QWORD *)(v60 + 48) = 1;
  *(_WORD *)(v60 + 56) = 0;
  *(_BYTE *)(v60 + 58) = 3;
  *(_QWORD *)(v60 + 67) = 0;
  *(_QWORD *)(v60 + 59) = 0;
  *(_BYTE *)(v60 + 75) = 0;
  *(_QWORD *)(v60 + 132) = 0;
  *(_QWORD *)(v60 + 124) = 0;
  *(_WORD *)(v60 + 188) = 257;
  *(_QWORD *)(v60 + 192) = 0;
  *(_QWORD *)(v60 + 200) = 0;
  *(_BYTE *)(v60 + 208) = 0;
  v61 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = v60;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = operator new();
  v63 = *(_QWORD *)v6;
  *(_QWORD *)v62 = &off_1E42B59B0;
  *(_QWORD *)(v62 + 16) = "mp fill renderitem";
  *(_OWORD *)(v62 + 24) = *(_OWORD *)(v6 + 32);
  *(_DWORD *)(v62 + 40) = 0;
  *(_QWORD *)(v62 + 48) = 0;
  *(_DWORD *)(v62 + 56) = 1065353216;
  *(_QWORD *)(v62 + 64) = v63;
  *(_QWORD *)(v62 + 72) = 0;
  *(_QWORD *)(v62 + 80) = 0;
  *(_QWORD *)(v62 + 88) = 0;
  *(int64x2_t *)(v62 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v62 + 112) = 0;
  v64 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = v62;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = (int64x2_t *)operator new();
  v66 = *(_QWORD *)(v6 + 48);
  v67 = *(_QWORD *)v6;
  v65->i64[0] = (uint64_t)&off_1E42B59B0;
  v68 = *(_QWORD *)(v6 + 24);
  v69 = *(_QWORD *)(v6 + 32);
  v65[1].i64[0] = (uint64_t)"mp stroke renderitem";
  v65[1].i64[1] = v69;
  v65[2].i64[0] = v66;
  v65[2].i32[2] = 0;
  v65[3].i64[0] = 0;
  v65[3].i32[2] = 1065353216;
  v65[4].i64[0] = v67;
  v65[4].i64[1] = 0;
  v65[5].i64[0] = 0;
  v65[5].i64[1] = 0;
  v65[6] = vdupq_n_s64(1uLL);
  v65[7].i64[0] = 0;
  *(_QWORD *)(v6 + 24) = v65;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  *(_OWORD *)(v6 + 56) = v104;
  *(_OWORD *)(v6 + 72) = v105;
  *(_OWORD *)(v6 + 88) = v106;
  *(_OWORD *)(v6 + 104) = v107;
  *(_OWORD *)(v6 + 120) = v108;
  *(_OWORD *)(v6 + 136) = v109;
  *(_OWORD *)(v6 + 152) = v110;
  *(_OWORD *)(v6 + 168) = v111;
  *(_DWORD *)(v6 + 184) = *(_DWORD *)(*(_QWORD *)(v103 + 16) + 16);
  v70 = v115;
  if (v115)
  {
    v71 = (unint64_t *)&v115->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v98 && v96 && v99 && v18[41] != 2)
    (*(void (**)(uint64_t, uint64_t, char *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v99 + 64))(v99, v98, v100, 0, v96, 1, 1);
  do
    v73 = __ldaxr(v19);
  while (__stlxr(v73 - 1, v19));
  if (!v73)
  {
    (*(void (**)(char *))(*(_QWORD *)v18 + 16))(v18);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v18);
  }
  if (v102 && v97 && v99 && v9[41] != 2)
    (*(void (**)(uint64_t, uint64_t, char *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v99 + 64))(v99, v102, v101, 0, v97, 1, 1);
  do
    v74 = __ldaxr(v10);
  while (__stlxr(v74 - 1, v10));
  if (!v74)
  {
    (*(void (**)(char *))(*(_QWORD *)v9 + 16))(v9);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
  }
  v75 = *(_QWORD **)(v95 + 344);
  *(_QWORD *)(v95 + 344) = v6;
  if (v75)
    std::default_delete<md::ManeuverPointSet>::operator()[abi:nn180100](v75);
  if (v112)
    operator delete(v112);
}

void sub_19F62D4AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 152);
  if (v4)
  {
    *(_QWORD *)(v2 - 144) = v4;
    operator delete(v4);
  }
  MEMORY[0x1A1AF4E00](v1, 0x1020C40A59E487DLL);
  _Unwind_Resume(a1);
}

void md::RouteRenderLayer::layoutDebugRouteLinePoints(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  id v62;
  __int128 *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  void *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t *v77;
  unint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _OWORD *v113;
  __int128 *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t *v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _OWORD *v157;
  __int128 *v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  __int128 *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  _QWORD *v193;
  int8x8_t v194;
  uint8x8_t v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  unsigned __int8 v204;
  unsigned __int8 v205;
  void *v206;
  _QWORD *v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  _BYTE *v213;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id WeakRetained;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  unint64_t v224;
  _QWORD *v226;
  unint64_t v227;
  float v229;
  uint64_t v230;
  int32x4_t v231;
  int32x4_t v232;
  float *v233;
  int v234;
  unint64_t v235;
  float v236;
  float v237;
  float v238;
  uint64_t v239;
  void *v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  _OWORD *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _OWORD *v253;
  _OWORD *v254;
  uint64_t v255;
  int v256;
  char *v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _BYTE *v263;
  _BYTE *v264;
  _BYTE *v265;
  _BYTE *v266;
  char v267;
  _OWORD *v268;
  __int128 *v269;
  unint64_t v270;
  __int128 v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  __int128 *v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  __int128 *v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _DWORD *v331;
  uint64_t v332;
  uint64_t v333;
  float32x4_t v334;
  float32x4_t v335;
  _QWORD *v336;
  _QWORD *v337;
  unint64_t v338;
  float32x4_t *v339;
  _QWORD *v340;
  unint64_t v341;
  ggl::RenderItem *v342;
  uint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  unint64_t v346;
  float32x4_t *v347;
  _QWORD *v348;
  unint64_t v349;
  ggl::RenderItem *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  void *v353;
  std::__shared_weak_count *v354;
  _QWORD *v355;
  _QWORD *shared_weak_owners;
  unsigned __int8 v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int32x4_t v368;
  float32x4_t v369;
  uint64_t v371;
  float32x4_t v372;
  uint64_t v373;
  uint64_t v374;
  int32x4_t v375;
  float32x4_t v376;
  uint64_t v377;
  float32x4_t v378;
  unint64_t v379;
  unint64_t v380;
  _BYTE v381[32];
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  __int128 v388;
  __int128 v389;
  __int16 v390;
  uint64_t v391;
  void *__p;
  std::__shared_weak_count *v393;
  uint64_t v394;
  void *v395;
  std::__shared_weak_count *v396;
  uint64_t v397;
  std::__shared_weak_count *v398;
  _QWORD v399[2];
  _QWORD v400[3];
  _QWORD *v401;
  _QWORD v402[3];
  _QWORD *v403;
  _QWORD v404[3];
  _QWORD *v405;
  _QWORD v406[3];
  _QWORD *v407;
  _QWORD v408[3];
  _QWORD *v409;
  _QWORD v410[3];
  _QWORD *v411;
  uint64_t v412;

  v412 = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)(*a2 + 400);
  if (v6)
  {
    v7 = a2;
    v8 = (uint64_t *)v6[4];
    v9 = (uint64_t *)v6[5];
    if (v8 == v9)
      goto LABEL_34;
    v10 = (_QWORD *)v6[1];
    while (1)
    {
      v11 = *v8;
      v12 = v6[2];
      if ((unint64_t)v10 >= v12)
        break;
      if (v10)
        *v10 = v11;
      ++v10;
LABEL_5:
      v6[1] = (uint64_t)v10;
      if (++v8 == v9)
      {
        v32 = v6[4];
        v7 = a2;
        if (v32 != v6[5])
          v6[5] = v32;
LABEL_34:
        ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*v7 + 408));
        v33 = *(uint64_t **)(*v7 + 416);
        v34 = (uint64_t *)v33[4];
        v35 = (uint64_t *)v33[5];
        if (v34 == v35)
          goto LABEL_214;
        v36 = (_QWORD *)v33[1];
        while (2)
        {
          v37 = *v34;
          v38 = v33[2];
          if ((unint64_t)v36 < v38)
          {
            if (v36)
              *v36 = v37;
            ++v36;
            goto LABEL_37;
          }
          v39 = ((uint64_t)v36 - *v33) >> 3;
          if ((unint64_t)(v39 + 1) >> 61)
            goto LABEL_441;
          v40 = v38 - *v33;
          v41 = v40 >> 2;
          if (v40 >> 2 <= (unint64_t)(v39 + 1))
            v41 = v39 + 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          if (v42)
          {
            v43 = 8 * v42;
            v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33[3] + 16))(v33[3], 8 * v42, 8);
            v45 = (_QWORD *)(v44 + 8 * v39);
            v42 = v44 + v43;
            if (v44)
              *v45 = v37;
          }
          else
          {
            v45 = (_QWORD *)(8 * v39);
          }
          v47 = *v33;
          v46 = v33[1];
          v48 = v46 - *v33;
          if (v46 != *v33)
          {
            v49 = v48 - 8;
            if ((unint64_t)(v48 - 8) < 0x38)
            {
              v50 = v45;
            }
            else
            {
              v50 = v45;
              if ((unint64_t)(v46 - (_QWORD)v45) >= 0x20)
              {
                v51 = (v49 >> 3) + 1;
                v52 = v45 - 2;
                v53 = (__int128 *)(v46 - 16);
                v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v55 = *v53;
                  *(v52 - 1) = *(v53 - 1);
                  *v52 = v55;
                  v52 -= 2;
                  v53 -= 2;
                  v54 -= 4;
                }
                while (v54);
                v50 = &v45[-(v51 & 0x3FFFFFFFFFFFFFFCLL)];
                v46 -= 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
                if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_61:
                  v46 = *v33;
LABEL_62:
                  v36 = v45 + 1;
                  *v33 = (uint64_t)v50;
                  v33[1] = (uint64_t)(v45 + 1);
                  v57 = v33[2];
                  v33[2] = v42;
                  if (v46)
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33[3] + 40))(v33[3], v46, v57 - v46);
LABEL_37:
                  v33[1] = (uint64_t)v36;
                  if (++v34 == v35)
                  {
                    v58 = v33[4];
                    v7 = a2;
                    if (v58 != v33[5])
                      v33[5] = v58;
                    goto LABEL_214;
                  }
                  continue;
                }
              }
            }
            do
            {
              v56 = *(_QWORD *)(v46 - 8);
              v46 -= 8;
              *--v50 = v56;
            }
            while (v46 != v47);
            goto LABEL_61;
          }
          break;
        }
        v50 = v45;
        goto LABEL_62;
      }
    }
    v13 = ((uint64_t)v10 - *v6) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
LABEL_441:
      abort();
    v14 = v12 - *v6;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      v17 = 8 * v16;
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 16))(v6[3], 8 * v16, 8);
      v19 = (_QWORD *)(v18 + 8 * v13);
      v16 = v18 + v17;
      if (v18)
        *v19 = v11;
    }
    else
    {
      v19 = (_QWORD *)(8 * v13);
    }
    v21 = *v6;
    v20 = v6[1];
    v22 = v20 - *v6;
    if (v20 == *v6)
    {
      v24 = v19;
      goto LABEL_30;
    }
    v23 = v22 - 8;
    if ((unint64_t)(v22 - 8) < 0x38)
    {
      v24 = v19;
    }
    else
    {
      v24 = v19;
      if ((unint64_t)(v20 - (_QWORD)v19) >= 0x20)
      {
        v25 = (v23 >> 3) + 1;
        v26 = v19 - 2;
        v27 = (__int128 *)(v20 - 16);
        v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v27;
          *(v26 - 1) = *(v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        v24 = &v19[-(v25 & 0x3FFFFFFFFFFFFFFCLL)];
        v20 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_29;
      }
    }
    do
    {
      v30 = *(_QWORD *)(v20 - 8);
      v20 -= 8;
      *--v24 = v30;
    }
    while (v20 != v21);
LABEL_29:
    v20 = *v6;
LABEL_30:
    v10 = v19 + 1;
    *v6 = (uint64_t)v24;
    v6[1] = (uint64_t)(v19 + 1);
    v31 = v6[2];
    v6[2] = v16;
    if (v20)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 40))(v6[3], v20, v31 - v20);
    goto LABEL_5;
  }
  v59 = *(std::__shared_weak_count **)(a3 + 424);
  v399[0] = *(_QWORD *)(a3 + 416);
  v399[1] = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(p_shared_owners);
    while (__stxr(v61 + 1, p_shared_owners));
  }
  *(_QWORD *)&v381[24] = 0;
  v382.f64[0] = 0.0;
  LODWORD(v382.f64[1]) = 0;
  v381[0] = 1;
  *(_OWORD *)&v381[4] = xmmword_19FFB35D0;
  *(_DWORD *)&v381[20] = 7;
  BYTE4(v382.f64[1]) = 15;
  v62 = *(id *)(*(_QWORD *)(a1 + 40) + 104);
  v63 = (__int128 *)objc_msgSend(v62, "format");
  v64 = (std::__shared_weak_count *)operator new(0x198uLL);
  v64->__shared_owners_ = 0;
  v64->__shared_weak_owners_ = 0;
  v64->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4578;
  v388 = *v63;
  v389 = v63[1];
  __p = (void *)ggl::Debug::ExtendedPipelineState::ExtendedPipelineState((uint64_t)&v64[1], v399, (uint64_t)v381, &v388);
  v393 = v64;

  if (v59)
  {
    v65 = (unint64_t *)&v59->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v67 = (uint64_t *)operator new();
  v69 = __p;
  v68 = v393;
  v395 = __p;
  v396 = v393;
  if (v393)
  {
    v70 = (unint64_t *)&v393->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v73 = *a2;
  v72 = (std::__shared_weak_count *)a2[1];
  v397 = *a2;
  v398 = v72;
  if (v72)
  {
    v74 = (unint64_t *)&v72->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  v411 = 0;
  v76 = operator new(0x28uLL);
  *v76 = &off_1E42CD8E0;
  v76[1] = v69;
  v395 = 0;
  v396 = 0;
  v76[2] = v68;
  v76[3] = v73;
  v76[4] = v72;
  if (v72)
  {
    v77 = (unint64_t *)&v72->__shared_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v411 = v76;
  v408[0] = &off_1E42D75E0;
  v409 = v408;
  v67[1] = 0;
  v67[2] = 0;
  *v67 = 0;
  {
    v361 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v361, "GeoGL", 0xA3D02C1100000005);
  }
  v80 = ggl::Allocator::instance(void)::alloc;
  v67[4] = 0;
  v67[3] = v80;
  v67[5] = 0;
  v67[6] = 0;
  {
    v362 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v362, "GeoGL", 0xA3D02C1100000005);
  }
  v67[7] = ggl::Allocator::instance(void)::alloc;
  v81 = (uint64_t)v411;
  if (!v411)
    goto LABEL_88;
  if (v411 != v410)
  {
    v81 = (*(uint64_t (**)(_QWORD *))(*v411 + 16))(v411);
LABEL_88:
    v67[11] = v81;
    goto LABEL_90;
  }
  v67[11] = (uint64_t)(v67 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v410[0] + 24))(v410, v67 + 8);
LABEL_90:
  v82 = (uint64_t)v409;
  if (!v409)
  {
LABEL_93:
    v67[15] = v82;
    goto LABEL_95;
  }
  if (v409 != v408)
  {
    v82 = (*(uint64_t (**)(_QWORD *))(*v409 + 16))(v409);
    goto LABEL_93;
  }
  v67[15] = (uint64_t)(v67 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v408[0] + 24))((uint64_t)v408, v67 + 12);
LABEL_95:
  v67[16] = 2000;
  v83 = *v67;
  if ((unint64_t)(v67[2] - *v67) > 0x31F)
    goto LABEL_108;
  v84 = v67[1];
  v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67[3] + 16))(v67[3], 800, 8);
  v86 = v84 - v83;
  v87 = v85 + ((v84 - v83) & 0xFFFFFFFFFFFFFFF8);
  v89 = *v67;
  v88 = v67[1];
  v90 = v88 - *v67;
  if (v88 == *v67)
  {
    v92 = v85 + ((v84 - v83) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_106;
  }
  v91 = v90 - 8;
  if ((unint64_t)(v90 - 8) >= 0x58)
  {
    v92 = v85 + ((v84 - v83) & 0xFFFFFFFFFFFFFFF8);
    if (v88 - (v86 & 0xFFFFFFFFFFFFFFF8) - v85 >= 0x20)
    {
      v93 = v86 >> 3;
      v94 = (v91 >> 3) + 1;
      v95 = (_OWORD *)(v85 + 8 * v93 - 16);
      v96 = (__int128 *)(v88 - 16);
      v97 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v98 = *v96;
        *(v95 - 1) = *(v96 - 1);
        *v95 = v98;
        v95 -= 2;
        v96 -= 2;
        v97 -= 4;
      }
      while (v97);
      v92 = v87 - 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      v88 -= 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      if (v94 == (v94 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_105;
    }
  }
  else
  {
    v92 = v85 + ((v84 - v83) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v99 = *(_QWORD *)(v88 - 8);
    v88 -= 8;
    *(_QWORD *)(v92 - 8) = v99;
    v92 -= 8;
  }
  while (v88 != v89);
LABEL_105:
  v88 = *v67;
LABEL_106:
  *v67 = v92;
  v67[1] = v87;
  v100 = v67[2];
  v67[2] = v85 + 800;
  if (v88)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67[3] + 40))(v67[3], v88, v100 - v88);
LABEL_108:
  v101 = v67[4];
  if ((unint64_t)(v67[6] - v101) > 0x31F)
    goto LABEL_121;
  v102 = v67[5];
  v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67[7] + 16))(v67[7], 800, 8);
  v104 = v102 - v101;
  v105 = v103 + ((v102 - v101) & 0xFFFFFFFFFFFFFFF8);
  v107 = v67[4];
  v106 = v67[5];
  v108 = v106 - v107;
  if (v106 == v107)
  {
    v110 = v103 + ((v102 - v101) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_119;
  }
  v109 = v108 - 8;
  if ((unint64_t)(v108 - 8) >= 0x58)
  {
    v110 = v103 + ((v102 - v101) & 0xFFFFFFFFFFFFFFF8);
    if (v106 - (v104 & 0xFFFFFFFFFFFFFFF8) - v103 >= 0x20)
    {
      v111 = v104 >> 3;
      v112 = (v109 >> 3) + 1;
      v113 = (_OWORD *)(v103 + 8 * v111 - 16);
      v114 = (__int128 *)(v106 - 16);
      v115 = v112 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v116 = *v114;
        *(v113 - 1) = *(v114 - 1);
        *v113 = v116;
        v113 -= 2;
        v114 -= 2;
        v115 -= 4;
      }
      while (v115);
      v110 = v105 - 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
      v106 -= 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
      if (v112 == (v112 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_118;
    }
  }
  else
  {
    v110 = v103 + ((v102 - v101) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v117 = *(_QWORD *)(v106 - 8);
    v106 -= 8;
    *(_QWORD *)(v110 - 8) = v117;
    v110 -= 8;
  }
  while (v106 != v107);
LABEL_118:
  v106 = v67[4];
LABEL_119:
  v67[4] = v110;
  v67[5] = v105;
  v118 = v67[6];
  v67[6] = v103 + 800;
  if (v106)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67[7] + 40))(v67[7], v106, v118 - v106);
LABEL_121:
  v119 = *(_QWORD *)(*a2 + 400);
  *(_QWORD *)(*a2 + 400) = v67;
  if (v119)
  {
    v120 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v119);
    MEMORY[0x1A1AF4E00](v120, 0x10A0C40D234DDC7);
  }
  v121 = v409;
  if (v409 == v408)
  {
    v122 = 4;
    v121 = v408;
  }
  else
  {
    if (!v409)
      goto LABEL_128;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_128:
  v123 = v411;
  if (v411 == v410)
  {
    v124 = 4;
    v123 = v410;
    goto LABEL_132;
  }
  if (v411)
  {
    v124 = 5;
LABEL_132:
    (*(void (**)(void))(*v123 + 8 * v124))();
  }
  if (v72)
  {
    v125 = (unint64_t *)&v72->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v127 = v396;
  if (v396)
  {
    v128 = (unint64_t *)&v396->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = operator new();
  *(_DWORD *)(v130 + 32) = 0;
  *(_QWORD *)(v130 + 16) = 0;
  *(_QWORD *)(v130 + 24) = 0;
  *(_QWORD *)v130 = &off_1E42B5DE8;
  *(_QWORD *)(v130 + 8) = 0;
  *(_QWORD *)(v130 + 36) = 65792;
  *(_DWORD *)(v130 + 44) = 0;
  *(_QWORD *)(v130 + 48) = 1;
  *(_WORD *)(v130 + 56) = 0;
  *(_BYTE *)(v130 + 58) = 3;
  *(_QWORD *)(v130 + 67) = 0;
  *(_QWORD *)(v130 + 59) = 0;
  *(_BYTE *)(v130 + 75) = 0;
  *(_QWORD *)(v130 + 132) = 0;
  *(_QWORD *)(v130 + 124) = 0;
  *(_WORD *)(v130 + 188) = 257;
  *(_QWORD *)(v130 + 192) = 0;
  *(_QWORD *)(v130 + 200) = 0;
  *(_BYTE *)(v130 + 208) = 0;
  v131 = *(_QWORD *)(*a2 + 392);
  *(_QWORD *)(*a2 + 392) = v130;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  v132 = *(_QWORD *)(*a2 + 392);
  *(_BYTE *)(v132 + 58) = 0;
  *(_BYTE *)(v132 + 56) = 0;
  v133 = (unint64_t *)operator new();
  v406[0] = &off_1E42CD928;
  v407 = v406;
  v404[0] = &off_1E42D60C8;
  v405 = v404;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v133, (uint64_t)v406, (uint64_t)v404);
  v134 = *(_QWORD *)(*a2 + 408);
  *(_QWORD *)(*a2 + 408) = v133;
  if (v134)
  {
    v135 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v134);
    MEMORY[0x1A1AF4E00](v135, 0x10A0C40D234DDC7);
  }
  v136 = v405;
  if (v405 == v404)
  {
    v137 = 4;
    v136 = v404;
  }
  else
  {
    if (!v405)
      goto LABEL_152;
    v137 = 5;
  }
  (*(void (**)(void))(*v136 + 8 * v137))();
LABEL_152:
  v138 = v407;
  if (v407 == v406)
  {
    v139 = 4;
    v138 = v406;
    goto LABEL_156;
  }
  if (v407)
  {
    v139 = 5;
LABEL_156:
    (*(void (**)(void))(*v138 + 8 * v139))();
  }
  v140 = (uint64_t *)operator new();
  v403 = v402;
  v400[0] = &off_1E42D7508;
  v401 = v400;
  v402[0] = &off_1E42CD970;
  v140[1] = 0;
  v140[2] = 0;
  *v140 = 0;
  {
    v363 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v363, "GeoGL", 0xA3D02C1100000005);
  }
  v142 = ggl::Allocator::instance(void)::alloc;
  v140[4] = 0;
  v140[3] = v142;
  v140[5] = 0;
  v140[6] = 0;
  {
    v364 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v364, "GeoGL", 0xA3D02C1100000005);
  }
  v140[7] = ggl::Allocator::instance(void)::alloc;
  v143 = (uint64_t)v403;
  if (!v403)
    goto LABEL_162;
  if (v403 != v402)
  {
    v143 = (*(uint64_t (**)(void))(*v403 + 16))();
LABEL_162:
    v140[11] = v143;
    goto LABEL_164;
  }
  v140[11] = (uint64_t)(v140 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v402[0] + 24))(v402, v140 + 8);
LABEL_164:
  v144 = (uint64_t)v401;
  if (!v401)
  {
LABEL_167:
    v140[15] = v144;
    goto LABEL_169;
  }
  if (v401 != v400)
  {
    v144 = (*(uint64_t (**)(void))(*v401 + 16))();
    goto LABEL_167;
  }
  v140[15] = (uint64_t)(v140 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v400[0] + 24))((uint64_t)v400, v140 + 12);
LABEL_169:
  v140[16] = 2000;
  v145 = *v140;
  if ((unint64_t)(v140[2] - *v140) > 0x31F)
    goto LABEL_182;
  v146 = v140[1];
  v147 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v140[3] + 16))(v140[3], 800, 8);
  v148 = v146 - v145;
  v149 = v147 + ((v146 - v145) & 0xFFFFFFFFFFFFFFF8);
  v151 = *v140;
  v150 = v140[1];
  v152 = v150 - *v140;
  if (v150 == *v140)
  {
    v154 = v147 + ((v146 - v145) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_180;
  }
  v153 = v152 - 8;
  if ((unint64_t)(v152 - 8) >= 0x58)
  {
    v154 = v147 + ((v146 - v145) & 0xFFFFFFFFFFFFFFF8);
    if (v150 - (v148 & 0xFFFFFFFFFFFFFFF8) - v147 >= 0x20)
    {
      v155 = v148 >> 3;
      v156 = (v153 >> 3) + 1;
      v157 = (_OWORD *)(v147 + 8 * v155 - 16);
      v158 = (__int128 *)(v150 - 16);
      v159 = v156 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v160 = *v158;
        *(v157 - 1) = *(v158 - 1);
        *v157 = v160;
        v157 -= 2;
        v158 -= 2;
        v159 -= 4;
      }
      while (v159);
      v154 = v149 - 8 * (v156 & 0x3FFFFFFFFFFFFFFCLL);
      v150 -= 8 * (v156 & 0x3FFFFFFFFFFFFFFCLL);
      if (v156 == (v156 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_179;
    }
  }
  else
  {
    v154 = v147 + ((v146 - v145) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v161 = *(_QWORD *)(v150 - 8);
    v150 -= 8;
    *(_QWORD *)(v154 - 8) = v161;
    v154 -= 8;
  }
  while (v150 != v151);
LABEL_179:
  v150 = *v140;
LABEL_180:
  *v140 = v154;
  v140[1] = v149;
  v162 = v140[2];
  v140[2] = v147 + 800;
  if (v150)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v140[3] + 40))(v140[3], v150, v162 - v150);
LABEL_182:
  v163 = v140[4];
  if ((unint64_t)(v140[6] - v163) > 0x31F)
    goto LABEL_195;
  v164 = v140[5];
  v165 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v140[7] + 16))(v140[7], 800, 8);
  v166 = v164 - v163;
  v167 = v165 + ((v164 - v163) & 0xFFFFFFFFFFFFFFF8);
  v169 = v140[4];
  v168 = v140[5];
  v170 = v168 - v169;
  if (v168 == v169)
  {
    v172 = v165 + ((v164 - v163) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_193;
  }
  v171 = v170 - 8;
  if ((unint64_t)(v170 - 8) >= 0x58)
  {
    v172 = v165 + ((v164 - v163) & 0xFFFFFFFFFFFFFFF8);
    if (v168 - (v166 & 0xFFFFFFFFFFFFFFF8) - v165 >= 0x20)
    {
      v173 = v166 >> 3;
      v174 = (v171 >> 3) + 1;
      v175 = (_OWORD *)(v165 + 8 * v173 - 16);
      v176 = (__int128 *)(v168 - 16);
      v177 = v174 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v178 = *v176;
        *(v175 - 1) = *(v176 - 1);
        *v175 = v178;
        v175 -= 2;
        v176 -= 2;
        v177 -= 4;
      }
      while (v177);
      v172 = v167 - 8 * (v174 & 0x3FFFFFFFFFFFFFFCLL);
      v168 -= 8 * (v174 & 0x3FFFFFFFFFFFFFFCLL);
      if (v174 == (v174 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_192;
    }
  }
  else
  {
    v172 = v165 + ((v164 - v163) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v179 = *(_QWORD *)(v168 - 8);
    v168 -= 8;
    *(_QWORD *)(v172 - 8) = v179;
    v172 -= 8;
  }
  while (v168 != v169);
LABEL_192:
  v168 = v140[4];
LABEL_193:
  v140[4] = v172;
  v140[5] = v167;
  v180 = v140[6];
  v140[6] = v165 + 800;
  if (v168)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v140[7] + 40))(v140[7], v168, v180 - v168);
LABEL_195:
  v7 = a2;
  v181 = *(_QWORD *)(*a2 + 416);
  *(_QWORD *)(*a2 + 416) = v140;
  if (v181)
  {
    v182 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v181);
    MEMORY[0x1A1AF4E00](v182, 0x10A0C40D234DDC7);
  }
  v183 = v401;
  if (v401 == v400)
  {
    v184 = 4;
    v183 = v400;
  }
  else
  {
    if (!v401)
      goto LABEL_202;
    v184 = 5;
  }
  (*(void (**)(void))(*v183 + 8 * v184))();
LABEL_202:
  v185 = v403;
  if (v403 == v402)
  {
    v186 = 4;
    v185 = v402;
  }
  else
  {
    if (!v403)
      goto LABEL_207;
    v186 = 5;
  }
  (*(void (**)(void))(*v185 + 8 * v186))();
LABEL_207:
  v187 = operator new();
  *(_DWORD *)(v187 + 32) = 0;
  *(_QWORD *)(v187 + 16) = 0;
  *(_QWORD *)(v187 + 24) = 0;
  *(_QWORD *)v187 = &off_1E42B5DE8;
  *(_QWORD *)(v187 + 8) = 0;
  *(_QWORD *)(v187 + 36) = 67072;
  *(_DWORD *)(v187 + 44) = 0;
  *(_QWORD *)(v187 + 48) = 1;
  *(_WORD *)(v187 + 56) = 0;
  *(_BYTE *)(v187 + 58) = 3;
  *(_QWORD *)(v187 + 67) = 0;
  *(_QWORD *)(v187 + 59) = 0;
  *(_BYTE *)(v187 + 75) = 0;
  *(_QWORD *)(v187 + 132) = 0;
  *(_QWORD *)(v187 + 124) = 0;
  *(_WORD *)(v187 + 188) = 257;
  *(_QWORD *)(v187 + 192) = 0;
  *(_QWORD *)(v187 + 200) = 0;
  *(_BYTE *)(v187 + 208) = 0;
  v188 = *(_QWORD *)(*a2 + 424);
  *(_QWORD *)(*a2 + 424) = v187;
  if (v188)
    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  v189 = *(_QWORD *)(*a2 + 424);
  *(_BYTE *)(v189 + 58) = 0;
  *(_BYTE *)(v189 + 56) = 0;
  v190 = v393;
  if (v393)
  {
    v191 = (unint64_t *)&v393->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
LABEL_214:
  v193 = *(_QWORD **)(a4 + 8);
  v194 = (int8x8_t)v193[1];
  if (!*(_QWORD *)&v194)
    goto LABEL_237;
  v195 = (uint8x8_t)vcnt_s8(v194);
  v195.i16[0] = vaddlv_u8(v195);
  if (v195.u32[0] > 1uLL)
  {
    v196 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v194 <= 0x1AF456233693CD46uLL)
      v196 = 0x1AF456233693CD46uLL % *(_QWORD *)&v194;
  }
  else
  {
    v196 = (*(_QWORD *)&v194 - 1) & 0x1AF456233693CD46;
  }
  v197 = *(_QWORD **)(*v193 + 8 * v196);
  if (!v197)
    goto LABEL_237;
  v198 = (_QWORD *)*v197;
  if (!v198)
    goto LABEL_237;
  if (v195.u32[0] < 2uLL)
  {
    v199 = *(_QWORD *)&v194 - 1;
    while (1)
    {
      v201 = v198[1];
      if (v201 == 0x1AF456233693CD46)
      {
        if (v198[2] == 0x1AF456233693CD46)
          goto LABEL_235;
      }
      else if ((v201 & v199) != v196)
      {
        goto LABEL_237;
      }
      v198 = (_QWORD *)*v198;
      if (!v198)
        goto LABEL_237;
    }
  }
  while (1)
  {
    v200 = v198[1];
    if (v200 == 0x1AF456233693CD46)
      break;
    if (v200 >= *(_QWORD *)&v194)
      v200 %= *(_QWORD *)&v194;
    if (v200 != v196)
      goto LABEL_237;
LABEL_224:
    v198 = (_QWORD *)*v198;
    if (!v198)
      goto LABEL_237;
  }
  if (v198[2] != 0x1AF456233693CD46)
    goto LABEL_224;
LABEL_235:
  v202 = v198[5];
  if (*(_QWORD *)(v202 + 8) == 0x1AF456233693CD46)
  {
    v365 = *(_QWORD *)(v202 + 32);
    goto LABEL_238;
  }
LABEL_237:
  v365 = 0;
LABEL_238:
  v203 = *(void **)(*v7 + 160);
  if (v203)
  {
    objc_msgSend(v203, "sections");
  }
  else
  {
    __p = 0;
    v393 = 0;
    v394 = 0;
  }
  {
    v359 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v359, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v374 = mdm::Allocator::instance(void)::alloc;
  {
    v360 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v360, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v373 = mdm::Allocator::instance(void)::alloc;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v365);
  v206 = (void *)objc_claimAutoreleasedReturnValue();
  v377 = objc_msgSend(v206, "routeDebugPoints");

  v207 = __p;
  v208 = v393;
  if (v393 == __p)
    goto LABEL_425;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  v379 = 0;
  v380 = 0;
  v213 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v368 = _Q0;
  while (2)
  {
    v371 = v209;
    v217 = v207[v209];
    if (v217)
      v218 = v217 + 8;
    else
      v218 = 0;
    v219 = *a2;
    WeakRetained = objc_loadWeakRetained((id *)(v218 + 224));
    v221 = (_QWORD *)(v219 + 440);
    v222 = *(_QWORD **)(v219 + 440);
    if (!v222)
      goto LABEL_260;
    v223 = (_QWORD *)(v219 + 440);
    do
    {
      v224 = v222[4];
      _CF = v224 >= (unint64_t)WeakRetained;
      if (v224 >= (unint64_t)WeakRetained)
        v226 = v222;
      else
        v226 = v222 + 1;
      if (_CF)
        v223 = v222;
      v222 = (_QWORD *)*v226;
    }
    while (*v226);
    if (v223 == v221 || (unint64_t)WeakRetained < v223[4])
LABEL_260:
      v223 = v221;

    if (v223 != (_QWORD *)(*a2 + 440))
    {
      v227 = 0;
      _ZF = (v371 & 1) != 0 && v377 == 1;
      if (_ZF)
        v229 = 0.0;
      else
        v229 = 1.0;
      v230 = v223[5];
      v231 = v368;
      *(float *)v231.i32 = v229;
      v232 = vzip1q_s32(v231, v231);
      *(float *)&v232.i32[2] = v229;
      v375 = v232;
      while (1)
      {
        while (1)
        {
LABEL_270:
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 32))(v230) <= v227)
            goto LABEL_245;
          v233 = (float *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v230 + 16))(v230, v227);
          v234 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v230 + 24))(v230, v227);
          v235 = v212;
          v236 = *v233;
          v237 = v233[1];
          v238 = v233[2];
          if (v377 != 1)
            break;
          v239 = v211 - v210;
          if (v211 == v210)
            break;
          +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
          v240 = (void *)objc_claimAutoreleasedReturnValue();
          v241 = objc_msgSend(v240, "continuousMultiSectionRouteAdditionalOverlap");

          v242 = v239 >> 5;
          LODWORD(v243) = v241 + 2;
          v244 = (v239 >> 5) - 1;
          v243 = v244 >= v241 + 2 ? v243 : v244;
          if (!(_DWORD)v243)
            break;
          v245 = v242 - 1;
          v246 = 32 * v242 - 32;
          while (vabds_f32(v236, *(float *)&v210[v246]) >= 0.000001
               || vabds_f32(v237, *(float *)&v210[v246 + 4]) >= 0.000001
               || vabds_f32(v238, *(float *)&v210[v246 + 8]) >= 0.000001)
          {
            --v245;
            v246 -= 32;
            if (!--v243)
              goto LABEL_285;
          }
          v247 = &v210[32 * v245];
          *((_OWORD *)v247 + 1) = xmmword_19FFB2D90;
          v248 = v247 + 16;
          if (*(unsigned __int8 *)(v379 + v245) != v234)
            *((_DWORD *)v248 + 1) = 1065353216;
          v212 = v235;
          ++v227;
        }
LABEL_285:
        v212 = v235;
        if ((unint64_t)v211 >= v235)
          break;
        if (v211)
        {
          *(_OWORD *)v211 = 0u;
          *((_OWORD *)v211 + 1) = 0u;
        }
        v211 += 32;
LABEL_304:
        *((float *)v211 - 8) = v236;
        *((float *)v211 - 7) = v237;
        *((float *)v211 - 6) = v238;
        *((int32x4_t *)v211 - 1) = v375;
        if ((unint64_t)v213 >= v380)
        {
          v258 = (unint64_t)&v213[-v379];
          v259 = (uint64_t)&v213[-v379 + 1];
          if (v259 < 0)
            abort();
          v260 = v380 - v379;
          if (2 * (v380 - v379) > v259)
            v259 = 2 * v260;
          if (v260 >= 0x3FFFFFFFFFFFFFFFLL)
            v261 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v261 = v259;
          if (v261)
          {
            v262 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v373 + 16))(v373, v261, 1);
            v263 = (_BYTE *)(v262 + v258);
            v261 += v262;
            if (v262)
              *v263 = v234;
          }
          else
          {
            v263 = &v213[-v379];
          }
          if (v213 != (_BYTE *)v379)
          {
            if (v258 < 0x30
              || &v263[v379 - (_QWORD)v213] > v263 - 1
              || v379 > (unint64_t)(v213 - 1)
              || (unint64_t)(v213 - v263) < 0x20)
            {
              v264 = v213;
              v265 = v263;
              v266 = (_BYTE *)v379;
            }
            else
            {
              v264 = &v213[-(v258 & 0xFFFFFFFFFFFFFFE0)];
              v268 = v263 - 16;
              v269 = (__int128 *)(v213 - 16);
              v270 = v258 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v271 = *v269;
                *(v268 - 1) = *(v269 - 1);
                *v268 = v271;
                v268 -= 2;
                v269 -= 2;
                v270 -= 32;
              }
              while (v270);
              v265 = &v263[-(v258 & 0xFFFFFFFFFFFFFFE0)];
              v266 = (_BYTE *)v379;
              if (v258 == (v258 & 0xFFFFFFFFFFFFFFE0))
              {
LABEL_324:
                v379 = (unint64_t)v265;
                v213 = v263 + 1;
                if (v266)
                  goto LABEL_325;
                goto LABEL_326;
              }
            }
            do
            {
              v267 = *--v264;
              *--v265 = v267;
            }
            while (v264 != v266);
            goto LABEL_324;
          }
          v266 = v213;
          v379 = (unint64_t)v263;
          v213 = v263 + 1;
          if (v266)
LABEL_325:
            (*(void (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)v373 + 40))(v373, v266, v380 - (_QWORD)v266);
LABEL_326:
          v380 = v261;
          ++v227;
          goto LABEL_270;
        }
        if (v213)
          *v213 = v234;
        ++v213;
        ++v227;
      }
      v249 = (v211 - v210) >> 5;
      v250 = v249 + 1;
      if ((unint64_t)(v249 + 1) >> 59)
        abort();
      if ((uint64_t)(v235 - (_QWORD)v210) >> 4 > v250)
        v250 = (uint64_t)(v235 - (_QWORD)v210) >> 4;
      if (v235 - (unint64_t)v210 >= 0x7FFFFFFFFFFFFFE0)
        v251 = 0x7FFFFFFFFFFFFFFLL;
      else
        v251 = v250;
      if (v251)
      {
        v252 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v374 + 16))(v374, 32 * v251, 16);
        v253 = (_OWORD *)(v252 + 32 * v249);
        v251 = v252 + 32 * v251;
        if (v252)
        {
          *v253 = 0u;
          v253[1] = 0u;
        }
        if (v211 != v210)
        {
LABEL_299:
          v254 = v253;
          do
          {
            v255 = *((_QWORD *)v211 - 4);
            v211 -= 32;
            v256 = *((_DWORD *)v211 + 2);
            *((_QWORD *)v254 - 4) = v255;
            v254 -= 2;
            *((_DWORD *)v254 + 2) = v256;
            v254[1] = *((_OWORD *)v211 + 1);
          }
          while (v211 != v210);
          v257 = v210;
          v210 = (char *)v254;
          v211 = (char *)(v253 + 2);
          if (!v257)
            goto LABEL_303;
LABEL_302:
          (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v374 + 40))(v374, v257, v235 - (_QWORD)v257);
LABEL_303:
          v212 = v251;
          goto LABEL_304;
        }
      }
      else
      {
        v253 = (_OWORD *)(32 * v249);
        if (v211 != v210)
          goto LABEL_299;
      }
      v257 = v211;
      v210 = (char *)v253;
      v211 = (char *)(v253 + 2);
      if (!v257)
        goto LABEL_303;
      goto LABEL_302;
    }
LABEL_245:
    v209 = v371 + 1;
    v207 = __p;
    if (v371 + 1 < (unint64_t)(((char *)v393 - (_BYTE *)__p) >> 3))
      continue;
    break;
  }
  v272 = v211 - v210;
  v273 = v379;
  if (v211 == v210)
    goto LABEL_420;
  v274 = *(_QWORD *)(*a2 + 416);
  v275 = *(_QWORD *)(v274 + 8);
  if (v275 == *(_QWORD *)v274)
  {
    v287 = *(_QWORD *)(v274 + 88);
    if (!v287)
    {
LABEL_446:
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    v276 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v287 + 48))(v287);
    v277 = *(uint64_t **)(v274 + 40);
    v288 = *(_QWORD *)(v274 + 48);
    if ((unint64_t)v277 < v288)
    {
LABEL_350:
      if (v277)
        *v277 = v276;
      v289 = v277 + 1;
      goto LABEL_388;
    }
    v290 = *(_QWORD *)(v274 + 32);
    v291 = ((uint64_t)v277 - v290) >> 3;
    v292 = v291 + 1;
    if ((unint64_t)(v291 + 1) >> 61)
LABEL_455:
      abort();
    v293 = v288 - v290;
    if (v293 >> 2 > v292)
      v292 = v293 >> 2;
    if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
      v294 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v294 = v292;
    if (v294)
    {
      v295 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v274 + 56) + 16))(*(_QWORD *)(v274 + 56), 8 * v294, 8);
      v285 = (uint64_t *)(v295 + 8 * v291);
      v286 = v295 + 8 * v294;
      if (v295)
        *v285 = v276;
    }
    else
    {
      v286 = 0;
      v285 = (uint64_t *)(8 * v291);
    }
    v289 = v285 + 1;
    v305 = *(_QWORD *)(v274 + 32);
    v296 = *(_QWORD *)(v274 + 40);
    if (v296 == v305)
      goto LABEL_386;
    v306 = v296 - v305 - 8;
    if (v306 < 0x38)
    {
      v308 = *(_QWORD *)(v274 + 40);
    }
    else if ((unint64_t)(v296 - (_QWORD)v285) < 0x20)
    {
      v308 = *(_QWORD *)(v274 + 40);
    }
    else
    {
      v307 = (v306 >> 3) + 1;
      v308 = v296 - 8 * (v307 & 0x3FFFFFFFFFFFFFFCLL);
      v309 = v285 - 2;
      v310 = (__int128 *)(v296 - 16);
      v311 = v307 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v312 = *v310;
        *((_OWORD *)v309 - 1) = *(v310 - 1);
        *(_OWORD *)v309 = v312;
        v309 -= 4;
        v310 -= 2;
        v311 -= 4;
      }
      while (v311);
      v285 -= v307 & 0x3FFFFFFFFFFFFFFCLL;
      if (v307 == (v307 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_385;
    }
    do
    {
      v314 = *(_QWORD *)(v308 - 8);
      v308 -= 8;
      *--v285 = v314;
    }
    while (v308 != v305);
LABEL_385:
    v296 = *(_QWORD *)(v274 + 32);
    goto LABEL_386;
  }
  v276 = *(_QWORD *)(v275 - 8);
  *(_QWORD *)(v274 + 8) = v275 - 8;
  v277 = *(uint64_t **)(v274 + 40);
  v278 = *(_QWORD *)(v274 + 48);
  if ((unint64_t)v277 < v278)
    goto LABEL_350;
  v279 = *(_QWORD *)(v274 + 32);
  v280 = ((uint64_t)v277 - v279) >> 3;
  v281 = v280 + 1;
  if ((unint64_t)(v280 + 1) >> 61)
    goto LABEL_455;
  v282 = v278 - v279;
  if (v282 >> 2 > v281)
    v281 = v282 >> 2;
  if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF8)
    v283 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v283 = v281;
  if (v283)
  {
    v284 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v274 + 56) + 16))(*(_QWORD *)(v274 + 56), 8 * v283, 8);
    v285 = (uint64_t *)(v284 + 8 * v280);
    v286 = v284 + 8 * v283;
    if (v284)
      *v285 = v276;
  }
  else
  {
    v286 = 0;
    v285 = (uint64_t *)(8 * v280);
  }
  v289 = v285 + 1;
  v297 = *(_QWORD *)(v274 + 32);
  v296 = *(_QWORD *)(v274 + 40);
  if (v296 != v297)
  {
    v298 = v296 - v297 - 8;
    if (v298 < 0x38)
    {
      v300 = *(_QWORD *)(v274 + 40);
    }
    else if ((unint64_t)(v296 - (_QWORD)v285) < 0x20)
    {
      v300 = *(_QWORD *)(v274 + 40);
    }
    else
    {
      v299 = (v298 >> 3) + 1;
      v300 = v296 - 8 * (v299 & 0x3FFFFFFFFFFFFFFCLL);
      v301 = v285 - 2;
      v302 = (__int128 *)(v296 - 16);
      v303 = v299 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v304 = *v302;
        *((_OWORD *)v301 - 1) = *(v302 - 1);
        *(_OWORD *)v301 = v304;
        v301 -= 4;
        v302 -= 2;
        v303 -= 4;
      }
      while (v303);
      v285 -= v299 & 0x3FFFFFFFFFFFFFFCLL;
      if (v299 == (v299 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_385;
    }
    do
    {
      v313 = *(_QWORD *)(v300 - 8);
      v300 -= 8;
      *--v285 = v313;
    }
    while (v300 != v297);
    goto LABEL_385;
  }
LABEL_386:
  *(_QWORD *)(v274 + 32) = v285;
  *(_QWORD *)(v274 + 40) = v289;
  v315 = *(_QWORD *)(v274 + 48);
  *(_QWORD *)(v274 + 48) = v286;
  if (v296)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v274 + 56) + 40))(*(_QWORD *)(v274 + 56), v296, v315 - v296);
LABEL_388:
  *(_QWORD *)(v274 + 40) = v289;
  *(_QWORD *)v381 = v276;
  v316 = *(_QWORD *)(v274 + 120);
  if (!v316)
    goto LABEL_446;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v316 + 48))(v316, v381);
  v317 = v272 >> 5;
  v318 = **(_QWORD **)(v276 + 64);
  v319 = *(_QWORD *)(v318 + 8) * (v272 >> 5);
  v320 = *(_QWORD *)(v318 + 72);
  v321 = *(_QWORD *)(v318 + 80) - v320;
  if (v319 != v321)
  {
    if (v319 <= v321)
    {
      if (v319 < v321)
        *(_QWORD *)(v318 + 80) = v320 + v319;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v318 + 72, v319 - v321);
    }
    v322 = *(std::__shared_weak_count **)(v318 + 32);
    *(_QWORD *)(v318 + 24) = 0;
    *(_QWORD *)(v318 + 32) = 0;
    if (v322)
    {
      v323 = (unint64_t *)&v322->__shared_owners_;
      do
        v324 = __ldaxr(v323);
      while (__stlxr(v324 - 1, v323));
      if (!v324)
      {
        ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
        std::__shared_weak_count::__release_weak(v322);
      }
    }
    *(_QWORD *)(v318 + 120) = 0;
    *(_DWORD *)(v318 + 112) = 0;
    v325 = *(_QWORD *)(v318 + 80) - *(_QWORD *)(v318 + 72);
    *(_QWORD *)(v318 + 40) = 0;
    *(_QWORD *)(v318 + 48) = v325;
    *(_QWORD *)(v318 + 56) = 0;
    *(_QWORD *)(v318 + 64) = v325;
    v318 = **(_QWORD **)(v276 + 64);
    v319 = *(_QWORD *)(v318 + 8) * v317;
  }
  v388 = 0uLL;
  *(_QWORD *)&v326 = 0;
  *((_QWORD *)&v326 + 1) = v318;
  v327 = v276;
  if (v319)
    v328 = *(_QWORD *)(v318 + 72);
  else
    v328 = 0;
  v388 = v326;
  *(_QWORD *)&v389 = 0;
  *((_QWORD *)&v389 + 1) = v319;
  v391 = v328;
  v390 = 1;
  if (v317 <= 1)
    v329 = 1;
  else
    v329 = v317;
  v330 = 16;
  do
  {
    v331 = (_DWORD *)(v328 + v330);
    *(v331 - 4) = *(_DWORD *)&v210[v330 - 16];
    *(v331 - 3) = *(_DWORD *)&v210[v330 - 12];
    *(v331 - 2) = *(_DWORD *)&v210[v330 - 8];
    *v331 = *(_DWORD *)&v210[v330];
    v331[1] = *(_DWORD *)&v210[v330 + 4];
    v331[2] = *(_DWORD *)&v210[v330 + 8];
    v331[3] = *(_DWORD *)&v210[v330 + 12];
    v330 += 32;
    --v329;
  }
  while (v329);
  v332 = *a2;
  gm::operator*<double,4,4,4>((double *)v381, (double *)(v366 + 808), (double *)(*a2 + 8));
  v333 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(v332 + 400));
  v334 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v384), v385);
  v335 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v386), v387);
  v336 = *(_QWORD **)(v333 + 64);
  v337 = (_QWORD *)v336[2];
  v338 = v337[1];
  v339 = (float32x4_t *)v337[9];
  v376 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v382), v383);
  v378 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v381), *(float64x2_t *)&v381[16]);
  *v339 = v378;
  v339[1] = v376;
  v372 = v334;
  v339[2] = v334;
  v339[3] = v335;
  v369 = v335;
  if (v337[8] > v338)
    v338 = v337[8];
  v337[7] = 0;
  v337[8] = v338;
  v340 = (_QWORD *)*v336;
  v341 = v340[1];
  *(int32x4_t *)v340[9] = v368;
  if (v340[8] > v341)
    v341 = v340[8];
  v340[7] = 0;
  v340[8] = v341;
  v342 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*a2 + 408));
  *((_QWORD *)v342 + 8) = v327;
  *((_QWORD *)v342 + 4) = v333;
  *((_QWORD *)v342 + 3) = *(_QWORD *)(*a2 + 392);
  *((_QWORD *)v342 + 6) = -1;
  ggl::CommandBuffer::pushRenderItem(a5, v342);
  v343 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*a2 + 400));
  v344 = *(_QWORD **)(v343 + 64);
  v345 = (_QWORD *)v344[2];
  v346 = v345[1];
  v347 = (float32x4_t *)v345[9];
  *v347 = v378;
  v347[1] = v376;
  v347[2] = v372;
  v347[3] = v369;
  if (v345[8] > v346)
    v346 = v345[8];
  v345[7] = 0;
  v345[8] = v346;
  v348 = (_QWORD *)*v344;
  v349 = v348[1];
  *(_OWORD *)v348[9] = xmmword_19FFB3CB0;
  if (v348[8] > v349)
    v349 = v348[8];
  v348[7] = 0;
  v348[8] = v349;
  v350 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*a2 + 408));
  *((_QWORD *)v350 + 8) = v327;
  *((_QWORD *)v350 + 4) = v343;
  *((_QWORD *)v350 + 3) = *(_QWORD *)(*a2 + 424);
  *((_QWORD *)v350 + 6) = -1;
  ggl::CommandBuffer::pushRenderItem(a5, v350);
  v273 = v379;
  if (v319)
  {
    v351 = *(_QWORD *)(v318 + 64);
    if (v351 <= v319)
      v351 = v319;
    *(_QWORD *)(v318 + 56) = 0;
    *(_QWORD *)(v318 + 64) = v351;
  }
LABEL_420:
  if (v273)
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v373 + 40))(v373, v273, v380 - v273);
  if (v210)
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v374 + 40))(v374, v210, v212 - (_QWORD)v210);
  v208 = (std::__shared_weak_count *)__p;
LABEL_425:
  if (v208)
  {
    v352 = v393;
    v353 = v208;
    if (v393 != v208)
    {
      v354 = v393;
      do
      {
        shared_weak_owners = (_QWORD *)v354[-1].__shared_weak_owners_;
        v354 = (std::__shared_weak_count *)((char *)v354 - 8);
        v355 = shared_weak_owners;
        if (shared_weak_owners)
        {
          _ZF = (*v355)-- == 1;
          if (_ZF)
          {
            md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v355 + 1));
            {
              v358 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v358, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v352[-1].__shared_weak_owners_, 424);
            v352[-1].__shared_weak_owners_ = 0;
          }
        }
        v352 = v354;
      }
      while (v354 != v208);
      v353 = __p;
    }
    v393 = v208;
    operator delete(v353);
  }
}

void sub_19F62F590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char *a62,char a63)
{
  char *a66;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t *v68;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;

  v70 = (_QWORD *)v66[11];
  if (v70 == v67)
  {
    v71 = 4;
  }
  else
  {
    if (!v70)
    {
      v72 = *v68;
      if (*v68)
        goto LABEL_16;
      goto LABEL_5;
    }
    v71 = 5;
    v67 = (_QWORD *)v66[11];
  }
  (*(void (**)(_QWORD *))(*v67 + 8 * v71))(v67);
  v72 = *v68;
  if (*v68)
  {
LABEL_16:
    v66[5] = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v66[7] + 40))(v66[7], v72, v66[6] - v72);
    v73 = *v66;
    if (!*v66)
    {
LABEL_7:
      v74 = a62;
      if (a62 == &a59)
      {
        v75 = 4;
        v74 = &a59;
      }
      else
      {
        if (!a62)
          goto LABEL_12;
        v75 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
LABEL_12:
      v76 = a66;
      if (a66 == &a63)
      {
        v77 = 4;
        v76 = &a63;
      }
      else
      {
        if (!a66)
          goto LABEL_21;
        v77 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v76 + 8 * v77))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v66, 0x10A0C40D234DDC7);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
      _Unwind_Resume(a1);
    }
LABEL_6:
    v66[1] = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v66[3] + 40))(v66[3], v73, v66[2] - v73);
    goto LABEL_7;
  }
LABEL_5:
  v73 = *v66;
  if (!*v66)
    goto LABEL_7;
  goto LABEL_6;
}

void sub_19F62F890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  uint64_t v50;
  uint64_t v51;

  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a43);
  if (a25)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a19 + 40))(a19, a25, a26 - a25);
  if (v51)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a20 + 40))(a20, v51, v50 - v51);
  std::vector<geo::fast_shared_ptr<md::RouteLineSection,mdm::MDAllocator>>::~vector[abi:nn180100](&a50);
  _Unwind_Resume(a1);
}

void **std::vector<geo::fast_shared_ptr<md::RouteLineSection,mdm::MDAllocator>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  malloc_zone_t *zone;
  _QWORD *v7;
  _QWORD *v8;
  unsigned __int8 v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  char *v15;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = v3;
      do
      {
        v8 = (_QWORD *)*((_QWORD *)v5 - 1);
        v5 -= 8;
        v7 = v8;
        if (v8)
        {
          if ((*v7)-- == 1)
          {
            md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v7 + 1));
            {
              v15 = v2;
              v11 = operator new();
              *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v11 + 24) = "VectorKitLabels";
              *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v11 = &off_1E42B5668;
              *(_QWORD *)(v11 + 8) = "VectorKitLabels";
              *(_OWORD *)(v11 + 72) = 0u;
              *(_OWORD *)(v11 + 88) = 0u;
              *(_OWORD *)(v11 + 104) = 0u;
              *(_OWORD *)(v11 + 120) = 0u;
              *(_OWORD *)(v11 + 136) = 0u;
              *(_OWORD *)(v11 + 152) = 0u;
              *(_OWORD *)(v11 + 168) = 0u;
              *(_OWORD *)(v11 + 184) = 0u;
              *(_OWORD *)(v11 + 200) = 0u;
              *(_OWORD *)(v11 + 216) = 0u;
              *(_OWORD *)(v11 + 232) = 0u;
              *(_QWORD *)(v11 + 248) = 0;
              *(_OWORD *)(v11 + 56) = 0u;
              v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
              if ((_DWORD)v12)
                geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v11 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v11 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v11;
              v2 = v15;
            }
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)v3 - 1), 424);
            *((_QWORD *)v3 - 1) = 0;
          }
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug12ExtendedMeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug12ExtendedMeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7508;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug12ExtendedMeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7508;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2>,ggl::Debug::ExtendedMesh * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2>,ggl::Debug::ExtendedMesh * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CD970;
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2>,ggl::Debug::ExtendedMesh * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CD970;
}

uint64_t std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2>,ggl::Debug::ExtendedMesh * ()(void)>::operator()()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unsigned __int8 v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned __int8 v26;
  uint64_t v27;
  geo::read_write_lock *v28;
  const char *v29;
  malloc_zone_t *zone;
  uint64_t v31;
  geo::read_write_lock *v32;
  const char *v33;
  malloc_zone_t *v34;
  uint64_t v35;
  geo::read_write_lock *v36;
  const char *v37;
  malloc_zone_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  geo::read_write_lock *v43;
  const char *v44;
  malloc_zone_t *v45;
  uint64_t v46;

  v0 = operator new();
  if ((v1 & 1) == 0
  {
    if ((v26 & 1) == 0
    {
      ggl::MeshTyped<ggl::Debug::ExtendedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Debug::extendedVboReflection;
    }
    ggl::MeshTyped<ggl::Debug::ExtendedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Debug::ExtendedVbo>::attributesReflection(void)::r;
    unk_1EE58B490 = 1;
  }
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 48) = 0;
  *(_QWORD *)v0 = &off_1E42BBC08;
  *(_QWORD *)(v0 + 8) = "Debug RouteLine Points Mesh";
  *(_QWORD *)(v0 + 16) = &unk_1E42BBC28;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 56) = &ggl::MeshTyped<ggl::Debug::ExtendedVbo>::typedReflection(void)::r;
  *(_QWORD *)(v0 + 64) = 0;
  v2 = v0 + 64;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  {
    v27 = operator new();
    *(_QWORD *)(v27 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v27 + 24) = "GeoGL";
    *(_OWORD *)(v27 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v27 = &off_1E42B5668;
    *(_QWORD *)(v27 + 8) = "GeoGL";
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *(_OWORD *)(v27 + 120) = 0u;
    *(_OWORD *)(v27 + 136) = 0u;
    *(_OWORD *)(v27 + 152) = 0u;
    *(_OWORD *)(v27 + 168) = 0u;
    *(_OWORD *)(v27 + 184) = 0u;
    *(_OWORD *)(v27 + 200) = 0u;
    *(_OWORD *)(v27 + 216) = 0u;
    *(_OWORD *)(v27 + 232) = 0u;
    *(_QWORD *)(v27 + 248) = 0;
    *(_OWORD *)(v27 + 56) = 0u;
    v28 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v27 + 56), 0);
    if ((_DWORD)v28)
      geo::read_write_lock::logFailure(v28, (uint64_t)"initialization", v29);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v27 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v27 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v27;
  }
  v4 = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v0 + 120) = 0;
  v5 = v0 + 120;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 88) = v4;
  {
    v31 = operator new();
    *(_QWORD *)(v31 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v31 + 24) = "GeoGL";
    *(_OWORD *)(v31 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v31 = &off_1E42B5668;
    *(_QWORD *)(v31 + 8) = "GeoGL";
    *(_OWORD *)(v31 + 72) = 0u;
    *(_OWORD *)(v31 + 88) = 0u;
    *(_OWORD *)(v31 + 104) = 0u;
    *(_OWORD *)(v31 + 120) = 0u;
    *(_OWORD *)(v31 + 136) = 0u;
    *(_OWORD *)(v31 + 152) = 0u;
    *(_OWORD *)(v31 + 168) = 0u;
    *(_OWORD *)(v31 + 184) = 0u;
    *(_OWORD *)(v31 + 200) = 0u;
    *(_OWORD *)(v31 + 216) = 0u;
    *(_OWORD *)(v31 + 232) = 0u;
    *(_QWORD *)(v31 + 248) = 0;
    *(_OWORD *)(v31 + 56) = 0u;
    v32 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v31 + 56), 0);
    if ((_DWORD)v32)
      geo::read_write_lock::logFailure(v32, (uint64_t)"initialization", v33);
    v34 = malloc_create_zone(0, 0);
    *(_QWORD *)(v31 + 48) = v34;
    malloc_set_zone_name(v34, "GeoGL");
    *(_QWORD *)(v31 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v31;
    v5 = v0 + 120;
  }
  *(_QWORD *)(v0 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 112) = v5;
  *(_QWORD *)v0 = &off_1E42BDCF8;
  *(_QWORD *)(v0 + 16) = &unk_1E42BDD18;
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = (v8 - v6) >> 4;
  v10 = v7 - v9;
  if (v7 <= v9)
  {
    if (v7 < v9)
    {
      v11 = v6 + 16 * v7;
      while (v8 != v11)
      {
        v12 = *(std::__shared_weak_count **)(v8 - 8);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v10);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v8 -= 16;
      }
      *(_QWORD *)(v0 + 72) = v11;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__append(v0 + 64, v10);
  }
  *(_QWORD *)v0 = &off_1E42BBCD8;
  *(_QWORD *)(v0 + 16) = &unk_1E42BBCF8;
  {
    v35 = operator new();
    *(_QWORD *)(v35 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v35 + 24) = "GeoGL";
    *(_OWORD *)(v35 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v35 = &off_1E42B5668;
    *(_QWORD *)(v35 + 8) = "GeoGL";
    *(_OWORD *)(v35 + 72) = 0u;
    *(_OWORD *)(v35 + 88) = 0u;
    *(_OWORD *)(v35 + 104) = 0u;
    *(_OWORD *)(v35 + 120) = 0u;
    *(_OWORD *)(v35 + 136) = 0u;
    *(_OWORD *)(v35 + 152) = 0u;
    *(_OWORD *)(v35 + 168) = 0u;
    *(_OWORD *)(v35 + 184) = 0u;
    *(_OWORD *)(v35 + 200) = 0u;
    *(_OWORD *)(v35 + 216) = 0u;
    *(_OWORD *)(v35 + 232) = 0u;
    *(_QWORD *)(v35 + 248) = 0;
    *(_OWORD *)(v35 + 56) = 0u;
    v36 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v35 + 56), 0);
    if ((_DWORD)v36)
      geo::read_write_lock::logFailure(v36, (uint64_t)"initialization", v37);
    v38 = malloc_create_zone(0, 0);
    *(_QWORD *)(v35 + 48) = v38;
    malloc_set_zone_name(v38, "GeoGL");
    *(_QWORD *)(v35 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v35;
  }
  v16 = ggl::Allocator::instance(void)::alloc;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 16))(ggl::Allocator::instance(void)::alloc, 256, 8);
  *(_QWORD *)v17 = &off_1E42E0330;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 32) = &off_1E42B5748;
  v18 = v17 + 32;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)(v17 + 40) = 32;
  *(_DWORD *)(v17 + 48) = 6;
  v19 = 0uLL;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_QWORD *)(v17 + 120) = 0;
  if ((v20 & 1) == 0)
  {
    v46 = v17;
    v39 = v17 + 32;
    v19 = 0uLL;
    v18 = v39;
    v41 = v40;
    v17 = v46;
    if (v41)
    {
      v42 = operator new();
      *(_QWORD *)(v42 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v42 + 24) = "GeoGL";
      *(_OWORD *)(v42 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v42 = &off_1E42B5668;
      *(_QWORD *)(v42 + 8) = "GeoGL";
      *(_OWORD *)(v42 + 72) = 0u;
      *(_OWORD *)(v42 + 88) = 0u;
      *(_OWORD *)(v42 + 104) = 0u;
      *(_OWORD *)(v42 + 120) = 0u;
      *(_OWORD *)(v42 + 136) = 0u;
      *(_OWORD *)(v42 + 152) = 0u;
      *(_OWORD *)(v42 + 168) = 0u;
      *(_OWORD *)(v42 + 184) = 0u;
      *(_OWORD *)(v42 + 200) = 0u;
      *(_OWORD *)(v42 + 216) = 0u;
      *(_OWORD *)(v42 + 232) = 0u;
      *(_QWORD *)(v42 + 248) = 0;
      *(_OWORD *)(v42 + 56) = 0u;
      v43 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v42 + 56), 0);
      if ((_DWORD)v43)
        geo::read_write_lock::logFailure(v43, (uint64_t)"initialization", v44);
      v45 = malloc_create_zone(0, 0);
      *(_QWORD *)(v42 + 48) = v45;
      malloc_set_zone_name(v45, "GeoGL");
      *(_QWORD *)(v42 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v42;
      v17 = v46;
      v18 = v39;
      v19 = 0uLL;
    }
  }
  *(_QWORD *)(v17 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 136) = 0;
  *(_OWORD *)(v17 + 200) = v19;
  *(_OWORD *)(v17 + 184) = v19;
  *(_OWORD *)(v17 + 168) = v19;
  *(_QWORD *)(v17 + 216) = 0;
  *(_QWORD *)(v17 + 224) = -1;
  *(_OWORD *)(v17 + 152) = xmmword_19FFB2DD0;
  *(_DWORD *)(v17 + 144) = 0;
  *(_QWORD *)(v17 + 240) = "Debug RouteLine Points Mesh";
  *(_QWORD *)(v17 + 248) = &ggl::Debug::extendedVboReflection;
  *(_QWORD *)(v17 + 32) = &off_1E42B8060;
  *(_QWORD *)(v17 + 232) = &unk_1E42B8080;
  v21 = *(uint64_t **)v2;
  v22 = *(std::__shared_weak_count **)(*(_QWORD *)v2 + 8);
  *v21 = v18;
  v21[1] = v17;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v0;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CD928;
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CD928;
}

int64x2_t std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "Debug RouteLine Points";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug21ExtendedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug21ExtendedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D75E0;
  return result;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug21ExtendedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D75E0;
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0>,ggl::Debug::ExtendedPipelineSetup * ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42CD8E0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return a1;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return a1;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0>,ggl::Debug::ExtendedPipelineSetup * ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E42CD8E0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0>,ggl::Debug::ExtendedPipelineSetup * ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E42CD8E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0>,ggl::Debug::ExtendedPipelineSetup * ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E42CD8E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0>,ggl::Debug::ExtendedPipelineSetup * ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0>,ggl::Debug::ExtendedPipelineSetup * ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)__p[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[2];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[2];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  operator delete(__p);
}

uint64_t std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0,std::allocator<md::RouteRenderLayer::layoutDebugRouteLinePoints(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0>,ggl::Debug::ExtendedPipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v22[2];
  uint64_t v23;
  std::__shared_weak_count *v24;

  v2 = operator new();
  v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2390;
  v4 = ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE55CAC0, 2, 1, 6, 1);
  v3[9].__shared_owners_ = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9850;
  v23 = v4;
  v24 = v3;
  v5 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2358;
  v7 = ggl::BufferData::BufferData((uint64_t)&v5[1], qword_1EE55CB00, 2, 1, 6, 1);
  v5[9].__shared_owners_ = (uint64_t)ggl::Debug::View::reflection(void)::reflection;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9830;
  v22[0] = v7;
  v22[1] = (uint64_t)v5;
  ggl::Debug::ExtendedPipelineSetup::ExtendedPipelineSetup((_QWORD *)v2, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), &v23, v22, (uint64_t *)(*(_QWORD *)(a1 + 24) + 232));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v9 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = **(_QWORD ***)(v2 + 64);
  v13 = v12[1];
  v14 = v12[9];
  *(_DWORD *)(v14 + 16) = 1101004800;
  v15 = v12[8];
  if (v15 <= v13)
    v15 = v13;
  v12[7] = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)v14 = _Q0;
  if (v15 > v13)
    v13 = v15;
  v12[8] = v13;
  return v2;
}

void sub_19F630908(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v5;

  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 - 1, v3));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  MEMORY[0x1A1AF4E00](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

uint64_t ggl::ConstantDataTyped<ggl::Debug::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Debug::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Debug::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Debug::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Debug::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Debug::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Debug::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Debug::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Debug::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Debug::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ggl::Debug::ExtendedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Debug::ExtendedPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4578;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Debug::ExtendedPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *__Block_byref_object_copy__40(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
  std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::less<GEOComposedRouteSection * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>>>::destroy(*(_QWORD **)(a1 + 56));
}

void ___ZN2md16RouteRenderLayer34layoutDebugRouteLineSnappingStatusERKNSt3__110shared_ptrINS_16RouteLineOverlayEEERKN3ggl15StandardLibraryERKNS_13LayoutContextEPNS7_13CommandBufferE_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  uint64_t v76;
  uint64_t v77;
  const float *v78;
  float *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  float32x4_t *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  int v95;
  ggl::RenderItem *v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  float64x2_t v101[8];
  double v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  double v110;
  double v111;
  __int128 v112;
  float32x4x3_t v113;
  float32x4x4_t v114;

  v100 = a2;
  objc_msgSend(v100, "section");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v99 = v3;
  objc_msgSend(v100, "section");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  v8 = (uint64_t **)(v4 + 56);
  v7 = *(uint64_t **)(v4 + 56);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = v7[4];
        if (v5 >= v10)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (v10 >= v5)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_8;
      }
    }
    v11 = (uint64_t *)v9;
  }
  else
  {
    v9 = (uint64_t **)(v4 + 56);
LABEL_8:
    v11 = (uint64_t *)operator new(0x40uLL);
    v11[4] = (uint64_t)v6;
    v11[5] = 0;
    v11[6] = 0;
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *v8 = v11;
    v12 = **(_QWORD **)(v4 + 48);
    v13 = v11;
    if (v12)
    {
      *(_QWORD *)(v4 + 48) = v12;
      v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 56), v13);
    v6 = 0;
    ++*(_QWORD *)(v4 + 64);
  }
  v14 = objc_msgSend(v100, "routeStartIndex");
  v15 = objc_msgSend(v3, "startPointIndex");
  v16 = objc_msgSend(v100, "routeEndIndex");
  v17 = v14 - v15;
  v18 = v16 - objc_msgSend(v3, "startPointIndex");
  v20 = (char *)v11[6];
  v19 = v11[7];
  if ((unint64_t)v20 < v19)
  {
    *(_DWORD *)v20 = v17;
    *((_DWORD *)v20 + 1) = v18;
    v21 = v20 + 8;
    v22 = a1;
    v23 = v3;
    goto LABEL_32;
  }
  v24 = (char *)v11[5];
  v25 = (v20 - v24) >> 3;
  v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) >> 61)
    abort();
  v27 = v19 - (_QWORD)v24;
  if (v27 >> 2 > v26)
    v26 = v27 >> 2;
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
    v28 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v28 = v26;
  if (v28 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v29 = operator new(8 * v28);
  v30 = &v29[8 * v25];
  v31 = &v29[8 * v28];
  *v30 = v17;
  v30[1] = v18;
  v21 = v30 + 2;
  if (v20 == v24)
  {
    v22 = a1;
    v23 = v99;
    goto LABEL_30;
  }
  v32 = v20 - v24 - 8;
  if (v32 < 0x58)
  {
    v22 = a1;
    v23 = v99;
    do
    {
LABEL_29:
      v38 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      *((_QWORD *)v30 - 1) = v38;
      v30 -= 2;
    }
    while (v20 != v24);
    goto LABEL_30;
  }
  v22 = a1;
  v23 = v99;
  if ((unint64_t)(v24 - v29) < 0x20)
    goto LABEL_29;
  v33 = (v32 >> 3) + 1;
  v34 = &v29[8 * v25 - 16];
  v35 = v20 - 16;
  v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v37 = *(_OWORD *)v35;
    *(v34 - 1) = *((_OWORD *)v35 - 1);
    *v34 = v37;
    v34 -= 2;
    v35 -= 32;
    v36 -= 4;
  }
  while (v36);
  v30 -= 2 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
  v20 -= 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
  if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_29;
LABEL_30:
  v11[5] = (uint64_t)v30;
  v11[6] = (uint64_t)v21;
  v11[7] = (uint64_t)v31;
  if (v24)
    operator delete(v24);
LABEL_32:
  v11[6] = (uint64_t)v21;

  v39 = objc_msgSend(v100, "routeEndIndex");
  v40 = objc_msgSend(v100, "routeStartIndex");
  if (objc_msgSend(v23, "pointCount"))
  {
    v41 = (v39 - v40 + 1);
    if (v41 >= 2)
    {
      v42 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(**(_QWORD **)(v22 + 40) + 384));
      v43 = **(_QWORD **)(v42 + 64);
      v44 = *(_QWORD *)(v43 + 72);
      if (*(_QWORD *)(v43 + 80) != v44)
      {
        *(_QWORD *)(v43 + 80) = v44;
        v45 = *(std::__shared_weak_count **)(v43 + 32);
        *(_QWORD *)(v43 + 24) = 0;
        *(_QWORD *)(v43 + 32) = 0;
        if (v45)
        {
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(p_shared_owners);
          while (__stlxr(v47 - 1, p_shared_owners));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        *(_QWORD *)(v43 + 120) = 0;
        *(_DWORD *)(v43 + 112) = 0;
        v48 = *(_QWORD *)(v43 + 80) - *(_QWORD *)(v43 + 72);
        *(_QWORD *)(v43 + 40) = 0;
        *(_QWORD *)(v43 + 48) = v48;
        *(_QWORD *)(v43 + 56) = 0;
        *(_QWORD *)(v43 + 64) = v48;
      }
      objc_msgSend(v23, "vkBounds");
      v105 = 0u;
      v107 = 0;
      v109 = 0;
      v106 = 0u;
      v104 = 0u;
      v103 = 0u;
      v102 = v50 - v49;
      *(double *)&v105 = v52 - v51;
      v108 = v50 - v49;
      v110 = v49;
      v111 = v51;
      v53 = (double *)(*(_QWORD *)(v22 + 48) + 808);
      v112 = xmmword_19FFB33A0;
      v54 = objc_msgSend(v23, "points", gm::operator*<double,4,4,4>(v101[0].f64, v53, &v102));
      v55 = objc_msgSend(v100, "routeStartIndex");
      v56 = objc_msgSend(v23, "startPointIndex");
      v98 = v42;
      v57 = **(_QWORD **)(v42 + 64);
      v58 = *(_QWORD *)(v57 + 8) * v41;
      v59 = *(_QWORD *)(v57 + 72);
      v60 = *(_QWORD *)(v57 + 80) - v59;
      if (v58 != v60)
      {
        if (v58 <= v60)
        {
          if (v58 < v60)
            *(_QWORD *)(v57 + 80) = v59 + v58;
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v57 + 72, v58 - v60);
        }
        v61 = *(std::__shared_weak_count **)(v57 + 32);
        *(_QWORD *)(v57 + 24) = 0;
        *(_QWORD *)(v57 + 32) = 0;
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        *(_QWORD *)(v57 + 120) = 0;
        *(_DWORD *)(v57 + 112) = 0;
        v64 = *(_QWORD *)(v57 + 80) - *(_QWORD *)(v57 + 72);
        *(_QWORD *)(v57 + 40) = 0;
        *(_QWORD *)(v57 + 48) = v64;
        *(_QWORD *)(v57 + 56) = 0;
        *(_QWORD *)(v57 + 64) = v64;
        v57 = **(_QWORD **)(v98 + 64);
        v58 = *(_QWORD *)(v57 + 8) * v41;
      }
      v65 = (uint64_t *)(v54 + 12 * v55 - 12 * v56);
      v66 = v57;
      if (v58)
        v67 = *(_QWORD *)(v57 + 72);
      else
        v67 = 0;
      v68 = v66;
      if (v41 > 8
        && (v67 >= -12 * v56 + 12 * ((unint64_t)v55 + v41) + v54 - 4 || (unint64_t)v65 >= v67 + 16 * v41))
      {
        v70 = v41 & 7;
        if ((v41 & 7) == 0)
          v70 = 8;
        v69 = v41 - v70;
        v71 = (float *)(v67 + 64);
        __asm { FMOV            V5.4S, #1.0 }
        v76 = v54 + 12 * v55 - 12 * v56;
        v77 = v69;
        v23 = v99;
        do
        {
          v78 = (const float *)v76;
          v113 = vld3q_f32(v78);
          v78 += 12;
          v113.val[2] = 0uLL;
          *(float32x4x3_t *)v114.val[0].f32 = vld3q_f32(v78);
          v114.val[2] = 0uLL;
          v114.val[3] = _Q5;
          v79 = v71 - 16;
          vst4q_f32(v79, *(float32x4x4_t *)(&_Q5 - 3));
          vst4q_f32(v71, v114);
          v71 += 32;
          v76 += 96;
          v77 -= 8;
        }
        while (v77);
        v65 = (uint64_t *)((char *)v65 + 12 * v69);
      }
      else
      {
        v69 = 0;
        v23 = v99;
      }
      v80 = v41 - v69;
      v81 = (_QWORD *)(v67 + 16 * v69 + 8);
      do
      {
        v82 = *v65;
        v65 = (uint64_t *)((char *)v65 + 12);
        *(v81 - 1) = v82;
        *v81 = 0x3F80000000000000;
        v81 += 2;
        --v80;
      }
      while (v80);
      v83 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(**(_QWORD **)(v22 + 40) + 368));
      v84 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v101[2]), v101[3]);
      v85 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v101[4]), v101[5]);
      v86 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v101[6]), v101[7]);
      v87 = *(_QWORD **)(v83 + 64);
      v88 = (_QWORD *)v87[2];
      v89 = v88[1];
      v90 = (float32x4_t *)v88[9];
      *v90 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v101[0]), v101[1]);
      v90[1] = v84;
      v90[2] = v85;
      v90[3] = v86;
      if (v88[8] > v89)
        v89 = v88[8];
      v88[7] = 0;
      v88[8] = v89;
      v91 = (_QWORD *)*v87;
      v92 = v91[1];
      if (v92)
      {
        v93 = v91[9];
        if (v93)
          _ZF = v92 == 0;
        else
          _ZF = 1;
        if (!_ZF)
        {
          if (v91[8] > v92)
            v92 = v91[8];
          v91[7] = 0;
          v91[8] = v92;
        }
      }
      else
      {
        v93 = 0;
      }
      if (objc_msgSend(v100, "isMapMatched") && (objc_msgSend(v100, "isMapMatching") & 1) == 0)
      {
        *(_QWORD *)v93 = 0;
      }
      else
      {
        v95 = objc_msgSend(v100, "isMapMatching");
        *(_DWORD *)v93 = 1065353216;
        if (v95)
          *(_DWORD *)(v93 + 4) = 1065353216;
        else
          *(_DWORD *)(v93 + 4) = 0;
      }
      *(_QWORD *)(v93 + 8) = 0x3F80000000000000;
      v96 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(**(_QWORD **)(v22 + 40) + 376));
      *((_QWORD *)v96 + 8) = v98;
      *((_QWORD *)v96 + 4) = v83;
      *((_QWORD *)v96 + 3) = *(_QWORD *)(**(_QWORD **)(v22 + 40) + 360);
      ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(v22 + 56), v96);
      if (v58)
      {
        v97 = *(_QWORD *)(v68 + 64);
        if (v97 <= v58)
          v97 = v58;
        *(_QWORD *)(v68 + 56) = 0;
        *(_QWORD *)(v68 + 64) = v97;
      }
    }
  }

}

void sub_19F6313D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12, char a13)
{
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a13);

  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *,false>(uint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  int *v21;
  int *v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int *v36;
  int *v37;
  int *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  int *v49;
  int v50;
  int v51;
  int v52;
  int *v53;
  int *v54;
  int *v55;
  int v56;
  int v57;
  int *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int *v64;
  int *v65;
  int *v66;
  unsigned int v67;
  int *v68;
  int *v69;
  int *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int *v77;
  int *v78;
  int v79;
  int v80;
  int *v81;
  int v82;
  int v83;
  int v84;
  int *v85;
  int v86;
  int v87;
  int v88;
  BOOL v89;
  uint64_t v90;
  int v91;
  int *v92;
  int *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int *v116;
  BOOL v118;
  uint64_t v119;
  int *v120;
  int *v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  char *v127;
  int v128;
  int64_t v129;
  int64_t v130;
  BOOL v131;
  uint64_t v132;
  int *v133;
  int v134;
  int v135;
  int *v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  int v144;
  int v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int *v150;
  int v151;
  int v152;
  int v153;
  int *v154;
  int v155;
  int v156;
  int v157;
  int *v158;
  int v159;
  int v160;
  uint64_t v161;
  int *v162;
  int *v163;
  int v164;
  int v165;
  int v166;
  int v167;

  v7 = (int *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = a2 - 1;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v100 = *v10;
        if (*v8 < *v10)
        {
          *v10 = *v8;
          *v8 = v100;
          v101 = v10[1];
          v10[1] = *v9;
          *v9 = v101;
        }
        return result;
      case 3:
        v102 = v10[2];
        v103 = *v10;
        v104 = *v8;
        if (v102 >= *v10)
        {
          if (v104 >= v102)
            return result;
          v10[2] = v104;
          *v8 = v102;
          v155 = v10[3];
          v10[3] = *v9;
          *v9 = v155;
          v156 = v10[2];
          v157 = *v10;
          if (v156 >= *v10)
            return result;
          *v10 = v156;
          v10[2] = v157;
          v105 = v10 + 1;
          v9 = v10 + 3;
        }
        else
        {
          if (v104 >= v102)
          {
            v105 = v10 + 3;
            v165 = v10[3];
            v166 = v10[1];
            *v10 = v102;
            v10[1] = v165;
            v10[2] = v103;
            v10[3] = v166;
            if (*v8 >= v103)
              return result;
            v10[2] = *v8;
          }
          else
          {
            v105 = v10 + 1;
            *v10 = v104;
          }
          *v8 = v103;
        }
        v167 = *v105;
        *v105 = *v9;
        *v9 = v167;
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *>(v10, v10 + 2, v10 + 4, a2 - 2);
      case 5:
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *>(v10, v10 + 2, v10 + 4, v10 + 6);
        v106 = v10[6];
        if (*v8 < v106)
        {
          v10[6] = *v8;
          *v8 = v106;
          v107 = v10[7];
          v10[7] = *v9;
          *v9 = v107;
          v108 = v10[6];
          v109 = v10[4];
          if (v108 < v109)
          {
            v110 = v10[5];
            v111 = v10[7];
            v10[4] = v108;
            v10[5] = v111;
            v10[6] = v109;
            v10[7] = v110;
            v112 = v10[2];
            if (v108 < v112)
            {
              v113 = v10[3];
              v10[2] = v108;
              v10[3] = v111;
              v10[4] = v112;
              v10[5] = v113;
              v114 = *v10;
              if (v108 < *v10)
              {
                v115 = v10[1];
                *v10 = v108;
                v10[1] = v111;
                v10[2] = v114;
                v10[3] = v115;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v116 = v10 + 2;
          v118 = v10 == a2 || v116 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v118)
            {
              v119 = 0;
              v120 = v10;
              do
              {
                v122 = v120[2];
                v123 = *v120;
                v120 = v116;
                if (v122 < v123)
                {
                  v125 = *v116;
                  v124 = v116[1];
                  v126 = v119;
                  do
                  {
                    v127 = (char *)v10 + v126;
                    v128 = *(int *)((char *)v10 + v126 + 4);
                    *((_DWORD *)v127 + 2) = v123;
                    *((_DWORD *)v127 + 3) = v128;
                    if (!v126)
                    {
                      v121 = v10;
                      goto LABEL_126;
                    }
                    v123 = *((_DWORD *)v127 - 2);
                    v126 -= 8;
                  }
                  while (v123 > v125);
                  v121 = (int *)((char *)v10 + v126 + 8);
LABEL_126:
                  *v121 = v125;
                  v121[1] = v124;
                }
                v116 = v120 + 2;
                v119 += 8;
              }
              while (v120 + 2 != a2);
            }
          }
          else if (!v118)
          {
            v158 = v10 + 3;
            do
            {
              v159 = v7[2];
              v160 = *v7;
              v7 = v116;
              if (v159 < v160)
              {
                v161 = *(_QWORD *)v116;
                v162 = v158;
                do
                {
                  v163 = v162;
                  *(v162 - 1) = v160;
                  v164 = *(v162 - 2);
                  v162 -= 2;
                  *v163 = v164;
                  v160 = *(v163 - 5);
                }
                while (v160 > (int)v161);
                *(_QWORD *)(v162 - 1) = v161;
              }
              v116 = v7 + 2;
              v158 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v129 = (unint64_t)(v12 - 2) >> 1;
            v130 = v129;
            do
            {
              if (v129 >= v130)
              {
                v132 = (2 * v130) | 1;
                v133 = &v10[2 * v132];
                if (2 * v130 + 2 >= v12)
                {
                  v134 = *v133;
                }
                else
                {
                  v134 = *v133;
                  v135 = v133[2];
                  if (*v133 <= v135)
                    v134 = v133[2];
                  if (*v133 < v135)
                  {
                    v133 += 2;
                    v132 = 2 * v130 + 2;
                  }
                }
                v136 = &v10[2 * v130];
                if (v134 >= *v136)
                {
                  v137 = *v136;
                  v138 = v136[1];
                  while (1)
                  {
                    result = (uint64_t)v136;
                    v136 = v133;
                    *(_DWORD *)result = v134;
                    *(_DWORD *)(result + 4) = v133[1];
                    if (v129 < v132)
                      break;
                    result = (2 * v132) | 1;
                    v133 = &v10[2 * result];
                    v132 = 2 * v132 + 2;
                    if (v132 < v12)
                    {
                      v134 = *v133;
                      v139 = v133[2];
                      if (*v133 <= v139)
                        v134 = v133[2];
                      if (*v133 >= v139)
                        v132 = result;
                      else
                        v133 += 2;
                      if (v134 < v137)
                        break;
                    }
                    else
                    {
                      v134 = *v133;
                      v132 = result;
                      if (*v133 < v137)
                        break;
                    }
                  }
                  *v136 = v137;
                  v136[1] = v138;
                }
              }
              v131 = v130-- <= 0;
            }
            while (!v131);
            v140 = (unint64_t)v11 >> 3;
            do
            {
              v141 = 0;
              v142 = *(_QWORD *)v10;
              v143 = v10;
              do
              {
                v146 = &v143[2 * v141 + 2];
                v147 = (2 * v141) | 1;
                v141 = 2 * v141 + 2;
                if (v141 < v140)
                {
                  v144 = *v146;
                  v145 = v146[2];
                  if (*v146 <= v145)
                    v144 = v146[2];
                  if (*v146 >= v145)
                    v141 = v147;
                  else
                    v146 += 2;
                }
                else
                {
                  v144 = *v146;
                  v141 = v147;
                }
                *v143 = v144;
                v143[1] = v146[1];
                v143 = v146;
              }
              while (v141 <= (uint64_t)((unint64_t)(v140 - 2) >> 1));
              if (v146 == a2 - 2)
              {
                *(_QWORD *)v146 = v142;
              }
              else
              {
                *v146 = *(a2 - 2);
                v146[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v142;
                v148 = (char *)v146 - (char *)v10 + 8;
                if (v148 >= 9)
                {
                  v149 = (((unint64_t)v148 >> 3) - 2) >> 1;
                  v150 = &v10[2 * v149];
                  v151 = *v150;
                  if (*v150 < *v146)
                  {
                    v152 = *v146;
                    v153 = v146[1];
                    do
                    {
                      v154 = v146;
                      v146 = v150;
                      *v154 = v151;
                      v154[1] = v150[1];
                      if (!v149)
                        break;
                      v149 = (v149 - 1) >> 1;
                      v150 = &v10[2 * v149];
                      v151 = *v150;
                    }
                    while (*v150 < v152);
                    *v146 = v152;
                    v146[1] = v153;
                  }
                }
              }
              a2 -= 2;
              v131 = v140-- <= 2;
            }
            while (!v131);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[2 * ((unint64_t)v12 >> 1)];
        v15 = *v8;
        if ((unint64_t)v11 >= 0x401)
        {
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *v8 = v16;
              v22 = &v10[2 * v13];
              v24 = v22[1];
              v23 = v22 + 1;
              *v23 = *v9;
              *v9 = v24;
              v25 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                v18 = v10 + 1;
                *v14 = v25;
                goto LABEL_22;
              }
            }
          }
          else
          {
            if (v15 < v16)
            {
              v18 = v10 + 1;
              *v10 = v15;
              goto LABEL_21;
            }
            *v10 = v16;
            *v14 = v17;
            v29 = v10[1];
            v18 = &v10[2 * v13 + 1];
            v10[1] = *v18;
            *v18 = v29;
            if (*v8 < v17)
            {
              *v14 = *v8;
LABEL_21:
              *v8 = v17;
              v23 = a2 - 1;
LABEL_22:
              v30 = *v18;
              *v18 = *v23;
              *v23 = v30;
            }
          }
          v31 = v13 - 1;
          v32 = &v10[2 * v13 - 2];
          v33 = *v32;
          v34 = v10[2];
          v35 = *(a2 - 4);
          if (*v32 >= v34)
          {
            if (v35 < v33)
            {
              *v32 = v35;
              *(a2 - 4) = v33;
              v37 = &v10[2 * v31];
              v39 = v37[1];
              v38 = v37 + 1;
              *v38 = *(a2 - 3);
              *(a2 - 3) = v39;
              v40 = v10[2];
              if (*v32 < v40)
              {
                v10[2] = *v32;
                *v32 = v40;
                v36 = v10 + 3;
                goto LABEL_35;
              }
            }
          }
          else
          {
            if (v35 < v33)
            {
              v36 = v10 + 3;
              v10[2] = v35;
              goto LABEL_34;
            }
            v43 = &v10[2 * v31];
            v44 = v43[1];
            v36 = v43 + 1;
            v45 = v10[3];
            v10[2] = v33;
            v10[3] = v44;
            *v32 = v34;
            *v36 = v45;
            v46 = *(a2 - 4);
            if (v46 < v34)
            {
              *v32 = v46;
LABEL_34:
              *(a2 - 4) = v34;
              v38 = a2 - 3;
LABEL_35:
              v47 = *v36;
              *v36 = *v38;
              *v38 = v47;
            }
          }
          v48 = v13 + 1;
          v49 = &v10[2 * v13 + 2];
          v50 = *v49;
          v51 = v10[4];
          v52 = *(a2 - 6);
          if (*v49 >= v51)
          {
            if (v52 < v50)
            {
              *v49 = v52;
              *(a2 - 6) = v50;
              v54 = &v10[2 * v48];
              v56 = v54[1];
              v55 = v54 + 1;
              *v55 = *(a2 - 5);
              *(a2 - 5) = v56;
              v50 = *v49;
              v57 = v10[4];
              if (*v49 < v57)
              {
                v10[4] = v50;
                *v49 = v57;
                v53 = v10 + 5;
                goto LABEL_45;
              }
            }
          }
          else
          {
            if (v52 < v50)
            {
              v53 = v10 + 5;
              v10[4] = v52;
              goto LABEL_44;
            }
            v58 = &v10[2 * v48];
            v59 = v58[1];
            v53 = v58 + 1;
            result = v10[5];
            v10[4] = v50;
            v10[5] = v59;
            *v49 = v51;
            *v53 = result;
            v60 = *(a2 - 6);
            if (v60 >= v51)
            {
              v50 = v51;
            }
            else
            {
              *v49 = v60;
LABEL_44:
              *(a2 - 6) = v51;
              v55 = a2 - 5;
LABEL_45:
              v61 = *v53;
              *v53 = *v55;
              *v55 = v61;
              v50 = *v49;
            }
          }
          v62 = *v14;
          v63 = *v32;
          if (*v14 >= *v32)
          {
            if (v50 < v62)
            {
              *v14 = v50;
              v66 = &v10[2 * v13];
              v67 = v66[1];
              v65 = v66 + 1;
              result = v67;
              *v49 = v62;
              v68 = &v10[2 * v48];
              *v65 = v68[1];
              v68[1] = v67;
              if (v50 < v63)
              {
                *v32 = v50;
                *v14 = v63;
                v64 = &v10[2 * v31 + 1];
                goto LABEL_54;
              }
              v62 = v50;
            }
          }
          else
          {
            v64 = &v10[2 * v31 + 1];
            if (v50 < v62)
            {
              *v32 = v50;
              *v49 = v63;
              v65 = &v10[2 * v48 + 1];
              goto LABEL_54;
            }
            *v32 = v62;
            *v14 = v63;
            v69 = &v10[2 * v13];
            v71 = v69[1];
            v70 = v69 + 1;
            v72 = *v64;
            *v64 = v71;
            *v70 = v72;
            if (v50 >= v63)
            {
              v62 = v63;
            }
            else
            {
              *v14 = v50;
              *v49 = v63;
              v65 = &v10[2 * v48 + 1];
              v64 = v70;
LABEL_54:
              v73 = *v64;
              *v64 = *v65;
              *v65 = v73;
              v62 = *v14;
            }
          }
          v74 = *v10;
          *v10 = v62;
          v21 = v10 + 1;
          *v14 = v74;
          v27 = &v10[2 * v13 + 1];
LABEL_56:
          v75 = *v21;
          *v21 = *v27;
          *v27 = v75;
          goto LABEL_57;
        }
        v19 = *v10;
        v20 = *v14;
        if (*v10 < *v14)
        {
          v21 = &v10[2 * v13 + 1];
          if (v15 >= v19)
          {
            *v14 = v19;
            v41 = v10[1];
            *v10 = v20;
            v42 = *v21;
            *v21 = v41;
            v10[1] = v42;
            if (*v8 >= v20)
              goto LABEL_57;
            *v10 = *v8;
            *v8 = v20;
            v21 = v10 + 1;
          }
          else
          {
            *v14 = v15;
            *v8 = v20;
          }
          v27 = a2 - 1;
          goto LABEL_56;
        }
        if (v15 < v19)
        {
          *v10 = v15;
          *v8 = v19;
          v27 = v10 + 1;
          v26 = v10[1];
          v10[1] = *v9;
          *v9 = v26;
          v28 = *v14;
          if (*v10 < *v14)
          {
            *v14 = *v10;
            *v10 = v28;
            v21 = &v10[2 * v13 + 1];
            goto LABEL_56;
          }
        }
LABEL_57:
        --a3;
        if ((a4 & 1) == 0 && *(v10 - 2) >= *v10)
        {
          v90 = *(_QWORD *)v10;
          if (*v8 <= (int)*(_QWORD *)v10)
          {
            v92 = v10 + 2;
            do
            {
              v10 = v92;
              if (v92 >= a2)
                break;
              v92 += 2;
            }
            while (*v10 <= (int)v90);
          }
          else
          {
            do
            {
              v91 = v10[2];
              v10 += 2;
            }
            while (v91 <= (int)v90);
          }
          v93 = a2;
          if (v10 < a2)
          {
            v93 = a2;
            do
            {
              v94 = *(v93 - 2);
              v93 -= 2;
            }
            while (v94 > (int)v90);
          }
          if (v10 < v93)
          {
            v95 = *v10;
            v96 = *v93;
            do
            {
              *v10 = v96;
              *v93 = v95;
              v97 = v10[1];
              v10[1] = v93[1];
              v93[1] = v97;
              do
              {
                v98 = v10[2];
                v10 += 2;
                v95 = v98;
              }
              while (v98 <= (int)v90);
              do
              {
                v99 = *(v93 - 2);
                v93 -= 2;
                v96 = v99;
              }
              while (v99 > (int)v90);
            }
            while (v10 < v93);
          }
          if (v10 - 2 != v7)
          {
            *v7 = *(v10 - 2);
            v7[1] = *(v10 - 1);
          }
          a4 = 0;
          *((_QWORD *)v10 - 1) = v90;
          continue;
        }
        v76 = *(_QWORD *)v10;
        v77 = v10;
        do
        {
          v78 = v77;
          v80 = v77[2];
          v77 += 2;
          v79 = v80;
        }
        while (v80 < (int)v76);
        v81 = a2;
        if (v78 == v10)
        {
          v81 = a2;
          do
          {
            if (v77 >= v81)
              break;
            v83 = *(v81 - 2);
            v81 -= 2;
          }
          while (v83 >= (int)v76);
        }
        else
        {
          do
          {
            v82 = *(v81 - 2);
            v81 -= 2;
          }
          while (v82 >= (int)v76);
        }
        if (v77 >= v81)
        {
          v10 = v77;
        }
        else
        {
          v84 = *v81;
          v10 = v77;
          v85 = v81;
          do
          {
            *v10 = v84;
            *v85 = v79;
            v86 = v10[1];
            v10[1] = v85[1];
            v85[1] = v86;
            do
            {
              v87 = v10[2];
              v10 += 2;
              v79 = v87;
            }
            while (v87 < (int)v76);
            do
            {
              v88 = *(v85 - 2);
              v85 -= 2;
              v84 = v88;
            }
            while (v88 >= (int)v76);
          }
          while (v10 < v85);
        }
        if (v10 - 2 != v7)
        {
          *v7 = *(v10 - 2);
          v7[1] = *(v10 - 1);
        }
        *((_QWORD *)v10 - 1) = v76;
        if (v77 < v81)
        {
LABEL_80:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *,false>(v7, v10 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v89 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *>(v7, v10 - 2);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *>(v10, a2);
        if (!(_DWORD)result)
        {
          if (v89)
            continue;
          goto LABEL_80;
        }
        a2 = v10 - 2;
        if (!v89)
          goto LABEL_2;
        return result;
    }
  }
}

void std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::less<GEOComposedRouteSection * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::less<GEOComposedRouteSection * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::__map_value_compare<GEOComposedRouteSection * {__strong},std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>,std::less<GEOComposedRouteSection * {__strong}>,true>,std::allocator<std::__value_type<GEOComposedRouteSection * {__strong},std::vector<std::pair<int,int>>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }

    operator delete(a1);
  }
}

int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *>(int *result, int *a2, int *a3, int *a4)
{
  int v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  if (*a2 >= *result)
  {
    if (v6 < v4)
    {
      *a2 = v6;
      *a3 = v4;
      v9 = a2 + 1;
      v8 = a2[1];
      a2[1] = a3[1];
      a3[1] = v8;
      v10 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        v7 = result + 1;
        *a2 = v10;
LABEL_10:
        v12 = *v7;
        *v7 = *v9;
        *v9 = v12;
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      v7 = result + 1;
      *result = v6;
LABEL_9:
      *a3 = v5;
      v9 = a3 + 1;
      goto LABEL_10;
    }
    *result = v4;
    *a2 = v5;
    v7 = a2 + 1;
    v11 = result[1];
    result[1] = a2[1];
    a2[1] = v11;
    v5 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  v13 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v13;
    v14 = a3[1];
    a3[1] = a4[1];
    a4[1] = v14;
    v15 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v15;
      v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      v17 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v17;
        v18 = result[1];
        result[1] = a2[1];
        a2[1] = v18;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int *v43;
  uint64_t v44;
  int v45;
  int *v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      v9 = a1[2];
      v10 = *a1;
      v11 = *(a2 - 2);
      if (v9 < *a1)
      {
        if (v11 >= v9)
        {
          v12 = a1 + 3;
          v36 = a1[3];
          v37 = a1[1];
          *a1 = v9;
          a1[1] = v36;
          a1[2] = v10;
          a1[3] = v37;
          v38 = *(a2 - 2);
          if (v38 >= v10)
            return result;
          a1[2] = v38;
        }
        else
        {
          v12 = a1 + 1;
          *a1 = v11;
        }
        *(a2 - 2) = v10;
        v30 = a2 - 1;
        goto LABEL_25;
      }
      if (v11 < v9)
      {
        a1[2] = v11;
        *(a2 - 2) = v9;
        v30 = a1 + 3;
        v29 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v29;
        v31 = a1[2];
        v32 = *a1;
        if (v31 < *a1)
        {
          *a1 = v31;
          a1[2] = v32;
          v12 = a1 + 1;
LABEL_25:
          v39 = *v12;
          *v12 = *v30;
          *v30 = v39;
          return result;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_0 &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *(a2 - 2);
      v19 = a1[6];
      if (v18 < v19)
      {
        a1[6] = v18;
        *(a2 - 2) = v19;
        v20 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v20;
        v21 = a1[6];
        v22 = a1[4];
        if (v21 < v22)
        {
          v23 = a1[5];
          v24 = a1[7];
          a1[4] = v21;
          a1[5] = v24;
          a1[6] = v22;
          a1[7] = v23;
          v25 = a1[2];
          if (v21 < v25)
          {
            v26 = a1[3];
            a1[2] = v21;
            a1[3] = v24;
            a1[4] = v25;
            a1[5] = v26;
            v27 = *a1;
            if (v21 < *a1)
            {
              v28 = a1[1];
              *a1 = v21;
              a1[1] = v24;
              a1[2] = v27;
              a1[3] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 4;
      v14 = a1[4];
      v15 = a1[2];
      v16 = *a1;
      if (v15 < *a1)
      {
        if (v14 >= v15)
        {
          v17 = a1 + 3;
          v40 = a1[3];
          v41 = a1[1];
          *a1 = v15;
          a1[1] = v40;
          a1[2] = v16;
          a1[3] = v41;
          if (v14 >= v16)
            goto LABEL_30;
          a1[2] = v14;
        }
        else
        {
          v17 = a1 + 1;
          *a1 = v14;
        }
        a1[4] = v16;
        v34 = a1 + 5;
        goto LABEL_29;
      }
      if (v14 < v15)
      {
        v34 = a1 + 3;
        v33 = a1[3];
        v35 = a1[5];
        a1[4] = v15;
        a1[5] = v33;
        a1[2] = v14;
        a1[3] = v35;
        if (v14 < v16)
        {
          *a1 = v14;
          a1[2] = v16;
          v17 = a1 + 1;
LABEL_29:
          v42 = *v17;
          *v17 = *v34;
          *v34 = v42;
        }
      }
LABEL_30:
      v43 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v44 = 0;
      v45 = 0;
      while (1)
      {
        v47 = *v13;
        if (*v43 < *v13)
        {
          v49 = *v43;
          v48 = v43[1];
          v50 = v44;
          do
          {
            v51 = (int *)((char *)a1 + v50);
            v52 = *(int *)((char *)a1 + v50 + 20);
            v51[6] = v47;
            v51[7] = v52;
            if (v50 == -16)
            {
              v46 = a1;
              goto LABEL_33;
            }
            v47 = v51[2];
            v50 -= 8;
          }
          while (v47 > v49);
          v46 = (int *)((char *)a1 + v50 + 24);
LABEL_33:
          *v46 = v49;
          v46[1] = v48;
          if (++v45 == 8)
            return v43 + 2 == a2;
        }
        v13 = v43;
        v44 += 8;
        v43 += 2;
        if (v43 == a2)
          return 1;
      }
  }
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_10CommonMesh8Pos4MeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_10CommonMesh8Pos4MeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D6080;
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_3,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_3>,ggl::CommonMesh::Pos4Mesh * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_3,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_3>,ggl::CommonMesh::Pos4Mesh * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CDA48;
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_3,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_3>,ggl::CommonMesh::Pos4Mesh * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CDA48;
}

ggl::CommonMesh::Pos4Mesh *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_3,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_3>,ggl::CommonMesh::Pos4Mesh * ()(void)>::operator()()
{
  ggl::CommonMesh::Pos4Mesh *v0;

  v0 = (ggl::CommonMesh::Pos4Mesh *)operator new();
  return ggl::CommonMesh::Pos4Mesh::Pos4Mesh(v0, "Debug RouteLine Mesh");
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2>,ggl::RenderItem * ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2>,ggl::RenderItem * ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CDA00;
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2>,ggl::RenderItem * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CDA00;
}

int64x2_t std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_2>,ggl::RenderItem * ()(void)>::operator()()
{
  uint64_t v0;
  int64x2_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E42B59B0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = "Debug RouteLine";
  *(_DWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 56) = 1065353216;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug17BasePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug17BasePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42D7550;
  return result;
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::Debug::BasePipelineSetup * ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E42CD9B8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::Debug::BasePipelineSetup * ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E42CD9B8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::Debug::BasePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E42CD9B8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::Debug::BasePipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E42CD9B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::Debug::BasePipelineSetup * ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::Debug::BasePipelineSetup * ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1,std::allocator<md::RouteRenderLayer::layoutDebugRouteLineSnappingStatus(std::shared_ptr<md::RouteLineOverlay> const&,ggl::StandardLibrary const&,md::LayoutContext const&,ggl::CommandBuffer *)::$_1>,ggl::Debug::BasePipelineSetup * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18[2];
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = (_QWORD *)operator new();
  v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2390;
  v4 = ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1EE55CAC0, 2, 1, 6, 1);
  v3[9].__shared_owners_ = (uint64_t)ggl::Debug::Style::reflection(void)::reflection;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9850;
  v21 = v4;
  v22 = v3;
  v5 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2358;
  v6 = ggl::BufferData::BufferData((uint64_t)&v5[1], qword_1EE55CB00, 2, 1, 6, 1);
  v5[9].__shared_owners_ = (uint64_t)ggl::Debug::View::reflection(void)::reflection;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B9830;
  v19 = v6;
  v20 = v5;
  v7 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E22E8;
  v9 = ggl::BufferData::BufferData((uint64_t)&v7[1], qword_1EE54AFA0, 2, 1, 6, 1);
  v7[9].__shared_owners_ = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B97F0;
  v18[0] = v9;
  v18[1] = (uint64_t)v7;
  ggl::Debug::BasePipelineSetup::BasePipelineSetup(v2, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), &v21, &v19, v18);
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v2;
}

void sub_19F6329D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  MEMORY[0x1A1AF4E00](v14, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::Debug::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Debug::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4648;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4648;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteStyledOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

uint64_t __copy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D45B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D45B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineArrowRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteLineArrowRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

uint64_t __copy_helper_block_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void md::RouteLineDrawAnimation::updateStyle(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  size_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  char **v16;
  char *v17;

  v3 = a3 - a2;
  if (a3 != a2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      abort();
    v6 = operator new(a3 - a2);
    memcpy(v6, a2, v3);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 2560) + 64) + 32);
    v8 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 2) == 0)
    {
      v9 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
      if (v9 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      }
    }
    if (v8)
      v10 = *(__int128 **)(v7 + 72);
    else
      v10 = 0;
    v11 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 32);
    v12 = v11[1];
    if (v12)
      v13 = v11[9];
    else
      v13 = 0;
    v14 = *v10;
    *(_DWORD *)(v13 + 8) = *((_QWORD *)v10 + 1);
    *(_QWORD *)v13 = v14;
    *(_DWORD *)(v13 + 16) = *((_DWORD *)v10 + 4);
    *(_DWORD *)(v13 + 20) = *((_DWORD *)v10 + 5);
    *(_DWORD *)(v13 + 24) = *((_DWORD *)v10 + 6);
    *(_DWORD *)(v13 + 28) = *((_DWORD *)v10 + 7);
    *(_DWORD *)(v13 + 32) = *((_DWORD *)v10 + 8);
    *(_DWORD *)(v13 + 36) = *((_DWORD *)v10 + 9);
    *(_DWORD *)(v13 + 40) = *((_DWORD *)v10 + 10);
    *(_DWORD *)(v13 + 44) = *((_DWORD *)v10 + 11);
    *(_OWORD *)(v13 + 48) = v10[3];
    *(_DWORD *)(v13 + 64) = *((_DWORD *)v10 + 16);
    *(_DWORD *)(v13 + 80) = *((_DWORD *)v10 + 20);
    *(_DWORD *)(v13 + 84) = *((_DWORD *)v10 + 21);
    *(_DWORD *)(v13 + 88) = *((_DWORD *)v10 + 22);
    *(_DWORD *)(v13 + 92) = *((_DWORD *)v10 + 23);
    *(_DWORD *)(v13 + 96) = *((_DWORD *)v10 + 24);
    *(_DWORD *)(v13 + 100) = *((_DWORD *)v10 + 25);
    *(_DWORD *)(v13 + 104) = *((_DWORD *)v10 + 26);
    *(_DWORD *)(v13 + 108) = *((_DWORD *)v10 + 27);
    *(_DWORD *)(v13 + 112) = *((_DWORD *)v10 + 28);
    *(_DWORD *)(v13 + 116) = *((_DWORD *)v10 + 29);
    *(_DWORD *)(v13 + 120) = *((_DWORD *)v10 + 30);
    *(_DWORD *)(v13 + 124) = *((_DWORD *)v10 + 31);
    *(_DWORD *)(v13 + 128) = *((_DWORD *)v10 + 32);
    *(_DWORD *)(v13 + 132) = *((_DWORD *)v10 + 33);
    *(_DWORD *)(v13 + 136) = *((_DWORD *)v10 + 34);
    *(_DWORD *)(v13 + 140) = *((_DWORD *)v10 + 35);
    *(_DWORD *)(v13 + 144) = *((_DWORD *)v10 + 36);
    *(_DWORD *)(v13 + 148) = *((_DWORD *)v10 + 37);
    *(_DWORD *)(v13 + 152) = *((_DWORD *)v10 + 38);
    *(_DWORD *)(v13 + 156) = *((_DWORD *)v10 + 39);
    *(_DWORD *)(v13 + 160) = *((_DWORD *)v10 + 40);
    *(_DWORD *)(v13 + 164) = *((_DWORD *)v10 + 41);
    *(_DWORD *)(v13 + 168) = *((_DWORD *)v10 + 42);
    *(_DWORD *)(v13 + 172) = *((_DWORD *)v10 + 43);
    *(_DWORD *)(v13 + 176) = *((_DWORD *)v10 + 44);
    *(_DWORD *)(v13 + 180) = *((_DWORD *)v10 + 45);
    *(_DWORD *)(v13 + 184) = *((_DWORD *)v10 + 46);
    *(_DWORD *)(v13 + 188) = *((_DWORD *)v10 + 47);
    *(_DWORD *)(v13 + 192) = *((_DWORD *)v10 + 48);
    *(_DWORD *)(v13 + 196) = *((_DWORD *)v10 + 49);
    *(_DWORD *)(v13 + 200) = *((_DWORD *)v10 + 50);
    *(_DWORD *)(v13 + 204) = *((_DWORD *)v10 + 51);
    *(_DWORD *)(v13 + 208) = *((_DWORD *)v10 + 52);
    *(_DWORD *)(v13 + 212) = *((_DWORD *)v10 + 53);
    *(_DWORD *)(v13 + 216) = *((_DWORD *)v10 + 54);
    *(_DWORD *)(v13 + 220) = *((_DWORD *)v10 + 55);
    *(_DWORD *)(v13 + 224) = *((_DWORD *)v10 + 56);
    *(_DWORD *)(v13 + 228) = *((_DWORD *)v10 + 57);
    *(_DWORD *)(v13 + 232) = *((_DWORD *)v10 + 58);
    *(_DWORD *)(v13 + 236) = *((_DWORD *)v10 + 59);
    if (v13 && v12)
    {
      if (v11[8] > v12)
        v12 = v11[8];
      v11[7] = 0;
      v11[8] = v12;
    }
    operator delete(v6);
  }
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D44E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D44E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::SolidTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::SolidTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4528;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4528;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::PilledTrafficRibbonDescriptor>::collectRenderItemsForPasses(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::PilledTrafficRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

uint64_t __copy_helper_block_ea8_48c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_48c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t __copy_helper_block_ea8_48c68_ZTSNSt3__110shared_ptrIN3gss15StylesheetQueryINS1_10PropertyIDEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_48c68_ZTSNSt3__110shared_ptrIN3gss15StylesheetQueryINS1_10PropertyIDEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4600;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4600;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::DottedRouteLineRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

void std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D4450;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4450;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1},std::allocator<md::Ribbons::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::collectRenderItemsForPassesNoReset(unsigned int,ggl::CommandBuffer *,unsigned int)::{lambda(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)#1}>,void ()(md::Ribbons::RouteLineRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, ggl::RenderItem **a3)
{
  return ggl::CommandBuffer::pushRenderItem(*(_QWORD *)(a1 + 8), *a3);
}

void md::SinglePassRoutePipelineStateManager::pipelineStateForFunctionConstants(std::__shared_weak_count **a1, uint64_t a2, __int8 *a3)
{
  __int8 v5;
  int8x16_t v6;
  __int8 v7;
  int8x16_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unsigned __int8 v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  char v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t **v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t *v126;
  unint64_t v127;
  ggl::SinglePassRouteLineShader *v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  __int8 v135;
  __int8 v136;
  std::__shared_weak_count **v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[28];

  v5 = a3[1];
  v6.i16[1] = 0;
  v6.i16[2] = 0;
  v6.i8[6] = 0;
  v6.i8[9] = 0;
  v6.i16[5] = 0;
  v6.i32[3] = 0;
  v6.i8[0] = *a3;
  v6.i8[1] = v5;
  v6.i8[7] = a3[2];
  v7 = a3[3];
  v6.i8[8] = v7;
  v8 = vceqzq_s8(v6);
  v9 = vmovl_s8(*(int8x8_t *)v8.i8);
  v10 = vmovl_high_s16(v9);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  v12 = v11;
  v13 = vmovl_high_s8(v8);
  v14 = vmovl_high_s16(v13);
  v11.i64[0] = v14.u32[2];
  v11.i64[1] = v14.u32[3];
  v15 = v11;
  v16 = vmovl_s16(*(int16x4_t *)v9.i8);
  v11.i64[0] = v16.u32[2];
  v11.i64[1] = v16.u32[3];
  v17 = v11;
  v18 = vmovl_s16(*(int16x4_t *)v13.i8);
  v11.i64[0] = v18.u32[2];
  v11.i64[1] = v18.u32[3];
  v19 = v11;
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  v20 = v11;
  v11.i64[0] = v14.u32[0];
  v11.i64[1] = v14.u32[1];
  v21 = v11;
  v11.i64[0] = v16.u32[0];
  v11.i64[1] = v16.u32[1];
  v22 = v11;
  v11.i64[0] = v18.u32[0];
  v11.i64[1] = v18.u32[1];
  v23 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v22), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v11)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v20), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v21))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v17), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v19)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v12), vbicq_s8((int8x16_t)xmmword_19FFB3080, v15)))));
  v24 = v23;
  v26 = (uint64_t **)(a2 + 104);
  v25 = *(_QWORD **)(a2 + 104);
  if (!v25)
    goto LABEL_12;
  v27 = (uint64_t **)(a2 + 104);
  do
  {
    v28 = v25[4];
    v29 = v28 >= v23;
    if (v28 >= v23)
      v30 = v25;
    else
      v30 = v25 + 1;
    if (v29)
      v27 = (uint64_t **)v25;
    v25 = (_QWORD *)*v30;
  }
  while (*v30);
  if (v27 != v26 && v23 >= (unint64_t)v27[4])
  {
    *a1 = (std::__shared_weak_count *)v27[5];
    v125 = v27[6];
    a1[1] = (std::__shared_weak_count *)v125;
    if (v125)
    {
      v126 = (unint64_t *)(v125 + 1);
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
    }
  }
  else
  {
LABEL_12:
    v135 = *a3;
    v136 = a3[2];
    v31 = (std::__shared_weak_count *)operator new(0x198uLL);
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E37E8;
    v138 = *(_OWORD *)(a2 + 16);
    v139 = *(_OWORD *)(a2 + 32);
    v137 = a1;
    if ((v33 & 1) == 0)
    {
      if ((_DWORD)v128)
      {
        if ((v129 & 1) == 0)
        {
          if ((_DWORD)v128)
          {
            if ((v132 & 1) == 0
            {
              if ((v134 & 1) == 0
              {
                ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
              }
              ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
              unk_1ECE43E18 = 1;
            }
            ggl::SinglePassRouteLine::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
            unk_1EE585E90 = &ggl::SinglePassRouteLine::pipelineDataBasePipelineDeviceStructs(void)::ref;
            qword_1EE585E98 = 0;
            if ((v133 & 1) == 0
            {
              ggl::SinglePassRouteLine::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
              *(_QWORD *)algn_1EE585EC8 = ggl::Tile::Transform::reflection(void)::reflection;
              qword_1EE585ED0 = (uint64_t)ggl::SinglePassRouteLine::Style::reflection(void)::reflection;
              unk_1EE585ED8 = ggl::SinglePassRouteLine::ClipParams::reflection(void)::reflection;
              qword_1EE585EE0 = (uint64_t)ggl::SinglePassRouteLine::DrawAnimationDescription::reflection(void)::reflection;
            }
            qword_1EE585EA0 = (uint64_t)&ggl::SinglePassRouteLine::pipelineDataBasePipelineConstantStructs(void)::ref;
            *(_OWORD *)algn_1EE585EA8 = xmmword_19FFB3030;
          }
        }
        ggl::SinglePassRouteLine::BasePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SinglePassRouteLine::BasePipelineSetup::typedReflection(void)::ref;
        ggl::SinglePassRouteLineShader::typedReflection(v128);
        qword_1EE577538 = (uint64_t)&ggl::SinglePassRouteLineShader::typedReflection(void)::ref;
        if ((v130 & 1) == 0
        {
          ggl::SinglePassRouteLine::pipelineStateBasePipelineAttributeStructBinding(void)::attr = 0;
          *(_QWORD *)algn_1EE577678 = 0;
          qword_1EE577680 = (uint64_t)"";
          dword_1EE577688 = 0;
          qword_1EE577690 = (uint64_t)&ggl::SinglePassRouteLine::pipelineStateBasePipelineAttributeBinding_0(void)::attr;
          unk_1EE577698 = 7;
        }
        qword_1EE577540 = (uint64_t)&ggl::SinglePassRouteLine::pipelineStateBasePipelineAttributeStructBinding(void)::attr;
        *(_QWORD *)algn_1EE577548 = 1;
        qword_1EE577550 = 0;
        unk_1EE577558 = 1;
        qword_1EE577560 = (uint64_t)&ggl::SinglePassRouteLine::pipelineStateBasePipelineDeviceStructBinding(void)::ref;
        unk_1EE577568 = 0;
        if ((v131 & 1) == 0
        {
          ggl::SinglePassRouteLine::pipelineStateBasePipelineConstantStructBinding(void)::ref = 0;
          *(_QWORD *)algn_1EE577588 = 0;
          qword_1EE577590 = (uint64_t)"view";
          dword_1EE577598 = 3;
          qword_1EE5775A0 = (uint64_t)&ggl::SinglePassRouteLine::pipelineStateBasePipelineConstantViewBinding(void)::reflection;
          unk_1EE5775A8 = xmmword_19FFB35A0;
          qword_1EE5775B8 = 1;
          unk_1EE5775C0 = "transform";
          dword_1EE5775C8 = 3;
          qword_1EE5775D0 = (uint64_t)&ggl::SinglePassRouteLine::pipelineStateBasePipelineConstantTransformBinding(void)::reflection;
          unk_1EE5775D8 = xmmword_19FFB3660;
          qword_1EE5775E8 = 2;
          unk_1EE5775F0 = "style";
          dword_1EE5775F8 = 3;
          qword_1EE577600 = (uint64_t)&ggl::SinglePassRouteLine::pipelineStateBasePipelineConstantStyleBinding(void)::reflection;
          unk_1EE577608 = xmmword_19FFB3CC0;
          qword_1EE577618 = 3;
          unk_1EE577620 = "clipParams";
          dword_1EE577628 = 3;
          qword_1EE577630 = (uint64_t)&ggl::SinglePassRouteLine::pipelineStateBasePipelineConstantClipParamsBinding(void)::reflection;
          unk_1EE577638 = xmmword_19FFB3CD0;
          qword_1EE577648 = 4;
          unk_1EE577650 = "animationDescription";
          dword_1EE577658 = 3;
          qword_1EE577660 = (uint64_t)&ggl::SinglePassRouteLine::pipelineStateBasePipelineConstantAnimationDescriptionBinding(void)::reflection;
          unk_1EE577668 = 2;
        }
        qword_1EE577570 = (uint64_t)&ggl::SinglePassRouteLine::pipelineStateBasePipelineConstantStructBinding(void)::ref;
        *(_QWORD *)algn_1EE577578 = 5;
      }
    }
    v34 = *(std::__shared_weak_count_vtbl **)a2;
    v35 = *(std::__shared_weak_count **)(a2 + 8);
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = v31 + 1;
    *(_OWORD *)v140 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v140[12] = *(_OWORD *)(a2 + 60);
    v39 = *(_OWORD *)(a2 + 76);
    v40 = *(_BYTE *)(a2 + 92);
    v31[1].__shared_weak_owners_ = 0;
    v31[2].__vftable = 0;
    LODWORD(v31[2].__shared_owners_) = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v31[1].__shared_owners_ = 0;
    v31[2].__shared_weak_owners_ = (uint64_t)&ggl::SinglePassRouteLine::BasePipelineState::typedReflection(void)::ref;
    v31[3].__vftable = v34;
    v31[3].__shared_owners_ = (uint64_t)v35;
    if (v35)
    {
      v41 = (unint64_t *)&v35->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    LOBYTE(v31[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v31[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v31[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v31[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v31[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v31[10].__shared_weak_owners_ + 4) = 0;
    *(_OWORD *)&v31[11].__shared_weak_owners_ = v138;
    *(_OWORD *)&v31[12].__shared_owners_ = v139;
    LOBYTE(v31[13].__vftable) = 0;
    v31[16].__vftable = 0;
    *(_OWORD *)&v31[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v31[15].__shared_owners_ = 0u;
    *(_OWORD *)&v31[13].__shared_owners_ = 0u;
    v31[14].std::__shared_count = 0u;
    v31[16].__shared_owners_ = 0x100000001;
    LOBYTE(v31[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v31[4].std::__shared_count + 4) = *(std::__shared_count *)&v140[12];
    *(_OWORD *)&v31[3].__shared_weak_owners_ = *(_OWORD *)v140;
    *(_OWORD *)((char *)&v31[4].__shared_weak_owners_ + 4) = v39;
    BYTE4(v31[5].__shared_owners_) = v40;
    if (v35)
    {
      v43 = (unint64_t *)&v35->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    LOBYTE(v31[13].__shared_weak_owners_) = v135;
    BYTE1(v31[13].__shared_weak_owners_) = v5;
    BYTE6(v31[13].__shared_weak_owners_) = 0;
    *(_DWORD *)((char *)&v31[13].__shared_weak_owners_ + 2) = 0;
    HIBYTE(v31[13].__shared_weak_owners_) = v136;
    LOBYTE(v31[14].__vftable) = v7;
    *(_WORD *)((char *)&v31[14].__vftable + 1) = 0;
    BYTE3(v31[14].__vftable) = 0;
    v45 = *(int8x16_t *)&v31[14].__shared_owners_;
    v46 = vceqzq_s8(*(int8x16_t *)&v31[13].__shared_weak_owners_);
    v47 = vmovl_high_s8(v46);
    v48 = vmovl_s16(*(int16x4_t *)v47.i8);
    v49.i64[0] = v48.u32[0];
    v49.i64[1] = v48.u32[1];
    v50 = v49;
    v51 = vmovl_s8(*(int8x8_t *)v46.i8);
    v52 = vmovl_s16(*(int16x4_t *)v51.i8);
    v49.i64[0] = v52.u32[0];
    v49.i64[1] = v52.u32[1];
    v53 = v49;
    v54 = vmovl_high_s16(v47);
    v49.i64[0] = v54.u32[0];
    v49.i64[1] = v54.u32[1];
    v55 = v49;
    v56 = vmovl_high_s16(v51);
    v49.i64[0] = v56.u32[0];
    v49.i64[1] = v56.u32[1];
    v57 = v49;
    v49.i64[0] = v48.u32[2];
    v49.i64[1] = v48.u32[3];
    v58 = v49;
    v49.i64[0] = v52.u32[2];
    v49.i64[1] = v52.u32[3];
    v59 = v49;
    v49.i64[0] = v54.u32[2];
    v49.i64[1] = v54.u32[3];
    v60 = v49;
    v49.i64[0] = v56.u32[2];
    v49.i64[1] = v56.u32[3];
    v61 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v49);
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42BAA18;
    v62 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v60);
    v63 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v59);
    v64 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v55);
    v65 = vceqzq_s8(v45);
    v66 = vmovl_high_s8(v65);
    v67 = vmovl_s16(*(int16x4_t *)v66.i8);
    v49.i64[0] = v67.u32[0];
    v49.i64[1] = v67.u32[1];
    v68 = v49;
    v69 = vmovl_s8(*(int8x8_t *)v65.i8);
    v70 = vmovl_s16(*(int16x4_t *)v69.i8);
    v49.i64[0] = v70.u32[0];
    v49.i64[1] = v70.u32[1];
    v71 = v49;
    v72 = vmovl_high_s16(v66);
    v49.i64[0] = v72.u32[0];
    v49.i64[1] = v72.u32[1];
    v73 = v49;
    v74 = vmovl_high_s16(v69);
    v49.i64[0] = v74.u32[0];
    v49.i64[1] = v74.u32[1];
    v75 = v49;
    v49.i64[0] = v67.u32[2];
    v49.i64[1] = v67.u32[3];
    v76 = v49;
    v49.i64[0] = v70.u32[2];
    v49.i64[1] = v70.u32[3];
    v77 = v49;
    v49.i64[0] = v72.u32[2];
    v49.i64[1] = v72.u32[3];
    v78 = v49;
    v49.i64[0] = v74.u32[2];
    v49.i64[1] = v74.u32[3];
    v79 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v78);
    v80 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v68), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v50));
    v81 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v71), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v53));
    v82 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v73), v64);
    v83 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v75), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v57));
    v84 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v76), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v58));
    v85 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v77), v63);
    v86 = vorrq_s8(v79, v62);
    v87 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v49), v61);
    v88 = vceqzq_s8((int8x16_t)v31[15].std::__shared_count);
    v89 = vmovl_s8(*(int8x8_t *)v88.i8);
    v90 = vmovl_high_s16(v89);
    v49.i64[0] = v90.i32[2];
    v49.i64[1] = v90.i32[3];
    v91 = v49;
    v92 = vmovl_high_s8(v88);
    v93 = vmovl_high_s16(v92);
    v49.i64[0] = v93.i32[2];
    v49.i64[1] = v93.i32[3];
    v94 = v49;
    v95 = vmovl_s16(*(int16x4_t *)v89.i8);
    v49.i64[0] = v95.i32[2];
    v49.i64[1] = v95.i32[3];
    v96 = v49;
    v97 = vmovl_s16(*(int16x4_t *)v92.i8);
    v49.i64[0] = v97.i32[2];
    v49.i64[1] = v97.i32[3];
    v98 = v49;
    v49.i64[0] = v90.i32[0];
    v49.i64[1] = v90.i32[1];
    v99 = v49;
    v49.i64[0] = v93.i32[0];
    v49.i64[1] = v93.i32[1];
    v100 = v49;
    v49.i64[0] = v95.i32[0];
    v49.i64[1] = v95.i32[1];
    v101 = v49;
    v49.i64[0] = v97.i32[0];
    v49.i64[1] = v97.i32[1];
    v102 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v49);
    v103 = vceqzq_s8(*(int8x16_t *)&v31[15].__shared_weak_owners_);
    v104 = vmovl_high_s8(v103);
    v105 = vmovl_s16(*(int16x4_t *)v104.i8);
    v49.i64[0] = v105.i32[0];
    v49.i64[1] = v105.i32[1];
    v106 = v49;
    v107 = vmovl_s8(*(int8x8_t *)v103.i8);
    v108 = vmovl_s16(*(int16x4_t *)v107.i8);
    v49.i64[0] = v108.i32[0];
    v49.i64[1] = v108.i32[1];
    v109 = v49;
    v110 = vmovl_high_s16(v104);
    v49.i64[0] = v110.i32[0];
    v49.i64[1] = v110.i32[1];
    v111 = v49;
    v112 = vmovl_high_s16(v107);
    v49.i64[0] = v112.i32[0];
    v49.i64[1] = v112.i32[1];
    v113 = v49;
    v49.i64[0] = v105.i32[2];
    v49.i64[1] = v105.i32[3];
    v114 = v49;
    v49.i64[0] = v108.i32[2];
    v49.i64[1] = v108.i32[3];
    v115 = v49;
    v49.i64[0] = v110.i32[2];
    v49.i64[1] = v110.i32[3];
    v116 = v49;
    v49.i64[0] = v112.i32[2];
    v49.i64[1] = v112.i32[3];
    v31[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v109), vbicq_s8((int8x16_t)xmmword_19FFB3170, v101)), v81), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v106), v102), v80)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v113), vbicq_s8((int8x16_t)xmmword_19FFB3190, v99)), v83), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v111),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v100)),
                                                    v82))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v115), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v96)), v85), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v114), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v98)), v84)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v49), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v91)), v87), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v116),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v94)),
                                                    v86)))));
    LOBYTE(v31[13].__vftable) = 1;
    *v137 = v38;
    v137[1] = v31;
    do
      v117 = __ldxr(p_shared_owners);
    while (__stxr(v117 + 1, p_shared_owners));
    v118 = *v26;
    v119 = v26;
    if (*v26)
    {
      while (1)
      {
        while (1)
        {
          v119 = (uint64_t **)v118;
          v120 = v118[4];
          if (v24 >= v120)
            break;
          v118 = *v119;
          v26 = v119;
          if (!*v119)
            goto LABEL_33;
        }
        if (v120 >= v24)
          break;
        v118 = v119[1];
        if (!v118)
        {
          v26 = v119 + 1;
          goto LABEL_33;
        }
      }
      v123 = (unint64_t *)&v31->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
LABEL_33:
      v121 = (uint64_t *)operator new(0x38uLL);
      v121[4] = v24;
      v121[5] = (uint64_t)v38;
      v121[6] = (uint64_t)v31;
      *v121 = 0;
      v121[1] = 0;
      v121[2] = (uint64_t)v119;
      *v26 = v121;
      v122 = **(_QWORD **)(a2 + 96);
      if (v122)
      {
        *(_QWORD *)(a2 + 96) = v122;
        v121 = *v26;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 104), v121);
      ++*(_QWORD *)(a2 + 112);
    }
  }
}

void sub_19F633C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  md::components::Material::~Material((md::components::Material *)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

uint64_t gss::QueryableLocker<gss::PropertyID>::hasValueForKey(uint64_t a1, unsigned int a2)
{
  float *v4;
  float v5;
  BOOL v6;
  unsigned int v7;

  v4 = *(float **)a1;
  if (*(_QWORD *)a1
    && (v5 = *v4, LODWORD(v4) = *v4 == 1.0, *(_BYTE *)(a1 + 10))
    && (v5 != 0.0 ? (v6 = v5 == 1.0) : (v6 = 1), !v6)
    || (v7 = *(unsigned __int8 *)(a1 + v4 + 11), v7 == 2))
  {
    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, a2, 0) & 1) != 0)
      return 1;
    v7 = 1;
  }
  return gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtEnd(a1, a2, v7);
}

uint64_t gss::QueryableLocker<gss::PropertyID>::value<(gss::PropertyID)415>(uint64_t a1)
{
  float *v2;
  float v3;
  BOOL v4;
  unsigned int v5;
  char v7;
  char v8;

  v2 = *(float **)a1;
  if (!*(_QWORD *)a1
    || (v3 = *v2, LODWORD(v2) = *v2 == 1.0, !*(_BYTE *)(a1 + 10))
    || (v3 != 0.0 ? (v4 = v3 == 1.0) : (v4 = 1), v4))
  {
    v5 = *(unsigned __int8 *)(a1 + v2 + 11);
    if (v5 != 2)
      return gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x19Fu, v5, 0);
  }
  v8 = 1;
  v7 = 1;
  gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x19Fu, 0, &v8);
  return gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x19Fu, 1u, &v7);
}

uint64_t gss::QueryableLocker<gss::PropertyID>::value<(gss::PropertyID)416>(uint64_t a1)
{
  float *v2;
  float v3;
  BOOL v4;
  unsigned int v5;
  char v7;
  char v8;

  v2 = *(float **)a1;
  if (!*(_QWORD *)a1
    || (v3 = *v2, LODWORD(v2) = *v2 == 1.0, !*(_BYTE *)(a1 + 10))
    || (v3 != 0.0 ? (v4 = v3 == 1.0) : (v4 = 1), v4))
  {
    v5 = *(unsigned __int8 *)(a1 + v2 + 11);
    if (v5 != 2)
      return gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x1A0u, v5, 0);
  }
  v8 = 1;
  v7 = 1;
  gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x1A0u, 0, &v8);
  return gss::RenderStyle<gss::PropertyID>::styleValueForKey<float>(a1, 0x1A0u, 1u, &v7);
}

void ___ZN2md16RouteRenderLayer30updateRoutelineDrawinAnimationERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEN3geo18PolylineCoordinateE_block_invoke(uint64_t a1, float a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  VKRouteLine *v8;
  PolylineCoordinate v9;
  float v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v25 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 32);
      v24 = v7;
      if (v7 && *(_QWORD *)(v7 + 320) && *(_BYTE *)(v7 + 848) && !*(_BYTE *)(v7 + 849))
      {
        v23 = 0;
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 144), "routeRibbon");
        v8 = (VKRouteLine *)objc_claimAutoreleasedReturnValue();
        v9 = *(PolylineCoordinate *)(a1 + 64);
        md::RouteLineDrawAnimation::rebuildAnimationSegments((md::RouteLineDrawAnimation *)(v7 + 632), v8, v9);
        v10 = md::RouteLineDrawAnimation::update((md::RouteLineDrawAnimation *)(v7 + 632), a2, &v23);
        v11 = *(_QWORD *)(v7 + 320);
        v12 = *(uint64_t **)(v11 + 8);
        v13 = *(uint64_t **)(v11 + 16);
        if (v12 != v13)
        {
          v14 = v23;
          if (v10 < 1.0)
          {
            do
            {
              v15 = *v12;
              if (*(_BYTE *)(*v12 + 2448))
              {
                v16 = *(_QWORD *)(*(_QWORD *)(v15 + 2456) + 240);
                if (v16 >= v14)
                  v17 = 0.0;
                else
                  v17 = 1.0;
                if (v16 == v14)
                  v17 = v10;
                *(float *)(v15 + 2584) = v17;
              }
              ++v12;
            }
            while (v12 != v13);
          }
          else
          {
            do
            {
              v18 = *v12;
              if (*(_BYTE *)(*v12 + 2448))
              {
                v19 = *(_QWORD *)(*(_QWORD *)(v18 + 2456) + 240);
                v20 = v10;
                if (v19 != v14)
                {
                  v20 = 1.0;
                  if (v19 >= v14)
                  {
                    if (v19 <= v14)
                      v20 = 0.0;
                    else
                      v20 = 1.0;
                  }
                }
                *(float *)(v18 + 2584) = v20;
              }
              ++v12;
            }
            while (v12 != v13);
          }
        }

      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_19F634030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN2md16RouteRenderLayer30updateRoutelineDrawinAnimationERKNS_13LayoutContextENSt3__110shared_ptrINS_16RouteLineOverlayEEEN3geo18PolylineCoordinateE_block_invoke_9(uint64_t a1, int a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v14 = 0;
  v15 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v15 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v14 = v6;
      if (!a2)
      {
LABEL_15:
        if (!v6)
          goto LABEL_18;
        goto LABEL_16;
      }
    }
    else
    {
      v6 = 0;
      if (!a2)
        goto LABEL_15;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    if (!a2)
      goto LABEL_15;
  }
  if (!v6)
    goto LABEL_18;
  if (*(_BYTE *)(v6 + 848))
  {
    if (!*(_BYTE *)(v6 + 849))
    {
      v7 = *(_QWORD *)(v6 + 320);
      v8 = *(_QWORD *)(v7 + 8);
      for (i = *(_QWORD *)(v7 + 16); v8 != i; v8 += 8)
      {
        if (*(_BYTE *)(*(_QWORD *)v8 + 2448))
          *(_DWORD *)(*(_QWORD *)v8 + 2584) = 1065353216;
      }
    }
  }
LABEL_16:
  *(_WORD *)(v6 + 848) = 256;
  v10 = *(void **)(v6 + 696);
  if (v10)
  {
    objc_msgSend(v10, "stop", v14, v15);
    v11 = *(void **)(v6 + 696);
    *(_QWORD *)(v6 + 696) = 0;

  }
LABEL_18:
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19F634178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c46_ZTSNSt3__18weak_ptrIN2md16RouteLineOverlayEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c46_ZTSNSt3__18weak_ptrIN2md16RouteLineOverlayEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *__copy_helper_block_ea8_32c46_ZTSNSt3__18weak_ptrIN2md16RouteLineOverlayEEE48c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_32c46_ZTSNSt3__18weak_ptrIN2md16RouteLineOverlayEEE48c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void std::__shared_ptr_emplace<ggl::SinglePassRouteLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E37E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::SinglePassRouteLine::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E37E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::SinglePassRouteLine::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __Block_byref_object_copy__12_4913(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void __Block_byref_object_dispose__13_4914(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 64);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<md::RouteStyledOverlayBatchKey const,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    operator delete(v4);
}

uint64_t ___ZN2md16RouteRenderLayer28buildRouteStyledOverlayLayerERKNS_13LayoutContextERKNSt3__110shared_ptrINS_16RouteLineOverlayEEE_block_invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9[32];

  v4 = **(_QWORD **)(a1 + 40);
  v5 = (_QWORD *)operator new();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = **(_QWORD **)(a1 + 40);
  v9[0] = 0;
  v9[24] = 0;
  md::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::RibbonLayer((uint64_t)v5, a2, *(uint64_t **)(v6 + 64), (uint64_t *)(v7 + 216), (uint64_t *)(v7 + 232), v9);
  *v5 = &off_1E429F498;
  v5[19] = 0;
  result = *(_QWORD *)(v4 + 328);
  *(_QWORD *)(v4 + 328) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19F634450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10A1C400A608395);
  _Unwind_Resume(a1);
}

uint64_t std::pair<md::RouteStyledOverlayBatchKey const,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>::~pair(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  malloc_zone_t *zone;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v19;

  v2 = *(_QWORD **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        v7 = (void (***)(_QWORD, uint64_t))*--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          (**v6)(v6, v4);
          {
            v19 = v2;
            v9 = operator new();
            *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v9 + 24) = "VectorKitLabels";
            *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v9 = &off_1E42B5668;
            *(_QWORD *)(v9 + 8) = "VectorKitLabels";
            *(_OWORD *)(v9 + 72) = 0u;
            *(_OWORD *)(v9 + 88) = 0u;
            *(_OWORD *)(v9 + 104) = 0u;
            *(_OWORD *)(v9 + 120) = 0u;
            *(_OWORD *)(v9 + 136) = 0u;
            *(_OWORD *)(v9 + 152) = 0u;
            *(_OWORD *)(v9 + 168) = 0u;
            *(_OWORD *)(v9 + 184) = 0u;
            *(_OWORD *)(v9 + 200) = 0u;
            *(_OWORD *)(v9 + 216) = 0u;
            *(_OWORD *)(v9 + 232) = 0u;
            *(_QWORD *)(v9 + 248) = 0;
            *(_OWORD *)(v9 + 56) = 0u;
            v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
            if ((_DWORD)v10)
              geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v9 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v9;
            v2 = v19;
          }
          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v6, 128);
        }
      }
      while (v3 != v2);
      v4 = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), v4, *(_QWORD *)(a1 + 64) - v4);
  }
  v12 = *(std::__shared_weak_count **)(a1 + 32);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

uint64_t std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<md::RouteStyledOverlayBatchKey const,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t md::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::RibbonLayer(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char *a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  unsigned __int8 v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned __int8 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint8x8_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  float v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  size_t prime;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD **v81;
  size_t v82;
  size_t v83;
  size_t v84;
  _QWORD *i;
  size_t v86;
  uint64_t v87;
  unint64_t v88;
  uint8x8_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  size_t v93;
  uint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  void (***v115)(_QWORD);
  void (***v116)(_QWORD);
  unsigned __int8 v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  __int128 *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  _OWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  unsigned __int8 v144;
  uint64_t *v145;
  std::vector<unsigned int>::pointer begin;
  int64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t *v151;
  int64_t v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t *v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  unsigned __int8 v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  void (***v176)(_QWORD, uint64_t);
  void (***v177)(_QWORD, uint64_t);
  unsigned __int8 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (***v182)(_QWORD);
  uint64_t v183;
  uint64_t v184;
  unsigned __int8 v185;
  std::vector<unsigned int>::pointer v186;
  uint64_t v187;
  int64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t *v192;
  int64_t v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t *v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  _QWORD *v210;
  _QWORD *v211;
  malloc_zone_t *v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  geo::read_write_lock *v216;
  const char *v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  void (***v221)(_QWORD, uint64_t);
  void (***v222)(_QWORD, uint64_t);
  unsigned __int8 v223;
  uint64_t v224;
  _QWORD *v225;
  unint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  BOOL v239;
  unint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  _OWORD *v243;
  __int128 *v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int8 v252;
  uint64_t v253;
  unsigned __int8 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int8x16_t *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  unint64_t v279;
  uint64_t v281;
  char *v282;
  char *v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t *v293;
  _QWORD *v294;
  uint64_t v295;
  unsigned __int8 v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  void (***v300)(_QWORD, uint64_t);
  void (***v301)(_QWORD, uint64_t);
  unsigned __int8 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  void (***v309)(_QWORD, uint64_t);
  void (***v310)(_QWORD, uint64_t);
  unsigned __int8 v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  geo::read_write_lock *v317;
  const char *v318;
  malloc_zone_t *zone;
  unsigned __int8 v320;
  unsigned __int8 v321;
  unsigned __int8 v322;
  int v323;
  char v324;
  int64_t v325;
  _QWORD *v326;
  char *v327;
  _QWORD *v328;
  char *__ptr32 *v329;
  char *v330;
  char *v331;
  _QWORD *v332;
  _QWORD **v333;
  _QWORD **v334;
  char *v335;
  _QWORD *v336;
  _QWORD **v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  _QWORD *v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  float *v346;
  float v347;
  uint64_t v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  uint64_t v356;
  float *v357;
  uint64_t v358;
  uint64_t v359;
  float v360;
  float v361;
  uint64_t v362;
  float *v363;
  float v364;
  float v365;
  float *v366;
  uint64_t v367;
  float v368;
  float v369;
  BOOL v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  double v376;
  double v377;
  float v378;
  unint64_t v379;
  _QWORD *v380;
  _QWORD **v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  char *v389;
  char *v390;
  char *v391;
  unint64_t v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  char *v397;
  uint64_t v398;
  __int128 v399;
  gdc::GlobeTileGrid *v400;
  gdc::GlobeTileGrid *v401;
  char *v402;
  gdc::GlobeTileGrid *v403;
  uint64_t v404;
  char *v405;
  uint64_t *v406;
  uint64_t *v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  gdc::GlobeTileGrid *v411;
  uint64_t v412;
  float *v413;
  unsigned int v414;
  float v415;
  unsigned int v416;
  unsigned int v417;
  float *v418;
  float v419;
  float v420;
  char *v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  char *v427;
  unint64_t *v428;
  __int128 v429;
  unsigned __int8 v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  std::__shared_count v433;
  unsigned __int8 v434;
  uint64_t v435;
  unint64_t v436;
  unint64_t v437;
  unsigned __int8 v438;
  uint64_t v439;
  unsigned __int8 v440;
  uint64_t v441;
  unint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t *v453;
  _QWORD *v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  unint64_t v460;
  _BYTE *v461;
  uint64_t *v462;
  unint64_t v463;
  unint64_t v464;
  uint64_t v465;
  _OWORD *v466;
  uint64_t *v467;
  uint64_t v468;
  __int128 v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _QWORD *v485;
  _QWORD *v486;
  uint64_t v487;
  _QWORD *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  std::__shared_weak_count *end;
  unint64_t *v496;
  unint64_t v497;
  _QWORD *v498;
  int v499;
  uint64_t v500;
  int v501;
  uint64_t v502;
  unsigned __int8 v503;
  int v504;
  uint64_t v505;
  geo::read_write_lock *v506;
  const char *v507;
  malloc_zone_t *v508;
  int v509;
  uint64_t v510;
  uint64_t v511;
  geo::read_write_lock *v512;
  const char *v513;
  malloc_zone_t *v514;
  uint64_t v515;
  unint64_t *v516;
  unint64_t v517;
  uint64_t v518;
  char *__ptr32 *v519;
  unint64_t *v520;
  unint64_t v521;
  uint64_t *v522;
  float v523;
  float32x2_t v524;
  uint64_t v525;
  uint64_t **v526;
  uint64_t **v527;
  uint64_t v528;
  uint64_t *v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  __n128 v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  unsigned int *v543;
  unsigned int *v544;
  __n128 v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  int8x16_t v556;
  unint64_t v557;
  char *v558;
  float32x2_t v559;
  unint64_t v560;
  float v561;
  float32x2_t v562;
  uint64_t v563;
  int8x16_t v564;
  int32x4_t *v565;
  float32x4_t v566;
  unint64_t v567;
  float32x4_t v568;
  const float *i32;
  int32x4_t v570;
  int32x4_t v571;
  int32x4_t v572;
  int8x16_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  unint64_t v579;
  _QWORD *v580;
  float32x2_t v581;
  float32x2_t v582;
  double v583;
  float v584;
  float32x2_t *v585;
  float v586;
  uint64_t v587;
  int32x2_t v588;
  float32x2_t v589;
  float32x2_t v590;
  uint64_t v591;
  int v592;
  float32x2_t v593;
  float32x4_t v594;
  float32x4_t v595;
  uint64_t v596;
  float32x4_t v597;
  float v598;
  uint64_t v599;
  float *v600;
  unint64_t v601;
  uint64_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  unint64_t v606;
  float v607;
  float32x4_t v608;
  float v609;
  float32x2_t v610;
  float32x4_t v611;
  char *v612;
  float v613;
  float v614;
  uint64_t v615;
  float *v616;
  unint64_t v617;
  float v618;
  float v619;
  float v621;
  float v622;
  float v623;
  float v624;
  unsigned int v625;
  unint64_t v626;
  float32x2_t v627;
  float v628;
  float v629;
  float v630;
  float v631;
  float v632;
  float v633;
  float v634;
  int v635;
  float v636;
  float v637;
  double v638;
  double v639;
  double v640;
  float v641;
  float v642;
  float v643;
  float v644;
  unint64_t v645;
  float v646;
  float32x2_t v647;
  __float2 v648;
  float32x2_t v649;
  float32x2_t v650;
  uint64_t j;
  __float2 v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  float v656;
  __float2 v657;
  float32x2_t v658;
  float32x2_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float v663;
  uint64_t v664;
  float32x2_t v665;
  __float2 v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  __float2 v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  double v674;
  float v675;
  float32x2_t v676;
  __float2 v677;
  float32x2_t v678;
  float32x2_t v679;
  float v680;
  __float2 v681;
  float32x2_t v682;
  float32x2_t v683;
  float32x4_t v684;
  float32x4_t v685;
  char *v686;
  float *v687;
  float v688;
  float v689;
  float v690;
  int16x8_t v691;
  float v692;
  float v693;
  float v694;
  float v695;
  float v696;
  uint64_t v697;
  int v698;
  float32x4_t v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  unint64_t v703;
  unint64_t v704;
  unint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  _WORD *v709;
  uint64_t v710;
  unint64_t v711;
  _WORD *v712;
  __int16 v713;
  unint64_t v714;
  __int16 v715;
  __int16 v716;
  uint64_t v717;
  __int16 *v718;
  unint64_t v719;
  int64x2_t v720;
  int64x2_t v721;
  int64x2_t v722;
  int64x2_t v723;
  __int16 *v724;
  unint64_t v725;
  int64x2_t v726;
  unint64_t v727;
  unint64_t v728;
  uint64_t result;
  uint64_t *v730;
  uint64_t *v731;
  uint64_t **v732;
  uint64_t v733;
  uint64_t v735;
  uint64_t **v736;
  unsigned int *v737;
  unsigned int *v738;
  uint64_t v739;
  __n128 v740;
  __n128 v741;
  uint64_t v742;
  float32x2_t v743;
  uint64_t *v744;
  _WORD *v746;
  __int16 *v747;
  uint64_t *v748;
  unint64_t v749;
  uint64_t v750;
  const QuadTile *v751;
  float v752;
  void **v753;
  double v754;
  _QWORD *v756;
  unint64_t v757;
  char *v760;
  gdc::GlobeTileGrid **v761;
  float v762;
  uint64_t *v763;
  _QWORD *v764;
  unint64_t v765;
  uint64_t *v766;
  _QWORD **v767;
  uint64_t v768;
  std::vector<unsigned int>::pointer v769;
  _QWORD **v770;
  float v771;
  float32x2_t v772;
  char *v773;
  unint64_t v774;
  float v775;
  uint64_t *v776;
  _QWORD *v777;
  float v778;
  uint64_t v779;
  char *v780;
  unint64_t v781;
  uint64_t *v782;
  float v783;
  _DWORD *v784;
  char *v785;
  char *v786;
  unint64_t v787;
  char *v788;
  uint64_t v789;
  _QWORD **v790;
  float v791;
  float v792;
  uint64_t v793;
  float v794;
  float v795;
  uint64_t *v796;
  uint64_t *v797;
  uint64_t *v798;
  std::vector<unsigned int> v799;
  void *v800[3];
  std::vector<unsigned int> __p;
  unsigned int *v802;
  __int16 v803;
  uint64_t v804;
  __int128 v805;
  uint64_t v806;
  _BYTE v807[20];
  float v808;
  unint64_t v809;
  __n128 v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  float v815;
  uint64_t v816;
  int16x8x2_t v817;
  float32x4x3_t v818;

  v816 = *MEMORY[0x1E0C80C00];
  v766 = a3;
  if (!a3)
  {
    v10 = a1;
    v9 = 0;
    v776 = 0;
    goto LABEL_475;
  }
  v9 = 0;
  v763 = 0;
  v776 = 0;
  v8 = 0x100000001;
  while (2)
  {
    v810 = 0uLL;
    {
      v313 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v313, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v811 = mdm::Allocator::instance(void)::alloc;
    v812 = 0;
    {
      v314 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v314, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v813 = mdm::Allocator::instance(void)::alloc;
    v814 = 0;
    v815 = 1.0;
    v13 = (uint64_t *)v766[8];
    v14 = (uint64_t *)v766[9];
    if (v13 != v14)
    {
      while (1)
      {
        v63 = ggl::CullingGrid::intersectedCellsForRibbon(*(_QWORD *)(*v13 + 88), *(_QWORD **)(*v13 + 72));
        v64 = v63;
        v65 = v63;
        v66 = v810.n128_u64[1];
        if (v810.n128_u64[1])
        {
          v67 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v810.n128_i8[8]);
          v67.i16[0] = vaddlv_u8(v67);
          if (v67.u32[0] > 1uLL)
          {
            v7 = v63;
            if (v810.n128_u64[1] <= v63)
              v7 = v63 % v810.n128_u64[1];
          }
          else
          {
            v7 = (v810.n128_u32[2] - 1) & v63;
          }
          v68 = *(uint64_t **)(v810.n128_u64[0] + 8 * v7);
          if (v68)
          {
            v69 = *v68;
            if (*v68)
            {
              if (v67.u32[0] < 2uLL)
              {
                while (1)
                {
                  v71 = *(_QWORD *)(v69 + 8);
                  if (v71 == v63)
                  {
                    if (*(_DWORD *)(v69 + 16) == v63)
                      goto LABEL_133;
                  }
                  else if ((v71 & (v810.n128_u64[1] - 1)) != v7)
                  {
                    goto LABEL_73;
                  }
                  v69 = *(_QWORD *)v69;
                  if (!v69)
                    goto LABEL_73;
                }
              }
              do
              {
                v70 = *(_QWORD *)(v69 + 8);
                if (v70 == v63)
                {
                  if (*(_DWORD *)(v69 + 16) == v63)
                    goto LABEL_133;
                }
                else
                {
                  if (v70 >= v810.n128_u64[1])
                    v70 %= v810.n128_u64[1];
                  if (v70 != v7)
                    break;
                }
                v69 = *(_QWORD *)v69;
              }
              while (v69);
            }
          }
        }
LABEL_73:
        v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v813 + 16))(v813, 56, 8);
        __p.__begin_ = (std::vector<unsigned int>::pointer)v69;
        __p.__end_ = (std::vector<unsigned int>::pointer)&v813;
        *(_QWORD *)v69 = 0;
        *(_QWORD *)(v69 + 8) = v65;
        *(_DWORD *)(v69 + 16) = v64;
        *(_QWORD *)(v69 + 32) = 0;
        *(_QWORD *)(v69 + 40) = 0;
        *(_QWORD *)(v69 + 24) = 0;
        {
          v127 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v127, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v69 + 48) = mdm::Allocator::instance(void)::alloc;
        LOBYTE(__p.__end_cap_.__value_) = 1;
        v73 = (float)(v814 + 1);
        if (!v66 || (float)(v815 * (float)v66) < v73)
          break;
LABEL_123:
        v94 = *(uint64_t **)(v810.n128_u64[0] + 8 * v7);
        if (v94)
        {
          *(_QWORD *)v69 = *v94;
LABEL_131:
          *v94 = v69;
          goto LABEL_132;
        }
        *(_QWORD *)v69 = v812;
        v812 = v69;
        *(_QWORD *)(v810.n128_u64[0] + 8 * v7) = &v812;
        if (*(_QWORD *)v69)
        {
          v95 = *(_QWORD *)(*(_QWORD *)v69 + 8);
          if ((v66 & (v66 - 1)) != 0)
          {
            if (v95 >= v66)
              v95 %= v66;
          }
          else
          {
            v95 &= v66 - 1;
          }
          v94 = (uint64_t *)(v810.n128_u64[0] + 8 * v95);
          goto LABEL_131;
        }
LABEL_132:
        ++v814;
LABEL_133:
        v96 = *(_QWORD **)(v69 + 32);
        v97 = *(_QWORD *)(v69 + 40);
        if ((unint64_t)v96 < v97)
        {
          if (v96)
          {
            v98 = *v13;
            *v13 = 0;
            *v96 = v98;
          }
          v62 = v96 + 1;
          goto LABEL_52;
        }
        v99 = *(_QWORD *)(v69 + 24);
        v100 = ((uint64_t)v96 - v99) >> 3;
        v101 = v100 + 1;
        if ((unint64_t)(v100 + 1) >> 61)
          abort();
        v102 = v97 - v99;
        if (v102 >> 2 > v101)
          v101 = v102 >> 2;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
          v103 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v103 = v101;
        if (v103)
        {
          v104 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v69 + 48) + 16))(*(_QWORD *)(v69 + 48), 8 * v103, 8);
          v105 = (_QWORD *)(v104 + 8 * v100);
          v106 = v104 + 8 * v103;
          if (v104)
          {
            v107 = *v13;
            *v13 = 0;
            *v105 = v107;
          }
        }
        else
        {
          v106 = 0;
          v105 = (_QWORD *)(8 * v100);
        }
        v62 = v105 + 1;
        v108 = *(_QWORD **)(v69 + 24);
        v109 = *(_QWORD *)(v69 + 32);
        if ((_QWORD *)v109 != v108)
        {
          v110 = v109 - (_QWORD)v108 - 8;
          if (v110 > 0x47
            && ((v111 = v110 >> 3, v109 - 8 * v111 - 8 >= (unint64_t)v105)
             || (unint64_t)&v105[-v111 - 1] >= v109))
          {
            v119 = v111 + 1;
            v120 = (v111 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            v112 = (_QWORD *)(v109 - 8 * v120);
            v121 = v105 - 2;
            v122 = (__int128 *)(v109 - 32);
            v123 = v120;
            do
            {
              v125 = *v122;
              v124 = v122[1];
              *v122 = 0uLL;
              v122[1] = 0uLL;
              v122 -= 2;
              *(v121 - 1) = v125;
              *v121 = v124;
              v121 -= 2;
              v123 -= 4;
            }
            while (v123);
            v105 -= v120;
            if (v119 == v120)
              goto LABEL_152;
          }
          else
          {
            v112 = *(_QWORD **)(v69 + 32);
          }
          do
          {
            v113 = *--v112;
            *v112 = 0;
            *--v105 = v113;
          }
          while (v112 != v108);
LABEL_152:
          v109 = *(_QWORD *)(v69 + 24);
          v114 = *(_QWORD **)(v69 + 32);
          *(_QWORD *)(v69 + 24) = v105;
          *(_QWORD *)(v69 + 32) = v62;
          v7 = *(_QWORD *)(v69 + 40);
          *(_QWORD *)(v69 + 40) = v106;
          while (v114 != (_QWORD *)v109)
          {
            v116 = (void (***)(_QWORD))*--v114;
            v115 = v116;
            *v114 = 0;
            if (v116)
            {
              (**v115)(v115);
              {
                v118 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v118, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v115, 128);
            }
          }
          if (!v109)
            goto LABEL_52;
LABEL_162:
          (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v69 + 48) + 40))(*(_QWORD *)(v69 + 48), v109, v7 - v109);
          goto LABEL_52;
        }
        *(_QWORD *)(v69 + 24) = v105;
        *(_QWORD *)(v69 + 32) = v62;
        v7 = *(_QWORD *)(v69 + 40);
        *(_QWORD *)(v69 + 40) = v106;
        if (v109)
          goto LABEL_162;
LABEL_52:
        *(_QWORD *)(v69 + 32) = v62;
        if (++v13 == v14)
          goto LABEL_8;
      }
      v74 = (v66 & (v66 - 1)) != 0;
      if (v66 < 3)
        v74 = 1;
      v75 = v74 | (2 * v66);
      v76 = vcvtps_u32_f32(v73 / v815);
      if (v75 <= v76)
        prime = v76;
      else
        prime = v75;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v66 = v810.n128_u64[1];
      if (prime <= v810.n128_u64[1])
      {
        if (prime >= v810.n128_u64[1])
          goto LABEL_110;
        v88 = vcvtps_u32_f32((float)v814 / v815);
        if (v810.n128_u64[1] < 3
          || (v89 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v810.n128_i8[8]), v89.i16[0] = vaddlv_u8(v89), v89.u32[0] > 1uLL))
        {
          v88 = std::__next_prime(v88);
        }
        else
        {
          v90 = 1 << -(char)__clz(v88 - 1);
          if (v88 >= 2)
            v88 = v90;
        }
        if (prime <= v88)
          prime = v88;
        if (prime >= v66)
        {
          v66 = v810.n128_u64[1];
LABEL_110:
          if ((v66 & (v66 - 1)) != 0)
          {
            if (v66 <= v65)
              v7 = v65 % v66;
            else
              v7 = v65;
          }
          else
          {
            v7 = ((_DWORD)v66 - 1) & v65;
          }
          goto LABEL_123;
        }
        if (!prime)
        {
          v126 = v810.n128_u64[0];
          v810.n128_u64[0] = 0;
          if (v126)
            (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v811 + 40))(v811, v126, 8 * v810.n128_u64[1]);
          v66 = 0;
          v810.n128_u64[1] = 0;
          goto LABEL_110;
        }
      }
      v78 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(_QWORD *)v811 + 16))(v811, 8 * prime, 8);
      v79 = v810.n128_u64[0];
      v810.n128_u64[0] = v78;
      if (v79)
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v811 + 40))(v811, v79, 8 * v810.n128_u64[1]);
      v80 = 0;
      v810.n128_u64[1] = prime;
      do
        *(_QWORD *)(v810.n128_u64[0] + 8 * v80++) = 0;
      while (prime != v80);
      v81 = (_QWORD **)v812;
      if (!v812)
      {
LABEL_109:
        v66 = prime;
        goto LABEL_110;
      }
      v82 = *(_QWORD *)(v812 + 8);
      v83 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v84 = v82 & v83;
        *(_QWORD *)(v810.n128_u64[0] + 8 * v84) = &v812;
        for (i = *v81; *v81; i = *v81)
        {
          v86 = i[1] & v83;
          if (v86 == v84)
          {
            v81 = (_QWORD **)i;
          }
          else if (*(_QWORD *)(v810.n128_u64[0] + 8 * v86))
          {
            *v81 = (_QWORD *)*i;
            v87 = 8 * v86;
            *i = **(_QWORD **)(v810.n128_u64[0] + v87);
            **(_QWORD **)(v810.n128_u64[0] + v87) = i;
          }
          else
          {
            *(_QWORD *)(v810.n128_u64[0] + 8 * v86) = v81;
            v81 = (_QWORD **)i;
            v84 = v86;
          }
        }
        goto LABEL_109;
      }
      if (v82 >= prime)
        v82 %= prime;
      *(_QWORD *)(v810.n128_u64[0] + 8 * v82) = &v812;
      v91 = *v81;
      if (!*v81)
        goto LABEL_109;
      while (1)
      {
        v93 = v91[1];
        if (v93 >= prime)
          v93 %= prime;
        if (v93 != v82)
        {
          if (!*(_QWORD *)(v810.n128_u64[0] + 8 * v93))
          {
            *(_QWORD *)(v810.n128_u64[0] + 8 * v93) = v81;
            goto LABEL_114;
          }
          *v81 = (_QWORD *)*v91;
          v92 = 8 * v93;
          *v91 = **(_QWORD **)(v810.n128_u64[0] + v92);
          **(_QWORD **)(v810.n128_u64[0] + v92) = v91;
          v91 = v81;
        }
        v93 = v82;
LABEL_114:
        v81 = (_QWORD **)v91;
        v91 = (_QWORD *)*v91;
        v82 = v93;
        if (!v91)
          goto LABEL_109;
      }
    }
LABEL_8:
    v15 = v776;
    v16 = operator new();
    v17 = 0uLL;
    *(_OWORD *)(v16 + 144) = 0u;
    *(_QWORD *)v16 = &off_1E42AF228;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 64) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 48) = 0;
    *(_QWORD *)(v16 + 32) = "";
    *(_DWORD *)(v16 + 56) = 0;
    *(_DWORD *)(v16 + 72) = 1065353216;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(int64x2_t *)(v16 + 112) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v16 + 128) = 0;
    *(_QWORD *)(v16 + 16) = &off_1E42AF548;
    *(_BYTE *)(v16 + 136) = 1;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 176) = 0u;
    if ((v18 & 1) == 0)
    {
      v17 = 0uLL;
      if (v315)
      {
        v316 = operator new();
        *(_QWORD *)(v316 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v316 + 24) = "GeoGL";
        *(_OWORD *)(v316 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v316 = &off_1E42B5668;
        *(_QWORD *)(v316 + 8) = "GeoGL";
        *(_OWORD *)(v316 + 72) = 0u;
        *(_OWORD *)(v316 + 88) = 0u;
        *(_OWORD *)(v316 + 104) = 0u;
        *(_OWORD *)(v316 + 120) = 0u;
        *(_OWORD *)(v316 + 136) = 0u;
        *(_OWORD *)(v316 + 152) = 0u;
        *(_OWORD *)(v316 + 168) = 0u;
        *(_OWORD *)(v316 + 184) = 0u;
        *(_OWORD *)(v316 + 200) = 0u;
        *(_OWORD *)(v316 + 216) = 0u;
        *(_OWORD *)(v316 + 232) = 0u;
        *(_QWORD *)(v316 + 248) = 0;
        *(_OWORD *)(v316 + 56) = 0u;
        v317 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v316 + 56), 0);
        if ((_DWORD)v317)
          geo::read_write_lock::logFailure(v317, (uint64_t)"initialization", v318);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v316 + 48) = zone;
        malloc_set_zone_name(zone, "GeoGL");
        *(_QWORD *)(v316 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v316;
        v17 = 0uLL;
        v15 = v776;
      }
    }
    *(_QWORD *)(v16 + 192) = ggl::Allocator::instance(void)::alloc;
    *(_OWORD *)(v16 + 200) = v17;
    *(_OWORD *)(v16 + 216) = v17;
    *(_QWORD *)(v16 + 232) = 0;
    *(_QWORD *)(v16 + 240) = 32;
    v19 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
    *v19 = 0;
    v19[1] = 0;
    *(_QWORD *)(v16 + 224) = v19;
    *(_QWORD *)(v16 + 232) = v19;
    *(_QWORD *)(v16 + 256) = 0;
    *(_QWORD *)(v16 + 264) = 0;
    *(_QWORD *)(v16 + 248) = 0;
    *(_BYTE *)(v16 + 272) = 1;
    *(_QWORD *)v16 = &off_1E428C7C0;
    *(_OWORD *)(v16 + 280) = *((_OWORD *)v766 + 1);
    v20 = v766[4];
    *(_QWORD *)(v16 + 296) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_QWORD *)(v16 + 304) = v766[5];
    v23 = v766[6];
    *(_QWORD *)(v16 + 312) = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = v766[7];
    *(_QWORD *)v16 = &off_1E429F478;
    v6 = (uint64_t *)(v16 + 328);
    *(_QWORD *)(v16 + 320) = v26;
    *(_QWORD *)(v16 + 328) = 0;
    *(_QWORD *)(v16 + 336) = 0;
    *(_QWORD *)(v16 + 344) = 0;
    v27 = (_QWORD *)operator new();
    if ((v28 & 1) == 0
    {
      if ((v320 & 1) == 0
      {
        if ((v322 & 1) == 0
        {
          ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TexturedAnimatedRibbon::defaultVboReflection;
        }
        ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::attributesReflection(void)::r;
        unk_1ECE336A8 = 1;
      }
      ggl::TexturedAnimatedRibbon::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::typedReflection(void)::r;
      unk_1ECE328F0 = &ggl::TexturedAnimatedRibbon::pipelineDataBasePipelineDeviceStructs(void)::ref;
      qword_1ECE328F8 = 0;
      if ((v321 & 1) == 0
      {
        ggl::TexturedAnimatedRibbon::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
        *(_QWORD *)algn_1ECE32928 = ggl::Tile::Transform::reflection(void)::reflection;
        qword_1ECE32930 = (uint64_t)ggl::TexturedAnimatedRibbon::Style::reflection(void)::reflection;
      }
      qword_1ECE32900 = (uint64_t)&ggl::TexturedAnimatedRibbon::pipelineDataBasePipelineConstantStructs(void)::ref;
      *(_OWORD *)algn_1ECE32908 = xmmword_19FFB3C60;
      v15 = v776;
    }
    ggl::PipelineSetup::PipelineSetup((uint64_t)v27, (uint64_t)&ggl::TexturedAnimatedRibbon::BasePipelineSetup::typedReflection(void)::ref);
    *v27 = &off_1E42BB000;
    v29 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v29->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    v29->__shared_weak_owners_ = 0;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1FA0;
    v31 = ggl::BufferData::BufferData((uint64_t)&v29[1], qword_1EE54EFC0, 2, 1, 6, 1);
    v29[9].__shared_owners_ = (uint64_t)ggl::TexturedAnimatedRibbon::Style::reflection(void)::reflection;
    v29[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B95F0;
    v32 = v27[8];
    *(_QWORD *)(v32 + 32) = v31;
    *(_QWORD *)(v32 + 40) = 0;
    v33 = v27[20];
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    v7 = *(_QWORD *)(v33 + 40);
    *(_QWORD *)(v33 + 32) = v31;
    *(_QWORD *)(v33 + 40) = v29;
    if (v7)
    {
      v35 = (unint64_t *)(v7 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
      }
    }
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    v38 = (uint64_t *)v27[8];
    v38[1] = 0;
    v39 = *a4;
    *v38 = *a4;
    v40 = (_QWORD *)v27[20];
    v41 = a4[1];
    if (v41)
    {
      v42 = (unint64_t *)(v41 + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = (std::__shared_weak_count *)v40[1];
    *v40 = v39;
    v40[1] = v41;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v27[8];
    *(_QWORD *)(v47 + 24) = 0;
    v48 = *a5;
    *(_QWORD *)(v47 + 16) = *a5;
    v49 = v27[20];
    v50 = a5[1];
    if (v50)
    {
      v51 = (unint64_t *)(v50 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = *(std::__shared_weak_count **)(v49 + 24);
    *(_QWORD *)(v49 + 16) = v48;
    *(_QWORD *)(v49 + 24) = v50;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *v6;
    *v6 = (uint64_t)v27;
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    v57 = (char *)operator new(0x58uLL);
    *((_QWORD *)v57 + 1) = 0;
    *((_QWORD *)v57 + 2) = 0;
    *(_QWORD *)v57 = &off_1E42DED18;
    *((_QWORD *)v57 + 5) = 0;
    *((_QWORD *)v57 + 6) = 0;
    *((_QWORD *)v57 + 4) = 0;
    *((_DWORD *)v57 + 14) = 0;
    *((_QWORD *)v57 + 3) = &off_1E42B63B0;
    *(_OWORD *)(v57 + 60) = xmmword_19FFB2EA0;
    *(_QWORD *)(v57 + 76) = 0x100000001;
    *((_DWORD *)v57 + 21) = 0;
    v58 = *(std::__shared_weak_count **)(v16 + 344);
    *(_QWORD *)(v16 + 336) = v57 + 24;
    *(_QWORD *)(v16 + 344) = v57;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v15 < v763)
    {
      *v15 = v16;
      v61 = v15 + 1;
      goto LABEL_200;
    }
    v128 = v15 - v9;
    v129 = v128 + 1;
    if ((unint64_t)(v128 + 1) >> 61)
      abort();
    if (((char *)v763 - (char *)v9) >> 2 > v129)
      v129 = ((char *)v763 - (char *)v9) >> 2;
    if ((unint64_t)((char *)v763 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8)
      v130 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v130 = v129;
    if (v130)
    {
      if (v130 >> 61)
        goto LABEL_818;
      v131 = operator new(8 * v130);
    }
    else
    {
      v131 = 0;
    }
    v6 = (uint64_t *)&v131[8 * v128];
    *v6 = v16;
    v132 = v6 + 1;
    if (v15 != v9)
    {
      v133 = (char *)(v15 - 1) - (char *)v9;
      if (v133 >= 0x58)
      {
        if ((unint64_t)((char *)v9 - v131) >= 0x20)
        {
          v135 = (v133 >> 3) + 1;
          v134 = &v15[-(v135 & 0x3FFFFFFFFFFFFFFCLL)];
          v136 = &v131[8 * v128 - 16];
          v137 = v15 - 2;
          v138 = v135 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v139 = *(_OWORD *)v137;
            *(v136 - 1) = *((_OWORD *)v137 - 1);
            *v136 = v139;
            v136 -= 2;
            v137 -= 4;
            v138 -= 4;
          }
          while (v138);
          v6 -= v135 & 0x3FFFFFFFFFFFFFFCLL;
          if (v135 == (v135 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_197;
        }
        else
        {
          v134 = v15;
        }
      }
      else
      {
        v134 = v15;
      }
      do
      {
        v140 = *--v134;
        *--v6 = v140;
      }
      while (v134 != v9);
    }
LABEL_197:
    v763 = (uint64_t *)&v131[8 * v130];
    if (v9)
      operator delete(v9);
    v9 = v6;
    v61 = v132;
LABEL_200:
    v776 = v61;
    v782 = v9;
    v784 = (_DWORD *)v812;
    if (v812)
    {
      v141 = 0;
      v142 = 0;
      v6 = 0;
      while (1)
      {
        v143 = operator new();
        *(_QWORD *)(v143 + 96) = 0;
        *(_OWORD *)(v143 + 64) = 0u;
        *(_OWORD *)(v143 + 80) = 0u;
        *(_OWORD *)(v143 + 32) = 0u;
        *(_OWORD *)(v143 + 48) = 0u;
        *(_OWORD *)v143 = 0u;
        *(_OWORD *)(v143 + 16) = 0u;
        *(_BYTE *)(v143 + 48) = 1;
        *(_QWORD *)(v143 + 56) = 0;
        *(_QWORD *)(v143 + 64) = 0;
        *(_QWORD *)(v143 + 72) = 0;
        {
          v257 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v257, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        *(_QWORD *)(v143 + 80) = mdm::Allocator::instance(void)::alloc;
        *(_DWORD *)(v143 + 96) = 0;
        __p.__begin_ = (std::vector<unsigned int>::pointer)v143;
        if ((unint64_t)v6 < v142)
        {
          v788 = (char *)v142;
          __p.__begin_ = 0;
          *v6 = v143;
          v145 = v6 + 1;
          begin = __p.__begin_;
          if (!__p.__begin_)
            goto LABEL_259;
LABEL_247:
          v173 = (_QWORD *)*((_QWORD *)begin + 7);
          if (v173)
          {
            v174 = (_QWORD *)*((_QWORD *)begin + 8);
            v175 = *((_QWORD *)begin + 7);
            if (v174 != v173)
            {
              do
              {
                v177 = (void (***)(_QWORD, uint64_t))*--v174;
                v176 = v177;
                *v174 = 0;
                if (v177)
                {
                  (**v176)(v176, v175);
                  if ((v178 & 1) == 0
                  {
                    v179 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v179, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v176, 128);
                }
              }
              while (v174 != v173);
              v175 = *((_QWORD *)begin + 7);
            }
            *((_QWORD *)begin + 8) = v173;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)begin + 10) + 40))(*((_QWORD *)begin + 10), v175, *((_QWORD *)begin + 9) - v175);
          }
          MEMORY[0x1A1AF4E00](begin, 0x1020C4010FC18DELL);
          goto LABEL_259;
        }
        v147 = (char *)v6 - (char *)v141;
        v7 = v6 - v141;
        v148 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 61)
          abort();
        if ((uint64_t)(v142 - (_QWORD)v141) >> 2 > v148)
          v148 = (uint64_t)(v142 - (_QWORD)v141) >> 2;
        v149 = v142 - (unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v148;
        if (v149)
        {
          if (v149 >> 61)
            goto LABEL_818;
          v150 = (char *)operator new(8 * v149);
        }
        else
        {
          v150 = 0;
        }
        v151 = (uint64_t *)&v150[8 * v7];
        __p.__begin_ = 0;
        *v151 = v143;
        v145 = v151 + 1;
        v152 = (char *)v6 - (char *)v141;
        if (v6 != v141)
          break;
LABEL_244:
        v788 = &v150[8 * v149];
        if (v141)
          operator delete(v141);
        v141 = v151;
        begin = __p.__begin_;
        if (__p.__begin_)
          goto LABEL_247;
LABEL_259:
        *(_DWORD *)(*(v145 - 1) + 96) = v784[4];
        v180 = *((_QWORD *)v784 + 3);
        v793 = *((_QWORD *)v784 + 4);
        if (v180 != v793)
        {
          v181 = 0;
          while (1)
          {
            v182 = *(void (****)(_QWORD))v180;
            v183 = *(_QWORD *)(*(_QWORD *)v180 + 88);
            if ((unint64_t)(v183 + v181) <= 0x5999)
            {
              v187 = *(v145 - 1);
              goto LABEL_324;
            }
            v184 = operator new();
            *(_QWORD *)(v184 + 96) = 0;
            *(_OWORD *)(v184 + 64) = 0u;
            *(_OWORD *)(v184 + 80) = 0u;
            *(_OWORD *)(v184 + 32) = 0u;
            *(_OWORD *)(v184 + 48) = 0u;
            *(_OWORD *)v184 = 0u;
            *(_OWORD *)(v184 + 16) = 0u;
            *(_BYTE *)(v184 + 48) = 1;
            *(_QWORD *)(v184 + 56) = 0;
            *(_QWORD *)(v184 + 64) = 0;
            *(_QWORD *)(v184 + 72) = 0;
            {
              v256 = operator new();
              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v256, "VectorKitLabels", 0x5ED09DD50000000FLL);
            }
            *(_QWORD *)(v184 + 80) = mdm::Allocator::instance(void)::alloc;
            *(_DWORD *)(v184 + 96) = 0;
            __p.__begin_ = (std::vector<unsigned int>::pointer)v184;
            if (v145 >= (uint64_t *)v788)
              break;
            __p.__begin_ = 0;
            *v145++ = v184;
            v186 = __p.__begin_;
            if (__p.__begin_)
              goto LABEL_311;
LABEL_323:
            v181 = 0;
            v187 = *(v145 - 1);
            *(_DWORD *)(v187 + 96) = v784[4];
            v182 = *(void (****)(_QWORD))v180;
            v183 = *(_QWORD *)(*(_QWORD *)v180 + 88);
LABEL_324:
            *(_QWORD *)v180 = 0;
            v225 = *(_QWORD **)(v187 + 64);
            v226 = *(_QWORD *)(v187 + 72);
            v797 = v141;
            if ((unint64_t)v225 < v226)
            {
              if (v225)
              {
                *v225 = v182;
                v182 = 0;
              }
              v227 = v225 + 1;
              goto LABEL_362;
            }
            v228 = *(_QWORD *)(v187 + 56);
            v229 = ((uint64_t)v225 - v228) >> 3;
            v230 = v229 + 1;
            if ((unint64_t)(v229 + 1) >> 61)
              abort();
            v231 = v226 - v228;
            if (v231 >> 2 > v230)
              v230 = v231 >> 2;
            if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFF8)
              v7 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v7 = v230;
            if (v7)
            {
              v232 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v187 + 80) + 16))(*(_QWORD *)(v187 + 80), 8 * v7, 8);
              v233 = (_QWORD *)(v232 + 8 * v229);
              v234 = v232 + 8 * v7;
              if (v232)
              {
                *v233 = v182;
                v182 = 0;
              }
            }
            else
            {
              v234 = 0;
              v233 = (_QWORD *)(8 * v229);
            }
            v227 = v233 + 1;
            v235 = *(_QWORD **)(v187 + 56);
            v236 = *(_QWORD *)(v187 + 64);
            if ((_QWORD *)v236 == v235)
            {
              *(_QWORD *)(v187 + 56) = v233;
              *(_QWORD *)(v187 + 64) = v227;
              v250 = *(_QWORD *)(v187 + 72);
              *(_QWORD *)(v187 + 72) = v234;
              if (!v236)
                goto LABEL_362;
              goto LABEL_361;
            }
            v237 = v236 - (_QWORD)v235 - 8;
            if (v237 <= 0x47
              || ((v238 = v237 >> 3, v236 - 8 * v238 - 8 < (unint64_t)v233)
                ? (v239 = (unint64_t)&v233[-v238 - 1] >= v236)
                : (v239 = 1),
                  !v239))
            {
              v242 = *(_QWORD **)(v187 + 64);
              do
              {
LABEL_350:
                v248 = *--v242;
                *v242 = 0;
                *--v233 = v248;
              }
              while (v242 != v235);
              goto LABEL_351;
            }
            v240 = v238 + 1;
            v241 = (v238 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            v242 = (_QWORD *)(v236 - 8 * v241);
            v243 = v233 - 2;
            v244 = (__int128 *)(v236 - 32);
            v245 = v241;
            do
            {
              v247 = *v244;
              v246 = v244[1];
              *v244 = 0uLL;
              v244[1] = 0uLL;
              v244 -= 2;
              *(v243 - 1) = v247;
              *v243 = v246;
              v243 -= 2;
              v245 -= 4;
            }
            while (v245);
            v233 -= v241;
            if (v240 != v241)
              goto LABEL_350;
LABEL_351:
            v236 = *(_QWORD *)(v187 + 56);
            v249 = *(_QWORD **)(v187 + 64);
            *(_QWORD *)(v187 + 56) = v233;
            *(_QWORD *)(v187 + 64) = v227;
            v250 = *(_QWORD *)(v187 + 72);
            *(_QWORD *)(v187 + 72) = v234;
            if (v249 != (_QWORD *)v236)
            {
              v779 = v250;
              do
              {
                v251 = *--v249;
                v7 = v251;
                *v249 = 0;
                if (v251)
                {
                  (**(void (***)(uint64_t))v7)(v7);
                  if ((v252 & 1) == 0
                  {
                    v253 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v253, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v7, 128);
                }
              }
              while (v249 != (_QWORD *)v236);
              v250 = v779;
            }
            if (!v236)
              goto LABEL_362;
LABEL_361:
            (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(v187 + 80) + 40))(*(_QWORD *)(v187 + 80), v236, v250 - v236);
LABEL_362:
            *(_QWORD *)(v187 + 64) = v227;
            v141 = v797;
            if (v182)
            {
              (**v182)(v182);
              {
                v255 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v255, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v182, 128);
            }
            v181 += v183;
            v180 += 8;
            if (v180 == v793)
              goto LABEL_202;
          }
          v188 = (char *)v145 - (char *)v141;
          v7 = v145 - v141;
          v189 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 61)
            abort();
          if ((v788 - (char *)v141) >> 2 > v189)
            v189 = (v788 - (char *)v141) >> 2;
          if ((unint64_t)(v788 - (char *)v141) >= 0x7FFFFFFFFFFFFFF8)
            v190 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v190 = v189;
          if (v190)
          {
            if (v190 >> 61)
              goto LABEL_818;
            v191 = (char *)operator new(8 * v190);
          }
          else
          {
            v191 = 0;
          }
          v192 = (uint64_t *)&v191[8 * v7];
          __p.__begin_ = 0;
          *v192 = v184;
          v796 = v192 + 1;
          v193 = (char *)v145 - (char *)v141;
          if (v145 != v141)
          {
            v194 = v193 - 8;
            if ((unint64_t)(v193 - 8) < 0x138)
            {
              v195 = v145;
              goto LABEL_282;
            }
            v197 = v194 & 0xFFFFFFFFFFFFFFF8;
            if ((uint64_t *)((char *)v145 - (v194 & 0xFFFFFFFFFFFFFFF8) - 8) > v145 - 1)
            {
              v195 = v145;
              goto LABEL_282;
            }
            if (&v191[v188 - 8 - v197] > &v191[v188 - 8])
            {
              v195 = v145;
              goto LABEL_282;
            }
            v198 = v194 >> 3;
            if (&v145[-v198 - 1] < v192)
            {
              v199 = (unint64_t)&v191[v188 - v197 - 8];
              v195 = v145;
              if (v199 < (unint64_t)v145)
                goto LABEL_829;
            }
            v200 = v198 + 1;
            v195 = &v145[-(v200 & 0x3FFFFFFFFFFFFFFCLL)];
            v201 = &v191[8 * v7 - 16];
            v202 = v145 - 4;
            v203 = v200 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v205 = *(_OWORD *)v202;
              v204 = *((_OWORD *)v202 + 1);
              *(_OWORD *)v202 = 0uLL;
              *((_OWORD *)v202 + 1) = 0uLL;
              v202 -= 4;
              *((_OWORD *)v201 - 1) = v205;
              *(_OWORD *)v201 = v204;
              v201 -= 32;
              v203 -= 4;
            }
            while (v203);
            v192 -= v200 & 0x3FFFFFFFFFFFFFFCLL;
            if (v200 != (v200 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_829:
              do
              {
LABEL_282:
                v196 = *--v195;
                *v195 = 0;
                *--v192 = v196;
              }
              while (v195 != v141);
            }
            do
            {
              v208 = *--v145;
              v207 = v208;
              *v145 = 0;
              if (v208)
              {
                v209 = v141;
                v210 = *(_QWORD **)(v207 + 56);
                if (v210)
                {
                  v211 = *(_QWORD **)(v207 + 64);
                  v206 = *(_QWORD *)(v207 + 56);
                  if (v211 != v210)
                  {
                    do
                    {
                      v213 = *--v211;
                      v7 = v213;
                      *v211 = 0;
                      if (v213)
                      {
                        (**(void (***)(uint64_t, uint64_t))v7)(v7, v206);
                        if ((v214 & 1) == 0
                        {
                          v215 = operator new();
                          *(_QWORD *)(v215 + 16) = 0x5ED09DD50000000FLL;
                          *(_QWORD *)(v215 + 24) = "VectorKitLabels";
                          *(_OWORD *)(v215 + 32) = xmmword_19FFB2E80;
                          *(_QWORD *)v215 = &off_1E42B5668;
                          *(_QWORD *)(v215 + 8) = "VectorKitLabels";
                          *(_OWORD *)(v215 + 72) = 0u;
                          *(_OWORD *)(v215 + 88) = 0u;
                          *(_OWORD *)(v215 + 104) = 0u;
                          *(_OWORD *)(v215 + 120) = 0u;
                          *(_OWORD *)(v215 + 136) = 0u;
                          *(_OWORD *)(v215 + 152) = 0u;
                          *(_OWORD *)(v215 + 168) = 0u;
                          *(_OWORD *)(v215 + 184) = 0u;
                          *(_OWORD *)(v215 + 200) = 0u;
                          *(_OWORD *)(v215 + 216) = 0u;
                          *(_OWORD *)(v215 + 232) = 0u;
                          *(_QWORD *)(v215 + 248) = 0;
                          v789 = v215;
                          *(_OWORD *)(v215 + 56) = 0u;
                          v216 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v215 + 56), 0);
                          if ((_DWORD)v216)
                            geo::read_write_lock::logFailure(v216, (uint64_t)"initialization", v217);
                          v212 = malloc_create_zone(0, 0);
                          *(_QWORD *)(v789 + 48) = v212;
                          malloc_set_zone_name(v212, "VectorKitLabels");
                          *(_QWORD *)(v789 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                          mdm::Allocator::instance(void)::alloc = v789;
                        }
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                          + 40))(mdm::Allocator::instance(void)::alloc, v7, 128);
                      }
                    }
                    while (v211 != v210);
                    v206 = *(_QWORD *)(v207 + 56);
                  }
                  *(_QWORD *)(v207 + 64) = v210;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v207 + 80) + 40))(*(_QWORD *)(v207 + 80), v206, *(_QWORD *)(v207 + 72) - v206);
                }
                MEMORY[0x1A1AF4E00](v207, 0x1020C4010FC18DELL);
                v141 = v209;
              }
            }
            while (v145 != v141);
          }
          v788 = &v191[8 * v190];
          if (v141)
            operator delete(v141);
          v141 = v192;
          v145 = v796;
          v186 = __p.__begin_;
          if (!__p.__begin_)
            goto LABEL_323;
LABEL_311:
          v218 = (_QWORD *)*((_QWORD *)v186 + 7);
          if (v218)
          {
            v219 = (_QWORD *)*((_QWORD *)v186 + 8);
            v220 = *((_QWORD *)v186 + 7);
            if (v219 != v218)
            {
              do
              {
                v222 = (void (***)(_QWORD, uint64_t))*--v219;
                v221 = v222;
                *v219 = 0;
                if (v222)
                {
                  (**v221)(v221, v220);
                  if ((v223 & 1) == 0
                  {
                    v224 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v224, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v221, 128);
                }
              }
              while (v219 != v218);
              v220 = *((_QWORD *)v186 + 7);
            }
            *((_QWORD *)v186 + 8) = v218;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v186 + 10) + 40))(*((_QWORD *)v186 + 10), v220, *((_QWORD *)v186 + 9) - v220);
          }
          MEMORY[0x1A1AF4E00](v186, 0x1020C4010FC18DELL);
          goto LABEL_323;
        }
LABEL_202:
        v9 = v782;
        v6 = v145;
        v784 = *(_DWORD **)v784;
        v142 = (unint64_t)v788;
        if (!v784)
          goto LABEL_377;
      }
      v153 = v152 - 8;
      if ((unint64_t)(v152 - 8) >= 0x138)
      {
        v156 = v153 & 0xFFFFFFFFFFFFFFF8;
        if ((uint64_t *)((char *)v6 - (v153 & 0xFFFFFFFFFFFFFFF8) - 8) > v6 - 1)
        {
          v154 = v6;
        }
        else if (&v150[v147 - 8 - v156] > &v150[v147 - 8])
        {
          v154 = v6;
        }
        else
        {
          v157 = v153 >> 3;
          if (&v6[-v157 - 1] >= v151
            || (v158 = (unint64_t)&v150[v147 - v156 - 8], v154 = v6, v158 >= (unint64_t)v6))
          {
            v159 = v157 + 1;
            v154 = &v6[-(v159 & 0x3FFFFFFFFFFFFFFCLL)];
            v160 = &v150[8 * v7 - 16];
            v161 = v6 - 4;
            v162 = v159 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v164 = *(_OWORD *)v161;
              v163 = *((_OWORD *)v161 + 1);
              *(_OWORD *)v161 = 0uLL;
              *((_OWORD *)v161 + 1) = 0uLL;
              v161 -= 4;
              *((_OWORD *)v160 - 1) = v164;
              *(_OWORD *)v160 = v163;
              v160 -= 32;
              v162 -= 4;
            }
            while (v162);
            v151 -= v159 & 0x3FFFFFFFFFFFFFFCLL;
            if (v159 == (v159 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_234:
                v167 = *--v6;
                v166 = v167;
                *v6 = 0;
                if (v167)
                {
                  v168 = *(_QWORD **)(v166 + 56);
                  if (v168)
                  {
                    v169 = *(_QWORD **)(v166 + 64);
                    v165 = *(_QWORD *)(v166 + 56);
                    if (v169 != v168)
                    {
                      do
                      {
                        v170 = *--v169;
                        v7 = v170;
                        *v169 = 0;
                        if (v170)
                        {
                          (**(void (***)(uint64_t, uint64_t))v7)(v7, v165);
                          if ((v171 & 1) == 0
                          {
                            v172 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v172, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                            + 40))(mdm::Allocator::instance(void)::alloc, v7, 128);
                        }
                      }
                      while (v169 != v168);
                      v165 = *(_QWORD *)(v166 + 56);
                    }
                    *(_QWORD *)(v166 + 64) = v168;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v166 + 80) + 40))(*(_QWORD *)(v166 + 80), v165, *(_QWORD *)(v166 + 72) - v165);
                  }
                  MEMORY[0x1A1AF4E00](v166, 0x1020C4010FC18DELL);
                }
              }
              while (v6 != v141);
              goto LABEL_244;
            }
          }
        }
      }
      else
      {
        v154 = v6;
      }
      do
      {
        v155 = *--v154;
        *v154 = 0;
        *--v151 = v155;
      }
      while (v154 != v141);
      goto LABEL_234;
    }
    v145 = 0;
    v141 = 0;
LABEL_377:
    v258 = *(v776 - 1);
    v259 = *(_QWORD *)(v258 + 248);
    v260 = *(int8x16_t **)(v258 + 256);
    v261 = 126 - 2 * __clz(((uint64_t)v260->i64 - v259) >> 3);
    if (v260 == (int8x16_t *)v259)
      v262 = 0;
    else
      v262 = v261;
    std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::batch(std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v259, v260, v262, 1);
    v263 = v141;
    if (v141 == v145)
    {
      if (!v145)
        goto LABEL_4;
LABEL_3:
      operator delete(v141);
      goto LABEL_4;
    }
    do
    {
      v265 = (_QWORD *)*(v776 - 1);
      v266 = *v263;
      *v263 = 0;
      *(_QWORD *)v807 = v266;
      v268 = (uint64_t *)v265[32];
      v267 = v265[33];
      if ((unint64_t)v268 < v267)
      {
        *(_QWORD *)v807 = 0;
        *v268 = v266;
        v6 = v268 + 1;
        goto LABEL_427;
      }
      v798 = v263;
      v269 = v265[31];
      v7 = (uint64_t)v268 - v269;
      v270 = ((uint64_t)v268 - v269) >> 3;
      if ((unint64_t)(v270 + 1) >> 61)
        abort();
      v271 = v267 - v269;
      v272 = v271 >> 2;
      if (v271 >> 2 <= (unint64_t)(v270 + 1))
        v272 = v270 + 1;
      if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFF8)
        v273 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v273 = v272;
      if (v273)
      {
        if (v273 >> 61)
          goto LABEL_818;
        v274 = (char *)operator new(8 * v273);
      }
      else
      {
        v274 = 0;
      }
      v275 = &v274[8 * v270];
      v276 = &v274[8 * v273];
      *(_QWORD *)v807 = 0;
      *(_QWORD *)v275 = v266;
      v6 = (uint64_t *)(v275 + 8);
      v277 = (char *)v265[31];
      v278 = (char *)v265[32];
      if (v278 == v277)
      {
        v265[31] = v275;
        v265[32] = v6;
        v265[33] = v276;
        if (v278)
          goto LABEL_426;
      }
      else
      {
        v279 = v278 - v277 - 8;
        if (v279 <= 0x77)
          goto LABEL_830;
        if (&v278[-(v279 & 0xFFFFFFFFFFFFFFF8) - 8] < v275 && &v274[v7 - (v279 & 0xFFFFFFFFFFFFFFF8) - 8] < v278)
          goto LABEL_830;
        v281 = (v279 >> 3) + 1;
        v282 = &v274[8 * v270 - 16];
        v283 = v278 - 32;
        v284 = v281 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v286 = *(_OWORD *)v283;
          v285 = *((_OWORD *)v283 + 1);
          *(_OWORD *)v283 = 0uLL;
          *((_OWORD *)v283 + 1) = 0uLL;
          v283 -= 32;
          *((_OWORD *)v282 - 1) = v286;
          *(_OWORD *)v282 = v285;
          v282 -= 32;
          v284 -= 4;
        }
        while (v284);
        v275 -= 8 * (v281 & 0x3FFFFFFFFFFFFFFCLL);
        v278 -= 8 * (v281 & 0x3FFFFFFFFFFFFFFCLL);
        if (v281 != (v281 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_830:
          do
          {
            v287 = *((_QWORD *)v278 - 1);
            v278 -= 8;
            *(_QWORD *)v278 = 0;
            *((_QWORD *)v275 - 1) = v287;
            v275 -= 8;
          }
          while (v278 != v277);
        }
        v278 = (char *)v265[31];
        v288 = (char *)v265[32];
        v265[31] = v275;
        v265[32] = v6;
        v265[33] = v276;
        while (v288 != v278)
        {
          v291 = *((_QWORD *)v288 - 1);
          v288 -= 8;
          v290 = v291;
          *(_QWORD *)v288 = 0;
          if (v291)
          {
            v292 = *(_QWORD **)(v290 + 56);
            if (v292)
            {
              v293 = v141;
              v294 = *(_QWORD **)(v290 + 64);
              v289 = *(_QWORD *)(v290 + 56);
              if (v294 != v292)
              {
                do
                {
                  v295 = *--v294;
                  v7 = v295;
                  *v294 = 0;
                  if (v295)
                  {
                    (**(void (***)(uint64_t, uint64_t))v7)(v7, v289);
                    if ((v296 & 1) == 0
                    {
                      v297 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v297, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, v7, 128);
                  }
                }
                while (v294 != v292);
                v289 = *(_QWORD *)(v290 + 56);
              }
              *(_QWORD *)(v290 + 64) = v292;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v290 + 80) + 40))(*(_QWORD *)(v290 + 80), v289, *(_QWORD *)(v290 + 72) - v289);
              v141 = v293;
            }
            MEMORY[0x1A1AF4E00](v290, 0x1020C4010FC18DELL);
          }
        }
        v9 = v782;
        v263 = v798;
        if (v278)
LABEL_426:
          operator delete(v278);
      }
LABEL_427:
      v265[32] = v6;
      v298 = *(_QWORD *)v807;
      *(_QWORD *)v807 = 0;
      if (v298)
      {
        v299 = *(uint64_t **)(v298 + 56);
        if (v299)
        {
          v6 = *(uint64_t **)(v298 + 64);
          v264 = *(_QWORD *)(v298 + 56);
          if (v6 != v299)
          {
            do
            {
              v301 = (void (***)(_QWORD, uint64_t))*--v6;
              v300 = v301;
              *v6 = 0;
              if (v301)
              {
                (**v300)(v300, v264);
                {
                  v303 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v303, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v300, 128);
              }
            }
            while (v6 != v299);
            v264 = *(_QWORD *)(v298 + 56);
          }
          *(_QWORD *)(v298 + 64) = v299;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v298 + 80) + 40))(*(_QWORD *)(v298 + 80), v264, *(_QWORD *)(v298 + 72) - v264);
        }
        MEMORY[0x1A1AF4E00](v298, 0x1020C4010FC18DELL);
      }
      ++v263;
    }
    while (v263 != v145);
    if (v141)
    {
      do
      {
        v306 = *--v145;
        v305 = v306;
        *v145 = 0;
        if (v306)
        {
          v307 = *(_QWORD **)(v305 + 56);
          if (v307)
          {
            v308 = *(_QWORD **)(v305 + 64);
            v304 = *(_QWORD *)(v305 + 56);
            if (v308 != v307)
            {
              do
              {
                v310 = (void (***)(_QWORD, uint64_t))*--v308;
                v309 = v310;
                *v308 = 0;
                if (v310)
                {
                  (**v309)(v309, v304);
                  if ((v311 & 1) == 0
                  {
                    v312 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v312, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v309, 128);
                }
              }
              while (v308 != v307);
              v304 = *(_QWORD *)(v305 + 56);
            }
            *(_QWORD *)(v305 + 64) = v307;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v305 + 80) + 40))(*(_QWORD *)(v305 + 80), v304, *(_QWORD *)(v305 + 72) - v304);
          }
          MEMORY[0x1A1AF4E00](v305, 0x1020C4010FC18DELL);
        }
      }
      while (v145 != v141);
      goto LABEL_3;
    }
LABEL_4:
    std::__hash_table<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,geo::StdAllocator<std::__hash_value_type<unsigned int,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>>,mdm::Allocator>>::~__hash_table((uint64_t *)&v810);
    v10 = a1;
    v766 = (uint64_t *)*v766;
    if (v766)
      continue;
    break;
  }
LABEL_475:
  v323 = a6[24];
  if (a6[24])
  {
    LOBYTE(v6) = a6[1];
    v324 = *a6;
    v8 = *(_QWORD *)(a6 + 4);
  }
  else
  {
    v324 = 0;
  }
  *(_QWORD *)v10 = &off_1E42AF468;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  v325 = (char *)v776 - (char *)v9;
  if (v776 == v9)
  {
    v756 = 0;
    v328 = 0;
  }
  else
  {
    if (v325 < 0)
      abort();
    v326 = operator new((char *)v776 - (char *)v9);
    *(_QWORD *)(v10 + 8) = v326;
    *(_QWORD *)(v10 + 16) = v326;
    v327 = (char *)&v326[v325 >> 3];
    *(_QWORD *)(v10 + 24) = v327;
    v328 = v326;
    memcpy(v326, v9, v325);
    v756 = v327;
    *(_QWORD *)(v10 + 16) = v327;
  }
  *(_OWORD *)(v10 + 32) = 0u;
  *(_QWORD *)(v10 + 72) = 0;
  v761 = (gdc::GlobeTileGrid **)(v10 + 72);
  *(_BYTE *)(v10 + 80) = 0;
  *(_BYTE *)(v10 + 104) = 0;
  *(_OWORD *)(v10 + 48) = 0u;
  v753 = (void **)(v10 + 32);
  *(_BYTE *)(v10 + 64) = 0;
  if (v323)
  {
    *(_BYTE *)(v10 + 80) = v324;
    *(_BYTE *)(v10 + 81) = (_BYTE)v6;
    *(_QWORD *)(v10 + 84) = v8;
    *(_BYTE *)(v10 + 104) = 1;
  }
  v329 = &off_19FFB1000;
  if (v328 == v756)
  {
    v330 = 0;
    v421 = 0;
    goto LABEL_585;
  }
  v751 = (const QuadTile *)(v10 + 80);
  v330 = 0;
  v331 = 0;
  v773 = 0;
  while (2)
  {
    v332 = (_QWORD *)*v328;
    v332[1] = v10;
    v334 = (_QWORD **)v332[31];
    v333 = (_QWORD **)v332[32];
    v764 = v328;
    v767 = v333;
LABEL_490:
    if (v334 != v333)
    {
      v336 = *v334;
      v336[1] = **v334;
      v336[3] = v336[2];
      v336[5] = v336[4];
      v810 = 0uLL;
      v811 = 0;
      memset(&__p, 0, sizeof(__p));
      v337 = (_QWORD **)v336[7];
      v785 = v330;
      v790 = (_QWORD **)v336[8];
      v780 = v331;
      if (v337 == v790)
        goto LABEL_531;
      v770 = v334;
      v777 = v336;
LABEL_497:
      v342 = *v337;
      *(_QWORD *)v807 = 1;
      md::Ribbons::RibbonWriter<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::eliminateDuplicates((uint64_t)v342, (uint64_t)&v810, &__p, (uint64_t *)v807);
      v343 = *(_QWORD *)v807;
      v344 = *(_QWORD *)v807 - 2;
      if (*(_QWORD *)v807 < 2uLL)
        goto LABEL_496;
      v345 = v810.n128_u64[0];
      v346 = (float *)(v810.n128_u64[0] + 12);
      v347 = *(float *)v810.n128_u64[0];
      v348 = 1;
      while (1)
      {
        if (vabds_f32(*v346, v347) >= 1.0e-10)
        {
          v353 = v346[1] - *(float *)(v810.n128_u64[0] + 4);
          goto LABEL_505;
        }
        v349 = *(float *)(v810.n128_u64[0] + 4);
        v350 = v346[1];
        if (vabds_f32(v350, v349) >= 1.0e-10)
          break;
        ++v348;
        v346 += 3;
        if (*(_QWORD *)v807 == v348)
        {
          v351 = 0.0;
          v352 = 1.0;
          goto LABEL_506;
        }
      }
      v353 = v350 - v349;
LABEL_505:
      v354 = *v346 - v347;
      v355 = 1.0 / sqrtf((float)(v354 * v354) + (float)(v353 * v353));
      v352 = v355 * v354;
      v351 = v355 * v353;
LABEL_506:
      v356 = *(_QWORD *)v807 - 1;
      if ((unint64_t)(*(_QWORD *)v807 - 1) < 2)
      {
        v338 = 4;
        goto LABEL_494;
      }
      v357 = (float *)(v810.n128_u64[0] + 28);
      v358 = 1;
      v359 = 2;
      v360 = v352;
      v361 = v351;
      while (1)
      {
        v362 = v358 + 1;
        if (v358 + 1 < v343)
        {
          v363 = (float *)(v345 + 12 * v358);
          v364 = *v363;
          v365 = v363[1];
          v366 = v357;
          v367 = v344;
          do
          {
            v368 = *(v366 - 1);
            v369 = vabds_f32(*v366, v365);
            v370 = vabds_f32(v368, v364) < 1.0e-10 && v369 < 1.0e-10;
            if (!v370)
            {
              v371 = v368 - v364;
              v372 = *v366 - v365;
              v373 = 1.0 / sqrtf((float)(v371 * v371) + (float)(v372 * v372));
              v360 = v373 * v371;
              v361 = v373 * v372;
              goto LABEL_519;
            }
            v366 += 3;
            --v367;
          }
          while (v367);
          v360 = v352;
          v361 = v351;
        }
LABEL_519:
        v374 = atan2f(v361, v360);
        v375 = v374 - atan2f(v351, v352);
        v376 = v375;
        if (v375 > 3.14159265)
          break;
        if (v376 < -3.14159265)
        {
          v377 = 6.28318531;
          goto LABEL_523;
        }
LABEL_524:
        v378 = fabsf(v375);
        v379 = (unint64_t)fmaxf(ceilf(v378 * 5.7296), 1.0);
        if (v379 < 2)
          v359 += 2;
        else
          v359 += 4 * (v378 < 1.5708) + 2 * v379;
        --v344;
        v357 += 3;
        v358 = v362;
        v351 = v361;
        v352 = v360;
        if (v362 == v356)
        {
          v338 = v359 + 2;
          v239 = (unint64_t)(v359 + 2) >= 0x10000;
          v336 = v777;
          v331 = v780;
          if (v239)
          {
            v342[2] = v342[1];
            v340 = v342[3];
          }
          else
          {
LABEL_494:
            v339 = 3 * v338 + v342[3];
            v342[2] = v342[1] + v338;
            v340 = v339 - 6;
          }
          v329 = &off_19FFB1000;
          v330 = v785;
          v342[4] = v340;
          v342[6] = v342[5];
LABEL_496:
          v341 = *v337++;
          v336[1] = v341[2] + v336[1] - v341[1];
          v336[3] = v341[4] + v336[3] - v341[3];
          v336[5] = v341[6] + v336[5] - v341[5];
          if (v337 != v790)
            goto LABEL_497;
          v334 = v770;
          if (__p.__begin_)
            operator delete(__p.__begin_);
LABEL_531:
          if (v810.n128_u64[0])
            operator delete((void *)v810.n128_u64[0]);
          v380 = *v334;
          v10 = a1;
          if (v331 < v773)
          {
            *(_QWORD *)v331 = v380;
            v335 = v331 + 8;
          }
          else
          {
            v381 = v334;
            v382 = v330;
            v383 = v331 - v330;
            v384 = v383 >> 3;
            v385 = (v383 >> 3) + 1;
            if (v385 >> 61)
              abort();
            v386 = v773 - v382;
            v387 = (v773 - v382) >> 2;
            if (v387 > v385)
              v385 = v387;
            if (v386 >= 0x7FFFFFFFFFFFFFF8)
              v388 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v388 = v385;
            if (v388)
            {
              if (!(v388 >> 61))
              {
                v389 = (char *)operator new(8 * v388);
                goto LABEL_544;
              }
LABEL_818:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v389 = 0;
LABEL_544:
            v390 = &v389[8 * v384];
            *(_QWORD *)v390 = v380;
            v335 = v390 + 8;
            v391 = v785;
            if (v780 == v785)
            {
              v334 = v381;
            }
            else
            {
              v392 = v780 - 8 - v785;
              if (v392 < 0x168)
              {
                v393 = v780;
                goto LABEL_552;
              }
              if (&v389[v383 - 8 - (v392 & 0xFFFFFFFFFFFFFFF8)] <= &v389[v383 - 8]
                && &v780[-(v392 & 0xFFFFFFFFFFFFFFF8) - 8] <= v780 - 8
                && (unint64_t)(v780 - &v389[v383]) >= 0x20)
              {
                v395 = (v392 >> 3) + 1;
                v393 = &v780[-8 * (v395 & 0x3FFFFFFFFFFFFFFCLL)];
                v396 = &v389[8 * v384 - 16];
                v397 = v780 - 16;
                v398 = v395 & 0x3FFFFFFFFFFFFFFCLL;
                v391 = v785;
                do
                {
                  v399 = *(_OWORD *)v397;
                  *((_OWORD *)v396 - 1) = *((_OWORD *)v397 - 1);
                  *(_OWORD *)v396 = v399;
                  v396 -= 32;
                  v397 -= 32;
                  v398 -= 4;
                }
                while (v398);
                v390 -= 8 * (v395 & 0x3FFFFFFFFFFFFFFCLL);
                v334 = v381;
                if (v395 != (v395 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_553;
              }
              else
              {
                v393 = v780;
LABEL_552:
                v391 = v785;
                v334 = v381;
                do
                {
LABEL_553:
                  v394 = *((_QWORD *)v393 - 1);
                  v393 -= 8;
                  *((_QWORD *)v390 - 1) = v394;
                  v390 -= 8;
                }
                while (v393 != v391);
              }
            }
            v773 = &v389[8 * v388];
            if (v391)
              operator delete(v391);
            v330 = v390;
          }
          ++v334;
          v331 = v335;
          v333 = v767;
          goto LABEL_490;
        }
      }
      v377 = -6.28318531;
LABEL_523:
      v375 = v376 + v377;
      goto LABEL_524;
    }
    v328 = v764 + 1;
    if (v764 + 1 != v756)
      continue;
    break;
  }
  if (!*(_BYTE *)(v10 + 64))
    goto LABEL_584;
  v400 = (gdc::GlobeTileGrid *)operator new();
  v401 = v400;
  v402 = v330;
  if (*(_BYTE *)(v10 + 104))
  {
    gdc::GlobeTileGrid::GlobeTileGrid(v400, v751);
    v403 = *v761;
    *v761 = v401;
    if (v403)
    {
      v404 = *((_QWORD *)v403 + 323);
      if (v404)
        MEMORY[0x1A1AF4DE8](v404, 0x1000C8000313F17);
      MEMORY[0x1A1AF4E00](v403, 0x1020C4007FF0C4BLL);
      v401 = *v761;
    }
    v330 = v402;
    *((_QWORD *)v401 + 323) = operator new[]();
    if (v402 != v331)
    {
      v405 = v402;
      do
      {
        v406 = *(uint64_t **)(*(_QWORD *)v405 + 56);
        v407 = *(uint64_t **)(*(_QWORD *)v405 + 64);
        while (v406 != v407)
        {
          v408 = *v406;
          if (!*(_QWORD *)(*v406 + 80))
          {
            v409 = *(_QWORD *)(v408 + 88);
            if (v409)
            {
              v410 = *(_QWORD *)(v408 + 72);
              v411 = *v761;
              v412 = *((_QWORD *)*v761 + 323);
              v413 = (float *)(v410 + 4);
              v414 = 1;
              do
              {
                v415 = *((float *)v411 + 648) * v413[1];
                v416 = vcvts_n_u32_f32(*(v413 - 1), 2uLL);
                if (v416 >= 3)
                  v416 = 3;
                v417 = vcvts_n_u32_f32(*v413, 2uLL);
                if (v417 >= 3)
                  v417 = 3;
                v418 = (float *)(v412 + 8 * (v416 | (4 * v417)));
                v419 = fminf(v415, *v418);
                v420 = fmaxf(v418[1], v415);
                *v418 = v419;
                v418[1] = v420;
                v413 += 3;
                v370 = v409 > v414++;
              }
              while (v370);
            }
          }
          ++v406;
        }
        v405 += 8;
      }
      while (v405 != v331);
    }
    gdc::GlobeTileGrid::endBuildingHeightRange(*v761);
LABEL_584:
    v421 = v331;
LABEL_585:
    v422 = 0;
    v423 = 0;
    v424 = 0;
    v425 = 0;
    v426 = (v421 - v330) >> 3;
    v786 = v330;
    v774 = v426;
    while (2)
    {
      if (v423 == v426
        || (unint64_t)(*(_QWORD *)(*(_QWORD *)&v330[8 * v423] + 8) + v425 - **(_QWORD **)&v330[8 * v423]) >= 0x10000)
      {
        v427 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v427 + 1) = 0;
        v428 = (unint64_t *)(v427 + 8);
        *((_QWORD *)v427 + 2) = 0;
        *((_QWORD *)v427 + 3) = &off_1E42B5748;
        *(_QWORD *)v427 = &off_1E42E01E0;
        *((_QWORD *)v427 + 4) = 32;
        *((_DWORD *)v427 + 10) = 1;
        *((_QWORD *)v427 + 6) = 0;
        *((_QWORD *)v427 + 7) = 0;
        *((_QWORD *)v427 + 8) = 0;
        *((_QWORD *)v427 + 9) = 32 * v425;
        v429 = 0uLL;
        *((_OWORD *)v427 + 5) = 0u;
        *((_OWORD *)v427 + 6) = 0u;
        *((_QWORD *)v427 + 14) = 0;
        if ((v430 & 1) == 0)
        {
          v429 = 0uLL;
          if (v499)
          {
            v500 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v500, "GeoGL", 0xA3D02C1100000005);
            v429 = 0uLL;
          }
        }
        *((_QWORD *)v427 + 15) = ggl::Allocator::instance(void)::alloc;
        *((_QWORD *)v427 + 16) = 0;
        *((_OWORD *)v427 + 11) = v429;
        *((_OWORD *)v427 + 12) = v429;
        *((_QWORD *)v427 + 26) = 0;
        *((_QWORD *)v427 + 27) = -1;
        *((_OWORD *)v427 + 10) = v429;
        *((_OWORD *)v427 + 9) = xmmword_19FFB2DD0;
        *((_DWORD *)v427 + 34) = 0;
        *((_QWORD *)v427 + 3) = &off_1E42B7F20;
        *((_QWORD *)v427 + 29) = "BatchType/VData";
        *((_QWORD *)v427 + 30) = &ggl::TexturedAnimatedRibbon::defaultVboReflection;
        *((_QWORD *)v427 + 28) = &unk_1E42B7F40;
        __p.__begin_ = (std::vector<unsigned int>::pointer)(v427 + 24);
        __p.__end_ = (std::vector<unsigned int>::pointer)v427;
        v431 = (std::__shared_weak_count *)operator new(0xF8uLL);
        v431->__shared_owners_ = 0;
        v432 = (unint64_t *)&v431->__shared_owners_;
        v431->__shared_weak_owners_ = 0;
        v431[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B5748;
        v431->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF1E8;
        v431[1].__shared_owners_ = 2;
        LODWORD(v431[1].__shared_weak_owners_) = 257;
        v431[2].__vftable = 0;
        v431[2].__shared_owners_ = 0;
        v431[2].__shared_weak_owners_ = 0;
        v431[3].__vftable = (std::__shared_weak_count_vtbl *)(2 * v424);
        v433 = (std::__shared_count)0;
        *(_OWORD *)&v431[3].__shared_owners_ = 0u;
        v431[4].std::__shared_count = 0u;
        v431[4].__shared_weak_owners_ = 0;
        if ((v434 & 1) == 0)
        {
          v433 = (std::__shared_count)0;
          if (v501)
          {
            v502 = operator new();
            ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v502, "GeoGL", 0xA3D02C1100000005);
            v433 = (std::__shared_count)0;
          }
        }
        v431[5].__vftable = (std::__shared_weak_count_vtbl *)ggl::Allocator::instance(void)::alloc;
        v431[5].__shared_owners_ = 0;
        *((std::__shared_count *)v431 + 11) = v433;
        v431[8].std::__shared_count = v433;
        v431[8].__shared_weak_owners_ = 0;
        v431[9].__vftable = (std::__shared_weak_count_vtbl *)-1;
        *((std::__shared_count *)v431 + 10) = v433;
        v431[6].std::__shared_count = (std::__shared_count)xmmword_19FFB2DD0;
        LODWORD(v431[5].__shared_weak_owners_) = 0;
        LODWORD(v431[10].__vftable) = 0;
        v431[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6B88;
        v431[1].__shared_owners_ = 2;
        v431[9].__shared_owners_ = (uint64_t)&unk_1E42B6BA8;
        v431[9].__shared_weak_owners_ = (uint64_t)"BatchType/IData";
        *(_QWORD *)v807 = v431 + 1;
        *(_QWORD *)&v807[8] = v431;
        v435 = operator new();
        do
          v436 = __ldxr(v428);
        while (__stxr(v436 + 1, v428));
        do
          v437 = __ldxr(v432);
        while (__stxr(v437 + 1, v432));
        if ((v438 & 1) == 0
        {
          if ((v503 & 1) == 0
          {
            ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::TexturedAnimatedRibbon::defaultVboReflection;
          }
          ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::attributesReflection(void)::r;
          unk_1ECE336A8 = 1;
        }
        *(_QWORD *)(v435 + 32) = 0;
        *(_QWORD *)(v435 + 40) = 0;
        *(_DWORD *)(v435 + 48) = 0;
        *(_QWORD *)v435 = &off_1E42BBC08;
        *(_QWORD *)(v435 + 8) = "BatchType/Mesh";
        *(_QWORD *)(v435 + 16) = &unk_1E42BBC28;
        *(_QWORD *)(v435 + 24) = 0;
        *(_QWORD *)(v435 + 56) = &ggl::MeshTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::typedReflection(void)::r;
        *(_QWORD *)(v435 + 64) = 0;
        v439 = v435 + 64;
        *(_QWORD *)(v435 + 72) = 0;
        *(_QWORD *)(v435 + 80) = 0;
        if ((v440 & 1) == 0)
        {
          v439 = v435 + 64;
          if (v504)
          {
            v505 = operator new();
            *(_QWORD *)(v505 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v505 + 24) = "GeoGL";
            *(_OWORD *)(v505 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v505 = &off_1E42B5668;
            *(_QWORD *)(v505 + 8) = "GeoGL";
            *(_OWORD *)(v505 + 72) = 0u;
            *(_OWORD *)(v505 + 88) = 0u;
            *(_OWORD *)(v505 + 104) = 0u;
            *(_OWORD *)(v505 + 120) = 0u;
            *(_OWORD *)(v505 + 136) = 0u;
            *(_OWORD *)(v505 + 152) = 0u;
            *(_OWORD *)(v505 + 168) = 0u;
            *(_OWORD *)(v505 + 184) = 0u;
            *(_OWORD *)(v505 + 200) = 0u;
            *(_OWORD *)(v505 + 216) = 0u;
            *(_OWORD *)(v505 + 232) = 0u;
            *(_QWORD *)(v505 + 248) = 0;
            *(_OWORD *)(v505 + 56) = 0u;
            v506 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v505 + 56), 0);
            if ((_DWORD)v506)
              geo::read_write_lock::logFailure(v506, (uint64_t)"initialization", v507);
            v508 = malloc_create_zone(0, 0);
            *(_QWORD *)(v505 + 48) = v508;
            malloc_set_zone_name(v508, "GeoGL");
            *(_QWORD *)(v505 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v505;
            v439 = v435 + 64;
          }
        }
        v441 = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v435 + 120) = 0;
        *(_QWORD *)(v435 + 96) = 0;
        *(_QWORD *)(v435 + 104) = 0;
        *(_QWORD *)(v435 + 88) = v441;
        if ((v441 & 1) == 0)
        {
          v768 = v439;
          v439 = v768;
          if (v509)
          {
            v510 = operator new();
            *(_QWORD *)(v510 + 16) = 0xA3D02C1100000005;
            *(_QWORD *)(v510 + 24) = "GeoGL";
            *(_OWORD *)(v510 + 32) = xmmword_19FFB2DE0;
            *(_QWORD *)v510 = &off_1E42B5668;
            *(_QWORD *)(v510 + 8) = "GeoGL";
            *(_OWORD *)(v510 + 72) = 0u;
            *(_OWORD *)(v510 + 88) = 0u;
            *(_OWORD *)(v510 + 104) = 0u;
            *(_OWORD *)(v510 + 120) = 0u;
            *(_OWORD *)(v510 + 136) = 0u;
            *(_OWORD *)(v510 + 152) = 0u;
            *(_OWORD *)(v510 + 168) = 0u;
            *(_OWORD *)(v510 + 184) = 0u;
            *(_OWORD *)(v510 + 200) = 0u;
            *(_OWORD *)(v510 + 216) = 0u;
            *(_OWORD *)(v510 + 232) = 0u;
            *(_QWORD *)(v510 + 248) = 0;
            v511 = v510;
            *(_OWORD *)(v510 + 56) = 0u;
            v512 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v510 + 56), 0);
            if ((_DWORD)v512)
              geo::read_write_lock::logFailure(v512, (uint64_t)"initialization", v513);
            v514 = malloc_create_zone(0, 0);
            *(_QWORD *)(v511 + 48) = v514;
            malloc_set_zone_name(v514, "GeoGL");
            *(_QWORD *)(v511 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            ggl::Allocator::instance(void)::alloc = v511;
            v439 = v768;
          }
        }
        *(_QWORD *)(v435 + 128) = ggl::Allocator::instance(void)::alloc;
        *(_QWORD *)(v435 + 136) = 0;
        *(_QWORD *)(v435 + 112) = v435 + 120;
        *(_QWORD *)v435 = &off_1E42BDBB8;
        *(_QWORD *)(v435 + 16) = &unk_1E42BDBD8;
        v810.n128_u64[0] = (unint64_t)(v427 + 24);
        v810.n128_u64[1] = (unint64_t)v427;
        do
          v442 = __ldxr(v428);
        while (__stxr(v442 + 1, v428));
        std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>(v439, (uint64_t *)&v810, &v811, 1uLL);
        v443 = (std::__shared_weak_count *)v810.n128_u64[1];
        v10 = a1;
        if (v810.n128_u64[1])
        {
          v444 = (unint64_t *)(v810.n128_u64[1] + 8);
          do
            v445 = __ldaxr(v444);
          while (__stlxr(v445 - 1, v444));
          if (!v445)
          {
            ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
            std::__shared_weak_count::__release_weak(v443);
          }
        }
        do
          v446 = __ldxr(v432);
        while (__stxr(v446 + 1, v432));
        v447 = *(std::__shared_weak_count **)(v435 + 104);
        *(_QWORD *)(v435 + 96) = v431 + 1;
        *(_QWORD *)(v435 + 104) = v431;
        if (v447)
        {
          v448 = (unint64_t *)&v447->__shared_owners_;
          do
            v449 = __ldaxr(v448);
          while (__stlxr(v449 - 1, v448));
          if (!v449)
          {
            ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
            std::__shared_weak_count::__release_weak(v447);
          }
        }
        *(_QWORD *)v435 = &off_1E42BB050;
        *(_QWORD *)(v435 + 16) = &unk_1E42BB070;
        do
          v450 = __ldaxr(v432);
        while (__stlxr(v450 - 1, v432));
        if (!v450)
        {
          ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
          std::__shared_weak_count::__release_weak(v431);
        }
        do
          v451 = __ldaxr(v428);
        while (__stlxr(v451 - 1, v428));
        if (!v451)
        {
          (*(void (**)(char *))(*(_QWORD *)v427 + 16))(v427);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v427);
        }
        v453 = *(uint64_t **)(a1 + 40);
        v452 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v453 < v452)
        {
          *v453 = v435;
          v454 = v453 + 1;
          goto LABEL_641;
        }
        v455 = (uint64_t *)*v753;
        v456 = (char *)v453 - (_BYTE *)*v753;
        v457 = v456 >> 3;
        v458 = (v456 >> 3) + 1;
        if (v458 >> 61)
          abort();
        v459 = v452 - (_QWORD)v455;
        if (v459 >> 2 > v458)
          v458 = v459 >> 2;
        if ((unint64_t)v459 >= 0x7FFFFFFFFFFFFFF8)
          v460 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v460 = v458;
        if (v460)
        {
          if (v460 >> 61)
            goto LABEL_818;
          v461 = operator new(8 * v460);
        }
        else
        {
          v461 = 0;
        }
        v462 = (uint64_t *)&v461[8 * v457];
        *v462 = v435;
        v454 = v462 + 1;
        if (v453 == v455)
        {
          v455 = v453;
          v10 = a1;
        }
        else
        {
          v463 = (char *)(v453 - 1) - (char *)v455;
          if (v463 >= 0x58)
          {
            v464 = (char *)v453 - &v461[v456];
            v10 = a1;
            if (v464 < 0x20)
              goto LABEL_637;
            v465 = (v463 >> 3) + 1;
            v466 = &v461[8 * v457 - 16];
            v467 = v453 - 2;
            v468 = v465 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v469 = *(_OWORD *)v467;
              *(v466 - 1) = *((_OWORD *)v467 - 1);
              *v466 = v469;
              v466 -= 2;
              v467 -= 4;
              v468 -= 4;
            }
            while (v468);
            v462 -= v465 & 0x3FFFFFFFFFFFFFFCLL;
            v453 -= v465 & 0x3FFFFFFFFFFFFFFCLL;
            if (v465 != (v465 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_637;
          }
          else
          {
            v10 = a1;
            do
            {
LABEL_637:
              v470 = *--v453;
              *--v462 = v470;
            }
            while (v453 != v455);
            v455 = (uint64_t *)*v753;
          }
        }
        *(_QWORD *)(v10 + 32) = v462;
        *(_QWORD *)(v10 + 40) = v454;
        *(_QWORD *)(v10 + 48) = &v461[8 * v460];
        if (v455)
          operator delete(v455);
LABEL_641:
        *(_QWORD *)(v10 + 40) = v454;
        v330 = v786;
        if (v422 < v423)
        {
          v471 = 0;
          v472 = v422;
          do
          {
            v473 = *(_QWORD *)&v786[8 * v472];
            v474 = *(_QWORD *)(v473 + 32);
            v475 = v474 + v471;
            v476 = *(_QWORD *)(v473 + 40) + v471;
            *(_QWORD *)(v473 + 32) = v475;
            *(_QWORD *)(v473 + 40) = v476;
            v471 = v476 - v474;
            ++v472;
          }
          while (v423 != v472);
          v477 = 0;
          do
          {
            v478 = *(uint64_t **)&v786[8 * v422];
            v479 = *v478;
            v480 = *v478 + v477;
            v481 = v478[1] + v477;
            *v478 = v480;
            v478[1] = v481;
            v482 = v478[2];
            v483 = v482 + v471;
            v484 = v478[3] + v471;
            v478[2] = v483;
            v478[3] = v484;
            v478[11] = v435;
            v485 = (_QWORD *)v478[7];
            v486 = (_QWORD *)v478[8];
            if (v485 != v486)
            {
              v487 = v478[4];
              do
              {
                v488 = (_QWORD *)*v485++;
                v489 = v488[2] - v488[1];
                v488[1] = v480;
                v480 += v489;
                v490 = v488[4] - v488[3];
                v488[2] = v480;
                v488[3] = v483;
                v483 += v490;
                v491 = v488[6] - v488[5];
                v488[4] = v483;
                v488[5] = v487;
                v487 += v491;
                v488[6] = v487;
              }
              while (v485 != v486);
            }
            v477 = v481 - v479;
            v471 = v484 - v482;
            ++v422;
          }
          while (v422 != v423);
        }
        v492 = *(std::__shared_weak_count **)&v807[8];
        v329 = &off_19FFB1000;
        if (!*(_QWORD *)&v807[8])
          goto LABEL_654;
        v493 = (unint64_t *)(*(_QWORD *)&v807[8] + 8);
        do
          v494 = __ldaxr(v493);
        while (__stlxr(v494 - 1, v493));
        if (!v494)
        {
          ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
          std::__shared_weak_count::__release_weak(v492);
          end = (std::__shared_weak_count *)__p.__end_;
          if (__p.__end_)
          {
LABEL_655:
            v496 = (unint64_t *)&end->__shared_owners_;
            do
              v497 = __ldaxr(v496);
            while (__stlxr(v497 - 1, v496));
            if (!v497)
            {
              ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
              std::__shared_weak_count::__release_weak(end);
            }
          }
        }
        else
        {
LABEL_654:
          end = (std::__shared_weak_count *)__p.__end_;
          if (__p.__end_)
            goto LABEL_655;
        }
        v425 = 0;
        v424 = 0;
        v422 = v423;
        v426 = v774;
      }
      if (v423 < v426)
      {
        v498 = *(_QWORD **)&v330[8 * v423];
        v425 = v498[1] + v425 - *v498;
        v424 = v498[3] + v424 + v498[5] - (v498[2] + v498[4]);
      }
      if (++v423 <= v426)
        continue;
      break;
    }
    if (v330)
      operator delete(v330);
    if (v9)
      operator delete(v9);
    *(_QWORD *)v10 = &off_1E428C940;
    *(_QWORD *)(v10 + 112) = *a4;
    v515 = a4[1];
    *(_QWORD *)(v10 + 120) = v515;
    if (v515)
    {
      v516 = (unint64_t *)(v515 + 8);
      do
        v517 = __ldxr(v516);
      while (__stxr(v517 + 1, v516));
    }
    *(_QWORD *)(v10 + 128) = *a5;
    v518 = a5[1];
    *(_QWORD *)(v10 + 136) = v518;
    v519 = &off_19FFB1000;
    if (v518)
    {
      v520 = (unint64_t *)(v518 + 8);
      do
        v521 = __ldxr(v520);
      while (__stxr(v521 + 1, v520));
    }
    *(_QWORD *)(v10 + 144) = 0;
    v522 = *(uint64_t **)(v10 + 8);
    v730 = *(uint64_t **)(v10 + 16);
    if (v522 != v730)
    {
      v523 = 1.0;
      v524 = (float32x2_t)vdup_n_s32(0x2EDBE6FFu);
      v743 = v524;
      do
      {
        v731 = v522;
        v525 = *v522;
        v527 = *(uint64_t ***)(*v522 + 248);
        v526 = *(uint64_t ***)(v525 + 256);
        v732 = v526;
        while (v527 != v526)
        {
          v528 = 0;
          v736 = v527;
          v529 = *v527;
          v530 = **(_QWORD **)((*v527)[11] + 64);
          v531 = **v527;
          v532 = (*v527)[1];
          v810 = 0uLL;
          v533 = *(_QWORD *)(v530 + 8);
          v534 = v533 * v531;
          v535 = v533 * v532;
          v739 = v533 * v532;
          if (v533 * v532 != v533 * v531)
          {
            if (a2 && *(_BYTE *)(v530 + 17) != 2)
            {
              v528 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v530, v534);
              v535 = v739;
            }
            else
            {
              v528 = *(_QWORD *)(v530 + 72) + v534;
            }
          }
          v536.n128_u64[0] = a2;
          v536.n128_u64[1] = v530;
          v741 = v536;
          v810 = v536;
          v735 = v534;
          v811 = v534;
          v812 = v535;
          v742 = v528;
          v814 = v528;
          LOWORD(v813) = 257;
          v537 = v529[2];
          v539 = v529[4];
          v538 = v529[5];
          if (v538 == v539)
          {
            v538 = v529[3];
          }
          else
          {
            if (v539 < v537)
              v537 = v529[4];
            if (v529[3] > v538)
              v538 = v529[3];
          }
          v540 = 0;
          v541 = *(_QWORD *)(v529[11] + 96);
          __p.__end_ = 0;
          __p.__begin_ = 0;
          v542 = *(_QWORD *)(v541 + 8);
          v543 = (unsigned int *)(v542 * v537);
          v544 = (unsigned int *)(v542 * v538);
          v737 = (unsigned int *)(v542 * v538);
          v738 = (unsigned int *)(v542 * v537);
          if (v542 * v538 != v542 * v537)
          {
            if (a2 && *(_BYTE *)(v541 + 17) != 2)
            {
              v540 = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)a2 + 56))(a2, v541);
              v544 = v737;
              v543 = v738;
            }
            else
            {
              v540 = (uint64_t)v543 + *(_QWORD *)(v541 + 72);
            }
          }
          v545.n128_u64[0] = a2;
          v545.n128_u64[1] = v541;
          v740 = v545;
          *(__n128 *)&__p.__begin_ = v545;
          __p.__end_cap_.__value_ = v543;
          v802 = v544;
          v804 = v540;
          v803 = 257;
          v546 = v529[2];
          v547 = v529[4];
          memset(v800, 0, sizeof(v800));
          memset(&v799, 0, sizeof(v799));
          v548 = (uint64_t *)v529[7];
          v549 = (uint64_t *)v529[8];
          v550 = v540;
          if (v548 != v549)
          {
            v551 = v540 + 2 * v547 - 2 * v537;
            v733 = v540;
            v552 = v540 + 2 * v546 - 2 * v537;
            v750 = v742;
            v744 = v549;
            while (1)
            {
              v554 = *v548;
              v555 = *(_QWORD *)(*v548 + 16);
              if (v555 != *(_QWORD *)(*v548 + 8))
                break;
              v553 = *(_QWORD *)(*v548 + 16);
LABEL_715:
              v750 += 32 * (v553 - v555);
              v552 += 2 * (*(_QWORD *)(v554 + 32) - *(_QWORD *)(v554 + 24));
              v551 += 2 * (*(_QWORD *)(v554 + 48) - *(_QWORD *)(v554 + 40));
              if (++v548 == v549)
              {
                v550 = v733;
                if (v799.__begin_)
                  operator delete(v799.__begin_);
                goto LABEL_803;
              }
            }
            v809 = 1;
            md::Ribbons::RibbonWriter<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::eliminateDuplicates(v554, (uint64_t)v800, &v799, (uint64_t *)&v809);
            v557 = v809;
            if (v809 >= 2)
            {
              v749 = v809 - 2;
              v558 = (char *)v800[0];
              v559 = *(float32x2_t *)v800[0];
              if (v809 >= 0xA)
              {
                v563 = (v809 - 1) & 7;
                if (!v563)
                  v563 = 8;
                v560 = v809 - 1 - v563;
                v556.i64[1] = *(_QWORD *)v800[0];
                v564 = (int8x16_t)vdupq_lane_s32((int32x2_t)v559, 0);
                v565 = (int32x4_t *)((char *)v800[0] + 60);
                v566 = 0uLL;
                v567 = v560;
                v568 = 0uLL;
                do
                {
                  i32 = (const float *)v565[-3].i32;
                  v818 = vld3q_f32(i32);
                  v571 = v565[1];
                  v570 = v565[2];
                  v572 = *v565;
                  v565 += 6;
                  v573.i64[0] = __PAIR64__(v572.u32[3], v572.u32[0]);
                  v574 = (float32x4_t)vrev64q_s32(v571);
                  v574.i32[0] = v572.i32[1];
                  v573.i64[1] = __PAIR64__(v570.u32[1], v571.u32[2]);
                  v574.i32[3] = v570.i32[2];
                  v575 = vsubq_f32(v818.val[0], (float32x4_t)vextq_s8(v564, (int8x16_t)v818.val[0], 0xCuLL));
                  v576 = vsubq_f32((float32x4_t)v573, (float32x4_t)vextq_s8((int8x16_t)v818.val[0], v573, 0xCuLL));
                  v577 = vsubq_f32(v818.val[1], (float32x4_t)vextq_s8(v556, (int8x16_t)v818.val[1], 0xCuLL));
                  v818.val[0] = vsubq_f32(v574, (float32x4_t)vextq_s8((int8x16_t)v818.val[1], (int8x16_t)v574, 0xCuLL));
                  v566 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v575, v575), v577, v577)), v566);
                  v568 = vaddq_f32(vsqrtq_f32(vmlaq_f32(vmulq_f32(v576, v576), v818.val[0], v818.val[0])), v568);
                  v556 = (int8x16_t)v574;
                  v564 = v573;
                  v567 -= 8;
                }
                while (v567);
                v562 = *(float32x2_t *)((char *)v570.i64 + 4);
                v578 = vaddq_f32(v568, v566);
                v561 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v578, v578));
              }
              else
              {
                v560 = 0;
                v561 = 0.0;
                v562 = *(float32x2_t *)v800[0];
              }
              v769 = v799.__begin_;
              v579 = v560 + 1;
              v580 = (char *)v800[0] + 12 * v560 + 12;
              do
              {
                v581 = *(float32x2_t *)v580;
                v580 = (_QWORD *)((char *)v580 + 12);
                v582 = vsub_f32(v581, v562);
                v561 = sqrtf(vaddv_f32(vmul_f32(v582, v582))) + v561;
                ++v579;
                v562 = v581;
              }
              while (v809 != v579);
              v583 = v561;
              v584 = v523 / v561;
              if (v583 <= 1.0e-10)
                v584 = 0.0;
              v762 = v584;
              v585 = (float32x2_t *)((char *)v800[0] + 12);
              v586 = sqrtf((float)((float)(*((float *)v800[0] + 3) - v559.f32[0])* (float)(*((float *)v800[0] + 3) - v559.f32[0]))+ (float)((float)(*((float *)v800[0] + 4) - v559.f32[1])* (float)(*((float *)v800[0] + 4) - v559.f32[1])));
              v587 = 1;
              v746 = (_WORD *)v552;
              v747 = (__int16 *)v551;
              while (1)
              {
                v588 = vcgt_f32(v524, vabd_f32(*v585, v559));
                if ((v588.i32[0] & v588.i32[1] & 1) == 0)
                  break;
                ++v587;
                v585 = (float32x2_t *)((char *)v585 + 12);
                if (v809 == v587)
                {
                  v589 = (float32x2_t)1065353216;
                  goto LABEL_734;
                }
              }
              v590 = vsub_f32(*v585, v559);
              v589 = vmul_n_f32(v590, v523 / sqrtf(vaddv_f32(vmul_f32(v590, v590))));
LABEL_734:
              v748 = v548;
              v591 = *v799.__begin_;
              v592 = *((_DWORD *)v800[0] + 2);
              v806 = 0;
              v808 = v589.f32[0];
              *(float32x2_t *)&v807[4] = v589;
              v593 = vneg_f32(v589);
              *(_DWORD *)v807 = v593.i32[1];
              *(float32x2_t *)&v807[12] = v593;
              v805 = xmmword_19FFB2FB0;
              *(float32x2_t *)v750 = v559;
              *(_DWORD *)(v750 + 8) = v592;
              v594.i64[0] = *(_QWORD *)v807;
              v594.i64[1] = 0xBF80000000000000;
              v595.i64[0] = 0xBF000000BF000000;
              v595.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v750 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v595, (float32x4_t)xmmword_19FFB2FA0, v594)));
              *(_DWORD *)(v750 + 24) = *(_DWORD *)(v554 + 96);
              v596 = *(_QWORD *)(v554 + 104);
              v591 *= 4;
              *(_DWORD *)(v750 + 28) = *(_DWORD *)(v596 + v591);
              *(float32x2_t *)(v750 + 32) = v559;
              *(_DWORD *)(v750 + 40) = v592;
              v597.i64[0] = *(_QWORD *)&v807[8];
              v598 = *(float *)&v806;
              v597.i64[1] = *((_QWORD *)&v805 + 1);
              v594.i64[0] = 0xBF000000BF000000;
              v594.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v750 + 48) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v594, (float32x4_t)xmmword_19FFB2FA0, v597)));
              *(float *)(v750 + 56) = *(float *)(v554 + 96) + v598;
              *(_DWORD *)(v750 + 60) = *(_DWORD *)(v596 + v591);
              v599 = v750 + 64;
              v765 = v557 - 1;
              v760 = v558;
              if (v557 - 1 >= 2)
              {
                v757 = v557;
                v600 = (float *)(v558 + 28);
                v601 = v749;
                v602 = 1;
                while (1)
                {
                  v612 = &v760[12 * v602];
                  v614 = *(float *)v612;
                  v613 = *((float *)v612 + 1);
                  v615 = v602 + 1;
                  if (v602 + 1 >= v757)
                  {
LABEL_747:
                    v627 = (float32x2_t)vdup_lane_s32((int32x2_t)v589, 1);
                    v626 = (unint64_t)v589;
                    v624 = v589.f32[0];
                  }
                  else
                  {
                    v616 = v600;
                    v617 = v601;
                    while (1)
                    {
                      v618 = *(v616 - 1);
                      v619 = vabds_f32(*v616, v613);
                      if (vabds_f32(v618, v614) >= 1.0e-10 || v619 >= 1.0e-10)
                        break;
                      v616 += 3;
                      if (!--v617)
                        goto LABEL_747;
                    }
                    v621 = v618 - v614;
                    v622 = *v616 - v613;
                    v623 = v523 / sqrtf((float)(v621 * v621) + (float)(v622 * v622));
                    v624 = v623 * v621;
                    *(float *)&v625 = v623 * v622;
                    v626 = __PAIR64__(v623 * v622, LODWORD(v624));
                    v627 = (float32x2_t)__PAIR64__(v589.u32[1], v625);
                  }
                  v628 = v624 + v589.f32[0];
                  v629 = vaddv_f32(v627);
                  v630 = (float)(v628 * v628) + (float)(v629 * v629);
                  v781 = v626;
                  v771 = v589.f32[0];
                  if (v630 <= 0.0)
                  {
                    v633 = v589.f32[1];
                    v632 = v589.f32[0];
                  }
                  else
                  {
                    v631 = v523 / sqrtf(v630);
                    v632 = -(float)(v629 * v631);
                    v633 = v631 * v628;
                  }
                  v787 = v769[v602];
                  v778 = *((float *)v612 + 4);
                  v634 = v627.f32[1];
                  v635 = *((_DWORD *)v612 + 2);
                  v775 = *((float *)v612 + 3);
                  v783 = v586;
                  *(float *)&v806 = v586;
                  *((float *)&v806 + 1) = v586 * v762;
                  v805 = xmmword_19FFB2FB0;
                  *(float *)&v807[16] = v632;
                  v808 = v633;
                  v791 = v627.f32[0];
                  v794 = v624;
                  v636 = atan2f(v627.f32[0], v624);
                  v637 = v636 - atan2f(v634, v771);
                  v638 = v637;
                  v639 = *((double *)v519 + 322);
                  if (v637 <= v639)
                  {
                    if (v638 >= *((double *)v329 + 298))
                      goto LABEL_756;
                    v640 = 6.28318531;
                  }
                  else
                  {
                    v640 = -6.28318531;
                  }
                  v637 = v638 + v640;
LABEL_756:
                  v641 = sqrtf(fmaxf(-(float)((float)((float)((float)(v632 * v794) + (float)(v633 * v791))* (float)((float)(v632 * v794) + (float)(v633 * v791)))+ -1.0), 0.1));
                  v642 = v632 / v641;
                  v643 = v633 / v641;
                  v644 = fabsf(v637);
                  v645 = (unint64_t)fmaxf(ceilf(v644 * 5.7296), v523);
                  if (v645 < 2)
                  {
                    *(_QWORD *)v807 = __PAIR64__(LODWORD(v643), LODWORD(v642));
                    *(float *)&v807[8] = -v642;
                    *(float *)&v807[12] = -v643;
                    *(float *)v599 = v614;
                    *(float *)(v599 + 4) = v613;
                    *(_DWORD *)(v599 + 8) = v635;
                    v603.i64[0] = *(_QWORD *)v807;
                    v603.i64[1] = v805;
                    v604.i64[0] = 0xBF000000BF000000;
                    v604.i64[1] = 0xBF000000BF000000;
                    v605 = (float32x4_t)xmmword_19FFB2FA0;
                    *(int16x4_t *)(v599 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v604, (float32x4_t)xmmword_19FFB2FA0, v603)));
                    *(float *)(v599 + 24) = *(float *)(v554 + 96) + *(float *)&v806;
                    v606 = v787;
                    *(_DWORD *)(v599 + 28) = *(_DWORD *)(v596 + 4 * v787);
                    *(float *)(v599 + 32) = v614;
                    *(float *)(v599 + 36) = v613;
                    *(_DWORD *)(v599 + 40) = v635;
                    v607 = *(float *)&v806;
                    v608.i64[0] = *(_QWORD *)&v807[8];
                    v608.i64[1] = *((_QWORD *)&v805 + 1);
                  }
                  else
                  {
                    v772 = (float32x2_t)__PAIR64__(LODWORD(v643), LODWORD(v642));
                    v792 = v633 / v641;
                    v795 = v632 / v641;
                    v754 = *((double *)v519 + 322);
                    v752 = v644;
                    if (v644 >= 1.5708)
                    {
                      for (j = 0; j != v645; ++j)
                      {
                        v652 = __sincosf_stret((float)((float)((float)(int)j * (float)(v523 / (float)((float)v645 + -1.0))) + -0.5)* v637);
                        *(float *)&v807[16] = -(float)((float)(v633 * v652.__sinval) - (float)(v632 * v652.__cosval));
                        v808 = (float)(v632 * v652.__sinval) + (float)(v633 * v652.__cosval);
                        *(float *)v807 = *(float *)&v807[16];
                        *(float *)&v807[4] = v808;
                        *(float *)&v807[8] = -(float)((float)(v632 * v652.__cosval) - (float)(v633 * v652.__sinval));
                        *(float *)&v807[12] = -v808;
                        *(float *)v599 = v614;
                        *(float *)(v599 + 4) = v613;
                        *(_DWORD *)(v599 + 8) = v635;
                        v653.i64[0] = *(_QWORD *)v807;
                        v653.i64[1] = v805;
                        v654.i64[0] = 0xBF000000BF000000;
                        v654.i64[1] = 0xBF000000BF000000;
                        *(int16x4_t *)(v599 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v654, (float32x4_t)xmmword_19FFB2FA0, v653)));
                        *(float *)(v599 + 24) = *(float *)(v554 + 96) + *(float *)&v806;
                        *(_DWORD *)(v599 + 28) = *(_DWORD *)(v596 + 4 * v787);
                        *(float *)(v599 + 32) = v614;
                        *(float *)(v599 + 36) = v613;
                        *(_DWORD *)(v599 + 40) = v635;
                        v653.i64[0] = *(_QWORD *)&v807[8];
                        v654.i32[2] = v806;
                        v653.i64[1] = *((_QWORD *)&v805 + 1);
                        v655.i64[0] = 0xBF000000BF000000;
                        v655.i64[1] = 0xBF000000BF000000;
                        *(int16x4_t *)(v599 + 48) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v655, (float32x4_t)xmmword_19FFB2FA0, v653)));
                        *(float *)(v599 + 56) = *(float *)(v554 + 96) + v654.f32[2];
                        *(_DWORD *)(v599 + 60) = *(_DWORD *)(v596 + 4 * v787);
                        v599 += 64;
                      }
                    }
                    else
                    {
                      if (v637 >= 0.0)
                      {
                        *(float *)v807 = v632 / v641;
                        *(float *)&v807[4] = v633 / v641;
                        v656 = v639 - v637;
                        v657 = __sincosf_stret(v656);
                        v658 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v772, v657.__sinval));
                        v659 = vmul_n_f32(v772, v657.__cosval);
                        v650.i32[0] = vsub_f32(v659, v658).u32[0];
                        v650.i32[1] = vadd_f32(v659, v658).i32[1];
                      }
                      else
                      {
                        v646 = *((double *)v329 + 298) - v637;
                        v648 = __sincosf_stret(v646);
                        v647.f32[0] = v648.__cosval;
                        v649.f32[0] = -v648.__sinval;
                        v649.i32[1] = LODWORD(v648.__sinval);
                        *(float32x2_t *)v807 = vmls_lane_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v772, v649)), v772, v647, 0);
                        v650 = vneg_f32(v772);
                      }
                      *(float32x2_t *)&v807[8] = v650;
                      *(float *)v599 = v614;
                      *(float *)(v599 + 4) = v613;
                      *(_DWORD *)(v599 + 8) = v635;
                      v660.i64[0] = *(_QWORD *)v807;
                      v660.i64[1] = v805;
                      v661.i64[0] = 0xBF000000BF000000;
                      v661.i64[1] = 0xBF000000BF000000;
                      *(int16x4_t *)(v599 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v661, (float32x4_t)xmmword_19FFB2FA0, v660)));
                      *(float *)(v599 + 24) = *(float *)(v554 + 96) + *(float *)&v806;
                      *(_DWORD *)(v599 + 28) = *(_DWORD *)(v596 + 4 * v787);
                      *(float *)(v599 + 32) = v614;
                      *(float *)(v599 + 36) = v613;
                      *(_DWORD *)(v599 + 40) = v635;
                      v660.i64[0] = *(_QWORD *)&v807[8];
                      v661.i32[2] = v806;
                      v660.i64[1] = *((_QWORD *)&v805 + 1);
                      v662.i64[0] = 0xBF000000BF000000;
                      v662.i64[1] = 0xBF000000BF000000;
                      *(int16x4_t *)(v599 + 48) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v662, (float32x4_t)xmmword_19FFB2FA0, v660)));
                      *(float *)(v599 + 56) = *(float *)(v554 + 96) + v661.f32[2];
                      *(_DWORD *)(v599 + 60) = *(_DWORD *)(v596 + 4 * v787);
                      v599 += 64;
                      v663 = v523 / (float)((float)v645 + -1.0);
                      v664 = 0;
                      if (v637 >= 0.0)
                      {
                        do
                        {
                          v670 = __sincosf_stret((float)((float)(v663 * (float)(int)v664) + -0.5) * v637);
                          *(float *)&v807[16] = -(float)((float)(v633 * v670.__sinval) - (float)(v632 * v670.__cosval));
                          v808 = (float)(v632 * v670.__sinval) + (float)(v633 * v670.__cosval);
                          *(_QWORD *)v807 = __PAIR64__(LODWORD(v792), LODWORD(v795));
                          *(float *)&v807[8] = -(float)((float)(v632 * v670.__cosval) - (float)(v633 * v670.__sinval));
                          *(float *)&v807[12] = -v808;
                          *(float *)v599 = v614;
                          *(float *)(v599 + 4) = v613;
                          *(_DWORD *)(v599 + 8) = v635;
                          v671.i64[0] = *(_QWORD *)v807;
                          v671.i64[1] = v805;
                          v672.i64[0] = 0xBF000000BF000000;
                          v672.i64[1] = 0xBF000000BF000000;
                          *(int16x4_t *)(v599 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v672, (float32x4_t)xmmword_19FFB2FA0, v671)));
                          *(float *)(v599 + 24) = *(float *)(v554 + 96) + *(float *)&v806;
                          *(_DWORD *)(v599 + 28) = *(_DWORD *)(v596 + 4 * v787);
                          *(float *)(v599 + 32) = v614;
                          *(float *)(v599 + 36) = v613;
                          *(_DWORD *)(v599 + 40) = v635;
                          v671.i64[0] = *(_QWORD *)&v807[8];
                          v672.i32[2] = v806;
                          v671.i64[1] = *((_QWORD *)&v805 + 1);
                          v673.i64[0] = 0xBF000000BF000000;
                          v673.i64[1] = 0xBF000000BF000000;
                          *(int16x4_t *)(v599 + 48) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v673, (float32x4_t)xmmword_19FFB2FA0, v671)));
                          *(float *)(v599 + 56) = *(float *)(v554 + 96) + v672.f32[2];
                          *(_DWORD *)(v599 + 60) = *(_DWORD *)(v596 + 4 * v787);
                          v599 += 64;
                          ++v664;
                        }
                        while (v645 != v664);
                      }
                      else
                      {
                        v665 = vneg_f32(v772);
                        do
                        {
                          v666 = __sincosf_stret((float)((float)(v663 * (float)(int)v664) + -0.5) * v637);
                          *(float *)&v807[16] = -(float)((float)(v633 * v666.__sinval) - (float)(v632 * v666.__cosval));
                          v808 = (float)(v632 * v666.__sinval) + (float)(v633 * v666.__cosval);
                          *(float *)v807 = *(float *)&v807[16];
                          *(float *)&v807[4] = v808;
                          *(float32x2_t *)&v807[8] = v665;
                          *(float *)v599 = v614;
                          *(float *)(v599 + 4) = v613;
                          *(_DWORD *)(v599 + 8) = v635;
                          v667.i64[0] = *(_QWORD *)v807;
                          v667.i64[1] = v805;
                          v668.i64[0] = 0xBF000000BF000000;
                          v668.i64[1] = 0xBF000000BF000000;
                          *(int16x4_t *)(v599 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v668, (float32x4_t)xmmword_19FFB2FA0, v667)));
                          *(float *)(v599 + 24) = *(float *)(v554 + 96) + *(float *)&v806;
                          *(_DWORD *)(v599 + 28) = *(_DWORD *)(v596 + 4 * v787);
                          *(float *)(v599 + 32) = v614;
                          *(float *)(v599 + 36) = v613;
                          *(_DWORD *)(v599 + 40) = v635;
                          v667.i64[0] = *(_QWORD *)&v807[8];
                          v668.i32[2] = v806;
                          v667.i64[1] = *((_QWORD *)&v805 + 1);
                          v669.i64[0] = 0xBF000000BF000000;
                          v669.i64[1] = 0xBF000000BF000000;
                          *(int16x4_t *)(v599 + 48) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v669, (float32x4_t)xmmword_19FFB2FA0, v667)));
                          *(float *)(v599 + 56) = *(float *)(v554 + 96) + v668.f32[2];
                          *(_DWORD *)(v599 + 60) = *(_DWORD *)(v596 + 4 * v787);
                          v599 += 64;
                          ++v664;
                        }
                        while (v645 != v664);
                      }
                    }
                    v523 = 1.0;
                    v519 = &off_19FFB1000;
                    v329 = &off_19FFB1000;
                    if (v752 >= 1.5708)
                    {
                      v609 = v783;
                      v610 = (float32x2_t)v781;
                      goto LABEL_738;
                    }
                    v674 = v637;
                    if (v637 >= 0.0)
                    {
                      *(float *)v807 = v795;
                      *(float *)&v807[4] = v792;
                      v680 = v674 + -3.14159265;
                      v681 = __sincosf_stret(v680);
                      v682 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v772, v681.__sinval));
                      v683 = vmul_n_f32(v772, v681.__cosval);
                      v679.i32[0] = vsub_f32(v683, v682).u32[0];
                      v679.i32[1] = vadd_f32(v683, v682).i32[1];
                    }
                    else
                    {
                      v675 = v674 + v754;
                      v677 = __sincosf_stret(v675);
                      v676.f32[0] = v677.__cosval;
                      v678.f32[0] = -v677.__sinval;
                      v678.i32[1] = LODWORD(v677.__sinval);
                      *(float32x2_t *)v807 = vmls_lane_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v772, v678)), v772, v676, 0);
                      v679 = vneg_f32(v772);
                    }
                    *(float32x2_t *)&v807[8] = v679;
                    *(float *)v599 = v614;
                    *(float *)(v599 + 4) = v613;
                    *(_DWORD *)(v599 + 8) = v635;
                    v684.i64[0] = *(_QWORD *)v807;
                    v684.i64[1] = v805;
                    v685.i64[0] = 0xBF000000BF000000;
                    v685.i64[1] = 0xBF000000BF000000;
                    v605 = (float32x4_t)xmmword_19FFB2FA0;
                    *(int16x4_t *)(v599 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v685, (float32x4_t)xmmword_19FFB2FA0, v684)));
                    *(float *)(v599 + 24) = *(float *)(v554 + 96) + *(float *)&v806;
                    v606 = v787;
                    *(_DWORD *)(v599 + 28) = *(_DWORD *)(v596 + 4 * v787);
                    *(float *)(v599 + 32) = v614;
                    *(float *)(v599 + 36) = v613;
                    *(_DWORD *)(v599 + 40) = v635;
                    v607 = *(float *)&v806;
                    v608.i64[0] = *(_QWORD *)&v807[8];
                    v608.i64[1] = *((_QWORD *)&v805 + 1);
                  }
                  v609 = v783;
                  v610 = (float32x2_t)v781;
                  v611.i64[0] = 0xBF000000BF000000;
                  v611.i64[1] = 0xBF000000BF000000;
                  *(int16x4_t *)(v599 + 48) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v611, v605, v608)));
                  *(float *)(v599 + 56) = *(float *)(v554 + 96) + v607;
                  *(_DWORD *)(v599 + 60) = *(_DWORD *)(v596 + 4 * v606);
                  v599 += 64;
LABEL_738:
                  --v601;
                  v586 = sqrtf((float)((float)(v775 - v614) * (float)(v775 - v614))+ (float)((float)(v778 - v613) * (float)(v778 - v613)))+ v609;
                  v600 += 3;
                  v589 = v610;
                  v602 = v615;
                  if (v615 == v765)
                    goto LABEL_776;
                }
              }
              v610 = v589;
LABEL_776:
              v686 = &v760[12 * v765];
              v687 = (float *)&v760[12 * v749];
              v688 = *(float *)v686;
              if (vabds_f32(*(float *)v686, *v687) >= 1.0e-10)
              {
                v690 = *((float *)v686 + 1);
                v693 = v690 - v687[1];
                v549 = v744;
                v10 = a1;
                v691.i64[0] = 0x1000100010001;
                v691.i64[1] = 0x1000100010001;
                v548 = v748;
LABEL_781:
                v694 = v688 - *v687;
                v695 = v523 / sqrtf((float)(v694 * v694) + (float)(v693 * v693));
                v610.f32[0] = v695 * v694;
                v692 = v695 * v693;
              }
              else
              {
                v689 = v687[1];
                v690 = *((float *)v686 + 1);
                v549 = v744;
                v10 = a1;
                v691.i64[0] = 0x1000100010001;
                v691.i64[1] = 0x1000100010001;
                v548 = v748;
                if (vabds_f32(v690, v689) >= 1.0e-10)
                {
                  v693 = v690 - v689;
                  goto LABEL_781;
                }
                v692 = v610.f32[1];
              }
              v524 = v743;
              v696 = -v692;
              *(float *)v807 = -v692;
              *(_DWORD *)&v807[4] = v610.i32[0];
              *(float *)&v807[8] = v692;
              *(float *)&v807[12] = -v610.f32[0];
              v697 = v769[v765];
              v698 = *((_DWORD *)v686 + 2);
              *(float *)&v807[16] = v696;
              v808 = v610.f32[0];
              *(float *)&v806 = v586;
              *((float *)&v806 + 1) = v586 * v762;
              *(float *)v599 = v688;
              *(float *)(v599 + 4) = v690;
              *(_DWORD *)(v599 + 8) = v698;
              v699.i64[0] = *(_QWORD *)v807;
              v699.i64[1] = v805;
              v700.i64[0] = 0xBF000000BF000000;
              v700.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v599 + 16) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v700, (float32x4_t)xmmword_19FFB2FA0, v699)));
              *(float *)(v599 + 24) = *(float *)(v554 + 96) + *(float *)&v806;
              *(_DWORD *)(v599 + 28) = *(_DWORD *)(v596 + 4 * v697);
              *(float *)(v599 + 32) = v688;
              v701.i64[0] = *(_QWORD *)&v807[8];
              v699.i32[2] = v806;
              v701.i64[1] = *((_QWORD *)&v805 + 1);
              *(float *)(v599 + 36) = v690;
              *(_DWORD *)(v599 + 40) = v698;
              v702.i64[0] = 0xBF000000BF000000;
              v702.i64[1] = 0xBF000000BF000000;
              *(int16x4_t *)(v599 + 48) = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v702, (float32x4_t)xmmword_19FFB2FA0, v701)));
              *(float *)(v599 + 56) = *(float *)(v554 + 96) + v699.f32[2];
              *(_DWORD *)(v599 + 60) = *(_DWORD *)(v596 + 4 * v697);
              v703 = *(_QWORD *)(v554 + 8);
              v704 = *(_QWORD *)(v554 + 16) - v703;
              v552 = (uint64_t)v746;
              v551 = (uint64_t)v747;
              if (v704 >= 4)
              {
                v705 = v704 >> 1;
                v706 = *(_QWORD *)(v554 + 8);
                v707 = (v704 >> 1) - 1;
                if (v704 >= 6)
                {
                  v710 = 0;
                  v711 = v707 & 0xFFFFFFFFFFFFFFFELL;
                  v712 = v746 + 6;
                  do
                  {
                    v713 = v703 + 2 * v710;
                    *(v712 - 6) = v713;
                    *v712 = v713 + 2;
                    *(v712 - 5) = v713 + 1;
                    v712[1] = v713 + 3;
                    *(v712 - 4) = v713 + 2;
                    v712[2] = v713 + 4;
                    *(v712 - 3) = v713 + 1;
                    v712[3] = v713 + 3;
                    *(v712 - 2) = v713 + 3;
                    v712[4] = v713 + 5;
                    v710 += 2;
                    *(v712 - 1) = v713 + 2;
                    v712[5] = v713 + 4;
                    v712 += 12;
                  }
                  while (v711 != v710);
                  if (v707 != v711)
                  {
                    v708 = v707 | 1;
                    LODWORD(v706) = 2 * (v707 & 0xFFFFFFFE) + v703;
                    v709 = &v746[6 * (v707 & 0xFFFFFFFFFFFFFFFELL)];
                    goto LABEL_789;
                  }
                }
                else
                {
                  v708 = 1;
                  v709 = v746;
LABEL_789:
                  v714 = v705 - v708;
                  do
                  {
                    *v709 = v706;
                    v715 = v706 + 1;
                    v709[1] = v706 + 1;
                    v716 = v706 + 3;
                    LODWORD(v706) = v706 + 2;
                    v709[2] = v706;
                    v709[3] = v715;
                    v709[4] = v716;
                    v709[5] = v706;
                    v709 += 6;
                    --v714;
                  }
                  while (v714);
                }
                if (*(_QWORD *)(v554 + 48) != *(_QWORD *)(v554 + 40))
                {
                  if (v704 >= 0x12)
                  {
                    v719 = v707 & 0xFFFFFFFFFFFFFFF8;
                    v720 = (int64x2_t)xmmword_19FFB3420;
                    v721 = (int64x2_t)xmmword_19FFB3430;
                    v722 = (int64x2_t)xmmword_19FFB3440;
                    v723 = (int64x2_t)xmmword_19FFB2DB0;
                    v724 = v747;
                    v725 = v707 & 0xFFFFFFFFFFFFFFF8;
                    v726 = vdupq_n_s64(v703);
                    do
                    {
                      v817.val[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v726, vaddq_s64(v723, v723)), (int32x4_t)vaddq_s64(v726, vaddq_s64(v722, v722))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v726, vaddq_s64(v721, v721)), (int32x4_t)vaddq_s64(v726, vaddq_s64(v720, v720))));
                      v817.val[0] = vaddq_s16(v817.val[1], v691);
                      vst2q_s16(v724, v817);
                      v724 += 16;
                      v817.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
                      v721 = vaddq_s64(v721, (int64x2_t)v817.val[0]);
                      v722 = vaddq_s64(v722, (int64x2_t)v817.val[0]);
                      v723 = vaddq_s64(v723, (int64x2_t)v817.val[0]);
                      v720 = vaddq_s64(v720, (int64x2_t)v817.val[0]);
                      v725 -= 8;
                    }
                    while (v725);
                    if (v707 != v719)
                    {
                      v717 = v719 | 1;
                      v718 = &v747[2 * (v707 & 0xFFFFFFFFFFFFFFF8)];
                      goto LABEL_798;
                    }
                  }
                  else
                  {
                    v717 = 1;
                    v718 = v747;
LABEL_798:
                    v727 = v705 - v717;
                    v728 = v703 + 2 * v717;
                    do
                    {
                      *v718 = v728 - 2;
                      v718[1] = v728;
                      v728 += 2;
                      v718 += 2;
                      --v727;
                    }
                    while (v727);
                  }
                }
              }
            }
            v554 = *v548;
            v555 = *(_QWORD *)(*v548 + 8);
            v553 = *(_QWORD *)(*v548 + 16);
            goto LABEL_715;
          }
LABEL_803:
          if (v800[0])
            operator delete(v800[0]);
          if (v550 && v737 != v738 && v740.n128_u64[0] && *(_BYTE *)(v740.n128_u64[1] + 17) != 2)
            (*(void (**)(__n128))(*(_QWORD *)v740.n128_u64[0] + 64))(v740);
          if (v742 && v739 != v735 && v741.n128_u64[0] && *(_BYTE *)(v741.n128_u64[1] + 17) != 2)
            (*(void (**)(__n128))(*(_QWORD *)v741.n128_u64[0] + 64))(v741);
          v527 = v736 + 1;
          v526 = v732;
        }
        v522 = v731 + 1;
      }
      while (v731 + 1 != v730);
    }
    return v10;
  }
  else
  {
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_19F638D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void *v65;
  uint64_t v66;
  void *v68;
  void *v69;

  MEMORY[0x1A1AF4E00](v66, 0x1020C4007FF0C4BLL);
  if (v65)
    operator delete(v65);
  std::unique_ptr<gdc::GlobeTileGrid>::~unique_ptr[abi:nn180100](a55);
  v68 = *a47;
  if (*a47)
  {
    *(_QWORD *)(a38 + 40) = v68;
    operator delete(v68);
  }
  v69 = *a43;
  if (*a43)
  {
    *(_QWORD *)(a38 + 16) = v69;
    operator delete(v69);
    if (!a65)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!a65)
  {
    goto LABEL_3;
  }
  operator delete(a65);
  goto LABEL_3;
}

void md::RouteStyledOverlayLayer::~RouteStyledOverlayLayer(md::RouteStyledOverlayLayer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C940;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E428C940;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *a1 = &off_1E42AF468;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  v4 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[5];
  while (v4 != v5)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 2584);
    if (v7)
      MEMORY[0x1A1AF4DE8](v7, 0x1000C8000313F17);
    MEMORY[0x1A1AF4E00](v6, 0x1020C4007FF0C4BLL);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *md::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C940;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(a1);
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      return md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(a1);
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(a1);
}

void md::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_1E428C940;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::Ribbons::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::~RibbonLayer(a1);
  JUMPOUT(0x1A1AF4E00);
}

float md::Ribbons::RibbonWriter<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::eliminateDuplicates(uint64_t a1, uint64_t a2, std::vector<unsigned int> *a3, uint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  std::vector<unsigned int>::pointer begin;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  float result;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  float v21;

  *a4 = 1;
  v8 = *(_QWORD *)(a1 + 88);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (v8 <= v9)
  {
    if (v8 < v9)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * v8;
  }
  else
  {
    std::vector<gm::Matrix<float,3,1>>::__append((char **)a2, v8 - v9);
    v8 = *(_QWORD *)(a1 + 88);
  }
  begin = a3->__begin_;
  v11 = a3->__end_ - a3->__begin_;
  if (v8 <= v11)
  {
    if (v8 < v11)
      a3->__end_ = &begin[v8];
  }
  else
  {
    std::vector<unsigned int>::__append(a3, v8 - v11);
    begin = a3->__begin_;
    v8 = *(_QWORD *)(a1 + 88);
  }
  v12 = *(char **)a2;
  v13 = *(_QWORD *)(a1 + 72);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *((_DWORD *)v12 + 1) = *(_DWORD *)(v13 + 4);
  result = *(float *)(v13 + 8);
  *((float *)v12 + 2) = result;
  *begin = 0;
  if (v8 >= 2)
  {
    v15 = 0;
    v16 = *a4;
    v17 = (float *)(v13 + 20);
    v18 = (float *)&v12[12 * *a4 + 8];
    do
    {
      v19 = v16 + v15;
      v20 = v15 + 2;
      begin[v19] = ++v15;
      *a4 = v19 + 1;
      *(v18 - 2) = *(v17 - 2);
      *(v18 - 1) = *(v17 - 1);
      v21 = *v17;
      v17 += 3;
      result = v21;
      *v18 = v21;
      v18 += 3;
    }
    while (*(_QWORD *)(a1 + 88) > v20);
  }
  return result;
}

uint64_t ggl::VertexDataTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E01E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E01E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TexturedAnimatedRibbon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::batch(std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(uint64_t result, int8x16_t *a2, uint64_t a3, char a4)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _BOOL8 v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void (***v44)(_QWORD, uint64_t);
  void (***v45)(_QWORD, uint64_t);
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (***v52)(_QWORD, uint64_t);
  void (***v53)(_QWORD, uint64_t);
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (***v79)(_QWORD, uint64_t);
  void (***v80)(_QWORD, uint64_t);
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (***v87)(_QWORD, uint64_t);
  void (***v88)(_QWORD, uint64_t);
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t *v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  BOOL v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  malloc_zone_t *zone;
  void (***v111)(_QWORD, uint64_t);
  void (***v112)(_QWORD, uint64_t);
  unsigned __int8 v113;
  uint64_t v114;
  geo::read_write_lock *v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  malloc_zone_t *v130;
  void (***v131)(_QWORD, uint64_t);
  void (***v132)(_QWORD, uint64_t);
  unsigned __int8 v133;
  uint64_t v134;
  geo::read_write_lock *v135;
  const char *v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  void (***v155)(_QWORD, uint64_t);
  void (***v156)(_QWORD, uint64_t);
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  void (***v163)(_QWORD, uint64_t);
  void (***v164)(_QWORD, uint64_t);
  unsigned __int8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  malloc_zone_t *v182;
  void (***v183)(_QWORD, uint64_t);
  void (***v184)(_QWORD, uint64_t);
  unsigned __int8 v185;
  uint64_t v186;
  geo::read_write_lock *v187;
  const char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  void (***v195)(_QWORD, uint64_t);
  void (***v196)(_QWORD, uint64_t);
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (***v202)(_QWORD, uint64_t);
  void (***v203)(_QWORD, uint64_t);
  unsigned __int8 v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  void (***v210)(_QWORD, uint64_t);
  void (***v211)(_QWORD, uint64_t);
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  void (***v224)(_QWORD, uint64_t);
  void (***v225)(_QWORD, uint64_t);
  unsigned __int8 v226;
  uint64_t v227;
  _QWORD *v228;
  void (***v229)(_QWORD, uint64_t);
  void (***v230)(_QWORD, uint64_t);
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  malloc_zone_t *v247;
  void (***v248)(_QWORD, uint64_t);
  void (***v249)(_QWORD, uint64_t);
  unsigned __int8 v250;
  uint64_t v251;
  geo::read_write_lock *v252;
  const char *v253;
  _QWORD *v254;
  _QWORD *v255;
  malloc_zone_t *v256;
  void (***v257)(_QWORD, uint64_t);
  void (***v258)(_QWORD, uint64_t);
  unsigned __int8 v259;
  uint64_t v260;
  geo::read_write_lock *v261;
  const char *v262;
  uint64_t v263;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t *v272;
  int64_t v273;
  int8x16_t *v275;
  uint64_t v276;

  v275 = (int8x16_t *)result;
LABEL_2:
  v5 = (uint64_t *)v275;
  v265 = &a2[-1].i64[1];
  while (2)
  {
    v6 = (int8x16_t *)v5;
    v7 = (char *)a2 - (char *)v5;
    v8 = ((char *)a2 - (char *)v5) >> 3;
    v275 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v91 = *v265;
        v92 = v6->i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v6->i64[0]);
        if ((_DWORD)result)
        {
          v6->i64[0] = v91;
          *v265 = v92;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v265);
      case 4uLL:
        v93 = v6 + 1;
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64);
        v94 = *v265;
        v95 = v6[1].i64[0];
        result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v265 + 96), v95);
        if ((_DWORD)result)
        {
          v93->i64[0] = v94;
          *v265 = v95;
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v93->i64[0] + 96), v6->i64[1]);
          if ((_DWORD)result)
          {
            v96 = *(int8x16_t *)((char *)v6 + 8);
            *(int8x16_t *)((char *)v6 + 8) = vextq_s8(v96, v96, 8uLL);
            result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v96.i64[1] + 96), v6->i64[0]);
            if ((_DWORD)result)
              *v6 = vextq_s8(*v6, *v6, 8uLL);
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[1], v6[1].i64, &v6[1].i64[1], v265);
      default:
        if (v7 <= 191)
        {
          v97 = (int8x16_t *)&v6->u64[1];
          v99 = v6 == a2 || v97 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v99)
            {
              v100 = (uint64_t *)v6;
              do
              {
                v102 = v100;
                v100 = (uint64_t *)v97;
                v104 = *v102;
                v103 = v102[1];
                result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v103 + 96), *v102);
                if ((_DWORD)result)
                {
                  v105 = 0;
                  *v100 = 0;
                  v272 = v100;
                  while (1)
                  {
                    *v100 = v104;
                    v100 = v102;
                    *v102 = 0;
                    v106 = v275;
                    if (v105)
                    {
                      v107 = *(_QWORD **)(v105 + 56);
                      if (v107)
                      {
                        v108 = *(_QWORD **)(v105 + 64);
                        v109 = *(_QWORD *)(v105 + 56);
                        if (v108 != v107)
                        {
                          do
                          {
                            v112 = (void (***)(_QWORD, uint64_t))*--v108;
                            v111 = v112;
                            *v108 = 0;
                            if (v112)
                            {
                              (**v111)(v111, v109);
                              if ((v113 & 1) == 0
                              {
                                v114 = operator new();
                                *(_QWORD *)(v114 + 16) = 0x5ED09DD50000000FLL;
                                *(_QWORD *)(v114 + 24) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 32) = xmmword_19FFB2E80;
                                *(_QWORD *)v114 = &off_1E42B5668;
                                *(_QWORD *)(v114 + 8) = "VectorKitLabels";
                                *(_OWORD *)(v114 + 72) = 0u;
                                *(_OWORD *)(v114 + 88) = 0u;
                                *(_OWORD *)(v114 + 104) = 0u;
                                *(_OWORD *)(v114 + 120) = 0u;
                                *(_OWORD *)(v114 + 136) = 0u;
                                *(_OWORD *)(v114 + 152) = 0u;
                                *(_OWORD *)(v114 + 168) = 0u;
                                *(_OWORD *)(v114 + 184) = 0u;
                                *(_OWORD *)(v114 + 200) = 0u;
                                *(_OWORD *)(v114 + 216) = 0u;
                                *(_OWORD *)(v114 + 232) = 0u;
                                *(_QWORD *)(v114 + 248) = 0;
                                v266 = v114;
                                *(_OWORD *)(v114 + 56) = 0u;
                                v115 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v114 + 56), 0);
                                if ((_DWORD)v115)
                                  geo::read_write_lock::logFailure(v115, (uint64_t)"initialization", v116);
                                zone = malloc_create_zone(0, 0);
                                *(_QWORD *)(v266 + 48) = zone;
                                malloc_set_zone_name(zone, "VectorKitLabels");
                                *(_QWORD *)(v266 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                                mdm::Allocator::instance(void)::alloc = v266;
                              }
                              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v111, 128);
                            }
                          }
                          while (v108 != v107);
                          v109 = *(_QWORD *)(v105 + 56);
                          v106 = v275;
                        }
                        *(_QWORD *)(v105 + 64) = v107;
                        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v105 + 80) + 40))(*(_QWORD *)(v105 + 80), v109, *(_QWORD *)(v105 + 72) - v109);
                      }
                      result = MEMORY[0x1A1AF4E00](v105, 0x1020C4010FC18DELL);
                    }
                    if (v100 == (uint64_t *)v106)
                      break;
                    v117 = *(unsigned int *)(v103 + 96);
                    v118 = v117 & 0xF;
                    if ((v117 & 0xF000) != 0)
                      v119 = 3;
                    else
                      v119 = 0;
                    if ((v117 & 0xF00) != 0)
                      v119 = 2;
                    if ((v117 & 0xF0) != 0)
                      v119 = 1;
                    if ((v117 & 0xF) != 0)
                      v119 = 0;
                    v120 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v119];
                    v121 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v117 >> 12];
                    v122 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v117 >> 8) & 0xF];
                    v123 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v117 >> 4];
                    v124 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v118];
                    v102 = v100 - 1;
                    v104 = *(v100 - 1);
                    v125 = *(unsigned int *)(v104 + 96);
                    if ((v125 & 0xF000) != 0)
                      v126 = 3;
                    else
                      v126 = 0;
                    if ((v125 & 0xF00) != 0)
                      v126 = 2;
                    if ((v125 & 0xF0) != 0)
                      v126 = 1;
                    if ((v125 & 0xF) != 0)
                      v126 = 0;
                    if (((v121 << 12) | (v120 << 16) | (v122 << 8) | (16 * v123) | v124) >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v125 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v126] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v125 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v125 & 0xF]))
                      goto LABEL_214;
                    v105 = *v100;
                  }
                  v100 = (uint64_t *)v106;
LABEL_214:
                  v127 = *v100;
                  *v100 = v103;
                  v100 = v272;
                  if (v127)
                  {
                    v128 = *(_QWORD **)(v127 + 56);
                    if (v128)
                    {
                      v129 = *(_QWORD **)(v127 + 64);
                      v101 = *(_QWORD *)(v127 + 56);
                      if (v129 != v128)
                      {
                        do
                        {
                          v132 = (void (***)(_QWORD, uint64_t))*--v129;
                          v131 = v132;
                          *v129 = 0;
                          if (v132)
                          {
                            (**v131)(v131, v101);
                            if ((v133 & 1) == 0
                            {
                              v134 = operator new();
                              *(_QWORD *)(v134 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v134 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v134 = &off_1E42B5668;
                              *(_QWORD *)(v134 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v134 + 72) = 0u;
                              *(_OWORD *)(v134 + 88) = 0u;
                              *(_OWORD *)(v134 + 104) = 0u;
                              *(_OWORD *)(v134 + 120) = 0u;
                              *(_OWORD *)(v134 + 136) = 0u;
                              *(_OWORD *)(v134 + 152) = 0u;
                              *(_OWORD *)(v134 + 168) = 0u;
                              *(_OWORD *)(v134 + 184) = 0u;
                              *(_OWORD *)(v134 + 200) = 0u;
                              *(_OWORD *)(v134 + 216) = 0u;
                              *(_OWORD *)(v134 + 232) = 0u;
                              *(_QWORD *)(v134 + 248) = 0;
                              *(_OWORD *)(v134 + 56) = 0u;
                              v135 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v134 + 56), 0);
                              if ((_DWORD)v135)
                                geo::read_write_lock::logFailure(v135, (uint64_t)"initialization", v136);
                              v130 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v134 + 48) = v130;
                              malloc_set_zone_name(v130, "VectorKitLabels");
                              *(_QWORD *)(v134 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v134;
                              v100 = v272;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v131, 128);
                          }
                        }
                        while (v129 != v128);
                        v101 = *(_QWORD *)(v127 + 56);
                      }
                      *(_QWORD *)(v127 + 64) = v128;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v127 + 80) + 40))(*(_QWORD *)(v127 + 80), v101, *(_QWORD *)(v127 + 72) - v101);
                    }
                    result = MEMORY[0x1A1AF4E00](v127, 0x1020C4010FC18DELL);
                  }
                }
                v97 = (int8x16_t *)(v100 + 1);
              }
              while (v100 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v99)
          {
            do
            {
              v235 = (uint64_t *)v275;
              v234 = v97;
              v237 = v275->i64[0];
              v236 = v275->i64[1];
              v238 = *(unsigned int *)(v236 + 96);
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v238, v275->i64[0]);
              v275 = v234;
              if ((_DWORD)result)
              {
                v239 = 0;
                v234->i64[0] = 0;
                do
                {
                  v234->i64[0] = v237;
                  v234 = (int8x16_t *)v235;
                  *v235 = 0;
                  if (v239)
                  {
                    v245 = *(_QWORD **)(v239 + 56);
                    if (v245)
                    {
                      v246 = *(_QWORD **)(v239 + 64);
                      v240 = *(_QWORD *)(v239 + 56);
                      if (v246 != v245)
                      {
                        do
                        {
                          v249 = (void (***)(_QWORD, uint64_t))*--v246;
                          v248 = v249;
                          *v246 = 0;
                          if (v249)
                          {
                            (**v248)(v248, v240);
                            if ((v250 & 1) == 0
                            {
                              v251 = operator new();
                              *(_QWORD *)(v251 + 16) = 0x5ED09DD50000000FLL;
                              *(_QWORD *)(v251 + 24) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 32) = xmmword_19FFB2E80;
                              *(_QWORD *)v251 = &off_1E42B5668;
                              *(_QWORD *)(v251 + 8) = "VectorKitLabels";
                              *(_OWORD *)(v251 + 72) = 0u;
                              *(_OWORD *)(v251 + 88) = 0u;
                              *(_OWORD *)(v251 + 104) = 0u;
                              *(_OWORD *)(v251 + 120) = 0u;
                              *(_OWORD *)(v251 + 136) = 0u;
                              *(_OWORD *)(v251 + 152) = 0u;
                              *(_OWORD *)(v251 + 168) = 0u;
                              *(_OWORD *)(v251 + 184) = 0u;
                              *(_OWORD *)(v251 + 200) = 0u;
                              *(_OWORD *)(v251 + 216) = 0u;
                              *(_OWORD *)(v251 + 232) = 0u;
                              *(_QWORD *)(v251 + 248) = 0;
                              v269 = v251;
                              *(_OWORD *)(v251 + 56) = 0u;
                              v252 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v251 + 56), 0);
                              if ((_DWORD)v252)
                                geo::read_write_lock::logFailure(v252, (uint64_t)"initialization", v253);
                              v247 = malloc_create_zone(0, 0);
                              *(_QWORD *)(v269 + 48) = v247;
                              malloc_set_zone_name(v247, "VectorKitLabels");
                              *(_QWORD *)(v269 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                              mdm::Allocator::instance(void)::alloc = v269;
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v248, 128);
                          }
                        }
                        while (v246 != v245);
                        v240 = *(_QWORD *)(v239 + 56);
                      }
                      *(_QWORD *)(v239 + 64) = v245;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v240, *(_QWORD *)(v239 + 72) - v240);
                    }
                    result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                    v238 = *(unsigned int *)(v236 + 96);
                  }
                  if ((v238 & 0xF000) != 0)
                    v241 = 3;
                  else
                    v241 = 0;
                  if ((v238 & 0xF00) != 0)
                    v241 = 2;
                  if ((v238 & 0xF0) != 0)
                    v241 = 1;
                  if ((v238 & 0xF) != 0)
                    v241 = 0;
                  v242 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v241];
                  v235 = &v234[-1].i64[1];
                  v237 = v234[-1].i64[1];
                  v243 = *(unsigned int *)(v237 + 96);
                  if ((v243 & 0xF000) != 0)
                    v244 = 3;
                  else
                    v244 = 0;
                  if ((v243 & 0xF00) != 0)
                    v244 = 2;
                  if ((v243 & 0xF0) != 0)
                    v244 = 1;
                  if ((v243 & 0xF) != 0)
                    v244 = 0;
                  v239 = v234->i64[0];
                }
                while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v238 >> 12] << 12) | (v242 << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v238 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v238 & 0xF]) < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v243 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v244] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v243 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v243 & 0xF]));
                v234->i64[0] = v236;
                v234 = v275;
                if (v239)
                {
                  v254 = *(_QWORD **)(v239 + 56);
                  if (v254)
                  {
                    v255 = *(_QWORD **)(v239 + 64);
                    v233 = *(_QWORD *)(v239 + 56);
                    if (v255 != v254)
                    {
                      do
                      {
                        v258 = (void (***)(_QWORD, uint64_t))*--v255;
                        v257 = v258;
                        *v255 = 0;
                        if (v258)
                        {
                          (**v257)(v257, v233);
                          if ((v259 & 1) == 0
                          {
                            v260 = operator new();
                            *(_QWORD *)(v260 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v260 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v260 = &off_1E42B5668;
                            *(_QWORD *)(v260 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v260 + 72) = 0u;
                            *(_OWORD *)(v260 + 88) = 0u;
                            *(_OWORD *)(v260 + 104) = 0u;
                            *(_OWORD *)(v260 + 120) = 0u;
                            *(_OWORD *)(v260 + 136) = 0u;
                            *(_OWORD *)(v260 + 152) = 0u;
                            *(_OWORD *)(v260 + 168) = 0u;
                            *(_OWORD *)(v260 + 184) = 0u;
                            *(_OWORD *)(v260 + 200) = 0u;
                            *(_OWORD *)(v260 + 216) = 0u;
                            *(_OWORD *)(v260 + 232) = 0u;
                            *(_QWORD *)(v260 + 248) = 0;
                            *(_OWORD *)(v260 + 56) = 0u;
                            v261 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v260 + 56), 0);
                            if ((_DWORD)v261)
                              geo::read_write_lock::logFailure(v261, (uint64_t)"initialization", v262);
                            v256 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v260 + 48) = v256;
                            malloc_set_zone_name(v256, "VectorKitLabels");
                            *(_QWORD *)(v260 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v260;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v257, 128);
                        }
                      }
                      while (v255 != v254);
                      v233 = *(_QWORD *)(v239 + 56);
                    }
                    *(_QWORD *)(v239 + 64) = v254;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v239 + 80) + 40))(*(_QWORD *)(v239 + 80), v233, *(_QWORD *)(v239 + 72) - v233);
                  }
                  result = MEMORY[0x1A1AF4E00](v239, 0x1020C4010FC18DELL);
                  v234 = v275;
                }
              }
              v97 = (int8x16_t *)&v234->u64[1];
            }
            while (&v234->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 == a2)
            return result;
          v137 = (v8 - 2) >> 1;
          v273 = v137;
          do
          {
            v139 = v137;
            if (v273 >= v137)
            {
              v140 = (2 * v137) | 1;
              v141 = &v275->i64[v140];
              if (2 * v137 + 2 >= (uint64_t)v8)
              {
                v145 = *v141;
              }
              else
              {
                v142 = *v141;
                v143 = v141[1];
                v144 = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v143);
                if (v144)
                  v145 = v143;
                else
                  v145 = v142;
                if (v144)
                {
                  ++v141;
                  v140 = 2 * v139 + 2;
                }
              }
              v146 = &v275->i64[v139];
              v147 = *v146;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v145 + 96), *v146);
              if ((result & 1) == 0)
              {
                v268 = v139;
                *v146 = 0;
                v148 = *v141;
                do
                {
                  v150 = v141;
                  *v141 = 0;
                  v151 = *v146;
                  *v146 = v148;
                  if (v151)
                  {
                    v152 = *(_QWORD **)(v151 + 56);
                    if (v152)
                    {
                      v153 = *(_QWORD **)(v151 + 64);
                      v154 = *(_QWORD *)(v151 + 56);
                      if (v153 != v152)
                      {
                        do
                        {
                          v156 = (void (***)(_QWORD, uint64_t))*--v153;
                          v155 = v156;
                          *v153 = 0;
                          if (v156)
                          {
                            (**v155)(v155, v154);
                            if ((v157 & 1) == 0
                            {
                              v158 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v158, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v155, 128);
                          }
                        }
                        while (v153 != v152);
                        v154 = *(_QWORD *)(v151 + 56);
                      }
                      *(_QWORD *)(v151 + 64) = v152;
                      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v151 + 80) + 40))(*(_QWORD *)(v151 + 80), v154, *(_QWORD *)(v151 + 72) - v154);
                    }
                    result = MEMORY[0x1A1AF4E00](v151, 0x1020C4010FC18DELL);
                  }
                  if (v273 < v140)
                    break;
                  v159 = (2 * v140) | 1;
                  v141 = &v275->i64[v159];
                  v140 = 2 * v140 + 2;
                  if (v140 < (uint64_t)v8)
                  {
                    v148 = *v141;
                    v149 = v141[1];
                    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v141 + 96), v149))
                    {
                      v148 = v149;
                      ++v141;
                    }
                    else
                    {
                      v140 = v159;
                    }
                  }
                  else
                  {
                    v148 = *v141;
                    v140 = v159;
                  }
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v148 + 96), v147);
                  v146 = v150;
                }
                while (!(_DWORD)result);
                v160 = *v150;
                *v150 = v147;
                v139 = v268;
                if (v160)
                {
                  v161 = *(_QWORD **)(v160 + 56);
                  if (v161)
                  {
                    v162 = *(_QWORD **)(v160 + 64);
                    v138 = *(_QWORD *)(v160 + 56);
                    if (v162 != v161)
                    {
                      do
                      {
                        v164 = (void (***)(_QWORD, uint64_t))*--v162;
                        v163 = v164;
                        *v162 = 0;
                        if (v164)
                        {
                          (**v163)(v163, v138);
                          if ((v165 & 1) == 0
                          {
                            v166 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v166, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v163, 128);
                        }
                      }
                      while (v162 != v161);
                      v138 = *(_QWORD *)(v160 + 56);
                    }
                    *(_QWORD *)(v160 + 64) = v161;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v160 + 80) + 40))(*(_QWORD *)(v160 + 80), v138, *(_QWORD *)(v160 + 72) - v138);
                  }
                  result = MEMORY[0x1A1AF4E00](v160, 0x1020C4010FC18DELL);
                }
              }
            }
            v137 = v139 - 1;
          }
          while (v139);
          v167 = (unint64_t)v7 >> 3;
          while (2)
          {
            if (v167 >= 2)
            {
              v170 = 0;
              v171 = (uint64_t *)v275;
              v172 = v275->i64[0];
              v275->i64[0] = 0;
              do
              {
                v174 = &v171[v170 + 1];
                v175 = (2 * v170) | 1;
                v170 = 2 * v170 + 2;
                if (v170 >= v167)
                {
                  v178 = *v174;
                  v170 = v175;
                }
                else
                {
                  v176 = *v174;
                  v177 = v174[1];
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v174 + 96), v177);
                  if ((_DWORD)result)
                    v178 = v177;
                  else
                    v178 = v176;
                  if ((_DWORD)result)
                    ++v174;
                  else
                    v170 = v175;
                }
                *v174 = 0;
                v179 = *v171;
                *v171 = v178;
                if (v179)
                {
                  v180 = *(_QWORD **)(v179 + 56);
                  if (v180)
                  {
                    v181 = *(_QWORD **)(v179 + 64);
                    v173 = *(_QWORD *)(v179 + 56);
                    if (v181 != v180)
                    {
                      do
                      {
                        v184 = (void (***)(_QWORD, uint64_t))*--v181;
                        v183 = v184;
                        *v181 = 0;
                        if (v184)
                        {
                          (**v183)(v183, v173);
                          if ((v185 & 1) == 0
                          {
                            v186 = operator new();
                            *(_QWORD *)(v186 + 16) = 0x5ED09DD50000000FLL;
                            *(_QWORD *)(v186 + 24) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 32) = xmmword_19FFB2E80;
                            *(_QWORD *)v186 = &off_1E42B5668;
                            *(_QWORD *)(v186 + 8) = "VectorKitLabels";
                            *(_OWORD *)(v186 + 72) = 0u;
                            *(_OWORD *)(v186 + 88) = 0u;
                            *(_OWORD *)(v186 + 104) = 0u;
                            *(_OWORD *)(v186 + 120) = 0u;
                            *(_OWORD *)(v186 + 136) = 0u;
                            *(_OWORD *)(v186 + 152) = 0u;
                            *(_OWORD *)(v186 + 168) = 0u;
                            *(_OWORD *)(v186 + 184) = 0u;
                            *(_OWORD *)(v186 + 200) = 0u;
                            *(_OWORD *)(v186 + 216) = 0u;
                            *(_OWORD *)(v186 + 232) = 0u;
                            *(_QWORD *)(v186 + 248) = 0;
                            *(_OWORD *)(v186 + 56) = 0u;
                            v187 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v186 + 56), 0);
                            if ((_DWORD)v187)
                              geo::read_write_lock::logFailure(v187, (uint64_t)"initialization", v188);
                            v182 = malloc_create_zone(0, 0);
                            *(_QWORD *)(v186 + 48) = v182;
                            malloc_set_zone_name(v182, "VectorKitLabels");
                            *(_QWORD *)(v186 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                            mdm::Allocator::instance(void)::alloc = v186;
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v183, 128);
                        }
                      }
                      while (v181 != v180);
                      v173 = *(_QWORD *)(v179 + 56);
                    }
                    *(_QWORD *)(v179 + 64) = v180;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v179 + 80) + 40))(*(_QWORD *)(v179 + 80), v173, *(_QWORD *)(v179 + 72) - v173);
                  }
                  result = MEMORY[0x1A1AF4E00](v179, 0x1020C4010FC18DELL);
                }
                v171 = v174;
              }
              while (v170 <= (uint64_t)((unint64_t)(v167 - 2) >> 1));
              v189 = &a2[-1].i64[1];
              if (v174 == (uint64_t *)&a2[-1].u64[1])
              {
                v199 = *v174;
                *v174 = v172;
                if (v199)
                {
                  v200 = *(_QWORD **)(v199 + 56);
                  if (v200)
                  {
                    v201 = *(_QWORD **)(v199 + 64);
                    v168 = *(_QWORD *)(v199 + 56);
                    if (v201 == v200)
                      goto LABEL_275;
                    do
                    {
                      v203 = (void (***)(_QWORD, uint64_t))*--v201;
                      v202 = v203;
                      *v201 = 0;
                      if (v203)
                      {
                        (**v202)(v202, v168);
                        if ((v204 & 1) == 0
                        {
                          v205 = operator new();
                          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v205, "VectorKitLabels", 0x5ED09DD50000000FLL);
                        }
                        (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v202, 128);
                      }
                    }
                    while (v201 != v200);
                    goto LABEL_274;
                  }
LABEL_276:
                  result = MEMORY[0x1A1AF4E00](v199, 0x1020C4010FC18DELL);
                }
              }
              else
              {
                v190 = *v189;
                *v189 = 0;
                v191 = *v174;
                *v174 = v190;
                if (v191)
                {
                  v192 = *(_QWORD **)(v191 + 56);
                  if (v192)
                  {
                    v193 = *(_QWORD **)(v191 + 64);
                    v194 = *(_QWORD *)(v191 + 56);
                    if (v193 != v192)
                    {
                      do
                      {
                        v196 = (void (***)(_QWORD, uint64_t))*--v193;
                        v195 = v196;
                        *v193 = 0;
                        if (v196)
                        {
                          (**v195)(v195, v194);
                          if ((v197 & 1) == 0
                          {
                            v198 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v198, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v195, 128);
                        }
                      }
                      while (v193 != v192);
                      v194 = *(_QWORD *)(v191 + 56);
                    }
                    *(_QWORD *)(v191 + 64) = v192;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v191 + 80) + 40))(*(_QWORD *)(v191 + 80), v194, *(_QWORD *)(v191 + 72) - v194);
                  }
                  result = MEMORY[0x1A1AF4E00](v191, 0x1020C4010FC18DELL);
                }
                v206 = *v189;
                *v189 = v172;
                if (v206)
                {
                  v207 = *(_QWORD **)(v206 + 56);
                  if (v207)
                  {
                    v208 = *(_QWORD **)(v206 + 64);
                    v209 = *(_QWORD *)(v206 + 56);
                    if (v208 != v207)
                    {
                      do
                      {
                        v211 = (void (***)(_QWORD, uint64_t))*--v208;
                        v210 = v211;
                        *v208 = 0;
                        if (v211)
                        {
                          (**v210)(v210, v209);
                          if ((v212 & 1) == 0
                          {
                            v213 = operator new();
                            mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v213, "VectorKitLabels", 0x5ED09DD50000000FLL);
                          }
                          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v210, 128);
                        }
                      }
                      while (v208 != v207);
                      v209 = *(_QWORD *)(v206 + 56);
                    }
                    *(_QWORD *)(v206 + 64) = v207;
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v206 + 80) + 40))(*(_QWORD *)(v206 + 80), v209, *(_QWORD *)(v206 + 72) - v209);
                  }
                  result = MEMORY[0x1A1AF4E00](v206, 0x1020C4010FC18DELL);
                }
                v214 = (char *)(v174 + 1) - (char *)v275;
                if (v214 >= 9)
                {
                  v215 = (unint64_t)((v214 >> 3) - 2) >> 1;
                  v216 = &v275->i64[v215];
                  v217 = *v174;
                  result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), *v174);
                  if ((_DWORD)result)
                  {
                    *v174 = 0;
                    v218 = *v216;
                    do
                    {
                      v219 = v216;
                      *v216 = 0;
                      v220 = *v174;
                      *v174 = v218;
                      if (v220)
                      {
                        v221 = *(_QWORD **)(v220 + 56);
                        if (v221)
                        {
                          v222 = *(_QWORD **)(v220 + 64);
                          v223 = *(_QWORD *)(v220 + 56);
                          if (v222 != v221)
                          {
                            do
                            {
                              v225 = (void (***)(_QWORD, uint64_t))*--v222;
                              v224 = v225;
                              *v222 = 0;
                              if (v225)
                              {
                                (**v224)(v224, v223);
                                if ((v226 & 1) == 0
                                {
                                  v227 = operator new();
                                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v227, "VectorKitLabels", 0x5ED09DD50000000FLL);
                                }
                                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v224, 128);
                              }
                            }
                            while (v222 != v221);
                            v223 = *(_QWORD *)(v220 + 56);
                          }
                          *(_QWORD *)(v220 + 64) = v221;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v220 + 80) + 40))(*(_QWORD *)(v220 + 80), v223, *(_QWORD *)(v220 + 72) - v223);
                        }
                        result = MEMORY[0x1A1AF4E00](v220, 0x1020C4010FC18DELL);
                      }
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v275->i64[v215];
                      v218 = *v216;
                      result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(*v216 + 96), v217);
                      v174 = v219;
                    }
                    while ((result & 1) != 0);
                    v199 = *v219;
                    *v219 = v217;
                    if (v199)
                    {
                      v200 = *(_QWORD **)(v199 + 56);
                      if (v200)
                      {
                        v228 = *(_QWORD **)(v199 + 64);
                        v168 = *(_QWORD *)(v199 + 56);
                        if (v228 == v200)
                        {
LABEL_275:
                          *(_QWORD *)(v199 + 64) = v200;
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v199 + 80) + 40))(*(_QWORD *)(v199 + 80), v168, *(_QWORD *)(v199 + 72) - v168);
                          goto LABEL_276;
                        }
                        do
                        {
                          v230 = (void (***)(_QWORD, uint64_t))*--v228;
                          v229 = v230;
                          *v228 = 0;
                          if (v230)
                          {
                            (**v229)(v229, v168);
                            if ((v231 & 1) == 0
                            {
                              v232 = operator new();
                              mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v232, "VectorKitLabels", 0x5ED09DD50000000FLL);
                            }
                            (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v229, 128);
                          }
                        }
                        while (v228 != v200);
LABEL_274:
                        v168 = *(_QWORD *)(v199 + 56);
                        goto LABEL_275;
                      }
                      goto LABEL_276;
                    }
                  }
                }
              }
            }
            a2 = (int8x16_t *)((char *)a2 - 8);
            if ((unint64_t)v167-- <= 2)
              return result;
            continue;
          }
        }
        v9 = v8 >> 1;
        if ((unint64_t)v7 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[v8 >> 1], v6->i64, v265);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6->i64, &v6->i64[v8 >> 1], v265);
          v10 = v9;
          v11 = &v6->i64[v9];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(&v6->i64[1], v11 - 1, a2[-1].i64);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v6[1].i64, &v6->i64[v10 + 1], &a2[-2].i64[1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v11 - 1, &v6->i64[v8 >> 1], &v6->i64[v10 + 1]);
          v12 = v6->i64[0];
          v6->i64[0] = *v11;
          *v11 = v12;
        }
        v267 = a3 - 1;
        v13 = v6->i64[0];
        if ((a4 & 1) == 0
          && !md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6[-1].i64[1] + 96), v6->i64[0]))
        {
          v6->i64[0] = 0;
          v57 = *(unsigned int *)(v13 + 96);
          result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v265);
          if ((result & 1) != 0)
          {
            v5 = (uint64_t *)v6;
            do
            {
              v58 = v5[1];
              ++v5;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v58);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v59 = &v6->i64[1];
            do
            {
              v5 = v59;
              if (v59 >= (uint64_t *)a2)
                break;
              ++v59;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, *v5);
            }
            while (!(_DWORD)result);
          }
          v60 = (uint64_t *)a2;
          if (v5 < (uint64_t *)a2)
          {
            v60 = (uint64_t *)a2;
            do
            {
              v61 = *--v60;
              result = md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(v57, v61);
            }
            while ((result & 1) != 0);
          }
          if (v5 < v60)
          {
            v62 = *v5;
            v63 = *v60;
            v64 = (v57 & 0xF) == 0;
            if ((v57 & 0xF000) != 0)
              v65 = 3;
            else
              v65 = 0;
            if ((v57 & 0xF00) != 0)
              v65 = 2;
            if (!(_BYTE)v57)
              v64 = v65;
            v66 = (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v57 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v64] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v57 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v57 & 0xF];
            do
            {
              *v5 = v63;
              *v60 = v62;
              do
              {
                v67 = v5[1];
                ++v5;
                v62 = v67;
                v68 = *(unsigned int *)(v67 + 96);
                if ((v68 & 0xF000) != 0)
                  v69 = 3;
                else
                  v69 = 0;
                if ((v68 & 0xF00) != 0)
                  v69 = 2;
                if ((v68 & 0xF0) != 0)
                  v69 = 1;
                if ((v68 & 0xF) != 0)
                  v69 = 0;
              }
              while (v66 >= ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v68 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v69] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v68 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v68 & 0xF]));
              do
              {
                v70 = *--v60;
                v63 = v70;
                v71 = *(unsigned int *)(v70 + 96);
                if ((v71 & 0xF000) != 0)
                  v72 = 3;
                else
                  v72 = 0;
                if ((v71 & 0xF00) != 0)
                  v72 = 2;
                if ((v71 & 0xF0) != 0)
                  v72 = 1;
                if ((v71 & 0xF) != 0)
                  v72 = 0;
              }
              while (v66 < ((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v71 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v72] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v71 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v71 & 0xF]));
            }
            while (v5 < v60);
          }
          v73 = v5 - 1;
          if (v5 - 1 != (uint64_t *)v6)
          {
            v74 = *v73;
            *v73 = 0;
            result = v6->i64[0];
            v6->i64[0] = v74;
            if (result)
            {
              v75 = *(_QWORD **)(result + 56);
              if (v75)
              {
                v76 = result;
                v77 = *(_QWORD **)(result + 64);
                v78 = *(_QWORD *)(result + 56);
                if (v77 != v75)
                {
                  v276 = result;
                  do
                  {
                    v80 = (void (***)(_QWORD, uint64_t))*--v77;
                    v79 = v80;
                    *v77 = 0;
                    if (v80)
                    {
                      (**v79)(v79, v78);
                      if ((v81 & 1) == 0
                      {
                        v82 = operator new();
                        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
                      }
                      (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v79, 128);
                    }
                  }
                  while (v77 != v75);
                  v76 = v276;
                  v78 = *(_QWORD *)(v276 + 56);
                }
                *(_QWORD *)(v76 + 64) = v75;
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v76 + 80) + 40))(*(_QWORD *)(v76 + 80), v78, *(_QWORD *)(v76 + 72) - v78);
                result = v76;
              }
              result = MEMORY[0x1A1AF4E00](result, 0x1020C4010FC18DELL);
            }
          }
          a4 = 0;
          v83 = *v73;
          *v73 = v13;
          a3 = v267;
          if (v83)
          {
            v84 = *(_QWORD **)(v83 + 56);
            if (v84)
            {
              v85 = *(_QWORD **)(v83 + 64);
              v86 = *(_QWORD *)(v83 + 56);
              if (v85 != v84)
              {
                do
                {
                  v88 = (void (***)(_QWORD, uint64_t))*--v85;
                  v87 = v88;
                  *v85 = 0;
                  if (v88)
                  {
                    (**v87)(v87, v86);
                    if ((v89 & 1) == 0
                    {
                      v90 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v87, 128);
                  }
                }
                while (v85 != v84);
                v86 = *(_QWORD *)(v83 + 56);
              }
              *(_QWORD *)(v83 + 64) = v84;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v83 + 80) + 40))(*(_QWORD *)(v83 + 80), v86, *(_QWORD *)(v83 + 72) - v86);
            }
            result = MEMORY[0x1A1AF4E00](v83, 0x1020C4010FC18DELL);
            a4 = 0;
          }
          continue;
        }
        v6->i64[0] = 0;
        v14 = v6;
        do
        {
          v15 = v14;
          v17 = v14->i64[1];
          v14 = (int8x16_t *)((char *)v14 + 8);
          v16 = v17;
        }
        while (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v17 + 96), v13));
        v18 = (uint64_t *)a2;
        if (v15 == v6)
        {
          v18 = (uint64_t *)a2;
          do
          {
            if (v14 >= (int8x16_t *)v18)
              break;
            v20 = *--v18;
          }
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v20 + 96), v13));
        }
        else
        {
          do
            v19 = *--v18;
          while (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v19 + 96), v13));
        }
        if (v14 < (int8x16_t *)v18)
        {
          v21 = *v18;
          v22 = *(unsigned int *)(v13 + 96);
          v23 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v22 >> 12] << 12;
          v24 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v22 >> 8) & 0xF];
          v25 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 >> 4];
          v26 = ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v22 & 0xF];
          if ((v22 & 0xF000) != 0)
            v27 = 3;
          else
            v27 = 0;
          if ((v22 & 0xF00) != 0)
            v27 = 2;
          if (*(_DWORD *)(v13 + 96))
            v28 = (*(_DWORD *)(v13 + 96) & 0xF) == 0;
          else
            v28 = v27;
          v29 = v23 | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v28] << 16) | (v24 << 8) | (16 * v25) | v26;
          v30 = (uint64_t *)v14;
          v31 = v18;
          do
          {
            *v30 = v21;
            *v31 = v16;
            do
            {
              v32 = v30[1];
              ++v30;
              v16 = v32;
              v33 = *(unsigned int *)(v32 + 96);
              if ((v33 & 0xF000) != 0)
                v34 = 3;
              else
                v34 = 0;
              if ((v33 & 0xF00) != 0)
                v34 = 2;
              if ((v33 & 0xF0) != 0)
                v34 = 1;
              if ((v33 & 0xF) != 0)
                v34 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v33 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v34] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v33 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v33 & 0xF]) < v29);
            v15 = (int8x16_t *)(v30 - 1);
            do
            {
              v35 = *--v31;
              v21 = v35;
              v36 = *(unsigned int *)(v35 + 96);
              if ((v36 & 0xF000) != 0)
                v37 = 3;
              else
                v37 = 0;
              if ((v36 & 0xF00) != 0)
                v37 = 2;
              if ((v36 & 0xF0) != 0)
                v37 = 1;
              if ((v36 & 0xF) != 0)
                v37 = 0;
            }
            while (((ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(unsigned __int16)v36 >> 12] << 12) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v37] << 16) | (ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[(v36 >> 8) & 0xF] << 8) | (16 * ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 >> 4]) | ggl::CullingGrid::sortOrderForCells::sortOrderForQuad[v36 & 0xF]) >= v29);
          }
          while (v30 < v31);
        }
        if (v15 != v6)
        {
          v38 = v15->i64[0];
          v15->i64[0] = 0;
          v39 = v6->i64[0];
          v6->i64[0] = v38;
          if (v39)
          {
            v40 = *(_QWORD **)(v39 + 56);
            if (v40)
            {
              v41 = v39;
              v42 = *(_QWORD **)(v39 + 64);
              v43 = *(_QWORD *)(v39 + 56);
              if (v42 != v40)
              {
                v263 = v39;
                v270 = *(_QWORD **)(v39 + 56);
                do
                {
                  v45 = (void (***)(_QWORD, uint64_t))*--v42;
                  v44 = v45;
                  *v42 = 0;
                  if (v45)
                  {
                    (**v44)(v44, v43);
                    if ((v46 & 1) == 0
                    {
                      v47 = operator new();
                      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v47, "VectorKitLabels", 0x5ED09DD50000000FLL);
                    }
                    (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v44, 128);
                    v40 = v270;
                  }
                }
                while (v42 != v40);
                v41 = v263;
                v43 = *(_QWORD *)(v263 + 56);
              }
              *(_QWORD *)(v41 + 64) = v40;
              (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v41 + 80) + 40))(*(_QWORD *)(v41 + 80), v43, *(_QWORD *)(v41 + 72) - v43);
              v39 = v41;
            }
            MEMORY[0x1A1AF4E00](v39, 0x1020C4010FC18DELL);
          }
        }
        v48 = v15->i64[0];
        v15->i64[0] = v13;
        if (v48)
        {
          v49 = *(_QWORD **)(v48 + 56);
          if (v49)
          {
            v50 = *(_QWORD **)(v48 + 64);
            v51 = *(_QWORD *)(v48 + 56);
            if (v50 != v49)
            {
              v271 = v48;
              do
              {
                v53 = (void (***)(_QWORD, uint64_t))*--v50;
                v52 = v53;
                *v50 = 0;
                if (v53)
                {
                  (**v52)(v52, v51);
                  {
                    v55 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v55, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v52, 128);
                }
              }
              while (v50 != v49);
              v48 = v271;
              v51 = *(_QWORD *)(v271 + 56);
            }
            *(_QWORD *)(v48 + 64) = v49;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v48 + 80) + 40))(*(_QWORD *)(v48 + 80), v51, *(_QWORD *)(v48 + 72) - v51);
          }
          MEMORY[0x1A1AF4E00](v48, 0x1020C4010FC18DELL);
        }
        a3 = v267;
        if (v14 < (int8x16_t *)v18)
        {
LABEL_82:
          result = std::__introsort<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::batch(std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*,false>(v275, v15, v267, a4 & 1);
          a4 = 0;
          v5 = &v15->i64[1];
          continue;
        }
        v56 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::batch(std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(v275, v15);
        v5 = &v15->i64[1];
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::batch(std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>((int8x16_t *)&v15->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_82;
        }
        a2 = v15;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::RouteStyledOverlayRibbonDescriptor>::batch(std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::RouteStyledOverlayBatchKey,std::vector<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteStyledOverlayRibbon,mdm::TypeDeleter<md::RouteStyledOverlayRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::RouteStyledOverlayRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i64;
  int8x16_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *i;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void (***v19)(_QWORD, uint64_t);
  void (***v20)(_QWORD, uint64_t);
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (***v26)(_QWORD, uint64_t);
  void (***v27)(_QWORD, uint64_t);
  unsigned __int8 v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;

  v2 = a2;
  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2[-1].i64[1];
      v7 = a1->i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v6 + 96), a1->i64[0]))
      {
        a1->i64[0] = v6;
        v2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      v30 = a1 + 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v31 = v2[-1].i64[1];
      v32 = a1[1].i64[0];
      if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v31 + 96), v32))
      {
        v30->i64[0] = v31;
        v2[-1].i64[1] = v32;
        if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v30->i64[0] + 96), a1->i64[1]))
        {
          v33 = *(int8x16_t *)((char *)a1 + 8);
          *(int8x16_t *)((char *)a1 + 8) = vextq_s8(v33, v33, 8uLL);
          if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v33.i64[1] + 96), a1->i64[0]))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      i64 = a1[1].i64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1} &,std::default_delete<md::RibbonSection>*>(a1->i64, &a1->i64[1], a1[1].i64);
      v9 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)v2)
        return 1;
      v10 = 0;
      v34 = v2;
      break;
  }
  while (1)
  {
    v12 = v9->i64[0];
    v13 = *i64;
    if (md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v9->i64[0] + 96), *i64))
    {
      v35 = v10;
      v14 = 0;
      v9->i64[0] = 0;
      for (i = v9; ; v14 = i->i64[0])
      {
        i->i64[0] = v13;
        i = (int8x16_t *)i64;
        *i64 = 0;
        if (v14)
        {
          v16 = *(_QWORD **)(v14 + 56);
          if (v16)
          {
            v17 = *(_QWORD **)(v14 + 64);
            v18 = *(_QWORD *)(v14 + 56);
            if (v17 != v16)
            {
              do
              {
                v20 = (void (***)(_QWORD, uint64_t))*--v17;
                v19 = v20;
                *v17 = 0;
                if (v20)
                {
                  (**v19)(v19, v18);
                  {
                    v22 = operator new();
                    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v22, "VectorKitLabels", 0x5ED09DD50000000FLL);
                  }
                  (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v19, 128);
                }
              }
              while (v17 != v16);
              v18 = *(_QWORD *)(v14 + 56);
            }
            *(_QWORD *)(v14 + 64) = v16;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 80) + 40))(*(_QWORD *)(v14 + 80), v18, *(_QWORD *)(v14 + 72) - v18);
          }
          MEMORY[0x1A1AF4E00](v14, 0x1020C4010FC18DELL);
        }
        if (i == a1)
          break;
        i64 = &i[-1].i64[1];
        v13 = i[-1].i64[1];
        if (!md::RibbonLayer<md::Ribbons::DaVinciTrafficRibbonDescriptor>::batch(std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&,std::shared_ptr<ggl::ConstantDataTyped<std::shared_ptr::Tile::View>> const&,std::unordered_map<md::DaVinciTrafficBatchKey,std::vector<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,geo::StdAllocator<std::unique_ptr<md::DaVinciTrafficRibbon,mdm::TypeDeleter<md::DaVinciTrafficRibbon>>,mdm::Allocator>>> &&<ggl<ggl::ConstantDataTyped::Transform>> const&,BOOL)::{lambda(std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const&,std::unique_ptr<md::RibbonSection<md::Ribbons::DaVinciTrafficRibbonDescriptor>> const)#1}::operator()(*(unsigned int *)(v12 + 96), v13))goto LABEL_30;
      }
      i = a1;
LABEL_30:
      v23 = i->i64[0];
      i->i64[0] = v12;
      v2 = v34;
      if (v23)
      {
        v24 = *(_QWORD **)(v23 + 56);
        if (v24)
        {
          v25 = *(_QWORD **)(v23 + 64);
          v11 = *(_QWORD *)(v23 + 56);
          if (v25 != v24)
          {
            do
            {
              v27 = (void (***)(_QWORD, uint64_t))*--v25;
              v26 = v27;
              *v25 = 0;
              if (v27)
              {
                (**v26)(v26, v11);
                {
                  v29 = operator new();
                  mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
                }
                (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                                 + 40))(mdm::Allocator::instance(void)::alloc, v26, 128);
              }
            }
            while (v25 != v24);
            v11 = *(_QWORD *)(v23 + 56);
          }
          *(_QWORD *)(v23 + 64) = v24;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v23 + 80) + 40))(*(_QWORD *)(v23 + 80), v11, *(_QWORD *)(v23 + 72) - v11);
        }
        MEMORY[0x1A1AF4E00](v23, 0x1020C4010FC18DELL);
      }
      v10 = v35 + 1;
      if (v35 == 7)
        return &v9->u64[1] == (unint64_t *)v34;
    }
    i64 = (uint64_t *)v9;
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == v2)
      return 1;
  }
}

uint64_t __Block_byref_object_copy__4918(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__4919(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineBatchKey>,std::equal_to<md::RouteLineBatchKey>,true>,std::__unordered_map_equal<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineBatchKey>,std::hash<md::RouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>>>::~__hash_table(a1 + 48);
}

uint64_t __Block_byref_object_copy__5_4920(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__6_4921(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::DottedRouteLineBatchKey>,std::equal_to<md::DottedRouteLineBatchKey>,true>,std::__unordered_map_equal<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::DottedRouteLineBatchKey>,std::hash<md::DottedRouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>>>::~__hash_table(a1 + 48);
}

md::RouteLineRibbon *md::RouteLineRibbon::RouteLineRibbon(md::RouteLineRibbon *this, unint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  *(_OWORD *)((char *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 7) = a2;
  *(_QWORD *)this = off_1E42AF588;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  if (a2)
  {
    *((_QWORD *)this + 11) = a2;
    {
      v8 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v8, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v5 = 12 * a2;
    *((_QWORD *)this + 9) = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 12 * a2, 8);
    *((_BYTE *)this + 64) = 1;
    *((_WORD *)this + 48) = 0;
    *(_QWORD *)this = off_1E4290BA8;
    *(_QWORD *)((char *)this + 100) = 0;
    *(_QWORD *)((char *)this + 116) = 0;
    *(_QWORD *)((char *)this + 108) = 0;
    *((_DWORD *)this + 31) = 0;
    if (a2 >= 0x1555555555555556)
      abort();
    v6 = (char *)operator new(12 * a2);
    *((_QWORD *)this + 13) = v6;
    *((_QWORD *)this + 15) = &v6[12 * a2];
    bzero(v6, 12 * ((v5 - 12) / 0xCuLL) + 12);
    *((_QWORD *)this + 14) = &v6[12 * ((v5 - 12) / 0xCuLL) + 12];
  }
  else
  {
    *((_WORD *)this + 48) = 0;
    *(_QWORD *)this = off_1E4290BA8;
    *(_QWORD *)((char *)this + 100) = 0;
    *(_QWORD *)((char *)this + 116) = 0;
    *(_QWORD *)((char *)this + 108) = 0;
    *((_DWORD *)this + 31) = 0;
  }
  return this;
}

void sub_19F63BF44(_Unwind_Exception *a1)
{
  uint64_t v1;

  md::Ribbons::SmoothRibbon<gm::Matrix<float,3,1>>::~SmoothRibbon(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineBatchKey>,std::equal_to<md::RouteLineBatchKey>,true>,std::__unordered_map_equal<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineBatchKey>,std::hash<md::RouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::RouteLineBatchKey,std::piecewise_construct_t const&,std::tuple<md::RouteLineBatchKey const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v43;
  uint64_t v44;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = a1 + 2;
  v12 = operator new(0x38uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v12[3] = 0;
  v12[4] = 0;
  v12[5] = 0;
  {
    v44 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v44, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v12[6] = mdm::Allocator::instance(void)::alloc;
  v17 = (float)(unint64_t)(a1[3] + 1);
  v18 = *((float *)a1 + 8);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v9 = a1[1];
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_60;
      v33 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime >= v9)
      {
        v9 = a1[1];
LABEL_60:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_73;
      }
      if (!prime)
      {
        v43 = (void *)*a1;
        *a1 = 0;
        if (v43)
          operator delete(v43);
        v9 = 0;
        a1[1] = 0;
        goto LABEL_60;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = (void *)*a1;
    *a1 = (uint64_t)v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v25++) = 0;
    while (prime != v25);
    v26 = (_QWORD *)*v15;
    if (!*v15)
    {
LABEL_59:
      v9 = prime;
      goto LABEL_60;
    }
    v27 = v26[1];
    v28 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v29 = v27 & v28;
      *(_QWORD *)(*a1 + 8 * v29) = v15;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v31 = i[1] & v28;
        if (v31 == v29)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v31))
        {
          *v26 = *i;
          v32 = 8 * v31;
          *i = **(_QWORD **)(*a1 + v32);
          **(_QWORD **)(*a1 + v32) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v31) = v26;
          v26 = i;
          v29 = v31;
        }
      }
      goto LABEL_59;
    }
    if (v27 >= prime)
      v27 %= prime;
    *(_QWORD *)(*a1 + 8 * v27) = v15;
    v36 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_59;
    while (1)
    {
      v38 = v36[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 != v27)
      {
        if (!*(_QWORD *)(*a1 + 8 * v38))
        {
          *(_QWORD *)(*a1 + 8 * v38) = v26;
          goto LABEL_64;
        }
        *v26 = *v36;
        v37 = 8 * v38;
        *v36 = **(_QWORD **)(*a1 + v37);
        **(_QWORD **)(*a1 + v37) = v36;
        v36 = v26;
      }
      v38 = v27;
LABEL_64:
      v26 = v36;
      v36 = (_QWORD *)*v36;
      v27 = v38;
      if (!v36)
        goto LABEL_59;
    }
  }
LABEL_73:
  v39 = *a1;
  v40 = *(_QWORD **)(*a1 + 8 * v3);
  if (v40)
  {
    *v12 = *v40;
LABEL_81:
    *v40 = v12;
    goto LABEL_82;
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v39 + 8 * v3) = v15;
  if (*v12)
  {
    v41 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v41 >= v9)
        v41 %= v9;
    }
    else
    {
      v41 &= v9 - 1;
    }
    v40 = (_QWORD *)(*a1 + 8 * v41);
    goto LABEL_81;
  }
LABEL_82:
  ++a1[3];
  return v12;
}

void sub_19F63C464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (***v30)(_QWORD);
  void (***v31)(_QWORD);
  unsigned __int8 v32;
  uint64_t v33;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v6 = v9 + v8;
    if (v9)
    {
      v11 = *a2;
      *a2 = 0;
      *v10 = v11;
    }
  }
  else
  {
    v10 = (_QWORD *)(8 * v2);
  }
  v12 = v10 + 1;
  v13 = *(char **)a1;
  v14 = *(char **)(a1 + 8);
  if (v14 == *(char **)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_32;
  }
  v15 = (unint64_t)&v14[-*(_QWORD *)a1 - 8];
  if (v15 <= 0x57
    || ((v16 = (v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         v17 = (unint64_t)&v14[v16],
         v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (v19 = v18 >= v14)
      : (v19 = 1),
        !v19))
  {
    v21 = *(char **)(a1 + 8);
    do
    {
LABEL_22:
      v27 = *((_QWORD *)v21 - 1);
      v21 -= 8;
      *(_QWORD *)v21 = 0;
      *--v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  v20 = (v15 >> 3) + 1;
  v21 = &v14[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v22 = v10 - 2;
  v23 = v14 - 32;
  v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v26 = *(_OWORD *)v23;
    v25 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 32;
    *(v22 - 1) = v26;
    *v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_22;
LABEL_23:
  v14 = *(char **)a1;
  v28 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  v29 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    v31 = (void (***)(_QWORD))*((_QWORD *)v28 - 1);
    v28 -= 8;
    v30 = v31;
    *(_QWORD *)v28 = 0;
    if (v31)
    {
      (**v30)(v30);
      {
        v33 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v33, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      (*(void (**)(uint64_t, void (***)(_QWORD), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 40))(mdm::Allocator::instance(void)::alloc, v30, 128);
    }
  }
LABEL_32:
  if (v14)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v29 - (_QWORD)v14);
  return v12;
}

uint64_t ___ZN2md16RouteRenderLayer19buildRouteLineLayerERKNS_13LayoutContextERKNSt3__110shared_ptrINS_16RouteLineOverlayEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  char v12[32];

  v4 = **(_QWORD **)(a1 + 40);
  v5 = (_QWORD *)operator new();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = **(uint64_t ***)(a1 + 40);
  v12[0] = 0;
  v12[24] = 0;
  md::RibbonLayer<md::Ribbons::RouteLineRibbonDescriptor>::RibbonLayer((uint64_t)v5, a2, *(_QWORD **)(v6 + 64), v7 + 27, v7 + 29, v12);
  *v5 = &off_1E428FCC8;
  v5[36] = v7[31];
  v8 = v7[32];
  v5[37] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v5[38] = 0;
  *(_QWORD *)((char *)v5 + 310) = 0;
  result = *(_QWORD *)(v4 + 320);
  *(_QWORD *)(v4 + 320) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19F63C7AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10A1C4040AFBFB1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2md16RouteRenderLayer19buildRouteLineLayerERKNS_13LayoutContextERKNSt3__110shared_ptrINS_16RouteLineOverlayEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9[32];

  v4 = **(_QWORD **)(a1 + 40);
  v5 = operator new();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = **(_QWORD **)(a1 + 40);
  v9[0] = 0;
  v9[24] = 0;
  md::RibbonLayer<md::Ribbons::DottedRouteLineRibbonDescriptor>::RibbonLayer(v5, a2, *(_QWORD **)(v6 + 64), (uint64_t *)(v7 + 216), (uint64_t *)(v7 + 232), v9);
  *(_QWORD *)v5 = &off_1E4298D28;
  *(_QWORD *)(v5 + 152) = 0;
  *(_DWORD *)(v5 + 160) = 0;
  result = *(_QWORD *)(v4 + 336);
  *(_QWORD *)(v4 + 336) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19F63C88C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10A1C40F1F7E4C6);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::DottedRouteLineBatchKey>,std::equal_to<md::DottedRouteLineBatchKey>,true>,std::__unordered_map_equal<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::DottedRouteLineBatchKey>,std::hash<md::DottedRouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  _BYTE *v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  malloc_zone_t *zone;
  void (***v8)(_QWORD, void *);
  void (***v9)(_QWORD, void *);
  unsigned __int8 v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  void *v14;
  uint64_t v16;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      v5 = v2[3];
      if (v5)
      {
        v6 = v2[4];
        v3 = v2[3];
        if (v6 != v5)
        {
          do
          {
            v9 = (void (***)(_QWORD, void *))*--v6;
            v8 = v9;
            *v6 = 0;
            if (v9)
            {
              (**v8)(v8, v3);
              {
                v11 = operator new();
                *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v11 + 24) = "VectorKitLabels";
                *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v11 = &off_1E42B5668;
                *(_QWORD *)(v11 + 8) = "VectorKitLabels";
                *(_OWORD *)(v11 + 72) = 0u;
                *(_OWORD *)(v11 + 88) = 0u;
                *(_OWORD *)(v11 + 104) = 0u;
                *(_OWORD *)(v11 + 120) = 0u;
                *(_OWORD *)(v11 + 136) = 0u;
                *(_OWORD *)(v11 + 152) = 0u;
                *(_OWORD *)(v11 + 168) = 0u;
                *(_OWORD *)(v11 + 184) = 0u;
                *(_OWORD *)(v11 + 200) = 0u;
                *(_OWORD *)(v11 + 216) = 0u;
                *(_OWORD *)(v11 + 232) = 0u;
                *(_QWORD *)(v11 + 248) = 0;
                v16 = v11;
                *(_OWORD *)(v11 + 56) = 0u;
                v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
                if ((_DWORD)v12)
                  geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, void *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                              + 40))(mdm::Allocator::instance(void)::alloc, v8, 112);
            }
          }
          while (v6 != v5);
          v3 = v2[3];
        }
        v2[4] = v5;
        (*(void (**)(void *, _BYTE *, int64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v3, (_BYTE *)v2[5] - v3);
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v14 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v14)
    operator delete(v14);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineBatchKey>,std::equal_to<md::RouteLineBatchKey>,true>,std::__unordered_map_equal<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineBatchKey>,std::hash<md::RouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  _BYTE *v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  malloc_zone_t *zone;
  void (***v8)(_QWORD, void *);
  void (***v9)(_QWORD, void *);
  unsigned __int8 v10;
  uint64_t v11;
  geo::read_write_lock *v12;
  const char *v13;
  void *v14;
  uint64_t v16;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      v5 = v2[3];
      if (v5)
      {
        v6 = v2[4];
        v3 = v2[3];
        if (v6 != v5)
        {
          do
          {
            v9 = (void (***)(_QWORD, void *))*--v6;
            v8 = v9;
            *v6 = 0;
            if (v9)
            {
              (**v8)(v8, v3);
              {
                v11 = operator new();
                *(_QWORD *)(v11 + 16) = 0x5ED09DD50000000FLL;
                *(_QWORD *)(v11 + 24) = "VectorKitLabels";
                *(_OWORD *)(v11 + 32) = xmmword_19FFB2E80;
                *(_QWORD *)v11 = &off_1E42B5668;
                *(_QWORD *)(v11 + 8) = "VectorKitLabels";
                *(_OWORD *)(v11 + 72) = 0u;
                *(_OWORD *)(v11 + 88) = 0u;
                *(_OWORD *)(v11 + 104) = 0u;
                *(_OWORD *)(v11 + 120) = 0u;
                *(_OWORD *)(v11 + 136) = 0u;
                *(_OWORD *)(v11 + 152) = 0u;
                *(_OWORD *)(v11 + 168) = 0u;
                *(_OWORD *)(v11 + 184) = 0u;
                *(_OWORD *)(v11 + 200) = 0u;
                *(_OWORD *)(v11 + 216) = 0u;
                *(_OWORD *)(v11 + 232) = 0u;
                *(_QWORD *)(v11 + 248) = 0;
                v16 = v11;
                *(_OWORD *)(v11 + 56) = 0u;
                v12 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v11 + 56), 0);
                if ((_DWORD)v12)
                  geo::read_write_lock::logFailure(v12, (uint64_t)"initialization", v13);
                zone = malloc_create_zone(0, 0);
                *(_QWORD *)(v16 + 48) = zone;
                malloc_set_zone_name(zone, "VectorKitLabels");
                *(_QWORD *)(v16 + 256) = os_log_create("com.apple.VectorKit", "Memory");
                mdm::Allocator::instance(void)::alloc = v16;
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, void *), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                              + 40))(mdm::Allocator::instance(void)::alloc, v8, 128);
            }
          }
          while (v6 != v5);
          v3 = v2[3];
        }
        v2[4] = v5;
        (*(void (**)(void *, _BYTE *, int64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v3, (_BYTE *)v2[5] - v3);
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v14 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v14)
    operator delete(v14);
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void (***v6)(_QWORD, uint64_t);
  void (***v7)(_QWORD, uint64_t);
  unsigned __int8 v8;
  uint64_t v9;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD **)(v2 + 32);
        v5 = *(_QWORD *)(v2 + 24);
        if (v4 != v3)
        {
          do
          {
            v7 = (void (***)(_QWORD, uint64_t))*--v4;
            v6 = v7;
            *v4 = 0;
            if (v7)
            {
              (**v6)(v6, v5);
              {
                v9 = operator new();
                mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
              }
              (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                               + 40))(mdm::Allocator::instance(void)::alloc, v6, 128);
            }
          }
          while (v4 != v3);
          v5 = *(_QWORD *)(v2 + 24);
        }
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v5, *(_QWORD *)(v2 + 40) - v5);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void md::RibbonPointsSource::~RibbonPointsSource(md::RibbonPointsSource *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4295EE8;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4295EE8;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RibbonPointsSource::operator[](uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) + 12 * a2;
}

uint64_t md::RibbonPointsSource::speed(md::RibbonPointsSource *this, uint64_t a2)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 5) + a2);
}

unint64_t md::RibbonPointsSource::size(md::RibbonPointsSource *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 2);
}

void md::RouteLineRibbon::~RouteLineRibbon(md::RouteLineRibbon *this)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E4290BA8;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
}

{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E4290BA8;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = off_1E42AF588;
  if (*((_BYTE *)this + 64))
  {
    {
      v4 = operator new();
      *(_QWORD *)(v4 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v4 + 24) = "VectorKitLabels";
      *(_OWORD *)(v4 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v4 = &off_1E42B5668;
      *(_QWORD *)(v4 + 8) = "VectorKitLabels";
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 136) = 0u;
      *(_OWORD *)(v4 + 152) = 0u;
      *(_OWORD *)(v4 + 168) = 0u;
      *(_OWORD *)(v4 + 184) = 0u;
      *(_OWORD *)(v4 + 200) = 0u;
      *(_OWORD *)(v4 + 216) = 0u;
      *(_OWORD *)(v4 + 232) = 0u;
      *(_QWORD *)(v4 + 248) = 0;
      *(_OWORD *)(v4 + 56) = 0u;
      v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
      if ((_DWORD)v5)
        geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v4 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v4;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *((_QWORD *)this + 9), 0);
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDAD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDAD8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RouteLayout", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CDA90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CDA90;
  a2[1] = v2;
  return result;
}

md::RouteLayoutInfo **std::unique_ptr<md::RouteLayoutInfo>::~unique_ptr[abi:nn180100](md::RouteLayoutInfo **a1)
{
  md::RouteLayoutInfo *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::RouteLayoutInfo::~RouteLayoutInfo(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

md::CRouteRenderResources **std::unique_ptr<md::CRouteRenderResources>::~unique_ptr[abi:nn180100](md::CRouteRenderResources **a1)
{
  md::CRouteRenderResources *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::CRouteRenderResources::~CRouteRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

void md::RouteRenderLayer::setElevatedRoutelineMatrix(md::LayoutContext *a1, uint64_t *a2)
{
  double v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  _QWORD *v8;
  int8x8_t v9;
  _QWORD *v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __int128 v32;
  float64x2_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v44;
  float v45;
  uint8x8_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _BYTE v69[40];
  __int128 v70;
  __int128 v71;
  _QWORD v72[3];
  float64x2_t v73;
  __int128 v74;
  _OWORD v75[2];
  float64x2_t v76;
  float64x2_t v77[2];
  __int128 v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  __int128 v84;
  double v85;
  double v86;
  double v87;
  double v88;
  _OWORD v89[2];
  double v90[12];
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[40];
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  __int128 v100;
  double v101;
  uint64_t v102;

  *(float *)&v4 = md::LayoutContext::frameState(a1);
  v6 = *(unsigned __int8 *)(v5 + 128) - 1;
  v7 = *(void **)(*a2 + 160);
  if (v7)
  {
    objc_msgSend(v7, "bounds", v4);
    if (v6 < 3)
      goto LABEL_4;
    goto LABEL_3;
  }
  memset(v77, 0, sizeof(v77));
  v76 = 0u;
  if (v6 >= 3)
  {
LABEL_3:
    v77[0].f64[0] = v77[0].f64[0] * 0.0000000249532021;
    v77[1].f64[1] = v77[1].f64[1] * 0.0000000249532021;
  }
LABEL_4:
  v8 = (_QWORD *)*((_QWORD *)a1 + 1);
  v9 = (int8x8_t)v8[1];
  if ((*(_QWORD *)&v9 & (*(_QWORD *)&v9 - 1)) != 0)
  {
    v11 = 0x8BD499FBD96FBB9ELL;
    if (*(_QWORD *)&v9 <= 0x8BD499FBD96FBB9ELL)
      v11 = 0x8BD499FBD96FBB9ELL % *(_QWORD *)&v9;
    v10 = *(_QWORD **)(*v8 + 8 * v11);
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v10[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    v10 = *(_QWORD **)(*v8 + 8 * ((*(_QWORD *)&v9 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        v10 = (_QWORD *)*v10;
      while (v10[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v10[2] != 0x8BD499FBD96FBB9ELL);
  }
  v12 = (float)(*(float *)(*(_QWORD *)(v10[5] + 32) + 16) * *(float *)(*(_QWORD *)(v10[5] + 32) + 20));
  v13 = v77[0].f64[0] * v12;
  v14 = v77[1].f64[1] * v12;
  v77[0].f64[0] = v13;
  v77[1].f64[1] = v14;
  v15 = v76;
  v75[0] = v76;
  v75[1] = *(float64x2_t *)((char *)v77 + 8);
  if (v6 > 2)
  {
    v32 = 0uLL;
    memset(v72, 0, sizeof(v72));
    v71 = 0u;
    v70 = 0u;
    memset(&v69[8], 0, 32);
    v33 = vsubq_f64(*(float64x2_t *)((char *)v77 + 8), v76);
    v35 = *(unint64_t *)&v33.f64[1];
    v33.f64[1] = 0.0;
    *((_QWORD *)&v38 + 1) = 0;
    *(double *)&v38 = v14 - v13;
    __asm { FMOV            V6.2D, #1.0 }
    *(double *)&_Q6 = v13;
    v37 = 0;
    v34 = 0;
    v36 = 0uLL;
  }
  else
  {
    v89[0] = v76;
    v89[1] = *(float64x2_t *)((char *)v77 + 8);
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v78, (double *)v89, v13, v14);
    v95 = 0u;
    v97 = 0;
    v99 = 0;
    v96 = 0u;
    memset(&v94[8], 0, 32);
    v100 = v84;
    v101 = v85;
    v102 = 0x3FF0000000000000;
    *(double *)v94 = v86 - *(double *)&v84;
    *(double *)&v95 = v87 - *((double *)&v84 + 1);
    v98 = v88 - v85;
    v16 = v81;
    v17 = v82;
    v18 = v16 + v16;
    v19 = (v16 + v16) * v16;
    v20 = (v17 + v17) * v17;
    v21 = v80;
    v22 = (v21 + v21) * v81;
    v23 = (v17 + v17) * v83;
    v24 = v22 - v23;
    v25 = v82 * (v21 + v21);
    v26 = v83 * v18;
    v27 = v23 + v22;
    v28 = v83 * v18 + v25;
    v29 = 1.0 - (v21 + v21) * v21;
    v30 = v18 * v82;
    v31 = v83 * (v21 + v21);
    v90[0] = 1.0 - (v19 + v20);
    v90[1] = v27;
    v90[4] = v24;
    v90[5] = v29 - v20;
    v90[8] = v28;
    v90[9] = v30 - v31;
    v90[2] = v25 - v26;
    v90[6] = v31 + v30;
    v90[10] = v29 - v19;
    v90[3] = 0.0;
    v90[7] = 0.0;
    v90[11] = 0.0;
    v91 = v78;
    v92 = v79;
    v93 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)v69, v90, (double *)v94);
    v33 = *(float64x2_t *)v69;
    v32 = *(_OWORD *)&v69[16];
    v34 = *(_QWORD *)&v69[32];
    v35 = v70;
    v36 = v71;
    v37 = v72[0];
    v38 = *(_OWORD *)&v72[1];
    v15 = v73;
    _Q6 = v74;
    v8 = (_QWORD *)*((_QWORD *)a1 + 1);
    v9 = (int8x8_t)v8[1];
  }
  v44 = *a2;
  *(float64x2_t *)(v44 + 8) = v33;
  *(_OWORD *)(v44 + 24) = v32;
  *(_QWORD *)(v44 + 40) = v34;
  *(_OWORD *)(v44 + 48) = v35;
  *(_OWORD *)(v44 + 64) = v36;
  *(_QWORD *)(v44 + 80) = v37;
  *(_OWORD *)(v44 + 88) = v38;
  *(float64x2_t *)(v44 + 104) = v15;
  *(_OWORD *)(v44 + 120) = _Q6;
  v45 = 0.0;
  if (v9)
  {
    v46 = (uint8x8_t)vcnt_s8(v9);
    v46.i16[0] = vaddlv_u8(v46);
    if (v46.u32[0] > 1uLL)
    {
      v47 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v9;
      if (*(_QWORD *)&v9 > 0x1B8B241A8D896A1DuLL)
        v47 = 0x1B8B241A8D896A1DLL;
    }
    else
    {
      v47 = (*(_QWORD *)&v9 - 1) & 0x1B8B241A8D896A1DLL;
    }
    v48 = *(_QWORD **)(*v8 + 8 * v47);
    if (v48)
    {
      v49 = (_QWORD *)*v48;
      if (v49)
      {
        if (v46.u32[0] < 2uLL)
        {
          v50 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v52 = v49[1];
            if (v52 == 0x1B8B241A8D896A1DLL)
            {
              if (v49[2] == 0x1B8B241A8D896A1DLL)
                goto LABEL_40;
            }
            else if ((v52 & v50) != v47)
            {
              goto LABEL_43;
            }
            v49 = (_QWORD *)*v49;
            if (!v49)
              goto LABEL_43;
          }
        }
        do
        {
          v51 = v49[1];
          if (v51 == 0x1B8B241A8D896A1DLL)
          {
            if (v49[2] == 0x1B8B241A8D896A1DLL)
            {
LABEL_40:
              v53 = v49[5];
              if (*(_QWORD *)(v53 + 8) == 0x1B8B241A8D896A1DLL)
              {
                v54 = *(_QWORD *)(v53 + 32);
                if (v54)
                  v45 = *(float *)(v54 + 88);
              }
              break;
            }
          }
          else
          {
            if (v51 >= *(_QWORD *)&v9)
              v51 %= *(_QWORD *)&v9;
            if (v51 != v47)
              break;
          }
          v49 = (_QWORD *)*v49;
        }
        while (v49);
      }
    }
  }
LABEL_43:
  v55 = *(_QWORD **)(v44 + 232);
  if (!v55)
  {
    md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v94);
    v56 = *a2;
    v57 = *(_OWORD *)v94;
    *(_OWORD *)v94 = 0uLL;
    v58 = *(std::__shared_weak_count **)(v56 + 240);
    *(_OWORD *)(v56 + 232) = v57;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldaxr(p_shared_owners);
      while (__stlxr(v60 - 1, p_shared_owners));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = *(std::__shared_weak_count **)&v94[8];
    if (*(_QWORD *)&v94[8])
    {
      v62 = (unint64_t *)(*(_QWORD *)&v94[8] + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v44 = *a2;
    v55 = *(_QWORD **)(*a2 + 232);
  }
  v64 = *(std::__shared_weak_count **)(v44 + 240);
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  md::GeometryLogic::setTransformConstantDataWithMercatorRect(v55, (double *)v75, v6 < 3, v77[0].f64[0], v77[1].f64[1], v45);
  if (v64)
  {
    v67 = (unint64_t *)&v64->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
}

void sub_19F63D93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::LabelLayerDataSource::~LabelLayerDataSource(md::LabelLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  md::LabelLayerDataSource *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42990B0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (md::LabelLayerDataSource *)*((_QWORD *)this + 100);
  if (v3 == (md::LabelLayerDataSource *)((char *)this + 776))
  {
    v4 = 4;
    v3 = (md::LabelLayerDataSource *)((char *)this + 776);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  md::LabelLayerDataSource *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E42990B0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 102);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (md::LabelLayerDataSource *)*((_QWORD *)this + 100);
  if (v3 == (md::LabelLayerDataSource *)((char *)this + 776))
  {
    v4 = 4;
    v3 = (md::LabelLayerDataSource *)((char *)this + 776);
  }
  else
  {
    if (!v3)
    {
LABEL_8:
      *((_QWORD *)this + 94) = &off_1E42B4D50;

      md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
      JUMPOUT(0x1A1AF4E00);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_8;
}

void altitude::SkyRequestManager::~SkyRequestManager(altitude::SkyRequestManager *this)
{
  *(_QWORD *)this = off_1E42C33A8;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::SkyRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD *)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

{
  *(_QWORD *)this = off_1E42C33A8;
  while (*((_QWORD *)this + 10))
    (*(void (**)(altitude::SkyRequestManager *, uint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)this + 8) + 32);
  std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((_QWORD *)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  int v12;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 != a1 + 72)
  {
    do
    {
      v6 = *(_QWORD **)(v4 + 8);
      v7 = (_QWORD *)v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = *(_QWORD *)(v4 + 56);
      if (atomic_load((unsigned int *)(v10 + 128)))
        *(_DWORD *)(v10 + 180) = a2;
      pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 152));
      v12 = *(_DWORD *)(v10 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 152));
      if ((v12 & 1) != 0 && *(_BYTE *)(v10 + 176) && *(_DWORD *)(v10 + 180) != a2
        || (a2 - *(_DWORD *)(v10 + 180)) > *(_DWORD *)(v10 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((_QWORD *)(a1 + 64), v4);
      }
      v4 = (uint64_t)v8;
    }
    while (v8 != (_QWORD *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = *(_QWORD **)(a1 + 64);
  if (v4 != (_QWORD *)(a1 + 72))
  {
    while (v4[7] != a2)
    {
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
      if (v6 == (_QWORD *)(a1 + 72))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((_QWORD *)(a1 + 64), (uint64_t)v4);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, const void **a2)
{
  uint64_t *v4;
  uint64_t v5;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v4)
  {
    v5 = (uint64_t)v4;
    (*(void (**)(uint64_t))(*(_QWORD *)v4[7] + 16))(v4[7]);
    std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((_QWORD *)(a1 + 64), v5);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 64))(a2);
  v4 = a1[6];
  if (v4)
  {
    v5 = *a2;
    v6 = (std::__shared_weak_count *)a2[1];
    v10[0] = v5;
    v10[1] = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      karo::JobManager::queueJob(v4, v10);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v10);
    }
  }
}

_QWORD *altitude::SkyRequestManager::createRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  _QWORD *result;

  v6 = operator new();
  v7 = karo::Job::Job(v6, *(_QWORD *)(a1 + 32));
  *(_BYTE *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 180) = 0xFFFFFFFF00000000;
  *(_QWORD *)v7 = &off_1E42C3990;
  v8 = (std::string *)(v7 + 192);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_WORD *)(v6 + 248) = 0;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *a3 = v6;
  result = (_QWORD *)operator new();
  *result = &off_1E42E84E8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = (uint64_t)result;
  return result;
}

void sub_19F63DE9C(_Unwind_Exception *a1)
{
  karo::Job *v1;

  karo::Job::~Job(v1);
  _Unwind_Resume(a1);
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unsigned int *v27;
  std::__shared_weak_count *v28;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4)
    a4 = *(_DWORD *)(a1 + 88) + 1;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v27, a1, v8, v8 + 24);
      v10 = v27;
      v11 = *(_DWORD *)(v8 + 28);
      v12 = *(_DWORD *)(v8 + 32);
      v13 = *(_BYTE *)(v8 + 36);
      v14 = atomic_load(v27 + 4);
      if (v14 != v11)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
      v10[45] = a4;
      v10[46] = v12;
      *((_BYTE *)v10 + 176) = v13;
      v15 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
      {
        v22 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v27, (uint64_t)v28);
      }
      else
      {
        *v15 = &off_1E42C2D08;
        v16 = v27;
        v15[1] = v27;
        v17 = (uint64_t)v28;
        v15[2] = v28;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v16 = (unsigned int *)v15[1];
        }
        if (v16)
        {
          v20 = v16 + 32;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        v22 = v15 + 3;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v23 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v8 += 40;
    }
    while (v8 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int *v28;
  std::__shared_weak_count *v29;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
    a3 = *(_DWORD *)(a1 + 88) + 1;
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(&v28, a1, a2, a7);
  v16 = v28;
  v17 = atomic_load(v28 + 4);
  if (v17 != (_DWORD)a4)
    (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v28 + 24))(v28, a4);
  v16[45] = a3;
  v16[46] = a5;
  *((_BYTE *)v16 + 176) = a6;
  v18 = v28;
  v19 = v29;
  *a8 = &off_1E42C2D08;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (v18)
  {
    v22 = v18 + 32;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, const void **a2, unsigned int a3)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) == v6)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    v8 = v6[7];
    v7 = (std::__shared_weak_count *)v6[8];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v8)
    {
      karo::Job::waitToFinish((karo::Job *)v8, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
      v11 = *(_DWORD *)(v8 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
      if (!v7)
        return v11;
    }
    else
    {
      v11 = 0;
      if (!v7)
        return v11;
    }
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v11;
}

void karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::getRequest(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  const void *v19;
  size_t v20;
  uint64_t **v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  int v30;
  int v31;
  _QWORD *v32;
  std::string *v33;
  _QWORD *v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  _QWORD **v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;

  *a4 = 0;
  a4[1] = 0;
  v8 = (_QWORD **)(a1 + 8);
  v9 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>((uint64_t)(a1 + 8), (const void **)a2);
  v10 = (uint64_t **)v9;
  if (a1 + 9 != v9)
  {
    v12 = v9[7];
    v11 = v9[8];
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *a4 = v12;
    a4[1] = v11;
    return;
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 64))(&v53, a1, a2, a3);
  v16 = v53;
  v15 = v54;
  *a4 = v53;
  a4[1] = (uint64_t)v15;
  v17 = *v10;
  v18 = *(_BYTE *)(a2 + 23);
  v51 = v16;
  v52 = v15;
  v49 = v18;
  v50 = v8;
  if (*v10)
  {
    if (v18 >= 0)
      v19 = (const void *)a2;
    else
      v19 = *(const void **)a2;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a2 + 23);
    else
      v20 = *(_QWORD *)(a2 + 8);
    while (1)
    {
      v22 = v17;
      v25 = v17[4];
      v23 = v17 + 4;
      v24 = (uint64_t *)v25;
      v26 = *((char *)v23 + 23);
      if (v26 >= 0)
        v27 = v23;
      else
        v27 = v24;
      if (v26 >= 0)
        v28 = *((unsigned __int8 *)v23 + 23);
      else
        v28 = v23[1];
      if (v28 >= v20)
        v29 = v20;
      else
        v29 = v28;
      v30 = memcmp(v19, v27, v29);
      if (v30)
      {
        if (v30 < 0)
          goto LABEL_14;
LABEL_28:
        v31 = memcmp(v27, v19, v29);
        if (v31)
        {
          if ((v31 & 0x80000000) == 0)
            goto LABEL_42;
        }
        else if (v28 >= v20)
        {
LABEL_42:
          v32 = v22;
          v37 = v51;
          v36 = v52;
          if (v52)
            goto LABEL_43;
          goto LABEL_45;
        }
        v17 = (uint64_t *)v22[1];
        if (!v17)
        {
          v21 = (uint64_t **)(v22 + 1);
          goto LABEL_35;
        }
      }
      else
      {
        if (v20 >= v28)
          goto LABEL_28;
LABEL_14:
        v17 = (uint64_t *)*v22;
        v21 = (uint64_t **)v22;
        if (!*v22)
          goto LABEL_35;
      }
    }
  }
  v21 = v10;
  v22 = v10;
LABEL_35:
  v32 = operator new(0x48uLL);
  v33 = (std::string *)(v32 + 4);
  if (v49 < 0)
  {
    std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v32[6] = *(_QWORD *)(a2 + 16);
  }
  v32[7] = 0;
  v32[8] = 0;
  *v32 = 0;
  v32[1] = 0;
  v32[2] = v22;
  *v21 = v32;
  v34 = (_QWORD *)**v50;
  v35 = v32;
  if (v34)
  {
    *v50 = v34;
    v35 = *v21;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v10, v35);
  ++a1[10];
  v37 = v51;
  v36 = v52;
  if (v52)
  {
LABEL_43:
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
  }
LABEL_45:
  v40 = (std::__shared_weak_count *)v32[8];
  v32[7] = v37;
  v32[8] = v36;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = a1[6];
  if (v43)
  {
    v44 = *a4;
    v45 = (std::__shared_weak_count *)a4[1];
    v53 = v44;
    v54 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      karo::JobManager::queueJob(v43, &v53);
      do
        v48 = __ldaxr(v46);
      while (__stlxr(v48 - 1, v46));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    else
    {
      karo::JobManager::queueJob(v43, &v53);
    }
  }
}

uint64_t altitude::SkyRequestManager::requestSky(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t altitude::SkyRequestManager::getDrawable(pthread_mutex_t **a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  pthread_mutex_lock(a1[5]);
  (*(void (**)(uint64_t *__return_ptr, pthread_mutex_t **, uint64_t, _QWORD))&(*a1)[1].__opaque[24])(&v17, a1, a2, 0);
  v7 = v17;
  v6 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7))
  {
    v10 = 0;
    if (!v6)
      goto LABEL_15;
    goto LABEL_11;
  }
  if (a3)
    *(_BYTE *)(v7 + 248) = 1;
  v10 = *(_QWORD *)(v7 + 240);
  if (v6)
  {
LABEL_11:
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_15:
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  pthread_mutex_unlock(a1[5]);
  return v10;
}

void std::__shared_ptr_pointer<altitude::SkyLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::SkyLoadJob>,std::allocator<altitude::SkyLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<altitude::SkyLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::SkyLoadJob>,std::allocator<altitude::SkyLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  if (*(char *)(a2 + 55) < 0)
LABEL_14:
    operator delete(*(void **)(a2 + 32));
LABEL_15:
  operator delete((void *)a2);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*(_QWORD *)(a1 + 8));
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_8:
        operator delete((void *)a1);
        return;
      }
    }
    operator delete(*(void **)(a1 + 32));
    goto LABEL_8;
  }
}

void altitude::AnimationManager::~AnimationManager(altitude::AnimationManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 == v3)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 5);
    if (!v2)
      goto LABEL_15;
    goto LABEL_8;
  }
  do
  {
    if (*v2)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
      v3 = (_QWORD *)*((_QWORD *)this + 6);
    }
    v2 += 5;
  }
  while (v2 != v3);
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
LABEL_8:
    v4 = v2;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete((void *)*(v3 - 3));
        v3 -= 5;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
LABEL_15:
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x1060C4029F9A71ELL);
}

void ggl::VSTextured::CompositingPipelineState::~CompositingPipelineState(ggl::VSTextured::CompositingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VSTextured::CompositingPipelineSetup::~CompositingPipelineSetup(ggl::VSTextured::CompositingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::VSTextured::CompositingPipelineSetup::constantDataIsEnabled(ggl::VSTextured::CompositingPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::VSTextured::CompositingPipelineSetup::textureIsEnabled(ggl::VSTextured::CompositingPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

void ggl::VSTextured::PassthroughPipelineState::~PassthroughPipelineState(ggl::VSTextured::PassthroughPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VSTextured::PassthroughPipelineSetup::~PassthroughPipelineSetup(ggl::VSTextured::PassthroughPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VSTextured::PassthroughPipelineSetup::constantDataIsEnabled(ggl::VSTextured::PassthroughPipelineSetup *this)
{
  return 0;
}

BOOL ggl::VSTextured::PassthroughPipelineSetup::textureIsEnabled(ggl::VSTextured::PassthroughPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void md::RasterTileOverlayResourceFetcher::~RasterTileOverlayResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::RasterTileOverlayResourceFetcher::tileKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  __int128 v9;

  v4 = *(int **)(a3 + 8);
  v5 = v4[2];
  v6 = *v4;
  v7 = v4[1];
  LOBYTE(v9) = GEOTileKeyMakeEmpty();
  *(_QWORD *)((char *)&v9 + 1) = (v6 << 6) | ((unint64_t)(v7 & 0x3FFFFFF) << 32) | v5 & 0x3F | ((unint64_t)*(float *)(a1 + 8) << 58);
  return v9;
}

void md::RasterTileOverlayResourceDecoder::~RasterTileOverlayResourceDecoder(md::RasterTileOverlayResourceDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

void md::RasterTileOverlayResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  const __CFData *v6;
  int v7;
  CGImageSource *v8;
  CGImageSource *v9;
  CGImage *ImageAtIndex;
  size_t Width;
  CGImageAlphaInfo AlphaInfo;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  CGColorSpace *DeviceRGB;
  CGColorSpace *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  unint64_t v32;
  CGContext *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t v37;
  size_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  int v48;
  CGImageAlphaInfo v49;
  char *v50;
  unint64_t Height;
  const __CFData *data;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  CGRect v55;

  if (!*((_BYTE *)a2 + 16)
    || !*(_QWORD *)a2
    || (v6 = (const __CFData *)*(id *)(*(_QWORD *)a2 + 16)) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v7 = *(_DWORD *)(*((_QWORD *)a1 + 1) + 24);
  data = v6;
  if (!-[__CFData length](v6, "length"))
  {
    v15 = (std::__shared_weak_count *)operator new(0x60uLL);
    v16 = v15;
    v15->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    if (v7 <= 0)
      v18 = 12;
    else
      v18 = 6;
    v15->__shared_weak_owners_ = 0;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
    v19 = &v15[1].__vftable;
    ggl::TextureData2D::TextureData2D((uint64_t)&v15[1], 1, 1, 1u, v18, 1);
    v20 = operator new(0xC0uLL);
    v20[1] = 0;
    v20[2] = 0;
    *v20 = &off_1E42DBDD8;
    v21 = gdc::Resource::Resource((uint64_t)(v20 + 3), (uint64_t)a1);
    v20[21] = v19;
    v20[22] = v16;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *((_BYTE *)v20 + 184) = 0;
    *a3 = v21;
    a3[1] = (uint64_t)v20;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (v23)
      goto LABEL_62;
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    v24 = v16;
    goto LABEL_61;
  }
  v8 = CGImageSourceCreateWithData(data, 0);
  v9 = v8;
  if (v8)
  {
    if (CGImageSourceGetCount(v8))
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v9, 0, 0);
      CFRelease(v9);
      if (ImageAtIndex)
      {
        Width = CGImageGetWidth(ImageAtIndex);
        Height = CGImageGetHeight(ImageAtIndex);
        AlphaInfo = CGImageGetAlphaInfo(ImageAtIndex);
        if (v7 < 1)
        {
          v13 = 12;
          v14 = 4;
          goto LABEL_30;
        }
        if (CGImageGetBitsPerComponent(ImageAtIndex) == 16)
        {
          if (AlphaInfo)
          {
            v13 = 7;
            v14 = 4;
            goto LABEL_30;
          }
          v13 = 3;
        }
        else
        {
          if (AlphaInfo == kCGImageAlphaNone)
          {
            v13 = 2;
            v14 = 1;
LABEL_30:
            v25 = (std::__shared_weak_count *)operator new(0x60uLL);
            v25->__shared_owners_ = 0;
            v26 = (unint64_t *)&v25->__shared_owners_;
            v25->__shared_weak_owners_ = 0;
            v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
            v47 = ggl::TextureData2D::TextureData2D((uint64_t)&v25[1], Width, Height, 1u, v13, 0);
            v50 = (char *)((uint64_t (*)(void))v25[1].__on_zero_shared)();
            v49 = AlphaInfo;
            if (v7 < 1)
              DeviceRGB = CGColorSpaceCreateDeviceRGB();
            else
              DeviceRGB = CGColorSpaceCreateDeviceGray();
            v28 = DeviceRGB;
            v48 = v13;
            if ((v13 & 0xFFFFFFFB) == 3)
              v29 = 16;
            else
              v29 = 8;
            v30 = Width;
            v31 = v14 * Width;
            v32 = v30;
            v33 = CGBitmapContextCreate(v50, v30, Height, v29, v31, DeviceRGB, ((v13 & 0xE) != 2) | (((v13 & 0xFFFFFFFB) == 3) << 12));
            CGContextSetBlendMode(v33, kCGBlendModeCopy);
            CGContextSetAlpha(v33, 1.0);
            v55.size.width = (double)v32;
            v55.size.height = (double)Height;
            v55.origin.x = *(CGFloat *)MEMORY[0x1E0C9D538];
            v55.origin.y = *(CGFloat *)(MEMORY[0x1E0C9D538] + 8);
            CGContextDrawImage(v33, v55, ImageAtIndex);
            CGContextRelease(v33);
            CGColorSpaceRelease(v28);
            if (v49)
            {
              if (v48 == 7)
              {
                v34 = 2 * v32 * Height;
                if (v34)
                {
                  v35 = 0;
                  while (!*(_WORD *)&v50[2 * v35 + 2])
                  {
                    v35 += 2;
                    if (v35 >= v34)
                      goto LABEL_42;
                  }
                  goto LABEL_49;
                }
              }
              else
              {
                v38 = 0;
                while (v38 < v31 * Height)
                {
                  v39 = v50[v14 - 1 + v38];
                  v38 += v14;
                  if (v39)
                    goto LABEL_49;
                }
              }
LABEL_42:
              v36 = (std::__shared_weak_count *)operator new(0x60uLL);
              v36->__shared_weak_owners_ = 0;
              v36->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
              v36->__shared_owners_ = 0;
              v53 = ggl::TextureData2D::TextureData2D((uint64_t)&v36[1], 1, 1, 1u, v48, 1);
              v54 = v36;
              do
                v37 = __ldaxr(v26);
              while (__stlxr(v37 - 1, v26));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
              goto LABEL_50;
            }
LABEL_49:
            v53 = v47;
            v54 = v25;
LABEL_50:
            CGImageRelease(ImageAtIndex);
            if (v53)
            {
              v40 = operator new(0xC0uLL);
              v40[1] = 0;
              v40[2] = 0;
              *v40 = &off_1E42DBDD8;
              v41 = gdc::Resource::Resource((uint64_t)(v40 + 3), (uint64_t)a1);
              v42 = v54;
              v40[21] = v53;
              v40[22] = v54;
              if (v54)
              {
                v43 = (unint64_t *)&v54->__shared_owners_;
                do
                  v44 = __ldxr(v43);
                while (__stxr(v44 + 1, v43));
              }
              *((_BYTE *)v40 + 184) = 0;
              *a3 = v41;
              a3[1] = (uint64_t)v40;
            }
            else
            {
              *a3 = 0;
              a3[1] = 0;
              v42 = v54;
            }
            if (!v42)
              goto LABEL_62;
            v45 = (unint64_t *)&v42->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (v46)
              goto LABEL_62;
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            v24 = v42;
LABEL_61:
            std::__shared_weak_count::__release_weak(v24);
            goto LABEL_62;
          }
          v13 = 6;
        }
        v14 = 2;
        goto LABEL_30;
      }
    }
    else
    {
      CFRelease(v9);
    }
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_62:

}

void sub_19F63F264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, char a15, uint64_t a16, char a17)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::RasterTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBDD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RasterTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBDD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::RasterTileResource>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[22];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)a1[4];
  if (v5 != (void *)a1[6])
    free(v5);
}

void std::__shared_ptr_emplace<md::RasterTileOverlayResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDBD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RasterTileOverlayResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDBD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::RasterTileOverlayResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t altitude::TileComponent::onAttach(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t altitude::TileComponent::onDetach(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

void md::DebugDrawContext::addWorldDebugShape(_QWORD *a1, uint64_t a2, int *a3)
{
  char *v5;
  char *v6;
  char *v7;
  float v8;
  int v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  char v67;
  void *__p;
  char *v69;
  uint64_t v70;
  char v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  _QWORD *v76;

  v5 = (char *)a1[10];
  v6 = (char *)a1[11];
  v7 = v5;
  if (v5 != v6)
  {
    v8 = *(float *)a3;
    v9 = *((unsigned __int8 *)a3 + 12);
    if (*((_BYTE *)a3 + 8))
    {
      v7 = (char *)a1[10];
      while (LODWORD(v8) != *(_DWORD *)v7
           || v9 != v7[12]
           || !v7[8]
           || *((float *)a3 + 1) != *((float *)v7 + 1))
      {
        v7 += 40;
        if (v7 == v6)
          goto LABEL_17;
      }
    }
    else
    {
      v7 = (char *)a1[10];
      while (LODWORD(v8) != *(_DWORD *)v7 || v9 != v7[12] || v7[8])
      {
        v7 += 40;
        if (v7 == v6)
          goto LABEL_17;
      }
    }
  }
  if (v7 == v6)
  {
    v8 = *(float *)a3;
LABEL_17:
    v65 = v8;
    v10 = a3 + 1;
    v66 = *(_QWORD *)(a3 + 1);
    v67 = *((_BYTE *)a3 + 12);
    v69 = 0;
    v70 = 0;
    __p = 0;
    v63 = 0;
    v64 = 0;
    v62 = 0;
    if (v5 == v6)
    {
      v7 = v5;
    }
    else if (BYTE4(v66))
    {
      v7 = v5;
      while (LODWORD(v8) != *(_DWORD *)v7 || v67 != v7[12] || !v7[8] || *(float *)&v66 != *((float *)v7 + 1))
      {
        v7 += 40;
        if (v7 == v6)
          goto LABEL_28;
      }
    }
    else
    {
      v7 = v5;
      while (LODWORD(v8) != *(_DWORD *)v7 || v67 != v7[12] || v7[8])
      {
        v7 += 40;
        if (v7 == v6)
          goto LABEL_28;
      }
    }
    if (v7 == v6)
    {
LABEL_28:
      v11 = a1[12];
      if ((unint64_t)v6 < v11)
      {
        *(float *)v6 = v8;
        v12 = v66;
        v6[12] = v67;
        *(_QWORD *)(v6 + 4) = v12;
        std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::vector((_QWORD *)v6 + 2, (uint64_t *)&__p);
        a1[11] = v6 + 40;
        v7 = v6;
        goto LABEL_81;
      }
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 3);
      if (v13 + 1 > 0x666666666666666)
        abort();
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (_QWORD)v5) >> 3);
      v15 = 2 * v14;
      if (2 * v14 <= v13 + 1)
        v15 = v13 + 1;
      if (v14 >= 0x333333333333333)
        v16 = 0x666666666666666;
      else
        v16 = v15;
      v76 = a1 + 12;
      if (v16)
      {
        if (v16 > 0x666666666666666)
          goto LABEL_115;
        v17 = (char *)operator new(40 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[40 * v13];
      v72 = v17;
      v73 = v18;
      v74 = v18;
      v75 = &v17[40 * v16];
      *(float *)v18 = v8;
      *(_QWORD *)(v18 + 4) = *(_QWORD *)v10;
      v18[12] = *((_BYTE *)v10 + 8);
      std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::vector((_QWORD *)v18 + 2, (uint64_t *)&__p);
      v19 = v73;
      v20 = v74 + 40;
      v21 = (char *)a1[10];
      v22 = (char *)a1[11];
      if (v22 == v21)
      {
        v27 = (char *)a1[11];
      }
      else
      {
        v23 = 0;
        do
        {
          v24 = &v19[v23];
          v25 = &v22[v23];
          *((_DWORD *)v24 - 10) = *(_DWORD *)&v22[v23 - 40];
          v26 = *(_QWORD *)&v22[v23 - 36];
          *(v24 - 28) = v22[v23 - 28];
          *(_QWORD *)(v24 - 36) = v26;
          *((_QWORD *)v24 - 2) = 0;
          *((_QWORD *)v24 - 1) = 0;
          *((_QWORD *)v24 - 3) = 0;
          *(_OWORD *)(v24 - 24) = *(_OWORD *)&v22[v23 - 24];
          *((_QWORD *)v24 - 1) = *(_QWORD *)&v22[v23 - 8];
          *((_QWORD *)v25 - 3) = 0;
          *((_QWORD *)v25 - 2) = 0;
          *((_QWORD *)v25 - 1) = 0;
          v23 -= 40;
        }
        while (&v22[v23] != v21);
        v19 += v23;
        v27 = (char *)a1[10];
        v22 = (char *)a1[11];
      }
      a1[10] = v19;
      a1[11] = v20;
      v28 = (char *)a1[12];
      a1[12] = v75;
      v74 = v22;
      v75 = v28;
      v72 = v27;
      v73 = v27;
      if (v22 != v27)
      {
        do
        {
          v30 = v22 - 40;
          v74 = v22 - 40;
          v31 = *((_QWORD *)v22 - 3);
          if (v31)
          {
            v32 = *((_QWORD *)v22 - 2);
            v29 = (void *)*((_QWORD *)v22 - 3);
            if (v32 != v31)
            {
              do
              {
                v33 = v32 - 112;
                v34 = *(unsigned int *)(v32 - 8);
                if ((_DWORD)v34 != -1)
                  ((void (*)(char *, uint64_t))off_1E42F6900[v34])(&v71, v32 - 112);
                *(_DWORD *)(v32 - 8) = -1;
                v32 -= 112;
              }
              while (v33 != v31);
              v29 = (void *)*((_QWORD *)v22 - 3);
              v30 = v74;
            }
            *((_QWORD *)v22 - 2) = v31;
            operator delete(v29);
          }
          v22 = v30;
        }
        while (v30 != v27);
        v22 = v72;
      }
      if (v22)
        operator delete(v22);
      v35 = (char *)__p;
      a1[11] = v20;
      v7 = v20 - 40;
      if (!v35)
        goto LABEL_81;
      v36 = v69;
      if (v69 == v35)
      {
        v69 = v35;
        v43 = v35;
LABEL_80:
        operator delete(v43);
        goto LABEL_81;
      }
      do
      {
        v37 = v36 - 112;
        v38 = *((unsigned int *)v36 - 2);
        if ((_DWORD)v38 != -1)
          ((void (*)(char **, char *))off_1E42F6900[v38])(&v72, v36 - 112);
        *((_DWORD *)v36 - 2) = -1;
        v36 -= 112;
      }
      while (v37 != v35);
      v39 = v62;
      v69 = v35;
      operator delete(__p);
      if (v62)
      {
        v40 = v63;
        if (v63 != v62)
        {
          do
          {
            v41 = v40 - 112;
            v42 = *((unsigned int *)v40 - 2);
            if ((_DWORD)v42 != -1)
              ((void (*)(char **, char *))off_1E42F6900[v42])(&v72, v40 - 112);
            *((_DWORD *)v40 - 2) = -1;
            v40 -= 112;
          }
          while (v41 != v39);
          v39 = v62;
        }
        v43 = v39;
        goto LABEL_80;
      }
    }
  }
LABEL_81:
  v44 = *((_QWORD *)v7 + 4);
  v45 = (char *)*((_QWORD *)v7 + 3);
  if ((unint64_t)v45 < v44)
  {
    *v45 = 0;
    *((_DWORD *)v45 + 26) = -1;
    v46 = *(unsigned int *)(a2 + 104);
    if ((_DWORD)v46 != -1)
    {
      ((void (*)(float *, char *, uint64_t))off_1E42F6918[v46])(&v65, v45, a2);
      *((_DWORD *)v45 + 26) = v46;
    }
    v47 = v45 + 112;
    *((_QWORD *)v7 + 3) = v45 + 112;
    goto LABEL_113;
  }
  v48 = (char *)*((_QWORD *)v7 + 2);
  v49 = 0x6DB6DB6DB6DB6DB7 * ((v45 - v48) >> 4) + 1;
  if (v49 > 0x249249249249249)
    abort();
  v50 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v44 - (_QWORD)v48) >> 4);
  if (2 * v50 > v49)
    v49 = 2 * v50;
  if (v50 >= 0x124924924924924)
    v51 = 0x249249249249249;
  else
    v51 = v49;
  v76 = v7 + 32;
  if (!v51)
  {
    v52 = 0;
    goto LABEL_95;
  }
  if (v51 > 0x249249249249249)
LABEL_115:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v52 = (char *)operator new(112 * v51);
LABEL_95:
  v53 = &v52[16 * ((v45 - v48) >> 4)];
  v72 = v52;
  v73 = v53;
  v74 = v53;
  v75 = &v52[112 * v51];
  *v53 = 0;
  *((_DWORD *)v53 + 26) = -1;
  v54 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v54 == -1)
  {
    v55 = &v52[16 * ((v45 - v48) >> 4)];
  }
  else
  {
    ((void (*)(char **, char *, uint64_t))off_1E42F6918[v54])(&v62, v53, a2);
    *((_DWORD *)v53 + 26) = v54;
    v48 = (char *)*((_QWORD *)v7 + 2);
    v45 = (char *)*((_QWORD *)v7 + 3);
    v53 = v73;
    v55 = v74;
  }
  v47 = v55 + 112;
  v74 = v55 + 112;
  if (v45 == v48)
  {
    v58 = v48;
  }
  else
  {
    v56 = 0;
    do
    {
      v53[v56 - 112] = 0;
      *(_DWORD *)&v53[v56 - 8] = -1;
      v57 = *(unsigned int *)&v45[v56 - 8];
      if ((_DWORD)v57 != -1)
      {
        ((void (*)(char **, char *, char *))off_1E42EE1A0[v57])(&v62, &v53[v56 - 112], &v45[v56 - 112]);
        *(_DWORD *)&v53[v56 - 8] = v57;
      }
      v56 -= 112;
    }
    while (&v45[v56] != v48);
    v53 += v56;
    v58 = (char *)*((_QWORD *)v7 + 2);
    v48 = (char *)*((_QWORD *)v7 + 3);
    v47 = v74;
  }
  *((_QWORD *)v7 + 2) = v53;
  *((_QWORD *)v7 + 3) = v47;
  v59 = (char *)*((_QWORD *)v7 + 4);
  *((_QWORD *)v7 + 4) = v75;
  v74 = v48;
  v75 = v59;
  v72 = v58;
  v73 = v58;
  if (v48 != v58)
  {
    do
    {
      v60 = v48 - 112;
      v74 = v48 - 112;
      v61 = *((unsigned int *)v48 - 2);
      if ((_DWORD)v61 != -1)
      {
        ((void (*)(float *))off_1E42F6900[v61])(&v65);
        v60 = v74;
      }
      *((_DWORD *)v48 - 2) = -1;
      v48 = v60;
    }
    while (v60 != v58);
    v48 = v72;
  }
  if (v48)
    operator delete(v48);
LABEL_113:
  *((_QWORD *)v7 + 3) = v47;
}

void sub_19F63FAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::__split_buffer<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>>>::~__split_buffer((uint64_t)&a18);
  std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>>::~pair((uint64_t)&a12);
  std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F63FB80()
{
  _DWORD *v0;

  if (*v0 != -1)
    JUMPOUT(0x19F63FBA4);
  JUMPOUT(0x19F63FBA8);
}

uint64_t std::__split_buffer<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      v4 = v3 - 112;
      *(_QWORD *)(a1 + 16) = v3 - 112;
      v5 = *(unsigned int *)(v3 - 8);
      if ((_DWORD)v5 != -1)
      {
        ((void (*)(char *))off_1E42F6900[v5])(&v7);
        v4 = *(_QWORD *)(a1 + 16);
      }
      *(_DWORD *)(v3 - 8) = -1;
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a3 + 6);
  result = *(__n128 *)((char *)a3 + 56);
  v6 = *(__int128 *)((char *)a3 + 72);
  *(_OWORD *)(a2 + 88) = *(__int128 *)((char *)a3 + 88);
  *(_OWORD *)(a2 + 72) = v6;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a3 + 6);
  result = *(__n128 *)((char *)a3 + 56);
  v6 = *(__int128 *)((char *)a3 + 72);
  *(_OWORD *)(a2 + 88) = *(__int128 *)((char *)a3 + 88);
  *(_OWORD *)(a2 + 72) = v6;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>>::~pair(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 112;
        v6 = *(unsigned int *)(v3 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_1E42F6900[v6])(&v8, v3 - 112);
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 112;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 112;
        v6 = *((unsigned int *)v3 - 2);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, char *))off_1E42F6900[v6])(&v8, v3 - 112);
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 112;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v12[2];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 4);
    if (v6 >= 0x24924924924924ALL)
      abort();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[112 * v6];
    do
    {
      v9 = &v7[v8];
      *v9 = 0;
      *((_DWORD *)v9 + 26) = -1;
      v10 = *(unsigned int *)(v3 + v8 + 104);
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(char *, char *))off_1E42F6918[v10])(v12, &v7[v8]);
        *((_DWORD *)v9 + 26) = v10;
      }
      v8 += 112;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_19F63FF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v15 + 104);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E42F6900[v17])(&a13, v15);
  *(_DWORD *)(v15 + 104) = -1;
  *(_QWORD *)(v13 + 8) = v14;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v4 = i - 40;
      *(_QWORD *)(a1 + 16) = i - 40;
      v5 = *(_QWORD *)(i - 24);
      if (v5)
        break;
      i -= 40;
      if (v4 == v2)
        goto LABEL_12;
    }
    v6 = *(_QWORD *)(i - 16);
    v7 = *(void **)(i - 24);
    if (v6 != v5)
    {
      do
      {
        v8 = v6 - 112;
        v9 = *(unsigned int *)(v6 - 8);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, uint64_t))off_1E42F6900[v9])(&v11, v6 - 112);
        *(_DWORD *)(v6 - 8) = -1;
        v6 -= 112;
      }
      while (v8 != v5);
      v7 = *(void **)(i - 24);
    }
    *(_QWORD *)(i - 16) = v5;
    operator delete(v7);
  }
LABEL_12:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<debugComponents::DisplayOptions,std::vector<std::vector<gm::LineSegment<float,3>>>>::~pair(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 24);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *std::vector<std::vector<gm::LineSegment<float,3>>>::__init_with_size[abi:nn180100]<std::vector<gm::LineSegment<float,3>>*,std::vector<gm::LineSegment<float,3>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  _QWORD *v17;

  if (a4)
  {
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      v9 = 0;
      v17 = v6;
      do
      {
        v12 = a2 + v9;
        v13 = &v8[v9 / 8];
        *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        v15 = *(_BYTE **)(a2 + v9);
        v14 = *(_BYTE **)(a2 + v9 + 8);
        v16 = v14 - v15;
        if (v14 != v15)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v16 >> 3) > 0xAAAAAAAAAAAAAAALL)
            abort();
          v10 = (char *)operator new(v16);
          *v13 = v10;
          v13[1] = v10;
          v13[2] = &v10[8 * (v16 >> 3)];
          v11 = 24 * ((v16 - 24) / 0x18uLL) + 24;
          result = memcpy(v10, v15, v11);
          v13[1] = &v10[v11];
        }
        v9 += 24;
      }
      while (v12 + 24 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
      v6 = v17;
    }
    v6[1] = v8;
  }
  return result;
}

void sub_19F640248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  *(_QWORD *)(a9 + 8) = v9;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<debugComponents::DisplayOptions,std::vector<std::vector<gm::LineSegment<float,3>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v4 = i - 40;
      *(_QWORD *)(a1 + 16) = i - 40;
      v5 = *(_QWORD *)(i - 24);
      if (v5)
        break;
      i -= 40;
      if (v4 == v2)
        goto LABEL_12;
    }
    v6 = *(_QWORD *)(i - 16);
    v7 = *(void **)(i - 24);
    if (v6 != v5)
    {
      v8 = *(_QWORD *)(i - 16);
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(i - 24);
    }
    *(_QWORD *)(i - 16) = v5;
    operator delete(v7);
  }
LABEL_12:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void md::DebugDrawContext::addTileLocalDebugShape(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  float v48;
  int v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void *v86;
  char *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  char v111;
  void *__p;
  char *v113;
  uint64_t v114;
  char v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  _QWORD *v120;

  v9 = 0x9DDFEA08EB382D69 * (((((a2 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a2));
  v10 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v9 >> 47) ^ v9);
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(_QWORD ***)(*(_QWORD *)(a1 + 40) + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == a2)
                goto LABEL_82;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_22;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a2)
              goto LABEL_82;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_22:
  v18 = (_QWORD *)(a1 + 56);
  v15 = operator new(0x30uLL);
  v116 = (char *)v15;
  v117 = (char *)(a1 + 56);
  *v15 = 0;
  v15[1] = v11;
  v15[2] = a2;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  LOBYTE(v118) = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
  v20 = *(float *)(a1 + 72);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v21 = 1;
    if (v12 >= 3)
      v21 = (v12 & (v12 - 1)) != 0;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 48);
    }
    if (prime <= v12)
    {
      if (prime >= v12)
        goto LABEL_59;
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 64) / *(float *)(a1 + 72));
      if (v12 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime >= v12)
      {
        v12 = *(_QWORD *)(a1 + 48);
LABEL_59:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12)
            v4 = v11 % v12;
          else
            v4 = v11;
        }
        else
        {
          v4 = (v12 - 1) & v11;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v86 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        if (v86)
          operator delete(v86);
        v12 = 0;
        *(_QWORD *)(a1 + 48) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      goto LABEL_203;
    v25 = operator new(8 * prime);
    v26 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v25;
    if (v26)
      operator delete(v26);
    v27 = 0;
    *(_QWORD *)(a1 + 48) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v27++) = 0;
    while (prime != v27);
    v28 = (_QWORD *)*v18;
    if (!*v18)
    {
LABEL_58:
      v12 = prime;
      goto LABEL_59;
    }
    v29 = v28[1];
    v30 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v31 = v29 & v30;
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v31) = v18;
      for (i = (_QWORD *)*v28; *v28; i = (_QWORD *)*v28)
      {
        v33 = i[1] & v30;
        if (v33 == v31)
        {
          v28 = i;
        }
        else
        {
          v34 = *(_QWORD *)(a1 + 40);
          if (*(_QWORD *)(v34 + 8 * v33))
          {
            *v28 = *i;
            v35 = 8 * v33;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 40) + v35);
            **(_QWORD **)(*(_QWORD *)(a1 + 40) + v35) = i;
          }
          else
          {
            *(_QWORD *)(v34 + 8 * v33) = v28;
            v28 = i;
            v31 = v33;
          }
        }
      }
      goto LABEL_58;
    }
    if (v29 >= prime)
      v29 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v29) = v18;
    v39 = (_QWORD *)*v28;
    if (!*v28)
      goto LABEL_58;
    while (1)
    {
      v41 = v39[1];
      if (v41 >= prime)
        v41 %= prime;
      if (v41 != v29)
      {
        v42 = *(_QWORD *)(a1 + 40);
        if (!*(_QWORD *)(v42 + 8 * v41))
        {
          *(_QWORD *)(v42 + 8 * v41) = v28;
          goto LABEL_63;
        }
        *v28 = *v39;
        v40 = 8 * v41;
        *v39 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + v40);
        **(_QWORD **)(*(_QWORD *)(a1 + 40) + v40) = v39;
        v39 = v28;
      }
      v41 = v29;
LABEL_63:
      v28 = v39;
      v39 = (_QWORD *)*v39;
      v29 = v41;
      if (!v39)
        goto LABEL_58;
    }
  }
LABEL_72:
  v43 = *(_QWORD *)(a1 + 40);
  v44 = *(_QWORD **)(v43 + 8 * v4);
  if (v44)
  {
    *v15 = *v44;
LABEL_80:
    *v44 = v15;
    goto LABEL_81;
  }
  *v15 = *v18;
  *v18 = v15;
  *(_QWORD *)(v43 + 8 * v4) = v18;
  if (*v15)
  {
    v45 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v45 >= v12)
        v45 %= v12;
    }
    else
    {
      v45 &= v12 - 1;
    }
    v44 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v45);
    goto LABEL_80;
  }
LABEL_81:
  ++*(_QWORD *)(a1 + 64);
LABEL_82:
  v47 = (char *)v15[3];
  v46 = (char *)v15[4];
  if (v47 != v46)
  {
    v48 = *(float *)a4;
    v49 = *((unsigned __int8 *)a4 + 12);
    if (*((_BYTE *)a4 + 8))
    {
      while (LODWORD(v48) != *(_DWORD *)v47
           || v49 != v47[12]
           || !v47[8]
           || *((float *)a4 + 1) != *((float *)v47 + 1))
      {
        v47 += 40;
        if (v47 == v46)
          goto LABEL_97;
      }
    }
    else
    {
      while (LODWORD(v48) != *(_DWORD *)v47 || v49 != v47[12] || v47[8])
      {
        v47 += 40;
        if (v47 == v46)
          goto LABEL_97;
      }
    }
  }
  if (v47 == v46)
  {
    v48 = *(float *)a4;
LABEL_97:
    v109 = v48;
    v51 = *(_QWORD *)(a4 + 1);
    v50 = a4 + 1;
    v110 = v51;
    v111 = *((_BYTE *)v50 + 8);
    v113 = 0;
    v114 = 0;
    __p = 0;
    v107 = 0;
    v108 = 0;
    v106 = 0;
    v52 = v15[3];
    v53 = v15[4];
    if (v52 == v53)
    {
      v47 = (char *)v15[3];
    }
    else if (BYTE4(v110))
    {
      v47 = (char *)v15[3];
      while (LODWORD(v48) != *(_DWORD *)v47 || v111 != v47[12] || !v47[8] || *(float *)&v110 != *((float *)v47 + 1))
      {
        v47 += 40;
        if (v47 == (char *)v53)
          goto LABEL_108;
      }
    }
    else
    {
      v47 = (char *)v15[3];
      while (LODWORD(v48) != *(_DWORD *)v47 || v111 != v47[12] || v47[8])
      {
        v47 += 40;
        if (v47 == (char *)v53)
          goto LABEL_108;
      }
    }
    if (v47 == (char *)v53)
    {
LABEL_108:
      v54 = v15[5];
      if (v53 < v54)
      {
        *(float *)v53 = v48;
        v55 = v110;
        *(_BYTE *)(v53 + 12) = v111;
        *(_QWORD *)(v53 + 4) = v55;
        std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::vector((_QWORD *)(v53 + 16), (uint64_t *)&__p);
        v15[4] = v53 + 40;
        v47 = (char *)v53;
        goto LABEL_170;
      }
      v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v52) >> 3);
      if (v56 + 1 > 0x666666666666666)
        abort();
      v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - v52) >> 3);
      v58 = 2 * v57;
      if (2 * v57 <= v56 + 1)
        v58 = v56 + 1;
      if (v57 >= 0x333333333333333)
        v59 = 0x666666666666666;
      else
        v59 = v58;
      v120 = v15 + 5;
      if (v59)
      {
        if (v59 > 0x666666666666666)
          goto LABEL_203;
        v60 = (char *)operator new(40 * v59);
      }
      else
      {
        v60 = 0;
      }
      v61 = &v60[40 * v56];
      v116 = v60;
      v117 = v61;
      v118 = v61;
      v119 = &v60[40 * v59];
      *(float *)v61 = v48;
      *(_QWORD *)(v61 + 4) = *(_QWORD *)v50;
      v61[12] = *((_BYTE *)v50 + 8);
      std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::vector((_QWORD *)v61 + 2, (uint64_t *)&__p);
      v62 = v117;
      v63 = v118 + 40;
      v64 = (char *)v15[3];
      v65 = (char *)v15[4];
      if (v65 == v64)
      {
        v70 = (char *)v15[4];
      }
      else
      {
        v66 = 0;
        do
        {
          v67 = &v62[v66];
          v68 = &v65[v66];
          *((_DWORD *)v67 - 10) = *(_DWORD *)&v65[v66 - 40];
          v69 = *(_QWORD *)&v65[v66 - 36];
          *(v67 - 28) = v65[v66 - 28];
          *(_QWORD *)(v67 - 36) = v69;
          *((_QWORD *)v67 - 2) = 0;
          *((_QWORD *)v67 - 1) = 0;
          *((_QWORD *)v67 - 3) = 0;
          *(_OWORD *)(v67 - 24) = *(_OWORD *)&v65[v66 - 24];
          *((_QWORD *)v67 - 1) = *(_QWORD *)&v65[v66 - 8];
          *((_QWORD *)v68 - 3) = 0;
          *((_QWORD *)v68 - 2) = 0;
          *((_QWORD *)v68 - 1) = 0;
          v66 -= 40;
        }
        while (&v65[v66] != v64);
        v62 += v66;
        v70 = (char *)v15[3];
        v65 = (char *)v15[4];
      }
      v15[3] = v62;
      v15[4] = v63;
      v71 = (char *)v15[5];
      v15[5] = v119;
      v118 = v65;
      v119 = v71;
      v116 = v70;
      v117 = v70;
      if (v65 != v70)
      {
        do
        {
          v73 = v65 - 40;
          v118 = v65 - 40;
          v74 = *((_QWORD *)v65 - 3);
          if (v74)
          {
            v75 = *((_QWORD *)v65 - 2);
            v72 = (void *)*((_QWORD *)v65 - 3);
            if (v75 != v74)
            {
              do
              {
                v76 = v75 - 56;
                v77 = *(unsigned int *)(v75 - 4);
                if ((_DWORD)v77 != -1)
                  ((void (*)(char *, uint64_t))off_1E42F68A0[v77])(&v115, v75 - 56);
                *(_DWORD *)(v75 - 4) = -1;
                v75 -= 56;
              }
              while (v76 != v74);
              v72 = (void *)*((_QWORD *)v65 - 3);
              v73 = v118;
            }
            *((_QWORD *)v65 - 2) = v74;
            operator delete(v72);
          }
          v65 = v73;
        }
        while (v73 != v70);
        v65 = v116;
      }
      if (v65)
        operator delete(v65);
      v78 = (char *)__p;
      v15[4] = v63;
      v47 = v63 - 40;
      if (!v78)
        goto LABEL_170;
      v79 = v113;
      if (v113 == v78)
      {
        v113 = v78;
        v87 = v78;
LABEL_169:
        operator delete(v87);
        goto LABEL_170;
      }
      do
      {
        v80 = v79 - 56;
        v81 = *((unsigned int *)v79 - 1);
        if ((_DWORD)v81 != -1)
          ((void (*)(char **, char *))off_1E42F68A0[v81])(&v116, v79 - 56);
        *((_DWORD *)v79 - 1) = -1;
        v79 -= 56;
      }
      while (v80 != v78);
      v82 = v106;
      v113 = v78;
      operator delete(__p);
      if (v106)
      {
        v83 = v107;
        if (v107 != v106)
        {
          do
          {
            v84 = v83 - 56;
            v85 = *((unsigned int *)v83 - 1);
            if ((_DWORD)v85 != -1)
              ((void (*)(char **, char *))off_1E42F68A0[v85])(&v116, v83 - 56);
            *((_DWORD *)v83 - 1) = -1;
            v83 -= 56;
          }
          while (v84 != v82);
          v82 = v106;
        }
        v87 = v82;
        goto LABEL_169;
      }
    }
  }
LABEL_170:
  v88 = *((_QWORD *)v47 + 4);
  v89 = (char *)*((_QWORD *)v47 + 3);
  if ((unint64_t)v89 < v88)
  {
    *v89 = 0;
    *((_DWORD *)v89 + 13) = -1;
    v90 = *(unsigned int *)(a3 + 52);
    if ((_DWORD)v90 != -1)
    {
      ((void (*)(float *, char *, uint64_t))off_1E42F68C0[v90])(&v109, v89, a3);
      *((_DWORD *)v89 + 13) = v90;
    }
    v91 = v89 + 56;
    *((_QWORD *)v47 + 3) = v89 + 56;
    goto LABEL_202;
  }
  v92 = (char *)*((_QWORD *)v47 + 2);
  v93 = 0x6DB6DB6DB6DB6DB7 * ((v89 - v92) >> 3) + 1;
  if (v93 > 0x492492492492492)
    abort();
  v94 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v88 - (_QWORD)v92) >> 3);
  if (2 * v94 > v93)
    v93 = 2 * v94;
  if (v94 >= 0x249249249249249)
    v95 = 0x492492492492492;
  else
    v95 = v93;
  v120 = v47 + 32;
  if (!v95)
  {
    v96 = 0;
    goto LABEL_184;
  }
  if (v95 > 0x492492492492492)
LABEL_203:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v96 = (char *)operator new(56 * v95);
LABEL_184:
  v97 = &v96[8 * ((v89 - v92) >> 3)];
  v116 = v96;
  v117 = v97;
  v118 = v97;
  v119 = &v96[56 * v95];
  *v97 = 0;
  *((_DWORD *)v97 + 13) = -1;
  v98 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v98 == -1)
  {
    v99 = &v96[8 * ((v89 - v92) >> 3)];
  }
  else
  {
    ((void (*)(char **, char *, uint64_t))off_1E42F68C0[v98])(&v106, v97, a3);
    *((_DWORD *)v97 + 13) = v98;
    v92 = (char *)*((_QWORD *)v47 + 2);
    v89 = (char *)*((_QWORD *)v47 + 3);
    v97 = v117;
    v99 = v118;
  }
  v91 = v99 + 56;
  v118 = v99 + 56;
  if (v89 == v92)
  {
    v102 = v92;
  }
  else
  {
    v100 = 0;
    do
    {
      v97[v100 - 56] = 0;
      *(_DWORD *)&v97[v100 - 4] = -1;
      v101 = *(unsigned int *)&v89[v100 - 4];
      if ((_DWORD)v101 != -1)
      {
        ((void (*)(char **, char *, char *))off_1E42EE1B8[v101])(&v106, &v97[v100 - 56], &v89[v100 - 56]);
        *(_DWORD *)&v97[v100 - 4] = v101;
      }
      v100 -= 56;
    }
    while (&v89[v100] != v92);
    v97 += v100;
    v102 = (char *)*((_QWORD *)v47 + 2);
    v92 = (char *)*((_QWORD *)v47 + 3);
    v91 = v118;
  }
  *((_QWORD *)v47 + 2) = v97;
  *((_QWORD *)v47 + 3) = v91;
  v103 = (char *)*((_QWORD *)v47 + 4);
  *((_QWORD *)v47 + 4) = v119;
  v118 = v92;
  v119 = v103;
  v116 = v102;
  v117 = v102;
  if (v92 != v102)
  {
    do
    {
      v104 = v92 - 56;
      v118 = v92 - 56;
      v105 = *((unsigned int *)v92 - 1);
      if ((_DWORD)v105 != -1)
      {
        ((void (*)(float *))off_1E42F68A0[v105])(&v109);
        v104 = v118;
      }
      *((_DWORD *)v92 - 1) = -1;
      v92 = v104;
    }
    while (v104 != v102);
    v92 = v116;
  }
  if (v92)
    operator delete(v92);
LABEL_202:
  *((_QWORD *)v47 + 3) = v91;
}

void sub_19F640E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::__split_buffer<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>::~__split_buffer((uint64_t)&a18);
  std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>::~pair((uint64_t)&a12);
  std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::~vector[abi:nn180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19F640F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F640F14()
{
  _DWORD *v0;

  if (*v0 != -1)
    JUMPOUT(0x19F640F38);
  JUMPOUT(0x19F640F3CLL);
}

uint64_t std::__split_buffer<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      v4 = v3 - 56;
      *(_QWORD *)(a1 + 16) = v3 - 56;
      v5 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v5 != -1)
      {
        ((void (*)(char *))off_1E42F68A0[v5])(&v7);
        v4 = *(_QWORD *)(a1 + 16);
      }
      *(_DWORD *)(v3 - 4) = -1;
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
  v4 = *(uint64_t *)((char *)a3 + 12);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)a3 + 5);
  *(_QWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  result = *(__n128 *)((char *)a3 + 28);
  *(_QWORD *)(a2 + 44) = *(uint64_t *)((char *)a3 + 44);
  *(__n128 *)(a2 + 28) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
  v4 = *(uint64_t *)((char *)a3 + 12);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)a3 + 5);
  *(_QWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  result = *(__n128 *)((char *)a3 + 28);
  *(__n128 *)(a2 + 28) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
  v4 = *(uint64_t *)((char *)a3 + 12);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)a3 + 5);
  *(_QWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  result = *(__n128 *)((char *)a3 + 28);
  *(_QWORD *)(a2 + 44) = *(uint64_t *)((char *)a3 + 44);
  *(__n128 *)(a2 + 28) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
  v4 = *(uint64_t *)((char *)a3 + 12);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)a3 + 5);
  *(_QWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  result = *(__n128 *)((char *)a3 + 28);
  *(__n128 *)(a2 + 28) = result;
  return result;
}

uint64_t std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>::~pair(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 56;
        v6 = *(unsigned int *)(v3 - 4);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_1E42F68A0[v6])(&v8, v3 - 56);
        *(_DWORD *)(v3 - 4) = -1;
        v3 -= 56;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 56;
        v6 = *((unsigned int *)v3 - 1);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, char *))off_1E42F68A0[v6])(&v8, v3 - 56);
        *((_DWORD *)v3 - 1) = -1;
        v3 -= 56;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v12[2];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 3);
    if (v6 >= 0x492492492492493)
      abort();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[56 * v6];
    do
    {
      v9 = &v7[v8];
      *v9 = 0;
      *((_DWORD *)v9 + 13) = -1;
      v10 = *(unsigned int *)(v3 + v8 + 52);
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(char *, char *))off_1E42F68C0[v10])(v12, &v7[v8]);
        *((_DWORD *)v9 + 13) = v10;
      }
      v8 += 56;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_19F641354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v15 + 52);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E42F68A0[v17])(&a13, v15);
  *(_DWORD *)(v15 + 52) = -1;
  *(_QWORD *)(v13 + 8) = v14;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v4 = i - 40;
      *(_QWORD *)(a1 + 16) = i - 40;
      v5 = *(_QWORD *)(i - 24);
      if (v5)
        break;
      i -= 40;
      if (v4 == v2)
        goto LABEL_12;
    }
    v6 = *(_QWORD *)(i - 16);
    v7 = *(void **)(i - 24);
    if (v6 != v5)
    {
      do
      {
        v8 = v6 - 56;
        v9 = *(unsigned int *)(v6 - 4);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, uint64_t))off_1E42F68A0[v9])(&v11, v6 - 56);
        *(_DWORD *)(v6 - 4) = -1;
        v6 -= 56;
      }
      while (v8 != v5);
      v7 = *(void **)(i - 24);
    }
    *(_QWORD *)(i - 16) = v5;
    operator delete(v7);
  }
LABEL_12:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v2 = v1[3];
      if (v2)
      {
        v3 = v1[4];
        v4 = (void *)v1[3];
        if (v3 != v2)
        {
          do
          {
            v6 = *(_QWORD *)(v3 - 24);
            if (v6)
            {
              v7 = *(_QWORD *)(v3 - 16);
              v5 = *(void **)(v3 - 24);
              if (v7 != v6)
              {
                do
                {
                  v8 = v7 - 56;
                  v9 = *(unsigned int *)(v7 - 4);
                  if ((_DWORD)v9 != -1)
                    ((void (*)(char *, uint64_t))off_1E42F68A0[v9])(&v10, v7 - 56);
                  *(_DWORD *)(v7 - 4) = -1;
                  v7 -= 56;
                }
                while (v8 != v6);
                v5 = *(void **)(v3 - 24);
              }
              *(_QWORD *)(v3 - 16) = v6;
              operator delete(v5);
            }
            v3 -= 40;
          }
          while (v3 != v2);
          v4 = (void *)v1[3];
        }
        v1[4] = v2;
        operator delete(v4);
      }
    }
    operator delete(v1);
  }
}

void md::DebugDrawContext::addTileLocalLines(uint64_t *a1, unint64_t a2, __int128 *a3, __int128 *a4, int *a5)
{
  unint64_t v5;
  int *i;
  __int128 *v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint8x8_t v15;
  _QWORD **v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *j;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  int v49;
  char v50;
  float v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  void *v64;
  unint64_t v65;
  char *v66;
  _BYTE *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  void *v75;
  __int16 *v78;
  unint64_t v79;
  _QWORD *v81;
  __int16 v82;
  char v83;
  __int128 v84;

  if (a3 != a4)
  {
    i = a5;
    v7 = a3;
    v8 = a2;
    v10 = 0x9DDFEA08EB382D69 * (((((a2 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a2));
    v11 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v10 >> 47) ^ v10);
    v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
    v81 = a1 + 2;
    v78 = (__int16 *)((char *)a5 + 9);
    v79 = v12;
    while (1)
    {
      v14 = a1[1];
      if (v14)
      {
        v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          v5 = v12;
          if (v12 >= v14)
            v5 = v12 % v14;
        }
        else
        {
          v5 = v12 & (v14 - 1);
        }
        v16 = *(_QWORD ***)(*a1 + 8 * v5);
        if (v16)
        {
          v17 = *v16;
          if (*v16)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                v19 = v17[1];
                if (v19 == v12)
                {
                  if (v17[2] == v8)
                    goto LABEL_85;
                }
                else if ((v19 & (v14 - 1)) != v5)
                {
                  goto LABEL_25;
                }
                v17 = (_QWORD *)*v17;
                if (!v17)
                  goto LABEL_25;
              }
            }
            do
            {
              v18 = v17[1];
              if (v18 == v12)
              {
                if (v17[2] == v8)
                  goto LABEL_85;
              }
              else
              {
                if (v18 >= v14)
                  v18 %= v14;
                if (v18 != v5)
                  break;
              }
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
        }
      }
LABEL_25:
      v17 = operator new(0x30uLL);
      *v17 = 0;
      v17[1] = v12;
      v17[2] = v8;
      v17[3] = 0;
      v17[4] = 0;
      v17[5] = 0;
      v20 = (float)(unint64_t)(a1[3] + 1);
      v21 = *((float *)a1 + 8);
      if (!v14 || (float)(v21 * (float)v14) < v20)
        break;
LABEL_75:
      v42 = *a1;
      v43 = *(_QWORD **)(*a1 + 8 * v5);
      if (v43)
      {
        *v17 = *v43;
LABEL_83:
        *v43 = v17;
        goto LABEL_84;
      }
      *v17 = *v81;
      *v81 = v17;
      *(_QWORD *)(v42 + 8 * v5) = v81;
      if (*v17)
      {
        v44 = *(_QWORD *)(*v17 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v44 >= v14)
            v44 %= v14;
        }
        else
        {
          v44 &= v14 - 1;
        }
        v43 = (_QWORD *)(*a1 + 8 * v44);
        goto LABEL_83;
      }
LABEL_84:
      ++a1[3];
LABEL_85:
      v46 = (char *)v17[3];
      v45 = (char *)v17[4];
      v47 = v46;
      if (v46 != v45)
      {
        v48 = *i;
        v49 = *((unsigned __int8 *)i + 12);
        v50 = *((_BYTE *)i + 8);
        v51 = *((float *)i + 1);
        v47 = (char *)v17[3];
        if (v50)
        {
          while (v48 != *(_DWORD *)v47 || v49 != v47[12] || !v47[8] || v51 != *((float *)v47 + 1))
          {
            v47 += 40;
            if (v47 == v45)
              goto LABEL_101;
          }
        }
        else
        {
          v47 = (char *)v17[3];
          while (v48 != *(_DWORD *)v47 || v49 != v47[12] || v47[8])
          {
            v47 += 40;
            if (v47 == v45)
              goto LABEL_101;
          }
        }
        v8 = a2;
      }
      if (v47 == v45)
      {
        v48 = *i;
        v51 = *((float *)i + 1);
        v50 = *((_BYTE *)i + 8);
        v49 = *((unsigned __int8 *)i + 12);
LABEL_101:
        v82 = *v78;
        v83 = *((_BYTE *)v78 + 2);
        v47 = (char *)v17[3];
        if (v46 != v45)
        {
          v47 = (char *)v17[3];
          if (v50)
          {
            while (v48 != *(_DWORD *)v47 || v49 != v47[12] || !v47[8] || v51 != *((float *)v47 + 1))
            {
              v47 += 40;
              if (v47 == v45)
                goto LABEL_115;
            }
          }
          else
          {
            v47 = (char *)v17[3];
            while (v48 != *(_DWORD *)v47 || v49 != v47[12] || v47[8])
            {
              v47 += 40;
              if (v47 == v45)
                goto LABEL_115;
            }
          }
        }
        if (v47 == v45)
        {
LABEL_115:
          v52 = v17[5];
          if ((unint64_t)v45 >= v52)
          {
            v54 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - v46) >> 3) + 1;
            if (v54 > 0x666666666666666)
              abort();
            v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - (_QWORD)v46) >> 3);
            if (2 * v55 > v54)
              v54 = 2 * v55;
            if (v55 >= 0x333333333333333)
              v56 = 0x666666666666666;
            else
              v56 = v54;
            if (v56)
            {
              if (v56 > 0x666666666666666)
                goto LABEL_166;
              v57 = (char *)operator new(40 * v56);
            }
            else
            {
              v57 = 0;
            }
            v58 = &v57[8 * ((v45 - v46) >> 3)];
            *(_DWORD *)v58 = v48;
            *((float *)v58 + 1) = v51;
            v58[8] = v50;
            *(_WORD *)(v58 + 9) = *v78;
            v58[11] = *((_BYTE *)v78 + 2);
            v58[12] = v49;
            *((_QWORD *)v58 + 3) = 0;
            *((_QWORD *)v58 + 4) = 0;
            *((_QWORD *)v58 + 2) = 0;
            v53 = v58 + 40;
            if (v46 == v45)
            {
              v17[3] = v58;
              v17[4] = v53;
              v17[5] = &v57[40 * v56];
              i = a5;
            }
            else
            {
              v59 = 0;
              do
              {
                v60 = &v58[v59];
                v61 = &v45[v59];
                *((_DWORD *)v60 - 10) = *(_DWORD *)&v45[v59 - 40];
                v62 = *(_QWORD *)&v45[v59 - 36];
                *(v60 - 28) = v45[v59 - 28];
                *(_QWORD *)(v60 - 36) = v62;
                *((_QWORD *)v60 - 2) = 0;
                *((_QWORD *)v60 - 1) = 0;
                *(_OWORD *)(v60 - 24) = *(_OWORD *)&v45[v59 - 24];
                *((_QWORD *)v60 - 1) = *(_QWORD *)&v45[v59 - 8];
                *((_QWORD *)v61 - 3) = 0;
                *((_QWORD *)v61 - 2) = 0;
                *((_QWORD *)v61 - 1) = 0;
                v59 -= 40;
              }
              while (&v45[v59] != v46);
              v46 = (char *)v17[3];
              v63 = (char *)v17[4];
              v17[3] = &v58[v59];
              *((_QWORD *)&v84 + 1) = &v57[40 * v56];
              *(_QWORD *)&v84 = v58 + 40;
              *((_OWORD *)v17 + 2) = v84;
              v53 = v58 + 40;
              for (i = a5; v63 != v46; v63 -= 40)
              {
                v64 = (void *)*((_QWORD *)v63 - 3);
                if (v64)
                {
                  *((_QWORD *)v63 - 2) = v64;
                  operator delete(v64);
                }
              }
            }
            if (v46)
              operator delete(v46);
          }
          else
          {
            *(_DWORD *)v45 = v48;
            *((float *)v45 + 1) = v51;
            v45[8] = v50;
            *(_WORD *)(v45 + 9) = v82;
            v45[11] = v83;
            v45[12] = v49;
            *((_QWORD *)v45 + 3) = 0;
            *((_QWORD *)v45 + 4) = 0;
            *((_QWORD *)v45 + 2) = 0;
            v53 = v45 + 40;
            v17[4] = v45 + 40;
          }
          v17[4] = v53;
          v47 = v53 - 40;
        }
        v8 = a2;
      }
      v66 = (char *)*((_QWORD *)v47 + 3);
      v65 = *((_QWORD *)v47 + 4);
      if ((unint64_t)v66 < v65)
      {
        v13 = *v7;
        *((_QWORD *)v66 + 2) = *((_QWORD *)v7 + 2);
        *(_OWORD *)v66 = v13;
        v5 = (unint64_t)(v66 + 24);
        v12 = v79;
      }
      else
      {
        v67 = (_BYTE *)*((_QWORD *)v47 + 2);
        v68 = 0xAAAAAAAAAAAAAAABLL * ((v66 - v67) >> 3) + 1;
        v12 = v79;
        if (v68 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)v67) >> 3);
        if (2 * v69 > v68)
          v68 = 2 * v69;
        if (v69 >= 0x555555555555555)
          v70 = 0xAAAAAAAAAAAAAAALL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 > 0xAAAAAAAAAAAAAAALL)
LABEL_166:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v71 = (char *)operator new(24 * v70);
        }
        else
        {
          v71 = 0;
        }
        v72 = &v71[8 * ((v66 - v67) >> 3)];
        *(_OWORD *)v72 = *v7;
        *((_QWORD *)v72 + 2) = *((_QWORD *)v7 + 2);
        v73 = v72;
        if (v66 != v67)
        {
          do
          {
            v74 = *(_OWORD *)(v66 - 24);
            *((_QWORD *)v73 - 1) = *((_QWORD *)v66 - 1);
            *(_OWORD *)(v73 - 24) = v74;
            v73 -= 24;
            v66 -= 24;
          }
          while (v66 != v67);
          v66 = (char *)*((_QWORD *)v47 + 2);
        }
        v5 = (unint64_t)(v72 + 24);
        *((_QWORD *)v47 + 2) = v73;
        *((_QWORD *)v47 + 3) = v72 + 24;
        *((_QWORD *)v47 + 4) = &v71[24 * v70];
        if (v66)
          operator delete(v66);
      }
      *((_QWORD *)v47 + 3) = v5;
      v7 = (__int128 *)((char *)v7 + 24);
      if (v7 == a4)
        return;
    }
    v22 = (v14 & (v14 - 1)) != 0;
    if (v14 < 3)
      v22 = 1;
    v23 = v22 | (2 * v14);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v14 = a1[1];
    }
    if (prime <= v14)
    {
      if (prime >= v14)
        goto LABEL_62;
      v36 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v14 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime >= v14)
      {
        v14 = a1[1];
LABEL_62:
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v12 >= v14)
            v5 = v12 % v14;
          else
            v5 = v12;
        }
        else
        {
          v5 = (v14 - 1) & v12;
        }
        goto LABEL_75;
      }
      if (!prime)
      {
        v75 = (void *)*a1;
        *a1 = 0;
        if (v75)
          operator delete(v75);
        v14 = 0;
        a1[1] = 0;
        goto LABEL_62;
      }
    }
    if (prime >> 61)
      goto LABEL_166;
    v26 = operator new(8 * prime);
    v27 = (void *)*a1;
    *a1 = (uint64_t)v26;
    if (v27)
      operator delete(v27);
    v28 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v28++) = 0;
    while (prime != v28);
    v29 = (_QWORD *)*v81;
    if (!*v81)
    {
LABEL_61:
      v14 = prime;
      goto LABEL_62;
    }
    v30 = v29[1];
    v31 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v32 = v30 & v31;
      *(_QWORD *)(*a1 + 8 * v32) = v81;
      for (j = (_QWORD *)*v29; *v29; j = (_QWORD *)*v29)
      {
        v34 = j[1] & v31;
        if (v34 == v32)
        {
          v29 = j;
        }
        else if (*(_QWORD *)(*a1 + 8 * v34))
        {
          *v29 = *j;
          v35 = 8 * v34;
          *j = **(_QWORD **)(*a1 + v35);
          **(_QWORD **)(*a1 + v35) = j;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v34) = v29;
          v29 = j;
          v32 = v34;
        }
      }
      goto LABEL_61;
    }
    if (v30 >= prime)
      v30 %= prime;
    *(_QWORD *)(*a1 + 8 * v30) = v81;
    v39 = (_QWORD *)*v29;
    if (!*v29)
      goto LABEL_61;
    while (1)
    {
      v41 = v39[1];
      if (v41 >= prime)
        v41 %= prime;
      if (v41 != v30)
      {
        if (!*(_QWORD *)(*a1 + 8 * v41))
        {
          *(_QWORD *)(*a1 + 8 * v41) = v29;
          goto LABEL_66;
        }
        *v29 = *v39;
        v40 = 8 * v41;
        *v39 = **(_QWORD **)(*a1 + v40);
        **(_QWORD **)(*a1 + v40) = v39;
        v39 = v29;
      }
      v41 = v30;
LABEL_66:
      v29 = v39;
      v39 = (_QWORD *)*v39;
      v30 = v41;
      if (!v39)
        goto LABEL_61;
    }
  }
}

void sub_19F641EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            v6 = *(void **)(v4 - 24);
            if (v6)
            {
              *(_QWORD *)(v4 - 16) = v6;
              operator delete(v6);
            }
            v4 -= 40;
          }
          while (v4 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::Point::ExtendedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Point::ExtendedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Point::ExtendedVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Point::ExtendedMesh::~ExtendedMesh(ggl::Point::ExtendedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Point::ExtendedMesh::~ExtendedMesh(ggl::Point::ExtendedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Point::ExtendedMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Point::ExtendedMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Point::PipelineSetup::~PipelineSetup(ggl::Point::PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Point::PipelineSetup::constantDataIsEnabled(ggl::Point::PipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::Point::PipelineSetup::textureIsEnabled(ggl::Point::PipelineSetup *this)
{
  return 0;
}

void ggl::Point::ExtendedPipelineState::~ExtendedPipelineState(ggl::Point::ExtendedPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Point::ExtendedPipelineSetup::~ExtendedPipelineSetup(ggl::Point::ExtendedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::Point::ExtendedPipelineSetup::constantDataIsEnabled(ggl::Point::ExtendedPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::Point::ExtendedPipelineSetup::textureIsEnabled(ggl::Point::ExtendedPipelineSetup *this)
{
  return 0;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)33>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectMapDataLogic<(md::MapDataType)33>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)33>::didBecomeInactive(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    result = gdc::Registry::destroy(*(_QWORD *)(result + 128), *(_QWORD *)(result + 120));
    *(_QWORD *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::CollectMapDataContext<md::MapDataType::DaVinciGround>]";
  v4[3] = 57;
  v4[4] = result;
  *v4 = &off_1E42B10E0;
  v4[1] = 0x9052DC4F017D3735;
  *a2 = v4;
  return result;
}

void sub_19F6426A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x9052DC4F017D3735 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x9052DC4F017D3735 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x9052DC4F017D3735 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x9052DC4F017D3735 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x9052DC4F017D3735 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::CollectMapDataLogic<(md::MapDataType)33>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _WORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _WORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _WORD *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  unint64_t v57;
  __int128 v58;
  __int16 v59;
  _QWORD *i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *j;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _QWORD *k;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  _QWORD *m;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  _QWORD *v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  _QWORD *n;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  _QWORD *v497;
  uint64_t *v498;
  uint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  uint64_t *v509;

  v5 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>(*(_QWORD *)(a1 + 128));
  v6 = v5;
  if (v5[29])
  {
    v7 = (_QWORD *)v5[28];
    if (v7)
    {
      v8 = (_QWORD *)v5[31];
      v9 = (uint64_t *)v5[7];
      v10 = (uint64_t)(v5[8] - (_QWORD)v9) >> 3;
      do
      {
        v505 = v9;
        v506 = v10;
        v500 = v8;
        v11 = v7[6];
        if (!v11)
          goto LABEL_516;
        (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v500, &v505);
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  v12 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>(*(_QWORD *)(a1 + 128));
  v13 = v12;
  if (v12[29])
  {
    v14 = (_QWORD *)v12[28];
    if (v14)
    {
      v15 = (_QWORD *)v12[31];
      v16 = (uint64_t *)v12[7];
      v17 = (uint64_t)(v12[8] - (_QWORD)v16) >> 3;
      do
      {
        v505 = v16;
        v506 = v17;
        v500 = v15;
        v18 = v14[6];
        if (!v18)
          goto LABEL_516;
        (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v18 + 48))(v18, &v500, &v505);
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  v13[8] = v13[7];
  v13[11] = v13[10];
  v498 = *a3;
  v19 = *(_QWORD *)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1)
  {
    v20 = gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
    *(_QWORD *)(a1 + 120) = v20;
    v21 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)33>>(*(_QWORD *)(a1 + 128));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v21, v20);
    v22 = *(_QWORD *)(a1 + 120);
    v23 = *(_QWORD *)(a1 + 128);
    v500 = (_QWORD *)0xA834E119D8DEF0BALL;
    v24 = *(int8x8_t *)(v23 + 128);
    if (v24)
    {
      v25 = (uint8x8_t)vcnt_s8(v24);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = 0xA834E119D8DEF0BALL;
        if (*(_QWORD *)&v24 <= 0xA834E119D8DEF0BALL)
          v26 = 0xA834E119D8DEF0BALL % *(_QWORD *)&v24;
      }
      else
      {
        v26 = (*(_QWORD *)&v24 - 1) & 0xA834E119D8DEF0BALL;
      }
      v27 = *(_QWORD **)(*(_QWORD *)(v23 + 120) + 8 * v26);
      if (v27)
      {
        v28 = (_QWORD *)*v27;
        if (v28)
        {
          if (v25.u32[0] < 2uLL)
          {
            v29 = *(_QWORD *)&v24 - 1;
            while (1)
            {
              v31 = v28[1];
              if (v31 == 0xA834E119D8DEF0BALL)
              {
                if (v28[2] == 0xA834E119D8DEF0BALL)
                  goto LABEL_230;
              }
              else if ((v31 & v29) != v26)
              {
                goto LABEL_34;
              }
              v28 = (_QWORD *)*v28;
              if (!v28)
                goto LABEL_34;
            }
          }
          do
          {
            v30 = v28[1];
            if (v30 == 0xA834E119D8DEF0BALL)
            {
              if (v28[2] == 0xA834E119D8DEF0BALL)
              {
LABEL_230:
                v32 = v28[3];
                goto LABEL_37;
              }
            }
            else
            {
              if (v30 >= *(_QWORD *)&v24)
                v30 %= *(_QWORD *)&v24;
              if (v30 != v26)
                break;
            }
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_34:
    v32 = operator new();
    *(_QWORD *)(v32 + 16) = "SceneComponents::LayerDataInfo<md::MapDataType::DaVinciGround>]";
    *(_QWORD *)(v32 + 24) = 62;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_OWORD *)(v32 + 64) = 0u;
    *(_OWORD *)(v32 + 80) = 0u;
    *(_OWORD *)(v32 + 96) = 0u;
    *(_OWORD *)(v32 + 112) = 0u;
    *(_OWORD *)(v32 + 128) = 0u;
    *(_DWORD *)(v32 + 144) = 1065353216;
    *(_OWORD *)(v32 + 152) = 0u;
    *(_OWORD *)(v32 + 168) = 0u;
    *(_QWORD *)(v32 + 184) = 0;
    *(_DWORD *)(v32 + 192) = 1065353216;
    *(_OWORD *)(v32 + 200) = 0u;
    *(_OWORD *)(v32 + 216) = 0u;
    *(_QWORD *)(v32 + 232) = 0;
    *(_DWORD *)(v32 + 240) = 1065353216;
    *(_QWORD *)v32 = &off_1E42B2958;
    *(_QWORD *)(v32 + 8) = 0xA834E119D8DEF0BALL;
    *(_QWORD *)(v32 + 248) = v23;
    v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v23 + 120), 0xA834E119D8DEF0BALL, &v500);
    v34 = v33[3];
    v33[3] = v32;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v505 = (uint64_t *)0xA834E119D8DEF0BALL;
    v506 = (uint64_t)"SceneComponents::LayerDataInfo<md::MapDataType::DaVinciGround>]";
    v507 = 62;
    gdc::Registry::_registerStorageDataSignals(v23, 0xA834E119D8DEF0BALL, (uint64_t)&v505, (uint64_t *)(v32 + 104));
LABEL_37:
    v504 = v22;
    v35 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v32 + 32), (uint64_t)&v504);
    if ((v36 & 1) != 0)
    {
      v42 = *(char **)(v32 + 88);
      v41 = *(_QWORD *)(v32 + 96);
      if ((unint64_t)v42 >= v41)
      {
        v44 = *(char **)(v32 + 80);
        v45 = v42 - v44;
        if (v42 - v44 <= -3)
          abort();
        v46 = v45 >> 1;
        v47 = v41 - (_QWORD)v44;
        if (v47 <= (v45 >> 1) + 1)
          v48 = v46 + 1;
        else
          v48 = v47;
        if (v47 >= 0x7FFFFFFFFFFFFFFELL)
          v49 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          if (v49 < 0)
            goto LABEL_521;
          v50 = operator new(2 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[2 * v46];
        v52 = &v50[2 * v49];
        *v51 = 33;
        v43 = v51 + 1;
        if (v42 != v44)
        {
          v53 = v42 - v44 - 2;
          if (v53 < 0x1E)
            goto LABEL_529;
          if (v42 - v50 - (v45 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_529;
          v54 = (v53 >> 1) + 1;
          v55 = &v50[2 * v46 - 16];
          v56 = v42 - 16;
          v57 = v54 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v58 = *(_OWORD *)v56;
            *(v55 - 1) = *((_OWORD *)v56 - 1);
            *v55 = v58;
            v55 -= 2;
            v56 -= 32;
            v57 -= 16;
          }
          while (v57);
          v51 -= v54 & 0xFFFFFFFFFFFFFFF0;
          v42 -= 2 * (v54 & 0xFFFFFFFFFFFFFFF0);
          if (v54 != (v54 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_529:
            do
            {
              v59 = *((_WORD *)v42 - 1);
              v42 -= 2;
              *--v51 = v59;
            }
            while (v42 != v44);
          }
        }
        *(_QWORD *)(v32 + 80) = v51;
        *(_QWORD *)(v32 + 88) = v43;
        *(_QWORD *)(v32 + 96) = v52;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_WORD *)v42 = 33;
        v43 = v42 + 2;
      }
      *(_QWORD *)(v32 + 88) = v43;
      v38 = *(_QWORD **)(v32 + 248);
    }
    else
    {
      v37 = (_WORD *)(*(_QWORD *)(v32 + 80) + (((uint64_t)v35 - *(_QWORD *)(v32 + 56)) >> 2));
      *v37 = 33;
      v38 = *(_QWORD **)(v32 + 248);
      if (v37 != *(_WORD **)(v32 + 88))
      {
        v39 = *(_QWORD **)(v32 + 128);
        if (v39)
        {
          while (1)
          {
            v505 = &v504;
            v506 = 1;
            v500 = v38;
            v40 = v39[6];
            if (!v40)
              break;
            (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v40 + 48))(v40, &v500, &v505);
            v39 = (_QWORD *)*v39;
            if (!v39)
              goto LABEL_69;
          }
LABEL_516:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_517:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        goto LABEL_69;
      }
    }
    for (i = *(_QWORD **)(v32 + 176); i; i = (_QWORD *)*i)
    {
      v505 = &v504;
      v506 = 1;
      v500 = v38;
      v61 = i[6];
      if (!v61)
        goto LABEL_516;
      (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v61 + 48))(v61, &v500, &v505);
    }
LABEL_69:
    v63 = *(_QWORD *)(a1 + 120);
    v62 = *(_QWORD *)(a1 + 128);
    v501 = 0;
    v502 = 0;
    v500 = &v501;
    v64 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)33>>(v62);
    v503 = v63;
    v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v503);
    if ((v66 & 1) != 0)
    {
      v71 = v64[12];
      v72 = (uint64_t *)v64[11];
      if ((unint64_t)v72 >= v71)
      {
        v74 = v64[10];
        v75 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v72 - v74) >> 3);
        if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v74) >> 3);
        v77 = 2 * v76;
        if (2 * v76 <= v75 + 1)
          v77 = v75 + 1;
        if (v76 >= 0x555555555555555)
          v78 = 0xAAAAAAAAAAAAAAALL;
        else
          v78 = v77;
        v509 = v64 + 12;
        if (v78)
        {
          if (v78 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_521;
          v79 = (uint64_t *)operator new(24 * v78);
        }
        else
        {
          v79 = 0;
        }
        v83 = &v79[3 * v75];
        v505 = v79;
        v506 = (uint64_t)v83;
        v507 = (uint64_t)v83;
        v508 = (char *)&v79[3 * v78];
        v83[1] = 0;
        v83[2] = 0;
        *v83 = (uint64_t)(v83 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v83, v500, &v501);
        v84 = v506;
        v73 = (uint64_t *)(v507 + 24);
        v85 = (char *)v64[10];
        v86 = (char *)v64[11];
        if (v86 == v85)
        {
          v64[10] = v506;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
        }
        else
        {
          v87 = 0;
          do
          {
            v88 = v84 + v87;
            *(_QWORD *)(v88 - 24) = *(_QWORD *)&v86[v87 - 24];
            v89 = &v86[v87 - 16];
            v90 = *(_QWORD *)v89;
            *(_QWORD *)(v84 + v87 - 16) = *(_QWORD *)v89;
            v91 = v84 + v87 - 16;
            v92 = *(_QWORD *)&v86[v87 - 8];
            *(_QWORD *)(v88 - 8) = v92;
            if (v92)
            {
              *(_QWORD *)(v90 + 16) = v91;
              *(_QWORD *)&v86[v87 - 24] = v89;
              *(_QWORD *)v89 = 0;
              *(_QWORD *)&v86[v87 - 8] = 0;
            }
            else
            {
              *(_QWORD *)(v88 - 24) = v91;
            }
            v87 -= 24;
          }
          while (&v86[v87] != v85);
          v93 = v84 + v87;
          v86 = (char *)v64[10];
          v94 = (char *)v64[11];
          v64[10] = v93;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
          if (v94 != v86)
          {
            do
            {
              v95 = v94 - 24;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v94 - 2));
              v94 = v95;
            }
            while (v95 != v86);
          }
        }
        if (v86)
          operator delete(v86);
      }
      else
      {
        v72[2] = 0;
        v72[1] = 0;
        *v72 = (uint64_t)(v72 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v72, v500, &v501);
        v73 = v72 + 3;
        v64[11] = (uint64_t)(v72 + 3);
      }
      v64[11] = (uint64_t)v73;
      v80 = v64[31];
    }
    else
    {
      v67 = v64[10] + 24 * (((uint64_t)v65 - v64[7]) >> 3);
      v68 = v67 + 8;
      std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v67 + 8));
      *(_QWORD *)v67 = v500;
      v69 = v501;
      *(_QWORD *)(v67 + 8) = v501;
      v70 = v502;
      *(_QWORD *)(v67 + 16) = v502;
      if (v70)
      {
        v69[2] = v68;
        v500 = &v501;
        v501 = 0;
        v502 = 0;
      }
      else
      {
        *(_QWORD *)v67 = v68;
      }
      v80 = v64[31];
      if (v67 != v64[11])
      {
        for (j = (_QWORD *)v64[16]; j; j = (_QWORD *)*j)
        {
          v505 = &v503;
          v506 = 1;
          v504 = v80;
          v82 = j[6];
          if (!v82)
            goto LABEL_517;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v82 + 48))(v82, &v504, &v505);
        }
LABEL_106:
        std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
        v99 = *(_QWORD *)(a1 + 120);
        v98 = *(_QWORD *)(a1 + 128);
        v501 = 0;
        v502 = 0;
        v500 = &v501;
        v100 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>(v98);
        v503 = v99;
        v101 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v100 + 4, (uint64_t)&v503);
        if ((v102 & 1) != 0)
        {
          v107 = v100[12];
          v108 = (uint64_t *)v100[11];
          if ((unint64_t)v108 >= v107)
          {
            v110 = v100[10];
            v111 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v108 - v110) >> 3);
            if (v111 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v110) >> 3);
            v113 = 2 * v112;
            if (2 * v112 <= v111 + 1)
              v113 = v111 + 1;
            if (v112 >= 0x555555555555555)
              v114 = 0xAAAAAAAAAAAAAAALL;
            else
              v114 = v113;
            v509 = v100 + 12;
            if (v114)
            {
              if (v114 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_521;
              v115 = (uint64_t *)operator new(24 * v114);
            }
            else
            {
              v115 = 0;
            }
            v119 = &v115[3 * v111];
            v505 = v115;
            v506 = (uint64_t)v119;
            v507 = (uint64_t)v119;
            v508 = (char *)&v115[3 * v114];
            v119[1] = 0;
            v119[2] = 0;
            *v119 = (uint64_t)(v119 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v119, v500, &v501);
            v120 = v506;
            v109 = (uint64_t *)(v507 + 24);
            v121 = (char *)v100[10];
            v122 = (char *)v100[11];
            if (v122 == v121)
            {
              v100[10] = v506;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
            }
            else
            {
              v123 = 0;
              do
              {
                v124 = v120 + v123;
                *(_QWORD *)(v124 - 24) = *(_QWORD *)&v122[v123 - 24];
                v125 = &v122[v123 - 16];
                v126 = *(_QWORD *)v125;
                *(_QWORD *)(v120 + v123 - 16) = *(_QWORD *)v125;
                v127 = v120 + v123 - 16;
                v128 = *(_QWORD *)&v122[v123 - 8];
                *(_QWORD *)(v124 - 8) = v128;
                if (v128)
                {
                  *(_QWORD *)(v126 + 16) = v127;
                  *(_QWORD *)&v122[v123 - 24] = v125;
                  *(_QWORD *)v125 = 0;
                  *(_QWORD *)&v122[v123 - 8] = 0;
                }
                else
                {
                  *(_QWORD *)(v124 - 24) = v127;
                }
                v123 -= 24;
              }
              while (&v122[v123] != v121);
              v129 = v120 + v123;
              v122 = (char *)v100[10];
              v130 = (char *)v100[11];
              v100[10] = v129;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
              if (v130 != v122)
              {
                do
                {
                  v131 = v130 - 24;
                  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v130 - 2));
                  v130 = v131;
                }
                while (v131 != v122);
              }
            }
            if (v122)
              operator delete(v122);
          }
          else
          {
            v108[2] = 0;
            v108[1] = 0;
            *v108 = (uint64_t)(v108 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v108, v500, &v501);
            v109 = v108 + 3;
            v100[11] = (uint64_t)(v108 + 3);
          }
          v100[11] = (uint64_t)v109;
          v116 = v100[31];
        }
        else
        {
          v103 = v100[10] + 24 * (((uint64_t)v101 - v100[7]) >> 3);
          v104 = v103 + 8;
          std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v103 + 8));
          *(_QWORD *)v103 = v500;
          v105 = v501;
          *(_QWORD *)(v103 + 8) = v501;
          v106 = v502;
          *(_QWORD *)(v103 + 16) = v502;
          if (v106)
          {
            v105[2] = v104;
            v500 = &v501;
            v501 = 0;
            v502 = 0;
          }
          else
          {
            *(_QWORD *)v103 = v104;
          }
          v116 = v100[31];
          if (v103 != v100[11])
          {
            for (k = (_QWORD *)v100[16]; k; k = (_QWORD *)*k)
            {
              v505 = &v503;
              v506 = 1;
              v504 = v116;
              v118 = k[6];
              if (!v118)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v118 + 48))(v118, &v504, &v505);
            }
LABEL_143:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v135 = *(_QWORD *)(a1 + 120);
            v134 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = &v501;
            v136 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>(v134);
            v503 = v135;
            v137 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v136 + 4, (uint64_t)&v503);
            if ((v138 & 1) != 0)
            {
              v143 = v136[12];
              v144 = (uint64_t *)v136[11];
              if ((unint64_t)v144 >= v143)
              {
                v146 = v136[10];
                v147 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v144 - v146) >> 3);
                if (v147 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - v146) >> 3);
                v149 = 2 * v148;
                if (2 * v148 <= v147 + 1)
                  v149 = v147 + 1;
                if (v148 >= 0x555555555555555)
                  v150 = 0xAAAAAAAAAAAAAAALL;
                else
                  v150 = v149;
                v509 = v136 + 12;
                if (v150)
                {
                  if (v150 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_521;
                  v151 = (uint64_t *)operator new(24 * v150);
                }
                else
                {
                  v151 = 0;
                }
                v155 = &v151[3 * v147];
                v505 = v151;
                v506 = (uint64_t)v155;
                v507 = (uint64_t)v155;
                v508 = (char *)&v151[3 * v150];
                v155[1] = 0;
                v155[2] = 0;
                *v155 = (uint64_t)(v155 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v155, v500, &v501);
                v156 = v506;
                v145 = (uint64_t *)(v507 + 24);
                v157 = (char *)v136[10];
                v158 = (char *)v136[11];
                if (v158 == v157)
                {
                  v136[10] = v506;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                }
                else
                {
                  v159 = 0;
                  do
                  {
                    v160 = v156 + v159;
                    *(_QWORD *)(v160 - 24) = *(_QWORD *)&v158[v159 - 24];
                    v161 = &v158[v159 - 16];
                    v162 = *(_QWORD *)v161;
                    *(_QWORD *)(v156 + v159 - 16) = *(_QWORD *)v161;
                    v163 = v156 + v159 - 16;
                    v164 = *(_QWORD *)&v158[v159 - 8];
                    *(_QWORD *)(v160 - 8) = v164;
                    if (v164)
                    {
                      *(_QWORD *)(v162 + 16) = v163;
                      *(_QWORD *)&v158[v159 - 24] = v161;
                      *(_QWORD *)v161 = 0;
                      *(_QWORD *)&v158[v159 - 8] = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v160 - 24) = v163;
                    }
                    v159 -= 24;
                  }
                  while (&v158[v159] != v157);
                  v165 = v156 + v159;
                  v158 = (char *)v136[10];
                  v166 = (char *)v136[11];
                  v136[10] = v165;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                  if (v166 != v158)
                  {
                    do
                    {
                      v167 = v166 - 24;
                      std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v166 - 2));
                      v166 = v167;
                    }
                    while (v167 != v158);
                  }
                }
                if (v158)
                  operator delete(v158);
              }
              else
              {
                v144[2] = 0;
                v144[1] = 0;
                *v144 = (uint64_t)(v144 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v144, v500, &v501);
                v145 = v144 + 3;
                v136[11] = (uint64_t)(v144 + 3);
              }
              v136[11] = (uint64_t)v145;
              v152 = v136[31];
            }
            else
            {
              v139 = v136[10] + 24 * (((uint64_t)v137 - v136[7]) >> 3);
              v140 = v139 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v139 + 8));
              *(_QWORD *)v139 = v500;
              v141 = v501;
              *(_QWORD *)(v139 + 8) = v501;
              v142 = v502;
              *(_QWORD *)(v139 + 16) = v502;
              if (v142)
              {
                v141[2] = v140;
                v500 = &v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v139 = v140;
              }
              v152 = v136[31];
              if (v139 != v136[11])
              {
                v153 = (_QWORD *)v136[16];
                if (v153)
                {
                  while (1)
                  {
                    v505 = &v503;
                    v506 = 1;
                    v504 = v152;
                    v154 = v153[6];
                    if (!v154)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v154 + 48))(v154, &v504, &v505);
                    v153 = (_QWORD *)*v153;
                    if (!v153)
                      goto LABEL_180;
                  }
                }
                goto LABEL_180;
              }
            }
            for (m = (_QWORD *)v136[22]; m; m = (_QWORD *)*m)
            {
              v505 = &v503;
              v506 = 1;
              v504 = v152;
              v169 = m[6];
              if (!v169)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v169 + 48))(v169, &v504, &v505);
            }
LABEL_180:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v171 = *(_QWORD *)(a1 + 120);
            v170 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = &v501;
            v172 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>(v170);
            v503 = v171;
            v173 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v172 + 4, (uint64_t)&v503);
            if ((v174 & 1) == 0)
            {
              v175 = v172[10] + 24 * (((uint64_t)v173 - v172[7]) >> 3);
              v176 = v175 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v175 + 8));
              *(_QWORD *)v175 = v500;
              v177 = v501;
              *(_QWORD *)(v175 + 8) = v501;
              v178 = v502;
              *(_QWORD *)(v175 + 16) = v502;
              if (v178)
              {
                v177[2] = v176;
                v500 = &v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v175 = v176;
              }
              v188 = v172[31];
              if (v175 != v172[11])
              {
                v189 = (_QWORD *)v172[16];
                if (v189)
                {
                  while (1)
                  {
                    v505 = &v503;
                    v506 = 1;
                    v504 = v188;
                    v190 = v189[6];
                    if (!v190)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v190 + 48))(v190, &v504, &v505);
                    v189 = (_QWORD *)*v189;
                    if (!v189)
                      goto LABEL_217;
                  }
                }
                goto LABEL_217;
              }
LABEL_214:
              for (n = (_QWORD *)v172[22]; n; n = (_QWORD *)*n)
              {
                v505 = &v503;
                v506 = 1;
                v504 = v188;
                v205 = n[6];
                if (!v205)
                  goto LABEL_517;
                (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v205 + 48))(v205, &v504, &v505);
              }
LABEL_217:
              std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
              goto LABEL_218;
            }
            v179 = v172[12];
            v180 = (uint64_t *)v172[11];
            if ((unint64_t)v180 < v179)
            {
              v180[2] = 0;
              v180[1] = 0;
              *v180 = (uint64_t)(v180 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v180, v500, &v501);
              v181 = v180 + 3;
              v172[11] = (uint64_t)(v180 + 3);
LABEL_213:
              v172[11] = (uint64_t)v181;
              v188 = v172[31];
              goto LABEL_214;
            }
            v182 = v172[10];
            v183 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v180 - v182) >> 3);
            if (v183 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - v182) >> 3);
            v185 = 2 * v184;
            if (2 * v184 <= v183 + 1)
              v185 = v183 + 1;
            if (v184 >= 0x555555555555555)
              v186 = 0xAAAAAAAAAAAAAAALL;
            else
              v186 = v185;
            v509 = v172 + 12;
            if (!v186)
            {
              v187 = 0;
              goto LABEL_201;
            }
            if (v186 <= 0xAAAAAAAAAAAAAAALL)
            {
              v187 = (uint64_t *)operator new(24 * v186);
LABEL_201:
              v191 = &v187[3 * v183];
              v505 = v187;
              v506 = (uint64_t)v191;
              v507 = (uint64_t)v191;
              v508 = (char *)&v187[3 * v186];
              v191[1] = 0;
              v191[2] = 0;
              *v191 = (uint64_t)(v191 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v191, v500, &v501);
              v192 = v506;
              v181 = (uint64_t *)(v507 + 24);
              v193 = (char *)v172[10];
              v194 = (char *)v172[11];
              if (v194 == v193)
              {
                v172[10] = v506;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
              }
              else
              {
                v195 = 0;
                do
                {
                  v196 = v192 + v195;
                  *(_QWORD *)(v196 - 24) = *(_QWORD *)&v194[v195 - 24];
                  v197 = &v194[v195 - 16];
                  v198 = *(_QWORD *)v197;
                  *(_QWORD *)(v192 + v195 - 16) = *(_QWORD *)v197;
                  v199 = v192 + v195 - 16;
                  v200 = *(_QWORD *)&v194[v195 - 8];
                  *(_QWORD *)(v196 - 8) = v200;
                  if (v200)
                  {
                    *(_QWORD *)(v198 + 16) = v199;
                    *(_QWORD *)&v194[v195 - 24] = v197;
                    *(_QWORD *)v197 = 0;
                    *(_QWORD *)&v194[v195 - 8] = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v196 - 24) = v199;
                  }
                  v195 -= 24;
                }
                while (&v194[v195] != v193);
                v201 = v192 + v195;
                v194 = (char *)v172[10];
                v202 = (char *)v172[11];
                v172[10] = v201;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
                if (v202 != v194)
                {
                  do
                  {
                    v203 = v202 - 24;
                    std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v202 - 2));
                    v202 = v203;
                  }
                  while (v203 != v194);
                }
              }
              if (v194)
                operator delete(v194);
              goto LABEL_213;
            }
LABEL_521:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
        }
        v132 = (_QWORD *)v100[22];
        if (v132)
        {
          while (1)
          {
            v505 = &v503;
            v506 = 1;
            v504 = v116;
            v133 = v132[6];
            if (!v133)
              goto LABEL_517;
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v133 + 48))(v133, &v504, &v505);
            v132 = (_QWORD *)*v132;
            if (!v132)
              goto LABEL_143;
          }
        }
        goto LABEL_143;
      }
    }
    v96 = (_QWORD *)v64[22];
    if (v96)
    {
      while (1)
      {
        v505 = &v503;
        v506 = 1;
        v504 = v80;
        v97 = v96[6];
        if (!v97)
          goto LABEL_517;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v97 + 48))(v97, &v504, &v505);
        v96 = (_QWORD *)*v96;
        if (!v96)
          goto LABEL_106;
      }
    }
    goto LABEL_106;
  }
LABEL_218:
  v499 = a1;
  v206 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)33>>(v19);
  v207 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)33>>(v19);
  v208 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>(v19);
  v209 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>(v19);
  v210 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>(v19);
  v211 = (_QWORD *)v210;
  v212 = v208 + 4;
  v213 = v209 + 4;
  v214 = v210 + 32;
  v216 = v206[7];
  v215 = v206[8];
  if (v207[8] - v207[7] >= (unint64_t)(v215 - v216))
    v217 = v206 + 4;
  else
    v217 = v207 + 4;
  if (v208[8] - v208[7] < v217[4] - v217[3])
    v217 = v208 + 4;
  if (v209[8] - v209[7] < v217[4] - v217[3])
    v217 = v209 + 4;
  if (*(_QWORD *)(v210 + 64) - *(_QWORD *)(v210 + 56) >= v217[4] - v217[3])
    v218 = v217;
  else
    v218 = (_QWORD *)(v210 + 32);
  if (v206 + 4 == v218)
  {
    v495 = v210 + 32;
    v505 = v498;
    v506 = v499;
    while (v216 != v215)
    {
      v220 = *(unsigned int *)(v216 + 4);
      v221 = v220 >> 7;
      v222 = v207[4];
      v223 = (v207[5] - v222) >> 3;
      if (v220 >> 7 < v223)
      {
        v224 = *(_QWORD *)(v222 + 8 * v221);
        if (v224)
        {
          v225 = v220 & 0x7F;
          v226 = *(unsigned __int16 *)(v224 + 2 * v225);
          v227 = v207[7];
          v228 = v207[8];
          v229 = (v228 - v227) >> 3;
          if (v229 > v226)
          {
            v230 = v227 + 8 * v226;
            if (v230 != v228 && *(_DWORD *)(v230 + 4) == (_DWORD)v220)
            {
              v232 = v208[4];
              v233 = (v208[5] - v232) >> 3;
              if (v221 < v233)
              {
                v234 = *(_QWORD *)(v232 + 8 * v221);
                if (v234)
                {
                  v235 = *(unsigned __int16 *)(v234 + 2 * v225);
                  v237 = v208[7];
                  v236 = v208[8];
                  v238 = (v236 - v237) >> 3;
                  if (v238 > v235)
                  {
                    v239 = v237 + 8 * v235;
                    if (v239 != v236 && *(_DWORD *)(v239 + 4) == (_DWORD)v220)
                    {
                      v241 = v209[4];
                      v242 = (v209[5] - v241) >> 3;
                      if (v221 < v242)
                      {
                        v243 = *(_QWORD *)(v241 + 8 * v221);
                        if (v243)
                        {
                          v244 = *(unsigned __int16 *)(v243 + 2 * v225);
                          v245 = v209[7];
                          v496 = v213;
                          v494 = v209[8];
                          v493 = (v494 - v245) >> 3;
                          if (v493 > v244)
                          {
                            v246 = v245 + 8 * v244;
                            if (v246 != v494 && *(_DWORD *)(v246 + 4) == (_DWORD)v220)
                            {
                              v492 = v211[4];
                              v491 = (v211[5] - v492) >> 3;
                              if (v221 < v491)
                              {
                                v248 = *(_QWORD *)(v492 + 8 * v221);
                                if (v248)
                                {
                                  v249 = *(unsigned __int16 *)(v248 + 2 * v225);
                                  v489 = v211[7];
                                  v490 = v211[8];
                                  if ((v490 - v489) >> 3 > v249)
                                  {
                                    v250 = v489 + 8 * v249;
                                    if (v250 != v490 && *(_DWORD *)(v250 + 4) == (_DWORD)v220)
                                    {
                                      v251 = *(_QWORD *)v216;
                                      v252 = HIDWORD(*(_QWORD *)v216);
                                      v253 = *(_QWORD *)v216 >> 39;
                                      if (v253 < v223
                                        && (v254 = *(_QWORD *)(v222 + 8 * v253)) != 0
                                        && (v255 = *(unsigned __int16 *)(v254 + 2 * (HIDWORD(v251) & 0x7F)), v229 > v255)
                                        && (v256 = v227 + 8 * v255, v256 != v228)
                                        && *(_DWORD *)(v256 + 4) == (_DWORD)v252)
                                      {
                                        v257 = (uint64_t *)(v207[10] + 24 * v255);
                                      }
                                      else
                                      {
                                        v257 = (uint64_t *)v207[11];
                                      }
                                      if (v253 < v233
                                        && (v258 = *(_QWORD *)(v232 + 8 * v253)) != 0
                                        && (v259 = *(unsigned __int16 *)(v258 + 2 * (HIDWORD(v251) & 0x7F)), v238 > v259)
                                        && (v260 = v237 + 8 * v259, v260 != v236)
                                        && *(_DWORD *)(v260 + 4) == (_DWORD)v252)
                                      {
                                        v261 = (uint64_t *)(v208[10] + 24 * v259);
                                      }
                                      else
                                      {
                                        v261 = (uint64_t *)v208[11];
                                      }
                                      v262 = HIDWORD(*(_QWORD *)v216);
                                      if (v253 < v242
                                        && (v263 = *(_QWORD *)(v241 + 8 * v253)) != 0
                                        && (v264 = *(unsigned __int16 *)(v263 + 2 * (HIDWORD(v251) & 0x7F)), v493 > v264)
                                        && (v265 = v245 + 8 * v264, v265 != v494)
                                        && *(_DWORD *)(v265 + 4) == (_DWORD)v262)
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)(v209[10] + 24 * v264);
                                      }
                                      else
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)v209[11];
                                      }
                                      if (v253 < v491
                                        && (v268 = *(_QWORD *)(v492 + 8 * v253)) != 0
                                        && (v269 = *(unsigned __int16 *)(v268 + 2 * (HIDWORD(v251) & 0x7F)), v266 > v269)
                                        && (v270 = v489 + 8 * v269, v270 != v490)
                                        && *(_DWORD *)(v270 + 4) == (_DWORD)v262)
                                      {
                                        v219 = v211[10] + 24 * v269;
                                      }
                                      else
                                      {
                                        v219 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()((uint64_t)&v505, v251, v257, v261, v267, v219);
                                      v213 = v496;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v216 += 8;
    }
    v214 = v495;
  }
  v271 = v498;
  if (v207 + 4 != v218)
  {
    if (v212 != v218)
      goto LABEL_294;
LABEL_351:
    v326 = v213;
    v505 = v271;
    v506 = v499;
    v327 = v208[7];
    v328 = v208[8];
    if (v327 != v328)
    {
      v329 = (uint64_t *)v208[10];
      do
      {
        v331 = *(unsigned int *)(v327 + 4);
        v332 = v331 >> 7;
        v333 = v206[4];
        if (v331 >> 7 < (v206[5] - v333) >> 3)
        {
          v334 = *(_QWORD *)(v333 + 8 * v332);
          if (v334)
          {
            v335 = v331 & 0x7F;
            v336 = *(unsigned __int16 *)(v334 + 2 * v335);
            v338 = v206[7];
            v337 = v206[8];
            if (v336 < (v337 - v338) >> 3)
            {
              v339 = v338 + 8 * v336;
              if (v339 != v337 && *(_DWORD *)(v339 + 4) == (_DWORD)v331)
              {
                v341 = v207[4];
                v342 = (v207[5] - v341) >> 3;
                if (v332 < v342)
                {
                  v343 = *(_QWORD *)(v341 + 8 * v332);
                  if (v343)
                  {
                    v344 = *(unsigned __int16 *)(v343 + 2 * v335);
                    v346 = v207[7];
                    v345 = v207[8];
                    v347 = (v345 - v346) >> 3;
                    if (v347 > v344)
                    {
                      v348 = v346 + 8 * v344;
                      if (v348 != v345 && *(_DWORD *)(v348 + 4) == (_DWORD)v331)
                      {
                        v350 = v209[4];
                        v351 = (v209[5] - v350) >> 3;
                        if (v332 < v351)
                        {
                          v352 = *(_QWORD *)(v350 + 8 * v332);
                          if (v352)
                          {
                            v353 = *(unsigned __int16 *)(v352 + 2 * v335);
                            v355 = v209[7];
                            v354 = v209[8];
                            v356 = (v354 - v355) >> 3;
                            if (v356 > v353)
                            {
                              v357 = v355 + 8 * v353;
                              if (v357 != v354 && *(_DWORD *)(v357 + 4) == (_DWORD)v331)
                              {
                                v359 = v211[4];
                                v360 = (v211[5] - v359) >> 3;
                                if (v332 < v360)
                                {
                                  v361 = *(_QWORD *)(v359 + 8 * v332);
                                  if (v361)
                                  {
                                    v362 = *(unsigned __int16 *)(v361 + 2 * v335);
                                    v364 = v211[7];
                                    v363 = v211[8];
                                    v365 = (v363 - v364) >> 3;
                                    if (v365 > v362)
                                    {
                                      v366 = v364 + 8 * v362;
                                      if (v366 != v363 && *(_DWORD *)(v366 + 4) == (_DWORD)v331)
                                      {
                                        v367 = *(_QWORD *)v327;
                                        v368 = HIDWORD(*(_QWORD *)v327);
                                        v369 = *(_QWORD *)v327 >> 39;
                                        if (v369 < v342
                                          && (v370 = *(_QWORD *)(v341 + 8 * v369)) != 0
                                          && (v371 = *(unsigned __int16 *)(v370 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v347 > v371)
                                          && (v372 = v346 + 8 * v371, v372 != v345)
                                          && *(_DWORD *)(v372 + 4) == (_DWORD)v368)
                                        {
                                          v373 = (uint64_t *)(v207[10] + 24 * v371);
                                        }
                                        else
                                        {
                                          v373 = (uint64_t *)v207[11];
                                        }
                                        if (v369 < v351
                                          && (v374 = *(_QWORD *)(v350 + 8 * v369)) != 0
                                          && (v375 = *(unsigned __int16 *)(v374 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v356 > v375)
                                          && (v376 = v355 + 8 * v375, v376 != v354)
                                          && *(_DWORD *)(v376 + 4) == (_DWORD)v368)
                                        {
                                          v377 = (uint64_t *)(v209[10] + 24 * v375);
                                        }
                                        else
                                        {
                                          v377 = (uint64_t *)v209[11];
                                        }
                                        if (v369 < v360
                                          && (v378 = *(_QWORD *)(v359 + 8 * v369)) != 0
                                          && (v379 = *(unsigned __int16 *)(v378 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v365 > v379)
                                          && (v380 = v364 + 8 * v379, v380 != v363)
                                          && *(_DWORD *)(v380 + 4) == (_DWORD)v368)
                                        {
                                          v330 = v211[10] + 24 * v379;
                                        }
                                        else
                                        {
                                          v330 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()((uint64_t)&v505, v367, v373, v329, v377, v330);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v329 += 3;
        v327 += 8;
      }
      while (v327 != v328);
    }
    if (v326 != v218)
      goto LABEL_460;
    goto LABEL_406;
  }
  v497 = v213;
  v505 = v498;
  v506 = v499;
  v272 = v207[7];
  v273 = v207[8];
  if (v272 != v273)
  {
    v274 = (uint64_t *)v207[10];
    do
    {
      v276 = *(unsigned int *)(v272 + 4);
      v277 = v276 >> 7;
      v278 = v206[4];
      if (v276 >> 7 < (v206[5] - v278) >> 3)
      {
        v279 = *(_QWORD *)(v278 + 8 * v277);
        if (v279)
        {
          v280 = v276 & 0x7F;
          v281 = *(unsigned __int16 *)(v279 + 2 * v280);
          v283 = v206[7];
          v282 = v206[8];
          if (v281 < (v282 - v283) >> 3)
          {
            v284 = v283 + 8 * v281;
            if (v284 != v282 && *(_DWORD *)(v284 + 4) == (_DWORD)v276)
            {
              v286 = v208[4];
              v287 = (v208[5] - v286) >> 3;
              if (v277 < v287)
              {
                v288 = *(_QWORD *)(v286 + 8 * v277);
                if (v288)
                {
                  v289 = *(unsigned __int16 *)(v288 + 2 * v280);
                  v291 = v208[7];
                  v290 = v208[8];
                  v292 = (v290 - v291) >> 3;
                  if (v292 > v289)
                  {
                    v293 = v291 + 8 * v289;
                    if (v293 != v290 && *(_DWORD *)(v293 + 4) == (_DWORD)v276)
                    {
                      v295 = v209[4];
                      v296 = (v209[5] - v295) >> 3;
                      if (v277 < v296)
                      {
                        v297 = *(_QWORD *)(v295 + 8 * v277);
                        if (v297)
                        {
                          v298 = *(unsigned __int16 *)(v297 + 2 * v280);
                          v300 = v209[7];
                          v299 = v209[8];
                          v301 = (v299 - v300) >> 3;
                          if (v301 > v298)
                          {
                            v302 = v300 + 8 * v298;
                            if (v302 != v299 && *(_DWORD *)(v302 + 4) == (_DWORD)v276)
                            {
                              v304 = v211[4];
                              v305 = (v211[5] - v304) >> 3;
                              if (v277 < v305)
                              {
                                v306 = *(_QWORD *)(v304 + 8 * v277);
                                if (v306)
                                {
                                  v307 = *(unsigned __int16 *)(v306 + 2 * v280);
                                  v309 = v211[7];
                                  v308 = v211[8];
                                  v310 = (v308 - v309) >> 3;
                                  if (v310 > v307)
                                  {
                                    v311 = v309 + 8 * v307;
                                    if (v311 != v308 && *(_DWORD *)(v311 + 4) == (_DWORD)v276)
                                    {
                                      v312 = *(_QWORD *)v272;
                                      v313 = HIDWORD(*(_QWORD *)v272);
                                      v314 = *(_QWORD *)v272 >> 39;
                                      if (v314 < v287
                                        && (v315 = *(_QWORD *)(v286 + 8 * v314)) != 0
                                        && (v316 = *(unsigned __int16 *)(v315 + 2 * (HIDWORD(v312) & 0x7F)), v292 > v316)
                                        && (v317 = v291 + 8 * v316, v317 != v290)
                                        && *(_DWORD *)(v317 + 4) == (_DWORD)v313)
                                      {
                                        v318 = (uint64_t *)(v208[10] + 24 * v316);
                                      }
                                      else
                                      {
                                        v318 = (uint64_t *)v208[11];
                                      }
                                      if (v314 < v296
                                        && (v319 = *(_QWORD *)(v295 + 8 * v314)) != 0
                                        && (v320 = *(unsigned __int16 *)(v319 + 2 * (HIDWORD(v312) & 0x7F)), v301 > v320)
                                        && (v321 = v300 + 8 * v320, v321 != v299)
                                        && *(_DWORD *)(v321 + 4) == (_DWORD)v313)
                                      {
                                        v322 = (uint64_t *)(v209[10] + 24 * v320);
                                      }
                                      else
                                      {
                                        v322 = (uint64_t *)v209[11];
                                      }
                                      if (v314 < v305
                                        && (v323 = *(_QWORD *)(v304 + 8 * v314)) != 0
                                        && (v324 = *(unsigned __int16 *)(v323 + 2 * (HIDWORD(v312) & 0x7F)), v310 > v324)
                                        && (v325 = v309 + 8 * v324, v325 != v308)
                                        && *(_DWORD *)(v325 + 4) == (_DWORD)v313)
                                      {
                                        v275 = v211[10] + 24 * v324;
                                      }
                                      else
                                      {
                                        v275 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()((uint64_t)&v505, v312, v274, v318, v322, v275);
                                      v271 = v498;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v274 += 3;
      v272 += 8;
    }
    while (v272 != v273);
  }
  v213 = v497;
  if (v212 == v218)
    goto LABEL_351;
LABEL_294:
  if (v213 == v218)
  {
LABEL_406:
    v505 = v271;
    v506 = v499;
    v381 = v209[7];
    v382 = v209[8];
    if (v381 != v382)
    {
      v383 = (uint64_t *)v209[10];
      do
      {
        v385 = *(unsigned int *)(v381 + 4);
        v386 = v385 >> 7;
        v387 = v206[4];
        if (v385 >> 7 < (v206[5] - v387) >> 3)
        {
          v388 = *(_QWORD *)(v387 + 8 * v386);
          if (v388)
          {
            v389 = v385 & 0x7F;
            v390 = *(unsigned __int16 *)(v388 + 2 * v389);
            v392 = v206[7];
            v391 = v206[8];
            if (v390 < (v391 - v392) >> 3)
            {
              v393 = v392 + 8 * v390;
              if (v393 != v391 && *(_DWORD *)(v393 + 4) == (_DWORD)v385)
              {
                v395 = v207[4];
                v396 = (v207[5] - v395) >> 3;
                if (v386 < v396)
                {
                  v397 = *(_QWORD *)(v395 + 8 * v386);
                  if (v397)
                  {
                    v398 = *(unsigned __int16 *)(v397 + 2 * v389);
                    v400 = v207[7];
                    v399 = v207[8];
                    v401 = (v399 - v400) >> 3;
                    if (v401 > v398)
                    {
                      v402 = v400 + 8 * v398;
                      if (v402 != v399 && *(_DWORD *)(v402 + 4) == (_DWORD)v385)
                      {
                        v404 = v208[4];
                        v405 = (v208[5] - v404) >> 3;
                        if (v386 < v405)
                        {
                          v406 = *(_QWORD *)(v404 + 8 * v386);
                          if (v406)
                          {
                            v407 = *(unsigned __int16 *)(v406 + 2 * v389);
                            v409 = v208[7];
                            v408 = v208[8];
                            v410 = (v408 - v409) >> 3;
                            if (v410 > v407)
                            {
                              v411 = v409 + 8 * v407;
                              if (v411 != v408 && *(_DWORD *)(v411 + 4) == (_DWORD)v385)
                              {
                                v413 = v211[4];
                                v414 = (v211[5] - v413) >> 3;
                                if (v386 < v414)
                                {
                                  v415 = *(_QWORD *)(v413 + 8 * v386);
                                  if (v415)
                                  {
                                    v416 = *(unsigned __int16 *)(v415 + 2 * v389);
                                    v418 = v211[7];
                                    v417 = v211[8];
                                    v419 = (v417 - v418) >> 3;
                                    if (v419 > v416)
                                    {
                                      v420 = v418 + 8 * v416;
                                      if (v420 != v417 && *(_DWORD *)(v420 + 4) == (_DWORD)v385)
                                      {
                                        v421 = *(_QWORD *)v381;
                                        v422 = HIDWORD(*(_QWORD *)v381);
                                        v423 = *(_QWORD *)v381 >> 39;
                                        if (v423 < v396
                                          && (v424 = *(_QWORD *)(v395 + 8 * v423)) != 0
                                          && (v425 = *(unsigned __int16 *)(v424 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v401 > v425)
                                          && (v426 = v400 + 8 * v425, v426 != v399)
                                          && *(_DWORD *)(v426 + 4) == (_DWORD)v422)
                                        {
                                          v427 = (uint64_t *)(v207[10] + 24 * v425);
                                        }
                                        else
                                        {
                                          v427 = (uint64_t *)v207[11];
                                        }
                                        if (v423 < v405
                                          && (v428 = *(_QWORD *)(v404 + 8 * v423)) != 0
                                          && (v429 = *(unsigned __int16 *)(v428 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v410 > v429)
                                          && (v430 = v409 + 8 * v429, v430 != v408)
                                          && *(_DWORD *)(v430 + 4) == (_DWORD)v422)
                                        {
                                          v431 = (uint64_t *)(v208[10] + 24 * v429);
                                        }
                                        else
                                        {
                                          v431 = (uint64_t *)v208[11];
                                        }
                                        if (v423 < v414
                                          && (v432 = *(_QWORD *)(v413 + 8 * v423)) != 0
                                          && (v433 = *(unsigned __int16 *)(v432 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v419 > v433)
                                          && (v434 = v418 + 8 * v433, v434 != v417)
                                          && *(_DWORD *)(v434 + 4) == (_DWORD)v422)
                                        {
                                          v384 = v211[10] + 24 * v433;
                                        }
                                        else
                                        {
                                          v384 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()((uint64_t)&v505, v421, v427, v431, v383, v384);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v383 += 3;
        v381 += 8;
      }
      while (v381 != v382);
    }
  }
LABEL_460:
  if ((_QWORD *)v214 == v218)
  {
    v505 = v271;
    v506 = v499;
    v435 = v211[7];
    v436 = v211[8];
    if (v435 != v436)
    {
      v437 = v211[10];
      do
      {
        v439 = *(unsigned int *)(v435 + 4);
        v440 = v439 >> 7;
        v441 = v206[4];
        if (v439 >> 7 < (v206[5] - v441) >> 3)
        {
          v442 = *(_QWORD *)(v441 + 8 * v440);
          if (v442)
          {
            v443 = v439 & 0x7F;
            v444 = *(unsigned __int16 *)(v442 + 2 * v443);
            v446 = v206[7];
            v445 = v206[8];
            if (v444 < (v445 - v446) >> 3)
            {
              v447 = v446 + 8 * v444;
              if (v447 != v445 && *(_DWORD *)(v447 + 4) == (_DWORD)v439)
              {
                v449 = v207[4];
                v450 = (v207[5] - v449) >> 3;
                if (v440 < v450)
                {
                  v451 = *(_QWORD *)(v449 + 8 * v440);
                  if (v451)
                  {
                    v452 = *(unsigned __int16 *)(v451 + 2 * v443);
                    v454 = v207[7];
                    v453 = v207[8];
                    v455 = (v453 - v454) >> 3;
                    if (v455 > v452)
                    {
                      v456 = v454 + 8 * v452;
                      if (v456 != v453 && *(_DWORD *)(v456 + 4) == (_DWORD)v439)
                      {
                        v458 = v208[4];
                        v459 = (v208[5] - v458) >> 3;
                        if (v440 < v459)
                        {
                          v460 = *(_QWORD *)(v458 + 8 * v440);
                          if (v460)
                          {
                            v461 = *(unsigned __int16 *)(v460 + 2 * v443);
                            v463 = v208[7];
                            v462 = v208[8];
                            v464 = (v462 - v463) >> 3;
                            if (v464 > v461)
                            {
                              v465 = v463 + 8 * v461;
                              if (v465 != v462 && *(_DWORD *)(v465 + 4) == (_DWORD)v439)
                              {
                                v467 = v209[4];
                                v468 = (v209[5] - v467) >> 3;
                                if (v440 < v468)
                                {
                                  v469 = *(_QWORD *)(v467 + 8 * v440);
                                  if (v469)
                                  {
                                    v470 = *(unsigned __int16 *)(v469 + 2 * v443);
                                    v472 = v209[7];
                                    v471 = v209[8];
                                    v473 = (v471 - v472) >> 3;
                                    if (v473 > v470)
                                    {
                                      v474 = v472 + 8 * v470;
                                      if (v474 != v471 && *(_DWORD *)(v474 + 4) == (_DWORD)v439)
                                      {
                                        v475 = *(_QWORD *)v435;
                                        v476 = HIDWORD(*(_QWORD *)v435);
                                        v477 = *(_QWORD *)v435 >> 39;
                                        if (v477 < v450
                                          && (v478 = *(_QWORD *)(v449 + 8 * v477)) != 0
                                          && (v479 = *(unsigned __int16 *)(v478 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v455 > v479)
                                          && (v480 = v454 + 8 * v479, v480 != v453)
                                          && *(_DWORD *)(v480 + 4) == (_DWORD)v476)
                                        {
                                          v481 = (uint64_t *)(v207[10] + 24 * v479);
                                        }
                                        else
                                        {
                                          v481 = (uint64_t *)v207[11];
                                        }
                                        if (v477 < v459
                                          && (v482 = *(_QWORD *)(v458 + 8 * v477)) != 0
                                          && (v483 = *(unsigned __int16 *)(v482 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v464 > v483)
                                          && (v484 = v463 + 8 * v483, v484 != v462)
                                          && *(_DWORD *)(v484 + 4) == (_DWORD)v476)
                                        {
                                          v485 = (uint64_t *)(v208[10] + 24 * v483);
                                        }
                                        else
                                        {
                                          v485 = (uint64_t *)v208[11];
                                        }
                                        if (v477 < v468
                                          && (v486 = *(_QWORD *)(v467 + 8 * v477)) != 0
                                          && (v487 = *(unsigned __int16 *)(v486 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v473 > v487)
                                          && (v488 = v472 + 8 * v487, v488 != v471)
                                          && *(_DWORD *)(v488 + 4) == (_DWORD)v476)
                                        {
                                          v438 = (uint64_t *)(v209[10] + 24 * v487);
                                        }
                                        else
                                        {
                                          v438 = (uint64_t *)v209[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()((uint64_t)&v505, v475, v481, v485, v438, v437);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v437 += 24;
        v435 += 8;
      }
      while (v435 != v436);
    }
  }
}

void sub_19F644B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _QWORD **v17;
  va_list va;

  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD44FD3DC899A7DDALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD44FD3DC899A7DDALL;
      if (*(_QWORD *)&v3 <= 0xD44FD3DC899A7DDALL)
        v5 = 0xD44FD3DC899A7DDALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD44FD3DC899A7DDALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD44FD3DC899A7DDALL)
            {
              if (v7[2] == 0xD44FD3DC899A7DDALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD44FD3DC899A7DDALL)
          {
            if (v7[2] == 0xD44FD3DC899A7DDALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidEnterView<md::MapDataType::DaVinciGround>]";
  *(_QWORD *)(v11 + 24) = 70;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2BF8;
  *(_QWORD *)(v11 + 8) = 0xD44FD3DC899A7DDALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD44FD3DC899A7DDALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD44FD3DC899A7DDALL;
  v15[1] = "SceneComponents::LayerDataDidEnterView<md::MapDataType::DaVinciGround>]";
  v15[2] = 70;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD44FD3DC899A7DDALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F644F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC018F3D549EA57BALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC018F3D549EA57BALL;
      if (*(_QWORD *)&v3 <= 0xC018F3D549EA57BALL)
        v5 = 0xC018F3D549EA57BALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC018F3D549EA57BALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC018F3D549EA57BALL)
            {
              if (v7[2] == 0xC018F3D549EA57BALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC018F3D549EA57BALL)
          {
            if (v7[2] == 0xC018F3D549EA57BALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidExitView<md::MapDataType::DaVinciGround>]";
  *(_QWORD *)(v11 + 24) = 69;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2AD8;
  *(_QWORD *)(v11 + 8) = 0xC018F3D549EA57BALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC018F3D549EA57BALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC018F3D549EA57BALL;
  v15[1] = "SceneComponents::LayerDataDidExitView<md::MapDataType::DaVinciGround>]";
  v15[2] = 69;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC018F3D549EA57BALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F645158(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x8E897EF07308135FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x8E897EF07308135FLL;
      if (*(_QWORD *)&v3 <= 0x8E897EF07308135FLL)
        v5 = 0x8E897EF07308135FLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x8E897EF07308135FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x8E897EF07308135FLL)
            {
              if (v7[2] == 0x8E897EF07308135FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x8E897EF07308135FLL)
          {
            if (v7[2] == 0x8E897EF07308135FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataExitingView<md::MapDataType::DaVinciGround>]";
  *(_QWORD *)(v11 + 24) = 69;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2B68;
  *(_QWORD *)(v11 + 8) = 0x8E897EF07308135FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x8E897EF07308135FLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x8E897EF07308135FLL;
  v15[1] = "SceneComponents::LayerDataExitingView<md::MapDataType::DaVinciGround>]";
  v15[2] = 69;
  gdc::Registry::_registerStorageDataSignals(a1, 0x8E897EF07308135FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F645380(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCC8451654026B61DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCC8451654026B61DLL;
      if (*(_QWORD *)&v3 <= 0xCC8451654026B61DLL)
        v5 = 0xCC8451654026B61DLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCC8451654026B61DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCC8451654026B61DLL)
            {
              if (v7[2] == 0xCC8451654026B61DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCC8451654026B61DLL)
          {
            if (v7[2] == 0xCC8451654026B61DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataPreviousInView<md::MapDataType::DaVinciGround>]";
  *(_QWORD *)(v11 + 24) = 72;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2D18;
  *(_QWORD *)(v11 + 8) = 0xCC8451654026B61DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCC8451654026B61DLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCC8451654026B61DLL;
  v15[1] = "SceneComponents::LayerDataPreviousInView<md::MapDataType::DaVinciGround>]";
  v15[2] = 72;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCC8451654026B61DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6455A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  unint64_t v20;
  unsigned __int8 v21;
  _WORD *v22;
  _WORD *v23;
  uint64_t *v24;
  _WORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  _BOOL4 v33;
  _QWORD *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _BOOL4 v53;
  uint64_t *v54;
  uint64_t *v55;
  _BOOL4 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;

  v8 = a4;
  v9 = (uint64_t)a3;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  v15 = (_QWORD **)(a3 + 1);
  v14 = a3[1];
  v16 = a4 + 1;
  v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2])
    v18 = (uint64_t *)(a3[1] + 16);
  else
    v18 = a3;
  *v18 = (uint64_t)v15;
  v19 = (uint64_t **)(*v16 + 16);
  if (!v17)
    v19 = (uint64_t **)a4;
  *v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(_QWORD *)v9 = v15;
  *(_QWORD *)(v9 + 16) = 0;
  *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a6 + 8));
  *(_QWORD *)a6 = a6 + 8;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v20 = **(_QWORD **)a1;
  if ((v21 & 1) == 0)
  {
LABEL_152:
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
  }
  v22 = *(_WORD **)(v20 + 48);
  v23 = *(_WORD **)(v20 + 56);
  v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v22 != v23)
  {
    v25 = *(_WORD **)(v20 + 48);
    while (*v25 != 33)
    {
      v25 += 16;
      if (v25 == v23)
        goto LABEL_18;
    }
    if (v25 == v23)
    {
      v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v22 != 33)
      {
        v22 += 16;
        if (v22 == v23)
        {
          v22 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      v24 = (uint64_t *)(v22 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (_QWORD *)*v24, v24 + 1);
  v20 = *(_QWORD *)v9;
  v26 = (uint64_t *)*v8;
  v27 = (uint64_t *)*a5;
  *(_QWORD *)&v94 = a5;
  *((_QWORD *)&v94 + 1) = v27;
  while ((_QWORD **)v20 != v15)
  {
    if (v26 == v16)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, v20 + 32);
        v44 = *(_QWORD **)(v20 + 8);
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = *(_QWORD **)(v20 + 16);
            v41 = *v45 == v20;
            v20 = (unint64_t)v45;
          }
          while (!v41);
        }
        v20 = (unint64_t)v45;
      }
      while (v45 != v15);
      break;
    }
    v28 = *(_QWORD *)(v20 + 32);
    v29 = *(unsigned __int8 *)(v20 + 48);
    v30 = (char)v29;
    v31 = *((unsigned __int8 *)v26 + 48);
    v32 = v26[4];
    if (v29 == v31)
      v33 = v28 < v32;
    else
      v33 = (char)v29 < (char)v31;
    if (v33)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, v20 + 32);
      v34 = *(_QWORD **)(v20 + 8);
      if (v34)
      {
        do
        {
          v20 = (unint64_t)v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = v20;
          v20 = *(_QWORD *)(v20 + 16);
        }
        while (*(_QWORD *)v20 != v35);
      }
    }
    else
    {
      v36 = v32 < v28;
      if (v30 != (char)v31)
        v36 = (char)v31 < v30;
      if (v36)
      {
        v37 = (uint64_t *)v26[1];
        if (v37)
        {
          do
          {
            v26 = v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v38);
        }
      }
      else
      {
        v39 = *(_QWORD **)(v20 + 8);
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = *(_QWORD **)(v20 + 16);
            v41 = *v40 == v20;
            v20 = (unint64_t)v40;
          }
          while (!v41);
        }
        v42 = (uint64_t *)v26[1];
        if (v42)
        {
          do
          {
            v26 = v42;
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v43);
        }
        v20 = (unint64_t)v40;
      }
    }
  }
  v8 = (uint64_t *)*v8;
  v46 = *(_QWORD *)v9;
  v47 = *(_QWORD *)a6;
  *(_QWORD *)&v94 = a6;
  *((_QWORD *)&v94 + 1) = v47;
  while (v8 != v16)
  {
    if ((_QWORD **)v46 == v15)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, (uint64_t)(v8 + 4));
        v63 = (uint64_t *)v8[1];
        if (v63)
        {
          do
          {
            v64 = v63;
            v63 = (uint64_t *)*v63;
          }
          while (v63);
        }
        else
        {
          do
          {
            v64 = (uint64_t *)v8[2];
            v41 = *v64 == (_QWORD)v8;
            v8 = v64;
          }
          while (!v41);
        }
        v8 = v64;
      }
      while (v64 != v16);
      break;
    }
    v48 = v8[4];
    v49 = *((unsigned __int8 *)v8 + 48);
    v50 = (char)v49;
    v51 = *(unsigned __int8 *)(v46 + 48);
    v52 = *(_QWORD *)(v46 + 32);
    if (v49 == v51)
      v53 = v48 < v52;
    else
      v53 = (char)v49 < (char)v51;
    if (v53)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, (uint64_t)(v8 + 4));
      v54 = (uint64_t *)v8[1];
      if (v54)
      {
        do
        {
          v8 = v54;
          v54 = (uint64_t *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = v8;
          v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v55);
      }
    }
    else
    {
      v56 = v52 < v48;
      if (v50 != (char)v51)
        v56 = (char)v51 < v50;
      if (v56)
      {
        v57 = *(_QWORD **)(v46 + 8);
        if (v57)
        {
          do
          {
            v46 = (uint64_t)v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v58);
        }
      }
      else
      {
        v59 = (uint64_t *)v8[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (uint64_t *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (uint64_t *)v8[2];
            v41 = *v60 == (_QWORD)v8;
            v8 = v60;
          }
          while (!v41);
        }
        v61 = *(_QWORD **)(v46 + 8);
        if (v61)
        {
          do
          {
            v46 = (uint64_t)v61;
            v61 = (_QWORD *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v62);
        }
        v8 = v60;
      }
    }
  }
  if (!a5[2])
    goto LABEL_122;
  v65 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v66 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v65 + 4, (uint64_t)&v95);
  if ((v67 & 1) != 0)
  {
    v20 = v65[11];
    v69 = v65[12];
    if (v20 >= v69)
    {
      v71 = (char *)v65[10];
      v16 = (uint64_t *)(v20 - (_QWORD)v71);
      v72 = v20 - (_QWORD)v71 + 1;
      if (v72 < 0)
        goto LABEL_154;
      v73 = v69 - (_QWORD)v71;
      if (2 * v73 > v72)
        v72 = 2 * v73;
      if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
        v74 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
        v75 = (char *)operator new(v74);
      else
        v75 = 0;
      v76 = &v75[v74];
      v70 = (uint64_t)v16 + (_QWORD)v75 + 1;
      v77 = &v71[-v20];
      if (v71 == (char *)v20)
        v77 = 0;
      v65[10] = (uint64_t)v16 + (_QWORD)v75 + (unint64_t)v77;
      v65[11] = v70;
      v65[12] = (uint64_t)v76;
      if (v71)
        operator delete(v71);
    }
    else
    {
      v70 = v20 + 1;
    }
    v65[11] = v70;
    v9 = v65[31];
    goto LABEL_118;
  }
  v9 = v65[31];
  if (v65[10] + (((uint64_t)v66 - v65[7]) >> 3) == v65[11])
  {
LABEL_118:
    v8 = &v95;
    a5 = (uint64_t *)v65[22];
    if (a5)
    {
      v20 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = v9;
        v78 = a5[6];
        if (!v78)
          goto LABEL_151;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v78 + 48))(v78, &v94, &v96);
        a5 = (uint64_t *)*a5;
        if (!a5)
          goto LABEL_122;
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v65[16];
  if (a5)
  {
    v8 = &v95;
    v20 = 1;
    do
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = v9;
      v68 = a5[6];
      if (!v68)
        goto LABEL_151;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v68 + 48))(v68, &v94, &v96);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!*(_QWORD *)(a6 + 16))
    return;
  v79 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v80 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v79 + 4, (uint64_t)&v95);
  if ((v81 & 1) != 0)
  {
    v84 = (_BYTE *)v79[11];
    v83 = v79[12];
    if ((unint64_t)v84 < v83)
    {
      v85 = (uint64_t)(v84 + 1);
LABEL_145:
      v79[11] = v85;
      a2 = v79[31];
      goto LABEL_146;
    }
    v86 = (char *)v79[10];
    v8 = (uint64_t *)(v84 - v86);
    v87 = v84 - v86 + 1;
    if (v87 >= 0)
    {
      v88 = v83 - (_QWORD)v86;
      if (2 * v88 > v87)
        v87 = 2 * v88;
      if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
        v89 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
        v90 = (char *)operator new(v89);
      else
        v90 = 0;
      v91 = &v90[v89];
      v85 = (uint64_t)v8 + (_QWORD)v90 + 1;
      v92 = (char *)(v86 - v84);
      if (v86 == v84)
        v92 = 0;
      v79[10] = (uint64_t)v8 + (_QWORD)v90 + (unint64_t)v92;
      v79[11] = v85;
      v79[12] = (uint64_t)v91;
      if (v86)
        operator delete(v86);
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v79[31];
  if (v79[10] + (((uint64_t)v80 - v79[7]) >> 3) != v79[11])
  {
    a6 = v79[16];
    if (a6)
    {
      a5 = &v95;
      v9 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = a2;
        v82 = *(_QWORD *)(a6 + 48);
        if (!v82)
          break;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v82 + 48))(v82, &v94, &v96);
        a6 = *(_QWORD *)a6;
        if (!a6)
          return;
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v95;
  a6 = v79[22];
  if (a6)
  {
    v9 = 1;
    while (1)
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = a2;
      v93 = *(_QWORD *)(a6 + 48);
      if (!v93)
        break;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v93 + 48))(v93, &v94, &v96);
      a6 = *(_QWORD *)a6;
      if (!a6)
        return;
    }
    goto LABEL_151;
  }
}

uint64_t *std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21[9];

  if (a2 != a3)
  {
    v21[7] = v3;
    v21[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = std::__tree<gdc::LayerDataWithWorld>::__find_equal<gdc::LayerDataWithWorld>(v7, v8, v21, &v20, v6[4], *((_BYTE *)v6 + 48));
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_13;
      }
      else
      {
        v10 = result;
        v11 = (uint64_t *)operator new(0x38uLL);
        v12 = v11;
        v11[4] = v6[4];
        v13 = v6[5];
        v11[5] = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        *((_BYTE *)v11 + 48) = *((_BYTE *)v6 + 48);
        v16 = v21[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v16;
        *v10 = (uint64_t)v11;
        v17 = *(_QWORD **)*v7;
        if (v17)
        {
          *v7 = (uint64_t)v17;
          v12 = (uint64_t *)*v10;
        }
        result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v12);
        ++v7[2];
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_13:
            v18 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v18 = (_QWORD *)v6[2];
        v19 = *v18 == (_QWORD)v6;
        v6 = v18;
      }
      while (!v19);
LABEL_3:
      v6 = v18;
    }
    while (v18 != a3);
  }
  return result;
}

_QWORD **std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100](_QWORD **a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t *v19;
  uint64_t *v20;

  v4 = (uint64_t **)*a1;
  v5 = std::__tree<gdc::LayerDataWithWorld>::__find_equal<gdc::LayerDataWithWorld>(*a1, a1[1], &v20, &v19, *(_QWORD *)a2, *(_BYTE *)(a2 + 16));
  v6 = (_QWORD *)*v5;
  if (!*v5)
  {
    v7 = v5;
    v8 = operator new(0x38uLL);
    v6 = v8;
    v9 = *(_QWORD *)(a2 + 8);
    v8[4] = *(_QWORD *)a2;
    v8[5] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *((_BYTE *)v8 + 48) = *(_BYTE *)(a2 + 16);
    v12 = v20;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v12;
    *v7 = (uint64_t)v8;
    v13 = (uint64_t *)**v4;
    v14 = v8;
    if (v13)
    {
      *v4 = v13;
      v14 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v4[1], v14);
    v4[2] = (uint64_t *)((char *)v4[2] + 1);
  }
  a1[1] = v6;
  v15 = (_QWORD *)v6[1];
  if (v15)
  {
    do
    {
      v16 = v15;
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  else
  {
    do
    {
      v16 = (_QWORD *)v6[2];
      v17 = *v16 == (_QWORD)v6;
      v6 = v16;
    }
    while (!v17);
  }
  a1[1] = v16;
  return a1;
}

uint64_t std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)33>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)33>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)33>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)33>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)33>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B10E0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)33>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B10E0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)33>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)34>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectMapDataLogic<(md::MapDataType)34>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)34>::didBecomeInactive(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    result = gdc::Registry::destroy(*(_QWORD *)(result + 128), *(_QWORD *)(result + 120));
    *(_QWORD *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::CollectMapDataContext<md::MapDataType::DaVinciGroundGlobe>]";
  v4[3] = 62;
  v4[4] = result;
  *v4 = &off_1E42B1108;
  v4[1] = 0x412AFB1345D08930;
  *a2 = v4;
  return result;
}

void sub_19F646974(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x412AFB1345D08930 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x412AFB1345D08930 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x412AFB1345D08930 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x412AFB1345D08930 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x412AFB1345D08930 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::CollectMapDataLogic<(md::MapDataType)34>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _WORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _WORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _WORD *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  unint64_t v57;
  __int128 v58;
  __int16 v59;
  _QWORD *i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *j;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _QWORD *k;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  _QWORD *m;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  _QWORD *v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  _QWORD *n;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  _QWORD *v497;
  uint64_t *v498;
  uint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  uint64_t *v509;

  v5 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>(*(_QWORD *)(a1 + 128));
  v6 = v5;
  if (v5[29])
  {
    v7 = (_QWORD *)v5[28];
    if (v7)
    {
      v8 = (_QWORD *)v5[31];
      v9 = (uint64_t *)v5[7];
      v10 = (uint64_t)(v5[8] - (_QWORD)v9) >> 3;
      do
      {
        v505 = v9;
        v506 = v10;
        v500 = v8;
        v11 = v7[6];
        if (!v11)
          goto LABEL_516;
        (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v500, &v505);
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  v12 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>(*(_QWORD *)(a1 + 128));
  v13 = v12;
  if (v12[29])
  {
    v14 = (_QWORD *)v12[28];
    if (v14)
    {
      v15 = (_QWORD *)v12[31];
      v16 = (uint64_t *)v12[7];
      v17 = (uint64_t)(v12[8] - (_QWORD)v16) >> 3;
      do
      {
        v505 = v16;
        v506 = v17;
        v500 = v15;
        v18 = v14[6];
        if (!v18)
          goto LABEL_516;
        (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v18 + 48))(v18, &v500, &v505);
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  v13[8] = v13[7];
  v13[11] = v13[10];
  v498 = *a3;
  v19 = *(_QWORD *)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1)
  {
    v20 = gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
    *(_QWORD *)(a1 + 120) = v20;
    v21 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)34>>(*(_QWORD *)(a1 + 128));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v21, v20);
    v22 = *(_QWORD *)(a1 + 120);
    v23 = *(_QWORD *)(a1 + 128);
    v500 = (_QWORD *)0xC9B0FCE1C0B0A859;
    v24 = *(int8x8_t *)(v23 + 128);
    if (v24)
    {
      v25 = (uint8x8_t)vcnt_s8(v24);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = 0xC9B0FCE1C0B0A859;
        if (*(_QWORD *)&v24 <= 0xC9B0FCE1C0B0A859)
          v26 = 0xC9B0FCE1C0B0A859 % *(_QWORD *)&v24;
      }
      else
      {
        v26 = (*(_QWORD *)&v24 - 1) & 0xC9B0FCE1C0B0A859;
      }
      v27 = *(_QWORD **)(*(_QWORD *)(v23 + 120) + 8 * v26);
      if (v27)
      {
        v28 = (_QWORD *)*v27;
        if (v28)
        {
          if (v25.u32[0] < 2uLL)
          {
            v29 = *(_QWORD *)&v24 - 1;
            while (1)
            {
              v31 = v28[1];
              if (v31 == 0xC9B0FCE1C0B0A859)
              {
                if (v28[2] == 0xC9B0FCE1C0B0A859)
                  goto LABEL_230;
              }
              else if ((v31 & v29) != v26)
              {
                goto LABEL_34;
              }
              v28 = (_QWORD *)*v28;
              if (!v28)
                goto LABEL_34;
            }
          }
          do
          {
            v30 = v28[1];
            if (v30 == 0xC9B0FCE1C0B0A859)
            {
              if (v28[2] == 0xC9B0FCE1C0B0A859)
              {
LABEL_230:
                v32 = v28[3];
                goto LABEL_37;
              }
            }
            else
            {
              if (v30 >= *(_QWORD *)&v24)
                v30 %= *(_QWORD *)&v24;
              if (v30 != v26)
                break;
            }
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_34:
    v32 = operator new();
    *(_QWORD *)(v32 + 16) = "SceneComponents::LayerDataInfo<md::MapDataType::DaVinciGroundGlobe>]";
    *(_QWORD *)(v32 + 24) = 67;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_OWORD *)(v32 + 64) = 0u;
    *(_OWORD *)(v32 + 80) = 0u;
    *(_OWORD *)(v32 + 96) = 0u;
    *(_OWORD *)(v32 + 112) = 0u;
    *(_OWORD *)(v32 + 128) = 0u;
    *(_DWORD *)(v32 + 144) = 1065353216;
    *(_OWORD *)(v32 + 152) = 0u;
    *(_OWORD *)(v32 + 168) = 0u;
    *(_QWORD *)(v32 + 184) = 0;
    *(_DWORD *)(v32 + 192) = 1065353216;
    *(_OWORD *)(v32 + 200) = 0u;
    *(_OWORD *)(v32 + 216) = 0u;
    *(_QWORD *)(v32 + 232) = 0;
    *(_DWORD *)(v32 + 240) = 1065353216;
    *(_QWORD *)v32 = &off_1E42B2988;
    *(_QWORD *)(v32 + 8) = 0xC9B0FCE1C0B0A859;
    *(_QWORD *)(v32 + 248) = v23;
    v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v23 + 120), 0xC9B0FCE1C0B0A859, &v500);
    v34 = v33[3];
    v33[3] = v32;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v505 = (uint64_t *)0xC9B0FCE1C0B0A859;
    v506 = (uint64_t)"SceneComponents::LayerDataInfo<md::MapDataType::DaVinciGroundGlobe>]";
    v507 = 67;
    gdc::Registry::_registerStorageDataSignals(v23, 0xC9B0FCE1C0B0A859, (uint64_t)&v505, (uint64_t *)(v32 + 104));
LABEL_37:
    v504 = v22;
    v35 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v32 + 32), (uint64_t)&v504);
    if ((v36 & 1) != 0)
    {
      v42 = *(char **)(v32 + 88);
      v41 = *(_QWORD *)(v32 + 96);
      if ((unint64_t)v42 >= v41)
      {
        v44 = *(char **)(v32 + 80);
        v45 = v42 - v44;
        if (v42 - v44 <= -3)
          abort();
        v46 = v45 >> 1;
        v47 = v41 - (_QWORD)v44;
        if (v47 <= (v45 >> 1) + 1)
          v48 = v46 + 1;
        else
          v48 = v47;
        if (v47 >= 0x7FFFFFFFFFFFFFFELL)
          v49 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          if (v49 < 0)
            goto LABEL_521;
          v50 = operator new(2 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[2 * v46];
        v52 = &v50[2 * v49];
        *v51 = 34;
        v43 = v51 + 1;
        if (v42 != v44)
        {
          v53 = v42 - v44 - 2;
          if (v53 < 0x1E)
            goto LABEL_529;
          if (v42 - v50 - (v45 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_529;
          v54 = (v53 >> 1) + 1;
          v55 = &v50[2 * v46 - 16];
          v56 = v42 - 16;
          v57 = v54 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v58 = *(_OWORD *)v56;
            *(v55 - 1) = *((_OWORD *)v56 - 1);
            *v55 = v58;
            v55 -= 2;
            v56 -= 32;
            v57 -= 16;
          }
          while (v57);
          v51 -= v54 & 0xFFFFFFFFFFFFFFF0;
          v42 -= 2 * (v54 & 0xFFFFFFFFFFFFFFF0);
          if (v54 != (v54 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_529:
            do
            {
              v59 = *((_WORD *)v42 - 1);
              v42 -= 2;
              *--v51 = v59;
            }
            while (v42 != v44);
          }
        }
        *(_QWORD *)(v32 + 80) = v51;
        *(_QWORD *)(v32 + 88) = v43;
        *(_QWORD *)(v32 + 96) = v52;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_WORD *)v42 = 34;
        v43 = v42 + 2;
      }
      *(_QWORD *)(v32 + 88) = v43;
      v38 = *(_QWORD **)(v32 + 248);
    }
    else
    {
      v37 = (_WORD *)(*(_QWORD *)(v32 + 80) + (((uint64_t)v35 - *(_QWORD *)(v32 + 56)) >> 2));
      *v37 = 34;
      v38 = *(_QWORD **)(v32 + 248);
      if (v37 != *(_WORD **)(v32 + 88))
      {
        v39 = *(_QWORD **)(v32 + 128);
        if (v39)
        {
          while (1)
          {
            v505 = &v504;
            v506 = 1;
            v500 = v38;
            v40 = v39[6];
            if (!v40)
              break;
            (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v40 + 48))(v40, &v500, &v505);
            v39 = (_QWORD *)*v39;
            if (!v39)
              goto LABEL_69;
          }
LABEL_516:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_517:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        goto LABEL_69;
      }
    }
    for (i = *(_QWORD **)(v32 + 176); i; i = (_QWORD *)*i)
    {
      v505 = &v504;
      v506 = 1;
      v500 = v38;
      v61 = i[6];
      if (!v61)
        goto LABEL_516;
      (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v61 + 48))(v61, &v500, &v505);
    }
LABEL_69:
    v63 = *(_QWORD *)(a1 + 120);
    v62 = *(_QWORD *)(a1 + 128);
    v501 = 0;
    v502 = 0;
    v500 = &v501;
    v64 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)34>>(v62);
    v503 = v63;
    v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v503);
    if ((v66 & 1) != 0)
    {
      v71 = v64[12];
      v72 = (uint64_t *)v64[11];
      if ((unint64_t)v72 >= v71)
      {
        v74 = v64[10];
        v75 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v72 - v74) >> 3);
        if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v74) >> 3);
        v77 = 2 * v76;
        if (2 * v76 <= v75 + 1)
          v77 = v75 + 1;
        if (v76 >= 0x555555555555555)
          v78 = 0xAAAAAAAAAAAAAAALL;
        else
          v78 = v77;
        v509 = v64 + 12;
        if (v78)
        {
          if (v78 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_521;
          v79 = (uint64_t *)operator new(24 * v78);
        }
        else
        {
          v79 = 0;
        }
        v83 = &v79[3 * v75];
        v505 = v79;
        v506 = (uint64_t)v83;
        v507 = (uint64_t)v83;
        v508 = (char *)&v79[3 * v78];
        v83[1] = 0;
        v83[2] = 0;
        *v83 = (uint64_t)(v83 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v83, v500, &v501);
        v84 = v506;
        v73 = (uint64_t *)(v507 + 24);
        v85 = (char *)v64[10];
        v86 = (char *)v64[11];
        if (v86 == v85)
        {
          v64[10] = v506;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
        }
        else
        {
          v87 = 0;
          do
          {
            v88 = v84 + v87;
            *(_QWORD *)(v88 - 24) = *(_QWORD *)&v86[v87 - 24];
            v89 = &v86[v87 - 16];
            v90 = *(_QWORD *)v89;
            *(_QWORD *)(v84 + v87 - 16) = *(_QWORD *)v89;
            v91 = v84 + v87 - 16;
            v92 = *(_QWORD *)&v86[v87 - 8];
            *(_QWORD *)(v88 - 8) = v92;
            if (v92)
            {
              *(_QWORD *)(v90 + 16) = v91;
              *(_QWORD *)&v86[v87 - 24] = v89;
              *(_QWORD *)v89 = 0;
              *(_QWORD *)&v86[v87 - 8] = 0;
            }
            else
            {
              *(_QWORD *)(v88 - 24) = v91;
            }
            v87 -= 24;
          }
          while (&v86[v87] != v85);
          v93 = v84 + v87;
          v86 = (char *)v64[10];
          v94 = (char *)v64[11];
          v64[10] = v93;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
          if (v94 != v86)
          {
            do
            {
              v95 = v94 - 24;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v94 - 2));
              v94 = v95;
            }
            while (v95 != v86);
          }
        }
        if (v86)
          operator delete(v86);
      }
      else
      {
        v72[2] = 0;
        v72[1] = 0;
        *v72 = (uint64_t)(v72 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v72, v500, &v501);
        v73 = v72 + 3;
        v64[11] = (uint64_t)(v72 + 3);
      }
      v64[11] = (uint64_t)v73;
      v80 = v64[31];
    }
    else
    {
      v67 = v64[10] + 24 * (((uint64_t)v65 - v64[7]) >> 3);
      v68 = v67 + 8;
      std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v67 + 8));
      *(_QWORD *)v67 = v500;
      v69 = v501;
      *(_QWORD *)(v67 + 8) = v501;
      v70 = v502;
      *(_QWORD *)(v67 + 16) = v502;
      if (v70)
      {
        v69[2] = v68;
        v500 = &v501;
        v501 = 0;
        v502 = 0;
      }
      else
      {
        *(_QWORD *)v67 = v68;
      }
      v80 = v64[31];
      if (v67 != v64[11])
      {
        for (j = (_QWORD *)v64[16]; j; j = (_QWORD *)*j)
        {
          v505 = &v503;
          v506 = 1;
          v504 = v80;
          v82 = j[6];
          if (!v82)
            goto LABEL_517;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v82 + 48))(v82, &v504, &v505);
        }
LABEL_106:
        std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
        v99 = *(_QWORD *)(a1 + 120);
        v98 = *(_QWORD *)(a1 + 128);
        v501 = 0;
        v502 = 0;
        v500 = &v501;
        v100 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>(v98);
        v503 = v99;
        v101 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v100 + 4, (uint64_t)&v503);
        if ((v102 & 1) != 0)
        {
          v107 = v100[12];
          v108 = (uint64_t *)v100[11];
          if ((unint64_t)v108 >= v107)
          {
            v110 = v100[10];
            v111 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v108 - v110) >> 3);
            if (v111 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v110) >> 3);
            v113 = 2 * v112;
            if (2 * v112 <= v111 + 1)
              v113 = v111 + 1;
            if (v112 >= 0x555555555555555)
              v114 = 0xAAAAAAAAAAAAAAALL;
            else
              v114 = v113;
            v509 = v100 + 12;
            if (v114)
            {
              if (v114 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_521;
              v115 = (uint64_t *)operator new(24 * v114);
            }
            else
            {
              v115 = 0;
            }
            v119 = &v115[3 * v111];
            v505 = v115;
            v506 = (uint64_t)v119;
            v507 = (uint64_t)v119;
            v508 = (char *)&v115[3 * v114];
            v119[1] = 0;
            v119[2] = 0;
            *v119 = (uint64_t)(v119 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v119, v500, &v501);
            v120 = v506;
            v109 = (uint64_t *)(v507 + 24);
            v121 = (char *)v100[10];
            v122 = (char *)v100[11];
            if (v122 == v121)
            {
              v100[10] = v506;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
            }
            else
            {
              v123 = 0;
              do
              {
                v124 = v120 + v123;
                *(_QWORD *)(v124 - 24) = *(_QWORD *)&v122[v123 - 24];
                v125 = &v122[v123 - 16];
                v126 = *(_QWORD *)v125;
                *(_QWORD *)(v120 + v123 - 16) = *(_QWORD *)v125;
                v127 = v120 + v123 - 16;
                v128 = *(_QWORD *)&v122[v123 - 8];
                *(_QWORD *)(v124 - 8) = v128;
                if (v128)
                {
                  *(_QWORD *)(v126 + 16) = v127;
                  *(_QWORD *)&v122[v123 - 24] = v125;
                  *(_QWORD *)v125 = 0;
                  *(_QWORD *)&v122[v123 - 8] = 0;
                }
                else
                {
                  *(_QWORD *)(v124 - 24) = v127;
                }
                v123 -= 24;
              }
              while (&v122[v123] != v121);
              v129 = v120 + v123;
              v122 = (char *)v100[10];
              v130 = (char *)v100[11];
              v100[10] = v129;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
              if (v130 != v122)
              {
                do
                {
                  v131 = v130 - 24;
                  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v130 - 2));
                  v130 = v131;
                }
                while (v131 != v122);
              }
            }
            if (v122)
              operator delete(v122);
          }
          else
          {
            v108[2] = 0;
            v108[1] = 0;
            *v108 = (uint64_t)(v108 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v108, v500, &v501);
            v109 = v108 + 3;
            v100[11] = (uint64_t)(v108 + 3);
          }
          v100[11] = (uint64_t)v109;
          v116 = v100[31];
        }
        else
        {
          v103 = v100[10] + 24 * (((uint64_t)v101 - v100[7]) >> 3);
          v104 = v103 + 8;
          std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v103 + 8));
          *(_QWORD *)v103 = v500;
          v105 = v501;
          *(_QWORD *)(v103 + 8) = v501;
          v106 = v502;
          *(_QWORD *)(v103 + 16) = v502;
          if (v106)
          {
            v105[2] = v104;
            v500 = &v501;
            v501 = 0;
            v502 = 0;
          }
          else
          {
            *(_QWORD *)v103 = v104;
          }
          v116 = v100[31];
          if (v103 != v100[11])
          {
            for (k = (_QWORD *)v100[16]; k; k = (_QWORD *)*k)
            {
              v505 = &v503;
              v506 = 1;
              v504 = v116;
              v118 = k[6];
              if (!v118)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v118 + 48))(v118, &v504, &v505);
            }
LABEL_143:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v135 = *(_QWORD *)(a1 + 120);
            v134 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = &v501;
            v136 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>(v134);
            v503 = v135;
            v137 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v136 + 4, (uint64_t)&v503);
            if ((v138 & 1) != 0)
            {
              v143 = v136[12];
              v144 = (uint64_t *)v136[11];
              if ((unint64_t)v144 >= v143)
              {
                v146 = v136[10];
                v147 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v144 - v146) >> 3);
                if (v147 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - v146) >> 3);
                v149 = 2 * v148;
                if (2 * v148 <= v147 + 1)
                  v149 = v147 + 1;
                if (v148 >= 0x555555555555555)
                  v150 = 0xAAAAAAAAAAAAAAALL;
                else
                  v150 = v149;
                v509 = v136 + 12;
                if (v150)
                {
                  if (v150 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_521;
                  v151 = (uint64_t *)operator new(24 * v150);
                }
                else
                {
                  v151 = 0;
                }
                v155 = &v151[3 * v147];
                v505 = v151;
                v506 = (uint64_t)v155;
                v507 = (uint64_t)v155;
                v508 = (char *)&v151[3 * v150];
                v155[1] = 0;
                v155[2] = 0;
                *v155 = (uint64_t)(v155 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v155, v500, &v501);
                v156 = v506;
                v145 = (uint64_t *)(v507 + 24);
                v157 = (char *)v136[10];
                v158 = (char *)v136[11];
                if (v158 == v157)
                {
                  v136[10] = v506;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                }
                else
                {
                  v159 = 0;
                  do
                  {
                    v160 = v156 + v159;
                    *(_QWORD *)(v160 - 24) = *(_QWORD *)&v158[v159 - 24];
                    v161 = &v158[v159 - 16];
                    v162 = *(_QWORD *)v161;
                    *(_QWORD *)(v156 + v159 - 16) = *(_QWORD *)v161;
                    v163 = v156 + v159 - 16;
                    v164 = *(_QWORD *)&v158[v159 - 8];
                    *(_QWORD *)(v160 - 8) = v164;
                    if (v164)
                    {
                      *(_QWORD *)(v162 + 16) = v163;
                      *(_QWORD *)&v158[v159 - 24] = v161;
                      *(_QWORD *)v161 = 0;
                      *(_QWORD *)&v158[v159 - 8] = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v160 - 24) = v163;
                    }
                    v159 -= 24;
                  }
                  while (&v158[v159] != v157);
                  v165 = v156 + v159;
                  v158 = (char *)v136[10];
                  v166 = (char *)v136[11];
                  v136[10] = v165;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                  if (v166 != v158)
                  {
                    do
                    {
                      v167 = v166 - 24;
                      std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v166 - 2));
                      v166 = v167;
                    }
                    while (v167 != v158);
                  }
                }
                if (v158)
                  operator delete(v158);
              }
              else
              {
                v144[2] = 0;
                v144[1] = 0;
                *v144 = (uint64_t)(v144 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v144, v500, &v501);
                v145 = v144 + 3;
                v136[11] = (uint64_t)(v144 + 3);
              }
              v136[11] = (uint64_t)v145;
              v152 = v136[31];
            }
            else
            {
              v139 = v136[10] + 24 * (((uint64_t)v137 - v136[7]) >> 3);
              v140 = v139 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v139 + 8));
              *(_QWORD *)v139 = v500;
              v141 = v501;
              *(_QWORD *)(v139 + 8) = v501;
              v142 = v502;
              *(_QWORD *)(v139 + 16) = v502;
              if (v142)
              {
                v141[2] = v140;
                v500 = &v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v139 = v140;
              }
              v152 = v136[31];
              if (v139 != v136[11])
              {
                v153 = (_QWORD *)v136[16];
                if (v153)
                {
                  while (1)
                  {
                    v505 = &v503;
                    v506 = 1;
                    v504 = v152;
                    v154 = v153[6];
                    if (!v154)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v154 + 48))(v154, &v504, &v505);
                    v153 = (_QWORD *)*v153;
                    if (!v153)
                      goto LABEL_180;
                  }
                }
                goto LABEL_180;
              }
            }
            for (m = (_QWORD *)v136[22]; m; m = (_QWORD *)*m)
            {
              v505 = &v503;
              v506 = 1;
              v504 = v152;
              v169 = m[6];
              if (!v169)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v169 + 48))(v169, &v504, &v505);
            }
LABEL_180:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v171 = *(_QWORD *)(a1 + 120);
            v170 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = &v501;
            v172 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>(v170);
            v503 = v171;
            v173 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v172 + 4, (uint64_t)&v503);
            if ((v174 & 1) == 0)
            {
              v175 = v172[10] + 24 * (((uint64_t)v173 - v172[7]) >> 3);
              v176 = v175 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v175 + 8));
              *(_QWORD *)v175 = v500;
              v177 = v501;
              *(_QWORD *)(v175 + 8) = v501;
              v178 = v502;
              *(_QWORD *)(v175 + 16) = v502;
              if (v178)
              {
                v177[2] = v176;
                v500 = &v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v175 = v176;
              }
              v188 = v172[31];
              if (v175 != v172[11])
              {
                v189 = (_QWORD *)v172[16];
                if (v189)
                {
                  while (1)
                  {
                    v505 = &v503;
                    v506 = 1;
                    v504 = v188;
                    v190 = v189[6];
                    if (!v190)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v190 + 48))(v190, &v504, &v505);
                    v189 = (_QWORD *)*v189;
                    if (!v189)
                      goto LABEL_217;
                  }
                }
                goto LABEL_217;
              }
LABEL_214:
              for (n = (_QWORD *)v172[22]; n; n = (_QWORD *)*n)
              {
                v505 = &v503;
                v506 = 1;
                v504 = v188;
                v205 = n[6];
                if (!v205)
                  goto LABEL_517;
                (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v205 + 48))(v205, &v504, &v505);
              }
LABEL_217:
              std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
              goto LABEL_218;
            }
            v179 = v172[12];
            v180 = (uint64_t *)v172[11];
            if ((unint64_t)v180 < v179)
            {
              v180[2] = 0;
              v180[1] = 0;
              *v180 = (uint64_t)(v180 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v180, v500, &v501);
              v181 = v180 + 3;
              v172[11] = (uint64_t)(v180 + 3);
LABEL_213:
              v172[11] = (uint64_t)v181;
              v188 = v172[31];
              goto LABEL_214;
            }
            v182 = v172[10];
            v183 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v180 - v182) >> 3);
            if (v183 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - v182) >> 3);
            v185 = 2 * v184;
            if (2 * v184 <= v183 + 1)
              v185 = v183 + 1;
            if (v184 >= 0x555555555555555)
              v186 = 0xAAAAAAAAAAAAAAALL;
            else
              v186 = v185;
            v509 = v172 + 12;
            if (!v186)
            {
              v187 = 0;
              goto LABEL_201;
            }
            if (v186 <= 0xAAAAAAAAAAAAAAALL)
            {
              v187 = (uint64_t *)operator new(24 * v186);
LABEL_201:
              v191 = &v187[3 * v183];
              v505 = v187;
              v506 = (uint64_t)v191;
              v507 = (uint64_t)v191;
              v508 = (char *)&v187[3 * v186];
              v191[1] = 0;
              v191[2] = 0;
              *v191 = (uint64_t)(v191 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v191, v500, &v501);
              v192 = v506;
              v181 = (uint64_t *)(v507 + 24);
              v193 = (char *)v172[10];
              v194 = (char *)v172[11];
              if (v194 == v193)
              {
                v172[10] = v506;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
              }
              else
              {
                v195 = 0;
                do
                {
                  v196 = v192 + v195;
                  *(_QWORD *)(v196 - 24) = *(_QWORD *)&v194[v195 - 24];
                  v197 = &v194[v195 - 16];
                  v198 = *(_QWORD *)v197;
                  *(_QWORD *)(v192 + v195 - 16) = *(_QWORD *)v197;
                  v199 = v192 + v195 - 16;
                  v200 = *(_QWORD *)&v194[v195 - 8];
                  *(_QWORD *)(v196 - 8) = v200;
                  if (v200)
                  {
                    *(_QWORD *)(v198 + 16) = v199;
                    *(_QWORD *)&v194[v195 - 24] = v197;
                    *(_QWORD *)v197 = 0;
                    *(_QWORD *)&v194[v195 - 8] = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v196 - 24) = v199;
                  }
                  v195 -= 24;
                }
                while (&v194[v195] != v193);
                v201 = v192 + v195;
                v194 = (char *)v172[10];
                v202 = (char *)v172[11];
                v172[10] = v201;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
                if (v202 != v194)
                {
                  do
                  {
                    v203 = v202 - 24;
                    std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v202 - 2));
                    v202 = v203;
                  }
                  while (v203 != v194);
                }
              }
              if (v194)
                operator delete(v194);
              goto LABEL_213;
            }
LABEL_521:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
        }
        v132 = (_QWORD *)v100[22];
        if (v132)
        {
          while (1)
          {
            v505 = &v503;
            v506 = 1;
            v504 = v116;
            v133 = v132[6];
            if (!v133)
              goto LABEL_517;
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v133 + 48))(v133, &v504, &v505);
            v132 = (_QWORD *)*v132;
            if (!v132)
              goto LABEL_143;
          }
        }
        goto LABEL_143;
      }
    }
    v96 = (_QWORD *)v64[22];
    if (v96)
    {
      while (1)
      {
        v505 = &v503;
        v506 = 1;
        v504 = v80;
        v97 = v96[6];
        if (!v97)
          goto LABEL_517;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v97 + 48))(v97, &v504, &v505);
        v96 = (_QWORD *)*v96;
        if (!v96)
          goto LABEL_106;
      }
    }
    goto LABEL_106;
  }
LABEL_218:
  v499 = a1;
  v206 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)34>>(v19);
  v207 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)34>>(v19);
  v208 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>(v19);
  v209 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>(v19);
  v210 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>(v19);
  v211 = (_QWORD *)v210;
  v212 = v208 + 4;
  v213 = v209 + 4;
  v214 = v210 + 32;
  v216 = v206[7];
  v215 = v206[8];
  if (v207[8] - v207[7] >= (unint64_t)(v215 - v216))
    v217 = v206 + 4;
  else
    v217 = v207 + 4;
  if (v208[8] - v208[7] < v217[4] - v217[3])
    v217 = v208 + 4;
  if (v209[8] - v209[7] < v217[4] - v217[3])
    v217 = v209 + 4;
  if (*(_QWORD *)(v210 + 64) - *(_QWORD *)(v210 + 56) >= v217[4] - v217[3])
    v218 = v217;
  else
    v218 = (_QWORD *)(v210 + 32);
  if (v206 + 4 == v218)
  {
    v495 = v210 + 32;
    v505 = v498;
    v506 = v499;
    while (v216 != v215)
    {
      v220 = *(unsigned int *)(v216 + 4);
      v221 = v220 >> 7;
      v222 = v207[4];
      v223 = (v207[5] - v222) >> 3;
      if (v220 >> 7 < v223)
      {
        v224 = *(_QWORD *)(v222 + 8 * v221);
        if (v224)
        {
          v225 = v220 & 0x7F;
          v226 = *(unsigned __int16 *)(v224 + 2 * v225);
          v227 = v207[7];
          v228 = v207[8];
          v229 = (v228 - v227) >> 3;
          if (v229 > v226)
          {
            v230 = v227 + 8 * v226;
            if (v230 != v228 && *(_DWORD *)(v230 + 4) == (_DWORD)v220)
            {
              v232 = v208[4];
              v233 = (v208[5] - v232) >> 3;
              if (v221 < v233)
              {
                v234 = *(_QWORD *)(v232 + 8 * v221);
                if (v234)
                {
                  v235 = *(unsigned __int16 *)(v234 + 2 * v225);
                  v237 = v208[7];
                  v236 = v208[8];
                  v238 = (v236 - v237) >> 3;
                  if (v238 > v235)
                  {
                    v239 = v237 + 8 * v235;
                    if (v239 != v236 && *(_DWORD *)(v239 + 4) == (_DWORD)v220)
                    {
                      v241 = v209[4];
                      v242 = (v209[5] - v241) >> 3;
                      if (v221 < v242)
                      {
                        v243 = *(_QWORD *)(v241 + 8 * v221);
                        if (v243)
                        {
                          v244 = *(unsigned __int16 *)(v243 + 2 * v225);
                          v245 = v209[7];
                          v496 = v213;
                          v494 = v209[8];
                          v493 = (v494 - v245) >> 3;
                          if (v493 > v244)
                          {
                            v246 = v245 + 8 * v244;
                            if (v246 != v494 && *(_DWORD *)(v246 + 4) == (_DWORD)v220)
                            {
                              v492 = v211[4];
                              v491 = (v211[5] - v492) >> 3;
                              if (v221 < v491)
                              {
                                v248 = *(_QWORD *)(v492 + 8 * v221);
                                if (v248)
                                {
                                  v249 = *(unsigned __int16 *)(v248 + 2 * v225);
                                  v489 = v211[7];
                                  v490 = v211[8];
                                  if ((v490 - v489) >> 3 > v249)
                                  {
                                    v250 = v489 + 8 * v249;
                                    if (v250 != v490 && *(_DWORD *)(v250 + 4) == (_DWORD)v220)
                                    {
                                      v251 = *(_QWORD *)v216;
                                      v252 = HIDWORD(*(_QWORD *)v216);
                                      v253 = *(_QWORD *)v216 >> 39;
                                      if (v253 < v223
                                        && (v254 = *(_QWORD *)(v222 + 8 * v253)) != 0
                                        && (v255 = *(unsigned __int16 *)(v254 + 2 * (HIDWORD(v251) & 0x7F)), v229 > v255)
                                        && (v256 = v227 + 8 * v255, v256 != v228)
                                        && *(_DWORD *)(v256 + 4) == (_DWORD)v252)
                                      {
                                        v257 = (uint64_t *)(v207[10] + 24 * v255);
                                      }
                                      else
                                      {
                                        v257 = (uint64_t *)v207[11];
                                      }
                                      if (v253 < v233
                                        && (v258 = *(_QWORD *)(v232 + 8 * v253)) != 0
                                        && (v259 = *(unsigned __int16 *)(v258 + 2 * (HIDWORD(v251) & 0x7F)), v238 > v259)
                                        && (v260 = v237 + 8 * v259, v260 != v236)
                                        && *(_DWORD *)(v260 + 4) == (_DWORD)v252)
                                      {
                                        v261 = (uint64_t *)(v208[10] + 24 * v259);
                                      }
                                      else
                                      {
                                        v261 = (uint64_t *)v208[11];
                                      }
                                      v262 = HIDWORD(*(_QWORD *)v216);
                                      if (v253 < v242
                                        && (v263 = *(_QWORD *)(v241 + 8 * v253)) != 0
                                        && (v264 = *(unsigned __int16 *)(v263 + 2 * (HIDWORD(v251) & 0x7F)), v493 > v264)
                                        && (v265 = v245 + 8 * v264, v265 != v494)
                                        && *(_DWORD *)(v265 + 4) == (_DWORD)v262)
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)(v209[10] + 24 * v264);
                                      }
                                      else
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)v209[11];
                                      }
                                      if (v253 < v491
                                        && (v268 = *(_QWORD *)(v492 + 8 * v253)) != 0
                                        && (v269 = *(unsigned __int16 *)(v268 + 2 * (HIDWORD(v251) & 0x7F)), v266 > v269)
                                        && (v270 = v489 + 8 * v269, v270 != v490)
                                        && *(_DWORD *)(v270 + 4) == (_DWORD)v262)
                                      {
                                        v219 = v211[10] + 24 * v269;
                                      }
                                      else
                                      {
                                        v219 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()((uint64_t)&v505, v251, v257, v261, v267, v219);
                                      v213 = v496;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v216 += 8;
    }
    v214 = v495;
  }
  v271 = v498;
  if (v207 + 4 != v218)
  {
    if (v212 != v218)
      goto LABEL_294;
LABEL_351:
    v326 = v213;
    v505 = v271;
    v506 = v499;
    v327 = v208[7];
    v328 = v208[8];
    if (v327 != v328)
    {
      v329 = (uint64_t *)v208[10];
      do
      {
        v331 = *(unsigned int *)(v327 + 4);
        v332 = v331 >> 7;
        v333 = v206[4];
        if (v331 >> 7 < (v206[5] - v333) >> 3)
        {
          v334 = *(_QWORD *)(v333 + 8 * v332);
          if (v334)
          {
            v335 = v331 & 0x7F;
            v336 = *(unsigned __int16 *)(v334 + 2 * v335);
            v338 = v206[7];
            v337 = v206[8];
            if (v336 < (v337 - v338) >> 3)
            {
              v339 = v338 + 8 * v336;
              if (v339 != v337 && *(_DWORD *)(v339 + 4) == (_DWORD)v331)
              {
                v341 = v207[4];
                v342 = (v207[5] - v341) >> 3;
                if (v332 < v342)
                {
                  v343 = *(_QWORD *)(v341 + 8 * v332);
                  if (v343)
                  {
                    v344 = *(unsigned __int16 *)(v343 + 2 * v335);
                    v346 = v207[7];
                    v345 = v207[8];
                    v347 = (v345 - v346) >> 3;
                    if (v347 > v344)
                    {
                      v348 = v346 + 8 * v344;
                      if (v348 != v345 && *(_DWORD *)(v348 + 4) == (_DWORD)v331)
                      {
                        v350 = v209[4];
                        v351 = (v209[5] - v350) >> 3;
                        if (v332 < v351)
                        {
                          v352 = *(_QWORD *)(v350 + 8 * v332);
                          if (v352)
                          {
                            v353 = *(unsigned __int16 *)(v352 + 2 * v335);
                            v355 = v209[7];
                            v354 = v209[8];
                            v356 = (v354 - v355) >> 3;
                            if (v356 > v353)
                            {
                              v357 = v355 + 8 * v353;
                              if (v357 != v354 && *(_DWORD *)(v357 + 4) == (_DWORD)v331)
                              {
                                v359 = v211[4];
                                v360 = (v211[5] - v359) >> 3;
                                if (v332 < v360)
                                {
                                  v361 = *(_QWORD *)(v359 + 8 * v332);
                                  if (v361)
                                  {
                                    v362 = *(unsigned __int16 *)(v361 + 2 * v335);
                                    v364 = v211[7];
                                    v363 = v211[8];
                                    v365 = (v363 - v364) >> 3;
                                    if (v365 > v362)
                                    {
                                      v366 = v364 + 8 * v362;
                                      if (v366 != v363 && *(_DWORD *)(v366 + 4) == (_DWORD)v331)
                                      {
                                        v367 = *(_QWORD *)v327;
                                        v368 = HIDWORD(*(_QWORD *)v327);
                                        v369 = *(_QWORD *)v327 >> 39;
                                        if (v369 < v342
                                          && (v370 = *(_QWORD *)(v341 + 8 * v369)) != 0
                                          && (v371 = *(unsigned __int16 *)(v370 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v347 > v371)
                                          && (v372 = v346 + 8 * v371, v372 != v345)
                                          && *(_DWORD *)(v372 + 4) == (_DWORD)v368)
                                        {
                                          v373 = (uint64_t *)(v207[10] + 24 * v371);
                                        }
                                        else
                                        {
                                          v373 = (uint64_t *)v207[11];
                                        }
                                        if (v369 < v351
                                          && (v374 = *(_QWORD *)(v350 + 8 * v369)) != 0
                                          && (v375 = *(unsigned __int16 *)(v374 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v356 > v375)
                                          && (v376 = v355 + 8 * v375, v376 != v354)
                                          && *(_DWORD *)(v376 + 4) == (_DWORD)v368)
                                        {
                                          v377 = (uint64_t *)(v209[10] + 24 * v375);
                                        }
                                        else
                                        {
                                          v377 = (uint64_t *)v209[11];
                                        }
                                        if (v369 < v360
                                          && (v378 = *(_QWORD *)(v359 + 8 * v369)) != 0
                                          && (v379 = *(unsigned __int16 *)(v378 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v365 > v379)
                                          && (v380 = v364 + 8 * v379, v380 != v363)
                                          && *(_DWORD *)(v380 + 4) == (_DWORD)v368)
                                        {
                                          v330 = v211[10] + 24 * v379;
                                        }
                                        else
                                        {
                                          v330 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()((uint64_t)&v505, v367, v373, v329, v377, v330);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v329 += 3;
        v327 += 8;
      }
      while (v327 != v328);
    }
    if (v326 != v218)
      goto LABEL_460;
    goto LABEL_406;
  }
  v497 = v213;
  v505 = v498;
  v506 = v499;
  v272 = v207[7];
  v273 = v207[8];
  if (v272 != v273)
  {
    v274 = (uint64_t *)v207[10];
    do
    {
      v276 = *(unsigned int *)(v272 + 4);
      v277 = v276 >> 7;
      v278 = v206[4];
      if (v276 >> 7 < (v206[5] - v278) >> 3)
      {
        v279 = *(_QWORD *)(v278 + 8 * v277);
        if (v279)
        {
          v280 = v276 & 0x7F;
          v281 = *(unsigned __int16 *)(v279 + 2 * v280);
          v283 = v206[7];
          v282 = v206[8];
          if (v281 < (v282 - v283) >> 3)
          {
            v284 = v283 + 8 * v281;
            if (v284 != v282 && *(_DWORD *)(v284 + 4) == (_DWORD)v276)
            {
              v286 = v208[4];
              v287 = (v208[5] - v286) >> 3;
              if (v277 < v287)
              {
                v288 = *(_QWORD *)(v286 + 8 * v277);
                if (v288)
                {
                  v289 = *(unsigned __int16 *)(v288 + 2 * v280);
                  v291 = v208[7];
                  v290 = v208[8];
                  v292 = (v290 - v291) >> 3;
                  if (v292 > v289)
                  {
                    v293 = v291 + 8 * v289;
                    if (v293 != v290 && *(_DWORD *)(v293 + 4) == (_DWORD)v276)
                    {
                      v295 = v209[4];
                      v296 = (v209[5] - v295) >> 3;
                      if (v277 < v296)
                      {
                        v297 = *(_QWORD *)(v295 + 8 * v277);
                        if (v297)
                        {
                          v298 = *(unsigned __int16 *)(v297 + 2 * v280);
                          v300 = v209[7];
                          v299 = v209[8];
                          v301 = (v299 - v300) >> 3;
                          if (v301 > v298)
                          {
                            v302 = v300 + 8 * v298;
                            if (v302 != v299 && *(_DWORD *)(v302 + 4) == (_DWORD)v276)
                            {
                              v304 = v211[4];
                              v305 = (v211[5] - v304) >> 3;
                              if (v277 < v305)
                              {
                                v306 = *(_QWORD *)(v304 + 8 * v277);
                                if (v306)
                                {
                                  v307 = *(unsigned __int16 *)(v306 + 2 * v280);
                                  v309 = v211[7];
                                  v308 = v211[8];
                                  v310 = (v308 - v309) >> 3;
                                  if (v310 > v307)
                                  {
                                    v311 = v309 + 8 * v307;
                                    if (v311 != v308 && *(_DWORD *)(v311 + 4) == (_DWORD)v276)
                                    {
                                      v312 = *(_QWORD *)v272;
                                      v313 = HIDWORD(*(_QWORD *)v272);
                                      v314 = *(_QWORD *)v272 >> 39;
                                      if (v314 < v287
                                        && (v315 = *(_QWORD *)(v286 + 8 * v314)) != 0
                                        && (v316 = *(unsigned __int16 *)(v315 + 2 * (HIDWORD(v312) & 0x7F)), v292 > v316)
                                        && (v317 = v291 + 8 * v316, v317 != v290)
                                        && *(_DWORD *)(v317 + 4) == (_DWORD)v313)
                                      {
                                        v318 = (uint64_t *)(v208[10] + 24 * v316);
                                      }
                                      else
                                      {
                                        v318 = (uint64_t *)v208[11];
                                      }
                                      if (v314 < v296
                                        && (v319 = *(_QWORD *)(v295 + 8 * v314)) != 0
                                        && (v320 = *(unsigned __int16 *)(v319 + 2 * (HIDWORD(v312) & 0x7F)), v301 > v320)
                                        && (v321 = v300 + 8 * v320, v321 != v299)
                                        && *(_DWORD *)(v321 + 4) == (_DWORD)v313)
                                      {
                                        v322 = (uint64_t *)(v209[10] + 24 * v320);
                                      }
                                      else
                                      {
                                        v322 = (uint64_t *)v209[11];
                                      }
                                      if (v314 < v305
                                        && (v323 = *(_QWORD *)(v304 + 8 * v314)) != 0
                                        && (v324 = *(unsigned __int16 *)(v323 + 2 * (HIDWORD(v312) & 0x7F)), v310 > v324)
                                        && (v325 = v309 + 8 * v324, v325 != v308)
                                        && *(_DWORD *)(v325 + 4) == (_DWORD)v313)
                                      {
                                        v275 = v211[10] + 24 * v324;
                                      }
                                      else
                                      {
                                        v275 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()((uint64_t)&v505, v312, v274, v318, v322, v275);
                                      v271 = v498;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v274 += 3;
      v272 += 8;
    }
    while (v272 != v273);
  }
  v213 = v497;
  if (v212 == v218)
    goto LABEL_351;
LABEL_294:
  if (v213 == v218)
  {
LABEL_406:
    v505 = v271;
    v506 = v499;
    v381 = v209[7];
    v382 = v209[8];
    if (v381 != v382)
    {
      v383 = (uint64_t *)v209[10];
      do
      {
        v385 = *(unsigned int *)(v381 + 4);
        v386 = v385 >> 7;
        v387 = v206[4];
        if (v385 >> 7 < (v206[5] - v387) >> 3)
        {
          v388 = *(_QWORD *)(v387 + 8 * v386);
          if (v388)
          {
            v389 = v385 & 0x7F;
            v390 = *(unsigned __int16 *)(v388 + 2 * v389);
            v392 = v206[7];
            v391 = v206[8];
            if (v390 < (v391 - v392) >> 3)
            {
              v393 = v392 + 8 * v390;
              if (v393 != v391 && *(_DWORD *)(v393 + 4) == (_DWORD)v385)
              {
                v395 = v207[4];
                v396 = (v207[5] - v395) >> 3;
                if (v386 < v396)
                {
                  v397 = *(_QWORD *)(v395 + 8 * v386);
                  if (v397)
                  {
                    v398 = *(unsigned __int16 *)(v397 + 2 * v389);
                    v400 = v207[7];
                    v399 = v207[8];
                    v401 = (v399 - v400) >> 3;
                    if (v401 > v398)
                    {
                      v402 = v400 + 8 * v398;
                      if (v402 != v399 && *(_DWORD *)(v402 + 4) == (_DWORD)v385)
                      {
                        v404 = v208[4];
                        v405 = (v208[5] - v404) >> 3;
                        if (v386 < v405)
                        {
                          v406 = *(_QWORD *)(v404 + 8 * v386);
                          if (v406)
                          {
                            v407 = *(unsigned __int16 *)(v406 + 2 * v389);
                            v409 = v208[7];
                            v408 = v208[8];
                            v410 = (v408 - v409) >> 3;
                            if (v410 > v407)
                            {
                              v411 = v409 + 8 * v407;
                              if (v411 != v408 && *(_DWORD *)(v411 + 4) == (_DWORD)v385)
                              {
                                v413 = v211[4];
                                v414 = (v211[5] - v413) >> 3;
                                if (v386 < v414)
                                {
                                  v415 = *(_QWORD *)(v413 + 8 * v386);
                                  if (v415)
                                  {
                                    v416 = *(unsigned __int16 *)(v415 + 2 * v389);
                                    v418 = v211[7];
                                    v417 = v211[8];
                                    v419 = (v417 - v418) >> 3;
                                    if (v419 > v416)
                                    {
                                      v420 = v418 + 8 * v416;
                                      if (v420 != v417 && *(_DWORD *)(v420 + 4) == (_DWORD)v385)
                                      {
                                        v421 = *(_QWORD *)v381;
                                        v422 = HIDWORD(*(_QWORD *)v381);
                                        v423 = *(_QWORD *)v381 >> 39;
                                        if (v423 < v396
                                          && (v424 = *(_QWORD *)(v395 + 8 * v423)) != 0
                                          && (v425 = *(unsigned __int16 *)(v424 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v401 > v425)
                                          && (v426 = v400 + 8 * v425, v426 != v399)
                                          && *(_DWORD *)(v426 + 4) == (_DWORD)v422)
                                        {
                                          v427 = (uint64_t *)(v207[10] + 24 * v425);
                                        }
                                        else
                                        {
                                          v427 = (uint64_t *)v207[11];
                                        }
                                        if (v423 < v405
                                          && (v428 = *(_QWORD *)(v404 + 8 * v423)) != 0
                                          && (v429 = *(unsigned __int16 *)(v428 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v410 > v429)
                                          && (v430 = v409 + 8 * v429, v430 != v408)
                                          && *(_DWORD *)(v430 + 4) == (_DWORD)v422)
                                        {
                                          v431 = (uint64_t *)(v208[10] + 24 * v429);
                                        }
                                        else
                                        {
                                          v431 = (uint64_t *)v208[11];
                                        }
                                        if (v423 < v414
                                          && (v432 = *(_QWORD *)(v413 + 8 * v423)) != 0
                                          && (v433 = *(unsigned __int16 *)(v432 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v419 > v433)
                                          && (v434 = v418 + 8 * v433, v434 != v417)
                                          && *(_DWORD *)(v434 + 4) == (_DWORD)v422)
                                        {
                                          v384 = v211[10] + 24 * v433;
                                        }
                                        else
                                        {
                                          v384 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()((uint64_t)&v505, v421, v427, v431, v383, v384);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v383 += 3;
        v381 += 8;
      }
      while (v381 != v382);
    }
  }
LABEL_460:
  if ((_QWORD *)v214 == v218)
  {
    v505 = v271;
    v506 = v499;
    v435 = v211[7];
    v436 = v211[8];
    if (v435 != v436)
    {
      v437 = v211[10];
      do
      {
        v439 = *(unsigned int *)(v435 + 4);
        v440 = v439 >> 7;
        v441 = v206[4];
        if (v439 >> 7 < (v206[5] - v441) >> 3)
        {
          v442 = *(_QWORD *)(v441 + 8 * v440);
          if (v442)
          {
            v443 = v439 & 0x7F;
            v444 = *(unsigned __int16 *)(v442 + 2 * v443);
            v446 = v206[7];
            v445 = v206[8];
            if (v444 < (v445 - v446) >> 3)
            {
              v447 = v446 + 8 * v444;
              if (v447 != v445 && *(_DWORD *)(v447 + 4) == (_DWORD)v439)
              {
                v449 = v207[4];
                v450 = (v207[5] - v449) >> 3;
                if (v440 < v450)
                {
                  v451 = *(_QWORD *)(v449 + 8 * v440);
                  if (v451)
                  {
                    v452 = *(unsigned __int16 *)(v451 + 2 * v443);
                    v454 = v207[7];
                    v453 = v207[8];
                    v455 = (v453 - v454) >> 3;
                    if (v455 > v452)
                    {
                      v456 = v454 + 8 * v452;
                      if (v456 != v453 && *(_DWORD *)(v456 + 4) == (_DWORD)v439)
                      {
                        v458 = v208[4];
                        v459 = (v208[5] - v458) >> 3;
                        if (v440 < v459)
                        {
                          v460 = *(_QWORD *)(v458 + 8 * v440);
                          if (v460)
                          {
                            v461 = *(unsigned __int16 *)(v460 + 2 * v443);
                            v463 = v208[7];
                            v462 = v208[8];
                            v464 = (v462 - v463) >> 3;
                            if (v464 > v461)
                            {
                              v465 = v463 + 8 * v461;
                              if (v465 != v462 && *(_DWORD *)(v465 + 4) == (_DWORD)v439)
                              {
                                v467 = v209[4];
                                v468 = (v209[5] - v467) >> 3;
                                if (v440 < v468)
                                {
                                  v469 = *(_QWORD *)(v467 + 8 * v440);
                                  if (v469)
                                  {
                                    v470 = *(unsigned __int16 *)(v469 + 2 * v443);
                                    v472 = v209[7];
                                    v471 = v209[8];
                                    v473 = (v471 - v472) >> 3;
                                    if (v473 > v470)
                                    {
                                      v474 = v472 + 8 * v470;
                                      if (v474 != v471 && *(_DWORD *)(v474 + 4) == (_DWORD)v439)
                                      {
                                        v475 = *(_QWORD *)v435;
                                        v476 = HIDWORD(*(_QWORD *)v435);
                                        v477 = *(_QWORD *)v435 >> 39;
                                        if (v477 < v450
                                          && (v478 = *(_QWORD *)(v449 + 8 * v477)) != 0
                                          && (v479 = *(unsigned __int16 *)(v478 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v455 > v479)
                                          && (v480 = v454 + 8 * v479, v480 != v453)
                                          && *(_DWORD *)(v480 + 4) == (_DWORD)v476)
                                        {
                                          v481 = (uint64_t *)(v207[10] + 24 * v479);
                                        }
                                        else
                                        {
                                          v481 = (uint64_t *)v207[11];
                                        }
                                        if (v477 < v459
                                          && (v482 = *(_QWORD *)(v458 + 8 * v477)) != 0
                                          && (v483 = *(unsigned __int16 *)(v482 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v464 > v483)
                                          && (v484 = v463 + 8 * v483, v484 != v462)
                                          && *(_DWORD *)(v484 + 4) == (_DWORD)v476)
                                        {
                                          v485 = (uint64_t *)(v208[10] + 24 * v483);
                                        }
                                        else
                                        {
                                          v485 = (uint64_t *)v208[11];
                                        }
                                        if (v477 < v468
                                          && (v486 = *(_QWORD *)(v467 + 8 * v477)) != 0
                                          && (v487 = *(unsigned __int16 *)(v486 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v473 > v487)
                                          && (v488 = v472 + 8 * v487, v488 != v471)
                                          && *(_DWORD *)(v488 + 4) == (_DWORD)v476)
                                        {
                                          v438 = (uint64_t *)(v209[10] + 24 * v487);
                                        }
                                        else
                                        {
                                          v438 = (uint64_t *)v209[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()((uint64_t)&v505, v475, v481, v485, v438, v437);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v437 += 24;
        v435 += 8;
      }
      while (v435 != v436);
    }
  }
}

void sub_19F648E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _QWORD **v17;
  va_list va;

  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x856479CF9EFCFDB9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x856479CF9EFCFDB9;
      if (*(_QWORD *)&v3 <= 0x856479CF9EFCFDB9)
        v5 = 0x856479CF9EFCFDB9 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x856479CF9EFCFDB9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x856479CF9EFCFDB9)
            {
              if (v7[2] == 0x856479CF9EFCFDB9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x856479CF9EFCFDB9)
          {
            if (v7[2] == 0x856479CF9EFCFDB9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidEnterView<md::MapDataType::DaVinciGroundGlobe>]";
  *(_QWORD *)(v11 + 24) = 75;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2C28;
  *(_QWORD *)(v11 + 8) = 0x856479CF9EFCFDB9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x856479CF9EFCFDB9, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x856479CF9EFCFDB9;
  v15[1] = "SceneComponents::LayerDataDidEnterView<md::MapDataType::DaVinciGroundGlobe>]";
  v15[2] = 75;
  gdc::Registry::_registerStorageDataSignals(a1, 0x856479CF9EFCFDB9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6491FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6EE431FCF9BF7D59;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6EE431FCF9BF7D59;
      if (*(_QWORD *)&v3 <= 0x6EE431FCF9BF7D59uLL)
        v5 = 0x6EE431FCF9BF7D59uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6EE431FCF9BF7D59;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6EE431FCF9BF7D59)
            {
              if (v7[2] == 0x6EE431FCF9BF7D59)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6EE431FCF9BF7D59)
          {
            if (v7[2] == 0x6EE431FCF9BF7D59)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidExitView<md::MapDataType::DaVinciGroundGlobe>]";
  *(_QWORD *)(v11 + 24) = 74;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2B08;
  *(_QWORD *)(v11 + 8) = 0x6EE431FCF9BF7D59;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6EE431FCF9BF7D59uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6EE431FCF9BF7D59;
  v15[1] = "SceneComponents::LayerDataDidExitView<md::MapDataType::DaVinciGroundGlobe>]";
  v15[2] = 74;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6EE431FCF9BF7D59, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F649424(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD0945B75B357CE1ALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD0945B75B357CE1ALL;
      if (*(_QWORD *)&v3 <= 0xD0945B75B357CE1ALL)
        v5 = 0xD0945B75B357CE1ALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD0945B75B357CE1ALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD0945B75B357CE1ALL)
            {
              if (v7[2] == 0xD0945B75B357CE1ALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD0945B75B357CE1ALL)
          {
            if (v7[2] == 0xD0945B75B357CE1ALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataExitingView<md::MapDataType::DaVinciGroundGlobe>]";
  *(_QWORD *)(v11 + 24) = 74;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2B98;
  *(_QWORD *)(v11 + 8) = 0xD0945B75B357CE1ALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD0945B75B357CE1ALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD0945B75B357CE1ALL;
  v15[1] = "SceneComponents::LayerDataExitingView<md::MapDataType::DaVinciGroundGlobe>]";
  v15[2] = 74;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD0945B75B357CE1ALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F64964C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x4DEFD27D3EF066C8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x4DEFD27D3EF066C8;
      if (*(_QWORD *)&v3 <= 0x4DEFD27D3EF066C8uLL)
        v5 = 0x4DEFD27D3EF066C8uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x4DEFD27D3EF066C8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x4DEFD27D3EF066C8)
            {
              if (v7[2] == 0x4DEFD27D3EF066C8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x4DEFD27D3EF066C8)
          {
            if (v7[2] == 0x4DEFD27D3EF066C8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataPreviousInView<md::MapDataType::DaVinciGroundGlobe>]";
  *(_QWORD *)(v11 + 24) = 77;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2D48;
  *(_QWORD *)(v11 + 8) = 0x4DEFD27D3EF066C8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x4DEFD27D3EF066C8uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x4DEFD27D3EF066C8;
  v15[1] = "SceneComponents::LayerDataPreviousInView<md::MapDataType::DaVinciGroundGlobe>]";
  v15[2] = 77;
  gdc::Registry::_registerStorageDataSignals(a1, 0x4DEFD27D3EF066C8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F649874(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  unint64_t v20;
  unsigned __int8 v21;
  _WORD *v22;
  _WORD *v23;
  uint64_t *v24;
  _WORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  _BOOL4 v33;
  _QWORD *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _BOOL4 v53;
  uint64_t *v54;
  uint64_t *v55;
  _BOOL4 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;

  v8 = a4;
  v9 = (uint64_t)a3;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  v15 = (_QWORD **)(a3 + 1);
  v14 = a3[1];
  v16 = a4 + 1;
  v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2])
    v18 = (uint64_t *)(a3[1] + 16);
  else
    v18 = a3;
  *v18 = (uint64_t)v15;
  v19 = (uint64_t **)(*v16 + 16);
  if (!v17)
    v19 = (uint64_t **)a4;
  *v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(_QWORD *)v9 = v15;
  *(_QWORD *)(v9 + 16) = 0;
  *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a6 + 8));
  *(_QWORD *)a6 = a6 + 8;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v20 = **(_QWORD **)a1;
  if ((v21 & 1) == 0)
  {
LABEL_152:
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
  }
  v22 = *(_WORD **)(v20 + 48);
  v23 = *(_WORD **)(v20 + 56);
  v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v22 != v23)
  {
    v25 = *(_WORD **)(v20 + 48);
    while (*v25 != 34)
    {
      v25 += 16;
      if (v25 == v23)
        goto LABEL_18;
    }
    if (v25 == v23)
    {
      v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v22 != 34)
      {
        v22 += 16;
        if (v22 == v23)
        {
          v22 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      v24 = (uint64_t *)(v22 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (_QWORD *)*v24, v24 + 1);
  v20 = *(_QWORD *)v9;
  v26 = (uint64_t *)*v8;
  v27 = (uint64_t *)*a5;
  *(_QWORD *)&v94 = a5;
  *((_QWORD *)&v94 + 1) = v27;
  while ((_QWORD **)v20 != v15)
  {
    if (v26 == v16)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, v20 + 32);
        v44 = *(_QWORD **)(v20 + 8);
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = *(_QWORD **)(v20 + 16);
            v41 = *v45 == v20;
            v20 = (unint64_t)v45;
          }
          while (!v41);
        }
        v20 = (unint64_t)v45;
      }
      while (v45 != v15);
      break;
    }
    v28 = *(_QWORD *)(v20 + 32);
    v29 = *(unsigned __int8 *)(v20 + 48);
    v30 = (char)v29;
    v31 = *((unsigned __int8 *)v26 + 48);
    v32 = v26[4];
    if (v29 == v31)
      v33 = v28 < v32;
    else
      v33 = (char)v29 < (char)v31;
    if (v33)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, v20 + 32);
      v34 = *(_QWORD **)(v20 + 8);
      if (v34)
      {
        do
        {
          v20 = (unint64_t)v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = v20;
          v20 = *(_QWORD *)(v20 + 16);
        }
        while (*(_QWORD *)v20 != v35);
      }
    }
    else
    {
      v36 = v32 < v28;
      if (v30 != (char)v31)
        v36 = (char)v31 < v30;
      if (v36)
      {
        v37 = (uint64_t *)v26[1];
        if (v37)
        {
          do
          {
            v26 = v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v38);
        }
      }
      else
      {
        v39 = *(_QWORD **)(v20 + 8);
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = *(_QWORD **)(v20 + 16);
            v41 = *v40 == v20;
            v20 = (unint64_t)v40;
          }
          while (!v41);
        }
        v42 = (uint64_t *)v26[1];
        if (v42)
        {
          do
          {
            v26 = v42;
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v43);
        }
        v20 = (unint64_t)v40;
      }
    }
  }
  v8 = (uint64_t *)*v8;
  v46 = *(_QWORD *)v9;
  v47 = *(_QWORD *)a6;
  *(_QWORD *)&v94 = a6;
  *((_QWORD *)&v94 + 1) = v47;
  while (v8 != v16)
  {
    if ((_QWORD **)v46 == v15)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, (uint64_t)(v8 + 4));
        v63 = (uint64_t *)v8[1];
        if (v63)
        {
          do
          {
            v64 = v63;
            v63 = (uint64_t *)*v63;
          }
          while (v63);
        }
        else
        {
          do
          {
            v64 = (uint64_t *)v8[2];
            v41 = *v64 == (_QWORD)v8;
            v8 = v64;
          }
          while (!v41);
        }
        v8 = v64;
      }
      while (v64 != v16);
      break;
    }
    v48 = v8[4];
    v49 = *((unsigned __int8 *)v8 + 48);
    v50 = (char)v49;
    v51 = *(unsigned __int8 *)(v46 + 48);
    v52 = *(_QWORD *)(v46 + 32);
    if (v49 == v51)
      v53 = v48 < v52;
    else
      v53 = (char)v49 < (char)v51;
    if (v53)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, (uint64_t)(v8 + 4));
      v54 = (uint64_t *)v8[1];
      if (v54)
      {
        do
        {
          v8 = v54;
          v54 = (uint64_t *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = v8;
          v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v55);
      }
    }
    else
    {
      v56 = v52 < v48;
      if (v50 != (char)v51)
        v56 = (char)v51 < v50;
      if (v56)
      {
        v57 = *(_QWORD **)(v46 + 8);
        if (v57)
        {
          do
          {
            v46 = (uint64_t)v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v58);
        }
      }
      else
      {
        v59 = (uint64_t *)v8[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (uint64_t *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (uint64_t *)v8[2];
            v41 = *v60 == (_QWORD)v8;
            v8 = v60;
          }
          while (!v41);
        }
        v61 = *(_QWORD **)(v46 + 8);
        if (v61)
        {
          do
          {
            v46 = (uint64_t)v61;
            v61 = (_QWORD *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v62);
        }
        v8 = v60;
      }
    }
  }
  if (!a5[2])
    goto LABEL_122;
  v65 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v66 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v65 + 4, (uint64_t)&v95);
  if ((v67 & 1) != 0)
  {
    v20 = v65[11];
    v69 = v65[12];
    if (v20 >= v69)
    {
      v71 = (char *)v65[10];
      v16 = (uint64_t *)(v20 - (_QWORD)v71);
      v72 = v20 - (_QWORD)v71 + 1;
      if (v72 < 0)
        goto LABEL_154;
      v73 = v69 - (_QWORD)v71;
      if (2 * v73 > v72)
        v72 = 2 * v73;
      if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
        v74 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
        v75 = (char *)operator new(v74);
      else
        v75 = 0;
      v76 = &v75[v74];
      v70 = (uint64_t)v16 + (_QWORD)v75 + 1;
      v77 = &v71[-v20];
      if (v71 == (char *)v20)
        v77 = 0;
      v65[10] = (uint64_t)v16 + (_QWORD)v75 + (unint64_t)v77;
      v65[11] = v70;
      v65[12] = (uint64_t)v76;
      if (v71)
        operator delete(v71);
    }
    else
    {
      v70 = v20 + 1;
    }
    v65[11] = v70;
    v9 = v65[31];
    goto LABEL_118;
  }
  v9 = v65[31];
  if (v65[10] + (((uint64_t)v66 - v65[7]) >> 3) == v65[11])
  {
LABEL_118:
    v8 = &v95;
    a5 = (uint64_t *)v65[22];
    if (a5)
    {
      v20 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = v9;
        v78 = a5[6];
        if (!v78)
          goto LABEL_151;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v78 + 48))(v78, &v94, &v96);
        a5 = (uint64_t *)*a5;
        if (!a5)
          goto LABEL_122;
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v65[16];
  if (a5)
  {
    v8 = &v95;
    v20 = 1;
    do
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = v9;
      v68 = a5[6];
      if (!v68)
        goto LABEL_151;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v68 + 48))(v68, &v94, &v96);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!*(_QWORD *)(a6 + 16))
    return;
  v79 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v80 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v79 + 4, (uint64_t)&v95);
  if ((v81 & 1) != 0)
  {
    v84 = (_BYTE *)v79[11];
    v83 = v79[12];
    if ((unint64_t)v84 < v83)
    {
      v85 = (uint64_t)(v84 + 1);
LABEL_145:
      v79[11] = v85;
      a2 = v79[31];
      goto LABEL_146;
    }
    v86 = (char *)v79[10];
    v8 = (uint64_t *)(v84 - v86);
    v87 = v84 - v86 + 1;
    if (v87 >= 0)
    {
      v88 = v83 - (_QWORD)v86;
      if (2 * v88 > v87)
        v87 = 2 * v88;
      if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
        v89 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
        v90 = (char *)operator new(v89);
      else
        v90 = 0;
      v91 = &v90[v89];
      v85 = (uint64_t)v8 + (_QWORD)v90 + 1;
      v92 = (char *)(v86 - v84);
      if (v86 == v84)
        v92 = 0;
      v79[10] = (uint64_t)v8 + (_QWORD)v90 + (unint64_t)v92;
      v79[11] = v85;
      v79[12] = (uint64_t)v91;
      if (v86)
        operator delete(v86);
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v79[31];
  if (v79[10] + (((uint64_t)v80 - v79[7]) >> 3) != v79[11])
  {
    a6 = v79[16];
    if (a6)
    {
      a5 = &v95;
      v9 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = a2;
        v82 = *(_QWORD *)(a6 + 48);
        if (!v82)
          break;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v82 + 48))(v82, &v94, &v96);
        a6 = *(_QWORD *)a6;
        if (!a6)
          return;
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v95;
  a6 = v79[22];
  if (a6)
  {
    v9 = 1;
    while (1)
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = a2;
      v93 = *(_QWORD *)(a6 + 48);
      if (!v93)
        break;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v93 + 48))(v93, &v94, &v96);
      a6 = *(_QWORD *)a6;
      if (!a6)
        return;
    }
    goto LABEL_151;
  }
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)34>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)34>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)34>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)34>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)34>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1108;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)34>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1108;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)34>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)54>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectMapDataLogic<(md::MapDataType)54>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)54>::didBecomeInactive(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    result = gdc::Registry::destroy(*(_QWORD *)(result + 128), *(_QWORD *)(result + 120));
    *(_QWORD *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::CollectMapDataContext<md::MapDataType::DaVinciBuildings>]";
  v4[3] = 60;
  v4[4] = result;
  *v4 = &off_1E42705D0;
  v4[1] = 0x5B0BFF71B88387C7;
  *a2 = v4;
  return result;
}

void sub_19F64A9B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x5B0BFF71B88387C7 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x5B0BFF71B88387C7 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x5B0BFF71B88387C7 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x5B0BFF71B88387C7 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x5B0BFF71B88387C7 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::CollectMapDataLogic<(md::MapDataType)54>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _WORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _WORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _WORD *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  unint64_t v57;
  __int128 v58;
  __int16 v59;
  _QWORD *i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *j;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _QWORD *k;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  _QWORD *m;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  _QWORD *v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  _QWORD *n;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  _QWORD *v497;
  uint64_t *v498;
  uint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  uint64_t *v509;

  v5 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>(*(_QWORD *)(a1 + 128));
  v6 = v5;
  if (v5[29])
  {
    v7 = (_QWORD *)v5[28];
    if (v7)
    {
      v8 = (_QWORD *)v5[31];
      v9 = (uint64_t *)v5[7];
      v10 = (uint64_t)(v5[8] - (_QWORD)v9) >> 3;
      do
      {
        v505 = v9;
        v506 = v10;
        v500 = v8;
        v11 = v7[6];
        if (!v11)
          goto LABEL_516;
        (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v500, &v505);
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  v12 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>(*(_QWORD *)(a1 + 128));
  v13 = v12;
  if (v12[29])
  {
    v14 = (_QWORD *)v12[28];
    if (v14)
    {
      v15 = (_QWORD *)v12[31];
      v16 = (uint64_t *)v12[7];
      v17 = (uint64_t)(v12[8] - (_QWORD)v16) >> 3;
      do
      {
        v505 = v16;
        v506 = v17;
        v500 = v15;
        v18 = v14[6];
        if (!v18)
          goto LABEL_516;
        (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v18 + 48))(v18, &v500, &v505);
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  v13[8] = v13[7];
  v13[11] = v13[10];
  v498 = *a3;
  v19 = *(_QWORD *)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1)
  {
    v20 = gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
    *(_QWORD *)(a1 + 120) = v20;
    v21 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)54>>(*(_QWORD *)(a1 + 128));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v21, v20);
    v22 = *(_QWORD *)(a1 + 120);
    v23 = *(_QWORD *)(a1 + 128);
    v500 = (_QWORD *)0x8805FEC1BB70F9F2;
    v24 = *(int8x8_t *)(v23 + 128);
    if (v24)
    {
      v25 = (uint8x8_t)vcnt_s8(v24);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = 0x8805FEC1BB70F9F2;
        if (*(_QWORD *)&v24 <= 0x8805FEC1BB70F9F2)
          v26 = 0x8805FEC1BB70F9F2 % *(_QWORD *)&v24;
      }
      else
      {
        v26 = (*(_QWORD *)&v24 - 1) & 0x8805FEC1BB70F9F2;
      }
      v27 = *(_QWORD **)(*(_QWORD *)(v23 + 120) + 8 * v26);
      if (v27)
      {
        v28 = (_QWORD *)*v27;
        if (v28)
        {
          if (v25.u32[0] < 2uLL)
          {
            v29 = *(_QWORD *)&v24 - 1;
            while (1)
            {
              v31 = v28[1];
              if (v31 == 0x8805FEC1BB70F9F2)
              {
                if (v28[2] == 0x8805FEC1BB70F9F2)
                  goto LABEL_230;
              }
              else if ((v31 & v29) != v26)
              {
                goto LABEL_34;
              }
              v28 = (_QWORD *)*v28;
              if (!v28)
                goto LABEL_34;
            }
          }
          do
          {
            v30 = v28[1];
            if (v30 == 0x8805FEC1BB70F9F2)
            {
              if (v28[2] == 0x8805FEC1BB70F9F2)
              {
LABEL_230:
                v32 = v28[3];
                goto LABEL_37;
              }
            }
            else
            {
              if (v30 >= *(_QWORD *)&v24)
                v30 %= *(_QWORD *)&v24;
              if (v30 != v26)
                break;
            }
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_34:
    v32 = operator new();
    *(_QWORD *)(v32 + 16) = "SceneComponents::LayerDataInfo<md::MapDataType::DaVinciBuildings>]";
    *(_QWORD *)(v32 + 24) = 65;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_OWORD *)(v32 + 64) = 0u;
    *(_OWORD *)(v32 + 80) = 0u;
    *(_OWORD *)(v32 + 96) = 0u;
    *(_OWORD *)(v32 + 112) = 0u;
    *(_OWORD *)(v32 + 128) = 0u;
    *(_DWORD *)(v32 + 144) = 1065353216;
    *(_OWORD *)(v32 + 152) = 0u;
    *(_OWORD *)(v32 + 168) = 0u;
    *(_QWORD *)(v32 + 184) = 0;
    *(_DWORD *)(v32 + 192) = 1065353216;
    *(_OWORD *)(v32 + 200) = 0u;
    *(_OWORD *)(v32 + 216) = 0u;
    *(_QWORD *)(v32 + 232) = 0;
    *(_DWORD *)(v32 + 240) = 1065353216;
    *(_QWORD *)v32 = &off_1E4270788;
    *(_QWORD *)(v32 + 8) = 0x8805FEC1BB70F9F2;
    *(_QWORD *)(v32 + 248) = v23;
    v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v23 + 120), 0x8805FEC1BB70F9F2, &v500);
    v34 = v33[3];
    v33[3] = v32;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v505 = (uint64_t *)0x8805FEC1BB70F9F2;
    v506 = (uint64_t)"SceneComponents::LayerDataInfo<md::MapDataType::DaVinciBuildings>]";
    v507 = 65;
    gdc::Registry::_registerStorageDataSignals(v23, 0x8805FEC1BB70F9F2, (uint64_t)&v505, (uint64_t *)(v32 + 104));
LABEL_37:
    v504 = v22;
    v35 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v32 + 32), (uint64_t)&v504);
    if ((v36 & 1) != 0)
    {
      v42 = *(char **)(v32 + 88);
      v41 = *(_QWORD *)(v32 + 96);
      if ((unint64_t)v42 >= v41)
      {
        v44 = *(char **)(v32 + 80);
        v45 = v42 - v44;
        if (v42 - v44 <= -3)
          abort();
        v46 = v45 >> 1;
        v47 = v41 - (_QWORD)v44;
        if (v47 <= (v45 >> 1) + 1)
          v48 = v46 + 1;
        else
          v48 = v47;
        if (v47 >= 0x7FFFFFFFFFFFFFFELL)
          v49 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          if (v49 < 0)
            goto LABEL_521;
          v50 = operator new(2 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[2 * v46];
        v52 = &v50[2 * v49];
        *v51 = 54;
        v43 = v51 + 1;
        if (v42 != v44)
        {
          v53 = v42 - v44 - 2;
          if (v53 < 0x1E)
            goto LABEL_529;
          if (v42 - v50 - (v45 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_529;
          v54 = (v53 >> 1) + 1;
          v55 = &v50[2 * v46 - 16];
          v56 = v42 - 16;
          v57 = v54 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v58 = *(_OWORD *)v56;
            *(v55 - 1) = *((_OWORD *)v56 - 1);
            *v55 = v58;
            v55 -= 2;
            v56 -= 32;
            v57 -= 16;
          }
          while (v57);
          v51 -= v54 & 0xFFFFFFFFFFFFFFF0;
          v42 -= 2 * (v54 & 0xFFFFFFFFFFFFFFF0);
          if (v54 != (v54 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_529:
            do
            {
              v59 = *((_WORD *)v42 - 1);
              v42 -= 2;
              *--v51 = v59;
            }
            while (v42 != v44);
          }
        }
        *(_QWORD *)(v32 + 80) = v51;
        *(_QWORD *)(v32 + 88) = v43;
        *(_QWORD *)(v32 + 96) = v52;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_WORD *)v42 = 54;
        v43 = v42 + 2;
      }
      *(_QWORD *)(v32 + 88) = v43;
      v38 = *(_QWORD **)(v32 + 248);
    }
    else
    {
      v37 = (_WORD *)(*(_QWORD *)(v32 + 80) + (((uint64_t)v35 - *(_QWORD *)(v32 + 56)) >> 2));
      *v37 = 54;
      v38 = *(_QWORD **)(v32 + 248);
      if (v37 != *(_WORD **)(v32 + 88))
      {
        v39 = *(_QWORD **)(v32 + 128);
        if (v39)
        {
          while (1)
          {
            v505 = &v504;
            v506 = 1;
            v500 = v38;
            v40 = v39[6];
            if (!v40)
              break;
            (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v40 + 48))(v40, &v500, &v505);
            v39 = (_QWORD *)*v39;
            if (!v39)
              goto LABEL_69;
          }
LABEL_516:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_517:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        goto LABEL_69;
      }
    }
    for (i = *(_QWORD **)(v32 + 176); i; i = (_QWORD *)*i)
    {
      v505 = &v504;
      v506 = 1;
      v500 = v38;
      v61 = i[6];
      if (!v61)
        goto LABEL_516;
      (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v61 + 48))(v61, &v500, &v505);
    }
LABEL_69:
    v63 = *(_QWORD *)(a1 + 120);
    v62 = *(_QWORD *)(a1 + 128);
    v501 = 0;
    v502 = 0;
    v500 = &v501;
    v64 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)54>>(v62);
    v503 = v63;
    v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v503);
    if ((v66 & 1) != 0)
    {
      v71 = v64[12];
      v72 = (uint64_t *)v64[11];
      if ((unint64_t)v72 >= v71)
      {
        v74 = v64[10];
        v75 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v72 - v74) >> 3);
        if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v74) >> 3);
        v77 = 2 * v76;
        if (2 * v76 <= v75 + 1)
          v77 = v75 + 1;
        if (v76 >= 0x555555555555555)
          v78 = 0xAAAAAAAAAAAAAAALL;
        else
          v78 = v77;
        v509 = v64 + 12;
        if (v78)
        {
          if (v78 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_521;
          v79 = (uint64_t *)operator new(24 * v78);
        }
        else
        {
          v79 = 0;
        }
        v83 = &v79[3 * v75];
        v505 = v79;
        v506 = (uint64_t)v83;
        v507 = (uint64_t)v83;
        v508 = (char *)&v79[3 * v78];
        v83[1] = 0;
        v83[2] = 0;
        *v83 = (uint64_t)(v83 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v83, v500, &v501);
        v84 = v506;
        v73 = (uint64_t *)(v507 + 24);
        v85 = (char *)v64[10];
        v86 = (char *)v64[11];
        if (v86 == v85)
        {
          v64[10] = v506;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
        }
        else
        {
          v87 = 0;
          do
          {
            v88 = v84 + v87;
            *(_QWORD *)(v88 - 24) = *(_QWORD *)&v86[v87 - 24];
            v89 = &v86[v87 - 16];
            v90 = *(_QWORD *)v89;
            *(_QWORD *)(v84 + v87 - 16) = *(_QWORD *)v89;
            v91 = v84 + v87 - 16;
            v92 = *(_QWORD *)&v86[v87 - 8];
            *(_QWORD *)(v88 - 8) = v92;
            if (v92)
            {
              *(_QWORD *)(v90 + 16) = v91;
              *(_QWORD *)&v86[v87 - 24] = v89;
              *(_QWORD *)v89 = 0;
              *(_QWORD *)&v86[v87 - 8] = 0;
            }
            else
            {
              *(_QWORD *)(v88 - 24) = v91;
            }
            v87 -= 24;
          }
          while (&v86[v87] != v85);
          v93 = v84 + v87;
          v86 = (char *)v64[10];
          v94 = (char *)v64[11];
          v64[10] = v93;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
          if (v94 != v86)
          {
            do
            {
              v95 = v94 - 24;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v94 - 2));
              v94 = v95;
            }
            while (v95 != v86);
          }
        }
        if (v86)
          operator delete(v86);
      }
      else
      {
        v72[2] = 0;
        v72[1] = 0;
        *v72 = (uint64_t)(v72 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v72, v500, &v501);
        v73 = v72 + 3;
        v64[11] = (uint64_t)(v72 + 3);
      }
      v64[11] = (uint64_t)v73;
      v80 = v64[31];
    }
    else
    {
      v67 = v64[10] + 24 * (((uint64_t)v65 - v64[7]) >> 3);
      v68 = v67 + 8;
      std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v67 + 8));
      *(_QWORD *)v67 = v500;
      v69 = v501;
      *(_QWORD *)(v67 + 8) = v501;
      v70 = v502;
      *(_QWORD *)(v67 + 16) = v502;
      if (v70)
      {
        v69[2] = v68;
        v500 = &v501;
        v501 = 0;
        v502 = 0;
      }
      else
      {
        *(_QWORD *)v67 = v68;
      }
      v80 = v64[31];
      if (v67 != v64[11])
      {
        for (j = (_QWORD *)v64[16]; j; j = (_QWORD *)*j)
        {
          v505 = &v503;
          v506 = 1;
          v504 = v80;
          v82 = j[6];
          if (!v82)
            goto LABEL_517;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v82 + 48))(v82, &v504, &v505);
        }
LABEL_106:
        std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
        v99 = *(_QWORD *)(a1 + 120);
        v98 = *(_QWORD *)(a1 + 128);
        v501 = 0;
        v502 = 0;
        v500 = &v501;
        v100 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>(v98);
        v503 = v99;
        v101 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v100 + 4, (uint64_t)&v503);
        if ((v102 & 1) != 0)
        {
          v107 = v100[12];
          v108 = (uint64_t *)v100[11];
          if ((unint64_t)v108 >= v107)
          {
            v110 = v100[10];
            v111 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v108 - v110) >> 3);
            if (v111 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v110) >> 3);
            v113 = 2 * v112;
            if (2 * v112 <= v111 + 1)
              v113 = v111 + 1;
            if (v112 >= 0x555555555555555)
              v114 = 0xAAAAAAAAAAAAAAALL;
            else
              v114 = v113;
            v509 = v100 + 12;
            if (v114)
            {
              if (v114 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_521;
              v115 = (uint64_t *)operator new(24 * v114);
            }
            else
            {
              v115 = 0;
            }
            v119 = &v115[3 * v111];
            v505 = v115;
            v506 = (uint64_t)v119;
            v507 = (uint64_t)v119;
            v508 = (char *)&v115[3 * v114];
            v119[1] = 0;
            v119[2] = 0;
            *v119 = (uint64_t)(v119 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v119, v500, &v501);
            v120 = v506;
            v109 = (uint64_t *)(v507 + 24);
            v121 = (char *)v100[10];
            v122 = (char *)v100[11];
            if (v122 == v121)
            {
              v100[10] = v506;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
            }
            else
            {
              v123 = 0;
              do
              {
                v124 = v120 + v123;
                *(_QWORD *)(v124 - 24) = *(_QWORD *)&v122[v123 - 24];
                v125 = &v122[v123 - 16];
                v126 = *(_QWORD *)v125;
                *(_QWORD *)(v120 + v123 - 16) = *(_QWORD *)v125;
                v127 = v120 + v123 - 16;
                v128 = *(_QWORD *)&v122[v123 - 8];
                *(_QWORD *)(v124 - 8) = v128;
                if (v128)
                {
                  *(_QWORD *)(v126 + 16) = v127;
                  *(_QWORD *)&v122[v123 - 24] = v125;
                  *(_QWORD *)v125 = 0;
                  *(_QWORD *)&v122[v123 - 8] = 0;
                }
                else
                {
                  *(_QWORD *)(v124 - 24) = v127;
                }
                v123 -= 24;
              }
              while (&v122[v123] != v121);
              v129 = v120 + v123;
              v122 = (char *)v100[10];
              v130 = (char *)v100[11];
              v100[10] = v129;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
              if (v130 != v122)
              {
                do
                {
                  v131 = v130 - 24;
                  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v130 - 2));
                  v130 = v131;
                }
                while (v131 != v122);
              }
            }
            if (v122)
              operator delete(v122);
          }
          else
          {
            v108[2] = 0;
            v108[1] = 0;
            *v108 = (uint64_t)(v108 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v108, v500, &v501);
            v109 = v108 + 3;
            v100[11] = (uint64_t)(v108 + 3);
          }
          v100[11] = (uint64_t)v109;
          v116 = v100[31];
        }
        else
        {
          v103 = v100[10] + 24 * (((uint64_t)v101 - v100[7]) >> 3);
          v104 = v103 + 8;
          std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v103 + 8));
          *(_QWORD *)v103 = v500;
          v105 = v501;
          *(_QWORD *)(v103 + 8) = v501;
          v106 = v502;
          *(_QWORD *)(v103 + 16) = v502;
          if (v106)
          {
            v105[2] = v104;
            v500 = &v501;
            v501 = 0;
            v502 = 0;
          }
          else
          {
            *(_QWORD *)v103 = v104;
          }
          v116 = v100[31];
          if (v103 != v100[11])
          {
            for (k = (_QWORD *)v100[16]; k; k = (_QWORD *)*k)
            {
              v505 = &v503;
              v506 = 1;
              v504 = v116;
              v118 = k[6];
              if (!v118)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v118 + 48))(v118, &v504, &v505);
            }
LABEL_143:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v135 = *(_QWORD *)(a1 + 120);
            v134 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = &v501;
            v136 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>(v134);
            v503 = v135;
            v137 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v136 + 4, (uint64_t)&v503);
            if ((v138 & 1) != 0)
            {
              v143 = v136[12];
              v144 = (uint64_t *)v136[11];
              if ((unint64_t)v144 >= v143)
              {
                v146 = v136[10];
                v147 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v144 - v146) >> 3);
                if (v147 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - v146) >> 3);
                v149 = 2 * v148;
                if (2 * v148 <= v147 + 1)
                  v149 = v147 + 1;
                if (v148 >= 0x555555555555555)
                  v150 = 0xAAAAAAAAAAAAAAALL;
                else
                  v150 = v149;
                v509 = v136 + 12;
                if (v150)
                {
                  if (v150 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_521;
                  v151 = (uint64_t *)operator new(24 * v150);
                }
                else
                {
                  v151 = 0;
                }
                v155 = &v151[3 * v147];
                v505 = v151;
                v506 = (uint64_t)v155;
                v507 = (uint64_t)v155;
                v508 = (char *)&v151[3 * v150];
                v155[1] = 0;
                v155[2] = 0;
                *v155 = (uint64_t)(v155 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v155, v500, &v501);
                v156 = v506;
                v145 = (uint64_t *)(v507 + 24);
                v157 = (char *)v136[10];
                v158 = (char *)v136[11];
                if (v158 == v157)
                {
                  v136[10] = v506;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                }
                else
                {
                  v159 = 0;
                  do
                  {
                    v160 = v156 + v159;
                    *(_QWORD *)(v160 - 24) = *(_QWORD *)&v158[v159 - 24];
                    v161 = &v158[v159 - 16];
                    v162 = *(_QWORD *)v161;
                    *(_QWORD *)(v156 + v159 - 16) = *(_QWORD *)v161;
                    v163 = v156 + v159 - 16;
                    v164 = *(_QWORD *)&v158[v159 - 8];
                    *(_QWORD *)(v160 - 8) = v164;
                    if (v164)
                    {
                      *(_QWORD *)(v162 + 16) = v163;
                      *(_QWORD *)&v158[v159 - 24] = v161;
                      *(_QWORD *)v161 = 0;
                      *(_QWORD *)&v158[v159 - 8] = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v160 - 24) = v163;
                    }
                    v159 -= 24;
                  }
                  while (&v158[v159] != v157);
                  v165 = v156 + v159;
                  v158 = (char *)v136[10];
                  v166 = (char *)v136[11];
                  v136[10] = v165;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                  if (v166 != v158)
                  {
                    do
                    {
                      v167 = v166 - 24;
                      std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v166 - 2));
                      v166 = v167;
                    }
                    while (v167 != v158);
                  }
                }
                if (v158)
                  operator delete(v158);
              }
              else
              {
                v144[2] = 0;
                v144[1] = 0;
                *v144 = (uint64_t)(v144 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v144, v500, &v501);
                v145 = v144 + 3;
                v136[11] = (uint64_t)(v144 + 3);
              }
              v136[11] = (uint64_t)v145;
              v152 = v136[31];
            }
            else
            {
              v139 = v136[10] + 24 * (((uint64_t)v137 - v136[7]) >> 3);
              v140 = v139 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v139 + 8));
              *(_QWORD *)v139 = v500;
              v141 = v501;
              *(_QWORD *)(v139 + 8) = v501;
              v142 = v502;
              *(_QWORD *)(v139 + 16) = v502;
              if (v142)
              {
                v141[2] = v140;
                v500 = &v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v139 = v140;
              }
              v152 = v136[31];
              if (v139 != v136[11])
              {
                v153 = (_QWORD *)v136[16];
                if (v153)
                {
                  while (1)
                  {
                    v505 = &v503;
                    v506 = 1;
                    v504 = v152;
                    v154 = v153[6];
                    if (!v154)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v154 + 48))(v154, &v504, &v505);
                    v153 = (_QWORD *)*v153;
                    if (!v153)
                      goto LABEL_180;
                  }
                }
                goto LABEL_180;
              }
            }
            for (m = (_QWORD *)v136[22]; m; m = (_QWORD *)*m)
            {
              v505 = &v503;
              v506 = 1;
              v504 = v152;
              v169 = m[6];
              if (!v169)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v169 + 48))(v169, &v504, &v505);
            }
LABEL_180:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v171 = *(_QWORD *)(a1 + 120);
            v170 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = &v501;
            v172 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>(v170);
            v503 = v171;
            v173 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v172 + 4, (uint64_t)&v503);
            if ((v174 & 1) == 0)
            {
              v175 = v172[10] + 24 * (((uint64_t)v173 - v172[7]) >> 3);
              v176 = v175 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v175 + 8));
              *(_QWORD *)v175 = v500;
              v177 = v501;
              *(_QWORD *)(v175 + 8) = v501;
              v178 = v502;
              *(_QWORD *)(v175 + 16) = v502;
              if (v178)
              {
                v177[2] = v176;
                v500 = &v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v175 = v176;
              }
              v188 = v172[31];
              if (v175 != v172[11])
              {
                v189 = (_QWORD *)v172[16];
                if (v189)
                {
                  while (1)
                  {
                    v505 = &v503;
                    v506 = 1;
                    v504 = v188;
                    v190 = v189[6];
                    if (!v190)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v190 + 48))(v190, &v504, &v505);
                    v189 = (_QWORD *)*v189;
                    if (!v189)
                      goto LABEL_217;
                  }
                }
                goto LABEL_217;
              }
LABEL_214:
              for (n = (_QWORD *)v172[22]; n; n = (_QWORD *)*n)
              {
                v505 = &v503;
                v506 = 1;
                v504 = v188;
                v205 = n[6];
                if (!v205)
                  goto LABEL_517;
                (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v205 + 48))(v205, &v504, &v505);
              }
LABEL_217:
              std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
              goto LABEL_218;
            }
            v179 = v172[12];
            v180 = (uint64_t *)v172[11];
            if ((unint64_t)v180 < v179)
            {
              v180[2] = 0;
              v180[1] = 0;
              *v180 = (uint64_t)(v180 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v180, v500, &v501);
              v181 = v180 + 3;
              v172[11] = (uint64_t)(v180 + 3);
LABEL_213:
              v172[11] = (uint64_t)v181;
              v188 = v172[31];
              goto LABEL_214;
            }
            v182 = v172[10];
            v183 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v180 - v182) >> 3);
            if (v183 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - v182) >> 3);
            v185 = 2 * v184;
            if (2 * v184 <= v183 + 1)
              v185 = v183 + 1;
            if (v184 >= 0x555555555555555)
              v186 = 0xAAAAAAAAAAAAAAALL;
            else
              v186 = v185;
            v509 = v172 + 12;
            if (!v186)
            {
              v187 = 0;
              goto LABEL_201;
            }
            if (v186 <= 0xAAAAAAAAAAAAAAALL)
            {
              v187 = (uint64_t *)operator new(24 * v186);
LABEL_201:
              v191 = &v187[3 * v183];
              v505 = v187;
              v506 = (uint64_t)v191;
              v507 = (uint64_t)v191;
              v508 = (char *)&v187[3 * v186];
              v191[1] = 0;
              v191[2] = 0;
              *v191 = (uint64_t)(v191 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v191, v500, &v501);
              v192 = v506;
              v181 = (uint64_t *)(v507 + 24);
              v193 = (char *)v172[10];
              v194 = (char *)v172[11];
              if (v194 == v193)
              {
                v172[10] = v506;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
              }
              else
              {
                v195 = 0;
                do
                {
                  v196 = v192 + v195;
                  *(_QWORD *)(v196 - 24) = *(_QWORD *)&v194[v195 - 24];
                  v197 = &v194[v195 - 16];
                  v198 = *(_QWORD *)v197;
                  *(_QWORD *)(v192 + v195 - 16) = *(_QWORD *)v197;
                  v199 = v192 + v195 - 16;
                  v200 = *(_QWORD *)&v194[v195 - 8];
                  *(_QWORD *)(v196 - 8) = v200;
                  if (v200)
                  {
                    *(_QWORD *)(v198 + 16) = v199;
                    *(_QWORD *)&v194[v195 - 24] = v197;
                    *(_QWORD *)v197 = 0;
                    *(_QWORD *)&v194[v195 - 8] = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v196 - 24) = v199;
                  }
                  v195 -= 24;
                }
                while (&v194[v195] != v193);
                v201 = v192 + v195;
                v194 = (char *)v172[10];
                v202 = (char *)v172[11];
                v172[10] = v201;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
                if (v202 != v194)
                {
                  do
                  {
                    v203 = v202 - 24;
                    std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v202 - 2));
                    v202 = v203;
                  }
                  while (v203 != v194);
                }
              }
              if (v194)
                operator delete(v194);
              goto LABEL_213;
            }
LABEL_521:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
        }
        v132 = (_QWORD *)v100[22];
        if (v132)
        {
          while (1)
          {
            v505 = &v503;
            v506 = 1;
            v504 = v116;
            v133 = v132[6];
            if (!v133)
              goto LABEL_517;
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v133 + 48))(v133, &v504, &v505);
            v132 = (_QWORD *)*v132;
            if (!v132)
              goto LABEL_143;
          }
        }
        goto LABEL_143;
      }
    }
    v96 = (_QWORD *)v64[22];
    if (v96)
    {
      while (1)
      {
        v505 = &v503;
        v506 = 1;
        v504 = v80;
        v97 = v96[6];
        if (!v97)
          goto LABEL_517;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v97 + 48))(v97, &v504, &v505);
        v96 = (_QWORD *)*v96;
        if (!v96)
          goto LABEL_106;
      }
    }
    goto LABEL_106;
  }
LABEL_218:
  v499 = a1;
  v206 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)54>>(v19);
  v207 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)54>>(v19);
  v208 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>(v19);
  v209 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>(v19);
  v210 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>(v19);
  v211 = (_QWORD *)v210;
  v212 = v208 + 4;
  v213 = v209 + 4;
  v214 = v210 + 32;
  v216 = v206[7];
  v215 = v206[8];
  if (v207[8] - v207[7] >= (unint64_t)(v215 - v216))
    v217 = v206 + 4;
  else
    v217 = v207 + 4;
  if (v208[8] - v208[7] < v217[4] - v217[3])
    v217 = v208 + 4;
  if (v209[8] - v209[7] < v217[4] - v217[3])
    v217 = v209 + 4;
  if (*(_QWORD *)(v210 + 64) - *(_QWORD *)(v210 + 56) >= v217[4] - v217[3])
    v218 = v217;
  else
    v218 = (_QWORD *)(v210 + 32);
  if (v206 + 4 == v218)
  {
    v495 = v210 + 32;
    v505 = v498;
    v506 = v499;
    while (v216 != v215)
    {
      v220 = *(unsigned int *)(v216 + 4);
      v221 = v220 >> 7;
      v222 = v207[4];
      v223 = (v207[5] - v222) >> 3;
      if (v220 >> 7 < v223)
      {
        v224 = *(_QWORD *)(v222 + 8 * v221);
        if (v224)
        {
          v225 = v220 & 0x7F;
          v226 = *(unsigned __int16 *)(v224 + 2 * v225);
          v227 = v207[7];
          v228 = v207[8];
          v229 = (v228 - v227) >> 3;
          if (v229 > v226)
          {
            v230 = v227 + 8 * v226;
            if (v230 != v228 && *(_DWORD *)(v230 + 4) == (_DWORD)v220)
            {
              v232 = v208[4];
              v233 = (v208[5] - v232) >> 3;
              if (v221 < v233)
              {
                v234 = *(_QWORD *)(v232 + 8 * v221);
                if (v234)
                {
                  v235 = *(unsigned __int16 *)(v234 + 2 * v225);
                  v237 = v208[7];
                  v236 = v208[8];
                  v238 = (v236 - v237) >> 3;
                  if (v238 > v235)
                  {
                    v239 = v237 + 8 * v235;
                    if (v239 != v236 && *(_DWORD *)(v239 + 4) == (_DWORD)v220)
                    {
                      v241 = v209[4];
                      v242 = (v209[5] - v241) >> 3;
                      if (v221 < v242)
                      {
                        v243 = *(_QWORD *)(v241 + 8 * v221);
                        if (v243)
                        {
                          v244 = *(unsigned __int16 *)(v243 + 2 * v225);
                          v245 = v209[7];
                          v496 = v213;
                          v494 = v209[8];
                          v493 = (v494 - v245) >> 3;
                          if (v493 > v244)
                          {
                            v246 = v245 + 8 * v244;
                            if (v246 != v494 && *(_DWORD *)(v246 + 4) == (_DWORD)v220)
                            {
                              v492 = v211[4];
                              v491 = (v211[5] - v492) >> 3;
                              if (v221 < v491)
                              {
                                v248 = *(_QWORD *)(v492 + 8 * v221);
                                if (v248)
                                {
                                  v249 = *(unsigned __int16 *)(v248 + 2 * v225);
                                  v489 = v211[7];
                                  v490 = v211[8];
                                  if ((v490 - v489) >> 3 > v249)
                                  {
                                    v250 = v489 + 8 * v249;
                                    if (v250 != v490 && *(_DWORD *)(v250 + 4) == (_DWORD)v220)
                                    {
                                      v251 = *(_QWORD *)v216;
                                      v252 = HIDWORD(*(_QWORD *)v216);
                                      v253 = *(_QWORD *)v216 >> 39;
                                      if (v253 < v223
                                        && (v254 = *(_QWORD *)(v222 + 8 * v253)) != 0
                                        && (v255 = *(unsigned __int16 *)(v254 + 2 * (HIDWORD(v251) & 0x7F)), v229 > v255)
                                        && (v256 = v227 + 8 * v255, v256 != v228)
                                        && *(_DWORD *)(v256 + 4) == (_DWORD)v252)
                                      {
                                        v257 = (uint64_t *)(v207[10] + 24 * v255);
                                      }
                                      else
                                      {
                                        v257 = (uint64_t *)v207[11];
                                      }
                                      if (v253 < v233
                                        && (v258 = *(_QWORD *)(v232 + 8 * v253)) != 0
                                        && (v259 = *(unsigned __int16 *)(v258 + 2 * (HIDWORD(v251) & 0x7F)), v238 > v259)
                                        && (v260 = v237 + 8 * v259, v260 != v236)
                                        && *(_DWORD *)(v260 + 4) == (_DWORD)v252)
                                      {
                                        v261 = (uint64_t *)(v208[10] + 24 * v259);
                                      }
                                      else
                                      {
                                        v261 = (uint64_t *)v208[11];
                                      }
                                      v262 = HIDWORD(*(_QWORD *)v216);
                                      if (v253 < v242
                                        && (v263 = *(_QWORD *)(v241 + 8 * v253)) != 0
                                        && (v264 = *(unsigned __int16 *)(v263 + 2 * (HIDWORD(v251) & 0x7F)), v493 > v264)
                                        && (v265 = v245 + 8 * v264, v265 != v494)
                                        && *(_DWORD *)(v265 + 4) == (_DWORD)v262)
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)(v209[10] + 24 * v264);
                                      }
                                      else
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)v209[11];
                                      }
                                      if (v253 < v491
                                        && (v268 = *(_QWORD *)(v492 + 8 * v253)) != 0
                                        && (v269 = *(unsigned __int16 *)(v268 + 2 * (HIDWORD(v251) & 0x7F)), v266 > v269)
                                        && (v270 = v489 + 8 * v269, v270 != v490)
                                        && *(_DWORD *)(v270 + 4) == (_DWORD)v262)
                                      {
                                        v219 = v211[10] + 24 * v269;
                                      }
                                      else
                                      {
                                        v219 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()((uint64_t)&v505, v251, v257, v261, v267, v219);
                                      v213 = v496;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v216 += 8;
    }
    v214 = v495;
  }
  v271 = v498;
  if (v207 + 4 != v218)
  {
    if (v212 != v218)
      goto LABEL_294;
LABEL_351:
    v326 = v213;
    v505 = v271;
    v506 = v499;
    v327 = v208[7];
    v328 = v208[8];
    if (v327 != v328)
    {
      v329 = (uint64_t *)v208[10];
      do
      {
        v331 = *(unsigned int *)(v327 + 4);
        v332 = v331 >> 7;
        v333 = v206[4];
        if (v331 >> 7 < (v206[5] - v333) >> 3)
        {
          v334 = *(_QWORD *)(v333 + 8 * v332);
          if (v334)
          {
            v335 = v331 & 0x7F;
            v336 = *(unsigned __int16 *)(v334 + 2 * v335);
            v338 = v206[7];
            v337 = v206[8];
            if (v336 < (v337 - v338) >> 3)
            {
              v339 = v338 + 8 * v336;
              if (v339 != v337 && *(_DWORD *)(v339 + 4) == (_DWORD)v331)
              {
                v341 = v207[4];
                v342 = (v207[5] - v341) >> 3;
                if (v332 < v342)
                {
                  v343 = *(_QWORD *)(v341 + 8 * v332);
                  if (v343)
                  {
                    v344 = *(unsigned __int16 *)(v343 + 2 * v335);
                    v346 = v207[7];
                    v345 = v207[8];
                    v347 = (v345 - v346) >> 3;
                    if (v347 > v344)
                    {
                      v348 = v346 + 8 * v344;
                      if (v348 != v345 && *(_DWORD *)(v348 + 4) == (_DWORD)v331)
                      {
                        v350 = v209[4];
                        v351 = (v209[5] - v350) >> 3;
                        if (v332 < v351)
                        {
                          v352 = *(_QWORD *)(v350 + 8 * v332);
                          if (v352)
                          {
                            v353 = *(unsigned __int16 *)(v352 + 2 * v335);
                            v355 = v209[7];
                            v354 = v209[8];
                            v356 = (v354 - v355) >> 3;
                            if (v356 > v353)
                            {
                              v357 = v355 + 8 * v353;
                              if (v357 != v354 && *(_DWORD *)(v357 + 4) == (_DWORD)v331)
                              {
                                v359 = v211[4];
                                v360 = (v211[5] - v359) >> 3;
                                if (v332 < v360)
                                {
                                  v361 = *(_QWORD *)(v359 + 8 * v332);
                                  if (v361)
                                  {
                                    v362 = *(unsigned __int16 *)(v361 + 2 * v335);
                                    v364 = v211[7];
                                    v363 = v211[8];
                                    v365 = (v363 - v364) >> 3;
                                    if (v365 > v362)
                                    {
                                      v366 = v364 + 8 * v362;
                                      if (v366 != v363 && *(_DWORD *)(v366 + 4) == (_DWORD)v331)
                                      {
                                        v367 = *(_QWORD *)v327;
                                        v368 = HIDWORD(*(_QWORD *)v327);
                                        v369 = *(_QWORD *)v327 >> 39;
                                        if (v369 < v342
                                          && (v370 = *(_QWORD *)(v341 + 8 * v369)) != 0
                                          && (v371 = *(unsigned __int16 *)(v370 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v347 > v371)
                                          && (v372 = v346 + 8 * v371, v372 != v345)
                                          && *(_DWORD *)(v372 + 4) == (_DWORD)v368)
                                        {
                                          v373 = (uint64_t *)(v207[10] + 24 * v371);
                                        }
                                        else
                                        {
                                          v373 = (uint64_t *)v207[11];
                                        }
                                        if (v369 < v351
                                          && (v374 = *(_QWORD *)(v350 + 8 * v369)) != 0
                                          && (v375 = *(unsigned __int16 *)(v374 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v356 > v375)
                                          && (v376 = v355 + 8 * v375, v376 != v354)
                                          && *(_DWORD *)(v376 + 4) == (_DWORD)v368)
                                        {
                                          v377 = (uint64_t *)(v209[10] + 24 * v375);
                                        }
                                        else
                                        {
                                          v377 = (uint64_t *)v209[11];
                                        }
                                        if (v369 < v360
                                          && (v378 = *(_QWORD *)(v359 + 8 * v369)) != 0
                                          && (v379 = *(unsigned __int16 *)(v378 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v365 > v379)
                                          && (v380 = v364 + 8 * v379, v380 != v363)
                                          && *(_DWORD *)(v380 + 4) == (_DWORD)v368)
                                        {
                                          v330 = v211[10] + 24 * v379;
                                        }
                                        else
                                        {
                                          v330 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()((uint64_t)&v505, v367, v373, v329, v377, v330);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v329 += 3;
        v327 += 8;
      }
      while (v327 != v328);
    }
    if (v326 != v218)
      goto LABEL_460;
    goto LABEL_406;
  }
  v497 = v213;
  v505 = v498;
  v506 = v499;
  v272 = v207[7];
  v273 = v207[8];
  if (v272 != v273)
  {
    v274 = (uint64_t *)v207[10];
    do
    {
      v276 = *(unsigned int *)(v272 + 4);
      v277 = v276 >> 7;
      v278 = v206[4];
      if (v276 >> 7 < (v206[5] - v278) >> 3)
      {
        v279 = *(_QWORD *)(v278 + 8 * v277);
        if (v279)
        {
          v280 = v276 & 0x7F;
          v281 = *(unsigned __int16 *)(v279 + 2 * v280);
          v283 = v206[7];
          v282 = v206[8];
          if (v281 < (v282 - v283) >> 3)
          {
            v284 = v283 + 8 * v281;
            if (v284 != v282 && *(_DWORD *)(v284 + 4) == (_DWORD)v276)
            {
              v286 = v208[4];
              v287 = (v208[5] - v286) >> 3;
              if (v277 < v287)
              {
                v288 = *(_QWORD *)(v286 + 8 * v277);
                if (v288)
                {
                  v289 = *(unsigned __int16 *)(v288 + 2 * v280);
                  v291 = v208[7];
                  v290 = v208[8];
                  v292 = (v290 - v291) >> 3;
                  if (v292 > v289)
                  {
                    v293 = v291 + 8 * v289;
                    if (v293 != v290 && *(_DWORD *)(v293 + 4) == (_DWORD)v276)
                    {
                      v295 = v209[4];
                      v296 = (v209[5] - v295) >> 3;
                      if (v277 < v296)
                      {
                        v297 = *(_QWORD *)(v295 + 8 * v277);
                        if (v297)
                        {
                          v298 = *(unsigned __int16 *)(v297 + 2 * v280);
                          v300 = v209[7];
                          v299 = v209[8];
                          v301 = (v299 - v300) >> 3;
                          if (v301 > v298)
                          {
                            v302 = v300 + 8 * v298;
                            if (v302 != v299 && *(_DWORD *)(v302 + 4) == (_DWORD)v276)
                            {
                              v304 = v211[4];
                              v305 = (v211[5] - v304) >> 3;
                              if (v277 < v305)
                              {
                                v306 = *(_QWORD *)(v304 + 8 * v277);
                                if (v306)
                                {
                                  v307 = *(unsigned __int16 *)(v306 + 2 * v280);
                                  v309 = v211[7];
                                  v308 = v211[8];
                                  v310 = (v308 - v309) >> 3;
                                  if (v310 > v307)
                                  {
                                    v311 = v309 + 8 * v307;
                                    if (v311 != v308 && *(_DWORD *)(v311 + 4) == (_DWORD)v276)
                                    {
                                      v312 = *(_QWORD *)v272;
                                      v313 = HIDWORD(*(_QWORD *)v272);
                                      v314 = *(_QWORD *)v272 >> 39;
                                      if (v314 < v287
                                        && (v315 = *(_QWORD *)(v286 + 8 * v314)) != 0
                                        && (v316 = *(unsigned __int16 *)(v315 + 2 * (HIDWORD(v312) & 0x7F)), v292 > v316)
                                        && (v317 = v291 + 8 * v316, v317 != v290)
                                        && *(_DWORD *)(v317 + 4) == (_DWORD)v313)
                                      {
                                        v318 = (uint64_t *)(v208[10] + 24 * v316);
                                      }
                                      else
                                      {
                                        v318 = (uint64_t *)v208[11];
                                      }
                                      if (v314 < v296
                                        && (v319 = *(_QWORD *)(v295 + 8 * v314)) != 0
                                        && (v320 = *(unsigned __int16 *)(v319 + 2 * (HIDWORD(v312) & 0x7F)), v301 > v320)
                                        && (v321 = v300 + 8 * v320, v321 != v299)
                                        && *(_DWORD *)(v321 + 4) == (_DWORD)v313)
                                      {
                                        v322 = (uint64_t *)(v209[10] + 24 * v320);
                                      }
                                      else
                                      {
                                        v322 = (uint64_t *)v209[11];
                                      }
                                      if (v314 < v305
                                        && (v323 = *(_QWORD *)(v304 + 8 * v314)) != 0
                                        && (v324 = *(unsigned __int16 *)(v323 + 2 * (HIDWORD(v312) & 0x7F)), v310 > v324)
                                        && (v325 = v309 + 8 * v324, v325 != v308)
                                        && *(_DWORD *)(v325 + 4) == (_DWORD)v313)
                                      {
                                        v275 = v211[10] + 24 * v324;
                                      }
                                      else
                                      {
                                        v275 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()((uint64_t)&v505, v312, v274, v318, v322, v275);
                                      v271 = v498;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v274 += 3;
      v272 += 8;
    }
    while (v272 != v273);
  }
  v213 = v497;
  if (v212 == v218)
    goto LABEL_351;
LABEL_294:
  if (v213 == v218)
  {
LABEL_406:
    v505 = v271;
    v506 = v499;
    v381 = v209[7];
    v382 = v209[8];
    if (v381 != v382)
    {
      v383 = (uint64_t *)v209[10];
      do
      {
        v385 = *(unsigned int *)(v381 + 4);
        v386 = v385 >> 7;
        v387 = v206[4];
        if (v385 >> 7 < (v206[5] - v387) >> 3)
        {
          v388 = *(_QWORD *)(v387 + 8 * v386);
          if (v388)
          {
            v389 = v385 & 0x7F;
            v390 = *(unsigned __int16 *)(v388 + 2 * v389);
            v392 = v206[7];
            v391 = v206[8];
            if (v390 < (v391 - v392) >> 3)
            {
              v393 = v392 + 8 * v390;
              if (v393 != v391 && *(_DWORD *)(v393 + 4) == (_DWORD)v385)
              {
                v395 = v207[4];
                v396 = (v207[5] - v395) >> 3;
                if (v386 < v396)
                {
                  v397 = *(_QWORD *)(v395 + 8 * v386);
                  if (v397)
                  {
                    v398 = *(unsigned __int16 *)(v397 + 2 * v389);
                    v400 = v207[7];
                    v399 = v207[8];
                    v401 = (v399 - v400) >> 3;
                    if (v401 > v398)
                    {
                      v402 = v400 + 8 * v398;
                      if (v402 != v399 && *(_DWORD *)(v402 + 4) == (_DWORD)v385)
                      {
                        v404 = v208[4];
                        v405 = (v208[5] - v404) >> 3;
                        if (v386 < v405)
                        {
                          v406 = *(_QWORD *)(v404 + 8 * v386);
                          if (v406)
                          {
                            v407 = *(unsigned __int16 *)(v406 + 2 * v389);
                            v409 = v208[7];
                            v408 = v208[8];
                            v410 = (v408 - v409) >> 3;
                            if (v410 > v407)
                            {
                              v411 = v409 + 8 * v407;
                              if (v411 != v408 && *(_DWORD *)(v411 + 4) == (_DWORD)v385)
                              {
                                v413 = v211[4];
                                v414 = (v211[5] - v413) >> 3;
                                if (v386 < v414)
                                {
                                  v415 = *(_QWORD *)(v413 + 8 * v386);
                                  if (v415)
                                  {
                                    v416 = *(unsigned __int16 *)(v415 + 2 * v389);
                                    v418 = v211[7];
                                    v417 = v211[8];
                                    v419 = (v417 - v418) >> 3;
                                    if (v419 > v416)
                                    {
                                      v420 = v418 + 8 * v416;
                                      if (v420 != v417 && *(_DWORD *)(v420 + 4) == (_DWORD)v385)
                                      {
                                        v421 = *(_QWORD *)v381;
                                        v422 = HIDWORD(*(_QWORD *)v381);
                                        v423 = *(_QWORD *)v381 >> 39;
                                        if (v423 < v396
                                          && (v424 = *(_QWORD *)(v395 + 8 * v423)) != 0
                                          && (v425 = *(unsigned __int16 *)(v424 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v401 > v425)
                                          && (v426 = v400 + 8 * v425, v426 != v399)
                                          && *(_DWORD *)(v426 + 4) == (_DWORD)v422)
                                        {
                                          v427 = (uint64_t *)(v207[10] + 24 * v425);
                                        }
                                        else
                                        {
                                          v427 = (uint64_t *)v207[11];
                                        }
                                        if (v423 < v405
                                          && (v428 = *(_QWORD *)(v404 + 8 * v423)) != 0
                                          && (v429 = *(unsigned __int16 *)(v428 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v410 > v429)
                                          && (v430 = v409 + 8 * v429, v430 != v408)
                                          && *(_DWORD *)(v430 + 4) == (_DWORD)v422)
                                        {
                                          v431 = (uint64_t *)(v208[10] + 24 * v429);
                                        }
                                        else
                                        {
                                          v431 = (uint64_t *)v208[11];
                                        }
                                        if (v423 < v414
                                          && (v432 = *(_QWORD *)(v413 + 8 * v423)) != 0
                                          && (v433 = *(unsigned __int16 *)(v432 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v419 > v433)
                                          && (v434 = v418 + 8 * v433, v434 != v417)
                                          && *(_DWORD *)(v434 + 4) == (_DWORD)v422)
                                        {
                                          v384 = v211[10] + 24 * v433;
                                        }
                                        else
                                        {
                                          v384 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()((uint64_t)&v505, v421, v427, v431, v383, v384);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v383 += 3;
        v381 += 8;
      }
      while (v381 != v382);
    }
  }
LABEL_460:
  if ((_QWORD *)v214 == v218)
  {
    v505 = v271;
    v506 = v499;
    v435 = v211[7];
    v436 = v211[8];
    if (v435 != v436)
    {
      v437 = v211[10];
      do
      {
        v439 = *(unsigned int *)(v435 + 4);
        v440 = v439 >> 7;
        v441 = v206[4];
        if (v439 >> 7 < (v206[5] - v441) >> 3)
        {
          v442 = *(_QWORD *)(v441 + 8 * v440);
          if (v442)
          {
            v443 = v439 & 0x7F;
            v444 = *(unsigned __int16 *)(v442 + 2 * v443);
            v446 = v206[7];
            v445 = v206[8];
            if (v444 < (v445 - v446) >> 3)
            {
              v447 = v446 + 8 * v444;
              if (v447 != v445 && *(_DWORD *)(v447 + 4) == (_DWORD)v439)
              {
                v449 = v207[4];
                v450 = (v207[5] - v449) >> 3;
                if (v440 < v450)
                {
                  v451 = *(_QWORD *)(v449 + 8 * v440);
                  if (v451)
                  {
                    v452 = *(unsigned __int16 *)(v451 + 2 * v443);
                    v454 = v207[7];
                    v453 = v207[8];
                    v455 = (v453 - v454) >> 3;
                    if (v455 > v452)
                    {
                      v456 = v454 + 8 * v452;
                      if (v456 != v453 && *(_DWORD *)(v456 + 4) == (_DWORD)v439)
                      {
                        v458 = v208[4];
                        v459 = (v208[5] - v458) >> 3;
                        if (v440 < v459)
                        {
                          v460 = *(_QWORD *)(v458 + 8 * v440);
                          if (v460)
                          {
                            v461 = *(unsigned __int16 *)(v460 + 2 * v443);
                            v463 = v208[7];
                            v462 = v208[8];
                            v464 = (v462 - v463) >> 3;
                            if (v464 > v461)
                            {
                              v465 = v463 + 8 * v461;
                              if (v465 != v462 && *(_DWORD *)(v465 + 4) == (_DWORD)v439)
                              {
                                v467 = v209[4];
                                v468 = (v209[5] - v467) >> 3;
                                if (v440 < v468)
                                {
                                  v469 = *(_QWORD *)(v467 + 8 * v440);
                                  if (v469)
                                  {
                                    v470 = *(unsigned __int16 *)(v469 + 2 * v443);
                                    v472 = v209[7];
                                    v471 = v209[8];
                                    v473 = (v471 - v472) >> 3;
                                    if (v473 > v470)
                                    {
                                      v474 = v472 + 8 * v470;
                                      if (v474 != v471 && *(_DWORD *)(v474 + 4) == (_DWORD)v439)
                                      {
                                        v475 = *(_QWORD *)v435;
                                        v476 = HIDWORD(*(_QWORD *)v435);
                                        v477 = *(_QWORD *)v435 >> 39;
                                        if (v477 < v450
                                          && (v478 = *(_QWORD *)(v449 + 8 * v477)) != 0
                                          && (v479 = *(unsigned __int16 *)(v478 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v455 > v479)
                                          && (v480 = v454 + 8 * v479, v480 != v453)
                                          && *(_DWORD *)(v480 + 4) == (_DWORD)v476)
                                        {
                                          v481 = (uint64_t *)(v207[10] + 24 * v479);
                                        }
                                        else
                                        {
                                          v481 = (uint64_t *)v207[11];
                                        }
                                        if (v477 < v459
                                          && (v482 = *(_QWORD *)(v458 + 8 * v477)) != 0
                                          && (v483 = *(unsigned __int16 *)(v482 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v464 > v483)
                                          && (v484 = v463 + 8 * v483, v484 != v462)
                                          && *(_DWORD *)(v484 + 4) == (_DWORD)v476)
                                        {
                                          v485 = (uint64_t *)(v208[10] + 24 * v483);
                                        }
                                        else
                                        {
                                          v485 = (uint64_t *)v208[11];
                                        }
                                        if (v477 < v468
                                          && (v486 = *(_QWORD *)(v467 + 8 * v477)) != 0
                                          && (v487 = *(unsigned __int16 *)(v486 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v473 > v487)
                                          && (v488 = v472 + 8 * v487, v488 != v471)
                                          && *(_DWORD *)(v488 + 4) == (_DWORD)v476)
                                        {
                                          v438 = (uint64_t *)(v209[10] + 24 * v487);
                                        }
                                        else
                                        {
                                          v438 = (uint64_t *)v209[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()((uint64_t)&v505, v475, v481, v485, v438, v437);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v437 += 24;
        v435 += 8;
      }
      while (v435 != v436);
    }
  }
}

void sub_19F64CE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _QWORD **v17;
  va_list va;

  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF1B4156C6107AD92;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF1B4156C6107AD92;
      if (*(_QWORD *)&v3 <= 0xF1B4156C6107AD92)
        v5 = 0xF1B4156C6107AD92 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF1B4156C6107AD92;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF1B4156C6107AD92)
            {
              if (v7[2] == 0xF1B4156C6107AD92)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF1B4156C6107AD92)
          {
            if (v7[2] == 0xF1B4156C6107AD92)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidEnterView<md::MapDataType::DaVinciBuildings>]";
  *(_QWORD *)(v11 + 24) = 73;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270C08;
  *(_QWORD *)(v11 + 8) = 0xF1B4156C6107AD92;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF1B4156C6107AD92, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF1B4156C6107AD92;
  v15[1] = "SceneComponents::LayerDataDidEnterView<md::MapDataType::DaVinciBuildings>]";
  v15[2] = 73;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF1B4156C6107AD92, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F64D23C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1658AB057F40C6F2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1658AB057F40C6F2;
      if (*(_QWORD *)&v3 <= 0x1658AB057F40C6F2uLL)
        v5 = 0x1658AB057F40C6F2uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1658AB057F40C6F2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1658AB057F40C6F2)
            {
              if (v7[2] == 0x1658AB057F40C6F2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1658AB057F40C6F2)
          {
            if (v7[2] == 0x1658AB057F40C6F2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidExitView<md::MapDataType::DaVinciBuildings>]";
  *(_QWORD *)(v11 + 24) = 72;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270A88;
  *(_QWORD *)(v11 + 8) = 0x1658AB057F40C6F2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1658AB057F40C6F2uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1658AB057F40C6F2;
  v15[1] = "SceneComponents::LayerDataDidExitView<md::MapDataType::DaVinciBuildings>]";
  v15[2] = 72;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1658AB057F40C6F2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F64D464(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x66049177CDB7058DLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x66049177CDB7058DLL;
      if (*(_QWORD *)&v3 <= 0x66049177CDB7058DuLL)
        v5 = 0x66049177CDB7058DuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x66049177CDB7058DLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x66049177CDB7058DLL)
            {
              if (v7[2] == 0x66049177CDB7058DLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x66049177CDB7058DLL)
          {
            if (v7[2] == 0x66049177CDB7058DLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataExitingView<md::MapDataType::DaVinciBuildings>]";
  *(_QWORD *)(v11 + 24) = 72;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270B48;
  *(_QWORD *)(v11 + 8) = 0x66049177CDB7058DLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x66049177CDB7058DuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x66049177CDB7058DLL;
  v15[1] = "SceneComponents::LayerDataExitingView<md::MapDataType::DaVinciBuildings>]";
  v15[2] = 72;
  gdc::Registry::_registerStorageDataSignals(a1, 0x66049177CDB7058DLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F64D68C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x641EA51881CC6BFLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x641EA51881CC6BFLL;
      if (*(_QWORD *)&v3 <= 0x641EA51881CC6BFuLL)
        v5 = 0x641EA51881CC6BFuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x641EA51881CC6BFLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x641EA51881CC6BFLL)
            {
              if (v7[2] == 0x641EA51881CC6BFLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x641EA51881CC6BFLL)
          {
            if (v7[2] == 0x641EA51881CC6BFLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataPreviousInView<md::MapDataType::DaVinciBuildings>]";
  *(_QWORD *)(v11 + 24) = 75;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270D88;
  *(_QWORD *)(v11 + 8) = 0x641EA51881CC6BFLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x641EA51881CC6BFuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x641EA51881CC6BFLL;
  v15[1] = "SceneComponents::LayerDataPreviousInView<md::MapDataType::DaVinciBuildings>]";
  v15[2] = 75;
  gdc::Registry::_registerStorageDataSignals(a1, 0x641EA51881CC6BFLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F64D8B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  unint64_t v20;
  unsigned __int8 v21;
  _WORD *v22;
  _WORD *v23;
  uint64_t *v24;
  _WORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  _BOOL4 v33;
  _QWORD *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _BOOL4 v53;
  uint64_t *v54;
  uint64_t *v55;
  _BOOL4 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;

  v8 = a4;
  v9 = (uint64_t)a3;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  v15 = (_QWORD **)(a3 + 1);
  v14 = a3[1];
  v16 = a4 + 1;
  v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2])
    v18 = (uint64_t *)(a3[1] + 16);
  else
    v18 = a3;
  *v18 = (uint64_t)v15;
  v19 = (uint64_t **)(*v16 + 16);
  if (!v17)
    v19 = (uint64_t **)a4;
  *v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(_QWORD *)v9 = v15;
  *(_QWORD *)(v9 + 16) = 0;
  *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a6 + 8));
  *(_QWORD *)a6 = a6 + 8;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v20 = **(_QWORD **)a1;
  if ((v21 & 1) == 0)
  {
LABEL_152:
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
  }
  v22 = *(_WORD **)(v20 + 48);
  v23 = *(_WORD **)(v20 + 56);
  v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v22 != v23)
  {
    v25 = *(_WORD **)(v20 + 48);
    while (*v25 != 54)
    {
      v25 += 16;
      if (v25 == v23)
        goto LABEL_18;
    }
    if (v25 == v23)
    {
      v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v22 != 54)
      {
        v22 += 16;
        if (v22 == v23)
        {
          v22 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      v24 = (uint64_t *)(v22 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (_QWORD *)*v24, v24 + 1);
  v20 = *(_QWORD *)v9;
  v26 = (uint64_t *)*v8;
  v27 = (uint64_t *)*a5;
  *(_QWORD *)&v94 = a5;
  *((_QWORD *)&v94 + 1) = v27;
  while ((_QWORD **)v20 != v15)
  {
    if (v26 == v16)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, v20 + 32);
        v44 = *(_QWORD **)(v20 + 8);
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = *(_QWORD **)(v20 + 16);
            v41 = *v45 == v20;
            v20 = (unint64_t)v45;
          }
          while (!v41);
        }
        v20 = (unint64_t)v45;
      }
      while (v45 != v15);
      break;
    }
    v28 = *(_QWORD *)(v20 + 32);
    v29 = *(unsigned __int8 *)(v20 + 48);
    v30 = (char)v29;
    v31 = *((unsigned __int8 *)v26 + 48);
    v32 = v26[4];
    if (v29 == v31)
      v33 = v28 < v32;
    else
      v33 = (char)v29 < (char)v31;
    if (v33)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, v20 + 32);
      v34 = *(_QWORD **)(v20 + 8);
      if (v34)
      {
        do
        {
          v20 = (unint64_t)v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = v20;
          v20 = *(_QWORD *)(v20 + 16);
        }
        while (*(_QWORD *)v20 != v35);
      }
    }
    else
    {
      v36 = v32 < v28;
      if (v30 != (char)v31)
        v36 = (char)v31 < v30;
      if (v36)
      {
        v37 = (uint64_t *)v26[1];
        if (v37)
        {
          do
          {
            v26 = v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v38);
        }
      }
      else
      {
        v39 = *(_QWORD **)(v20 + 8);
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = *(_QWORD **)(v20 + 16);
            v41 = *v40 == v20;
            v20 = (unint64_t)v40;
          }
          while (!v41);
        }
        v42 = (uint64_t *)v26[1];
        if (v42)
        {
          do
          {
            v26 = v42;
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v43);
        }
        v20 = (unint64_t)v40;
      }
    }
  }
  v8 = (uint64_t *)*v8;
  v46 = *(_QWORD *)v9;
  v47 = *(_QWORD *)a6;
  *(_QWORD *)&v94 = a6;
  *((_QWORD *)&v94 + 1) = v47;
  while (v8 != v16)
  {
    if ((_QWORD **)v46 == v15)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, (uint64_t)(v8 + 4));
        v63 = (uint64_t *)v8[1];
        if (v63)
        {
          do
          {
            v64 = v63;
            v63 = (uint64_t *)*v63;
          }
          while (v63);
        }
        else
        {
          do
          {
            v64 = (uint64_t *)v8[2];
            v41 = *v64 == (_QWORD)v8;
            v8 = v64;
          }
          while (!v41);
        }
        v8 = v64;
      }
      while (v64 != v16);
      break;
    }
    v48 = v8[4];
    v49 = *((unsigned __int8 *)v8 + 48);
    v50 = (char)v49;
    v51 = *(unsigned __int8 *)(v46 + 48);
    v52 = *(_QWORD *)(v46 + 32);
    if (v49 == v51)
      v53 = v48 < v52;
    else
      v53 = (char)v49 < (char)v51;
    if (v53)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, (uint64_t)(v8 + 4));
      v54 = (uint64_t *)v8[1];
      if (v54)
      {
        do
        {
          v8 = v54;
          v54 = (uint64_t *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = v8;
          v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v55);
      }
    }
    else
    {
      v56 = v52 < v48;
      if (v50 != (char)v51)
        v56 = (char)v51 < v50;
      if (v56)
      {
        v57 = *(_QWORD **)(v46 + 8);
        if (v57)
        {
          do
          {
            v46 = (uint64_t)v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v58);
        }
      }
      else
      {
        v59 = (uint64_t *)v8[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (uint64_t *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (uint64_t *)v8[2];
            v41 = *v60 == (_QWORD)v8;
            v8 = v60;
          }
          while (!v41);
        }
        v61 = *(_QWORD **)(v46 + 8);
        if (v61)
        {
          do
          {
            v46 = (uint64_t)v61;
            v61 = (_QWORD *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v62);
        }
        v8 = v60;
      }
    }
  }
  if (!a5[2])
    goto LABEL_122;
  v65 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v66 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v65 + 4, (uint64_t)&v95);
  if ((v67 & 1) != 0)
  {
    v20 = v65[11];
    v69 = v65[12];
    if (v20 >= v69)
    {
      v71 = (char *)v65[10];
      v16 = (uint64_t *)(v20 - (_QWORD)v71);
      v72 = v20 - (_QWORD)v71 + 1;
      if (v72 < 0)
        goto LABEL_154;
      v73 = v69 - (_QWORD)v71;
      if (2 * v73 > v72)
        v72 = 2 * v73;
      if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
        v74 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
        v75 = (char *)operator new(v74);
      else
        v75 = 0;
      v76 = &v75[v74];
      v70 = (uint64_t)v16 + (_QWORD)v75 + 1;
      v77 = &v71[-v20];
      if (v71 == (char *)v20)
        v77 = 0;
      v65[10] = (uint64_t)v16 + (_QWORD)v75 + (unint64_t)v77;
      v65[11] = v70;
      v65[12] = (uint64_t)v76;
      if (v71)
        operator delete(v71);
    }
    else
    {
      v70 = v20 + 1;
    }
    v65[11] = v70;
    v9 = v65[31];
    goto LABEL_118;
  }
  v9 = v65[31];
  if (v65[10] + (((uint64_t)v66 - v65[7]) >> 3) == v65[11])
  {
LABEL_118:
    v8 = &v95;
    a5 = (uint64_t *)v65[22];
    if (a5)
    {
      v20 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = v9;
        v78 = a5[6];
        if (!v78)
          goto LABEL_151;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v78 + 48))(v78, &v94, &v96);
        a5 = (uint64_t *)*a5;
        if (!a5)
          goto LABEL_122;
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v65[16];
  if (a5)
  {
    v8 = &v95;
    v20 = 1;
    do
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = v9;
      v68 = a5[6];
      if (!v68)
        goto LABEL_151;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v68 + 48))(v68, &v94, &v96);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!*(_QWORD *)(a6 + 16))
    return;
  v79 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v80 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v79 + 4, (uint64_t)&v95);
  if ((v81 & 1) != 0)
  {
    v84 = (_BYTE *)v79[11];
    v83 = v79[12];
    if ((unint64_t)v84 < v83)
    {
      v85 = (uint64_t)(v84 + 1);
LABEL_145:
      v79[11] = v85;
      a2 = v79[31];
      goto LABEL_146;
    }
    v86 = (char *)v79[10];
    v8 = (uint64_t *)(v84 - v86);
    v87 = v84 - v86 + 1;
    if (v87 >= 0)
    {
      v88 = v83 - (_QWORD)v86;
      if (2 * v88 > v87)
        v87 = 2 * v88;
      if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
        v89 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
        v90 = (char *)operator new(v89);
      else
        v90 = 0;
      v91 = &v90[v89];
      v85 = (uint64_t)v8 + (_QWORD)v90 + 1;
      v92 = (char *)(v86 - v84);
      if (v86 == v84)
        v92 = 0;
      v79[10] = (uint64_t)v8 + (_QWORD)v90 + (unint64_t)v92;
      v79[11] = v85;
      v79[12] = (uint64_t)v91;
      if (v86)
        operator delete(v86);
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v79[31];
  if (v79[10] + (((uint64_t)v80 - v79[7]) >> 3) != v79[11])
  {
    a6 = v79[16];
    if (a6)
    {
      a5 = &v95;
      v9 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = a2;
        v82 = *(_QWORD *)(a6 + 48);
        if (!v82)
          break;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v82 + 48))(v82, &v94, &v96);
        a6 = *(_QWORD *)a6;
        if (!a6)
          return;
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v95;
  a6 = v79[22];
  if (a6)
  {
    v9 = 1;
    while (1)
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = a2;
      v93 = *(_QWORD *)(a6 + 48);
      if (!v93)
        break;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v93 + 48))(v93, &v94, &v96);
      a6 = *(_QWORD *)a6;
      if (!a6)
        return;
    }
    goto LABEL_151;
  }
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)54>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)54>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)54>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)54>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)54>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42705D0;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)54>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42705D0;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)54>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)62>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectMapDataLogic<(md::MapDataType)62>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)62>::didBecomeInactive(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    result = gdc::Registry::destroy(*(_QWORD *)(result + 128), *(_QWORD *)(result + 120));
    *(_QWORD *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::CollectMapDataContext<md::MapDataType::InjectedFeatures>]";
  v4[3] = 60;
  v4[4] = result;
  *v4 = &off_1E42705F8;
  v4[1] = 0x5A88E3C88DA0DCA1;
  *a2 = v4;
  return result;
}

void sub_19F64E9F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x5A88E3C88DA0DCA1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x5A88E3C88DA0DCA1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x5A88E3C88DA0DCA1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x5A88E3C88DA0DCA1 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x5A88E3C88DA0DCA1 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::CollectMapDataLogic<(md::MapDataType)62>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _WORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _WORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _WORD *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  unint64_t v57;
  __int128 v58;
  __int16 v59;
  _QWORD *i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD *j;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  _QWORD *k;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  _QWORD *m;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  _QWORD *v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  _QWORD *n;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  _QWORD *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  uint64_t *v509;

  v5 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>(*(_QWORD *)(a1 + 128));
  v6 = v5;
  if (v5[29])
  {
    v7 = (_QWORD *)v5[28];
    if (v7)
    {
      v8 = (_QWORD *)v5[31];
      v9 = v5[7];
      v10 = (v5[8] - v9) >> 3;
      do
      {
        v505 = v9;
        v506 = v10;
        v500 = (uint64_t)v8;
        v11 = v7[6];
        if (!v11)
          goto LABEL_516;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v500, &v505);
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  v12 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>(*(_QWORD *)(a1 + 128));
  v13 = v12;
  if (v12[29])
  {
    v14 = (_QWORD *)v12[28];
    if (v14)
    {
      v15 = (_QWORD *)v12[31];
      v16 = v12[7];
      v17 = (v12[8] - v16) >> 3;
      do
      {
        v505 = v16;
        v506 = v17;
        v500 = (uint64_t)v15;
        v18 = v14[6];
        if (!v18)
          goto LABEL_516;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v500, &v505);
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  v13[8] = v13[7];
  v13[11] = v13[10];
  v498 = *a3;
  v19 = *(_QWORD *)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1)
  {
    v20 = gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
    *(_QWORD *)(a1 + 120) = v20;
    v21 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)62>>(*(_QWORD *)(a1 + 128));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v21, v20);
    v22 = *(_QWORD *)(a1 + 120);
    v23 = *(_QWORD *)(a1 + 128);
    v500 = 0x63E9758EF1034754;
    v24 = *(int8x8_t *)(v23 + 128);
    if (v24)
    {
      v25 = (uint8x8_t)vcnt_s8(v24);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = 0x63E9758EF1034754;
        if (*(_QWORD *)&v24 <= 0x63E9758EF1034754uLL)
          v26 = 0x63E9758EF1034754uLL % *(_QWORD *)&v24;
      }
      else
      {
        v26 = (*(_QWORD *)&v24 - 1) & 0x63E9758EF1034754;
      }
      v27 = *(_QWORD **)(*(_QWORD *)(v23 + 120) + 8 * v26);
      if (v27)
      {
        v28 = (_QWORD *)*v27;
        if (v28)
        {
          if (v25.u32[0] < 2uLL)
          {
            v29 = *(_QWORD *)&v24 - 1;
            while (1)
            {
              v31 = v28[1];
              if (v31 == 0x63E9758EF1034754)
              {
                if (v28[2] == 0x63E9758EF1034754)
                  goto LABEL_230;
              }
              else if ((v31 & v29) != v26)
              {
                goto LABEL_34;
              }
              v28 = (_QWORD *)*v28;
              if (!v28)
                goto LABEL_34;
            }
          }
          do
          {
            v30 = v28[1];
            if (v30 == 0x63E9758EF1034754)
            {
              if (v28[2] == 0x63E9758EF1034754)
              {
LABEL_230:
                v32 = v28[3];
                goto LABEL_37;
              }
            }
            else
            {
              if (v30 >= *(_QWORD *)&v24)
                v30 %= *(_QWORD *)&v24;
              if (v30 != v26)
                break;
            }
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_34:
    v32 = operator new();
    *(_QWORD *)(v32 + 16) = "SceneComponents::LayerDataInfo<md::MapDataType::InjectedFeatures>]";
    *(_QWORD *)(v32 + 24) = 65;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_OWORD *)(v32 + 64) = 0u;
    *(_OWORD *)(v32 + 80) = 0u;
    *(_OWORD *)(v32 + 96) = 0u;
    *(_OWORD *)(v32 + 112) = 0u;
    *(_OWORD *)(v32 + 128) = 0u;
    *(_DWORD *)(v32 + 144) = 1065353216;
    *(_OWORD *)(v32 + 152) = 0u;
    *(_OWORD *)(v32 + 168) = 0u;
    *(_QWORD *)(v32 + 184) = 0;
    *(_DWORD *)(v32 + 192) = 1065353216;
    *(_OWORD *)(v32 + 200) = 0u;
    *(_OWORD *)(v32 + 216) = 0u;
    *(_QWORD *)(v32 + 232) = 0;
    *(_DWORD *)(v32 + 240) = 1065353216;
    *(_QWORD *)v32 = &off_1E42707B8;
    *(_QWORD *)(v32 + 8) = 0x63E9758EF1034754;
    *(_QWORD *)(v32 + 248) = v23;
    v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v23 + 120), 0x63E9758EF1034754uLL, &v500);
    v34 = v33[3];
    v33[3] = v32;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v505 = 0x63E9758EF1034754;
    v506 = (uint64_t)"SceneComponents::LayerDataInfo<md::MapDataType::InjectedFeatures>]";
    v507 = 65;
    gdc::Registry::_registerStorageDataSignals(v23, 0x63E9758EF1034754, (uint64_t)&v505, (uint64_t *)(v32 + 104));
LABEL_37:
    v504 = v22;
    v35 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v32 + 32), (uint64_t)&v504);
    if ((v36 & 1) != 0)
    {
      v42 = *(char **)(v32 + 88);
      v41 = *(_QWORD *)(v32 + 96);
      if ((unint64_t)v42 >= v41)
      {
        v44 = *(char **)(v32 + 80);
        v45 = v42 - v44;
        if (v42 - v44 <= -3)
          abort();
        v46 = v45 >> 1;
        v47 = v41 - (_QWORD)v44;
        if (v47 <= (v45 >> 1) + 1)
          v48 = v46 + 1;
        else
          v48 = v47;
        if (v47 >= 0x7FFFFFFFFFFFFFFELL)
          v49 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          if (v49 < 0)
            goto LABEL_521;
          v50 = operator new(2 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[2 * v46];
        v52 = &v50[2 * v49];
        *v51 = 62;
        v43 = v51 + 1;
        if (v42 != v44)
        {
          v53 = v42 - v44 - 2;
          if (v53 < 0x1E)
            goto LABEL_529;
          if (v42 - v50 - (v45 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_529;
          v54 = (v53 >> 1) + 1;
          v55 = &v50[2 * v46 - 16];
          v56 = v42 - 16;
          v57 = v54 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v58 = *(_OWORD *)v56;
            *(v55 - 1) = *((_OWORD *)v56 - 1);
            *v55 = v58;
            v55 -= 2;
            v56 -= 32;
            v57 -= 16;
          }
          while (v57);
          v51 -= v54 & 0xFFFFFFFFFFFFFFF0;
          v42 -= 2 * (v54 & 0xFFFFFFFFFFFFFFF0);
          if (v54 != (v54 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_529:
            do
            {
              v59 = *((_WORD *)v42 - 1);
              v42 -= 2;
              *--v51 = v59;
            }
            while (v42 != v44);
          }
        }
        *(_QWORD *)(v32 + 80) = v51;
        *(_QWORD *)(v32 + 88) = v43;
        *(_QWORD *)(v32 + 96) = v52;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_WORD *)v42 = 62;
        v43 = v42 + 2;
      }
      *(_QWORD *)(v32 + 88) = v43;
      v38 = *(_QWORD **)(v32 + 248);
    }
    else
    {
      v37 = (_WORD *)(*(_QWORD *)(v32 + 80) + (((uint64_t)v35 - *(_QWORD *)(v32 + 56)) >> 2));
      *v37 = 62;
      v38 = *(_QWORD **)(v32 + 248);
      if (v37 != *(_WORD **)(v32 + 88))
      {
        v39 = *(_QWORD **)(v32 + 128);
        if (v39)
        {
          while (1)
          {
            v505 = (uint64_t)&v504;
            v506 = 1;
            v500 = (uint64_t)v38;
            v40 = v39[6];
            if (!v40)
              break;
            (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v500, &v505);
            v39 = (_QWORD *)*v39;
            if (!v39)
              goto LABEL_69;
          }
LABEL_516:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_517:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        goto LABEL_69;
      }
    }
    for (i = *(_QWORD **)(v32 + 176); i; i = (_QWORD *)*i)
    {
      v505 = (uint64_t)&v504;
      v506 = 1;
      v500 = (uint64_t)v38;
      v61 = i[6];
      if (!v61)
        goto LABEL_516;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v61 + 48))(v61, &v500, &v505);
    }
LABEL_69:
    v63 = *(_QWORD *)(a1 + 120);
    v62 = *(_QWORD *)(a1 + 128);
    v501 = 0;
    v502 = 0;
    v500 = (uint64_t)&v501;
    v64 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)62>>(v62);
    v503 = v63;
    v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v503);
    if ((v66 & 1) != 0)
    {
      v71 = v64[12];
      v72 = (uint64_t *)v64[11];
      if ((unint64_t)v72 >= v71)
      {
        v74 = v64[10];
        v75 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v72 - v74) >> 3);
        if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v74) >> 3);
        v77 = 2 * v76;
        if (2 * v76 <= v75 + 1)
          v77 = v75 + 1;
        if (v76 >= 0x555555555555555)
          v78 = 0xAAAAAAAAAAAAAAALL;
        else
          v78 = v77;
        v509 = v64 + 12;
        if (v78)
        {
          if (v78 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_521;
          v79 = (char *)operator new(24 * v78);
        }
        else
        {
          v79 = 0;
        }
        v83 = (uint64_t *)&v79[24 * v75];
        v505 = (uint64_t)v79;
        v506 = (uint64_t)v83;
        v507 = (uint64_t)v83;
        v508 = &v79[24 * v78];
        v83[1] = 0;
        v83[2] = 0;
        *v83 = (uint64_t)(v83 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v83, (_QWORD *)v500, &v501);
        v84 = v506;
        v73 = (uint64_t *)(v507 + 24);
        v85 = (char *)v64[10];
        v86 = (char *)v64[11];
        if (v86 == v85)
        {
          v64[10] = v506;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
        }
        else
        {
          v87 = 0;
          do
          {
            v88 = v84 + v87;
            *(_QWORD *)(v88 - 24) = *(_QWORD *)&v86[v87 - 24];
            v89 = &v86[v87 - 16];
            v90 = *(_QWORD *)v89;
            *(_QWORD *)(v84 + v87 - 16) = *(_QWORD *)v89;
            v91 = v84 + v87 - 16;
            v92 = *(_QWORD *)&v86[v87 - 8];
            *(_QWORD *)(v88 - 8) = v92;
            if (v92)
            {
              *(_QWORD *)(v90 + 16) = v91;
              *(_QWORD *)&v86[v87 - 24] = v89;
              *(_QWORD *)v89 = 0;
              *(_QWORD *)&v86[v87 - 8] = 0;
            }
            else
            {
              *(_QWORD *)(v88 - 24) = v91;
            }
            v87 -= 24;
          }
          while (&v86[v87] != v85);
          v93 = v84 + v87;
          v86 = (char *)v64[10];
          v94 = (char *)v64[11];
          v64[10] = v93;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
          if (v94 != v86)
          {
            do
            {
              v95 = v94 - 24;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v94 - 2));
              v94 = v95;
            }
            while (v95 != v86);
          }
        }
        if (v86)
          operator delete(v86);
      }
      else
      {
        v72[2] = 0;
        v72[1] = 0;
        *v72 = (uint64_t)(v72 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v72, (_QWORD *)v500, &v501);
        v73 = v72 + 3;
        v64[11] = (uint64_t)(v72 + 3);
      }
      v64[11] = (uint64_t)v73;
      v80 = v64[31];
    }
    else
    {
      v67 = v64[10] + 24 * (((uint64_t)v65 - v64[7]) >> 3);
      v68 = v67 + 8;
      std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v67 + 8));
      *(_QWORD *)v67 = v500;
      v69 = v501;
      *(_QWORD *)(v67 + 8) = v501;
      v70 = v502;
      *(_QWORD *)(v67 + 16) = v502;
      if (v70)
      {
        v69[2] = v68;
        v500 = (uint64_t)&v501;
        v501 = 0;
        v502 = 0;
      }
      else
      {
        *(_QWORD *)v67 = v68;
      }
      v80 = v64[31];
      if (v67 != v64[11])
      {
        for (j = (_QWORD *)v64[16]; j; j = (_QWORD *)*j)
        {
          v505 = (uint64_t)&v503;
          v506 = 1;
          v504 = v80;
          v82 = j[6];
          if (!v82)
            goto LABEL_517;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v82 + 48))(v82, &v504, &v505);
        }
LABEL_106:
        std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
        v99 = *(_QWORD *)(a1 + 120);
        v98 = *(_QWORD *)(a1 + 128);
        v501 = 0;
        v502 = 0;
        v500 = (uint64_t)&v501;
        v100 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>(v98);
        v503 = v99;
        v101 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v100 + 4, (uint64_t)&v503);
        if ((v102 & 1) != 0)
        {
          v107 = v100[12];
          v108 = (uint64_t *)v100[11];
          if ((unint64_t)v108 >= v107)
          {
            v110 = v100[10];
            v111 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v108 - v110) >> 3);
            if (v111 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v110) >> 3);
            v113 = 2 * v112;
            if (2 * v112 <= v111 + 1)
              v113 = v111 + 1;
            if (v112 >= 0x555555555555555)
              v114 = 0xAAAAAAAAAAAAAAALL;
            else
              v114 = v113;
            v509 = v100 + 12;
            if (v114)
            {
              if (v114 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_521;
              v115 = (char *)operator new(24 * v114);
            }
            else
            {
              v115 = 0;
            }
            v119 = (uint64_t *)&v115[24 * v111];
            v505 = (uint64_t)v115;
            v506 = (uint64_t)v119;
            v507 = (uint64_t)v119;
            v508 = &v115[24 * v114];
            v119[1] = 0;
            v119[2] = 0;
            *v119 = (uint64_t)(v119 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v119, (_QWORD *)v500, &v501);
            v120 = v506;
            v109 = (uint64_t *)(v507 + 24);
            v121 = (char *)v100[10];
            v122 = (char *)v100[11];
            if (v122 == v121)
            {
              v100[10] = v506;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
            }
            else
            {
              v123 = 0;
              do
              {
                v124 = v120 + v123;
                *(_QWORD *)(v124 - 24) = *(_QWORD *)&v122[v123 - 24];
                v125 = &v122[v123 - 16];
                v126 = *(_QWORD *)v125;
                *(_QWORD *)(v120 + v123 - 16) = *(_QWORD *)v125;
                v127 = v120 + v123 - 16;
                v128 = *(_QWORD *)&v122[v123 - 8];
                *(_QWORD *)(v124 - 8) = v128;
                if (v128)
                {
                  *(_QWORD *)(v126 + 16) = v127;
                  *(_QWORD *)&v122[v123 - 24] = v125;
                  *(_QWORD *)v125 = 0;
                  *(_QWORD *)&v122[v123 - 8] = 0;
                }
                else
                {
                  *(_QWORD *)(v124 - 24) = v127;
                }
                v123 -= 24;
              }
              while (&v122[v123] != v121);
              v129 = v120 + v123;
              v122 = (char *)v100[10];
              v130 = (char *)v100[11];
              v100[10] = v129;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
              if (v130 != v122)
              {
                do
                {
                  v131 = v130 - 24;
                  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v130 - 2));
                  v130 = v131;
                }
                while (v131 != v122);
              }
            }
            if (v122)
              operator delete(v122);
          }
          else
          {
            v108[2] = 0;
            v108[1] = 0;
            *v108 = (uint64_t)(v108 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v108, (_QWORD *)v500, &v501);
            v109 = v108 + 3;
            v100[11] = (uint64_t)(v108 + 3);
          }
          v100[11] = (uint64_t)v109;
          v116 = v100[31];
        }
        else
        {
          v103 = v100[10] + 24 * (((uint64_t)v101 - v100[7]) >> 3);
          v104 = v103 + 8;
          std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v103 + 8));
          *(_QWORD *)v103 = v500;
          v105 = v501;
          *(_QWORD *)(v103 + 8) = v501;
          v106 = v502;
          *(_QWORD *)(v103 + 16) = v502;
          if (v106)
          {
            v105[2] = v104;
            v500 = (uint64_t)&v501;
            v501 = 0;
            v502 = 0;
          }
          else
          {
            *(_QWORD *)v103 = v104;
          }
          v116 = v100[31];
          if (v103 != v100[11])
          {
            for (k = (_QWORD *)v100[16]; k; k = (_QWORD *)*k)
            {
              v505 = (uint64_t)&v503;
              v506 = 1;
              v504 = v116;
              v118 = k[6];
              if (!v118)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v118 + 48))(v118, &v504, &v505);
            }
LABEL_143:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v135 = *(_QWORD *)(a1 + 120);
            v134 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = (uint64_t)&v501;
            v136 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>(v134);
            v503 = v135;
            v137 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v136 + 4, (uint64_t)&v503);
            if ((v138 & 1) != 0)
            {
              v143 = v136[12];
              v144 = (uint64_t *)v136[11];
              if ((unint64_t)v144 >= v143)
              {
                v146 = v136[10];
                v147 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v144 - v146) >> 3);
                if (v147 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - v146) >> 3);
                v149 = 2 * v148;
                if (2 * v148 <= v147 + 1)
                  v149 = v147 + 1;
                if (v148 >= 0x555555555555555)
                  v150 = 0xAAAAAAAAAAAAAAALL;
                else
                  v150 = v149;
                v509 = v136 + 12;
                if (v150)
                {
                  if (v150 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_521;
                  v151 = (char *)operator new(24 * v150);
                }
                else
                {
                  v151 = 0;
                }
                v155 = (uint64_t *)&v151[24 * v147];
                v505 = (uint64_t)v151;
                v506 = (uint64_t)v155;
                v507 = (uint64_t)v155;
                v508 = &v151[24 * v150];
                v155[1] = 0;
                v155[2] = 0;
                *v155 = (uint64_t)(v155 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v155, (_QWORD *)v500, &v501);
                v156 = v506;
                v145 = (uint64_t *)(v507 + 24);
                v157 = (char *)v136[10];
                v158 = (char *)v136[11];
                if (v158 == v157)
                {
                  v136[10] = v506;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                }
                else
                {
                  v159 = 0;
                  do
                  {
                    v160 = v156 + v159;
                    *(_QWORD *)(v160 - 24) = *(_QWORD *)&v158[v159 - 24];
                    v161 = &v158[v159 - 16];
                    v162 = *(_QWORD *)v161;
                    *(_QWORD *)(v156 + v159 - 16) = *(_QWORD *)v161;
                    v163 = v156 + v159 - 16;
                    v164 = *(_QWORD *)&v158[v159 - 8];
                    *(_QWORD *)(v160 - 8) = v164;
                    if (v164)
                    {
                      *(_QWORD *)(v162 + 16) = v163;
                      *(_QWORD *)&v158[v159 - 24] = v161;
                      *(_QWORD *)v161 = 0;
                      *(_QWORD *)&v158[v159 - 8] = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v160 - 24) = v163;
                    }
                    v159 -= 24;
                  }
                  while (&v158[v159] != v157);
                  v165 = v156 + v159;
                  v158 = (char *)v136[10];
                  v166 = (char *)v136[11];
                  v136[10] = v165;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                  if (v166 != v158)
                  {
                    do
                    {
                      v167 = v166 - 24;
                      std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v166 - 2));
                      v166 = v167;
                    }
                    while (v167 != v158);
                  }
                }
                if (v158)
                  operator delete(v158);
              }
              else
              {
                v144[2] = 0;
                v144[1] = 0;
                *v144 = (uint64_t)(v144 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v144, (_QWORD *)v500, &v501);
                v145 = v144 + 3;
                v136[11] = (uint64_t)(v144 + 3);
              }
              v136[11] = (uint64_t)v145;
              v152 = v136[31];
            }
            else
            {
              v139 = v136[10] + 24 * (((uint64_t)v137 - v136[7]) >> 3);
              v140 = v139 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v139 + 8));
              *(_QWORD *)v139 = v500;
              v141 = v501;
              *(_QWORD *)(v139 + 8) = v501;
              v142 = v502;
              *(_QWORD *)(v139 + 16) = v502;
              if (v142)
              {
                v141[2] = v140;
                v500 = (uint64_t)&v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v139 = v140;
              }
              v152 = v136[31];
              if (v139 != v136[11])
              {
                v153 = (_QWORD *)v136[16];
                if (v153)
                {
                  while (1)
                  {
                    v505 = (uint64_t)&v503;
                    v506 = 1;
                    v504 = v152;
                    v154 = v153[6];
                    if (!v154)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v154 + 48))(v154, &v504, &v505);
                    v153 = (_QWORD *)*v153;
                    if (!v153)
                      goto LABEL_180;
                  }
                }
                goto LABEL_180;
              }
            }
            for (m = (_QWORD *)v136[22]; m; m = (_QWORD *)*m)
            {
              v505 = (uint64_t)&v503;
              v506 = 1;
              v504 = v152;
              v169 = m[6];
              if (!v169)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v169 + 48))(v169, &v504, &v505);
            }
LABEL_180:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v171 = *(_QWORD *)(a1 + 120);
            v170 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = (uint64_t)&v501;
            v172 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>(v170);
            v503 = v171;
            v173 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v172 + 4, (uint64_t)&v503);
            if ((v174 & 1) == 0)
            {
              v175 = v172[10] + 24 * (((uint64_t)v173 - v172[7]) >> 3);
              v176 = v175 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v175 + 8));
              *(_QWORD *)v175 = v500;
              v177 = v501;
              *(_QWORD *)(v175 + 8) = v501;
              v178 = v502;
              *(_QWORD *)(v175 + 16) = v502;
              if (v178)
              {
                v177[2] = v176;
                v500 = (uint64_t)&v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v175 = v176;
              }
              v188 = v172[31];
              if (v175 != v172[11])
              {
                v189 = (_QWORD *)v172[16];
                if (v189)
                {
                  while (1)
                  {
                    v505 = (uint64_t)&v503;
                    v506 = 1;
                    v504 = v188;
                    v190 = v189[6];
                    if (!v190)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v190 + 48))(v190, &v504, &v505);
                    v189 = (_QWORD *)*v189;
                    if (!v189)
                      goto LABEL_217;
                  }
                }
                goto LABEL_217;
              }
LABEL_214:
              for (n = (_QWORD *)v172[22]; n; n = (_QWORD *)*n)
              {
                v505 = (uint64_t)&v503;
                v506 = 1;
                v504 = v188;
                v205 = n[6];
                if (!v205)
                  goto LABEL_517;
                (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v205 + 48))(v205, &v504, &v505);
              }
LABEL_217:
              std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
              goto LABEL_218;
            }
            v179 = v172[12];
            v180 = (uint64_t *)v172[11];
            if ((unint64_t)v180 < v179)
            {
              v180[2] = 0;
              v180[1] = 0;
              *v180 = (uint64_t)(v180 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v180, (_QWORD *)v500, &v501);
              v181 = v180 + 3;
              v172[11] = (uint64_t)(v180 + 3);
LABEL_213:
              v172[11] = (uint64_t)v181;
              v188 = v172[31];
              goto LABEL_214;
            }
            v182 = v172[10];
            v183 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v180 - v182) >> 3);
            if (v183 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - v182) >> 3);
            v185 = 2 * v184;
            if (2 * v184 <= v183 + 1)
              v185 = v183 + 1;
            if (v184 >= 0x555555555555555)
              v186 = 0xAAAAAAAAAAAAAAALL;
            else
              v186 = v185;
            v509 = v172 + 12;
            if (!v186)
            {
              v187 = 0;
              goto LABEL_201;
            }
            if (v186 <= 0xAAAAAAAAAAAAAAALL)
            {
              v187 = (char *)operator new(24 * v186);
LABEL_201:
              v191 = (uint64_t *)&v187[24 * v183];
              v505 = (uint64_t)v187;
              v506 = (uint64_t)v191;
              v507 = (uint64_t)v191;
              v508 = &v187[24 * v186];
              v191[1] = 0;
              v191[2] = 0;
              *v191 = (uint64_t)(v191 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v191, (_QWORD *)v500, &v501);
              v192 = v506;
              v181 = (uint64_t *)(v507 + 24);
              v193 = (char *)v172[10];
              v194 = (char *)v172[11];
              if (v194 == v193)
              {
                v172[10] = v506;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
              }
              else
              {
                v195 = 0;
                do
                {
                  v196 = v192 + v195;
                  *(_QWORD *)(v196 - 24) = *(_QWORD *)&v194[v195 - 24];
                  v197 = &v194[v195 - 16];
                  v198 = *(_QWORD *)v197;
                  *(_QWORD *)(v192 + v195 - 16) = *(_QWORD *)v197;
                  v199 = v192 + v195 - 16;
                  v200 = *(_QWORD *)&v194[v195 - 8];
                  *(_QWORD *)(v196 - 8) = v200;
                  if (v200)
                  {
                    *(_QWORD *)(v198 + 16) = v199;
                    *(_QWORD *)&v194[v195 - 24] = v197;
                    *(_QWORD *)v197 = 0;
                    *(_QWORD *)&v194[v195 - 8] = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v196 - 24) = v199;
                  }
                  v195 -= 24;
                }
                while (&v194[v195] != v193);
                v201 = v192 + v195;
                v194 = (char *)v172[10];
                v202 = (char *)v172[11];
                v172[10] = v201;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
                if (v202 != v194)
                {
                  do
                  {
                    v203 = v202 - 24;
                    std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v202 - 2));
                    v202 = v203;
                  }
                  while (v203 != v194);
                }
              }
              if (v194)
                operator delete(v194);
              goto LABEL_213;
            }
LABEL_521:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
        }
        v132 = (_QWORD *)v100[22];
        if (v132)
        {
          while (1)
          {
            v505 = (uint64_t)&v503;
            v506 = 1;
            v504 = v116;
            v133 = v132[6];
            if (!v133)
              goto LABEL_517;
            (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v133 + 48))(v133, &v504, &v505);
            v132 = (_QWORD *)*v132;
            if (!v132)
              goto LABEL_143;
          }
        }
        goto LABEL_143;
      }
    }
    v96 = (_QWORD *)v64[22];
    if (v96)
    {
      while (1)
      {
        v505 = (uint64_t)&v503;
        v506 = 1;
        v504 = v80;
        v97 = v96[6];
        if (!v97)
          goto LABEL_517;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v97 + 48))(v97, &v504, &v505);
        v96 = (_QWORD *)*v96;
        if (!v96)
          goto LABEL_106;
      }
    }
    goto LABEL_106;
  }
LABEL_218:
  v499 = a1;
  v206 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)62>>(v19);
  v207 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)62>>(v19);
  v208 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>(v19);
  v209 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>(v19);
  v210 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>(v19);
  v211 = (_QWORD *)v210;
  v212 = v208 + 4;
  v213 = v209 + 4;
  v214 = v210 + 32;
  v216 = v206[7];
  v215 = v206[8];
  if (v207[8] - v207[7] >= (unint64_t)(v215 - v216))
    v217 = v206 + 4;
  else
    v217 = v207 + 4;
  if (v208[8] - v208[7] < v217[4] - v217[3])
    v217 = v208 + 4;
  if (v209[8] - v209[7] < v217[4] - v217[3])
    v217 = v209 + 4;
  if (*(_QWORD *)(v210 + 64) - *(_QWORD *)(v210 + 56) >= v217[4] - v217[3])
    v218 = v217;
  else
    v218 = (_QWORD *)(v210 + 32);
  if (v206 + 4 == v218)
  {
    v495 = v210 + 32;
    v505 = v498;
    v506 = v499;
    while (v216 != v215)
    {
      v220 = *(unsigned int *)(v216 + 4);
      v221 = v220 >> 7;
      v222 = v207[4];
      v223 = (v207[5] - v222) >> 3;
      if (v220 >> 7 < v223)
      {
        v224 = *(_QWORD *)(v222 + 8 * v221);
        if (v224)
        {
          v225 = v220 & 0x7F;
          v226 = *(unsigned __int16 *)(v224 + 2 * v225);
          v227 = v207[7];
          v228 = v207[8];
          v229 = (v228 - v227) >> 3;
          if (v229 > v226)
          {
            v230 = v227 + 8 * v226;
            if (v230 != v228 && *(_DWORD *)(v230 + 4) == (_DWORD)v220)
            {
              v232 = v208[4];
              v233 = (v208[5] - v232) >> 3;
              if (v221 < v233)
              {
                v234 = *(_QWORD *)(v232 + 8 * v221);
                if (v234)
                {
                  v235 = *(unsigned __int16 *)(v234 + 2 * v225);
                  v237 = v208[7];
                  v236 = v208[8];
                  v238 = (v236 - v237) >> 3;
                  if (v238 > v235)
                  {
                    v239 = v237 + 8 * v235;
                    if (v239 != v236 && *(_DWORD *)(v239 + 4) == (_DWORD)v220)
                    {
                      v241 = v209[4];
                      v242 = (v209[5] - v241) >> 3;
                      if (v221 < v242)
                      {
                        v243 = *(_QWORD *)(v241 + 8 * v221);
                        if (v243)
                        {
                          v244 = *(unsigned __int16 *)(v243 + 2 * v225);
                          v245 = v209[7];
                          v496 = v213;
                          v494 = v209[8];
                          v493 = (v494 - v245) >> 3;
                          if (v493 > v244)
                          {
                            v246 = v245 + 8 * v244;
                            if (v246 != v494 && *(_DWORD *)(v246 + 4) == (_DWORD)v220)
                            {
                              v492 = v211[4];
                              v491 = (v211[5] - v492) >> 3;
                              if (v221 < v491)
                              {
                                v248 = *(_QWORD *)(v492 + 8 * v221);
                                if (v248)
                                {
                                  v249 = *(unsigned __int16 *)(v248 + 2 * v225);
                                  v489 = v211[7];
                                  v490 = v211[8];
                                  if ((v490 - v489) >> 3 > v249)
                                  {
                                    v250 = v489 + 8 * v249;
                                    if (v250 != v490 && *(_DWORD *)(v250 + 4) == (_DWORD)v220)
                                    {
                                      v251 = *(_QWORD *)v216;
                                      v252 = HIDWORD(*(_QWORD *)v216);
                                      v253 = *(_QWORD *)v216 >> 39;
                                      if (v253 < v223
                                        && (v254 = *(_QWORD *)(v222 + 8 * v253)) != 0
                                        && (v255 = *(unsigned __int16 *)(v254 + 2 * (HIDWORD(v251) & 0x7F)), v229 > v255)
                                        && (v256 = v227 + 8 * v255, v256 != v228)
                                        && *(_DWORD *)(v256 + 4) == (_DWORD)v252)
                                      {
                                        v257 = (uint64_t *)(v207[10] + 24 * v255);
                                      }
                                      else
                                      {
                                        v257 = (uint64_t *)v207[11];
                                      }
                                      if (v253 < v233
                                        && (v258 = *(_QWORD *)(v232 + 8 * v253)) != 0
                                        && (v259 = *(unsigned __int16 *)(v258 + 2 * (HIDWORD(v251) & 0x7F)), v238 > v259)
                                        && (v260 = v237 + 8 * v259, v260 != v236)
                                        && *(_DWORD *)(v260 + 4) == (_DWORD)v252)
                                      {
                                        v261 = (uint64_t *)(v208[10] + 24 * v259);
                                      }
                                      else
                                      {
                                        v261 = (uint64_t *)v208[11];
                                      }
                                      v262 = HIDWORD(*(_QWORD *)v216);
                                      if (v253 < v242
                                        && (v263 = *(_QWORD *)(v241 + 8 * v253)) != 0
                                        && (v264 = *(unsigned __int16 *)(v263 + 2 * (HIDWORD(v251) & 0x7F)), v493 > v264)
                                        && (v265 = v245 + 8 * v264, v265 != v494)
                                        && *(_DWORD *)(v265 + 4) == (_DWORD)v262)
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)(v209[10] + 24 * v264);
                                      }
                                      else
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)v209[11];
                                      }
                                      if (v253 < v491
                                        && (v268 = *(_QWORD *)(v492 + 8 * v253)) != 0
                                        && (v269 = *(unsigned __int16 *)(v268 + 2 * (HIDWORD(v251) & 0x7F)), v266 > v269)
                                        && (v270 = v489 + 8 * v269, v270 != v490)
                                        && *(_DWORD *)(v270 + 4) == (_DWORD)v262)
                                      {
                                        v219 = v211[10] + 24 * v269;
                                      }
                                      else
                                      {
                                        v219 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()((uint64_t)&v505, v251, v257, v261, v267, v219);
                                      v213 = v496;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v216 += 8;
    }
    v214 = v495;
  }
  v271 = v498;
  if (v207 + 4 != v218)
  {
    if (v212 != v218)
      goto LABEL_294;
LABEL_351:
    v326 = v213;
    v505 = v271;
    v506 = v499;
    v327 = v208[7];
    v328 = v208[8];
    if (v327 != v328)
    {
      v329 = (uint64_t *)v208[10];
      do
      {
        v331 = *(unsigned int *)(v327 + 4);
        v332 = v331 >> 7;
        v333 = v206[4];
        if (v331 >> 7 < (v206[5] - v333) >> 3)
        {
          v334 = *(_QWORD *)(v333 + 8 * v332);
          if (v334)
          {
            v335 = v331 & 0x7F;
            v336 = *(unsigned __int16 *)(v334 + 2 * v335);
            v338 = v206[7];
            v337 = v206[8];
            if (v336 < (v337 - v338) >> 3)
            {
              v339 = v338 + 8 * v336;
              if (v339 != v337 && *(_DWORD *)(v339 + 4) == (_DWORD)v331)
              {
                v341 = v207[4];
                v342 = (v207[5] - v341) >> 3;
                if (v332 < v342)
                {
                  v343 = *(_QWORD *)(v341 + 8 * v332);
                  if (v343)
                  {
                    v344 = *(unsigned __int16 *)(v343 + 2 * v335);
                    v346 = v207[7];
                    v345 = v207[8];
                    v347 = (v345 - v346) >> 3;
                    if (v347 > v344)
                    {
                      v348 = v346 + 8 * v344;
                      if (v348 != v345 && *(_DWORD *)(v348 + 4) == (_DWORD)v331)
                      {
                        v350 = v209[4];
                        v351 = (v209[5] - v350) >> 3;
                        if (v332 < v351)
                        {
                          v352 = *(_QWORD *)(v350 + 8 * v332);
                          if (v352)
                          {
                            v353 = *(unsigned __int16 *)(v352 + 2 * v335);
                            v355 = v209[7];
                            v354 = v209[8];
                            v356 = (v354 - v355) >> 3;
                            if (v356 > v353)
                            {
                              v357 = v355 + 8 * v353;
                              if (v357 != v354 && *(_DWORD *)(v357 + 4) == (_DWORD)v331)
                              {
                                v359 = v211[4];
                                v360 = (v211[5] - v359) >> 3;
                                if (v332 < v360)
                                {
                                  v361 = *(_QWORD *)(v359 + 8 * v332);
                                  if (v361)
                                  {
                                    v362 = *(unsigned __int16 *)(v361 + 2 * v335);
                                    v364 = v211[7];
                                    v363 = v211[8];
                                    v365 = (v363 - v364) >> 3;
                                    if (v365 > v362)
                                    {
                                      v366 = v364 + 8 * v362;
                                      if (v366 != v363 && *(_DWORD *)(v366 + 4) == (_DWORD)v331)
                                      {
                                        v367 = *(_QWORD *)v327;
                                        v368 = HIDWORD(*(_QWORD *)v327);
                                        v369 = *(_QWORD *)v327 >> 39;
                                        if (v369 < v342
                                          && (v370 = *(_QWORD *)(v341 + 8 * v369)) != 0
                                          && (v371 = *(unsigned __int16 *)(v370 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v347 > v371)
                                          && (v372 = v346 + 8 * v371, v372 != v345)
                                          && *(_DWORD *)(v372 + 4) == (_DWORD)v368)
                                        {
                                          v373 = (uint64_t *)(v207[10] + 24 * v371);
                                        }
                                        else
                                        {
                                          v373 = (uint64_t *)v207[11];
                                        }
                                        if (v369 < v351
                                          && (v374 = *(_QWORD *)(v350 + 8 * v369)) != 0
                                          && (v375 = *(unsigned __int16 *)(v374 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v356 > v375)
                                          && (v376 = v355 + 8 * v375, v376 != v354)
                                          && *(_DWORD *)(v376 + 4) == (_DWORD)v368)
                                        {
                                          v377 = (uint64_t *)(v209[10] + 24 * v375);
                                        }
                                        else
                                        {
                                          v377 = (uint64_t *)v209[11];
                                        }
                                        if (v369 < v360
                                          && (v378 = *(_QWORD *)(v359 + 8 * v369)) != 0
                                          && (v379 = *(unsigned __int16 *)(v378 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v365 > v379)
                                          && (v380 = v364 + 8 * v379, v380 != v363)
                                          && *(_DWORD *)(v380 + 4) == (_DWORD)v368)
                                        {
                                          v330 = v211[10] + 24 * v379;
                                        }
                                        else
                                        {
                                          v330 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()((uint64_t)&v505, v367, v373, v329, v377, v330);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v329 += 3;
        v327 += 8;
      }
      while (v327 != v328);
    }
    if (v326 != v218)
      goto LABEL_460;
    goto LABEL_406;
  }
  v497 = v213;
  v505 = v498;
  v506 = v499;
  v272 = v207[7];
  v273 = v207[8];
  if (v272 != v273)
  {
    v274 = (uint64_t *)v207[10];
    do
    {
      v276 = *(unsigned int *)(v272 + 4);
      v277 = v276 >> 7;
      v278 = v206[4];
      if (v276 >> 7 < (v206[5] - v278) >> 3)
      {
        v279 = *(_QWORD *)(v278 + 8 * v277);
        if (v279)
        {
          v280 = v276 & 0x7F;
          v281 = *(unsigned __int16 *)(v279 + 2 * v280);
          v283 = v206[7];
          v282 = v206[8];
          if (v281 < (v282 - v283) >> 3)
          {
            v284 = v283 + 8 * v281;
            if (v284 != v282 && *(_DWORD *)(v284 + 4) == (_DWORD)v276)
            {
              v286 = v208[4];
              v287 = (v208[5] - v286) >> 3;
              if (v277 < v287)
              {
                v288 = *(_QWORD *)(v286 + 8 * v277);
                if (v288)
                {
                  v289 = *(unsigned __int16 *)(v288 + 2 * v280);
                  v291 = v208[7];
                  v290 = v208[8];
                  v292 = (v290 - v291) >> 3;
                  if (v292 > v289)
                  {
                    v293 = v291 + 8 * v289;
                    if (v293 != v290 && *(_DWORD *)(v293 + 4) == (_DWORD)v276)
                    {
                      v295 = v209[4];
                      v296 = (v209[5] - v295) >> 3;
                      if (v277 < v296)
                      {
                        v297 = *(_QWORD *)(v295 + 8 * v277);
                        if (v297)
                        {
                          v298 = *(unsigned __int16 *)(v297 + 2 * v280);
                          v300 = v209[7];
                          v299 = v209[8];
                          v301 = (v299 - v300) >> 3;
                          if (v301 > v298)
                          {
                            v302 = v300 + 8 * v298;
                            if (v302 != v299 && *(_DWORD *)(v302 + 4) == (_DWORD)v276)
                            {
                              v304 = v211[4];
                              v305 = (v211[5] - v304) >> 3;
                              if (v277 < v305)
                              {
                                v306 = *(_QWORD *)(v304 + 8 * v277);
                                if (v306)
                                {
                                  v307 = *(unsigned __int16 *)(v306 + 2 * v280);
                                  v309 = v211[7];
                                  v308 = v211[8];
                                  v310 = (v308 - v309) >> 3;
                                  if (v310 > v307)
                                  {
                                    v311 = v309 + 8 * v307;
                                    if (v311 != v308 && *(_DWORD *)(v311 + 4) == (_DWORD)v276)
                                    {
                                      v312 = *(_QWORD *)v272;
                                      v313 = HIDWORD(*(_QWORD *)v272);
                                      v314 = *(_QWORD *)v272 >> 39;
                                      if (v314 < v287
                                        && (v315 = *(_QWORD *)(v286 + 8 * v314)) != 0
                                        && (v316 = *(unsigned __int16 *)(v315 + 2 * (HIDWORD(v312) & 0x7F)), v292 > v316)
                                        && (v317 = v291 + 8 * v316, v317 != v290)
                                        && *(_DWORD *)(v317 + 4) == (_DWORD)v313)
                                      {
                                        v318 = (uint64_t *)(v208[10] + 24 * v316);
                                      }
                                      else
                                      {
                                        v318 = (uint64_t *)v208[11];
                                      }
                                      if (v314 < v296
                                        && (v319 = *(_QWORD *)(v295 + 8 * v314)) != 0
                                        && (v320 = *(unsigned __int16 *)(v319 + 2 * (HIDWORD(v312) & 0x7F)), v301 > v320)
                                        && (v321 = v300 + 8 * v320, v321 != v299)
                                        && *(_DWORD *)(v321 + 4) == (_DWORD)v313)
                                      {
                                        v322 = (uint64_t *)(v209[10] + 24 * v320);
                                      }
                                      else
                                      {
                                        v322 = (uint64_t *)v209[11];
                                      }
                                      if (v314 < v305
                                        && (v323 = *(_QWORD *)(v304 + 8 * v314)) != 0
                                        && (v324 = *(unsigned __int16 *)(v323 + 2 * (HIDWORD(v312) & 0x7F)), v310 > v324)
                                        && (v325 = v309 + 8 * v324, v325 != v308)
                                        && *(_DWORD *)(v325 + 4) == (_DWORD)v313)
                                      {
                                        v275 = v211[10] + 24 * v324;
                                      }
                                      else
                                      {
                                        v275 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()((uint64_t)&v505, v312, v274, v318, v322, v275);
                                      v271 = v498;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v274 += 3;
      v272 += 8;
    }
    while (v272 != v273);
  }
  v213 = v497;
  if (v212 == v218)
    goto LABEL_351;
LABEL_294:
  if (v213 == v218)
  {
LABEL_406:
    v505 = v271;
    v506 = v499;
    v381 = v209[7];
    v382 = v209[8];
    if (v381 != v382)
    {
      v383 = (uint64_t *)v209[10];
      do
      {
        v385 = *(unsigned int *)(v381 + 4);
        v386 = v385 >> 7;
        v387 = v206[4];
        if (v385 >> 7 < (v206[5] - v387) >> 3)
        {
          v388 = *(_QWORD *)(v387 + 8 * v386);
          if (v388)
          {
            v389 = v385 & 0x7F;
            v390 = *(unsigned __int16 *)(v388 + 2 * v389);
            v392 = v206[7];
            v391 = v206[8];
            if (v390 < (v391 - v392) >> 3)
            {
              v393 = v392 + 8 * v390;
              if (v393 != v391 && *(_DWORD *)(v393 + 4) == (_DWORD)v385)
              {
                v395 = v207[4];
                v396 = (v207[5] - v395) >> 3;
                if (v386 < v396)
                {
                  v397 = *(_QWORD *)(v395 + 8 * v386);
                  if (v397)
                  {
                    v398 = *(unsigned __int16 *)(v397 + 2 * v389);
                    v400 = v207[7];
                    v399 = v207[8];
                    v401 = (v399 - v400) >> 3;
                    if (v401 > v398)
                    {
                      v402 = v400 + 8 * v398;
                      if (v402 != v399 && *(_DWORD *)(v402 + 4) == (_DWORD)v385)
                      {
                        v404 = v208[4];
                        v405 = (v208[5] - v404) >> 3;
                        if (v386 < v405)
                        {
                          v406 = *(_QWORD *)(v404 + 8 * v386);
                          if (v406)
                          {
                            v407 = *(unsigned __int16 *)(v406 + 2 * v389);
                            v409 = v208[7];
                            v408 = v208[8];
                            v410 = (v408 - v409) >> 3;
                            if (v410 > v407)
                            {
                              v411 = v409 + 8 * v407;
                              if (v411 != v408 && *(_DWORD *)(v411 + 4) == (_DWORD)v385)
                              {
                                v413 = v211[4];
                                v414 = (v211[5] - v413) >> 3;
                                if (v386 < v414)
                                {
                                  v415 = *(_QWORD *)(v413 + 8 * v386);
                                  if (v415)
                                  {
                                    v416 = *(unsigned __int16 *)(v415 + 2 * v389);
                                    v418 = v211[7];
                                    v417 = v211[8];
                                    v419 = (v417 - v418) >> 3;
                                    if (v419 > v416)
                                    {
                                      v420 = v418 + 8 * v416;
                                      if (v420 != v417 && *(_DWORD *)(v420 + 4) == (_DWORD)v385)
                                      {
                                        v421 = *(_QWORD *)v381;
                                        v422 = HIDWORD(*(_QWORD *)v381);
                                        v423 = *(_QWORD *)v381 >> 39;
                                        if (v423 < v396
                                          && (v424 = *(_QWORD *)(v395 + 8 * v423)) != 0
                                          && (v425 = *(unsigned __int16 *)(v424 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v401 > v425)
                                          && (v426 = v400 + 8 * v425, v426 != v399)
                                          && *(_DWORD *)(v426 + 4) == (_DWORD)v422)
                                        {
                                          v427 = (uint64_t *)(v207[10] + 24 * v425);
                                        }
                                        else
                                        {
                                          v427 = (uint64_t *)v207[11];
                                        }
                                        if (v423 < v405
                                          && (v428 = *(_QWORD *)(v404 + 8 * v423)) != 0
                                          && (v429 = *(unsigned __int16 *)(v428 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v410 > v429)
                                          && (v430 = v409 + 8 * v429, v430 != v408)
                                          && *(_DWORD *)(v430 + 4) == (_DWORD)v422)
                                        {
                                          v431 = (uint64_t *)(v208[10] + 24 * v429);
                                        }
                                        else
                                        {
                                          v431 = (uint64_t *)v208[11];
                                        }
                                        if (v423 < v414
                                          && (v432 = *(_QWORD *)(v413 + 8 * v423)) != 0
                                          && (v433 = *(unsigned __int16 *)(v432 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v419 > v433)
                                          && (v434 = v418 + 8 * v433, v434 != v417)
                                          && *(_DWORD *)(v434 + 4) == (_DWORD)v422)
                                        {
                                          v384 = v211[10] + 24 * v433;
                                        }
                                        else
                                        {
                                          v384 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()((uint64_t)&v505, v421, v427, v431, v383, v384);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v383 += 3;
        v381 += 8;
      }
      while (v381 != v382);
    }
  }
LABEL_460:
  if ((_QWORD *)v214 == v218)
  {
    v505 = v271;
    v506 = v499;
    v435 = v211[7];
    v436 = v211[8];
    if (v435 != v436)
    {
      v437 = v211[10];
      do
      {
        v439 = *(unsigned int *)(v435 + 4);
        v440 = v439 >> 7;
        v441 = v206[4];
        if (v439 >> 7 < (v206[5] - v441) >> 3)
        {
          v442 = *(_QWORD *)(v441 + 8 * v440);
          if (v442)
          {
            v443 = v439 & 0x7F;
            v444 = *(unsigned __int16 *)(v442 + 2 * v443);
            v446 = v206[7];
            v445 = v206[8];
            if (v444 < (v445 - v446) >> 3)
            {
              v447 = v446 + 8 * v444;
              if (v447 != v445 && *(_DWORD *)(v447 + 4) == (_DWORD)v439)
              {
                v449 = v207[4];
                v450 = (v207[5] - v449) >> 3;
                if (v440 < v450)
                {
                  v451 = *(_QWORD *)(v449 + 8 * v440);
                  if (v451)
                  {
                    v452 = *(unsigned __int16 *)(v451 + 2 * v443);
                    v454 = v207[7];
                    v453 = v207[8];
                    v455 = (v453 - v454) >> 3;
                    if (v455 > v452)
                    {
                      v456 = v454 + 8 * v452;
                      if (v456 != v453 && *(_DWORD *)(v456 + 4) == (_DWORD)v439)
                      {
                        v458 = v208[4];
                        v459 = (v208[5] - v458) >> 3;
                        if (v440 < v459)
                        {
                          v460 = *(_QWORD *)(v458 + 8 * v440);
                          if (v460)
                          {
                            v461 = *(unsigned __int16 *)(v460 + 2 * v443);
                            v463 = v208[7];
                            v462 = v208[8];
                            v464 = (v462 - v463) >> 3;
                            if (v464 > v461)
                            {
                              v465 = v463 + 8 * v461;
                              if (v465 != v462 && *(_DWORD *)(v465 + 4) == (_DWORD)v439)
                              {
                                v467 = v209[4];
                                v468 = (v209[5] - v467) >> 3;
                                if (v440 < v468)
                                {
                                  v469 = *(_QWORD *)(v467 + 8 * v440);
                                  if (v469)
                                  {
                                    v470 = *(unsigned __int16 *)(v469 + 2 * v443);
                                    v472 = v209[7];
                                    v471 = v209[8];
                                    v473 = (v471 - v472) >> 3;
                                    if (v473 > v470)
                                    {
                                      v474 = v472 + 8 * v470;
                                      if (v474 != v471 && *(_DWORD *)(v474 + 4) == (_DWORD)v439)
                                      {
                                        v475 = *(_QWORD *)v435;
                                        v476 = HIDWORD(*(_QWORD *)v435);
                                        v477 = *(_QWORD *)v435 >> 39;
                                        if (v477 < v450
                                          && (v478 = *(_QWORD *)(v449 + 8 * v477)) != 0
                                          && (v479 = *(unsigned __int16 *)(v478 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v455 > v479)
                                          && (v480 = v454 + 8 * v479, v480 != v453)
                                          && *(_DWORD *)(v480 + 4) == (_DWORD)v476)
                                        {
                                          v481 = (uint64_t *)(v207[10] + 24 * v479);
                                        }
                                        else
                                        {
                                          v481 = (uint64_t *)v207[11];
                                        }
                                        if (v477 < v459
                                          && (v482 = *(_QWORD *)(v458 + 8 * v477)) != 0
                                          && (v483 = *(unsigned __int16 *)(v482 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v464 > v483)
                                          && (v484 = v463 + 8 * v483, v484 != v462)
                                          && *(_DWORD *)(v484 + 4) == (_DWORD)v476)
                                        {
                                          v485 = (uint64_t *)(v208[10] + 24 * v483);
                                        }
                                        else
                                        {
                                          v485 = (uint64_t *)v208[11];
                                        }
                                        if (v477 < v468
                                          && (v486 = *(_QWORD *)(v467 + 8 * v477)) != 0
                                          && (v487 = *(unsigned __int16 *)(v486 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v473 > v487)
                                          && (v488 = v472 + 8 * v487, v488 != v471)
                                          && *(_DWORD *)(v488 + 4) == (_DWORD)v476)
                                        {
                                          v438 = (uint64_t *)(v209[10] + 24 * v487);
                                        }
                                        else
                                        {
                                          v438 = (uint64_t *)v209[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()((uint64_t)&v505, v475, v481, v485, v438, v437);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v437 += 24;
        v435 += 8;
      }
      while (v435 != v436);
    }
  }
}

void sub_19F650ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _QWORD **v17;
  va_list va;

  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x394E7A690FBC8B4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x394E7A690FBC8B4;
      if (*(_QWORD *)&v3 <= 0x394E7A690FBC8B4uLL)
        v5 = 0x394E7A690FBC8B4uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x394E7A690FBC8B4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x394E7A690FBC8B4)
            {
              if (v7[2] == 0x394E7A690FBC8B4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x394E7A690FBC8B4)
          {
            if (v7[2] == 0x394E7A690FBC8B4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidEnterView<md::MapDataType::InjectedFeatures>]";
  *(_QWORD *)(v11 + 24) = 73;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270C38;
  *(_QWORD *)(v11 + 8) = 0x394E7A690FBC8B4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x394E7A690FBC8B4uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x394E7A690FBC8B4;
  v15[1] = "SceneComponents::LayerDataDidEnterView<md::MapDataType::InjectedFeatures>]";
  v15[2] = 73;
  gdc::Registry::_registerStorageDataSignals(a1, 0x394E7A690FBC8B4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F65127C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF23C21D2B4D31454;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF23C21D2B4D31454;
      if (*(_QWORD *)&v3 <= 0xF23C21D2B4D31454)
        v5 = 0xF23C21D2B4D31454 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF23C21D2B4D31454;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF23C21D2B4D31454)
            {
              if (v7[2] == 0xF23C21D2B4D31454)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF23C21D2B4D31454)
          {
            if (v7[2] == 0xF23C21D2B4D31454)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidExitView<md::MapDataType::InjectedFeatures>]";
  *(_QWORD *)(v11 + 24) = 72;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270AB8;
  *(_QWORD *)(v11 + 8) = 0xF23C21D2B4D31454;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF23C21D2B4D31454, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF23C21D2B4D31454;
  v15[1] = "SceneComponents::LayerDataDidExitView<md::MapDataType::InjectedFeatures>]";
  v15[2] = 72;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF23C21D2B4D31454, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6514A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6CB84C03E8A0D4ABLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6CB84C03E8A0D4ABLL;
      if (*(_QWORD *)&v3 <= 0x6CB84C03E8A0D4ABuLL)
        v5 = 0x6CB84C03E8A0D4ABuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6CB84C03E8A0D4ABLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6CB84C03E8A0D4ABLL)
            {
              if (v7[2] == 0x6CB84C03E8A0D4ABLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6CB84C03E8A0D4ABLL)
          {
            if (v7[2] == 0x6CB84C03E8A0D4ABLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataExitingView<md::MapDataType::InjectedFeatures>]";
  *(_QWORD *)(v11 + 24) = 72;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270B78;
  *(_QWORD *)(v11 + 8) = 0x6CB84C03E8A0D4ABLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6CB84C03E8A0D4ABuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6CB84C03E8A0D4ABLL;
  v15[1] = "SceneComponents::LayerDataExitingView<md::MapDataType::InjectedFeatures>]";
  v15[2] = 72;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6CB84C03E8A0D4ABLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6516CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x40977549DE128CF9;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x40977549DE128CF9;
      if (*(_QWORD *)&v3 <= 0x40977549DE128CF9uLL)
        v5 = 0x40977549DE128CF9uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x40977549DE128CF9;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x40977549DE128CF9)
            {
              if (v7[2] == 0x40977549DE128CF9)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x40977549DE128CF9)
          {
            if (v7[2] == 0x40977549DE128CF9)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataPreviousInView<md::MapDataType::InjectedFeatures>]";
  *(_QWORD *)(v11 + 24) = 75;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270DB8;
  *(_QWORD *)(v11 + 8) = 0x40977549DE128CF9;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x40977549DE128CF9uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x40977549DE128CF9;
  v15[1] = "SceneComponents::LayerDataPreviousInView<md::MapDataType::InjectedFeatures>]";
  v15[2] = 75;
  gdc::Registry::_registerStorageDataSignals(a1, 0x40977549DE128CF9, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6518F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  unint64_t v20;
  unsigned __int8 v21;
  _WORD *v22;
  _WORD *v23;
  uint64_t *v24;
  _WORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  _BOOL4 v33;
  _QWORD *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _BOOL4 v53;
  uint64_t *v54;
  uint64_t *v55;
  _BOOL4 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;

  v8 = a4;
  v9 = (uint64_t)a3;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  v15 = (_QWORD **)(a3 + 1);
  v14 = a3[1];
  v16 = a4 + 1;
  v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2])
    v18 = (uint64_t *)(a3[1] + 16);
  else
    v18 = a3;
  *v18 = (uint64_t)v15;
  v19 = (uint64_t **)(*v16 + 16);
  if (!v17)
    v19 = (uint64_t **)a4;
  *v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(_QWORD *)v9 = v15;
  *(_QWORD *)(v9 + 16) = 0;
  *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a6 + 8));
  *(_QWORD *)a6 = a6 + 8;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v20 = **(_QWORD **)a1;
  if ((v21 & 1) == 0)
  {
LABEL_152:
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
  }
  v22 = *(_WORD **)(v20 + 48);
  v23 = *(_WORD **)(v20 + 56);
  v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v22 != v23)
  {
    v25 = *(_WORD **)(v20 + 48);
    while (*v25 != 62)
    {
      v25 += 16;
      if (v25 == v23)
        goto LABEL_18;
    }
    if (v25 == v23)
    {
      v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v22 != 62)
      {
        v22 += 16;
        if (v22 == v23)
        {
          v22 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      v24 = (uint64_t *)(v22 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (_QWORD *)*v24, v24 + 1);
  v20 = *(_QWORD *)v9;
  v26 = (uint64_t *)*v8;
  v27 = (uint64_t *)*a5;
  *(_QWORD *)&v94 = a5;
  *((_QWORD *)&v94 + 1) = v27;
  while ((_QWORD **)v20 != v15)
  {
    if (v26 == v16)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, v20 + 32);
        v44 = *(_QWORD **)(v20 + 8);
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = *(_QWORD **)(v20 + 16);
            v41 = *v45 == v20;
            v20 = (unint64_t)v45;
          }
          while (!v41);
        }
        v20 = (unint64_t)v45;
      }
      while (v45 != v15);
      break;
    }
    v28 = *(_QWORD *)(v20 + 32);
    v29 = *(unsigned __int8 *)(v20 + 48);
    v30 = (char)v29;
    v31 = *((unsigned __int8 *)v26 + 48);
    v32 = v26[4];
    if (v29 == v31)
      v33 = v28 < v32;
    else
      v33 = (char)v29 < (char)v31;
    if (v33)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, v20 + 32);
      v34 = *(_QWORD **)(v20 + 8);
      if (v34)
      {
        do
        {
          v20 = (unint64_t)v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = v20;
          v20 = *(_QWORD *)(v20 + 16);
        }
        while (*(_QWORD *)v20 != v35);
      }
    }
    else
    {
      v36 = v32 < v28;
      if (v30 != (char)v31)
        v36 = (char)v31 < v30;
      if (v36)
      {
        v37 = (uint64_t *)v26[1];
        if (v37)
        {
          do
          {
            v26 = v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v38);
        }
      }
      else
      {
        v39 = *(_QWORD **)(v20 + 8);
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = *(_QWORD **)(v20 + 16);
            v41 = *v40 == v20;
            v20 = (unint64_t)v40;
          }
          while (!v41);
        }
        v42 = (uint64_t *)v26[1];
        if (v42)
        {
          do
          {
            v26 = v42;
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v43);
        }
        v20 = (unint64_t)v40;
      }
    }
  }
  v8 = (uint64_t *)*v8;
  v46 = *(_QWORD *)v9;
  v47 = *(_QWORD *)a6;
  *(_QWORD *)&v94 = a6;
  *((_QWORD *)&v94 + 1) = v47;
  while (v8 != v16)
  {
    if ((_QWORD **)v46 == v15)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, (uint64_t)(v8 + 4));
        v63 = (uint64_t *)v8[1];
        if (v63)
        {
          do
          {
            v64 = v63;
            v63 = (uint64_t *)*v63;
          }
          while (v63);
        }
        else
        {
          do
          {
            v64 = (uint64_t *)v8[2];
            v41 = *v64 == (_QWORD)v8;
            v8 = v64;
          }
          while (!v41);
        }
        v8 = v64;
      }
      while (v64 != v16);
      break;
    }
    v48 = v8[4];
    v49 = *((unsigned __int8 *)v8 + 48);
    v50 = (char)v49;
    v51 = *(unsigned __int8 *)(v46 + 48);
    v52 = *(_QWORD *)(v46 + 32);
    if (v49 == v51)
      v53 = v48 < v52;
    else
      v53 = (char)v49 < (char)v51;
    if (v53)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, (uint64_t)(v8 + 4));
      v54 = (uint64_t *)v8[1];
      if (v54)
      {
        do
        {
          v8 = v54;
          v54 = (uint64_t *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = v8;
          v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v55);
      }
    }
    else
    {
      v56 = v52 < v48;
      if (v50 != (char)v51)
        v56 = (char)v51 < v50;
      if (v56)
      {
        v57 = *(_QWORD **)(v46 + 8);
        if (v57)
        {
          do
          {
            v46 = (uint64_t)v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v58);
        }
      }
      else
      {
        v59 = (uint64_t *)v8[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (uint64_t *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (uint64_t *)v8[2];
            v41 = *v60 == (_QWORD)v8;
            v8 = v60;
          }
          while (!v41);
        }
        v61 = *(_QWORD **)(v46 + 8);
        if (v61)
        {
          do
          {
            v46 = (uint64_t)v61;
            v61 = (_QWORD *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v62);
        }
        v8 = v60;
      }
    }
  }
  if (!a5[2])
    goto LABEL_122;
  v65 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v66 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v65 + 4, (uint64_t)&v95);
  if ((v67 & 1) != 0)
  {
    v20 = v65[11];
    v69 = v65[12];
    if (v20 >= v69)
    {
      v71 = (char *)v65[10];
      v16 = (uint64_t *)(v20 - (_QWORD)v71);
      v72 = v20 - (_QWORD)v71 + 1;
      if (v72 < 0)
        goto LABEL_154;
      v73 = v69 - (_QWORD)v71;
      if (2 * v73 > v72)
        v72 = 2 * v73;
      if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
        v74 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
        v75 = (char *)operator new(v74);
      else
        v75 = 0;
      v76 = &v75[v74];
      v70 = (uint64_t)v16 + (_QWORD)v75 + 1;
      v77 = &v71[-v20];
      if (v71 == (char *)v20)
        v77 = 0;
      v65[10] = (uint64_t)v16 + (_QWORD)v75 + (unint64_t)v77;
      v65[11] = v70;
      v65[12] = (uint64_t)v76;
      if (v71)
        operator delete(v71);
    }
    else
    {
      v70 = v20 + 1;
    }
    v65[11] = v70;
    v9 = v65[31];
    goto LABEL_118;
  }
  v9 = v65[31];
  if (v65[10] + (((uint64_t)v66 - v65[7]) >> 3) == v65[11])
  {
LABEL_118:
    v8 = &v95;
    a5 = (uint64_t *)v65[22];
    if (a5)
    {
      v20 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = v9;
        v78 = a5[6];
        if (!v78)
          goto LABEL_151;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v78 + 48))(v78, &v94, &v96);
        a5 = (uint64_t *)*a5;
        if (!a5)
          goto LABEL_122;
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v65[16];
  if (a5)
  {
    v8 = &v95;
    v20 = 1;
    do
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = v9;
      v68 = a5[6];
      if (!v68)
        goto LABEL_151;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v68 + 48))(v68, &v94, &v96);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!*(_QWORD *)(a6 + 16))
    return;
  v79 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v80 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v79 + 4, (uint64_t)&v95);
  if ((v81 & 1) != 0)
  {
    v84 = (_BYTE *)v79[11];
    v83 = v79[12];
    if ((unint64_t)v84 < v83)
    {
      v85 = (uint64_t)(v84 + 1);
LABEL_145:
      v79[11] = v85;
      a2 = v79[31];
      goto LABEL_146;
    }
    v86 = (char *)v79[10];
    v8 = (uint64_t *)(v84 - v86);
    v87 = v84 - v86 + 1;
    if (v87 >= 0)
    {
      v88 = v83 - (_QWORD)v86;
      if (2 * v88 > v87)
        v87 = 2 * v88;
      if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
        v89 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
        v90 = (char *)operator new(v89);
      else
        v90 = 0;
      v91 = &v90[v89];
      v85 = (uint64_t)v8 + (_QWORD)v90 + 1;
      v92 = (char *)(v86 - v84);
      if (v86 == v84)
        v92 = 0;
      v79[10] = (uint64_t)v8 + (_QWORD)v90 + (unint64_t)v92;
      v79[11] = v85;
      v79[12] = (uint64_t)v91;
      if (v86)
        operator delete(v86);
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v79[31];
  if (v79[10] + (((uint64_t)v80 - v79[7]) >> 3) != v79[11])
  {
    a6 = v79[16];
    if (a6)
    {
      a5 = &v95;
      v9 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = a2;
        v82 = *(_QWORD *)(a6 + 48);
        if (!v82)
          break;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v82 + 48))(v82, &v94, &v96);
        a6 = *(_QWORD *)a6;
        if (!a6)
          return;
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v95;
  a6 = v79[22];
  if (a6)
  {
    v9 = 1;
    while (1)
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = a2;
      v93 = *(_QWORD *)(a6 + 48);
      if (!v93)
        break;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v93 + 48))(v93, &v94, &v96);
      a6 = *(_QWORD *)a6;
      if (!a6)
        return;
    }
    goto LABEL_151;
  }
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)62>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)62>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)62>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)62>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)62>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42705F8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)62>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42705F8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)62>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)75>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectMapDataLogic<(md::MapDataType)75>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)75>::didBecomeInactive(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    result = gdc::Registry::destroy(*(_QWORD *)(result + 128), *(_QWORD *)(result + 120));
    *(_QWORD *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::CollectMapDataContext<md::MapDataType::Flyover>]";
  v4[3] = 51;
  v4[4] = result;
  *v4 = &off_1E4270620;
  v4[1] = 0x4B05BEFA631D0889;
  *a2 = v4;
  return result;
}

void sub_19F652A34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x4B05BEFA631D0889 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x4B05BEFA631D0889 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x4B05BEFA631D0889 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0x4B05BEFA631D0889 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0x4B05BEFA631D0889 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::CollectMapDataLogic<(md::MapDataType)75>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  _WORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  _WORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _WORD *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  unint64_t v57;
  __int128 v58;
  __int16 v59;
  _QWORD *i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *j;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _QWORD *k;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  _QWORD *m;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  _QWORD *v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  _QWORD *n;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  _QWORD *v497;
  uint64_t *v498;
  uint64_t v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  uint64_t *v509;

  v5 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>(*(_QWORD *)(a1 + 128));
  v6 = v5;
  if (v5[29])
  {
    v7 = (_QWORD *)v5[28];
    if (v7)
    {
      v8 = (_QWORD *)v5[31];
      v9 = (uint64_t *)v5[7];
      v10 = (uint64_t)(v5[8] - (_QWORD)v9) >> 3;
      do
      {
        v505 = v9;
        v506 = v10;
        v500 = v8;
        v11 = v7[6];
        if (!v11)
          goto LABEL_516;
        (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v500, &v505);
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  v12 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>(*(_QWORD *)(a1 + 128));
  v13 = v12;
  if (v12[29])
  {
    v14 = (_QWORD *)v12[28];
    if (v14)
    {
      v15 = (_QWORD *)v12[31];
      v16 = (uint64_t *)v12[7];
      v17 = (uint64_t)(v12[8] - (_QWORD)v16) >> 3;
      do
      {
        v505 = v16;
        v506 = v17;
        v500 = v15;
        v18 = v14[6];
        if (!v18)
          goto LABEL_516;
        (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v18 + 48))(v18, &v500, &v505);
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
  v13[8] = v13[7];
  v13[11] = v13[10];
  v498 = *a3;
  v19 = *(_QWORD *)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1)
  {
    v20 = gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
    *(_QWORD *)(a1 + 120) = v20;
    v21 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)75>>(*(_QWORD *)(a1 + 128));
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v21, v20);
    v22 = *(_QWORD *)(a1 + 120);
    v23 = *(_QWORD *)(a1 + 128);
    v500 = (_QWORD *)0xBB954D24BDDBD352;
    v24 = *(int8x8_t *)(v23 + 128);
    if (v24)
    {
      v25 = (uint8x8_t)vcnt_s8(v24);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = 0xBB954D24BDDBD352;
        if (*(_QWORD *)&v24 <= 0xBB954D24BDDBD352)
          v26 = 0xBB954D24BDDBD352 % *(_QWORD *)&v24;
      }
      else
      {
        v26 = (*(_QWORD *)&v24 - 1) & 0xBB954D24BDDBD352;
      }
      v27 = *(_QWORD **)(*(_QWORD *)(v23 + 120) + 8 * v26);
      if (v27)
      {
        v28 = (_QWORD *)*v27;
        if (v28)
        {
          if (v25.u32[0] < 2uLL)
          {
            v29 = *(_QWORD *)&v24 - 1;
            while (1)
            {
              v31 = v28[1];
              if (v31 == 0xBB954D24BDDBD352)
              {
                if (v28[2] == 0xBB954D24BDDBD352)
                  goto LABEL_230;
              }
              else if ((v31 & v29) != v26)
              {
                goto LABEL_34;
              }
              v28 = (_QWORD *)*v28;
              if (!v28)
                goto LABEL_34;
            }
          }
          do
          {
            v30 = v28[1];
            if (v30 == 0xBB954D24BDDBD352)
            {
              if (v28[2] == 0xBB954D24BDDBD352)
              {
LABEL_230:
                v32 = v28[3];
                goto LABEL_37;
              }
            }
            else
            {
              if (v30 >= *(_QWORD *)&v24)
                v30 %= *(_QWORD *)&v24;
              if (v30 != v26)
                break;
            }
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_34:
    v32 = operator new();
    *(_QWORD *)(v32 + 16) = "SceneComponents::LayerDataInfo<md::MapDataType::Flyover>]";
    *(_QWORD *)(v32 + 24) = 56;
    *(_OWORD *)(v32 + 32) = 0u;
    *(_OWORD *)(v32 + 48) = 0u;
    *(_OWORD *)(v32 + 64) = 0u;
    *(_OWORD *)(v32 + 80) = 0u;
    *(_OWORD *)(v32 + 96) = 0u;
    *(_OWORD *)(v32 + 112) = 0u;
    *(_OWORD *)(v32 + 128) = 0u;
    *(_DWORD *)(v32 + 144) = 1065353216;
    *(_OWORD *)(v32 + 152) = 0u;
    *(_OWORD *)(v32 + 168) = 0u;
    *(_QWORD *)(v32 + 184) = 0;
    *(_DWORD *)(v32 + 192) = 1065353216;
    *(_OWORD *)(v32 + 200) = 0u;
    *(_OWORD *)(v32 + 216) = 0u;
    *(_QWORD *)(v32 + 232) = 0;
    *(_DWORD *)(v32 + 240) = 1065353216;
    *(_QWORD *)v32 = &off_1E42707E8;
    *(_QWORD *)(v32 + 8) = 0xBB954D24BDDBD352;
    *(_QWORD *)(v32 + 248) = v23;
    v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v23 + 120), 0xBB954D24BDDBD352, &v500);
    v34 = v33[3];
    v33[3] = v32;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v505 = (uint64_t *)0xBB954D24BDDBD352;
    v506 = (uint64_t)"SceneComponents::LayerDataInfo<md::MapDataType::Flyover>]";
    v507 = 56;
    gdc::Registry::_registerStorageDataSignals(v23, 0xBB954D24BDDBD352, (uint64_t)&v505, (uint64_t *)(v32 + 104));
LABEL_37:
    v504 = v22;
    v35 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v32 + 32), (uint64_t)&v504);
    if ((v36 & 1) != 0)
    {
      v42 = *(char **)(v32 + 88);
      v41 = *(_QWORD *)(v32 + 96);
      if ((unint64_t)v42 >= v41)
      {
        v44 = *(char **)(v32 + 80);
        v45 = v42 - v44;
        if (v42 - v44 <= -3)
          abort();
        v46 = v45 >> 1;
        v47 = v41 - (_QWORD)v44;
        if (v47 <= (v45 >> 1) + 1)
          v48 = v46 + 1;
        else
          v48 = v47;
        if (v47 >= 0x7FFFFFFFFFFFFFFELL)
          v49 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          if (v49 < 0)
            goto LABEL_521;
          v50 = operator new(2 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[2 * v46];
        v52 = &v50[2 * v49];
        *v51 = 75;
        v43 = v51 + 1;
        if (v42 != v44)
        {
          v53 = v42 - v44 - 2;
          if (v53 < 0x1E)
            goto LABEL_529;
          if (v42 - v50 - (v45 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_529;
          v54 = (v53 >> 1) + 1;
          v55 = &v50[2 * v46 - 16];
          v56 = v42 - 16;
          v57 = v54 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v58 = *(_OWORD *)v56;
            *(v55 - 1) = *((_OWORD *)v56 - 1);
            *v55 = v58;
            v55 -= 2;
            v56 -= 32;
            v57 -= 16;
          }
          while (v57);
          v51 -= v54 & 0xFFFFFFFFFFFFFFF0;
          v42 -= 2 * (v54 & 0xFFFFFFFFFFFFFFF0);
          if (v54 != (v54 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_529:
            do
            {
              v59 = *((_WORD *)v42 - 1);
              v42 -= 2;
              *--v51 = v59;
            }
            while (v42 != v44);
          }
        }
        *(_QWORD *)(v32 + 80) = v51;
        *(_QWORD *)(v32 + 88) = v43;
        *(_QWORD *)(v32 + 96) = v52;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_WORD *)v42 = 75;
        v43 = v42 + 2;
      }
      *(_QWORD *)(v32 + 88) = v43;
      v38 = *(_QWORD **)(v32 + 248);
    }
    else
    {
      v37 = (_WORD *)(*(_QWORD *)(v32 + 80) + (((uint64_t)v35 - *(_QWORD *)(v32 + 56)) >> 2));
      *v37 = 75;
      v38 = *(_QWORD **)(v32 + 248);
      if (v37 != *(_WORD **)(v32 + 88))
      {
        v39 = *(_QWORD **)(v32 + 128);
        if (v39)
        {
          while (1)
          {
            v505 = &v504;
            v506 = 1;
            v500 = v38;
            v40 = v39[6];
            if (!v40)
              break;
            (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v40 + 48))(v40, &v500, &v505);
            v39 = (_QWORD *)*v39;
            if (!v39)
              goto LABEL_69;
          }
LABEL_516:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_517:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
          return;
        }
        goto LABEL_69;
      }
    }
    for (i = *(_QWORD **)(v32 + 176); i; i = (_QWORD *)*i)
    {
      v505 = &v504;
      v506 = 1;
      v500 = v38;
      v61 = i[6];
      if (!v61)
        goto LABEL_516;
      (*(void (**)(uint64_t, _QWORD **, uint64_t **))(*(_QWORD *)v61 + 48))(v61, &v500, &v505);
    }
LABEL_69:
    v63 = *(_QWORD *)(a1 + 120);
    v62 = *(_QWORD *)(a1 + 128);
    v501 = 0;
    v502 = 0;
    v500 = &v501;
    v64 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)75>>(v62);
    v503 = v63;
    v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v503);
    if ((v66 & 1) != 0)
    {
      v71 = v64[12];
      v72 = (uint64_t *)v64[11];
      if ((unint64_t)v72 >= v71)
      {
        v74 = v64[10];
        v75 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v72 - v74) >> 3);
        if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v74) >> 3);
        v77 = 2 * v76;
        if (2 * v76 <= v75 + 1)
          v77 = v75 + 1;
        if (v76 >= 0x555555555555555)
          v78 = 0xAAAAAAAAAAAAAAALL;
        else
          v78 = v77;
        v509 = v64 + 12;
        if (v78)
        {
          if (v78 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_521;
          v79 = (uint64_t *)operator new(24 * v78);
        }
        else
        {
          v79 = 0;
        }
        v83 = &v79[3 * v75];
        v505 = v79;
        v506 = (uint64_t)v83;
        v507 = (uint64_t)v83;
        v508 = (char *)&v79[3 * v78];
        v83[1] = 0;
        v83[2] = 0;
        *v83 = (uint64_t)(v83 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v83, v500, &v501);
        v84 = v506;
        v73 = (uint64_t *)(v507 + 24);
        v85 = (char *)v64[10];
        v86 = (char *)v64[11];
        if (v86 == v85)
        {
          v64[10] = v506;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
        }
        else
        {
          v87 = 0;
          do
          {
            v88 = v84 + v87;
            *(_QWORD *)(v88 - 24) = *(_QWORD *)&v86[v87 - 24];
            v89 = &v86[v87 - 16];
            v90 = *(_QWORD *)v89;
            *(_QWORD *)(v84 + v87 - 16) = *(_QWORD *)v89;
            v91 = v84 + v87 - 16;
            v92 = *(_QWORD *)&v86[v87 - 8];
            *(_QWORD *)(v88 - 8) = v92;
            if (v92)
            {
              *(_QWORD *)(v90 + 16) = v91;
              *(_QWORD *)&v86[v87 - 24] = v89;
              *(_QWORD *)v89 = 0;
              *(_QWORD *)&v86[v87 - 8] = 0;
            }
            else
            {
              *(_QWORD *)(v88 - 24) = v91;
            }
            v87 -= 24;
          }
          while (&v86[v87] != v85);
          v93 = v84 + v87;
          v86 = (char *)v64[10];
          v94 = (char *)v64[11];
          v64[10] = v93;
          v64[11] = (uint64_t)v73;
          v64[12] = (uint64_t)v508;
          if (v94 != v86)
          {
            do
            {
              v95 = v94 - 24;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v94 - 2));
              v94 = v95;
            }
            while (v95 != v86);
          }
        }
        if (v86)
          operator delete(v86);
      }
      else
      {
        v72[2] = 0;
        v72[1] = 0;
        *v72 = (uint64_t)(v72 + 1);
        std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v72, v500, &v501);
        v73 = v72 + 3;
        v64[11] = (uint64_t)(v72 + 3);
      }
      v64[11] = (uint64_t)v73;
      v80 = v64[31];
    }
    else
    {
      v67 = v64[10] + 24 * (((uint64_t)v65 - v64[7]) >> 3);
      v68 = v67 + 8;
      std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v67 + 8));
      *(_QWORD *)v67 = v500;
      v69 = v501;
      *(_QWORD *)(v67 + 8) = v501;
      v70 = v502;
      *(_QWORD *)(v67 + 16) = v502;
      if (v70)
      {
        v69[2] = v68;
        v500 = &v501;
        v501 = 0;
        v502 = 0;
      }
      else
      {
        *(_QWORD *)v67 = v68;
      }
      v80 = v64[31];
      if (v67 != v64[11])
      {
        for (j = (_QWORD *)v64[16]; j; j = (_QWORD *)*j)
        {
          v505 = &v503;
          v506 = 1;
          v504 = v80;
          v82 = j[6];
          if (!v82)
            goto LABEL_517;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v82 + 48))(v82, &v504, &v505);
        }
LABEL_106:
        std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
        v99 = *(_QWORD *)(a1 + 120);
        v98 = *(_QWORD *)(a1 + 128);
        v501 = 0;
        v502 = 0;
        v500 = &v501;
        v100 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>(v98);
        v503 = v99;
        v101 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v100 + 4, (uint64_t)&v503);
        if ((v102 & 1) != 0)
        {
          v107 = v100[12];
          v108 = (uint64_t *)v100[11];
          if ((unint64_t)v108 >= v107)
          {
            v110 = v100[10];
            v111 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v108 - v110) >> 3);
            if (v111 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v110) >> 3);
            v113 = 2 * v112;
            if (2 * v112 <= v111 + 1)
              v113 = v111 + 1;
            if (v112 >= 0x555555555555555)
              v114 = 0xAAAAAAAAAAAAAAALL;
            else
              v114 = v113;
            v509 = v100 + 12;
            if (v114)
            {
              if (v114 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_521;
              v115 = (uint64_t *)operator new(24 * v114);
            }
            else
            {
              v115 = 0;
            }
            v119 = &v115[3 * v111];
            v505 = v115;
            v506 = (uint64_t)v119;
            v507 = (uint64_t)v119;
            v508 = (char *)&v115[3 * v114];
            v119[1] = 0;
            v119[2] = 0;
            *v119 = (uint64_t)(v119 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v119, v500, &v501);
            v120 = v506;
            v109 = (uint64_t *)(v507 + 24);
            v121 = (char *)v100[10];
            v122 = (char *)v100[11];
            if (v122 == v121)
            {
              v100[10] = v506;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
            }
            else
            {
              v123 = 0;
              do
              {
                v124 = v120 + v123;
                *(_QWORD *)(v124 - 24) = *(_QWORD *)&v122[v123 - 24];
                v125 = &v122[v123 - 16];
                v126 = *(_QWORD *)v125;
                *(_QWORD *)(v120 + v123 - 16) = *(_QWORD *)v125;
                v127 = v120 + v123 - 16;
                v128 = *(_QWORD *)&v122[v123 - 8];
                *(_QWORD *)(v124 - 8) = v128;
                if (v128)
                {
                  *(_QWORD *)(v126 + 16) = v127;
                  *(_QWORD *)&v122[v123 - 24] = v125;
                  *(_QWORD *)v125 = 0;
                  *(_QWORD *)&v122[v123 - 8] = 0;
                }
                else
                {
                  *(_QWORD *)(v124 - 24) = v127;
                }
                v123 -= 24;
              }
              while (&v122[v123] != v121);
              v129 = v120 + v123;
              v122 = (char *)v100[10];
              v130 = (char *)v100[11];
              v100[10] = v129;
              v100[11] = (uint64_t)v109;
              v100[12] = (uint64_t)v508;
              if (v130 != v122)
              {
                do
                {
                  v131 = v130 - 24;
                  std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v130 - 2));
                  v130 = v131;
                }
                while (v131 != v122);
              }
            }
            if (v122)
              operator delete(v122);
          }
          else
          {
            v108[2] = 0;
            v108[1] = 0;
            *v108 = (uint64_t)(v108 + 1);
            std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v108, v500, &v501);
            v109 = v108 + 3;
            v100[11] = (uint64_t)(v108 + 3);
          }
          v100[11] = (uint64_t)v109;
          v116 = v100[31];
        }
        else
        {
          v103 = v100[10] + 24 * (((uint64_t)v101 - v100[7]) >> 3);
          v104 = v103 + 8;
          std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v103 + 8));
          *(_QWORD *)v103 = v500;
          v105 = v501;
          *(_QWORD *)(v103 + 8) = v501;
          v106 = v502;
          *(_QWORD *)(v103 + 16) = v502;
          if (v106)
          {
            v105[2] = v104;
            v500 = &v501;
            v501 = 0;
            v502 = 0;
          }
          else
          {
            *(_QWORD *)v103 = v104;
          }
          v116 = v100[31];
          if (v103 != v100[11])
          {
            for (k = (_QWORD *)v100[16]; k; k = (_QWORD *)*k)
            {
              v505 = &v503;
              v506 = 1;
              v504 = v116;
              v118 = k[6];
              if (!v118)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v118 + 48))(v118, &v504, &v505);
            }
LABEL_143:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v135 = *(_QWORD *)(a1 + 120);
            v134 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = &v501;
            v136 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>(v134);
            v503 = v135;
            v137 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v136 + 4, (uint64_t)&v503);
            if ((v138 & 1) != 0)
            {
              v143 = v136[12];
              v144 = (uint64_t *)v136[11];
              if ((unint64_t)v144 >= v143)
              {
                v146 = v136[10];
                v147 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v144 - v146) >> 3);
                if (v147 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - v146) >> 3);
                v149 = 2 * v148;
                if (2 * v148 <= v147 + 1)
                  v149 = v147 + 1;
                if (v148 >= 0x555555555555555)
                  v150 = 0xAAAAAAAAAAAAAAALL;
                else
                  v150 = v149;
                v509 = v136 + 12;
                if (v150)
                {
                  if (v150 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_521;
                  v151 = (uint64_t *)operator new(24 * v150);
                }
                else
                {
                  v151 = 0;
                }
                v155 = &v151[3 * v147];
                v505 = v151;
                v506 = (uint64_t)v155;
                v507 = (uint64_t)v155;
                v508 = (char *)&v151[3 * v150];
                v155[1] = 0;
                v155[2] = 0;
                *v155 = (uint64_t)(v155 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v155, v500, &v501);
                v156 = v506;
                v145 = (uint64_t *)(v507 + 24);
                v157 = (char *)v136[10];
                v158 = (char *)v136[11];
                if (v158 == v157)
                {
                  v136[10] = v506;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                }
                else
                {
                  v159 = 0;
                  do
                  {
                    v160 = v156 + v159;
                    *(_QWORD *)(v160 - 24) = *(_QWORD *)&v158[v159 - 24];
                    v161 = &v158[v159 - 16];
                    v162 = *(_QWORD *)v161;
                    *(_QWORD *)(v156 + v159 - 16) = *(_QWORD *)v161;
                    v163 = v156 + v159 - 16;
                    v164 = *(_QWORD *)&v158[v159 - 8];
                    *(_QWORD *)(v160 - 8) = v164;
                    if (v164)
                    {
                      *(_QWORD *)(v162 + 16) = v163;
                      *(_QWORD *)&v158[v159 - 24] = v161;
                      *(_QWORD *)v161 = 0;
                      *(_QWORD *)&v158[v159 - 8] = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v160 - 24) = v163;
                    }
                    v159 -= 24;
                  }
                  while (&v158[v159] != v157);
                  v165 = v156 + v159;
                  v158 = (char *)v136[10];
                  v166 = (char *)v136[11];
                  v136[10] = v165;
                  v136[11] = (uint64_t)v145;
                  v136[12] = (uint64_t)v508;
                  if (v166 != v158)
                  {
                    do
                    {
                      v167 = v166 - 24;
                      std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v166 - 2));
                      v166 = v167;
                    }
                    while (v167 != v158);
                  }
                }
                if (v158)
                  operator delete(v158);
              }
              else
              {
                v144[2] = 0;
                v144[1] = 0;
                *v144 = (uint64_t)(v144 + 1);
                std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v144, v500, &v501);
                v145 = v144 + 3;
                v136[11] = (uint64_t)(v144 + 3);
              }
              v136[11] = (uint64_t)v145;
              v152 = v136[31];
            }
            else
            {
              v139 = v136[10] + 24 * (((uint64_t)v137 - v136[7]) >> 3);
              v140 = v139 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v139 + 8));
              *(_QWORD *)v139 = v500;
              v141 = v501;
              *(_QWORD *)(v139 + 8) = v501;
              v142 = v502;
              *(_QWORD *)(v139 + 16) = v502;
              if (v142)
              {
                v141[2] = v140;
                v500 = &v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v139 = v140;
              }
              v152 = v136[31];
              if (v139 != v136[11])
              {
                v153 = (_QWORD *)v136[16];
                if (v153)
                {
                  while (1)
                  {
                    v505 = &v503;
                    v506 = 1;
                    v504 = v152;
                    v154 = v153[6];
                    if (!v154)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v154 + 48))(v154, &v504, &v505);
                    v153 = (_QWORD *)*v153;
                    if (!v153)
                      goto LABEL_180;
                  }
                }
                goto LABEL_180;
              }
            }
            for (m = (_QWORD *)v136[22]; m; m = (_QWORD *)*m)
            {
              v505 = &v503;
              v506 = 1;
              v504 = v152;
              v169 = m[6];
              if (!v169)
                goto LABEL_517;
              (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v169 + 48))(v169, &v504, &v505);
            }
LABEL_180:
            std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
            v171 = *(_QWORD *)(a1 + 120);
            v170 = *(_QWORD *)(a1 + 128);
            v501 = 0;
            v502 = 0;
            v500 = &v501;
            v172 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>(v170);
            v503 = v171;
            v173 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v172 + 4, (uint64_t)&v503);
            if ((v174 & 1) == 0)
            {
              v175 = v172[10] + 24 * (((uint64_t)v173 - v172[7]) >> 3);
              v176 = v175 + 8;
              std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v175 + 8));
              *(_QWORD *)v175 = v500;
              v177 = v501;
              *(_QWORD *)(v175 + 8) = v501;
              v178 = v502;
              *(_QWORD *)(v175 + 16) = v502;
              if (v178)
              {
                v177[2] = v176;
                v500 = &v501;
                v501 = 0;
                v502 = 0;
              }
              else
              {
                *(_QWORD *)v175 = v176;
              }
              v188 = v172[31];
              if (v175 != v172[11])
              {
                v189 = (_QWORD *)v172[16];
                if (v189)
                {
                  while (1)
                  {
                    v505 = &v503;
                    v506 = 1;
                    v504 = v188;
                    v190 = v189[6];
                    if (!v190)
                      goto LABEL_517;
                    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v190 + 48))(v190, &v504, &v505);
                    v189 = (_QWORD *)*v189;
                    if (!v189)
                      goto LABEL_217;
                  }
                }
                goto LABEL_217;
              }
LABEL_214:
              for (n = (_QWORD *)v172[22]; n; n = (_QWORD *)*n)
              {
                v505 = &v503;
                v506 = 1;
                v504 = v188;
                v205 = n[6];
                if (!v205)
                  goto LABEL_517;
                (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v205 + 48))(v205, &v504, &v505);
              }
LABEL_217:
              std::__tree<gdc::LayerDataWithWorld>::destroy(v501);
              goto LABEL_218;
            }
            v179 = v172[12];
            v180 = (uint64_t *)v172[11];
            if ((unint64_t)v180 < v179)
            {
              v180[2] = 0;
              v180[1] = 0;
              *v180 = (uint64_t)(v180 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v180, v500, &v501);
              v181 = v180 + 3;
              v172[11] = (uint64_t)(v180 + 3);
LABEL_213:
              v172[11] = (uint64_t)v181;
              v188 = v172[31];
              goto LABEL_214;
            }
            v182 = v172[10];
            v183 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v180 - v182) >> 3);
            if (v183 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - v182) >> 3);
            v185 = 2 * v184;
            if (2 * v184 <= v183 + 1)
              v185 = v183 + 1;
            if (v184 >= 0x555555555555555)
              v186 = 0xAAAAAAAAAAAAAAALL;
            else
              v186 = v185;
            v509 = v172 + 12;
            if (!v186)
            {
              v187 = 0;
              goto LABEL_201;
            }
            if (v186 <= 0xAAAAAAAAAAAAAAALL)
            {
              v187 = (uint64_t *)operator new(24 * v186);
LABEL_201:
              v191 = &v187[3 * v183];
              v505 = v187;
              v506 = (uint64_t)v191;
              v507 = (uint64_t)v191;
              v508 = (char *)&v187[3 * v186];
              v191[1] = 0;
              v191[2] = 0;
              *v191 = (uint64_t)(v191 + 1);
              std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v191, v500, &v501);
              v192 = v506;
              v181 = (uint64_t *)(v507 + 24);
              v193 = (char *)v172[10];
              v194 = (char *)v172[11];
              if (v194 == v193)
              {
                v172[10] = v506;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
              }
              else
              {
                v195 = 0;
                do
                {
                  v196 = v192 + v195;
                  *(_QWORD *)(v196 - 24) = *(_QWORD *)&v194[v195 - 24];
                  v197 = &v194[v195 - 16];
                  v198 = *(_QWORD *)v197;
                  *(_QWORD *)(v192 + v195 - 16) = *(_QWORD *)v197;
                  v199 = v192 + v195 - 16;
                  v200 = *(_QWORD *)&v194[v195 - 8];
                  *(_QWORD *)(v196 - 8) = v200;
                  if (v200)
                  {
                    *(_QWORD *)(v198 + 16) = v199;
                    *(_QWORD *)&v194[v195 - 24] = v197;
                    *(_QWORD *)v197 = 0;
                    *(_QWORD *)&v194[v195 - 8] = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v196 - 24) = v199;
                  }
                  v195 -= 24;
                }
                while (&v194[v195] != v193);
                v201 = v192 + v195;
                v194 = (char *)v172[10];
                v202 = (char *)v172[11];
                v172[10] = v201;
                v172[11] = (uint64_t)v181;
                v172[12] = (uint64_t)v508;
                if (v202 != v194)
                {
                  do
                  {
                    v203 = v202 - 24;
                    std::__tree<gdc::LayerDataWithWorld>::destroy(*((_QWORD **)v202 - 2));
                    v202 = v203;
                  }
                  while (v203 != v194);
                }
              }
              if (v194)
                operator delete(v194);
              goto LABEL_213;
            }
LABEL_521:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
        }
        v132 = (_QWORD *)v100[22];
        if (v132)
        {
          while (1)
          {
            v505 = &v503;
            v506 = 1;
            v504 = v116;
            v133 = v132[6];
            if (!v133)
              goto LABEL_517;
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v133 + 48))(v133, &v504, &v505);
            v132 = (_QWORD *)*v132;
            if (!v132)
              goto LABEL_143;
          }
        }
        goto LABEL_143;
      }
    }
    v96 = (_QWORD *)v64[22];
    if (v96)
    {
      while (1)
      {
        v505 = &v503;
        v506 = 1;
        v504 = v80;
        v97 = v96[6];
        if (!v97)
          goto LABEL_517;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v97 + 48))(v97, &v504, &v505);
        v96 = (_QWORD *)*v96;
        if (!v96)
          goto LABEL_106;
      }
    }
    goto LABEL_106;
  }
LABEL_218:
  v499 = a1;
  v206 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)75>>(v19);
  v207 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)75>>(v19);
  v208 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>(v19);
  v209 = (_QWORD *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>(v19);
  v210 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>(v19);
  v211 = (_QWORD *)v210;
  v212 = v208 + 4;
  v213 = v209 + 4;
  v214 = v210 + 32;
  v216 = v206[7];
  v215 = v206[8];
  if (v207[8] - v207[7] >= (unint64_t)(v215 - v216))
    v217 = v206 + 4;
  else
    v217 = v207 + 4;
  if (v208[8] - v208[7] < v217[4] - v217[3])
    v217 = v208 + 4;
  if (v209[8] - v209[7] < v217[4] - v217[3])
    v217 = v209 + 4;
  if (*(_QWORD *)(v210 + 64) - *(_QWORD *)(v210 + 56) >= v217[4] - v217[3])
    v218 = v217;
  else
    v218 = (_QWORD *)(v210 + 32);
  if (v206 + 4 == v218)
  {
    v495 = v210 + 32;
    v505 = v498;
    v506 = v499;
    while (v216 != v215)
    {
      v220 = *(unsigned int *)(v216 + 4);
      v221 = v220 >> 7;
      v222 = v207[4];
      v223 = (v207[5] - v222) >> 3;
      if (v220 >> 7 < v223)
      {
        v224 = *(_QWORD *)(v222 + 8 * v221);
        if (v224)
        {
          v225 = v220 & 0x7F;
          v226 = *(unsigned __int16 *)(v224 + 2 * v225);
          v227 = v207[7];
          v228 = v207[8];
          v229 = (v228 - v227) >> 3;
          if (v229 > v226)
          {
            v230 = v227 + 8 * v226;
            if (v230 != v228 && *(_DWORD *)(v230 + 4) == (_DWORD)v220)
            {
              v232 = v208[4];
              v233 = (v208[5] - v232) >> 3;
              if (v221 < v233)
              {
                v234 = *(_QWORD *)(v232 + 8 * v221);
                if (v234)
                {
                  v235 = *(unsigned __int16 *)(v234 + 2 * v225);
                  v237 = v208[7];
                  v236 = v208[8];
                  v238 = (v236 - v237) >> 3;
                  if (v238 > v235)
                  {
                    v239 = v237 + 8 * v235;
                    if (v239 != v236 && *(_DWORD *)(v239 + 4) == (_DWORD)v220)
                    {
                      v241 = v209[4];
                      v242 = (v209[5] - v241) >> 3;
                      if (v221 < v242)
                      {
                        v243 = *(_QWORD *)(v241 + 8 * v221);
                        if (v243)
                        {
                          v244 = *(unsigned __int16 *)(v243 + 2 * v225);
                          v245 = v209[7];
                          v496 = v213;
                          v494 = v209[8];
                          v493 = (v494 - v245) >> 3;
                          if (v493 > v244)
                          {
                            v246 = v245 + 8 * v244;
                            if (v246 != v494 && *(_DWORD *)(v246 + 4) == (_DWORD)v220)
                            {
                              v492 = v211[4];
                              v491 = (v211[5] - v492) >> 3;
                              if (v221 < v491)
                              {
                                v248 = *(_QWORD *)(v492 + 8 * v221);
                                if (v248)
                                {
                                  v249 = *(unsigned __int16 *)(v248 + 2 * v225);
                                  v489 = v211[7];
                                  v490 = v211[8];
                                  if ((v490 - v489) >> 3 > v249)
                                  {
                                    v250 = v489 + 8 * v249;
                                    if (v250 != v490 && *(_DWORD *)(v250 + 4) == (_DWORD)v220)
                                    {
                                      v251 = *(_QWORD *)v216;
                                      v252 = HIDWORD(*(_QWORD *)v216);
                                      v253 = *(_QWORD *)v216 >> 39;
                                      if (v253 < v223
                                        && (v254 = *(_QWORD *)(v222 + 8 * v253)) != 0
                                        && (v255 = *(unsigned __int16 *)(v254 + 2 * (HIDWORD(v251) & 0x7F)), v229 > v255)
                                        && (v256 = v227 + 8 * v255, v256 != v228)
                                        && *(_DWORD *)(v256 + 4) == (_DWORD)v252)
                                      {
                                        v257 = (uint64_t *)(v207[10] + 24 * v255);
                                      }
                                      else
                                      {
                                        v257 = (uint64_t *)v207[11];
                                      }
                                      if (v253 < v233
                                        && (v258 = *(_QWORD *)(v232 + 8 * v253)) != 0
                                        && (v259 = *(unsigned __int16 *)(v258 + 2 * (HIDWORD(v251) & 0x7F)), v238 > v259)
                                        && (v260 = v237 + 8 * v259, v260 != v236)
                                        && *(_DWORD *)(v260 + 4) == (_DWORD)v252)
                                      {
                                        v261 = (uint64_t *)(v208[10] + 24 * v259);
                                      }
                                      else
                                      {
                                        v261 = (uint64_t *)v208[11];
                                      }
                                      v262 = HIDWORD(*(_QWORD *)v216);
                                      if (v253 < v242
                                        && (v263 = *(_QWORD *)(v241 + 8 * v253)) != 0
                                        && (v264 = *(unsigned __int16 *)(v263 + 2 * (HIDWORD(v251) & 0x7F)), v493 > v264)
                                        && (v265 = v245 + 8 * v264, v265 != v494)
                                        && *(_DWORD *)(v265 + 4) == (_DWORD)v262)
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)(v209[10] + 24 * v264);
                                      }
                                      else
                                      {
                                        v266 = (v490 - v489) >> 3;
                                        v267 = (uint64_t *)v209[11];
                                      }
                                      if (v253 < v491
                                        && (v268 = *(_QWORD *)(v492 + 8 * v253)) != 0
                                        && (v269 = *(unsigned __int16 *)(v268 + 2 * (HIDWORD(v251) & 0x7F)), v266 > v269)
                                        && (v270 = v489 + 8 * v269, v270 != v490)
                                        && *(_DWORD *)(v270 + 4) == (_DWORD)v262)
                                      {
                                        v219 = v211[10] + 24 * v269;
                                      }
                                      else
                                      {
                                        v219 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()((uint64_t)&v505, v251, v257, v261, v267, v219);
                                      v213 = v496;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v216 += 8;
    }
    v214 = v495;
  }
  v271 = v498;
  if (v207 + 4 != v218)
  {
    if (v212 != v218)
      goto LABEL_294;
LABEL_351:
    v326 = v213;
    v505 = v271;
    v506 = v499;
    v327 = v208[7];
    v328 = v208[8];
    if (v327 != v328)
    {
      v329 = (uint64_t *)v208[10];
      do
      {
        v331 = *(unsigned int *)(v327 + 4);
        v332 = v331 >> 7;
        v333 = v206[4];
        if (v331 >> 7 < (v206[5] - v333) >> 3)
        {
          v334 = *(_QWORD *)(v333 + 8 * v332);
          if (v334)
          {
            v335 = v331 & 0x7F;
            v336 = *(unsigned __int16 *)(v334 + 2 * v335);
            v338 = v206[7];
            v337 = v206[8];
            if (v336 < (v337 - v338) >> 3)
            {
              v339 = v338 + 8 * v336;
              if (v339 != v337 && *(_DWORD *)(v339 + 4) == (_DWORD)v331)
              {
                v341 = v207[4];
                v342 = (v207[5] - v341) >> 3;
                if (v332 < v342)
                {
                  v343 = *(_QWORD *)(v341 + 8 * v332);
                  if (v343)
                  {
                    v344 = *(unsigned __int16 *)(v343 + 2 * v335);
                    v346 = v207[7];
                    v345 = v207[8];
                    v347 = (v345 - v346) >> 3;
                    if (v347 > v344)
                    {
                      v348 = v346 + 8 * v344;
                      if (v348 != v345 && *(_DWORD *)(v348 + 4) == (_DWORD)v331)
                      {
                        v350 = v209[4];
                        v351 = (v209[5] - v350) >> 3;
                        if (v332 < v351)
                        {
                          v352 = *(_QWORD *)(v350 + 8 * v332);
                          if (v352)
                          {
                            v353 = *(unsigned __int16 *)(v352 + 2 * v335);
                            v355 = v209[7];
                            v354 = v209[8];
                            v356 = (v354 - v355) >> 3;
                            if (v356 > v353)
                            {
                              v357 = v355 + 8 * v353;
                              if (v357 != v354 && *(_DWORD *)(v357 + 4) == (_DWORD)v331)
                              {
                                v359 = v211[4];
                                v360 = (v211[5] - v359) >> 3;
                                if (v332 < v360)
                                {
                                  v361 = *(_QWORD *)(v359 + 8 * v332);
                                  if (v361)
                                  {
                                    v362 = *(unsigned __int16 *)(v361 + 2 * v335);
                                    v364 = v211[7];
                                    v363 = v211[8];
                                    v365 = (v363 - v364) >> 3;
                                    if (v365 > v362)
                                    {
                                      v366 = v364 + 8 * v362;
                                      if (v366 != v363 && *(_DWORD *)(v366 + 4) == (_DWORD)v331)
                                      {
                                        v367 = *(_QWORD *)v327;
                                        v368 = HIDWORD(*(_QWORD *)v327);
                                        v369 = *(_QWORD *)v327 >> 39;
                                        if (v369 < v342
                                          && (v370 = *(_QWORD *)(v341 + 8 * v369)) != 0
                                          && (v371 = *(unsigned __int16 *)(v370 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v347 > v371)
                                          && (v372 = v346 + 8 * v371, v372 != v345)
                                          && *(_DWORD *)(v372 + 4) == (_DWORD)v368)
                                        {
                                          v373 = (uint64_t *)(v207[10] + 24 * v371);
                                        }
                                        else
                                        {
                                          v373 = (uint64_t *)v207[11];
                                        }
                                        if (v369 < v351
                                          && (v374 = *(_QWORD *)(v350 + 8 * v369)) != 0
                                          && (v375 = *(unsigned __int16 *)(v374 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v356 > v375)
                                          && (v376 = v355 + 8 * v375, v376 != v354)
                                          && *(_DWORD *)(v376 + 4) == (_DWORD)v368)
                                        {
                                          v377 = (uint64_t *)(v209[10] + 24 * v375);
                                        }
                                        else
                                        {
                                          v377 = (uint64_t *)v209[11];
                                        }
                                        if (v369 < v360
                                          && (v378 = *(_QWORD *)(v359 + 8 * v369)) != 0
                                          && (v379 = *(unsigned __int16 *)(v378 + 2 * (HIDWORD(v367) & 0x7F)),
                                              v365 > v379)
                                          && (v380 = v364 + 8 * v379, v380 != v363)
                                          && *(_DWORD *)(v380 + 4) == (_DWORD)v368)
                                        {
                                          v330 = v211[10] + 24 * v379;
                                        }
                                        else
                                        {
                                          v330 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()((uint64_t)&v505, v367, v373, v329, v377, v330);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v329 += 3;
        v327 += 8;
      }
      while (v327 != v328);
    }
    if (v326 != v218)
      goto LABEL_460;
    goto LABEL_406;
  }
  v497 = v213;
  v505 = v498;
  v506 = v499;
  v272 = v207[7];
  v273 = v207[8];
  if (v272 != v273)
  {
    v274 = (uint64_t *)v207[10];
    do
    {
      v276 = *(unsigned int *)(v272 + 4);
      v277 = v276 >> 7;
      v278 = v206[4];
      if (v276 >> 7 < (v206[5] - v278) >> 3)
      {
        v279 = *(_QWORD *)(v278 + 8 * v277);
        if (v279)
        {
          v280 = v276 & 0x7F;
          v281 = *(unsigned __int16 *)(v279 + 2 * v280);
          v283 = v206[7];
          v282 = v206[8];
          if (v281 < (v282 - v283) >> 3)
          {
            v284 = v283 + 8 * v281;
            if (v284 != v282 && *(_DWORD *)(v284 + 4) == (_DWORD)v276)
            {
              v286 = v208[4];
              v287 = (v208[5] - v286) >> 3;
              if (v277 < v287)
              {
                v288 = *(_QWORD *)(v286 + 8 * v277);
                if (v288)
                {
                  v289 = *(unsigned __int16 *)(v288 + 2 * v280);
                  v291 = v208[7];
                  v290 = v208[8];
                  v292 = (v290 - v291) >> 3;
                  if (v292 > v289)
                  {
                    v293 = v291 + 8 * v289;
                    if (v293 != v290 && *(_DWORD *)(v293 + 4) == (_DWORD)v276)
                    {
                      v295 = v209[4];
                      v296 = (v209[5] - v295) >> 3;
                      if (v277 < v296)
                      {
                        v297 = *(_QWORD *)(v295 + 8 * v277);
                        if (v297)
                        {
                          v298 = *(unsigned __int16 *)(v297 + 2 * v280);
                          v300 = v209[7];
                          v299 = v209[8];
                          v301 = (v299 - v300) >> 3;
                          if (v301 > v298)
                          {
                            v302 = v300 + 8 * v298;
                            if (v302 != v299 && *(_DWORD *)(v302 + 4) == (_DWORD)v276)
                            {
                              v304 = v211[4];
                              v305 = (v211[5] - v304) >> 3;
                              if (v277 < v305)
                              {
                                v306 = *(_QWORD *)(v304 + 8 * v277);
                                if (v306)
                                {
                                  v307 = *(unsigned __int16 *)(v306 + 2 * v280);
                                  v309 = v211[7];
                                  v308 = v211[8];
                                  v310 = (v308 - v309) >> 3;
                                  if (v310 > v307)
                                  {
                                    v311 = v309 + 8 * v307;
                                    if (v311 != v308 && *(_DWORD *)(v311 + 4) == (_DWORD)v276)
                                    {
                                      v312 = *(_QWORD *)v272;
                                      v313 = HIDWORD(*(_QWORD *)v272);
                                      v314 = *(_QWORD *)v272 >> 39;
                                      if (v314 < v287
                                        && (v315 = *(_QWORD *)(v286 + 8 * v314)) != 0
                                        && (v316 = *(unsigned __int16 *)(v315 + 2 * (HIDWORD(v312) & 0x7F)), v292 > v316)
                                        && (v317 = v291 + 8 * v316, v317 != v290)
                                        && *(_DWORD *)(v317 + 4) == (_DWORD)v313)
                                      {
                                        v318 = (uint64_t *)(v208[10] + 24 * v316);
                                      }
                                      else
                                      {
                                        v318 = (uint64_t *)v208[11];
                                      }
                                      if (v314 < v296
                                        && (v319 = *(_QWORD *)(v295 + 8 * v314)) != 0
                                        && (v320 = *(unsigned __int16 *)(v319 + 2 * (HIDWORD(v312) & 0x7F)), v301 > v320)
                                        && (v321 = v300 + 8 * v320, v321 != v299)
                                        && *(_DWORD *)(v321 + 4) == (_DWORD)v313)
                                      {
                                        v322 = (uint64_t *)(v209[10] + 24 * v320);
                                      }
                                      else
                                      {
                                        v322 = (uint64_t *)v209[11];
                                      }
                                      if (v314 < v305
                                        && (v323 = *(_QWORD *)(v304 + 8 * v314)) != 0
                                        && (v324 = *(unsigned __int16 *)(v323 + 2 * (HIDWORD(v312) & 0x7F)), v310 > v324)
                                        && (v325 = v309 + 8 * v324, v325 != v308)
                                        && *(_DWORD *)(v325 + 4) == (_DWORD)v313)
                                      {
                                        v275 = v211[10] + 24 * v324;
                                      }
                                      else
                                      {
                                        v275 = v211[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()((uint64_t)&v505, v312, v274, v318, v322, v275);
                                      v271 = v498;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v274 += 3;
      v272 += 8;
    }
    while (v272 != v273);
  }
  v213 = v497;
  if (v212 == v218)
    goto LABEL_351;
LABEL_294:
  if (v213 == v218)
  {
LABEL_406:
    v505 = v271;
    v506 = v499;
    v381 = v209[7];
    v382 = v209[8];
    if (v381 != v382)
    {
      v383 = (uint64_t *)v209[10];
      do
      {
        v385 = *(unsigned int *)(v381 + 4);
        v386 = v385 >> 7;
        v387 = v206[4];
        if (v385 >> 7 < (v206[5] - v387) >> 3)
        {
          v388 = *(_QWORD *)(v387 + 8 * v386);
          if (v388)
          {
            v389 = v385 & 0x7F;
            v390 = *(unsigned __int16 *)(v388 + 2 * v389);
            v392 = v206[7];
            v391 = v206[8];
            if (v390 < (v391 - v392) >> 3)
            {
              v393 = v392 + 8 * v390;
              if (v393 != v391 && *(_DWORD *)(v393 + 4) == (_DWORD)v385)
              {
                v395 = v207[4];
                v396 = (v207[5] - v395) >> 3;
                if (v386 < v396)
                {
                  v397 = *(_QWORD *)(v395 + 8 * v386);
                  if (v397)
                  {
                    v398 = *(unsigned __int16 *)(v397 + 2 * v389);
                    v400 = v207[7];
                    v399 = v207[8];
                    v401 = (v399 - v400) >> 3;
                    if (v401 > v398)
                    {
                      v402 = v400 + 8 * v398;
                      if (v402 != v399 && *(_DWORD *)(v402 + 4) == (_DWORD)v385)
                      {
                        v404 = v208[4];
                        v405 = (v208[5] - v404) >> 3;
                        if (v386 < v405)
                        {
                          v406 = *(_QWORD *)(v404 + 8 * v386);
                          if (v406)
                          {
                            v407 = *(unsigned __int16 *)(v406 + 2 * v389);
                            v409 = v208[7];
                            v408 = v208[8];
                            v410 = (v408 - v409) >> 3;
                            if (v410 > v407)
                            {
                              v411 = v409 + 8 * v407;
                              if (v411 != v408 && *(_DWORD *)(v411 + 4) == (_DWORD)v385)
                              {
                                v413 = v211[4];
                                v414 = (v211[5] - v413) >> 3;
                                if (v386 < v414)
                                {
                                  v415 = *(_QWORD *)(v413 + 8 * v386);
                                  if (v415)
                                  {
                                    v416 = *(unsigned __int16 *)(v415 + 2 * v389);
                                    v418 = v211[7];
                                    v417 = v211[8];
                                    v419 = (v417 - v418) >> 3;
                                    if (v419 > v416)
                                    {
                                      v420 = v418 + 8 * v416;
                                      if (v420 != v417 && *(_DWORD *)(v420 + 4) == (_DWORD)v385)
                                      {
                                        v421 = *(_QWORD *)v381;
                                        v422 = HIDWORD(*(_QWORD *)v381);
                                        v423 = *(_QWORD *)v381 >> 39;
                                        if (v423 < v396
                                          && (v424 = *(_QWORD *)(v395 + 8 * v423)) != 0
                                          && (v425 = *(unsigned __int16 *)(v424 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v401 > v425)
                                          && (v426 = v400 + 8 * v425, v426 != v399)
                                          && *(_DWORD *)(v426 + 4) == (_DWORD)v422)
                                        {
                                          v427 = (uint64_t *)(v207[10] + 24 * v425);
                                        }
                                        else
                                        {
                                          v427 = (uint64_t *)v207[11];
                                        }
                                        if (v423 < v405
                                          && (v428 = *(_QWORD *)(v404 + 8 * v423)) != 0
                                          && (v429 = *(unsigned __int16 *)(v428 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v410 > v429)
                                          && (v430 = v409 + 8 * v429, v430 != v408)
                                          && *(_DWORD *)(v430 + 4) == (_DWORD)v422)
                                        {
                                          v431 = (uint64_t *)(v208[10] + 24 * v429);
                                        }
                                        else
                                        {
                                          v431 = (uint64_t *)v208[11];
                                        }
                                        if (v423 < v414
                                          && (v432 = *(_QWORD *)(v413 + 8 * v423)) != 0
                                          && (v433 = *(unsigned __int16 *)(v432 + 2 * (HIDWORD(v421) & 0x7F)),
                                              v419 > v433)
                                          && (v434 = v418 + 8 * v433, v434 != v417)
                                          && *(_DWORD *)(v434 + 4) == (_DWORD)v422)
                                        {
                                          v384 = v211[10] + 24 * v433;
                                        }
                                        else
                                        {
                                          v384 = v211[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()((uint64_t)&v505, v421, v427, v431, v383, v384);
                                        v271 = v498;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v383 += 3;
        v381 += 8;
      }
      while (v381 != v382);
    }
  }
LABEL_460:
  if ((_QWORD *)v214 == v218)
  {
    v505 = v271;
    v506 = v499;
    v435 = v211[7];
    v436 = v211[8];
    if (v435 != v436)
    {
      v437 = v211[10];
      do
      {
        v439 = *(unsigned int *)(v435 + 4);
        v440 = v439 >> 7;
        v441 = v206[4];
        if (v439 >> 7 < (v206[5] - v441) >> 3)
        {
          v442 = *(_QWORD *)(v441 + 8 * v440);
          if (v442)
          {
            v443 = v439 & 0x7F;
            v444 = *(unsigned __int16 *)(v442 + 2 * v443);
            v446 = v206[7];
            v445 = v206[8];
            if (v444 < (v445 - v446) >> 3)
            {
              v447 = v446 + 8 * v444;
              if (v447 != v445 && *(_DWORD *)(v447 + 4) == (_DWORD)v439)
              {
                v449 = v207[4];
                v450 = (v207[5] - v449) >> 3;
                if (v440 < v450)
                {
                  v451 = *(_QWORD *)(v449 + 8 * v440);
                  if (v451)
                  {
                    v452 = *(unsigned __int16 *)(v451 + 2 * v443);
                    v454 = v207[7];
                    v453 = v207[8];
                    v455 = (v453 - v454) >> 3;
                    if (v455 > v452)
                    {
                      v456 = v454 + 8 * v452;
                      if (v456 != v453 && *(_DWORD *)(v456 + 4) == (_DWORD)v439)
                      {
                        v458 = v208[4];
                        v459 = (v208[5] - v458) >> 3;
                        if (v440 < v459)
                        {
                          v460 = *(_QWORD *)(v458 + 8 * v440);
                          if (v460)
                          {
                            v461 = *(unsigned __int16 *)(v460 + 2 * v443);
                            v463 = v208[7];
                            v462 = v208[8];
                            v464 = (v462 - v463) >> 3;
                            if (v464 > v461)
                            {
                              v465 = v463 + 8 * v461;
                              if (v465 != v462 && *(_DWORD *)(v465 + 4) == (_DWORD)v439)
                              {
                                v467 = v209[4];
                                v468 = (v209[5] - v467) >> 3;
                                if (v440 < v468)
                                {
                                  v469 = *(_QWORD *)(v467 + 8 * v440);
                                  if (v469)
                                  {
                                    v470 = *(unsigned __int16 *)(v469 + 2 * v443);
                                    v472 = v209[7];
                                    v471 = v209[8];
                                    v473 = (v471 - v472) >> 3;
                                    if (v473 > v470)
                                    {
                                      v474 = v472 + 8 * v470;
                                      if (v474 != v471 && *(_DWORD *)(v474 + 4) == (_DWORD)v439)
                                      {
                                        v475 = *(_QWORD *)v435;
                                        v476 = HIDWORD(*(_QWORD *)v435);
                                        v477 = *(_QWORD *)v435 >> 39;
                                        if (v477 < v450
                                          && (v478 = *(_QWORD *)(v449 + 8 * v477)) != 0
                                          && (v479 = *(unsigned __int16 *)(v478 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v455 > v479)
                                          && (v480 = v454 + 8 * v479, v480 != v453)
                                          && *(_DWORD *)(v480 + 4) == (_DWORD)v476)
                                        {
                                          v481 = (uint64_t *)(v207[10] + 24 * v479);
                                        }
                                        else
                                        {
                                          v481 = (uint64_t *)v207[11];
                                        }
                                        if (v477 < v459
                                          && (v482 = *(_QWORD *)(v458 + 8 * v477)) != 0
                                          && (v483 = *(unsigned __int16 *)(v482 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v464 > v483)
                                          && (v484 = v463 + 8 * v483, v484 != v462)
                                          && *(_DWORD *)(v484 + 4) == (_DWORD)v476)
                                        {
                                          v485 = (uint64_t *)(v208[10] + 24 * v483);
                                        }
                                        else
                                        {
                                          v485 = (uint64_t *)v208[11];
                                        }
                                        if (v477 < v468
                                          && (v486 = *(_QWORD *)(v467 + 8 * v477)) != 0
                                          && (v487 = *(unsigned __int16 *)(v486 + 2 * (HIDWORD(v475) & 0x7F)),
                                              v473 > v487)
                                          && (v488 = v472 + 8 * v487, v488 != v471)
                                          && *(_DWORD *)(v488 + 4) == (_DWORD)v476)
                                        {
                                          v438 = (uint64_t *)(v209[10] + 24 * v487);
                                        }
                                        else
                                        {
                                          v438 = (uint64_t *)v209[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()((uint64_t)&v505, v475, v481, v485, v438, v437);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v437 += 24;
        v435 += 8;
      }
      while (v435 != v436);
    }
  }
}

void sub_19F654F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _QWORD **v17;
  va_list va;

  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA19C6E667D4CEBF2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA19C6E667D4CEBF2;
      if (*(_QWORD *)&v3 <= 0xA19C6E667D4CEBF2)
        v5 = 0xA19C6E667D4CEBF2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA19C6E667D4CEBF2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA19C6E667D4CEBF2)
            {
              if (v7[2] == 0xA19C6E667D4CEBF2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA19C6E667D4CEBF2)
          {
            if (v7[2] == 0xA19C6E667D4CEBF2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidEnterView<md::MapDataType::Flyover>]";
  *(_QWORD *)(v11 + 24) = 64;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270C68;
  *(_QWORD *)(v11 + 8) = 0xA19C6E667D4CEBF2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA19C6E667D4CEBF2, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA19C6E667D4CEBF2;
  v15[1] = "SceneComponents::LayerDataDidEnterView<md::MapDataType::Flyover>]";
  v15[2] = 64;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA19C6E667D4CEBF2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6552BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE07DAC1C2C3A7252;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE07DAC1C2C3A7252;
      if (*(_QWORD *)&v3 <= 0xE07DAC1C2C3A7252)
        v5 = 0xE07DAC1C2C3A7252 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE07DAC1C2C3A7252;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE07DAC1C2C3A7252)
            {
              if (v7[2] == 0xE07DAC1C2C3A7252)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE07DAC1C2C3A7252)
          {
            if (v7[2] == 0xE07DAC1C2C3A7252)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataDidExitView<md::MapDataType::Flyover>]";
  *(_QWORD *)(v11 + 24) = 63;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270AE8;
  *(_QWORD *)(v11 + 8) = 0xE07DAC1C2C3A7252;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE07DAC1C2C3A7252, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE07DAC1C2C3A7252;
  v15[1] = "SceneComponents::LayerDataDidExitView<md::MapDataType::Flyover>]";
  v15[2] = 63;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE07DAC1C2C3A7252, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F6554E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7A74CBDBCED9A99FLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7A74CBDBCED9A99FLL;
      if (*(_QWORD *)&v3 <= 0x7A74CBDBCED9A99FuLL)
        v5 = 0x7A74CBDBCED9A99FuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7A74CBDBCED9A99FLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7A74CBDBCED9A99FLL)
            {
              if (v7[2] == 0x7A74CBDBCED9A99FLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7A74CBDBCED9A99FLL)
          {
            if (v7[2] == 0x7A74CBDBCED9A99FLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataExitingView<md::MapDataType::Flyover>]";
  *(_QWORD *)(v11 + 24) = 63;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270BA8;
  *(_QWORD *)(v11 + 8) = 0x7A74CBDBCED9A99FLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7A74CBDBCED9A99FuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7A74CBDBCED9A99FLL;
  v15[1] = "SceneComponents::LayerDataExitingView<md::MapDataType::Flyover>]";
  v15[2] = 63;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7A74CBDBCED9A99FLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F65570C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xBEE7CE736059D671;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xBEE7CE736059D671;
      if (*(_QWORD *)&v3 <= 0xBEE7CE736059D671)
        v5 = 0xBEE7CE736059D671 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xBEE7CE736059D671;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xBEE7CE736059D671)
            {
              if (v7[2] == 0xBEE7CE736059D671)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xBEE7CE736059D671)
          {
            if (v7[2] == 0xBEE7CE736059D671)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "SceneComponents::LayerDataPreviousInView<md::MapDataType::Flyover>]";
  *(_QWORD *)(v11 + 24) = 66;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E4270DE8;
  *(_QWORD *)(v11 + 8) = 0xBEE7CE736059D671;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xBEE7CE736059D671, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xBEE7CE736059D671;
  v15[1] = "SceneComponents::LayerDataPreviousInView<md::MapDataType::Flyover>]";
  v15[2] = 66;
  gdc::Registry::_registerStorageDataSignals(a1, 0xBEE7CE736059D671, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F655934(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  unint64_t v20;
  unsigned __int8 v21;
  _WORD *v22;
  _WORD *v23;
  uint64_t *v24;
  _WORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  _BOOL4 v33;
  _QWORD *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  _BOOL4 v53;
  uint64_t *v54;
  uint64_t *v55;
  _BOOL4 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  size_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;

  v8 = a4;
  v9 = (uint64_t)a3;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  v15 = (_QWORD **)(a3 + 1);
  v14 = a3[1];
  v16 = a4 + 1;
  v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2])
    v18 = (uint64_t *)(a3[1] + 16);
  else
    v18 = a3;
  *v18 = (uint64_t)v15;
  v19 = (uint64_t **)(*v16 + 16);
  if (!v17)
    v19 = (uint64_t **)a4;
  *v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(_QWORD *)v9 = v15;
  *(_QWORD *)(v9 + 16) = 0;
  *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((_QWORD *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a6 + 8));
  *(_QWORD *)a6 = a6 + 8;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v20 = **(_QWORD **)a1;
  if ((v21 & 1) == 0)
  {
LABEL_152:
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
  }
  v22 = *(_WORD **)(v20 + 48);
  v23 = *(_WORD **)(v20 + 56);
  v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v22 != v23)
  {
    v25 = *(_WORD **)(v20 + 48);
    while (*v25 != 75)
    {
      v25 += 16;
      if (v25 == v23)
        goto LABEL_18;
    }
    if (v25 == v23)
    {
      v24 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v22 != 75)
      {
        v22 += 16;
        if (v22 == v23)
        {
          v22 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      v24 = (uint64_t *)(v22 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (_QWORD *)*v24, v24 + 1);
  v20 = *(_QWORD *)v9;
  v26 = (uint64_t *)*v8;
  v27 = (uint64_t *)*a5;
  *(_QWORD *)&v94 = a5;
  *((_QWORD *)&v94 + 1) = v27;
  while ((_QWORD **)v20 != v15)
  {
    if (v26 == v16)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, v20 + 32);
        v44 = *(_QWORD **)(v20 + 8);
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = *(_QWORD **)(v20 + 16);
            v41 = *v45 == v20;
            v20 = (unint64_t)v45;
          }
          while (!v41);
        }
        v20 = (unint64_t)v45;
      }
      while (v45 != v15);
      break;
    }
    v28 = *(_QWORD *)(v20 + 32);
    v29 = *(unsigned __int8 *)(v20 + 48);
    v30 = (char)v29;
    v31 = *((unsigned __int8 *)v26 + 48);
    v32 = v26[4];
    if (v29 == v31)
      v33 = v28 < v32;
    else
      v33 = (char)v29 < (char)v31;
    if (v33)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, v20 + 32);
      v34 = *(_QWORD **)(v20 + 8);
      if (v34)
      {
        do
        {
          v20 = (unint64_t)v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = v20;
          v20 = *(_QWORD *)(v20 + 16);
        }
        while (*(_QWORD *)v20 != v35);
      }
    }
    else
    {
      v36 = v32 < v28;
      if (v30 != (char)v31)
        v36 = (char)v31 < v30;
      if (v36)
      {
        v37 = (uint64_t *)v26[1];
        if (v37)
        {
          do
          {
            v26 = v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            v38 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v38);
        }
      }
      else
      {
        v39 = *(_QWORD **)(v20 + 8);
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = *(_QWORD **)(v20 + 16);
            v41 = *v40 == v20;
            v20 = (unint64_t)v40;
          }
          while (!v41);
        }
        v42 = (uint64_t *)v26[1];
        if (v42)
        {
          do
          {
            v26 = v42;
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = v26;
            v26 = (uint64_t *)v26[2];
          }
          while ((uint64_t *)*v26 != v43);
        }
        v20 = (unint64_t)v40;
      }
    }
  }
  v8 = (uint64_t *)*v8;
  v46 = *(_QWORD *)v9;
  v47 = *(_QWORD *)a6;
  *(_QWORD *)&v94 = a6;
  *((_QWORD *)&v94 + 1) = v47;
  while (v8 != v16)
  {
    if ((_QWORD **)v46 == v15)
    {
      v96 = v94;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v96, (uint64_t)(v8 + 4));
        v63 = (uint64_t *)v8[1];
        if (v63)
        {
          do
          {
            v64 = v63;
            v63 = (uint64_t *)*v63;
          }
          while (v63);
        }
        else
        {
          do
          {
            v64 = (uint64_t *)v8[2];
            v41 = *v64 == (_QWORD)v8;
            v8 = v64;
          }
          while (!v41);
        }
        v8 = v64;
      }
      while (v64 != v16);
      break;
    }
    v48 = v8[4];
    v49 = *((unsigned __int8 *)v8 + 48);
    v50 = (char)v49;
    v51 = *(unsigned __int8 *)(v46 + 48);
    v52 = *(_QWORD *)(v46 + 32);
    if (v49 == v51)
      v53 = v48 < v52;
    else
      v53 = (char)v49 < (char)v51;
    if (v53)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((_QWORD **)&v94, (uint64_t)(v8 + 4));
      v54 = (uint64_t *)v8[1];
      if (v54)
      {
        do
        {
          v8 = v54;
          v54 = (uint64_t *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = v8;
          v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v55);
      }
    }
    else
    {
      v56 = v52 < v48;
      if (v50 != (char)v51)
        v56 = (char)v51 < v50;
      if (v56)
      {
        v57 = *(_QWORD **)(v46 + 8);
        if (v57)
        {
          do
          {
            v46 = (uint64_t)v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v58);
        }
      }
      else
      {
        v59 = (uint64_t *)v8[1];
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (uint64_t *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = (uint64_t *)v8[2];
            v41 = *v60 == (_QWORD)v8;
            v8 = v60;
          }
          while (!v41);
        }
        v61 = *(_QWORD **)(v46 + 8);
        if (v61)
        {
          do
          {
            v46 = (uint64_t)v61;
            v61 = (_QWORD *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = v46;
            v46 = *(_QWORD *)(v46 + 16);
          }
          while (*(_QWORD *)v46 != v62);
        }
        v8 = v60;
      }
    }
  }
  if (!a5[2])
    goto LABEL_122;
  v65 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v66 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v65 + 4, (uint64_t)&v95);
  if ((v67 & 1) != 0)
  {
    v20 = v65[11];
    v69 = v65[12];
    if (v20 >= v69)
    {
      v71 = (char *)v65[10];
      v16 = (uint64_t *)(v20 - (_QWORD)v71);
      v72 = v20 - (_QWORD)v71 + 1;
      if (v72 < 0)
        goto LABEL_154;
      v73 = v69 - (_QWORD)v71;
      if (2 * v73 > v72)
        v72 = 2 * v73;
      if (v73 >= 0x3FFFFFFFFFFFFFFFLL)
        v74 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
        v75 = (char *)operator new(v74);
      else
        v75 = 0;
      v76 = &v75[v74];
      v70 = (uint64_t)v16 + (_QWORD)v75 + 1;
      v77 = &v71[-v20];
      if (v71 == (char *)v20)
        v77 = 0;
      v65[10] = (uint64_t)v16 + (_QWORD)v75 + (unint64_t)v77;
      v65[11] = v70;
      v65[12] = (uint64_t)v76;
      if (v71)
        operator delete(v71);
    }
    else
    {
      v70 = v20 + 1;
    }
    v65[11] = v70;
    v9 = v65[31];
    goto LABEL_118;
  }
  v9 = v65[31];
  if (v65[10] + (((uint64_t)v66 - v65[7]) >> 3) == v65[11])
  {
LABEL_118:
    v8 = &v95;
    a5 = (uint64_t *)v65[22];
    if (a5)
    {
      v20 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = v9;
        v78 = a5[6];
        if (!v78)
          goto LABEL_151;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v78 + 48))(v78, &v94, &v96);
        a5 = (uint64_t *)*a5;
        if (!a5)
          goto LABEL_122;
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v65[16];
  if (a5)
  {
    v8 = &v95;
    v20 = 1;
    do
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = v9;
      v68 = a5[6];
      if (!v68)
        goto LABEL_151;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v68 + 48))(v68, &v94, &v96);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!*(_QWORD *)(a6 + 16))
    return;
  v79 = (uint64_t *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>(*(_QWORD *)(v12 + 128));
  v95 = a2;
  v80 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v79 + 4, (uint64_t)&v95);
  if ((v81 & 1) != 0)
  {
    v84 = (_BYTE *)v79[11];
    v83 = v79[12];
    if ((unint64_t)v84 < v83)
    {
      v85 = (uint64_t)(v84 + 1);
LABEL_145:
      v79[11] = v85;
      a2 = v79[31];
      goto LABEL_146;
    }
    v86 = (char *)v79[10];
    v8 = (uint64_t *)(v84 - v86);
    v87 = v84 - v86 + 1;
    if (v87 >= 0)
    {
      v88 = v83 - (_QWORD)v86;
      if (2 * v88 > v87)
        v87 = 2 * v88;
      if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
        v89 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
        v90 = (char *)operator new(v89);
      else
        v90 = 0;
      v91 = &v90[v89];
      v85 = (uint64_t)v8 + (_QWORD)v90 + 1;
      v92 = (char *)(v86 - v84);
      if (v86 == v84)
        v92 = 0;
      v79[10] = (uint64_t)v8 + (_QWORD)v90 + (unint64_t)v92;
      v79[11] = v85;
      v79[12] = (uint64_t)v91;
      if (v86)
        operator delete(v86);
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v79[31];
  if (v79[10] + (((uint64_t)v80 - v79[7]) >> 3) != v79[11])
  {
    a6 = v79[16];
    if (a6)
    {
      a5 = &v95;
      v9 = 1;
      while (1)
      {
        *(_QWORD *)&v96 = &v95;
        *((_QWORD *)&v96 + 1) = 1;
        *(_QWORD *)&v94 = a2;
        v82 = *(_QWORD *)(a6 + 48);
        if (!v82)
          break;
        (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v82 + 48))(v82, &v94, &v96);
        a6 = *(_QWORD *)a6;
        if (!a6)
          return;
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v95;
  a6 = v79[22];
  if (a6)
  {
    v9 = 1;
    while (1)
    {
      *(_QWORD *)&v96 = &v95;
      *((_QWORD *)&v96 + 1) = 1;
      *(_QWORD *)&v94 = a2;
      v93 = *(_QWORD *)(a6 + 48);
      if (!v93)
        break;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v93 + 48))(v93, &v94, &v96);
      a6 = *(_QWORD *)a6;
      if (!a6)
        return;
    }
    goto LABEL_151;
  }
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != (_DWORD)v10 || v11 == v8)
    return 0;
  v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(_QWORD **)(v15 - 24), (_QWORD *)(v15 - 16));
    v15 = a1[11];
  }
  v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v15 - 16));
  a1[11] = v16;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)75>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)75>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)75>>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)75>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

_QWORD *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)75>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E4270620;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)75>>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E4270620;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)75>>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)79>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  return a1;
}

void md::CollectMapDataLogic<(md::MapDataType)79>::~CollectMapDataLogic(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 80));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)79>::didBecomeInactive(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    result = gdc::Registry::destroy(*(_QWORD *)(result + 128), *(_QWORD *)(result + 120));
    *(_QWORD *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::CollectMapDataContext<md::MapDataType::PolarFlyover>]";
  v4[3] = 56;
  v4[4] = result;
  *v4 = &off_1E4270648;
  v4[1] = 0xE4007F1EDCD91179;
  *a2 = v4;
  return result;
}

void sub_19F656A74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xE4007F1EDCD91179 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xE4007F1EDCD91179 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 8) != 0xE4007F1EDCD91179 || !*(_QWORD *)(a3 + 32))
    return result;
  v3 = *(_QWORD **)(a2 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_26;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v4 <= 0x99BED48DEFBBD82BLL)
      v6 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_26;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_26;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_24;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_26;
LABEL_13:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_26;
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_13;
LABEL_24:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  v13 = 0;
LABEL_27:
  v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
}

